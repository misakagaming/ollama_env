15495	private int currentDepth ( ) { try { Integer oneBased = ( ( Integer ) DEPTH_FIELD . get ( this ) ) ; return oneBased - _NUM ; } catch ( IllegalAccessException e ) { throw new AssertionError ( e ) ; } }
37963	protected boolean [ ] datasetIntegrity ( boolean nominalPredictor , boolean numericPredictor , boolean stringPredictor , boolean datePredictor , boolean relationalPredictor , boolean multiInstance , int classType , boolean predictorMissing , boolean classMissing ) { print ( _STR ) ; printAttributeSummary ( nominalPredictor , numericPredictor , stringPredictor , datePredictor , relationalPredictor , multiInstance , classType ) ; print ( _STR ) ; int numTrain = getNumInstances ( ) , numClasses = _NUM , missingLevel = _NUM ; boolean [ ] result = new boolean [ _NUM ] ; Instances train = null ; Kernel kernel = null ; try { train = makeTestDataset ( _NUM , numTrain , nominalPredictor ? getNumNominal ( ) : _NUM , numericPredictor ? getNumNumeric ( ) : _NUM , stringPredictor ? getNumString ( ) : _NUM , datePredictor ? getNumDate ( ) : _NUM , relationalPredictor ? getNumRelational ( ) : _NUM , numClasses , classType , multiInstance ) ; if ( missingLevel > _NUM ) { addMissing ( train , missingLevel , predictorMissing , classMissing ) ; } kernel = Kernel . makeCopies ( getKernel ( ) , _NUM ) [ _NUM ] ; } catch ( Exception ex ) { throw new Error ( _STR + ex . getMessage ( ) ) ; } try { Instances trainCopy = new Instances ( train ) ; kernel . buildKernel ( trainCopy ) ; compareDatasets ( train , trainCopy ) ; println ( _STR ) ; result [ _NUM ] = _BOOL ; } catch ( Exception ex ) { println ( _STR ) ; result [ _NUM ] = _BOOL ; if ( m_Debug ) { println ( _STR ) ; print ( _STR ) ; println ( _STR + ex . getMessage ( ) + _STR ) ; println ( _STR ) ; println ( _STR + train . toString ( ) + _STR ) ; } } return result ; }
53306	public static int unionSize ( long [ ] x , long [ ] y ) { final int lx = x . length , ly = y . length ; final int min = ( lx < ly ) ? lx : ly ; int i = _NUM , res = _NUM ; for ( ; i < min ; i ++ ) { res += Long . bitCount ( x [ i ] | y [ i ] ) ; } for ( ; i < lx ; i ++ ) { res += Long . bitCount ( x [ i ] ) ; } for ( ; i < ly ; i ++ ) { res += Long . bitCount ( y [ i ] ) ; } return res ; }
32488	public void testReverseOrder4 ( ) throws Exception { UUID id = UUID . randomUUID ( ) ; GridCacheAdapter < String , String > cache = grid . internalCache ( ) ; GridCacheContext < String , String > ctx = cache . context ( ) ; GridCacheTestEntryEx entry1 = new GridCacheTestEntryEx ( ctx , _STR ) ; GridCacheTestEntryEx entry2 = new GridCacheTestEntryEx ( ctx , _STR ) ; GridCacheVersion ver1 = version ( _NUM ) ; GridCacheVersion ver2 = version ( _NUM ) ; GridCacheVersion ver3 = version ( _NUM ) ; GridCacheMvccCandidate v3k1 = entry1 . addLocal ( _NUM , ver3 , _NUM , _BOOL , _BOOL ) ; GridCacheMvccCandidate v3k2 = entry2 . addLocal ( _NUM , ver3 , _NUM , _BOOL , _BOOL ) ; linkCandidates ( ctx , v3k1 , v3k2 ) ; entry1 . readyLocal ( ver3 ) ; checkLocal ( v3k1 , ver3 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v3k2 , ver3 , _BOOL , _BOOL , _BOOL ) ; GridCacheMvccCandidate v1k1 = entry1 . addLocal ( _NUM , ver1 , _NUM , _BOOL , _BOOL ) ; GridCacheMvccCandidate v1k2 = entry2 . addLocal ( _NUM , ver1 , _NUM , _BOOL , _BOOL ) ; linkCandidates ( ctx , v1k1 , v1k2 ) ; entry1 . readyLocal ( ver1 ) ; entry2 . readyLocal ( ver1 ) ; checkLocal ( v3k1 , ver3 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v3k2 , ver3 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v1k1 , ver1 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v1k2 , ver1 , _BOOL , _BOOL , _BOOL ) ; GridCacheMvccCandidate v2k2 = entry2 . addRemote ( id , _NUM , ver2 , _NUM , _BOOL , _BOOL ) ; checkRemote ( v2k2 , ver2 , _BOOL , _BOOL ) ; entry2 . readyLocal ( v3k2 ) ; checkLocal ( v3k1 , ver3 , _BOOL , _BOOL , _BOOL ) ; checkLocal ( v3k2 , ver3 , _BOOL , _BOOL , _BOOL ) ; }
38468	@ Override public void closingOK ( ) { List < AddUserFields . AttributeSpec > specs = new ArrayList < AddUserFields . AttributeSpec > ( ) ; for ( int i = _NUM ; i < m_listModel . size ( ) ; i ++ ) { AddUserFields . AttributeSpec a = ( AddUserFields . AttributeSpec ) m_listModel . elementAt ( i ) ; specs . add ( a ) ; } if ( m_modifyL != null ) { m_modifyL . setModifiedStatus ( AddUserFieldsCustomizer . this , _BOOL ) ; } m_filter . setAttributeSpecs ( specs ) ; }
37987	public String toString ( ) { StringBuffer text = new StringBuffer ( ) ; if ( ( m_classAttribute == null ) ) { return _STR ; } try { text . append ( _STR ) ; text . append ( _STR + m_kernel . toString ( ) + _STR ) ; for ( int i = _NUM ; i < m_classAttribute . numValues ( ) ; i ++ ) { for ( int j = i + _NUM ; j < m_classAttribute . numValues ( ) ; j ++ ) { text . append ( _STR + m_classAttribute . value ( i ) + _STR + m_classAttribute . value ( j ) + _STR ) ; text . append ( m_classifiers [ i ] [ j ] ) ; if ( m_fitLogisticModels ) { text . append ( _STR ) ; if ( m_classifiers [ i ] [ j ] . m_logistic == null ) { text . append ( _STR ) ; } else { text . append ( m_classifiers [ i ] [ j ] . m_logistic ) ; } } text . append ( _STR ) ; } } } catch ( Exception e ) { return _STR ; } return text . toString ( ) ; }
27016	public final Sector union ( Sector that ) { if ( that == null ) return this ; Angle minLat = this . minLatitude ; Angle maxLat = this . maxLatitude ; Angle minLon = this . minLongitude ; Angle maxLon = this . maxLongitude ; if ( that . minLatitude . degrees < this . minLatitude . degrees ) minLat = that . minLatitude ; if ( that . maxLatitude . degrees > this . maxLatitude . degrees ) maxLat = that . maxLatitude ; if ( that . minLongitude . degrees < this . minLongitude . degrees ) minLon = that . minLongitude ; if ( that . maxLongitude . degrees > this . maxLongitude . degrees ) maxLon = that . maxLongitude ; return new Sector ( minLat , maxLat , minLon , maxLon ) ; }
20101	private static boolean isDoubleEqual ( double value , double valueToCompare ) { return ( Math . abs ( value - valueToCompare ) < _NUM ) ; }
18649	public void testIntValuePos ( ) { String a = _STR ; BigDecimal aNumber = new BigDecimal ( a ) ; int result = - _NUM ; assertTrue ( _STR , aNumber . intValue ( ) == result ) ; }
64161	private void walk ( File directory , int depth , Collection < T > results ) throws IOException { checkIfCancelled ( directory , depth , results ) ; if ( handleDirectory ( directory , depth , results ) ) { handleDirectoryStart ( directory , depth , results ) ; int childDepth = depth + _NUM ; if ( depthLimit < _NUM || childDepth <= depthLimit ) { checkIfCancelled ( directory , depth , results ) ; File [ ] childFiles = filter == null ? directory . listFiles ( ) : directory . listFiles ( filter ) ; childFiles = filterDirectoryContents ( directory , depth , childFiles ) ; if ( childFiles == null ) { handleRestricted ( directory , childDepth , results ) ; } else { for ( File childFile : childFiles ) { if ( childFile . isDirectory ( ) ) { walk ( childFile , childDepth , results ) ; } else { checkIfCancelled ( childFile , childDepth , results ) ; handleFile ( childFile , childDepth , results ) ; checkIfCancelled ( childFile , childDepth , results ) ; } } } } handleDirectoryEnd ( directory , depth , results ) ; } checkIfCancelled ( directory , depth , results ) ; }
63817	public static Object [ ] ordinalArray ( TupleSet tuples , String field ) { return ordinalArray ( tuples , field , DefaultLiteralComparator . getInstance ( ) ) ; }
18713	public void testDivideExceptionInvalidRM ( ) { String a = _STR ; int aScale = _NUM ; String b = _STR ; int bScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; try { aNumber . divide ( bNumber , _NUM ) ; fail ( _STR ) ; } catch ( IllegalArgumentException e ) { assertEquals ( _STR , _STR , e . getMessage ( ) ) ; } }
7488	@ Override public void datasetChanged ( DatasetChangeEvent event ) { super . datasetChanged ( event ) ; if ( this . subplots == null ) { return ; } XYDataset dataset = null ; if ( event . getDataset ( ) instanceof XYDataset ) { dataset = ( XYDataset ) event . getDataset ( ) ; } for ( XYPlot subplot : this . subplots ) { if ( subplot . indexOf ( dataset ) >= _NUM ) { subplot . configureRangeAxes ( ) ; } } }
26930	public boolean onScheduleAsLibrary ( Config config , Config runtime , IScheduler scheduler , PackingPlan packing ) { boolean ret = _BOOL ; try { scheduler . initialize ( config , runtime ) ; ret = scheduler . onSchedule ( packing ) ; if ( ret ) { ret = SchedulerUtils . setLibSchedulerLocation ( runtime , scheduler , _BOOL ) ; } else { LOG . severe ( _STR ) ; } } finally { scheduler . close ( ) ; } return ret ; }
66883	public static boolean isStringType ( Type t ) { return t . equals ( RefType . v ( _STR ) ) ; }
2968	public Entry updateOrCreateSource ( User user , String id , String url , String title , Long modTime , Long createTime , boolean isAdmin , Errors errors ) { if ( user == null ) { Errors . add ( errors , errorMessages . errorUserIsNull ( ) ) ; return null ; } if ( url == null ) { Errors . add ( errors , errorMessages . errorUrlIsNull ( ) ) ; return null ; } Entry source = getEntryByUserIdAndUrl ( user . getId ( ) , url ) ; if ( source == null ) { if ( url . isEmpty ( ) ) { Errors . add ( errors , errorMessages . errorUrlIsEmpty ( ) ) ; return null ; } if ( title == null ) { Errors . add ( errors , errorMessages . errorTitleIsNull ( ) ) ; return null ; } if ( title . isEmpty ( ) ) { Errors . add ( errors , errorMessages . errorTitleIsEmpty ( ) ) ; return null ; } if ( modTime == null ) { Errors . add ( errors , errorMessages . errorModTimeIsNull ( ) ) ; return null ; } if ( createTime == null ) { Errors . add ( errors , errorMessages . errorCreateTimeIsNull ( ) ) ; return null ; } if ( id != null && ! idGenerator . isIdWellFormed ( id ) ) { Errors . add ( errors , errorMessages . errorIdIsInvalid ( ) ) ; return null ; } if ( createTime . longValue ( ) > modTime . longValue ( ) ) { modTime = createTime ; } if ( url != null ) { url = cleanUpText ( url ) ; } if ( title != null ) { title = cleanUpText ( title ) ; } source = new Entry ( ) ; source . setDb ( db ) ; if ( id == null ) { id = idGenerator . getAnotherId ( ) ; } source . setId ( id ) ; source . setSourceUrl ( url ) ; source . setSourceTitle ( title ) ; source . setCreateTime ( createTime ) ; source . setType ( Constants . source ) ; source . setUserId ( user . getId ( ) ) ; db . persistEntry ( source ) ; } else if ( ! canUserModifyEntry ( user , source , isAdmin ) ) { Errors . add ( errors , errorMessages . errorUserIsNotEntitledToModifyTheSource ( ) ) ; return null ; } source . setModTime ( modTime ) ; return source ; }
56795	private void validateSqlStatement ( String sql , int jdbcStatementIndex ) { Assert . isTrue ( StringUtils . isNotBlank ( sql ) , _STR + jdbcStatementIndex + _STR ) ; }
10150	public static Long [ ] valuesOf ( long [ ] array ) { Long [ ] dest = new Long [ array . length ] ; for ( int i = _NUM ; i < array . length ; i ++ ) { dest [ i ] = Long . valueOf ( array [ i ] ) ; } return dest ; }
12360	@ Override public boolean isTraceEnabled ( ) { return logger . isLoggable ( Level . FINEST ) ; }
80601	private static void useMissile ( Player player ) { StackableItem projectilesItem = null ; if ( player . getRangeWeapon ( ) != null ) { projectilesItem = player . getAmmunition ( ) ; } if ( projectilesItem == null ) { projectilesItem = player . getMissileIfNotHoldingOtherWeapon ( ) ; } if ( projectilesItem != null ) { projectilesItem . removeOne ( ) ; } }
25383	public TcpMatcher ( final NetworkConfig config ) { super ( config ) ; }
20694	private int determineMaxLevelRec ( int level , Node v ) { int newLevel = level ; for ( Edge e = v . getFirstOutEdge ( ) ; e != null ; e = v . getNextOutEdge ( e ) ) { newLevel = Math . max ( newLevel , determineMaxLevelRec ( level , e . getTarget ( ) ) + _NUM ) ; } return newLevel ; }
49452	protected void requestPassCodeConfirmation ( ) { clearBoxes ( ) ; mPassCodeHdr . setText ( R . string . pass_code_reenter_your_pass_code ) ; mPassCodeHdrExplanation . setVisibility ( View . INVISIBLE ) ; mConfirmingPassCode = _BOOL ; }
47090	private void addWorkerFailed ( Worker w ) { final ReentrantLock mainLock = this . mainLock ; mainLock . lock ( ) ; try { if ( w != null ) workers . remove ( w ) ; decrementWorkerCount ( ) ; tryTerminate ( ) ; } finally { mainLock . unlock ( ) ; } }
19375	public void testInsert4 ( ) throws SQLException { DatabaseCreator . fillSimpleTable1 ( conn ) ; statement . execute ( _STR + DatabaseCreator . SIMPLE_TABLE2 + _STR + DatabaseCreator . SIMPLE_TABLE1 ) ; ResultSet r = statement . executeQuery ( _STR + DatabaseCreator . SIMPLE_TABLE2 + _STR + DatabaseCreator . SIMPLE_TABLE1 + _STR ) ; r . next ( ) ; assertEquals ( _STR , _NUM , r . getInt ( _NUM ) ) ; r . close ( ) ; }
25997	private synchronized void putMapEntry ( String localId , MapEntry entry ) { if ( ! isLocalId ( localId ) ) { throw new IllegalStateException ( _STR + localId + _STR ) ; } JSONObject json = new JSONObject ( ) ; try { json . put ( _STR , entry . retainCount ) ; if ( entry . objectId != null ) { json . put ( _STR , entry . objectId ) ; } } catch ( JSONException je ) { throw new IllegalStateException ( _STR , je ) ; } File file = new File ( diskPath , localId ) ; if ( ! diskPath . exists ( ) ) { diskPath . mkdirs ( ) ; } try { ParseFileUtils . writeJSONObjectToFile ( file , json ) ; } catch ( IOException e ) { } }
61349	public void endElement ( String namespaceURI , String localName , String name ) throws org . xml . sax . SAXException { if ( m_inEntityRef ) return ; m_prefixMap . popNamespaces ( m_elemContext . m_currentElemDepth , null ) ; try { final java . io . Writer writer = m_writer ; if ( m_elemContext . m_startTagOpen ) { if ( m_tracer != null ) super . fireStartElem ( m_elemContext . m_elementName ) ; int nAttrs = m_attributes . getLength ( ) ; if ( nAttrs > _NUM ) { processAttributes ( m_writer , nAttrs ) ; m_attributes . clear ( ) ; } if ( m_spaceBeforeClose ) writer . write ( _STR ) ; else writer . write ( _STR ) ; } else { if ( m_cdataTagOpen ) closeCDATA ( ) ; if ( shouldIndent ( ) ) indent ( m_elemContext . m_currentElemDepth - _NUM ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; writer . write ( name ) ; writer . write ( _STR ) ; } } catch ( IOException e ) { throw new SAXException ( e ) ; } if ( ! m_elemContext . m_startTagOpen && m_doIndent ) { m_ispreserve = m_preserves . isEmpty ( ) ? _BOOL : m_preserves . pop ( ) ; } m_isprevtext = _BOOL ; if ( m_tracer != null ) super . fireEndElem ( name ) ; m_elemContext = m_elemContext . m_prev ; }
67965	public static void f ( String msg , Object ... args ) { if ( ! allowWtf ) return ; StackTraceElement caller = getCallerStackTraceElement ( ) ; String tag = generateTag ( caller ) ; if ( sLevel > LEVEL_FATAL ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . wtf ( tag , msg ) ; }
74215	public void deleteLeaves ( String name ) { for ( int i = _NUM ; i < _leaves . size ( ) ; i ++ ) { CatalogTreeLeaf leaf = _leaves . get ( i ) ; if ( name . equals ( leaf . getName ( ) ) ) { _leaves . remove ( i ) ; } } }
27882	public String toString ( ) { final StringBuffer s = new StringBuffer ( ) ; final int size = size ( ) ; for ( int i = _NUM ; i < size ; i ++ ) s . append ( getInt ( i ) ) ; return s . toString ( ) ; }
4673	protected boolean validate ( final char [ ] component , final int soffset , int eoffset , final BitSet generous ) { if ( eoffset == - _NUM ) { eoffset = component . length - _NUM ; } for ( int i = soffset ; i <= eoffset ; i ++ ) { if ( ! generous . get ( component [ i ] ) ) { return _BOOL ; } } return _BOOL ; }
35618	private void buildPieces ( ) { pieces = new Piece [ pathArray . size ( ) ] ; Paint paint = new Paint ( ) ; Matrix matrix = new Matrix ( ) ; Canvas canvas = new Canvas ( ) ; for ( int i = _NUM ; i < pieces . length ; i ++ ) { int shadow = Utils . nextInt ( Utils . dp2px ( _NUM ) , Utils . dp2px ( _NUM ) ) ; Path path = pathArray . get ( i ) ; RectF r = new RectF ( ) ; path . computeBounds ( r , _BOOL ) ; Bitmap pBitmap = Utils . createBitmapSafely ( ( int ) r . width ( ) + shadow * _NUM , ( int ) r . height ( ) + shadow * _NUM , Bitmap . Config . ARGB_4444 , _NUM ) ; if ( pBitmap == null ) { pieces [ i ] = new Piece ( - _NUM , - _NUM , null , shadow ) ; continue ; } pieces [ i ] = new Piece ( ( int ) r . left + mTouchPoint . x - shadow , ( int ) r . top + mTouchPoint . y - shadow , pBitmap , shadow ) ; canvas . setBitmap ( pieces [ i ] . bitmap ) ; BitmapShader mBitmapShader = new BitmapShader ( mBitmap , Shader . TileMode . CLAMP , Shader . TileMode . CLAMP ) ; matrix . reset ( ) ; matrix . setTranslate ( - r . left - offsetX + shadow , - r . top - offsetY + shadow ) ; mBitmapShader . setLocalMatrix ( matrix ) ; paint . reset ( ) ; Path offsetPath = new Path ( ) ; offsetPath . addPath ( path , - r . left + shadow , - r . top + shadow ) ; paint . setStyle ( Paint . Style . FILL ) ; paint . setShadowLayer ( shadow , _NUM , _NUM , _NUM ) ; canvas . drawPath ( offsetPath , paint ) ; paint . setShadowLayer ( _NUM , _NUM , _NUM , _NUM ) ; paint . setXfermode ( new PorterDuffXfermode ( PorterDuff . Mode . XOR ) ) ; canvas . drawPath ( offsetPath , paint ) ; paint . setXfermode ( null ) ; paint . setShader ( mBitmapShader ) ; paint . setAlpha ( _NUM ) ; canvas . drawPath ( offsetPath , paint ) ; } Arrays . sort ( pieces ) ; }
42226	public boolean removeShutdownHook ( Thread hook ) { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPermission ( RuntimePermissionCollection . SHUTDOWN_HOOKS_PERMISSION ) ; } if ( hook == null ) throw new NullPointerException ( _STR ) ; if ( VMState > _NUM ) { throw new IllegalStateException ( ) ; } synchronized ( hooksList ) { return hooksList . remove ( hook ) ; } }
54799	public void run ( ) { while ( m_keyboardStream != null ) { try { if ( m_keyboardReadRequest ) { String s = m_keyboardStream . readLine ( ) ; m_keyboardInput . add ( s ) ; m_keyboardReadRequest = _BOOL ; synchronized ( this ) { notifyAll ( ) ; } } else try { Thread . sleep ( _NUM ) ; } catch ( InterruptedException ie ) { } } catch ( IOException io ) { } } }
84544	public boolean boundScroll ( ) { float curScroll = getStackScroll ( ) ; float newScroll = getBoundedStackScroll ( curScroll ) ; if ( Float . compare ( newScroll , curScroll ) != _NUM ) { setStackScroll ( newScroll ) ; return _BOOL ; } return _BOOL ; }
37730	@ Override public AggregateableEvaluation aggregate ( Evaluation evaluation ) { m_Incorrect += evaluation . incorrect ( ) ; m_Correct += evaluation . correct ( ) ; m_Unclassified += evaluation . unclassified ( ) ; m_MissingClass += evaluation . m_MissingClass ; m_WithClass += evaluation . m_WithClass ; if ( evaluation . m_ConfusionMatrix != null ) { double [ ] [ ] newMatrix = evaluation . confusionMatrix ( ) ; if ( newMatrix != null ) { for ( int i = _NUM ; i < m_ConfusionMatrix . length ; i ++ ) { for ( int j = _NUM ; j < m_ConfusionMatrix [ i ] . length ; j ++ ) { m_ConfusionMatrix [ i ] [ j ] += newMatrix [ i ] [ j ] ; } } } } double [ ] newClassPriors = evaluation . m_ClassPriors ; if ( newClassPriors != null && m_ClassPriors != null ) { for ( int i = _NUM ; i < this . m_ClassPriors . length ; i ++ ) { m_ClassPriors [ i ] = newClassPriors [ i ] ; } } m_ClassPriorsSum = evaluation . m_ClassPriorsSum ; m_TotalCost += evaluation . totalCost ( ) ; m_SumErr += evaluation . m_SumErr ; m_SumAbsErr += evaluation . m_SumAbsErr ; m_SumSqrErr += evaluation . m_SumSqrErr ; m_SumClass += evaluation . m_SumClass ; m_SumSqrClass += evaluation . m_SumSqrClass ; m_SumPredicted += evaluation . m_SumPredicted ; m_SumSqrPredicted += evaluation . m_SumSqrPredicted ; m_SumClassPredicted += evaluation . m_SumClassPredicted ; m_SumPriorAbsErr += evaluation . m_SumPriorAbsErr ; m_SumPriorSqrErr += evaluation . m_SumPriorSqrErr ; m_SumKBInfo += evaluation . m_SumKBInfo ; double [ ] newMarginCounts = evaluation . m_MarginCounts ; if ( newMarginCounts != null ) { for ( int i = _NUM ; i < m_MarginCounts . length ; i ++ ) { m_MarginCounts [ i ] += newMarginCounts [ i ] ; } } m_ComplexityStatisticsAvailable = evaluation . m_ComplexityStatisticsAvailable ; m_CoverageStatisticsAvailable = evaluation . m_CoverageStatisticsAvailable ; m_SumPriorEntropy += evaluation . m_SumPriorEntropy ; m_SumSchemeEntropy += evaluation . m_SumSchemeEntropy ; m_TotalSizeOfRegions += evaluation . m_TotalSizeOfRegions ; m_TotalCoverage += evaluation . m_TotalCoverage ; ArrayList < Prediction > predsToAdd = evaluation . m_Predictions ; if ( predsToAdd != null ) { if ( m_Predictions == null ) { m_Predictions = new ArrayList < Prediction > ( ) ; } for ( int i = _NUM ; i < predsToAdd . size ( ) ; i ++ ) { m_Predictions . add ( predsToAdd . get ( i ) ) ; } } return this ; }
22559	public void waitForVolumesToBeVisible ( CGRequestParams request ) { scan ( request . getCopies ( ) , request . getRsets ( ) ) ; }
23710	protected void startAdditionalServices ( final Cache cache , final Map < String , Object > options ) throws Exception { }
66785	public void updateView ( ) { if ( fInputElement != null && fParentComposite != null ) { IndicatorViewState oldState = fStateMap . get ( fInputElement ) ; boolean reload = fFilesToReoad . contains ( fInputElement ) ; if ( reload || oldState == null ) { JsonObject jsonObject = DroidsafePluginUtilities . parseIndicatorFile ( fInputElement ) ; if ( jsonObject == null ) return ; fFilesToReoad . remove ( fInputElement ) ; fState = new IndicatorViewState ( fInputElement , jsonObject , getSecuritySpec ( ) , oldState ) ; fStateMap . put ( fInputElement , fState ) ; } else { fState = oldState ; } setPartName ( fState . indicatorType ) ; showPage ( PAGE_VIEWER ) ; fTreeViewer . setInput ( fState . jsonObject ) ; if ( fTreeViewer . getSorter ( ) == null ) sortByField ( getSortByField ( ) ) ; } else { setPartName ( DEFAULT_PART_NAME ) ; } }
38443	@ Override public void paint ( Graphics g ) { g . drawImage ( image , _NUM , _NUM , this ) ; if ( ! paintCalled ) { paintCalled = _BOOL ; synchronized ( this ) { notifyAll ( ) ; } } }
38792	@ Override public boolean connectionAllowed ( String eventName ) { if ( m_listenees . containsKey ( eventName ) ) { return _BOOL ; } return _BOOL ; }
68051	public boolean isPrefixed ( ) { return name . indexOf ( _STR ) >= _NUM ; }
71337	public void releaseAnyConnection ( Connection connection ) throws SQLException { try { connection . close ( ) ; } catch ( Exception ex ) { throw new RuntimeException ( ex ) ; } }
50146	public QuickActionView addActions ( Collection < Action > actions ) { checkShown ( ) ; mActions . addAll ( actions ) ; return this ; }
81874	public void addSeriesRenderer ( int index , SimpleSeriesRenderer renderer ) { mRenderers . add ( index , renderer ) ; }
5867	public static boolean copyStream ( InputStream is , OutputStream os , CopyListener listener , int bufferSize ) throws IOException { int current = _NUM ; int total = is . available ( ) ; if ( total <= _NUM ) { total = DEFAULT_IMAGE_TOTAL_SIZE ; } final byte [ ] bytes = new byte [ bufferSize ] ; int count ; if ( shouldStopLoading ( listener , current , total ) ) return _BOOL ; while ( ( count = is . read ( bytes , _NUM , bufferSize ) ) != - _NUM ) { os . write ( bytes , _NUM , count ) ; current += count ; if ( shouldStopLoading ( listener , current , total ) ) return _BOOL ; } os . flush ( ) ; return _BOOL ; }
76092	private float calcAngle ( float value ) { return value / mData . getYValueSum ( ) * _NUM ; }
81546	public synchronized void returnBuf ( byte [ ] buf ) { if ( buf == null || buf . length > mSizeLimit ) { return ; } mBuffersByLastUse . add ( buf ) ; int pos = Collections . binarySearch ( mBuffersBySize , buf , BUF_COMPARATOR ) ; if ( pos < _NUM ) { pos = - pos - _NUM ; } mBuffersBySize . add ( pos , buf ) ; mCurrentSize += buf . length ; trim ( ) ; }
29719	protected < T extends AbstractOptionValue < ? , ? > > AbstractOptions ( Function < T , T > valueFilter , AbstractOptions baseOptions , Iterable < T > values ) { requireNonNull ( baseOptions , _STR ) ; requireNonNull ( valueFilter , _STR ) ; requireNonNull ( values , _STR ) ; valueMap = new IdentityHashMap < > ( baseOptions . valueMap ) ; putAll ( valueFilter , StreamSupport . stream ( values . spliterator ( ) , _BOOL ) ) ; }
49792	public CharSeq concat ( CharSeq another ) { return new CharSeq ( str + another . str ) ; }
62807	@ Override protected void doGet ( HttpServletRequest req , HttpServletResponse resp ) throws ServletException , IOException { resp . setContentType ( _STR ) ; PrintWriter sendToClient = resp . getWriter ( ) ; for ( Video v : this . videos ) { sendToClient . write ( v . getName ( ) + _STR + v . getUrl ( ) + _STR ) ; } }
74058	protected void notifyStateChange ( int oldState , int newState ) { mState = newState ; if ( oldState != newState ) { firePropertyChange ( _STR , Integer . valueOf ( oldState ) , Integer . valueOf ( newState ) ) ; } }
59259	public void test_GetOrder ( ) { assertEquals ( _STR , BigInteger . valueOf ( _NUM ) , ecps . getOrder ( ) ) ; }
75393	private void formatAndLogThrowable ( LoggingLevel level , Color color , String msg , Throwable t ) { if ( ! USE_COLORS ) { formatAndLogThrowable ( level , msg , t ) ; return ; } if ( PhotonLogger . level . id < level . id ) { return ; } LocalDateTime dateTime = LocalDateTime . now ( ) ; String formatted = formatLogLine ( level , dateTime , msg ) ; LoggingService . logThrowable ( dateTime , t , formatted , color ) ; }
30048	public static String constructQueueRedisKey ( String queueName , String shardName , int priority , PinLaterJobState state ) { return String . format ( _STR , PINLATER_QUEUE_KEY_PREFIX , shardName , queueName , priority , state . getValue ( ) ) ; }
14909	public static String decodeCharset ( String s , String charset ) { if ( s == null ) { return null ; } try { byte buf [ ] = s . getBytes ( ASCII_CHARSET ) ; return ( new String ( buf , _NUM , buf . length , charset ) ) ; } catch ( UnsupportedEncodingException uee ) { return s ; } }
67362	public void addRestrictedDomain ( String domainName ) { if ( StringUtils . isEmpty ( domainName ) ) { return ; } if ( restrictedDomains == null ) { restrictedDomains = new ArrayList < > ( ) ; } restrictedDomains . add ( domainName ) ; }
23610	StoppableReadLock ( ReadWriteLock lock , CancelCriterion stopper ) { this . lock = lock . readLock ( ) ; this . stopper = stopper ; }
19112	public void testisAutoIncrement ( ) { try { assertFalse ( rsmd . isAutoIncrement ( _NUM ) ) ; } catch ( SQLException e1 ) { fail ( _STR + e1 . getMessage ( ) ) ; e1 . printStackTrace ( ) ; } try { conn . close ( ) ; rsmd . getSchemaName ( _NUM ) ; fail ( _STR ) ; } catch ( SQLException e ) { } }
48956	private long computeInterfaceHash ( ) { long hash = _NUM ; ByteArrayOutputStream sink = new ByteArrayOutputStream ( _NUM ) ; try { MessageDigest md = MessageDigest . getInstance ( _STR ) ; DataOutputStream out = new DataOutputStream ( new DigestOutputStream ( sink , md ) ) ; out . writeInt ( INTERFACE_HASH_STUB_VERSION ) ; for ( Method method : remoteMethods ) { MethodDoc methodDoc = method . methodDoc ( ) ; out . writeUTF ( methodDoc . name ( ) ) ; out . writeUTF ( Util . methodDescriptorOf ( methodDoc ) ) ; ClassDoc exceptions [ ] = methodDoc . thrownExceptions ( ) ; Arrays . sort ( exceptions , new ClassDocComparator ( ) ) ; for ( ClassDoc ex : exceptions ) { out . writeUTF ( Util . binaryNameOf ( ex ) ) ; } } out . flush ( ) ; byte hashArray [ ] = md . digest ( ) ; for ( int i = _NUM ; i < Math . min ( _NUM , hashArray . length ) ; i ++ ) { hash += ( ( long ) ( hashArray [ i ] & _NUM ) ) << ( i * _NUM ) ; } } catch ( IOException e ) { throw new AssertionError ( e ) ; } catch ( NoSuchAlgorithmException e ) { throw new AssertionError ( e ) ; } return hash ; }
50411	public static void copy ( byte [ ] in , OutputStream out ) throws IOException { Assert . notNull ( in , _STR ) ; Assert . notNull ( out , _STR ) ; out . write ( in ) ; }
33320	public boolean isEmpty ( ) { return items . isEmpty ( ) ; }
23418	private static native boolean renderFrame ( int [ ] pixels , long gifFileInPtr , int [ ] metaData ) ;
31500	private static int encodeText ( CharSequence msg , int startpos , int count , StringBuilder sb , int initialSubmode ) { StringBuilder tmp = new StringBuilder ( count ) ; int submode = initialSubmode ; int idx = _NUM ; while ( _BOOL ) { char ch = msg . charAt ( startpos + idx ) ; switch ( submode ) { case SUBMODE_ALPHA : if ( isAlphaUpper ( ch ) ) { if ( ch == _STR ) { tmp . append ( ( char ) _NUM ) ; } else { tmp . append ( ( char ) ( ch - _NUM ) ) ; } } else { if ( isAlphaLower ( ch ) ) { submode = SUBMODE_LOWER ; tmp . append ( ( char ) _NUM ) ; continue ; } else if ( isMixed ( ch ) ) { submode = SUBMODE_MIXED ; tmp . append ( ( char ) _NUM ) ; continue ; } else { tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; break ; } } break ; case SUBMODE_LOWER : if ( isAlphaLower ( ch ) ) { if ( ch == _STR ) { tmp . append ( ( char ) _NUM ) ; } else { tmp . append ( ( char ) ( ch - _NUM ) ) ; } } else { if ( isAlphaUpper ( ch ) ) { tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) ( ch - _NUM ) ) ; break ; } else if ( isMixed ( ch ) ) { submode = SUBMODE_MIXED ; tmp . append ( ( char ) _NUM ) ; continue ; } else { tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; break ; } } break ; case SUBMODE_MIXED : if ( isMixed ( ch ) ) { tmp . append ( ( char ) MIXED [ ch ] ) ; } else { if ( isAlphaUpper ( ch ) ) { submode = SUBMODE_ALPHA ; tmp . append ( ( char ) _NUM ) ; continue ; } else if ( isAlphaLower ( ch ) ) { submode = SUBMODE_LOWER ; tmp . append ( ( char ) _NUM ) ; continue ; } else { if ( startpos + idx + _NUM < count ) { char next = msg . charAt ( startpos + idx + _NUM ) ; if ( isPunctuation ( next ) ) { submode = SUBMODE_PUNCTUATION ; tmp . append ( ( char ) _NUM ) ; continue ; } } tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; } } break ; default : if ( isPunctuation ( ch ) ) { tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; } else { submode = SUBMODE_ALPHA ; tmp . append ( ( char ) _NUM ) ; continue ; } } idx ++ ; if ( idx >= count ) { break ; } } char h = _NUM ; int len = tmp . length ( ) ; for ( int i = _NUM ; i < len ; i ++ ) { boolean odd = ( i % _NUM ) != _NUM ; if ( odd ) { h = ( char ) ( ( h * _NUM ) + tmp . charAt ( i ) ) ; sb . append ( h ) ; } else { h = tmp . charAt ( i ) ; } } if ( ( len % _NUM ) != _NUM ) { sb . append ( ( char ) ( ( h * _NUM ) + _NUM ) ) ; } return submode ; }
58189	public static boolean isValidNCName ( String ncName ) { if ( ncName . length ( ) == _NUM ) return _BOOL ; char ch = ncName . charAt ( _NUM ) ; if ( isNCNameStart ( ch ) == _BOOL ) return _BOOL ; for ( int i = _NUM ; i < ncName . length ( ) ; i ++ ) { ch = ncName . charAt ( i ) ; if ( isNCName ( ch ) == _BOOL ) { return _BOOL ; } } return _BOOL ; }
33756	public RepeatedFieldBuilder < MType , BType , IType > addMessage ( MType message ) { if ( message == null ) { throw new NullPointerException ( ) ; } ensureMutableMessageList ( ) ; messages . add ( message ) ; if ( builders != null ) { builders . add ( null ) ; } onChanged ( ) ; incrementModCounts ( ) ; return this ; }
79089	protected void prepareDataSet ( ) { dataSet1 = Arrays . asList ( new String [ ] { _STR , _STR , _STR } ) ; dataSet2 = Arrays . asList ( new String [ ] { _STR , _STR , _STR } ) ; dataSet3 = Arrays . asList ( new String [ ] { _STR , _STR , _STR , _STR } ) ; }
30919	private ServiceRegistrar [ ] buildServiceRegistrar ( ) { int k = _NUM ; ServiceRegistrar [ ] proxys = new ServiceRegistrar [ proxyRegSet . size ( ) ] ; Iterator iter = proxyRegSet . iterator ( ) ; while ( iter . hasNext ( ) ) { ProxyReg reg = ( ProxyReg ) iter . next ( ) ; proxys [ k ++ ] = reg . proxy ; } return proxys ; }
46842	private static boolean checkValue ( String val ) throws MalformedObjectNameException { if ( val == null ) throw new NullPointerException ( _STR ) ; final int len = val . length ( ) ; if ( len == _NUM ) return _BOOL ; final char [ ] s = val . toCharArray ( ) ; final int [ ] result = parseValue ( s , _NUM ) ; final int endValue = result [ _NUM ] ; final boolean value_pattern = result [ _NUM ] == _NUM ; if ( endValue < len ) throw new MalformedObjectNameException ( _STR + s [ endValue ] + _STR ) ; return value_pattern ; }
23998	protected void recoverPrimary ( Set excludedServers ) { if ( pool . getPoolOrCacheCancelInProgress ( ) != null ) { return ; } final boolean isDebugEnabled = logger . isDebugEnabled ( ) ; if ( queueConnections . getPrimary ( ) != null ) { if ( isDebugEnabled ) { logger . debug ( _STR ) ; } return ; } if ( isDebugEnabled ) { logger . debug ( _STR ) ; } if ( printRecoveringPrimary ) { logger . info ( LocalizedMessage . create ( LocalizedStrings . QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER ) ) ; printRecoveringPrimary = _BOOL ; } QueueConnectionImpl newPrimary = null ; while ( newPrimary == null && pool . getPoolOrCacheCancelInProgress ( ) == null ) { List backups = queueConnections . getBackups ( ) ; newPrimary = promoteBackupToPrimary ( backups ) ; if ( newPrimary == null ) { break ; } if ( ! addToConnectionList ( newPrimary , _BOOL ) ) { synchronized ( lock ) { queueConnections = queueConnections . removeConnection ( newPrimary ) ; } newPrimary = null ; } } if ( newPrimary != null ) { if ( isDebugEnabled ) { logger . debug ( _STR , newPrimary . getEndpoint ( ) ) ; } if ( PoolImpl . AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG ) { ClientServerObserver bo = ClientServerObserverHolder . getInstance ( ) ; bo . afterPrimaryRecovered ( newPrimary . getServer ( ) ) ; } cqsConnected ( ) ; printPrimaryNotFoundError = _BOOL ; printRecoveringPrimary = _BOOL ; return ; } while ( newPrimary == null ) { newPrimary = createNewPrimary ( excludedServers ) ; if ( newPrimary == null ) { break ; } if ( ! addToConnectionList ( newPrimary , _BOOL ) ) { excludedServers . add ( newPrimary . getServer ( ) ) ; newPrimary = null ; } if ( newPrimary != null ) { if ( isDebugEnabled ) { logger . debug ( _STR , newPrimary . getEndpoint ( ) ) ; } if ( ! recoverInterest ( newPrimary , _BOOL ) ) { excludedServers . add ( newPrimary . getServer ( ) ) ; newPrimary = null ; } cqsConnected ( ) ; } if ( newPrimary != null && PoolImpl . AFTER_PRIMARY_RECOVERED_CALLBACK_FLAG ) { ClientServerObserver bo = ClientServerObserverHolder . getInstance ( ) ; bo . afterPrimaryRecovered ( newPrimary . getServer ( ) ) ; } printPrimaryNotFoundError = _BOOL ; printRecoveringPrimary = _BOOL ; return ; } cqsDisconnected ( ) ; if ( isDebugEnabled ) { logger . debug ( _STR ) ; } synchronized ( lock ) { queueConnections = queueConnections . setPrimaryDiscoveryFailed ( null ) ; lock . notifyAll ( ) ; } }
35698	private synchronized void rebuildJournal ( ) throws IOException { if ( journalWriter != null ) { journalWriter . close ( ) ; } Writer writer = new BufferedWriter ( new FileWriter ( journalFileTmp ) , IO_BUFFER_SIZE ) ; writer . write ( MAGIC ) ; writer . write ( _STR ) ; writer . write ( VERSION_1 ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( appVersion ) ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( valueCount ) ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; for ( Entry entry : lruEntries . values ( ) ) { if ( entry . currentEditor != null ) { writer . write ( DIRTY + _STR + entry . key + _STR ) ; } else { writer . write ( CLEAN + _STR + entry . key + entry . getLengths ( ) + _STR ) ; } } writer . close ( ) ; journalFileTmp . renameTo ( journalFile ) ; journalWriter = new BufferedWriter ( new FileWriter ( journalFile , _BOOL ) , IO_BUFFER_SIZE ) ; }
26525	public void remove ( ) throws RecurrenceInfoException { List < RecurrenceRule > rulesList = new ArrayList < RecurrenceRule > ( ) ; rulesList . addAll ( rRulesList ) ; rulesList . addAll ( eRulesList ) ; try { for ( RecurrenceRule rule : rulesList ) rule . remove ( ) ; info . remove ( ) ; } catch ( RecurrenceRuleException rre ) { throw new RecurrenceInfoException ( rre . getMessage ( ) , rre ) ; } catch ( GenericEntityException gee ) { throw new RecurrenceInfoException ( gee . getMessage ( ) , gee ) ; } }
61283	public void addNodesInDocOrder ( DTMIterator iterator , XPathContext support ) { if ( ! m_mutable ) throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NODESETDTM_NOT_MUTABLE , null ) ) ; int node ; while ( DTM . NULL != ( node = iterator . nextNode ( ) ) ) { addNodeInDocOrder ( node , support ) ; } }
11867	protected boolean needToRefetchData ( ) { long now = System . currentTimeMillis ( ) ; long last = lastDataFetchTime ; if ( ( last + fetchIntervalMillis ) < now ) { lastDataFetchTime = now ; return _BOOL ; } return _BOOL ; }
13027	@ Override public DocumentType createDocumentType ( String qualifiedName , String publicID , String systemID ) { checkQName ( qualifiedName ) ; return new DocumentTypeImpl ( null , qualifiedName , publicID , systemID ) ; }
15457	public void handleRequest ( RequestContext rc ) throws CLIException { super . handleRequest ( rc ) ; ldapLogin ( ) ; SSOToken adminSSOToken = getAdminSSOToken ( ) ; IOutput outputWriter = getOutputWriter ( ) ; String realm = getStringOptionValue ( IArgument . REALM_NAME ) ; String patternType = getStringOptionValue ( IArgument . AGENT_TYPE ) ; String filter = getStringOptionValue ( IArgument . FILTER ) ; if ( patternType == null ) { patternType = _STR ; } if ( ( filter == null ) || ( filter . length ( ) == _NUM ) ) { filter = _STR ; } String [ ] params = { realm , patternType , filter } ; writeLog ( LogWriter . LOG_ACCESS , Level . INFO , _STR , params ) ; try { AMIdentityRepository amir = new AMIdentityRepository ( adminSSOToken , realm ) ; IdSearchResults isr = amir . searchIdentities ( IdType . AGENTONLY , filter , new IdSearchControl ( ) ) ; Set results = isr . getSearchResults ( ) ; if ( ( results != null ) && ! results . isEmpty ( ) ) { for ( Iterator i = results . iterator ( ) ; i . hasNext ( ) ; ) { AMIdentity amid = ( AMIdentity ) i . next ( ) ; if ( ! matchType ( amid , patternType ) ) { i . remove ( ) ; } } } if ( ( results != null ) && ! results . isEmpty ( ) ) { for ( Iterator i = results . iterator ( ) ; i . hasNext ( ) ; ) { AMIdentity amid = ( AMIdentity ) i . next ( ) ; Object [ ] args = { amid . getName ( ) , amid . getUniversalId ( ) } ; outputWriter . printlnMessage ( MessageFormat . format ( getResourceString ( _STR ) , args ) ) ; } } else { outputWriter . printlnMessage ( getResourceString ( _STR ) ) ; } writeLog ( LogWriter . LOG_ACCESS , Level . INFO , _STR , params ) ; } catch ( IdRepoException e ) { String [ ] args = { realm , patternType , filter , e . getMessage ( ) } ; debugError ( _STR , e ) ; writeLog ( LogWriter . LOG_ERROR , Level . INFO , _STR , args ) ; throw new CLIException ( e , ExitCodes . REQUEST_CANNOT_BE_PROCESSED ) ; } catch ( SSOException e ) { String [ ] args = { realm , patternType , filter , e . getMessage ( ) } ; debugError ( _STR , e ) ; writeLog ( LogWriter . LOG_ERROR , Level . INFO , _STR , args ) ; throw new CLIException ( e , ExitCodes . REQUEST_CANNOT_BE_PROCESSED ) ; } }
21029	public byte [ ] toBytes ( ) { try { ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; _field . store ( out , null ) ; return out . toByteArray ( ) ; } catch ( IOException e ) { throw new IllegalStateException ( e ) ; } }
6990	@ SuppressWarnings ( _STR ) public static < E extends Enum < ? extends Style . HasCssName > > E fromStyleName ( final String styleName , final Class < E > enumClass , final E defaultValue ) { if ( styleName == null || enumClass == null ) { return defaultValue ; } for ( final Enum < ? extends Style . HasCssName > constant : enumClass . getEnumConstants ( ) ) { final Style . HasCssName anEnum = ( Style . HasCssName ) constant ; final String cssClass = anEnum . getCssName ( ) ; if ( cssClass != null && StyleHelper . containsStyle ( styleName , cssClass ) ) { return ( E ) anEnum ; } } return defaultValue ; }
25459	@ HLEUnimplemented @ HLEFunction ( nid = _NUM , version = _NUM , checkInsideInterrupt = _BOOL ) public int sceMpegNextAvcRpAu ( @ CheckArgument ( _STR ) int mpeg , int streamUid ) { if ( ! streamMap . containsKey ( streamUid ) ) { log . warn ( String . format ( _STR , streamUid ) ) ; return - _NUM ; } int result = hleMpegGetAvcAu ( null ) ; if ( result != _NUM ) { if ( log . isDebugEnabled ( ) ) { log . debug ( String . format ( _STR , result ) ) ; } return result ; } videoFrameCount ++ ; startedMpeg = _BOOL ; return _NUM ; }
21807	private Map < URI , ExportMask > createExportMaskMap ( Set < URI > placedMasks ) { Map < URI , ExportMask > exportMaskMap = new HashMap < > ( ) ; Iterator < ExportMask > exportMaskIterator = dbClient . queryIterativeObjects ( ExportMask . class , placedMasks , _BOOL ) ; while ( exportMaskIterator . hasNext ( ) ) { ExportMask exportMask = exportMaskIterator . next ( ) ; exportMaskMap . put ( exportMask . getId ( ) , exportMask ) ; } return exportMaskMap ; }
63057	public ImmutableArray2 < K > insert ( int index , K obj ) { int len = length + _NUM ; int newLen = len ; boolean extendable ; if ( index == len - _NUM ) { AtomicBoolean x = canExtend ; if ( x != null ) { canExtend = null ; if ( array . length > index && x . getAndSet ( _BOOL ) ) { array [ index ] = obj ; return new ImmutableArray2 < K > ( array , len , _BOOL ) ; } } extendable = _BOOL ; newLen = len + _NUM ; } else { extendable = _BOOL ; } @ SuppressWarnings ( _STR ) K [ ] a2 = ( K [ ] ) new Object [ newLen ] ; DataUtils . copyWithGap ( array , a2 , length , index ) ; a2 [ index ] = obj ; return new ImmutableArray2 < K > ( a2 , len , extendable ) ; }
73994	public void writeNoScale ( Image c , Component i ) { if ( page == null ) { newpage ( ) ; } int x = x0 + width - ( c . getWidth ( null ) + charwidth ) ; int y = y0 + ( linenum * lineheight ) + lineascent ; if ( page != null && pagenum >= prFirst ) { page . drawImage ( c , x , y , c . getWidth ( null ) , c . getHeight ( null ) , null ) ; } }
61293	public void putDocumentInCache ( int n , Source source ) { int cachedNode = getNode ( source ) ; if ( DTM . NULL != cachedNode ) { if ( ! ( cachedNode == n ) ) throw new RuntimeException ( _STR + _STR + source . getSystemId ( ) ) ; return ; } if ( null != source . getSystemId ( ) ) { m_sourceTree . addElement ( new SourceTree ( n , source . getSystemId ( ) ) ) ; } }
50528	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
1102	public static void copy ( InputStream is , Resource out , boolean closeIS ) throws IOException { OutputStream os = null ; try { os = toBufferedOutputStream ( out . getOutputStream ( ) ) ; } catch ( IOException ioe ) { IOUtil . closeEL ( os ) ; throw ioe ; } copy ( is , os , closeIS , _BOOL ) ; }
43774	public String fadeAudio ( String path , String type , double fadeInLength , double stopTime , double fadeOutLength ) throws IOException { final List < String > curves = Arrays . asList ( new String [ ] { _STR , _STR , _STR , _STR , _STR } ) ; if ( ! curves . contains ( type ) ) { throw new RuntimeException ( _STR + type ) ; } File file = new File ( path ) ; String outFile = file . getCanonicalPath ( ) + _STR ; ArrayList < String > cmd = new ArrayList < String > ( ) ; cmd . add ( soxBin ) ; cmd . add ( path ) ; cmd . add ( outFile ) ; cmd . add ( _STR ) ; cmd . add ( type ) ; cmd . add ( fadeInLength + _STR ) ; if ( stopTime != - _NUM ) cmd . add ( stopTime + _STR ) ; if ( fadeOutLength != - _NUM ) cmd . add ( fadeOutLength + _STR ) ; try { int rc = execSox ( cmd , callback ) ; if ( rc != _NUM ) { outFile = null ; } } catch ( IOException e ) { e . printStackTrace ( ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } return outFile ; }
72902	@ Override public void draw ( Canvas canvas ) { super . draw ( canvas ) ; if ( mEdgeGlowTop != null ) { final int scrollX = getScrollX ( ) ; if ( ! mEdgeGlowTop . isFinished ( ) ) { final int restoreCount = canvas . save ( ) ; final int topPadding = mListPadding . top + mGlowPaddingTop ; final int bottomPadding = mListPadding . bottom + mGlowPaddingBottom ; final int height = getHeight ( ) - topPadding - bottomPadding ; int edgeX = Math . min ( _NUM , scrollX + mFirstPositionDistanceGuess ) ; canvas . rotate ( - _NUM ) ; canvas . translate ( - getHeight ( ) + topPadding , edgeX ) ; mEdgeGlowTop . setSize ( height , height ) ; if ( mEdgeGlowTop . draw ( canvas ) ) { invalidate ( ) ; } canvas . restoreToCount ( restoreCount ) ; } if ( ! mEdgeGlowBottom . isFinished ( ) ) { final int restoreCount = canvas . save ( ) ; final int topPadding = mListPadding . left + mGlowPaddingTop ; final int bottomPadding = mListPadding . right + mGlowPaddingBottom ; final int height = getHeight ( ) - topPadding - bottomPadding ; final int width = getWidth ( ) ; int edgeX = Math . max ( width , scrollX + mLastPositionDistanceGuess ) ; canvas . rotate ( _NUM ) ; canvas . translate ( - topPadding , - edgeX ) ; mEdgeGlowBottom . setSize ( height , height ) ; if ( mEdgeGlowBottom . draw ( canvas ) ) { invalidate ( ) ; } canvas . restoreToCount ( restoreCount ) ; } } }
61741	public static ClassProperties loadProperties ( Class [ ] cls , Properties properties , boolean inherit ) { ClassProperties cp = new ClassProperties ( properties ) ; for ( Class c : cls ) { cp . load ( c , inherit ) ; } return cp ; }
58692	public void testCase20 ( ) { byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte rBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int bSign = _NUM ; BigInteger aNumber = BigInteger . ZERO ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . add ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
85085	private static void fixGPSTimeStamp ( XMPNode exifSchema ) throws XMPException { XMPNode gpsDateTime = XMPNodeUtils . findChildNode ( exifSchema , _STR , _BOOL ) ; if ( gpsDateTime == null ) { return ; } try { XMPDateTime binGPSStamp ; XMPDateTime binOtherDate ; binGPSStamp = XMPUtils . convertToDate ( gpsDateTime . getValue ( ) ) ; if ( binGPSStamp . getYear ( ) != _NUM || binGPSStamp . getMonth ( ) != _NUM || binGPSStamp . getDay ( ) != _NUM ) { return ; } XMPNode otherDate = XMPNodeUtils . findChildNode ( exifSchema , _STR , _BOOL ) ; if ( otherDate == null ) { otherDate = XMPNodeUtils . findChildNode ( exifSchema , _STR , _BOOL ) ; } binOtherDate = XMPUtils . convertToDate ( otherDate . getValue ( ) ) ; Calendar cal = binGPSStamp . getCalendar ( ) ; cal . set ( Calendar . YEAR , binOtherDate . getYear ( ) ) ; cal . set ( Calendar . MONTH , binOtherDate . getMonth ( ) ) ; cal . set ( Calendar . DAY_OF_MONTH , binOtherDate . getDay ( ) ) ; binGPSStamp = new XMPDateTimeImpl ( cal ) ; gpsDateTime . setValue ( XMPUtils . convertFromDate ( binGPSStamp ) ) ; } catch ( XMPException e ) { return ; } }
56925	protected boolean cellConsumesEventType ( Cell < ? > cell , String eventType ) { Set < String > consumedEvents = cell . getConsumedEvents ( ) ; return consumedEvents != null && consumedEvents . contains ( eventType ) ; }
44270	public int read ( ) throws IOException { int b0 = fInputStream . read ( ) ; if ( b0 > _NUM ) { throw new IOException ( Localizer . getMessage ( _STR , Integer . toString ( b0 ) ) ) ; } return b0 ; }
35834	protected void create_y_axis ( int i ) { Log . e ( _STR , i + _STR ) ; float ver_height = ( ( graphheight / label_size ) * i ) + border ; if ( i == largest_value_set . size ( ) - _NUM ) canvas . drawLine ( horstart , ver_height , width - ( border ) , ver_height , paint ) ; else canvas . drawLine ( horstart , ver_height , border , ver_height , paint ) ; paint . setColor ( Color . BLACK ) ; int Y_labels = ( int ) size - _NUM - i ; String y_labels = String . format ( _STR , Y_labels * y_axis_ratio ) ; paint . setTextAlign ( Paint . Align . RIGHT ) ; canvas . drawText ( y_labels , horstart - _NUM , ver_height - _NUM , paint ) ; paint . setTextAlign ( Paint . Align . LEFT ) ; }
76471	public long max ( ) { return deltaMax . get ( ) ; }
47690	public void print ( File file ) throws IOException { checkExec ( ) ; SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPrintJobAccess ( ) ; } checkActionSupport ( Action . PRINT ) ; checkFileValidation ( file ) ; peer . print ( file ) ; }
62019	public void extend ( RuleGrounding other ) { if ( other . isFailed ( ) ) { groundings . clear ( ) ; return ; } extend ( other . getAlternatives ( ) ) ; }
69160	@ Override public String expect ( Pattern pattern ) { final String token = read ( pattern ) ; if ( token == null ) { throw new ParserException ( _STR + pattern . pattern ( ) + _STR + document ) ; } return token ; }
66726	public void testGetTableTypesOrder ( ) throws Exception { DatabaseMetaData dmd = con . getMetaData ( ) ; ResultSet rs = dmd . getTableTypes ( ) ; String previousType = _STR ; while ( rs . next ( ) ) { String type = rs . getString ( _NUM ) ; assertTrue ( type . compareTo ( previousType ) >= _NUM ) ; previousType = type ; } rs . close ( ) ; }
79044	private FileChannel updateCache ( String filePath ) { FileChannel fileChannel = fileNameAndStreamCache . get ( filePath ) ; try { if ( null == fileChannel ) { FileInputStream stream = new FileInputStream ( filePath ) ; fileChannel = stream . getChannel ( ) ; fileNameAndStreamCache . put ( filePath , fileChannel ) ; } } catch ( IOException e ) { LOGGER . error ( e , e . getMessage ( ) ) ; } return fileChannel ; }
25039	public void removeSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { return ; } mListeners . remove ( listener ) ; }
51480	private static String descriptorForFieldSignature ( String signature ) { return signature . replace ( _STR , _STR ) ; }
4739	public void addParameters ( final NameValuePair [ ] parameters ) { LOG . trace ( _STR ) ; if ( parameters == null ) { LOG . warn ( _STR ) ; } else { super . clearRequestBody ( ) ; for ( int i = _NUM ; i < parameters . length ; i ++ ) { params . add ( parameters [ i ] ) ; } } }
42446	@ Pure public Atom annotationInterfaceToAnnotationClass ( ) { byte [ ] annotationClassName_tmp = new byte [ val . length + _NUM ] ; System . arraycopy ( val , _NUM , annotationClassName_tmp , _NUM , val . length - _NUM ) ; annotationClassName_tmp [ val . length - _NUM ] = _STR ; annotationClassName_tmp [ val . length ] = _STR ; annotationClassName_tmp [ val . length + _NUM ] = _STR ; return Atom . findOrCreateUtf8Atom ( annotationClassName_tmp ) ; }
22820	public boolean resourceSupportAR ( Integer id ) { if ( id == null ) { return _BOOL ; } return resourceSupportAR ( id . intValue ( ) ) ; }
26272	public static Map < String , Object > createElectronicText ( DispatchContext dctx , Map < String , ? extends Object > context ) { Map < String , Object > result = createElectronicTextMethod ( dctx , context ) ; return result ; }
7228	public PatternGuardExpr ( String namespace , String name , Expression [ ] parameters , PatternExpr guarded ) { this ( namespace , name , Arrays . asList ( parameters ) , guarded ) ; }
63797	public static int intersectLineLine ( Line2D a , Line2D b , Point2D intersect ) { double a1x = a . getX1 ( ) , a1y = a . getY1 ( ) ; double a2x = a . getX2 ( ) , a2y = a . getY2 ( ) ; double b1x = b . getX1 ( ) , b1y = b . getY1 ( ) ; double b2x = b . getX2 ( ) , b2y = b . getY2 ( ) ; return intersectLineLine ( a1x , a1y , a2x , a2y , b1x , b1y , b2x , b2y , intersect ) ; }
14988	public static Set updateAndGetRemovableOCs ( Set origSet , Set removeOCs ) { Set returnOCs = removeOCs ; if ( removeOCs != null && ! removeOCs . isEmpty ( ) ) { returnOCs = new HashSet ( ) ; Iterator itr1 = origSet . iterator ( ) ; while ( itr1 . hasNext ( ) ) { String origOC = ( String ) itr1 . next ( ) ; Iterator itr2 = removeOCs . iterator ( ) ; while ( itr2 . hasNext ( ) ) { String removeOC = ( String ) itr2 . next ( ) ; if ( origOC . equalsIgnoreCase ( removeOC ) ) { returnOCs . add ( origOC ) ; break ; } } } origSet . removeAll ( returnOCs ) ; } return returnOCs ; }
63090	public static int unixTimestamp ( ) { return ( int ) ( System . currentTimeMillis ( ) / _NUM ) ; }
66042	public boolean isPDFLicense ( ) { String key = getSummary ( ) ; return key != null && key . length ( ) > _NUM ; }
76097	protected void drawGridBackground ( Canvas c ) { if ( mDrawGridBackground ) { c . drawRect ( mViewPortHandler . getContentRect ( ) , mGridBackgroundPaint ) ; } if ( mDrawBorders ) { c . drawRect ( mViewPortHandler . getContentRect ( ) , mBorderPaint ) ; } }
3754	public ZipStreamImpl openReadImpl ( PathImpl path ) throws IOException { String pathName = path . getPath ( ) ; return openReadImpl ( pathName ) ; }
38212	private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
59553	@ Override public void onTmpFilesCopied ( ResultCode result ) { dismissLoadingDialog ( ) ; finish ( ) ; }
11854	public synchronized OMGraphicList prepare ( ) { Projection projection = getProjection ( ) ; boolean DEBUG_FINE = logger . isLoggable ( Level . FINE ) ; if ( projection == null ) { if ( DEBUG_FINE ) { logger . fine ( getName ( ) + _STR ) ; } return new OMGraphicList ( ) ; } if ( spatialIndex == null ) { if ( DEBUG_FINE ) { logger . fine ( getName ( ) + _STR ) ; } OMGraphicList list = getList ( ) ; if ( list != null ) { list . generate ( projection , _BOOL ) ; return list ; } else { return new OMGraphicList ( ) ; } } Point2D ul = projection . getUpperLeft ( ) ; Point2D lr = projection . getLowerRight ( ) ; double ulLat = ul . getY ( ) ; double ulLon = ul . getX ( ) ; double lrLat = lr . getY ( ) ; double lrLon = lr . getX ( ) ; OMGraphicList list = new OMGraphicList ( ) ; if ( ProjMath . isCrossingDateline ( ulLon , lrLon , projection . getScale ( ) ) ) { if ( DEBUG_FINE ) { logger . fine ( _STR ) ; } double ymin = Math . min ( ulLat , lrLat ) ; double ymax = Math . max ( ulLat , lrLat ) ; try { list = spatialIndex . getOMGraphics ( ulLon , ymin , _NUM , ymax , list , drawingAttributes , projection , coordTransform ) ; list = spatialIndex . getOMGraphics ( - _NUM , ymin , lrLon , ymax , list , drawingAttributes , projection , coordTransform ) ; } catch ( InterruptedIOException iioe ) { list = null ; } catch ( IOException ex ) { if ( DEBUG_FINE ) { ex . printStackTrace ( ) ; } } catch ( FormatException fe ) { if ( DEBUG_FINE ) { fe . printStackTrace ( ) ; } } catch ( NullPointerException npe ) { if ( DEBUG_FINE ) { npe . printStackTrace ( ) ; } } } else { double xmin = Math . min ( ulLon , lrLon ) ; double xmax = Math . max ( ulLon , lrLon ) ; double ymin = Math . min ( ulLat , lrLat ) ; double ymax = Math . max ( ulLat , lrLat ) ; try { list = spatialIndex . getOMGraphics ( xmin , ymin , xmax , ymax , list , drawingAttributes , projection , coordTransform ) ; } catch ( InterruptedIOException iioe ) { list = null ; } catch ( java . io . IOException ex ) { if ( DEBUG_FINE ) { ex . printStackTrace ( ) ; } } catch ( FormatException fe ) { if ( DEBUG_FINE ) { fe . printStackTrace ( ) ; } } catch ( NullPointerException npe ) { if ( DEBUG_FINE ) { npe . printStackTrace ( ) ; } } } return list ; }
60737	static WorkQueue commonSubmitterQueue ( ) { ForkJoinPool p ; WorkQueue [ ] ws ; int m ; Submitter z ; return ( ( z = submitters . get ( ) ) != null && ( p = commonPool ) != null && ( ws = p . workQueues ) != null && ( m = ws . length - _NUM ) >= _NUM ) ? ws [ m & z . seed & SQMASK ] : null ; }
26163	private boolean isFieldPackagePrivate ( Element attribute ) { Set < Modifier > modifiers = attribute . getModifiers ( ) ; return ! modifiers . contains ( PUBLIC ) && ! modifiers . contains ( PROTECTED ) && ! modifiers . contains ( PRIVATE ) ; }
18726	public void testDivideRoundHalfUpPos ( ) { String a = _STR ; int aScale = - _NUM ; String b = _STR ; int bScale = _NUM ; String c = _STR ; int resScale = - _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_HALF_UP ) ; assertEquals ( _STR , c , result . toString ( ) ) ; assertEquals ( _STR , resScale , result . scale ( ) ) ; }
2964	public boolean reallyRestoreMsWordListFormatForUser ( String userId , InputStreamReader streamReader , boolean isAdmin , Errors errors ) { if ( userId == null ) { Errors . add ( errors , errorMessages . errorsUserIdIsNull ( ) ) ; return _BOOL ; } if ( streamReader == null ) { Errors . add ( errors , errorMessages . errorsTheInputStreamReaderIsNull ( ) ) ; return _BOOL ; } BufferedReader bf = new BufferedReader ( streamReader ) ; final User user = getUserById ( userId ) ; if ( user == null ) { return _BOOL ; } boolean createdAnyChildren = _BOOL ; try { final long now = System . currentTimeMillis ( ) ; Entry notebook = createEntryNoteBook ( user , _STR , now , null , null , _BOOL , _BOOL , _BOOL , isAdmin , _BOOL , errors ) ; if ( notebook == null ) { return _BOOL ; } Entry root = getEntryById ( notebook . getRootId ( ) ) ; ArrayList < Entry > parents = new ArrayList < Entry > ( ) ; HashMap < String , Integer > bulletToDepth = new HashMap < String , Integer > ( ) ; String line = null ; Integer previousDepth = _NUM ; parents . add ( root ) ; while ( ( line = bf . readLine ( ) ) != null ) { line = line . trim ( ) ; if ( line . isEmpty ( ) ) { continue ; } String note = line ; Integer depth = _NUM ; if ( line . length ( ) > _NUM && line . charAt ( _NUM ) == _STR ) { String bullet = line . substring ( _NUM , _NUM ) ; note = line . substring ( _NUM ) ; depth = bulletToDepth . get ( bullet ) ; if ( depth == null ) { depth = new Integer ( bulletToDepth . size ( ) + _NUM ) ; bulletToDepth . put ( bullet , depth ) ; } for ( int i = parents . size ( ) ; i > depth . intValue ( ) ; -- i ) { parents . remove ( i - _NUM ) ; } depth = new Integer ( parents . size ( ) + _NUM ) ; } else { previousDepth = _NUM ; while ( parents . size ( ) > _NUM ) { parents . remove ( parents . size ( ) - _NUM ) ; } } if ( parents . isEmpty ( ) ) { return _BOOL ; } Entry parent = parents . get ( parents . size ( ) - _NUM ) ; Entry entry = createSimpleEntry ( user , note , now , parent . getId ( ) , TreeRelType . Parent , _BOOL , _BOOL , _BOOL , isAdmin , Constants . note , errors , null ) ; if ( entry == null ) { return _BOOL ; } if ( previousDepth . intValue ( ) != depth . intValue ( ) ) { parents . add ( entry ) ; } else { parents . set ( parents . size ( ) - _NUM , entry ) ; } createdAnyChildren = _BOOL ; } } catch ( IOException e ) { Errors . add ( errors , errorMessages . errorProblemReadingInput ( ) ) ; } return createdAnyChildren ; }
63968	@ CallSuper protected void onPageScrolled ( int position , float offset , int offsetPixels ) { if ( mDecorChildCount > _NUM ) { final int scrollX = getScrollX ( ) ; int paddingLeft = getPaddingLeft ( ) ; int paddingRight = getPaddingRight ( ) ; final int width = getWidth ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( ! lp . isDecor ) continue ; final int hgrav = lp . gravity & Gravity . HORIZONTAL_GRAVITY_MASK ; int childLeft = _NUM ; switch ( hgrav ) { default : childLeft = paddingLeft ; break ; case Gravity . LEFT : childLeft = paddingLeft ; paddingLeft += child . getWidth ( ) ; break ; case Gravity . CENTER_HORIZONTAL : childLeft = Math . max ( ( width - child . getMeasuredWidth ( ) ) / _NUM , paddingLeft ) ; break ; case Gravity . RIGHT : childLeft = width - paddingRight - child . getMeasuredWidth ( ) ; paddingRight += child . getMeasuredWidth ( ) ; break ; } childLeft += scrollX ; final int childOffset = childLeft - child . getLeft ( ) ; if ( childOffset != _NUM ) { child . offsetLeftAndRight ( childOffset ) ; } } } dispatchOnPageScrolled ( position , offset , offsetPixels ) ; if ( mPageTransformer != null ) { final int scrollX = getScrollX ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( lp . isDecor ) continue ; final float transformPos = ( float ) ( child . getLeft ( ) - scrollX ) / getClientWidth ( ) ; mPageTransformer . transformPage ( child , transformPos ) ; } } mCalledSuper = _BOOL ; }
28712	public static String convertCodes ( String string ) { if ( string == null ) return string ; int current = _NUM ; char [ ] cs = string . toCharArray ( ) ; StringBuilder sb = new StringBuilder ( ) ; for ( char c : cs ) { if ( current <= cs . length && c == _STR ) { char tc = Character . toLowerCase ( cs [ current + _NUM ] ) ; if ( tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR ) { sb . append ( _STR ) ; } else { sb . append ( c ) ; } } else { sb . append ( c ) ; } current ++ ; } return sb . toString ( ) ; }
12611	private void loadText ( InputStream is ) { BufferedReader reader ; String line ; unitList = new ArrayList ( ) ; unitTypesList = new ArrayList ( ) ; if ( is == null ) { throw new Error ( _STR ) ; } reader = new BufferedReader ( new InputStreamReader ( is ) ) ; try { line = reader . readLine ( ) ; lineCount ++ ; while ( line != null ) { if ( ! line . startsWith ( _STR ) ) { parseAndAdd ( line , reader ) ; } line = reader . readLine ( ) ; } reader . close ( ) ; units = new DatabaseClusterUnit [ unitList . size ( ) ] ; units = ( DatabaseClusterUnit [ ] ) unitList . toArray ( units ) ; unitList = null ; unitTypes = new UnitType [ unitTypesList . size ( ) ] ; unitTypes = ( UnitType [ ] ) unitTypesList . toArray ( unitTypes ) ; unitTypesList = null ; } catch ( IOException e ) { throw new Error ( e . getMessage ( ) + _STR + lineCount ) ; } finally { } }
31208	private float calculateSelectorRadius ( ) { if ( mfSelectorRadius == _NUM ) { int nHeight = mSelectedView . getHeight ( ) ; int nWidth = mSelectedView . getWidth ( ) ; int nLargerSide = Math . max ( nWidth , nHeight ) ; mfSelectorRadius = ( ( nLargerSide ^ _NUM ) / _NUM ) ; } return mfSelectorRadius ; }
86104	private int measureWidth ( int measureSpec ) { int result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) mTextPaint . measureText ( mText ) + getPaddingLeft ( ) + getPaddingRight ( ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
27845	public void test_getPutByteArray ( ) { final int capacity = _NUM ; final ByteArrayBuffer buf = new ByteArrayBuffer ( capacity ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( _NUM ) ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( capacity - _NUM ) ) ; final int pos = _NUM ; for ( int i = _NUM ; i < LIMIT ; i ++ ) { final byte [ ] expected = new byte [ r . nextInt ( capacity - _NUM ) ] ; r . nextBytes ( expected ) ; buf . put ( pos , expected ) ; assertEquals ( _NUM , BytesUtil . compareBytesWithLenAndOffset ( _NUM , expected . length , expected , pos , expected . length , buf . array ( ) ) ) ; final byte [ ] actual = new byte [ expected . length ] ; buf . get ( pos , actual ) ; assertTrue ( BytesUtil . bytesEqual ( expected , actual ) ) ; } assertEquals ( ( byte ) _NUM , buf . getByte ( _NUM ) ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( pos + capacity - _NUM ) ) ; }
80128	@ Override public void onAdded ( final RPObject object ) { if ( isUser ( object ) ) { if ( object . has ( _STR ) ) { adminlevel = object . getInt ( _STR ) ; } } }
86992	private String local_number ( ) throws ParseException { StringBuilder s = new StringBuilder ( ) ; if ( debug ) dbg_enter ( _STR ) ; try { int lc = _NUM ; while ( lexer . hasMoreChars ( ) ) { char la = lexer . lookAhead ( _NUM ) ; if ( la == _STR || la == _STR || la == _STR || la == _STR || la == _STR || la == _STR || Lexer . isHexDigit ( la ) ) { lexer . consume ( _NUM ) ; s . append ( la ) ; lc ++ ; } else if ( lc > _NUM ) break ; else throw createParseException ( _STR + la ) ; } return s . toString ( ) ; } finally { if ( debug ) dbg_leave ( _STR ) ; } }
60129	public void pathValuesToPixel ( List < Path > paths ) { for ( int i = _NUM ; i < paths . size ( ) ; i ++ ) { pathValueToPixel ( paths . get ( i ) ) ; } }
50127	public static byte [ ] decode ( String s ) { return decode ( s . toCharArray ( ) ) ; }
16758	public static void checkState ( boolean expression , Object errorMessage ) { if ( ExoPlayerLibraryInfo . ASSERTIONS_ENABLED && ! expression ) { throw new IllegalStateException ( String . valueOf ( errorMessage ) ) ; } }
30032	public static void slideInFromTopAnimator ( @ NonNull List < Animator > animators , @ NonNull View view , RecyclerView recyclerView ) { alphaAnimator ( animators , view , _NUM ) ; animators . add ( ObjectAnimator . ofFloat ( view , _STR , - recyclerView . getMeasuredHeight ( ) > > _NUM , _NUM ) ) ; if ( FlexibleAdapter . DEBUG ) Log . v ( TAG , _STR ) ; }
47944	MutableBigInteger ( MutableBigInteger val ) { intLen = val . intLen ; value = Arrays . copyOfRange ( val . value , val . offset , val . offset + intLen ) ; }
9857	@ RequestMapping ( value = _STR ) public void ssoBindingError ( Locale locale , @ PathVariable ( value = _STR ) String tenant , HttpServletResponse response ) throws IOException { logger . info ( _STR + locale . toString ( ) + _STR + tenant ) ; ssoDefaultTenantError ( locale , response ) ; }
40230	public CheckpointManager ( NetworkParameters params , @ Nullable InputStream inputStream ) throws IOException { this . params = checkNotNull ( params ) ; if ( inputStream == null ) inputStream = openStream ( params ) ; checkNotNull ( inputStream ) ; inputStream = new BufferedInputStream ( inputStream ) ; inputStream . mark ( _NUM ) ; int first = inputStream . read ( ) ; inputStream . reset ( ) ; if ( first == BINARY_MAGIC . charAt ( _NUM ) ) dataHash = readBinary ( inputStream ) ; else if ( first == TEXTUAL_MAGIC . charAt ( _NUM ) ) dataHash = readTextual ( inputStream ) ; else throw new IOException ( _STR ) ; }
27585	public IndexSegmentIndex ( IRawStore store , Checkpoint checkpoint , IndexMetadata metadata , boolean readOnly ) { super ( store , checkpoint , metadata , readOnly ) ; }
20057	private String liveness ( ) { boolean isClosed = _BOOL ; try { if ( isClosed ( ) ) { isClosed = _BOOL ; } } catch ( SQLException s ) { isClosed = _BOOL ; } if ( isClosed ) { return _STR ; } return _STR ; }
14139	private static void insertValue ( final Map < String , List < String > > paramsMap , final String paramVal , final String parameterName ) { if ( paramVal != null ) { List < String > list = new ArrayList < > ( ) ; list . add ( paramVal ) ; paramsMap . put ( parameterName , list ) ; } }
46349	public Dimension minimumLayoutSize ( Container target ) { Dimension size ; synchronized ( this ) { checkContainer ( target ) ; checkRequests ( ) ; size = new Dimension ( xTotal . minimum , yTotal . minimum ) ; } Insets insets = target . getInsets ( ) ; size . width = ( int ) Math . min ( ( long ) size . width + ( long ) insets . left + ( long ) insets . right , Integer . MAX_VALUE ) ; size . height = ( int ) Math . min ( ( long ) size . height + ( long ) insets . top + ( long ) insets . bottom , Integer . MAX_VALUE ) ; return size ; }
39915	private static void solve_l2r_l1l2_svr ( Problem prob , double [ ] w , Parameter param ) { int l = prob . l ; double C = param . C ; double p = param . p ; int w_size = prob . n ; double eps = param . eps ; int i , s , iter = _NUM ; int max_iter = param . getMaxIters ( ) ; int active_size = l ; int [ ] index = new int [ l ] ; double d , G , H ; double Gmax_old = Double . POSITIVE_INFINITY ; double Gmax_new , Gnorm1_new ; double Gnorm1_init = - _NUM ; double [ ] beta = new double [ l ] ; double [ ] QD = new double [ l ] ; double [ ] y = prob . y ; double [ ] lambda = new double [ ] { _NUM / C } ; double [ ] upper_bound = new double [ ] { Double . POSITIVE_INFINITY } ; if ( param . solverType == SolverType . L2R_L1LOSS_SVR_DUAL ) { lambda [ _NUM ] = _NUM ; upper_bound [ _NUM ] = C ; } for ( i = _NUM ; i < l ; i ++ ) beta [ i ] = _NUM ; for ( i = _NUM ; i < w_size ; i ++ ) w [ i ] = _NUM ; for ( i = _NUM ; i < l ; i ++ ) { QD [ i ] = _NUM ; for ( Feature xi : prob . x [ i ] ) { double val = xi . getValue ( ) ; QD [ i ] += val * val ; w [ xi . getIndex ( ) - _NUM ] += beta [ i ] * val ; } index [ i ] = i ; } while ( iter < max_iter ) { Gmax_new = _NUM ; Gnorm1_new = _NUM ; for ( i = _NUM ; i < active_size ; i ++ ) { int j = i + random . nextInt ( active_size - i ) ; swap ( index , i , j ) ; } for ( s = _NUM ; s < active_size ; s ++ ) { i = index [ s ] ; G = - y [ i ] + lambda [ GETI_SVR ( i ) ] * beta [ i ] ; H = QD [ i ] + lambda [ GETI_SVR ( i ) ] ; for ( Feature xi : prob . x [ i ] ) { int ind = xi . getIndex ( ) - _NUM ; double val = xi . getValue ( ) ; G += val * w [ ind ] ; } double Gp = G + p ; double Gn = G - p ; double violation = _NUM ; if ( beta [ i ] == _NUM ) { if ( Gp < _NUM ) violation = - Gp ; else if ( Gn > _NUM ) violation = Gn ; else if ( Gp > Gmax_old && Gn < - Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; continue ; } } else if ( beta [ i ] >= upper_bound [ GETI_SVR ( i ) ] ) { if ( Gp > _NUM ) violation = Gp ; else if ( Gp < - Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; continue ; } } else if ( beta [ i ] <= - upper_bound [ GETI_SVR ( i ) ] ) { if ( Gn < _NUM ) violation = - Gn ; else if ( Gn > Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; continue ; } } else if ( beta [ i ] > _NUM ) violation = Math . abs ( Gp ) ; else violation = Math . abs ( Gn ) ; Gmax_new = Math . max ( Gmax_new , violation ) ; Gnorm1_new += violation ; if ( Gp < H * beta [ i ] ) d = - Gp / H ; else if ( Gn > H * beta [ i ] ) d = - Gn / H ; else d = - beta [ i ] ; if ( Math . abs ( d ) < _NUM ) continue ; double beta_old = beta [ i ] ; beta [ i ] = Math . min ( Math . max ( beta [ i ] + d , - upper_bound [ GETI_SVR ( i ) ] ) , upper_bound [ GETI_SVR ( i ) ] ) ; d = beta [ i ] - beta_old ; if ( d != _NUM ) { for ( Feature xi : prob . x [ i ] ) { w [ xi . getIndex ( ) - _NUM ] += d * xi . getValue ( ) ; } } } if ( iter == _NUM ) Gnorm1_init = Gnorm1_new ; iter ++ ; if ( iter % _NUM == _NUM ) info ( _STR ) ; if ( Gnorm1_new <= eps * Gnorm1_init ) { if ( active_size == l ) break ; else { active_size = l ; info ( _STR ) ; Gmax_old = Double . POSITIVE_INFINITY ; continue ; } } Gmax_old = Gmax_new ; } info ( _STR , iter ) ; if ( iter >= max_iter ) info ( _STR ) ; double v = _NUM ; int nSV = _NUM ; for ( i = _NUM ; i < w_size ; i ++ ) v += w [ i ] * w [ i ] ; v = _NUM * v ; for ( i = _NUM ; i < l ; i ++ ) { v += p * Math . abs ( beta [ i ] ) - y [ i ] * beta [ i ] + _NUM * lambda [ GETI_SVR ( i ) ] * beta [ i ] * beta [ i ] ; if ( beta [ i ] != _NUM ) nSV ++ ; } info ( _STR , v ) ; info ( _STR , nSV ) ; }
52710	public boolean select ( int position ) { View v = mAllList . get ( position ) ; if ( mMultiChoiceAdapter != null ) { performVibrate ( ) ; performSelect ( v , position , _BOOL ) ; return _BOOL ; } return _BOOL ; }
39357	@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > result = new Vector < Option > ( ) ; result . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; result . addAll ( Collections . list ( super . listOptions ( ) ) ) ; return result . elements ( ) ; }
13251	@ Override public void ignorableWhitespace ( XMLString text , Augmentations augs ) throws XNIException { if ( ! fIncludeIgnorableWhitespace || fFilterReject ) { return ; } if ( ! fDeferNodeExpansion ) { Node child = fCurrentNode . getLastChild ( ) ; if ( child != null && child . getNodeType ( ) == Node . TEXT_NODE ) { Text textNode = ( Text ) child ; textNode . appendData ( text . toString ( ) ) ; } else { Text textNode = fDocument . createTextNode ( text . toString ( ) ) ; if ( fDocumentImpl != null ) { TextImpl textNodeImpl = ( TextImpl ) textNode ; textNodeImpl . setIgnorableWhitespace ( _BOOL ) ; } fCurrentNode . appendChild ( textNode ) ; } } else { int txt = fDeferredDocumentImpl . createDeferredTextNode ( text . toString ( ) , _BOOL ) ; fDeferredDocumentImpl . appendChild ( fCurrentNodeIndex , txt ) ; } }
35293	private static final void waitForEditorToBeActive ( IEditorPart internalFileEditor , IWorkbenchPage page ) { long start = System . currentTimeMillis ( ) ; long end = start ; do { end = System . currentTimeMillis ( ) ; } while ( page . getActiveEditor ( ) != internalFileEditor && ( end - start ) < _NUM ) ; if ( page . getActiveEditor ( ) != internalFileEditor ) logger . warn ( _STR ) ; }
43019	private Solution largestObjectiveValue ( int objective , Population population ) { Solution largest = null ; double value = Double . NEGATIVE_INFINITY ; for ( Solution solution : population ) { if ( solution . getObjective ( objective ) > value ) { largest = solution ; value = solution . getObjective ( objective ) ; } } return largest ; }
16143	public static int convertLatmToY ( int latm ) { long v = Math . round ( ( Mercator . MAX_Y - Mercator . lat2y ( latm / LATLON_TO_LATLONM ) ) * MAX_AP_UNITS / ( Mercator . MAX_Y * _NUM ) ) ; if ( v > MAX_AP_UNITS ) return MAX_AP_UNITS ; if ( v < _NUM ) return - _NUM ; return ( int ) v ; }
14771	public void registerCallbackHandler ( SMSObjectListener changeListener ) throws SMSException { objectListener = changeListener ; if ( ! notificationInitialized ) { String notificationFlag = SystemProperties . get ( NOTIFICATION_PROPERTY , _STR ) ; if ( notificationFlag . equalsIgnoreCase ( _STR ) ) { try { URL url = WebtopNaming . getNotificationURL ( ) ; PLLClient . addNotificationHandler ( JAXRPCUtil . SMS_SERVICE , new SMSNotificationHandler ( ) ) ; client . send ( _STR , url . toString ( ) , null , null ) ; if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + url ) ; } } catch ( Exception e ) { if ( debug . warningEnabled ( ) ) { debug . warning ( _STR + _STR + e . getMessage ( ) + _STR ) ; } startPollingThreadIfEnabled ( getCachePollingInterval ( ) ) ; } } else { startPollingThreadIfEnabled ( getCachePollingInterval ( ) ) ; } notificationInitialized = _BOOL ; } }
69646	public static NSObject parse ( InputStream in ) throws ParseException , IOException { byte [ ] buf = PropertyListParser . readAll ( in ) ; in . close ( ) ; return parse ( buf ) ; }
52179	protected double currentScoreFunction ( ) { double score = _NUM ; for ( int i = _NUM ; i < this . values [ this . currentVar1 ] . length ; i ++ ) { for ( int j = _NUM ; j < this . values [ this . currentVar2 ] . length ; j ++ ) { score -= this . currentCounts [ this . currentVar1 ] [ this . currentVar2 ] [ i ] [ j ] * Math . log ( this . currentPi [ i ] [ j ] ) ; } } return score ; }
72986	public grammaticalityEstimator ( Set FileNames , int iMinChar , int iMaxChar , int iCharWindow , int iMinWord , int iMaxWord , int iWordWindow ) { iMinCharNGram = iMinChar ; iMaxCharNGram = iMaxChar ; iMinWordNGram = iMinWord ; iMaxWordNGram = iMaxWord ; iWordDist = iWordWindow ; iCharDist = iCharWindow ; DistroDocs = new TreeMap < Integer , DistributionDocument > ( ) ; DistroWordDocs = new TreeMap < Integer , DistributionWordDocument > ( ) ; StringBuffer sb = new StringBuffer ( ) ; Iterator iTexts = FileNames . iterator ( ) ; while ( iTexts . hasNext ( ) ) { String sFile = ( String ) iTexts . next ( ) ; try { BufferedReader bf = new BufferedReader ( new FileReader ( sFile ) ) ; String sTmp ; while ( ( sTmp = bf . readLine ( ) ) != null ) sb . append ( sTmp ) ; bf . close ( ) ; } catch ( FileNotFoundException ex ) { ex . printStackTrace ( System . err ) ; } catch ( IOException ex ) { ex . printStackTrace ( System . err ) ; } sb . append ( ( char ) _NUM ) ; } FullTextDataString = sb . toString ( ) ; for ( int iCnt = iMinCharNGram ; iCnt <= iMaxCharNGram ; iCnt ++ ) { DistroDocs . put ( iCnt , new DistributionDocument ( iCharDist , iCnt ) ) ; } for ( int iCnt = iMinWordNGram ; iCnt <= iMaxWordNGram ; iCnt ++ ) { DistroWordDocs . put ( iCnt , new DistributionWordDocument ( iWordDist , iCnt ) ) ; } }
70752	private int checkZoneLink ( SpannableStringBuilder out , String in , int start ) { int pos = start + _NUM ; StringBuilder temp = new StringBuilder ( ) ; String targetString = in . substring ( pos , Math . min ( in . length ( ) , pos + _NUM ) ) ; boolean prevIsDash = _BOOL ; for ( int i = _NUM ; i < targetString . length ( ) ; i ++ ) { char c = targetString . charAt ( i ) ; if ( ( c >= _STR && c <= _STR ) || ( c >= _STR && c <= _STR ) ) { temp . append ( c ) ; prevIsDash = _BOOL ; } else if ( c == _STR ) { if ( i == _NUM ) { return - _NUM ; } if ( prevIsDash ) { temp . deleteCharAt ( temp . length ( ) - _NUM ) ; break ; } temp . append ( c ) ; prevIsDash = _BOOL ; } else { if ( prevIsDash ) { temp . deleteCharAt ( temp . length ( ) - _NUM ) ; } break ; } } String zone = temp . toString ( ) ; if ( zone . length ( ) < _NUM || zone . equalsIgnoreCase ( _STR ) ) { return - _NUM ; } out . append ( zone ) ; return pos + zone . length ( ) - _NUM ; }
72471	public void checkNextPoissonConsistency ( double mean ) { final int sampleSize = _NUM ; final int minExpectedCount = _NUM ; long maxObservedValue = _NUM ; final double alpha = _NUM ; UnitTestUtils . Frequency < Long > frequency = new UnitTestUtils . Frequency < Long > ( ) ; for ( int i = _NUM ; i < sampleSize ; i ++ ) { long value = randomData . nextPoisson ( mean ) ; if ( value > maxObservedValue ) { maxObservedValue = value ; } frequency . addValue ( value ) ; } PoissonDistribution poissonDistribution = new PoissonDistribution ( mean ) ; int lower = _NUM ; while ( poissonDistribution . cumulativeProbability ( lower - _NUM ) * sampleSize < minExpectedCount ) { lower ++ ; } int upper = ( int ) ( _NUM * mean ) ; while ( ( _NUM - poissonDistribution . cumulativeProbability ( upper - _NUM ) ) * sampleSize < minExpectedCount ) { upper -- ; } int binWidth = _NUM ; boolean widthSufficient = _BOOL ; double lowerBinMass = _NUM ; double upperBinMass = _NUM ; while ( ! widthSufficient ) { binWidth ++ ; lowerBinMass = poissonDistribution . probability ( lower - _NUM , lower + binWidth - _NUM ) ; upperBinMass = poissonDistribution . probability ( upper - binWidth - _NUM , upper - _NUM ) ; widthSufficient = FastMath . min ( lowerBinMass , upperBinMass ) * sampleSize >= minExpectedCount ; } List < Integer > binBounds = new ArrayList < Integer > ( ) ; binBounds . add ( lower ) ; int bound = lower + binWidth ; while ( bound < upper - binWidth ) { binBounds . add ( bound ) ; bound += binWidth ; } binBounds . add ( upper ) ; final int binCount = binBounds . size ( ) + _NUM ; long [ ] observed = new long [ binCount ] ; double [ ] expected = new double [ binCount ] ; observed [ _NUM ] = _NUM ; for ( int i = _NUM ; i < lower ; i ++ ) { observed [ _NUM ] += frequency . getCount ( ( long ) i ) ; } expected [ _NUM ] = poissonDistribution . cumulativeProbability ( lower - _NUM ) * sampleSize ; observed [ binCount - _NUM ] = _NUM ; for ( int i = upper ; i <= maxObservedValue ; i ++ ) { observed [ binCount - _NUM ] += frequency . getCount ( ( long ) i ) ; } expected [ binCount - _NUM ] = ( _NUM - poissonDistribution . cumulativeProbability ( upper - _NUM ) ) * sampleSize ; for ( int i = _NUM ; i < binCount - _NUM ; i ++ ) { observed [ i ] = _NUM ; for ( int j = binBounds . get ( i - _NUM ) ; j < binBounds . get ( i ) ; j ++ ) { observed [ i ] += frequency . getCount ( ( long ) j ) ; } expected [ i ] = ( poissonDistribution . cumulativeProbability ( binBounds . get ( i ) - _NUM ) - poissonDistribution . cumulativeProbability ( binBounds . get ( i - _NUM ) - _NUM ) ) * sampleSize ; } if ( UnitTestUtils . chiSquareTest ( expected , observed ) < alpha ) { StringBuilder msgBuffer = new StringBuilder ( ) ; DecimalFormat df = new DecimalFormat ( _STR ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( mean ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( UnitTestUtils . chiSquareTest ( expected , observed ) ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( UnitTestUtils . chiSquare ( expected , observed ) ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( _STR ) ; for ( int i = _NUM ; i < expected . length ; i ++ ) { msgBuffer . append ( _STR ) ; msgBuffer . append ( i == _NUM ? _NUM : binBounds . get ( i - _NUM ) ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( i == binBounds . size ( ) ? _STR : binBounds . get ( i ) ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( df . format ( expected [ i ] ) ) ; msgBuffer . append ( _STR ) ; msgBuffer . append ( observed [ i ] ) ; msgBuffer . append ( _STR ) ; } msgBuffer . append ( _STR ) ; msgBuffer . append ( alpha ) ; msgBuffer . append ( _STR ) ; Assert . fail ( msgBuffer . toString ( ) ) ; } }
2608	public static void checkValid ( double [ ] x ) { for ( double v : x ) { if ( Double . isNaN ( v ) ) { throw new RuntimeException ( _STR + v ) ; } } }
81155	final void layoutChildren ( boolean queryAdapter ) { final int paddingLeft = getPaddingLeft ( ) ; final int paddingRight = getPaddingRight ( ) ; final int itemMargin = mItemMargin ; final int colWidth = ( getWidth ( ) - paddingLeft - paddingRight - itemMargin * ( mColCount - _NUM ) ) / mColCount ; mColWidth = colWidth ; int rebuildLayoutRecordsBefore = - _NUM ; int rebuildLayoutRecordsAfter = - _NUM ; Arrays . fill ( mItemBottoms , Integer . MIN_VALUE ) ; final int childCount = getChildCount ( ) ; int amountRemoved = _NUM ; for ( int i = _NUM ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; final int col = lp . column ; final int position = mFirstPosition + i ; final boolean needsLayout = queryAdapter || child . isLayoutRequested ( ) ; if ( queryAdapter ) { View newView = obtainView ( position , child ) ; if ( newView == null ) { removeViewAt ( i ) ; if ( i - _NUM >= _NUM ) invalidateLayoutRecordsAfterPosition ( i - _NUM ) ; amountRemoved ++ ; continue ; } else if ( newView != child ) { removeViewAt ( i ) ; addView ( newView , i ) ; child = newView ; } lp = ( LayoutParams ) child . getLayoutParams ( ) ; } final int span = Math . min ( mColCount , lp . span ) ; final int widthSize = colWidth * span + itemMargin * ( span - _NUM ) ; if ( needsLayout ) { final int widthSpec = MeasureSpec . makeMeasureSpec ( widthSize , MeasureSpec . EXACTLY ) ; final int heightSpec ; if ( lp . height == LayoutParams . WRAP_CONTENT ) { heightSpec = MeasureSpec . makeMeasureSpec ( _NUM , MeasureSpec . UNSPECIFIED ) ; } else { heightSpec = MeasureSpec . makeMeasureSpec ( lp . height , MeasureSpec . EXACTLY ) ; } child . measure ( widthSpec , heightSpec ) ; } int childTop = mItemBottoms [ col ] > Integer . MIN_VALUE ? mItemBottoms [ col ] + mItemMargin : child . getTop ( ) ; if ( span > _NUM ) { int lowest = childTop ; for ( int j = col + _NUM ; j < col + span ; j ++ ) { final int bottom = mItemBottoms [ j ] + mItemMargin ; if ( bottom > lowest ) { lowest = bottom ; } } childTop = lowest ; } final int childHeight = child . getMeasuredHeight ( ) ; final int childBottom = childTop + childHeight ; final int childLeft = paddingLeft + col * ( colWidth + itemMargin ) ; final int childRight = childLeft + child . getMeasuredWidth ( ) ; child . layout ( childLeft , childTop , childRight , childBottom ) ; for ( int j = col ; j < col + span ; j ++ ) { mItemBottoms [ j ] = childBottom ; } final LayoutRecord rec = mLayoutRecords . get ( position ) ; if ( rec != null && rec . height != childHeight ) { rec . height = childHeight ; rebuildLayoutRecordsBefore = position ; } if ( rec != null && rec . span != span ) { rec . span = span ; rebuildLayoutRecordsAfter = position ; } } for ( int i = _NUM ; i < mColCount ; i ++ ) { if ( mItemBottoms [ i ] == Integer . MIN_VALUE ) { mItemBottoms [ i ] = mItemTops [ i ] ; } } if ( rebuildLayoutRecordsBefore >= _NUM || rebuildLayoutRecordsAfter >= _NUM ) { if ( rebuildLayoutRecordsBefore >= _NUM ) { invalidateLayoutRecordsBeforePosition ( rebuildLayoutRecordsBefore ) ; } if ( rebuildLayoutRecordsAfter >= _NUM ) { invalidateLayoutRecordsAfterPosition ( rebuildLayoutRecordsAfter ) ; } for ( int i = _NUM ; i < ( childCount - amountRemoved ) ; i ++ ) { final int position = mFirstPosition + i ; final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; LayoutRecord rec = mLayoutRecords . get ( position ) ; if ( rec == null ) { rec = new LayoutRecord ( ) ; mLayoutRecords . put ( position , rec ) ; } rec . column = lp . column ; rec . height = child . getHeight ( ) ; rec . id = lp . id ; rec . span = Math . min ( mColCount , lp . span ) ; } } if ( this . mSelectorPosition != INVALID_POSITION ) { View child = getChildAt ( mMotionPosition - mFirstPosition ) ; if ( child != null ) positionSelector ( mMotionPosition , child ) ; } else if ( mTouchMode > TOUCH_MODE_DOWN ) { View child = getChildAt ( mMotionPosition - mFirstPosition ) ; if ( child != null ) positionSelector ( mMotionPosition , child ) ; } else { mSelectorRect . setEmpty ( ) ; } }
70192	protected void processConnectionEvent ( ConnectionEvent event ) { for ( Enumeration < ConnectionListener > e = connectionListeners . elements ( ) ; e . hasMoreElements ( ) ; ) { ConnectionListener l = e . nextElement ( ) ; switch ( event . getType ( ) ) { case ConnectionEvent . CONNECTED : l . connected ( ( ConnectedEvent ) event ) ; break ; case ConnectionEvent . DISCONNECTED : l . disconnected ( ( DisconnectedEvent ) event ) ; break ; case ConnectionEvent . PACKET_RECEIVED : l . packetReceived ( ( PacketReceivedEvent ) event ) ; break ; } } }
68311	public double percentage ( ConstantRange range ) { SortedSet < Constant > sorted = values ( ) ; SortedSet < Constant > contained = new TreeSet < Constant > ( ) ; Constant prev = null ; for ( Constant pct : sorted ) { if ( range . contains ( pct ) ) contained . add ( pct ) ; else if ( contained . isEmpty ( ) ) prev = pct ; } if ( contained . size ( ) == _NUM ) return _NUM ; double prevPercent = prev == null ? _NUM : pcts . get ( prev ) ; return pcts . get ( contained . last ( ) ) - prevPercent ; }
32268	public static void closeQuiet ( @ Nullable Closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( IOException ignored ) { } } }
1227	@ Override public void releaseLuceePageContext ( PageContext pc , boolean register ) { if ( pc . getId ( ) < _NUM ) return ; pc . release ( ) ; ThreadLocalPageContext . release ( ) ; runningPcs . remove ( Integer . valueOf ( pc . getId ( ) ) ) ; if ( pcs . size ( ) < _NUM && pc . getRequestTimeoutException ( ) == null ) pcs . push ( pc ) ; }
87028	public void addEventListener ( SIPDialogEventListener newListener ) { eventListeners . add ( newListener ) ; }
26015	private boolean journalRebuildRequired ( ) { final int redundantOpCompactThreshold = _NUM ; return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries . size ( ) ; }
6431	private static byte [ ] stringToByteArray ( String str ) { if ( str == null ) { return null ; } byte [ ] srcByte = str . getBytes ( ) ; int srcLength = srcByte . length ; byte [ ] result = new byte [ srcLength + _NUM ] ; System . arraycopy ( srcByte , _NUM , result , _NUM , srcLength ) ; result [ srcLength ] = _NUM ; return result ; }
53986	public static Properties loadProperties ( ClassLoader classLoader , String classpathResource ) { return loadProperties ( null , classpathResource ) ; }
62054	@ Override public boolean equals ( Object o ) { if ( o instanceof Graph ) { return string . equals ( o . toString ( ) ) ; } return _BOOL ; }
28807	public final static NameValuePair parseNameValuePair ( final String value , HeaderValueParser parser ) throws ParseException { if ( value == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( parser == null ) parser = SaveHeaderValueParser . DEFAULT ; CharArrayBuffer buffer = new CharArrayBuffer ( value . length ( ) ) ; buffer . append ( value ) ; SaveParserCursor cursor = new SaveParserCursor ( _NUM , value . length ( ) ) ; return parser . parseNameValuePair ( buffer , cursor ) ; }
1464	private void pullEvent ( ) { final int newScrollValue ; final int itemDimension ; final float initialMotionValue , lastMotionValue ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : initialMotionValue = mInitialMotionX ; lastMotionValue = mLastMotionX ; break ; case VERTICAL : default : initialMotionValue = mInitialMotionY ; lastMotionValue = mLastMotionY ; break ; } switch ( mCurrentMode ) { case PULL_FROM_END : newScrollValue = Math . round ( Math . max ( initialMotionValue - lastMotionValue , _NUM ) / FRICTION ) ; itemDimension = getFooterSize ( ) ; break ; case PULL_FROM_START : default : newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , _NUM ) / FRICTION ) ; itemDimension = getHeaderSize ( ) ; break ; } setHeaderScroll ( newScrollValue ) ; if ( newScrollValue != _NUM && ! isRefreshing ( ) ) { float scale = Math . abs ( newScrollValue ) / ( float ) itemDimension ; switch ( mCurrentMode ) { case PULL_FROM_END : mFooterLayout . onPull ( scale ) ; break ; case PULL_FROM_START : default : mHeaderLayout . onPull ( scale ) ; break ; } if ( mState != State . PULL_TO_REFRESH && itemDimension >= Math . abs ( newScrollValue ) ) { setState ( State . PULL_TO_REFRESH ) ; } else if ( mState == State . PULL_TO_REFRESH && itemDimension < Math . abs ( newScrollValue ) ) { setState ( State . RELEASE_TO_REFRESH ) ; } } }
80868	private static MappingObject ObjectAt ( PCalLocation loc , MappingObject [ ] [ ] map ) { return map [ loc . getLine ( ) ] [ loc . getColumn ( ) ] ; }
44860	public String parse ( File file , JSON m ) { try { Template template = getTemplate ( file ) ; if ( template != null ) { StringWriter w = new StringWriter ( ) ; BufferedWriter writer = new BufferedWriter ( w ) ; template . merge ( new VelocityContext ( m ) , writer ) ; writer . flush ( ) ; writer . close ( ) ; return w . toString ( ) ; } } catch ( Exception e ) { log . error ( e . getMessage ( ) , e ) ; } return null ; }
68860	private LinkedList < Diff > diff_main ( String text1 , String text2 , boolean checklines , long deadline ) { if ( text1 == null || text2 == null ) { throw new IllegalArgumentException ( _STR ) ; } LinkedList < Diff > diffs ; if ( text1 . equals ( text2 ) ) { diffs = new LinkedList < Diff > ( ) ; if ( text1 . length ( ) != _NUM ) { diffs . add ( new Diff ( Operation . EQUAL , text1 ) ) ; } return diffs ; } int commonlength = diff_commonPrefix ( text1 , text2 ) ; String commonprefix = text1 . substring ( _NUM , commonlength ) ; text1 = text1 . substring ( commonlength ) ; text2 = text2 . substring ( commonlength ) ; commonlength = diff_commonSuffix ( text1 , text2 ) ; String commonsuffix = text1 . substring ( text1 . length ( ) - commonlength ) ; text1 = text1 . substring ( _NUM , text1 . length ( ) - commonlength ) ; text2 = text2 . substring ( _NUM , text2 . length ( ) - commonlength ) ; diffs = diff_compute ( text1 , text2 , checklines , deadline ) ; if ( commonprefix . length ( ) != _NUM ) { diffs . addFirst ( new Diff ( Operation . EQUAL , commonprefix ) ) ; } if ( commonsuffix . length ( ) != _NUM ) { diffs . addLast ( new Diff ( Operation . EQUAL , commonsuffix ) ) ; } diff_cleanupMerge ( diffs ) ; return diffs ; }
45935	public Repository ( String domain , boolean fairLock ) { lock = new ReentrantReadWriteLock ( fairLock ) ; domainTb = new HashMap < String , Map < String , NamedObject > > ( _NUM ) ; if ( domain != null && domain . length ( ) != _NUM ) this . domain = domain . intern ( ) ; else this . domain = ServiceName . DOMAIN ; domainTb . put ( this . domain , new HashMap < String , NamedObject > ( ) ) ; }
57622	public int countTokens ( ) { int count = _NUM ; boolean inToken = _BOOL ; for ( int i = position , length = string . length ( ) ; i < length ; i ++ ) { if ( delimiters . indexOf ( string . charAt ( i ) , _NUM ) >= _NUM ) { if ( returnDelimiters ) count ++ ; if ( inToken ) { count ++ ; inToken = _BOOL ; } } else { inToken = _BOOL ; } } if ( inToken ) count ++ ; return count ; }
43442	public static synchronized void indexDocument ( CodeIndexDocument codeIndexDocument ) throws IOException { Queue < CodeIndexDocument > queue = new ConcurrentLinkedQueue < > ( ) ; queue . add ( codeIndexDocument ) ; indexDocuments ( queue ) ; queue = null ; }
13290	protected void resetCommon ( ) throws XNIException { int count = fCommonComponents . size ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { XMLComponent c = ( XMLComponent ) fCommonComponents . get ( i ) ; c . reset ( this ) ; } }
21576	private void updateVolumeLabels ( Volume trustedSrc , Volume invalidTgt ) { VirtualArray invalidTgtVA = dbClient . queryObject ( VirtualArray . class , invalidTgt . getVirtualArray ( ) ) ; StringBuilder newLabel = new StringBuilder ( ) ; newLabel . append ( trustedSrc . getLabel ( ) ) ; newLabel . append ( _STR ) ; newLabel . append ( invalidTgtVA . getLabel ( ) ) ; log . info ( _STR + newLabel . toString ( ) ) ; invalidTgt . setLabel ( newLabel . toString ( ) ) ; NamedURI projectURI = invalidTgt . getProject ( ) ; projectURI . setName ( newLabel . toString ( ) ) ; invalidTgt . setProject ( projectURI ) ; NamedURI tenantURI = invalidTgt . getTenant ( ) ; tenantURI . setName ( newLabel . toString ( ) ) ; invalidTgt . setTenant ( tenantURI ) ; Volume tgtVplexVolume = VPlexSrdfUtil . getVplexVolumeFromSrdfVolume ( dbClient , invalidTgt ) ; if ( tgtVplexVolume != null ) { Volume srcVplexVolume = VPlexSrdfUtil . getVplexVolumeFromSrdfVolume ( dbClient , trustedSrc ) ; if ( srcVplexVolume != null ) { newLabel . setLength ( _NUM ) ; newLabel . append ( srcVplexVolume . getLabel ( ) ) ; newLabel . append ( _STR ) ; newLabel . append ( invalidTgtVA . getLabel ( ) ) ; log . info ( _STR + newLabel . toString ( ) ) ; tgtVplexVolume . setLabel ( newLabel . toString ( ) ) ; projectURI = tgtVplexVolume . getProject ( ) ; projectURI . setName ( newLabel . toString ( ) ) ; tgtVplexVolume . setProject ( projectURI ) ; tenantURI = tgtVplexVolume . getTenant ( ) ; tenantURI . setName ( newLabel . toString ( ) ) ; tgtVplexVolume . setTenant ( tenantURI ) ; dbClient . updateAndReindexObject ( tgtVplexVolume ) ; } } }
75413	protected void handle ( Exception exception , String title , String message ) { Utils . handleError ( getShell ( ) , exception , title , message ) ; }
11276	private void readObject ( ObjectInputStream in ) throws IOException , ClassNotFoundException { in . defaultReadObject ( ) ; i18n = Environment . getI18n ( ) ; beanContextChildSupport = new BeanContextChildSupport ( this ) ; }
82762	private void paintForegroundEnabled ( Graphics2D g , int width , int height ) { Shape s = decodeArrowPath ( width , height ) ; g . setPaint ( enabledColor ) ; g . fill ( s ) ; }
30788	private static void logThrow ( Level level , String className , String methodName , String message , Object [ ] args , Throwable thrown ) { java . util . logging . LogRecord lr = new java . util . logging . LogRecord ( level , message ) ; lr . setLoggerName ( logger . getName ( ) ) ; lr . setSourceClassName ( className ) ; lr . setSourceMethodName ( methodName ) ; lr . setParameters ( args ) ; lr . setThrown ( thrown ) ; logger . log ( lr ) ; }
18658	public void testToBigIntegerZero ( ) { String a = _STR ; BigInteger bNumber = new BigInteger ( _STR ) ; BigDecimal aNumber = new BigDecimal ( a ) ; BigInteger result = aNumber . toBigInteger ( ) ; assertTrue ( _STR , result . equals ( bNumber ) ) ; }
68937	public void onAccuracyChanged ( Sensor sensor , int accuracy ) { if ( sensor . getType ( ) != Sensor . TYPE_ACCELEROMETER ) { return ; } if ( this . status == AccelListener . STOPPED ) { return ; } this . accuracy = accuracy ; }
72151	public boolean allowsTrailingArguments ( ) { return allowsTrailingArguments ; }
59243	@ AndroidOnly ( _STR + _STR ) public void testSetMaxCRLNumberLjava_math_BigInteger ( ) { X509CRLSelector selector = new X509CRLSelector ( ) ; BigInteger maxCRL = new BigInteger ( _STR ) ; TestCRL crl = new TestCRL ( maxCRL ) ; selector . setMaxCRLNumber ( null ) ; assertTrue ( _STR , selector . match ( crl ) ) ; selector . setMaxCRLNumber ( maxCRL ) ; assertTrue ( _STR , selector . match ( crl ) ) ; selector . setMaxCRLNumber ( new BigInteger ( _STR ) ) ; assertFalse ( _STR , selector . match ( crl ) ) ; }
36600	private void evaluatePopup ( MouseEvent e ) { if ( e . isPopupTrigger ( ) ) { JPopupMenu menu = createBookmarkPopupMenu ( ) ; if ( menu != null ) { menu . show ( this , e . getX ( ) , e . getY ( ) ) ; } } }
30903	private boolean removeTask ( Task t , int min ) { for ( int i = tasks . size ( ) ; -- i >= min ; ) { if ( tasks . get ( i ) == t ) { tasks . remove ( i ) ; if ( i < firstPending ) { firstPending -- ; for ( int j = threads . size ( ) ; -- j >= _NUM ; ) { TaskThread thread = threads . get ( j ) ; if ( thread . task == t ) { if ( thread != Thread . currentThread ( ) ) thread . interrupt ( ) ; break ; } } } return _BOOL ; } } return _BOOL ; }
59098	public void test_DivideBigDecimalRoundingModeHALF_UP ( ) { String a = _STR ; String b = _STR ; RoundingMode rm = RoundingMode . HALF_UP ; String c = _STR ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) ) ; BigDecimal result = aNumber . divide ( bNumber , rm ) ; assertEquals ( _STR , c , result . toString ( ) ) ; }
17268	protected void ensurePathExists ( String path ) { String [ ] paths = path . split ( _STR ) ; StringBuffer spath = new StringBuffer ( _STR ) ; for ( String temp : paths ) { if ( StringUtils . isBlank ( temp ) ) { continue ; } spath . append ( temp ) ; ensureExists ( spath . toString ( ) , null , acl , CreateMode . PERSISTENT ) ; spath . append ( _STR ) ; } }
48550	public Class < ? > loadClass ( String name , boolean resolve ) throws ClassNotFoundException { int i = name . lastIndexOf ( _STR ) ; if ( i != - _NUM ) { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPackageAccess ( name . substring ( _NUM , i ) ) ; } } if ( ucp . knownToNotExist ( name ) ) { Class < ? > c = findLoadedClass ( name ) ; if ( c != null ) { if ( resolve ) { resolveClass ( c ) ; } return c ; } throw new ClassNotFoundException ( name ) ; } return ( super . loadClass ( name , resolve ) ) ; }
62176	private int measureShort ( int measureSpec ) { int result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) ( _NUM * mRadius + getPaddingTop ( ) + getPaddingBottom ( ) + _NUM ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
8010	private boolean isListChildUnderClipped ( float x , float y ) { final View listChild = findListChildUnder ( x , y ) ; return listChild != null && isDescendantClipped ( listChild ) ; }
33124	Rules ( Workspace workspace ) { this . root = workspace . getRoot ( ) ; this . teamHook = workspace . getTeamHook ( ) ; }
64140	public static void writeByteArrayToFile ( File file , byte [ ] data , boolean append ) throws IOException { OutputStream out = null ; try { out = openOutputStream ( file , append ) ; out . write ( data ) ; out . close ( ) ; } finally { IOUtils . closeQuietly ( out ) ; } }
78820	public void add ( @ NonNull T item ) { synchronized ( lock ) { if ( items == null ) { items = new ArrayList < > ( ) ; } items . add ( item ) ; } if ( notifyOnChange ) { notifyItemInserted ( items . size ( ) ) ; } }
32415	private void checkPendingCustomMessages ( ) { if ( joiningNodes . isEmpty ( ) && isLocalNodeCoordinator ( ) ) { TcpDiscoveryCustomEventMessage msg ; while ( ( msg = pendingCustomMsgs . poll ( ) ) != null ) { processCustomMessage ( msg ) ; if ( msg . verified ( ) ) msgHist . add ( msg ) ; } } }
66609	private static int determineConsecutiveDigitCount ( CharSequence msg , int startpos ) { int count = _NUM ; int len = msg . length ( ) ; int idx = startpos ; if ( idx < len ) { char ch = msg . charAt ( idx ) ; while ( isDigit ( ch ) && idx < len ) { count ++ ; idx ++ ; if ( idx < len ) { ch = msg . charAt ( idx ) ; } } } return count ; }
75307	protected int parseAndAddNode ( XmlResourceParser parser , HashMap < String , TagParser > tagParserMap , ArrayList < Long > screenIds ) throws XmlPullParserException , IOException { if ( TAG_INCLUDE . equals ( parser . getName ( ) ) ) { final int resId = getAttributeResourceValue ( parser , ATTR_WORKSPACE , _NUM ) ; if ( resId != _NUM ) { return parseLayout ( resId , screenIds ) ; } else { return _NUM ; } } mValues . clear ( ) ; parseContainerAndScreen ( parser , mTemp ) ; final long container = mTemp [ _NUM ] ; final long screenId = mTemp [ _NUM ] ; mValues . put ( Favorites . CONTAINER , container ) ; mValues . put ( Favorites . SCREEN , screenId ) ; mValues . put ( Favorites . CELLX , convertToDistanceFromEnd ( getAttributeValue ( parser , ATTR_X ) , mColumnCount ) ) ; mValues . put ( Favorites . CELLY , convertToDistanceFromEnd ( getAttributeValue ( parser , ATTR_Y ) , mRowCount ) ) ; TagParser tagParser = tagParserMap . get ( parser . getName ( ) ) ; if ( tagParser == null ) { if ( LOGD ) Log . d ( TAG , _STR + parser . getName ( ) ) ; return _NUM ; } long newElementId = tagParser . parseAndAdd ( parser ) ; if ( newElementId >= _NUM ) { if ( ! screenIds . contains ( screenId ) && container == Favorites . CONTAINER_DESKTOP ) { screenIds . add ( screenId ) ; } return _NUM ; } return _NUM ; }
35649	private float calculateScrambleImageHeightMultiplier ( float multiplier ) { switch ( currentPuzzle ) { case PuzzleUtils . TYPE_777 : case PuzzleUtils . TYPE_666 : case PuzzleUtils . TYPE_555 : case PuzzleUtils . TYPE_222 : case PuzzleUtils . TYPE_444 : case PuzzleUtils . TYPE_333 : return ( multiplier / _NUM ) * _NUM ; case PuzzleUtils . TYPE_CLOCK : return multiplier / _NUM ; case PuzzleUtils . TYPE_MEGA : return ( multiplier / _NUM ) ; case PuzzleUtils . TYPE_PYRA : return ( float ) ( multiplier / Math . sqrt ( _NUM ) ) ; case PuzzleUtils . TYPE_SKEWB : return ( multiplier / _NUM ) * _NUM ; case PuzzleUtils . TYPE_SQUARE1 : return multiplier ; } return multiplier ; }
10567	public void testNumericScalars ( ) throws Exception { ObjectMapper m = new ObjectMapper ( ) ; m . enableDefaultTyping ( ) ; assertEquals ( _STR , m . writeValueAsString ( new Object [ ] { Integer . valueOf ( _NUM ) } ) ) ; assertEquals ( _STR , m . writeValueAsString ( new Object [ ] { Long . valueOf ( _NUM ) } ) ) ; assertEquals ( _STR , m . writeValueAsString ( new Object [ ] { Double . valueOf ( _NUM ) } ) ) ; assertEquals ( _STR , m . writeValueAsString ( new Object [ ] { Float . valueOf ( _NUM ) } ) ) ; }
23838	protected void closeCallbacksExceptListener ( ) { closeCacheCallback ( getCacheLoader ( ) ) ; closeCacheCallback ( getCacheWriter ( ) ) ; closeCacheCallback ( getEvictionController ( ) ) ; }
650	private static int indexOf ( Object o , Object [ ] elements , int index , int fence ) { if ( o == null ) { for ( int i = index ; i < fence ; i ++ ) if ( elements [ i ] == null ) return i ; } else { for ( int i = index ; i < fence ; i ++ ) if ( o . equals ( elements [ i ] ) ) return i ; } return - _NUM ; }
80201	private void populateProfiles ( final ProfileList profiles ) { profilesComboBox . removeAllItems ( ) ; for ( Profile p : profiles ) { profilesComboBox . addItem ( p ) ; } final int count = profilesComboBox . getItemCount ( ) ; if ( count != _NUM ) { profilesComboBox . setSelectedIndex ( count - _NUM ) ; } }
19821	private long checkFileHeader ( BufferedFileDataInput bfdi ) throws ReplicatorException , InterruptedException { int magic = _NUM ; short major = _NUM ; short minor = _NUM ; try { bfdi . waitAvailable ( HEADER_LENGTH , HEADER_WAIT_MILLIS ) ; magic = bfdi . readInt ( ) ; major = bfdi . readShort ( ) ; minor = bfdi . readShort ( ) ; baseSeqno = bfdi . readLong ( ) ; } catch ( IOException e ) { throw new THLException ( _STR + file . getAbsolutePath ( ) , e ) ; } if ( magic != MAGIC_NUMBER ) throw new THLException ( _STR + file . getAbsolutePath ( ) + _STR ) ; if ( major != MAJOR_VERSION ) throw new THLException ( _STR + file . getAbsolutePath ( ) + _STR ) ; if ( minor != MINOR_VERSION ) logger . warn ( _STR + file . getAbsolutePath ( ) + _STR + major + _STR + minor + _STR + MAJOR_VERSION + _STR + MINOR_VERSION ) ; return baseSeqno ; }
64844	public float realAbsolute ( ) { return Math . abs ( mLeft ) ; }
52844	private ExtremumType extremumType ( int n , double [ ] alpha_extreme , HyperBoundingBox interval ) { if ( n == alpha_extreme . length - _NUM ) { return extremumType ; } double [ ] alpha_extreme_l = new double [ alpha_extreme . length ] ; double [ ] alpha_extreme_r = new double [ alpha_extreme . length ] ; double [ ] alpha_extreme_c = new double [ alpha_extreme . length ] ; System . arraycopy ( alpha_extreme , _NUM , alpha_extreme_l , _NUM , alpha_extreme . length ) ; System . arraycopy ( alpha_extreme , _NUM , alpha_extreme_r , _NUM , alpha_extreme . length ) ; System . arraycopy ( alpha_extreme , _NUM , alpha_extreme_c , _NUM , alpha_extreme . length ) ; double [ ] centroid = SpatialUtil . centroid ( interval ) ; for ( int i = _NUM ; i < n ; i ++ ) { alpha_extreme_l [ i ] = centroid [ i ] ; alpha_extreme_r [ i ] = centroid [ i ] ; alpha_extreme_c [ i ] = centroid [ i ] ; } double intervalLength = interval . getMax ( n ) - interval . getMin ( n ) ; alpha_extreme_l [ n ] = Math . random ( ) * intervalLength + interval . getMin ( n ) ; alpha_extreme_r [ n ] = Math . random ( ) * intervalLength + interval . getMin ( n ) ; double f_c = function ( alpha_extreme_c ) ; double f_l = function ( alpha_extreme_l ) ; double f_r = function ( alpha_extreme_r ) ; if ( f_l < f_c ) { if ( f_r < f_c || Math . abs ( f_r - f_c ) < DELTA ) { return ExtremumType . MAXIMUM ; } } if ( f_r < f_c ) { if ( f_l < f_c || Math . abs ( f_l - f_c ) < DELTA ) { return ExtremumType . MAXIMUM ; } } if ( f_l > f_c ) { if ( f_r > f_c || Math . abs ( f_r - f_c ) < DELTA ) { return ExtremumType . MINIMUM ; } } if ( f_r > f_c ) { if ( f_l > f_c || Math . abs ( f_l - f_c ) < DELTA ) { return ExtremumType . MINIMUM ; } } if ( Math . abs ( f_l - f_c ) < DELTA && Math . abs ( f_r - f_c ) < DELTA ) { return ExtremumType . CONSTANT ; } throw new IllegalArgumentException ( _STR + this + _STR + _STR + f_l + _STR + _STR + f_c + _STR + _STR + f_r + _STR + _STR + vec . toArray ( ) + _STR + _STR + FormatUtil . format ( alpha_extreme_c ) + _STR + _STR + FormatUtil . format ( alpha_extreme_l ) + _STR + _STR + FormatUtil . format ( alpha_extreme_r ) + _STR + _STR + n ) ; }
44611	public static String map2OID ( String algName ) { return alg2OidMap . get ( algName . toUpperCase ( Locale . US ) ) ; }
5469	@ Override public Generator < ICircle > construct ( String [ ] args ) { return new UniformGenerator ( Double . valueOf ( args [ _NUM ] ) ) ; }
2553	private boolean yy_refill ( ) throws java . io . IOException { if ( yy_startRead > _NUM ) { System . arraycopy ( yy_buffer , yy_startRead , yy_buffer , _NUM , yy_endRead - yy_startRead ) ; yy_endRead -= yy_startRead ; yy_currentPos -= yy_startRead ; yy_markedPos -= yy_startRead ; yy_pushbackPos -= yy_startRead ; yy_startRead = _NUM ; } if ( yy_currentPos >= yy_buffer . length ) { char newBuffer [ ] = new char [ yy_currentPos * _NUM ] ; System . arraycopy ( yy_buffer , _NUM , newBuffer , _NUM , yy_buffer . length ) ; yy_buffer = newBuffer ; } int numRead = yy_reader . read ( yy_buffer , yy_endRead , yy_buffer . length - yy_endRead ) ; if ( numRead < _NUM ) { return _BOOL ; } else { yy_endRead += numRead ; return _BOOL ; } }
60193	protected void processMouseEvent ( MouseEvent e ) { if ( myInplaceComponent != null && ( MouseEvent . MOUSE_PRESSED == e . getID ( ) || MouseEvent . MOUSE_RELEASED == e . getID ( ) ) ) { finishEditing ( _BOOL ) ; } super . processMouseEvent ( e ) ; }
56993	protected void addModule ( Map < Class < ? extends IFloodlightService > , IFloodlightModule > moduleMap , Collection < IFloodlightModule > moduleList , IFloodlightModule module ) { Collection < Class < ? extends IFloodlightService > > servs = moduleServiceMap . get ( module ) ; if ( servs != null ) { for ( Class < ? extends IFloodlightService > c : servs ) moduleMap . put ( c , module ) ; } moduleList . add ( module ) ; }
36852	protected boolean hasAllTables ( ) throws CouldntLoadDataException , InvalidDatabaseException { NaviLogger . info ( _STR ) ; final int counter = PostgreSQLHelpers . getTableCount ( getConnection ( ) , Lists . newArrayList ( TABLES ) ) ; if ( counter == _NUM ) { return _BOOL ; } else if ( counter == TABLES . length ) { return _BOOL ; } else { throw new InvalidDatabaseException ( String . format ( _STR , counter , TABLES . length ) ) ; } }
34485	public List < String > classify ( List < List < Feature > > features ) throws CleartkProcessingException { String [ ] [ ] featureStringArray = toStrings ( features ) ; Pipe pipe = transducer . getInputPipe ( ) ; Instance instance = new Instance ( featureStringArray , null , null , null ) ; instance = pipe . instanceFrom ( instance ) ; Sequence < ? > data = ( Sequence < ? > ) instance . getData ( ) ; Sequence < ? > untypedSequence = transducer . transduce ( data ) ; Sequence < String > sequence = ReflectionUtil . uncheckedCast ( untypedSequence ) ; List < String > returnValues = new ArrayList < String > ( ) ; for ( int i = _NUM ; i < sequence . size ( ) ; i ++ ) { String encodedOutcome = sequence . get ( i ) ; returnValues . add ( outcomeEncoder . decode ( encodedOutcome ) ) ; } return returnValues ; }
62968	public void onBindHeaderViewHolder ( RecyclerView . ViewHolder holder , int position ) { onBindHeaderViewHolder ( holder , position , Collections . emptyList ( ) ) ; }
36397	private void updateLineList ( ) { if ( horizontalLineRadiobutton . isSelected ( ) ) { setHorizontalLineSelected ( ) ; } else { setVerticalLineSelected ( ) ; } updateButtonStates ( ) ; }
32926	public void rectangle ( double x , double y , double halfWidth , double halfHeight ) { if ( halfWidth < _NUM ) throw new IllegalArgumentException ( _STR ) ; if ( halfHeight < _NUM ) throw new IllegalArgumentException ( _STR ) ; double xs = scaleX ( x ) ; double ys = scaleY ( y ) ; double ws = factorX ( _NUM * halfWidth ) ; double hs = factorY ( _NUM * halfHeight ) ; if ( ws <= _NUM && hs <= _NUM ) pixel ( x , y ) ; else offscreen . draw ( new Rectangle2D . Double ( xs - ws / _NUM , ys - hs / _NUM , ws , hs ) ) ; draw ( ) ; }
82617	protected final void refreshLoadingViewsSize ( ) { final int maximumPullScroll = ( int ) ( getMaximumPullScroll ( ) * _NUM ) ; int pLeft = getPaddingLeft ( ) ; int pTop = getPaddingTop ( ) ; int pRight = getPaddingRight ( ) ; int pBottom = getPaddingBottom ( ) ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setWidth ( maximumPullScroll ) ; pLeft = - maximumPullScroll ; } else { pLeft = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setWidth ( maximumPullScroll ) ; pRight = - maximumPullScroll ; } else { pRight = _NUM ; } break ; case VERTICAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setHeight ( maximumPullScroll ) ; pTop = - maximumPullScroll ; } else { pTop = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setHeight ( maximumPullScroll ) ; pBottom = - maximumPullScroll ; } else { pBottom = _NUM ; } break ; } if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR , pLeft , pTop , pRight , pBottom ) ) ; } setPadding ( pLeft , pTop , pRight , pBottom ) ; }
43312	public void replaceSplitElement ( int aIndex , Fragment aSplitElement ) { splits . set ( aIndex , aSplitElement ) ; }
3003	private void startItemList ( StringBuilder result , String rootId ) { result . append ( _STR + _STR + rootId + _STR ) ; }
39653	private static int numInitialSplits ( long numRecords ) { final int maxSplits = _NUM ; final long recordsPerSplit = _NUM ; return ( int ) Math . min ( maxSplits , numRecords / recordsPerSplit + _NUM ) ; }
65838	public void mouseClicked ( MouseEvent e ) { if ( e . getClickCount ( ) > _NUM ) { System . gc ( ) ; } }
34834	private static String [ ] scanForSources ( final File sourceDir , final Set < String > sourceIncludes , final Set < String > sourceExcludes ) { final DirectoryScanner ds = new DirectoryScanner ( ) ; ds . setFollowSymlinks ( _BOOL ) ; ds . setBasedir ( sourceDir ) ; ds . setIncludes ( sourceIncludes . toArray ( new String [ sourceIncludes . size ( ) ] ) ) ; ds . setExcludes ( sourceExcludes . toArray ( new String [ sourceExcludes . size ( ) ] ) ) ; ds . addDefaultExcludes ( ) ; try { ds . scan ( ) ; } catch ( IllegalStateException e ) { return new String [ _NUM ] ; } return ds . getIncludedFiles ( ) ; }
31448	private boolean hasNextPostponed ( ) { return ! postponedRoutes . isEmpty ( ) ; }
51062	public boolean hasSingleElement ( ) { return mSelectedWidgets . size ( ) == _NUM ; }
32342	public IgfsPath ( URI uri ) { A . notNull ( uri , _STR ) ; path = normalizePath ( uri . getPath ( ) ) ; }
1346	public int toInt ( Element el , String attributeName ) { return Caster . toIntValue ( el . getAttribute ( attributeName ) , Integer . MIN_VALUE ) ; }
51962	public static String readFully ( Reader reader ) throws IOException { try { StringWriter writer = new StringWriter ( ) ; char [ ] buffer = new char [ _NUM ] ; int count ; while ( ( count = reader . read ( buffer ) ) != - _NUM ) { writer . write ( buffer , _NUM , count ) ; } return writer . toString ( ) ; } finally { reader . close ( ) ; } }
7293	public void addGetters ( int assignedPropertyNumber , String propertyName ) { for ( EventType type : knownTypes ) { EventPropertyGetter getter = type . getGetter ( propertyName ) ; VariantPropertyGetterRow row = allGetters . get ( type ) ; if ( row == null ) { synchronized ( this ) { row = new VariantPropertyGetterRow ( type , new EventPropertyGetter [ assignedPropertyNumber + _NUM ] ) ; allGetters . put ( type , row ) ; } } row . addGetter ( assignedPropertyNumber , getter ) ; } properties . add ( propertyName ) ; }
26965	protected void markUsed ( Entry entry ) { entry . lastUsed = System . nanoTime ( ) ; }
41361	@ Override public String execute ( ) { return SUCCESS ; }
56191	private void handleStateLeft ( InetAddress endpoint , String [ ] pieces ) { assert pieces . length >= _NUM ; Collection < Token > tokens = getTokensFor ( endpoint ) ; if ( logger . isDebugEnabled ( ) ) logger . debug ( _STR , endpoint , tokens ) ; excise ( tokens , endpoint , extractExpireTime ( pieces ) ) ; }
45919	public static void register ( String algorithmURI , Class < ? extends SignatureAlgorithmSpi > implementingClass ) throws AlgorithmAlreadyRegisteredException , ClassNotFoundException , XMLSignatureException { JavaUtils . checkRegisterPermission ( ) ; if ( log . isLoggable ( java . util . logging . Level . FINE ) ) { log . log ( java . util . logging . Level . FINE , _STR + algorithmURI + _STR + implementingClass ) ; } Class < ? extends SignatureAlgorithmSpi > registeredClass = algorithmHash . get ( algorithmURI ) ; if ( registeredClass != null ) { Object exArgs [ ] = { algorithmURI , registeredClass } ; throw new AlgorithmAlreadyRegisteredException ( _STR , exArgs ) ; } algorithmHash . put ( algorithmURI , implementingClass ) ; }
31807	@ SuppressWarnings ( _STR ) public KeyValuePersistenceSettings ( File settingsFile ) { InputStream in ; try { in = new FileInputStream ( settingsFile ) ; } catch ( IOException e ) { throw new IgniteException ( _STR + settingsFile . getAbsolutePath ( ) , e ) ; } init ( loadSettings ( in ) ) ; }
33562	public boolean containsWordBreakingChar ( final @ NonNull CharSequence input ) { if ( ! TextUtils . isEmpty ( input ) ) { for ( int i = _NUM ; i < input . length ( ) ; i ++ ) { char c = input . charAt ( i ) ; if ( isWordBreakingChar ( c ) ) { return _BOOL ; } } } return _BOOL ; }
71226	private void checkInteriorIntersections ( ) { for ( Iterator i = segStrings . iterator ( ) ; i . hasNext ( ) ; ) { SegmentString ss0 = ( SegmentString ) i . next ( ) ; for ( Iterator j = segStrings . iterator ( ) ; j . hasNext ( ) ; ) { SegmentString ss1 = ( SegmentString ) j . next ( ) ; checkInteriorIntersections ( ss0 , ss1 ) ; } } }
82346	public synchronized boolean removeElement ( Object object ) { int index ; if ( ( index = indexOf ( object , _NUM ) ) == - _NUM ) { return _BOOL ; } removeElementAt ( index ) ; return _BOOL ; }
70625	private < T > UnaryOperator < T > compose ( UnaryOperator < T > before , UnaryOperator < T > after ) { return null ; }
19784	private void addCdcColSpecs ( ArrayList < ColumnSpec > cdcSpecs , OneRowChange cdcRowChangeData ) { int cdcPos = cdcSpecs . size ( ) ; if ( cdcColumnsAtFront ) cdcPos = _NUM ; ColumnSpec spec = cdcRowChangeData . new ColumnSpec ( ) ; spec . setIndex ( cdcPos + _NUM ) ; spec . setName ( _STR ) ; spec . setType ( java . sql . Types . VARCHAR ) ; spec . setLength ( _NUM ) ; cdcSpecs . add ( cdcPos , spec ) ; spec = cdcRowChangeData . new ColumnSpec ( ) ; spec . setIndex ( cdcPos + _NUM + _NUM ) ; spec . setName ( _STR ) ; spec . setType ( java . sql . Types . TIMESTAMP ) ; cdcSpecs . add ( cdcPos + _NUM , spec ) ; spec = cdcRowChangeData . new ColumnSpec ( ) ; spec . setIndex ( cdcPos + _NUM + _NUM ) ; spec . setName ( _STR ) ; spec . setType ( java . sql . Types . BIGINT ) ; cdcSpecs . add ( cdcPos + _NUM , spec ) ; }
50875	public static String convertToJavaFieldName ( String name ) { int dotIndex = name . indexOf ( _STR ) ; if ( dotIndex >= _NUM ) { name = name . substring ( _NUM , dotIndex ) ; } String [ ] split = name . split ( _STR ) ; StringBuilder out = new StringBuilder ( ) ; boolean first = _BOOL ; for ( String section : split ) { if ( first ) { first = _BOOL ; out . append ( section ) ; } else { out . append ( StringUtil . capitalize ( section ) ) ; } } return out . toString ( ) ; }
61701	public static SecretKeys generateKey ( ) throws GeneralSecurityException { fixPrng ( ) ; KeyGenerator keyGen = KeyGenerator . getInstance ( CIPHER ) ; keyGen . init ( AES_KEY_LENGTH_BITS ) ; SecretKey confidentialityKey = keyGen . generateKey ( ) ; byte [ ] integrityKeyBytes = randomBytes ( HMAC_KEY_LENGTH_BITS / _NUM ) ; SecretKey integrityKey = new SecretKeySpec ( integrityKeyBytes , HMAC_ALGORITHM ) ; return new SecretKeys ( confidentialityKey , integrityKey ) ; }
25137	public static void checkArgument ( boolean expression , @ Nullable Object errorMessage ) { if ( ! expression ) { throw new IllegalArgumentException ( String . valueOf ( errorMessage ) ) ; } }
59688	protected void execute ( String [ ] sqls , SQLiteDatabase db ) { String throwSQL = _STR ; try { if ( sqls != null ) { for ( String sql : sqls ) { throwSQL = sql ; db . execSQL ( BaseUtility . changeCase ( sql ) ) ; } } } catch ( SQLException e ) { throw new DatabaseGenerateException ( DatabaseGenerateException . SQL_ERROR + throwSQL ) ; } }
83531	private synchronized void rebuildJournal ( ) throws IOException { if ( journalWriter != null ) { journalWriter . close ( ) ; } Writer writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFileTmp ) , Util . US_ASCII ) ) ; try { writer . write ( MAGIC ) ; writer . write ( _STR ) ; writer . write ( VERSION_1 ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( appVersion ) ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( valueCount ) ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; for ( Entry entry : lruEntries . values ( ) ) { if ( entry . currentEditor != null ) { writer . write ( DIRTY + _STR + entry . key + _STR ) ; } else { writer . write ( CLEAN + _STR + entry . key + entry . getLengths ( ) + _STR ) ; } } } finally { writer . close ( ) ; } if ( journalFile . exists ( ) ) { renameTo ( journalFile , journalFileBackup , _BOOL ) ; } renameTo ( journalFileTmp , journalFile , _BOOL ) ; journalFileBackup . delete ( ) ; journalWriter = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFile , _BOOL ) , Util . US_ASCII ) ) ; }
70344	private void refreshDoneButton ( boolean done ) { butDone . setText ( done ? Messages . getString ( _STR ) : Messages . getString ( _STR ) ) ; }
17376	private void createMigrationTaskPage ( ) { MigrationTaskEditor migrationTaskEditor = new MigrationTaskEditor ( migrationTask , getContainer ( ) ) ; int index = addPage ( migrationTaskEditor . getControl ( ) ) ; setPageText ( index , _STR ) ; taskListeners . add ( migrationTaskEditor ) ; }
39988	protected void onPageScrolled ( int position , float offset , int offsetPixels ) { if ( mDecorChildCount > _NUM ) { final int scrollX = getScrollX ( ) ; int paddingLeft = getPaddingLeft ( ) ; int paddingRight = getPaddingRight ( ) ; final int width = getWidth ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( ! lp . isDecor ) continue ; final int hgrav = lp . gravity & Gravity . HORIZONTAL_GRAVITY_MASK ; int childLeft = _NUM ; switch ( hgrav ) { default : childLeft = paddingLeft ; break ; case Gravity . LEFT : childLeft = paddingLeft ; paddingLeft += child . getWidth ( ) ; break ; case Gravity . CENTER_HORIZONTAL : childLeft = Math . max ( ( width - child . getMeasuredWidth ( ) ) / _NUM , paddingLeft ) ; break ; case Gravity . RIGHT : childLeft = width - paddingRight - child . getMeasuredWidth ( ) ; paddingRight += child . getMeasuredWidth ( ) ; break ; } childLeft += scrollX ; final int childOffset = childLeft - child . getLeft ( ) ; if ( childOffset != _NUM ) { child . offsetLeftAndRight ( childOffset ) ; } } } if ( mOnPageChangeListener != null ) { mOnPageChangeListener . onPageScrolled ( position , offset , offsetPixels ) ; } if ( mInternalPageChangeListener != null ) { mInternalPageChangeListener . onPageScrolled ( position , offset , offsetPixels ) ; } if ( mPageTransformer != null ) { final int scrollX = getScrollX ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( lp . isDecor ) continue ; final float transformPos = ( float ) ( child . getLeft ( ) - scrollX ) / getClientWidth ( ) ; mPageTransformer . transformPage ( child , transformPos ) ; } } mCalledSuper = _BOOL ; }
50592	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
28835	private void expand ( int i ) { if ( count + i <= buf . length ) { return ; } byte [ ] newbuf = mPool . getBuf ( ( count + i ) * _NUM ) ; System . arraycopy ( buf , _NUM , newbuf , _NUM , count ) ; mPool . returnBuf ( buf ) ; buf = newbuf ; }
57065	public static int toIPv4Address ( String ipAddress ) { if ( ipAddress == null ) throw new IllegalArgumentException ( _STR + _STR ) ; String [ ] octets = ipAddress . split ( _STR ) ; if ( octets . length != _NUM ) throw new IllegalArgumentException ( _STR + _STR ) ; int result = _NUM ; for ( int i = _NUM ; i < _NUM ; ++ i ) { int oct = Integer . valueOf ( octets [ i ] ) ; if ( oct > _NUM || oct < _NUM ) throw new IllegalArgumentException ( _STR + _STR ) ; result |= oct << ( ( _NUM - i ) * _NUM ) ; } return result ; }
57022	public void closeCursor ( Cursor cursor ) { cursor . close ( ) ; cursorMap . remove ( Integer . valueOf ( cursor . getCursorId ( ) ) ) ; }
71884	private boolean hasNext ( Pattern pattern ) { if ( ! hasNext ( ) ) { return _BOOL ; } Matcher matcher = pattern . matcher ( gserValue . substring ( pos , length ) ) ; return matcher . find ( ) ; }
76212	void pushInt ( int i ) { switch ( i ) { case - _NUM : mv . visitInsn ( ICONST_M1 ) ; return ; case _NUM : mv . visitInsn ( ICONST_0 ) ; return ; case _NUM : mv . visitInsn ( ICONST_1 ) ; return ; case _NUM : mv . visitInsn ( ICONST_2 ) ; return ; case _NUM : mv . visitInsn ( ICONST_3 ) ; return ; case _NUM : mv . visitInsn ( ICONST_4 ) ; return ; case _NUM : mv . visitInsn ( ICONST_5 ) ; return ; } if ( i >= Byte . MIN_VALUE && i <= Byte . MAX_VALUE ) { mv . visitIntInsn ( BIPUSH , i ) ; return ; } if ( i >= Short . MIN_VALUE && i <= Short . MAX_VALUE ) { mv . visitIntInsn ( SIPUSH , i ) ; return ; } mv . visitLdcInsn ( Integer . valueOf ( i ) ) ; }
63162	public static String xmlNode ( String name , String attributes , String content , boolean indent ) { String start = attributes == null ? name : name + attributes ; if ( content == null ) { return _STR + start + _STR ; } if ( indent && content . indexOf ( _STR ) >= _NUM ) { content = _STR + indent ( content ) ; } return _STR + start + _STR + content + _STR + name + _STR ; }
78821	public void add ( int position , @ NonNull T item ) { synchronized ( lock ) { if ( items == null ) { items = new ArrayList < > ( ) ; } items . add ( position , item ) ; } if ( notifyOnChange ) { notifyItemInserted ( position ) ; } }
33487	void notifyFailure ( Throwable exception ) { synchronized ( waitObject ) { isComplete = _BOOL ; if ( exception instanceof MqttException ) { pendingException = ( MqttException ) exception ; } else { pendingException = new MqttException ( exception ) ; } waitObject . notifyAll ( ) ; if ( exception instanceof MqttException ) { lastException = ( MqttException ) exception ; } if ( listener != null ) { listener . onFailure ( this , exception ) ; } } }
79355	public static void transform ( StreamSource src , StreamSource stylesheet , Fop fop ) throws FOPException { Result res = new SAXResult ( fop . getDefaultHandler ( ) ) ; try { TransformerFactory factory = TransformerFactory . newInstance ( ) ; Transformer transformer ; if ( stylesheet == null ) { transformer = factory . newTransformer ( ) ; } else { transformer = factory . newTransformer ( stylesheet ) ; } transformer . setURIResolver ( new LocalResolver ( transformer . getURIResolver ( ) ) ) ; transformer . transform ( src , res ) ; } catch ( Exception e ) { throw new FOPException ( e ) ; } }
56891	public List < String > splitStringWithDefaultDelimiterEscaped ( String inputString ) { String delimiter = configurationHelper . getProperty ( ConfigurationValue . FIELD_DATA_DELIMITER ) ; String escapeChar = configurationHelper . getProperty ( ConfigurationValue . FIELD_DATA_DELIMITER_ESCAPE_CHAR ) ; List < String > splitString = new ArrayList < > ( ) ; if ( StringUtils . isNotBlank ( inputString ) ) { String regex = _STR + Pattern . quote ( escapeChar ) + _STR + Pattern . quote ( delimiter ) ; for ( String s : inputString . split ( regex ) ) { splitString . add ( s . replace ( escapeChar + delimiter , delimiter ) ) ; } } return splitString ; }
60356	protected final boolean readAvailableBlocking ( ) throws IOException { char [ ] buffer = myBuffer ; StringBuilder token = myTextBuffer ; token . setLength ( _NUM ) ; boolean read = _BOOL ; int n ; while ( ( n = myReader . read ( buffer ) ) > _NUM ) { if ( myScheduledSubmitter != null ) myScheduledSubmitter . cancel ( _BOOL ) ; read = _BOOL ; synchronized ( myTextBuffer ) { processLine ( buffer , token , n ) ; } myScheduledSubmitter = myExecutorService . submit ( myTokenSubmitter ) ; } submitToken ( ) ; return read ; }
29023	public void deleteObligation ( final Obligation obligation , int basicBlockId ) throws ObligationAcquiredOrReleasedInLoopException { Map < ObligationSet , State > updatedStateMap = new HashMap < ObligationSet , State > ( ) ; for ( Iterator < State > i = stateIterator ( ) ; i . hasNext ( ) ; ) { State state = i . next ( ) ; checkCircularity ( state , obligation , basicBlockId ) ; ObligationSet obligationSet = state . getObligationSet ( ) ; obligationSet . remove ( obligation ) ; if ( ! obligationSet . isEmpty ( ) ) { updatedStateMap . put ( obligationSet , state ) ; } } replaceMap ( updatedStateMap ) ; }
79608	private void clipViewOnTheRight ( Rect curViewBound , float curViewWidth , int right ) { curViewBound . right = ( int ) ( right - mClipPadding ) ; curViewBound . left = ( int ) ( curViewBound . right - curViewWidth ) ; }
62286	public ContentImpl createCompoundPackageContent ( OleBlobImpl blob , String prettyName , String className , String typeName , ByteBuffer blobBb , int dataBlockLen ) { return new CompoundContentImpl ( blob , prettyName , className , typeName , blobBb . position ( ) , dataBlockLen ) ; }
38957	protected boolean checkCoverage ( ) { int i ; int n ; int [ ] count ; Range r ; String attrIndex ; SubspaceClusterDefinition cl ; count = new int [ getNumAttributes ( ) ] ; for ( i = _NUM ; i < getNumAttributes ( ) ; i ++ ) { for ( n = _NUM ; n < getClusters ( ) . length ; n ++ ) { cl = ( SubspaceClusterDefinition ) getClusters ( ) [ n ] ; r = new Range ( cl . getAttrIndexRange ( ) ) ; r . setUpper ( getNumAttributes ( ) ) ; if ( r . isInRange ( i ) ) { count [ i ] ++ ; } } } attrIndex = _STR ; for ( i = _NUM ; i < count . length ; i ++ ) { if ( count [ i ] == _NUM ) { if ( attrIndex . length ( ) != _NUM ) { attrIndex += _STR ; } attrIndex += ( i + _NUM ) ; } } if ( attrIndex . length ( ) != _NUM ) { throw new IllegalArgumentException ( _STR + _STR + attrIndex + _STR ) ; } return _BOOL ; }
42174	private Set < Integer > findValues ( String string ) { Set < Integer > results = new TreeSet < Integer > ( ) ; for ( String str : string . split ( _STR ) ) { if ( ! str . equals ( _STR ) ) { results . add ( findValue ( str ) ) ; } } return results ; }
30833	private static int indexOf ( Object [ ] array , int len , Object elt ) { for ( int i = _NUM ; i < len ; i ++ ) { if ( elt . equals ( array [ i ] ) ) return i ; } return - _NUM ; }
67750	@ Deprecated public void append ( final String name , final String value ) { List < String > l = map . get ( name ) ; if ( l != null ) { l . add ( value ) ; } else { l = Lists . newArrayList ( value ) ; map . put ( name , l ) ; } }
60696	public boolean equals ( Object obj ) { if ( obj == this ) { return _BOOL ; } if ( ! ( obj instanceof Certificate ) ) { return _BOOL ; } Certificate object = ( Certificate ) obj ; try { return Arrays . equals ( getEncoded ( ) , object . getEncoded ( ) ) ; } catch ( CertificateEncodingException e ) { return _BOOL ; } }
7067	public Statement between ( Object former , Object later ) { statement . append ( _STR ) ; append ( former ) ; statement . append ( _STR ) ; append ( later ) ; return this ; }
27614	public byte [ ] encode1 ( final String s ) { final ByteArrayBuffer tmp = new ByteArrayBuffer ( s . length ( ) ) ; final int nwritten = uc . encode ( s , tmp ) ; final int npack = LongPacker . getByteLength ( nwritten ) ; final byte [ ] a = new byte [ npack + nwritten ] ; final DataOutputBuffer dob = new DataOutputBuffer ( _NUM , a ) ; try { dob . packLong ( nwritten ) ; dob . append ( tmp . array ( ) , _NUM , tmp . pos ( ) ) ; return a ; } finally { try { dob . close ( ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } } }
50604	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
5744	public static Map < Object , Long > valueHistogram ( GeoTimeSerie gts ) { Map < Object , Long > occurrences = new HashMap < Object , Long > ( ) ; for ( int i = _NUM ; i < gts . values ; i ++ ) { Object value = GTSHelper . valueAtIndex ( gts , i ) ; if ( ! occurrences . containsKey ( value ) ) { occurrences . put ( value , _NUM ) ; } else { occurrences . put ( value , _NUM + occurrences . get ( value ) ) ; } } if ( GTSHelper . isBucketized ( gts ) && gts . bucketcount != gts . values ) { occurrences . put ( null , ( long ) ( gts . bucketcount - gts . values ) ) ; } return occurrences ; }
60065	private void updateExistingRow ( final SQLiteDatabase database , final long id , boolean bumpCount ) { String stringId = String . valueOf ( id ) ; database . beginTransaction ( ) ; final Cursor cursor = database . query ( SongPlayCountColumns . NAME , null , WHERE_ID_EQUALS , new String [ ] { stringId } , null , null , null ) ; if ( cursor != null && cursor . moveToFirst ( ) ) { int lastUpdatedIndex = cursor . getColumnIndex ( SongPlayCountColumns . LAST_UPDATED_WEEK_INDEX ) ; int lastUpdatedWeek = cursor . getInt ( lastUpdatedIndex ) ; int weekDiff = mNumberOfWeeksSinceEpoch - lastUpdatedWeek ; if ( Math . abs ( weekDiff ) >= NUM_WEEKS ) { deleteEntry ( database , stringId ) ; if ( bumpCount ) { createNewPlayedEntry ( database , id ) ; } } else if ( weekDiff != _NUM ) { int [ ] playCounts = new int [ NUM_WEEKS ] ; if ( weekDiff > _NUM ) { for ( int i = _NUM ; i < NUM_WEEKS - weekDiff ; i ++ ) { playCounts [ i + weekDiff ] = cursor . getInt ( getColumnIndexForWeek ( i ) ) ; } } else if ( weekDiff < _NUM ) { for ( int i = _NUM ; i < NUM_WEEKS + weekDiff ; i ++ ) { playCounts [ i ] = cursor . getInt ( getColumnIndexForWeek ( i - weekDiff ) ) ; } } if ( bumpCount ) { playCounts [ _NUM ] ++ ; } float score = calculateScore ( playCounts ) ; if ( score < _NUM ) { deleteEntry ( database , stringId ) ; } else { ContentValues values = new ContentValues ( NUM_WEEKS + _NUM ) ; values . put ( SongPlayCountColumns . LAST_UPDATED_WEEK_INDEX , mNumberOfWeeksSinceEpoch ) ; values . put ( SongPlayCountColumns . PLAYCOUNTSCORE , score ) ; for ( int i = _NUM ; i < NUM_WEEKS ; i ++ ) { values . put ( getColumnNameForWeek ( i ) , playCounts [ i ] ) ; } database . update ( SongPlayCountColumns . NAME , values , WHERE_ID_EQUALS , new String [ ] { stringId } ) ; } } else if ( bumpCount ) { ContentValues values = new ContentValues ( _NUM ) ; int scoreIndex = cursor . getColumnIndex ( SongPlayCountColumns . PLAYCOUNTSCORE ) ; float score = cursor . getFloat ( scoreIndex ) + getScoreMultiplierForWeek ( _NUM ) ; values . put ( SongPlayCountColumns . PLAYCOUNTSCORE , score ) ; values . put ( getColumnNameForWeek ( _NUM ) , cursor . getInt ( getColumnIndexForWeek ( _NUM ) ) + _NUM ) ; database . update ( SongPlayCountColumns . NAME , values , WHERE_ID_EQUALS , new String [ ] { stringId } ) ; } cursor . close ( ) ; } else if ( bumpCount ) { createNewPlayedEntry ( database , id ) ; } database . setTransactionSuccessful ( ) ; database . endTransaction ( ) ; }
53077	private void computeWeights ( Node node ) { int wsum = _NUM ; for ( Node child : node . children ) { computeWeights ( child ) ; wsum += child . weight ; } node . weight = Math . max ( _NUM , wsum ) ; }
28241	public Searcher ( ) throws IOException { searcher = new IndexSearcher ( DirectoryReader . open ( FSDirectory . open ( Paths . get ( INDEX_DIR ) ) ) ) ; parser = new QueryParser ( CONTENT_FIELD , new StandardAnalyzer ( ) ) ; }
56377	public QueryStringQueryBuilder field ( String field ) { if ( fields == null ) { fields = new ArrayList < > ( ) ; } fields . add ( field ) ; return this ; }
31526	public static < R , A , B > CompletionStage < R > combine ( CompletionStage < A > a , CompletionStage < B > b , BiFunction < A , B , R > function ) { return a . thenCombine ( b , function ) ; }
19738	protected String buildCreateSchemaStatement ( ) throws ReplicatorException { return null ; }
58495	public void testNegPosFirstShorter ( ) { byte aBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; int aSign = - _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . and ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
55264	public StreamInfoManager ( TwitchApi api , StreamInfoListener listener ) { this . listener = listener ; this . api = api ; pendingRequests = new HashMap < > ( ) ; invalidStreamInfo = new StreamInfo ( _STR , listener ) ; invalidStreamInfo . setRequested ( ) ; }
53556	public Sentence asSentence ( ) { return Sentence . newConjunction ( sentences ) ; }
80040	public boolean isPronoun ( ) { return typeString . contains ( SUFFIX_PRONOUN ) ; }
5900	protected void appendShortType ( StringBuilder sb , FieldType fieldType , int fieldWidth ) { sb . append ( _STR ) ; }
81838	public static Vector tokenizeString ( String source , String separator ) { if ( separator . length ( ) == _NUM ) { return tokenizeString ( source , separator . charAt ( _NUM ) ) ; } Vector tokenized = new Vector ( ) ; int len = source . length ( ) ; StringBuilder buf = new StringBuilder ( ) ; for ( int iter = _NUM ; iter < len ; iter ++ ) { char current = source . charAt ( iter ) ; if ( separator . indexOf ( current ) > - _NUM ) { if ( buf . length ( ) > _NUM ) { tokenized . addElement ( buf . toString ( ) ) ; buf = new StringBuilder ( ) ; } } else { buf . append ( current ) ; } } if ( buf . length ( ) > _NUM ) { tokenized . addElement ( buf . toString ( ) ) ; } return tokenized ; }
77831	private void backupFavorites ( BackupDataOutput data ) throws IOException { ContentResolver cr = mContext . getContentResolver ( ) ; Cursor cursor = cr . query ( Favorites . CONTENT_URI , FAVORITE_PROJECTION , getUserSelectionArg ( ) , null , null ) ; try { cursor . moveToPosition ( - _NUM ) ; while ( cursor . moveToNext ( ) ) { final long id = cursor . getLong ( ID_INDEX ) ; final long updateTime = cursor . getLong ( ID_MODIFIED ) ; Key key = getKey ( Key . FAVORITE , id ) ; mKeys . add ( key ) ; final String backupKey = keyToBackupKey ( key ) ; if ( ! mExistingKeys . contains ( backupKey ) || updateTime >= mLastBackupRestoreTime ) { writeRowToBackup ( key , packFavorite ( cursor ) , data ) ; } else { if ( DEBUG ) Log . d ( TAG , _STR + id ) ; } } } finally { cursor . close ( ) ; } }
59732	public void update ( ) { if ( lastTime != - _NUM ) { long delta = System . nanoTime ( ) - lastTime ; rollingAverage . addValue ( delta ) ; } lastTime = System . nanoTime ( ) ; }
24698	public List < ValidationErrorMessage > validate ( ) { errorMessageIds . clear ( ) ; if ( paymentProduct == null ) { throw new NullPointerException ( _STR ) ; } for ( PaymentProductField field : paymentProduct . getPaymentProductFields ( ) ) { if ( ! isFieldInAccountOnFileAndNotAltered ( field ) ) { errorMessageIds . addAll ( field . validateValue ( getValue ( field . getId ( ) ) ) ) ; } } return errorMessageIds ; }
9565	KeyStoreState ( ) { }
84252	CryptoResult ( final T result , final List < K > masterKeys , final CiphertextHeaders headers ) { result_ = result ; masterKeys_ = Collections . unmodifiableList ( masterKeys ) ; headers_ = headers ; encryptionContext_ = headers_ . getEncryptionContextMap ( ) ; }
9460	public void stateChanged ( ChangeEvent e ) { if ( ignoreUpdate ) { return ; } double value = ( double ) ( _NUM - setpointSlider . getValue ( ) ) / _NUM ; setSetPoint ( value ) ; sim . setSetPoint ( value ) ; }
67709	public static String [ ] parseDelimitedList ( String list , char delimiter ) { String delim = _STR + delimiter ; StringTokenizer st = new StringTokenizer ( list + delim + _STR , delim , _BOOL ) ; ArrayList < String > v = new ArrayList < String > ( ) ; String lastToken = _STR ; String word = _STR ; while ( st . hasMoreTokens ( ) ) { String tok = st . nextToken ( ) ; if ( lastToken != null ) { if ( tok . equals ( delim ) ) { word = word + lastToken ; if ( lastToken . equals ( delim ) ) tok = null ; } else { if ( ! word . equals ( _STR ) ) v . add ( word ) ; word = _STR ; } } lastToken = tok ; } return v . toArray ( new String [ _NUM ] ) ; }
73376	private void initializeLayout ( ) { GridLayout gl = new GridLayout ( _NUM , _NUM ) ; gl . setVgap ( _NUM ) ; setLayout ( gl ) ; add ( new JLabel ( _STR ) ) ; add ( frozenDD ) ; add ( new JLabel ( _STR ) ) ; add ( tfUpBound ) ; add ( new JLabel ( _STR ) ) ; add ( tfLowBound ) ; add ( new JLabel ( _STR ) ) ; add ( tfIncrement ) ; add ( new JLabel ( _STR ) ) ; add ( tfDelay ) ; setBorder ( BorderFactory . createEmptyBorder ( _NUM , _NUM , _NUM , _NUM ) ) ; }
62095	@ Override public boolean isRunning ( ) { return ( frame != null && frame . isVisible ( ) ) ; }
10829	public static MosaicDefinition createMosaicDefinition ( final Account creator ) { return createMosaicDefinition ( creator , Utils . createMosaicId ( _STR , _STR ) , createMosaicProperties ( ) ) ; }
82892	public Result result ( SqlNode node , Collection < Clause > clauses , RelNode rel ) { final String alias2 = SqlValidatorUtil . getAlias ( node , - _NUM ) ; final String alias3 = alias2 != null ? alias2 : _STR ; final String alias4 = SqlValidatorUtil . uniquify ( alias3 , aliasSet , SqlValidatorUtil . EXPR_SUGGESTER ) ; final String alias5 = alias2 == null || ! alias2 . equals ( alias4 ) ? alias4 : null ; return new Result ( node , clauses , alias5 , Collections . singletonList ( Pair . of ( alias4 , rel . getRowType ( ) ) ) ) ; }
70858	private static void _trustAllHttpsCertificates ( ) { SSLContext context ; if ( _trustManagers == null ) { _trustManagers = new TrustManager [ ] { new FakeX509TrustManager ( ) } ; } try { context = SSLContext . getInstance ( _STR ) ; context . init ( null , _trustManagers , new SecureRandom ( ) ) ; } catch ( GeneralSecurityException gse ) { throw new IllegalStateException ( gse . getMessage ( ) ) ; } HttpsURLConnection . setDefaultSSLSocketFactory ( context . getSocketFactory ( ) ) ; }
15533	private static boolean isInNeedOfForm ( UIComponent component ) { return ( component instanceof ActionSource || component instanceof ActionSource2 || component instanceof EditableValueHolder ) ; }
73479	private void addInternalListeners ( ) { cbDistribution . addItemListener ( cbItemListener ) ; }
701	public static double safeSqrt ( double x ) { return ( x < _NUM ? - Math . sqrt ( - x ) : Math . sqrt ( x ) ) ; }
32504	public static long runMultiThreaded ( Iterable < Callable < ? > > calls , GridTestSafeThreadFactory threadFactory ) throws Exception { if ( ! busyLock . enterBusy ( ) ) throw new IllegalStateException ( _STR ) ; Collection < Thread > threads = new ArrayList < > ( ) ; long time ; try { for ( Callable < ? > call : calls ) threads . add ( threadFactory . newThread ( call ) ) ; time = System . currentTimeMillis ( ) ; for ( Thread t : threads ) t . start ( ) ; } finally { busyLock . leaveBusy ( ) ; } for ( Thread t : threads ) t . join ( ) ; time = System . currentTimeMillis ( ) - time ; threadFactory . checkError ( ) ; return time ; }
46977	private void bappend ( char ch ) { try { mBuff [ ++ mBuffIdx ] = ch ; } catch ( Exception exp ) { char buff [ ] = new char [ mBuff . length << _NUM ] ; System . arraycopy ( mBuff , _NUM , buff , _NUM , mBuff . length ) ; mBuff = buff ; mBuff [ mBuffIdx ] = ch ; } }
30969	public void initializeOwnerReferencesForField ( StateManager sm , FieldMetaData fmd ) { if ( fmd . getAssociationType ( ) == FieldMetaData . ONE_TO_MANY ) { Collection < ? > collection = ( Collection < ? > ) sm . fetch ( fmd . getIndex ( ) ) ; if ( collection != null ) { for ( Object item : collection ) { if ( item != null ) { _relationsManager . setOwnerStateManagerForPersistentInstance ( item , sm , fmd ) ; } } } } else if ( fmd . getAssociationType ( ) == FieldMetaData . ONE_TO_ONE || fmd . isEmbeddedPC ( ) ) { Object value = sm . fetch ( fmd . getIndex ( ) ) ; if ( value != null ) { _relationsManager . setOwnerStateManagerForPersistentInstance ( value , sm , fmd ) ; } } }
64995	public String buildUnionSubQuery ( String typeDiscriminatorColumn , String [ ] unionColumns , Set < String > columnsPresentInTable , int computedColumnsOffset , String typeDiscriminatorValue , String selection , String groupBy , String having ) { int unionColumnsCount = unionColumns . length ; String [ ] projectionIn = new String [ unionColumnsCount ] ; for ( int i = _NUM ; i < unionColumnsCount ; i ++ ) { String unionColumn = unionColumns [ i ] ; if ( unionColumn . equals ( typeDiscriminatorColumn ) ) { projectionIn [ i ] = _STR + typeDiscriminatorValue + _STR + typeDiscriminatorColumn ; } else if ( i <= computedColumnsOffset || columnsPresentInTable . contains ( unionColumn ) ) { projectionIn [ i ] = unionColumn ; } else { projectionIn [ i ] = _STR + unionColumn ; } } return buildQuery ( projectionIn , selection , groupBy , having , null , null ) ; }
71088	public Node ( Coordinate pt ) { this ( pt , new DirectedEdgeStar ( ) ) ; }
55293	public synchronized void increase ( ) { if ( accuracy > _NUM ) { long timePassed = System . currentTimeMillis ( ) - lastAdded ; if ( timePassed > accuracy ) { clearUp ( ) ; if ( count > _NUM ) { data . addFirst ( lastAdded + accuracy ) ; } lastAdded = System . currentTimeMillis ( ) ; count = _NUM ; } count ++ ; } else { clearUp ( ) ; data . addFirst ( System . currentTimeMillis ( ) ) ; } }
60260	public void revert ( final VirtualFile root , final List < FilePath > files ) throws VcsException { for ( List < String > paths : VcsFileUtil . chunkPaths ( root , files ) ) { GitSimpleHandler handler = new GitSimpleHandler ( myProject , root , GitCommand . CHECKOUT ) ; handler . addParameters ( _STR ) ; handler . endOptions ( ) ; handler . addParameters ( paths ) ; handler . run ( ) ; } }
1509	public static float [ ] concatAllFloat ( float [ ] ... arrays ) { int totalLength = _NUM ; final int subArrayCount = arrays . length ; for ( int i = _NUM ; i < subArrayCount ; ++ i ) { totalLength += arrays [ i ] . length ; } float [ ] result = Arrays . copyOf ( arrays [ _NUM ] , totalLength ) ; int offset = arrays [ _NUM ] . length ; for ( int i = _NUM ; i < subArrayCount ; ++ i ) { System . arraycopy ( arrays [ i ] , _NUM , result , offset , arrays [ i ] . length ) ; offset += arrays [ i ] . length ; } return result ; }
20801	public TaggedValueIterator ( final String aLine , final boolean attemptFirstWord , final String ... tags ) { this . aLine = aLine ; this . attemptFirstWord = attemptFirstWord ; this . tags = tags ; tagPos = _NUM ; nextResult = getNextResult ( ) ; if ( attemptFirstWord ) { int a = _NUM ; while ( a < aLine . length ( ) ) { if ( aLine . charAt ( a ) == _STR || aLine . charAt ( a ) == _STR || Character . isWhitespace ( aLine . charAt ( a ) ) ) a ++ ; else break ; } int b = a + _NUM ; while ( b < aLine . length ( ) ) { if ( Character . isLetterOrDigit ( aLine . charAt ( b ) ) || aLine . charAt ( b ) == _STR ) b ++ ; else break ; } if ( b - a > _NUM ) { nextResult = aLine . substring ( a , b ) ; } tagPos = b ; } }
17335	public void ascendTree ( ) { if ( null != parentPath ) { parentPath . append ( PARENT_PATH ) ; return ; } File parentTree = calcParentTree ( ) ; if ( null != parentTree ) { treeFile = parentTree ; return ; } parentPath = new StringBuilder ( provideLastName ( ) ) ; parentPath . append ( PARENT_PATH ) ; }
3705	public boolean canRead ( ) { return _is != null ; }
82624	void writeTo ( byte [ ] b , int off ) { System . arraycopy ( buf , _NUM , b , off , count ) ; }
1930	void onItemDismissed ( final int position ) { final T removed = mData . get ( position ) ; final boolean wasRemoved = remove ( position ) ; if ( wasRemoved && mDataChangeListener != null ) { mDataChangeListener . onItemRemoved ( removed , position ) ; } }
59740	public static double normalPDF ( double x , double variance , double meanValue ) { double standardDeviation = Math . sqrt ( variance ) ; return ( _NUM / ( standardDeviation * Math . sqrt ( _NUM * Math . PI ) ) ) * Math . pow ( Math . E , - ( ( x - meanValue ) * ( x - meanValue ) ) / ( _NUM * variance ) ) ; }
81267	public static Object [ ] sortCopy ( Object [ ] objects , Comparer comparer ) { int len = objects . length ; Object [ ] copy = new Object [ len ] ; System . arraycopy ( objects , _NUM , copy , _NUM , len ) ; sort ( copy , comparer ) ; return copy ; }
52628	public synchronized void addZoomListener ( ZoomListener listener ) { mZoomListeners . add ( listener ) ; }
42383	private void clearRegisters ( Instruction start , Instruction end ) { for ( Instruction p = start ; ; p = p . nextInstructionInCodeOrder ( ) ) { for ( Enumeration < Operand > ops = p . getOperands ( ) ; ops . hasMoreElements ( ) ; ) { Operand op = ops . nextElement ( ) ; if ( op instanceof RegisterOperand ) { RegisterOperand rOp = ( RegisterOperand ) op ; clearDepGraphNodeForRegister ( rOp . getRegister ( ) ) ; } } if ( p == end ) break ; } for ( Enumeration < Register > e = GenericPhysicalDefUse . enumerateAllImplicitDefUses ( ir ) ; e . hasMoreElements ( ) ; ) { Register r = e . nextElement ( ) ; clearDepGraphNodeForRegister ( r ) ; } }
36420	public void fireAnnotationSelected ( WorkflowAnnotation anno ) { List < WorkflowAnnotation > list = new LinkedList < > ( ) ; list . add ( anno ) ; fireAnnotationsChanged ( AnnotationEvent . SELECTED_ANNOTATION_CHANGED , list ) ; }
56138	public boolean updateStatsAndReturnIfAllowed ( ) { long now = SystemClock . elapsedRealtime ( ) ; long deltaMs = now - mLastRequestTimestamp ; if ( deltaMs < mDelayMs ) return _BOOL ; mLastRequestTimestamp = now ; if ( deltaMs < _NUM * mDelayMs ) { mDelayMs = Math . min ( MAX_DELAY , mDelayMs * _NUM ) ; } else { mDelayMs = MIN_DELAY ; } return _BOOL ; }
16025	public boolean verifyServerEvidenceMessage ( BigInteger serverM2 ) throws CryptoException { if ( ( this . A == null ) || ( this . M1 == null ) || ( this . S == null ) ) { throw new CryptoException ( _STR + _STR ) ; } BigInteger computedM2 = SRP6Util . calculateM2 ( digest , N , A , M1 , S ) ; if ( computedM2 . equals ( serverM2 ) ) { this . M2 = serverM2 ; return _BOOL ; } return _BOOL ; }
46450	public void handleText ( String text ) { if ( skippingCharacters > _NUM ) { if ( skippingCharacters >= text . length ( ) ) { skippingCharacters -= text . length ( ) ; return ; } else { text = text . substring ( skippingCharacters ) ; skippingCharacters = _NUM ; } } if ( rtfDestination != null ) { rtfDestination . handleText ( text ) ; return ; } warning ( _STR ) ; }
27328	public final boolean remove ( final URI serviceURI ) { boolean modified = _BOOL ; synchronized ( this ) { if ( aliases . remove ( serviceURI ) != null ) { modified = _BOOL ; } final ServiceFactory factory = services . remove ( serviceURI ) ; if ( factory != null ) { modified = _BOOL ; if ( factory instanceof CustomServiceFactory ) { customServices . remove ( factory ) ; } } } return modified ; }
60447	@ Nullable private static String referenceToAttribute ( String attrib , boolean includeDummies ) { while ( attrib . startsWith ( _STR ) ) { attrib = attrib . substring ( _NUM ) ; } if ( attrib . startsWith ( _STR ) ) { if ( includeDummies ) { attrib = attrib . substring ( _NUM ) ; } else return null ; } if ( ! StringUtil . startsWithChar ( attrib , _STR ) ) { return null ; } attrib = attrib . substring ( _NUM ) ; if ( StringUtil . startsWithChar ( attrib , _STR ) ) { String cleanAttribute = null ; for ( int i = _NUM ; i < attrib . length ( ) ; i ++ ) { char currChar = attrib . charAt ( i ) ; if ( currChar == _STR || currChar == _STR ) { cleanAttribute = null ; break ; } else if ( currChar == _STR ) { cleanAttribute = attrib . substring ( _NUM , i ) ; break ; } } attrib = cleanAttribute ; } else { for ( int i = _NUM ; i < attrib . length ( ) ; i ++ ) { char currChar = attrib . charAt ( i ) ; if ( currChar == _STR || currChar == _STR || currChar == _STR ) { attrib = attrib . substring ( _NUM , i ) ; break ; } } } return attrib ; }
67083	public EscapedWriter ( Writer fos ) { super ( fos ) ; }
18375	public boolean isExpired ( final Date date ) { if ( date == null ) { throw new IllegalArgumentException ( _STR ) ; } return ( cookieExpiryDate != null && cookieExpiryDate . getTime ( ) <= date . getTime ( ) ) ; }
69142	public void record ( RecordBuilderImpl recordBuilder ) { storeBitmap ( recordBuilder ) ; OutputStream viewHierarchyDump = null ; try { viewHierarchyDump = mAlbum . openViewHierarchyFile ( recordBuilder . getName ( ) ) ; mViewHierarchy . deflate ( recordBuilder . getView ( ) , viewHierarchyDump ) ; mAlbum . addRecord ( recordBuilder ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } finally { if ( viewHierarchyDump != null ) { try { viewHierarchyDump . close ( ) ; } catch ( IOException e ) { Log . e ( _STR , _STR , e ) ; } } } }
39498	protected boolean isCorrectMethod ( Method method , Object [ ] args ) { return ( proxySignature . equals ( method . getName ( ) ) && args . length == _NUM ) ; }
18617	public void testCase17 ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , - _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . remainder ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
69266	public Metadata . Property . Builder clear ( ) { Metadata_Property_Builder _defaults = new Metadata . Property . Builder ( ) ; type = _defaults . type ; boxedType = _defaults . boxedType ; name = _defaults . name ; capitalizedName = _defaults . capitalizedName ; allCapsName = _defaults . allCapsName ; getterName = _defaults . getterName ; codeGenerator = _defaults . codeGenerator ; fullyCheckedCast = _defaults . fullyCheckedCast ; accessorAnnotations . clear ( ) ; _unsetProperties . clear ( ) ; _unsetProperties . addAll ( _defaults . _unsetProperties ) ; return ( Metadata . Property . Builder ) this ; }
53861	public static float r_distance ( vec3 a , vec3 b ) { float x = a . m [ _NUM ] - b . m [ _NUM ] ; float y = a . m [ _NUM ] - b . m [ _NUM ] ; float z = a . m [ _NUM ] - b . m [ _NUM ] ; float result = ( float ) Math . sqrt ( x * x + y * y + z * z ) ; return result ; }
22206	public void checkBackupInfo ( final File backupInfoFile , boolean backupInMultiVdc ) { try ( InputStream fis = new FileInputStream ( backupInfoFile ) ) { Properties properties = new Properties ( ) ; properties . load ( fis ) ; checkVersion ( properties ) ; checkHosts ( properties , backupInMultiVdc ) ; } catch ( IOException ex ) { log . warn ( _STR , ex ) ; } }
47567	static String toLowerCase ( String s ) { int len = s . length ( ) ; StringBuilder sb = null ; for ( int i = _NUM ; i < len ; i ++ ) { char c = s . charAt ( i ) ; if ( ( c >= _STR && c <= _STR ) || ( c == _STR ) ) { if ( sb != null ) sb . append ( c ) ; } else if ( ( c >= _STR && c <= _STR ) || ( c == _STR ) ) { if ( sb != null ) sb . append ( c ) ; } else if ( c >= _STR && c <= _STR ) { if ( sb == null ) { sb = new StringBuilder ( len ) ; sb . append ( s , _NUM , i ) ; } sb . append ( ( char ) ( c - CASE_DIFF ) ) ; } else { throw new IllegalArgumentException ( _STR ) ; } } return sb == null ? s : sb . toString ( ) ; }
18938	public void testConstructorSignBytesNegative3 ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM } ; int aSign = - _NUM ; byte rBytes [ ] = { - _NUM , _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , aNumber . signum ( ) ) ; }
34295	public static byte [ ] buildOpusComment ( String comment ) { byte [ ] data = new byte [ _NUM + comment . length ( ) ] ; writeOpusComment ( data , _NUM , comment ) ; return data ; }
7206	public static void assertProps ( UniformPair < EventBean > received , String [ ] propertyNames , Object [ ] expectedInsert , Object [ ] expectedRemoved ) { assertProps ( received . getFirst ( ) , propertyNames , expectedInsert ) ; assertProps ( received . getSecond ( ) , propertyNames , expectedRemoved ) ; }
51264	public int size ( ) { return al . size ( ) ; }
67720	public static String toUpperCase ( String src ) { if ( src == null ) { return null ; } else { return src . toUpperCase ( ) ; } }
52017	public final Iterator < KnowledgeEdge > requiredEdgesIterator ( ) { Set < KnowledgeEdge > edges = new HashSet < > ( ) ; for ( OrderedPair < Set < MyNode > > o : requiredRulesSpecs ) { final Set < MyNode > first = o . getFirst ( ) ; for ( MyNode s1 : first ) { final Set < MyNode > second = o . getSecond ( ) ; for ( MyNode s2 : second ) { if ( ! s1 . equals ( s2 ) ) { edges . add ( new KnowledgeEdge ( s1 . getName ( ) , s2 . getName ( ) ) ) ; } } } } return edges . iterator ( ) ; }
5964	@ Deprecated public void unlock ( LockState < T > lockState ) { if ( lockState == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( lockState . setLock != this ) { throw new IllegalArgumentException ( _STR ) ; } if ( lockState . thread != Thread . currentThread ( ) ) { throw new IllegalArgumentException ( _STR ) ; } threadSet . remove ( Thread . currentThread ( ) ) ; for ( ReentrantLock lock : lockState . locks ) { lock . unlock ( ) ; } }
41376	public static String formatJavaDocBox ( String text ) { requireNonNull ( text ) ; return formatTextBox ( text , JAVA_DOC_WIDTH , JAVADOC_WORDS , JAVA_DOC_SINGLE_LINE_WORDS ) ; }
16490	private static String forceNumberStringToTwoDigits ( String text ) { while ( text . length ( ) < _NUM ) { text = _STR + text ; } if ( text . length ( ) > _NUM ) { text = text . substring ( text . length ( ) - _NUM , text . length ( ) ) ; } return text ; }
80424	public void addDropItem ( final String name , final double probability , final int min , final int max ) { dropsItems . add ( new DropItem ( name , probability , min , max ) ) ; }
82949	public static < E extends Identifiable > List < E > findByPrimaryKeys ( EntityManager em , List < BigInteger > ids , Class < E > type ) { requireArgument ( em != null , _STR ) ; requireArgument ( ids != null && ! ids . isEmpty ( ) , _STR ) ; requireArgument ( type != null , _STR ) ; TypedQuery < E > query = em . createNamedQuery ( _STR , type ) ; query . setHint ( _STR , _STR ) ; try { query . setParameter ( _STR , ids ) ; query . setParameter ( _STR , _BOOL ) ; return query . getResultList ( ) ; } catch ( NoResultException ex ) { return new ArrayList < > ( _NUM ) ; } }
66533	private void loadWorkflow ( Properties ctx , int AD_Workflow_ID , HttpSession sess ) { MWorkflow wf = new MWorkflow ( ctx , AD_Workflow_ID , null ) ; MWFNode [ ] nodes = wf . getNodes ( _BOOL , Env . getContextAsInt ( ctx , _STR ) ) ; MWFNode wfn = null ; ArrayList nodes_ID = new ArrayList ( ) ; for ( int i = _NUM ; i < nodes . length ; i ++ ) { wfn = nodes [ i ] ; nodes_ID . add ( new Integer ( wfn . getAD_WF_Node_ID ( ) ) ) ; } int imageMap [ ] [ ] = generateImageMap ( nodes_ID ) ; sess . setAttribute ( WORKFLOW , wf ) ; sess . setAttribute ( NODES , nodes ) ; sess . setAttribute ( NODES_ID , nodes_ID ) ; sess . setAttribute ( IMAGE_MAP , imageMap ) ; sess . setAttribute ( ACTIVE_NODE , new Integer ( - _NUM ) ) ; }
47010	public int hashCode ( ) { int h = hash ; if ( h == - _NUM ) { try { h = Arrays . hashCode ( X509CertImpl . getEncodedInternal ( this ) ) ; } catch ( CertificateException e ) { h = _NUM ; } hash = h ; } return h ; }
16842	public void removeFromTags ( String removeTag ) { tags . remove ( removeTag ) ; firePropertyChange ( TAG , null , removeTag ) ; firePropertyChange ( TAGS_AS_STRING , null , removeTag ) ; }
180	public static boolean verify ( byte [ ] data , byte [ ] signature , byte [ ] pub ) { Preconditions . checkArgument ( data . length == _NUM && signature . length <= _NUM && pub . length <= _NUM ) ; ByteBuffer byteBuff = nativeECDSABuffer . get ( ) ; if ( byteBuff == null ) { byteBuff = ByteBuffer . allocateDirect ( _NUM + _NUM + _NUM + _NUM ) ; byteBuff . order ( ByteOrder . nativeOrder ( ) ) ; nativeECDSABuffer . set ( byteBuff ) ; } byteBuff . rewind ( ) ; byteBuff . put ( data ) ; byteBuff . putInt ( signature . length ) ; byteBuff . putInt ( pub . length ) ; byteBuff . put ( signature ) ; byteBuff . put ( pub ) ; return secp256k1_ecdsa_verify ( byteBuff ) == _NUM ; }
5226	protected void deleteDirectory ( File webAppFile ) { if ( webAppFile . isDirectory ( ) ) { File [ ] children = webAppFile . listFiles ( ) ; for ( File element : children ) { deleteDirectory ( element ) ; } webAppFile . delete ( ) ; } else { webAppFile . delete ( ) ; } }
27741	@ SuppressWarnings ( _STR ) static public void assertSameIteratorAnyOrder ( final Object [ ] expected , final Iterator actual ) { assertSameIteratorAnyOrder ( _STR , expected , actual ) ; }
67416	public static String formattingFinishedPercentage ( final RolloutGroup rolloutGroup , final float finishedPercentage ) { float tmpFinishedPercentage = _NUM ; switch ( rolloutGroup . getStatus ( ) ) { case READY : case SCHEDULED : case ERROR : tmpFinishedPercentage = _NUM ; break ; case FINISHED : tmpFinishedPercentage = _NUM ; break ; case RUNNING : tmpFinishedPercentage = finishedPercentage ; break ; default : break ; } return String . format ( _STR , tmpFinishedPercentage ) ; }
60001	public static String generateHostName ( String vmName , String hostId ) { String hostname = vmName + _STR + hostId ; Preconditions . checkState ( hostname . equals ( hostname . toLowerCase ( ) ) , _STR ) ; return hostname ; }
86826	protected void transferFromFile ( File idFile ) throws IOException { try ( BufferedReader br = new BufferedReader ( new FileReader ( idFile ) ) ) { String line ; while ( ( line = br . readLine ( ) ) != null ) { line = line . trim ( ) ; if ( line . length ( ) > _NUM ) { transfer ( line ) ; } } } }
53695	public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
10578	private static String unwrap ( String expression ) { if ( expression . startsWith ( _STR ) ) { expression = expression . substring ( expression . indexOf ( _STR ) + _NUM , expression . length ( ) - _NUM ) ; if ( expression . endsWith ( _STR ) ) { expression = expression . substring ( _NUM , expression . lastIndexOf ( _STR ) ) ; } else { expression = expression . substring ( _NUM , expression . lastIndexOf ( _STR ) ) ; } } return expression ; }
81893	public boolean areAllSegmentPresent ( int datasetSize ) { return mPieSegmentList . size ( ) == datasetSize ; }
55619	protected int drawNextEventTimeDiff ( ) { int timeDiff = msgInterval [ _NUM ] == msgInterval [ _NUM ] ? _NUM : rng . nextInt ( msgInterval [ _NUM ] - msgInterval [ _NUM ] ) ; return msgInterval [ _NUM ] + timeDiff ; }
33186	private int createLines ( String text , int insertPosition , int offset ) { int count = _NUM ; int start = _NUM ; DelimiterInfo delimiterInfo = nextDelimiterInfo ( text , _NUM ) ; while ( delimiterInfo != null && delimiterInfo . delimiterIndex > - _NUM ) { int index = delimiterInfo . delimiterIndex + ( delimiterInfo . delimiterLength - _NUM ) ; if ( insertPosition + count >= fLines . size ( ) ) fLines . add ( new Line ( offset + start , offset + index , delimiterInfo . delimiter ) ) ; else fLines . add ( insertPosition + count , new Line ( offset + start , offset + index , delimiterInfo . delimiter ) ) ; ++ count ; start = index + _NUM ; delimiterInfo = nextDelimiterInfo ( text , start ) ; } if ( start < text . length ( ) ) { if ( insertPosition + count < fLines . size ( ) ) { Line l = ( Line ) fLines . get ( insertPosition + count ) ; int delta = text . length ( ) - start ; l . offset -= delta ; l . length += delta ; } else { fLines . add ( new Line ( offset + start , offset + text . length ( ) - _NUM , null ) ) ; ++ count ; } } return count ; }
29443	public static double sqrt ( double x ) { return Math . sqrt ( x ) ; }
28249	private ResultPointsAndTransitions transitionsBetween ( ResultPoint from , ResultPoint to ) { int fromX = ( int ) from . getX ( ) ; int fromY = ( int ) from . getY ( ) ; int toX = ( int ) to . getX ( ) ; int toY = ( int ) to . getY ( ) ; boolean steep = Math . abs ( toY - fromY ) > Math . abs ( toX - fromX ) ; if ( steep ) { int temp = fromX ; fromX = fromY ; fromY = temp ; temp = toX ; toX = toY ; toY = temp ; } int dx = Math . abs ( toX - fromX ) ; int dy = Math . abs ( toY - fromY ) ; int error = - dx > > _NUM ; int ystep = fromY < toY ? _NUM : - _NUM ; int xstep = fromX < toX ? _NUM : - _NUM ; int transitions = _NUM ; boolean inBlack = image . get ( steep ? fromY : fromX , steep ? fromX : fromY ) ; for ( int x = fromX , y = fromY ; x != toX ; x += xstep ) { boolean isBlack = image . get ( steep ? y : x , steep ? x : y ) ; if ( isBlack != inBlack ) { transitions ++ ; inBlack = isBlack ; } error += dy ; if ( error > _NUM ) { if ( y == toY ) { break ; } y += ystep ; error -= dx ; } } return new ResultPointsAndTransitions ( from , to , transitions ) ; }
86671	public static String toBits ( final long x ) { final StringBuilder sb = new StringBuilder ( ) ; long t = x ; for ( int i = _NUM ; i < _NUM ; i ++ ) { if ( ( i & _NUM ) == _NUM && i > _NUM ) { sb . append ( _STR ) ; } sb . append ( t < _NUM ? _STR : _STR ) ; t = t << _NUM ; } assert t == _NUM ; return sb . toString ( ) ; }
58335	public static final byte [ ] encodeUrl ( BitSet urlsafe , byte [ ] bytes ) { if ( bytes == null ) { return null ; } if ( urlsafe == null ) { urlsafe = WWW_FORM_URL ; } ByteArrayOutputStream buffer = new ByteArrayOutputStream ( ) ; for ( int i = _NUM ; i < bytes . length ; i ++ ) { int b = bytes [ i ] ; if ( b < _NUM ) { b = _NUM + b ; } if ( urlsafe . get ( b ) ) { if ( b == _STR ) { b = _STR ; } buffer . write ( b ) ; } else { buffer . write ( _STR ) ; char hex1 = Character . toUpperCase ( Character . forDigit ( ( b > > _NUM ) & _NUM , _NUM ) ) ; char hex2 = Character . toUpperCase ( Character . forDigit ( b & _NUM , _NUM ) ) ; buffer . write ( hex1 ) ; buffer . write ( hex2 ) ; } } return buffer . toByteArray ( ) ; }
19645	public MessageTokenizer ( IDiscordClient client , String content ) { if ( content == null ) throw new IllegalArgumentException ( _STR ) ; if ( content . length ( ) == _NUM ) throw new IllegalArgumentException ( _STR ) ; if ( client == null ) throw new IllegalArgumentException ( _STR ) ; this . content = content ; this . client = client ; stepForward ( _NUM ) ; }
9401	public void await ( int ID ) throws InterruptedException { if ( parties == _NUM ) return ; final boolean startCondition = competitionCondition ; int competingFor = ( locks . length * _NUM - _NUM - ID ) / _NUM ; while ( competingFor >= _NUM ) { final Lock node = locks [ competingFor ] ; if ( node . tryLock ( ) ) { synchronized ( node ) { while ( competitionCondition == startCondition ) node . wait ( ) ; } node . unlock ( ) ; wakeUpTarget ( competingFor * _NUM + _NUM ) ; wakeUpTarget ( competingFor * _NUM + _NUM ) ; return ; } else { if ( competingFor == _NUM ) break ; competingFor = ( competingFor - _NUM ) / _NUM ; } } competitionCondition = ! competitionCondition ; wakeUpTarget ( _NUM ) ; }
4395	private void loadTranslationsCacheIfEmpty ( ) { if ( translationCache . isEmpty ( ) ) { for ( ObjectTranslation translation : translations ) { if ( translation . getLocale ( ) != null && translation . getProperty ( ) != null && ! StringUtils . isEmpty ( translation . getValue ( ) ) ) { String key = ObjectTranslation . getCacheKey ( translation . getLocale ( ) , translation . getProperty ( ) ) ; translationCache . put ( key , translation . getValue ( ) ) ; } } } }
11281	public NavMouseMode ( boolean shouldConsumeEvents ) { super ( modeID , shouldConsumeEvents ) ; setModeCursor ( Cursor . getPredefinedCursor ( Cursor . CROSSHAIR_CURSOR ) ) ; rectAttributes . setLinePaint ( Color . GRAY ) ; rectAttributes . setMattingPaint ( Color . LIGHT_GRAY ) ; rectAttributes . setMatted ( _BOOL ) ; }
22824	public void addEvent ( SimEvent newEvent ) { newEvent . setSerial ( serial ++ ) ; sortedSet . add ( newEvent ) ; }
42930	public static void stopTimer ( String name ) { long stopTime = System . nanoTime ( ) ; Long startTime = openTimers . remove ( name ) ; if ( startTime == null ) { throw new IllegalArgumentException ( _STR ) ; } SummaryStatistics statistics = data . get ( name ) ; if ( statistics == null ) { statistics = new SummaryStatistics ( ) ; data . put ( name , statistics ) ; } statistics . addValue ( stopTime - startTime ) ; }
37537	public String toStringSummary ( ) { int resultsetLength ; String result ; String titles ; int i ; int j ; if ( m_NonSigWins == null ) return _STR ; resultsetLength = _NUM + Math . max ( ( int ) ( Math . log ( getColCount ( ) ) / Math . log ( _NUM ) ) , ( int ) ( Math . log ( getRowCount ( ) ) / Math . log ( _NUM ) ) ) ; result = _STR ; titles = _STR ; result += _STR ; result += _STR + _STR ; result += _STR ; result += _STR ; for ( i = _NUM ; i < getColCount ( ) ; i ++ ) { if ( getColHidden ( i ) ) continue ; titles += _STR ; result += _STR ; titles += _STR + Utils . padLeft ( _STR + getSummaryTitle ( i ) , resultsetLength * _NUM + _NUM ) ; } result += _STR ; result += titles + _STR ; for ( i = _NUM ; i < getColCount ( ) ; i ++ ) { if ( getColHidden ( i ) ) continue ; for ( j = _NUM ; j < getColCount ( ) ; j ++ ) { if ( getColHidden ( j ) ) continue ; if ( j == _NUM ) result += ( char ) ( ( int ) _STR + i % _NUM ) ; if ( j == i ) result += _STR ; else result += _STR + m_NonSigWins [ i ] [ j ] + _STR + m_Wins [ i ] [ j ] + _STR ; } result += _STR ; } result += _STR ; return result ; }
35910	public static File createTempPath ( String path ) throws IOException { String sep = File . separator ; File tempDir = new File ( System . getProperty ( _STR ) + sep + path ) ; if ( ! tempDir . exists ( ) ) if ( ! tempDir . mkdirs ( ) ) { boolean status = tempDir . delete ( ) ; throw new IOException ( _STR + tempDir + _STR + status ) ; } tempDir . deleteOnExit ( ) ; return tempDir ; }
67853	public void hspan ( double start , double end , Paint color , String legend ) { LegendText legendText = new LegendText ( color , legend ) ; comments . add ( legendText ) ; plotElements . add ( new HSpan ( start , end , color , legendText ) ) ; }
5145	public StateInteractive extent_to_whole_connections ( ) { Set < BrdItem > selected_items = new TreeSet < BrdItem > ( ) ; for ( BrdItem curr_item : items_list ) { if ( curr_item instanceof BrdConnectable ) { selected_items . addAll ( curr_item . get_connection_items ( ) ) ; } } if ( selected_items . isEmpty ( ) ) { return return_state ; } items_list = selected_items ; actlog_start_scope ( LogfileScope . EXTEND_TO_WHOLE_CONNECTIONS ) ; filter ( ) ; i_brd . repaint ( ) ; return this ; }
27368	public static IKeyBuilder newInstance ( int capacity , CollatorEnum collatorChoice , Locale locale , Object strength , DecompositionEnum mode ) { if ( collatorChoice == CollatorEnum . ASCII ) { return new KeyBuilder ( capacity ) ; } if ( locale == null ) { locale = Locale . getDefault ( ) ; if ( log . isInfoEnabled ( ) ) log . info ( _STR + locale . getDisplayName ( ) ) ; } final boolean icu = collatorChoice == CollatorEnum . ICU ; if ( icu && ! DefaultKeyBuilderFactory . isICUAvailable ( ) ) { throw new UnsupportedOperationException ( DefaultKeyBuilderFactory . ICU_NOT_AVAILABLE ) ; } final byte [ ] buf = createBuffer ( capacity ) ; final int len = _NUM ; switch ( collatorChoice ) { case ICU : return new KeyBuilder ( new ICUSortKeyGenerator ( locale , strength , mode ) , len , buf ) ; case JDK : return new KeyBuilder ( new JDKSortKeyGenerator ( locale , strength , mode ) , len , buf ) ; default : throw new UnsupportedOperationException ( _STR + collatorChoice ) ; } }
52137	private List < Node > possibleParents ( Node x , List < Node > nodes , IKnowledge knowledge ) { List < Node > possibleParents = new LinkedList < > ( ) ; String _x = x . getName ( ) ; for ( Node z : nodes ) { String _z = z . getName ( ) ; if ( possibleParentOf ( _z , _x , knowledge ) ) { possibleParents . add ( z ) ; } } return possibleParents ; }
10928	protected void configureFromProperties ( InputStream is , String rootDirectory ) throws IOException { Properties props = new Properties ( ) ; props . load ( is ) ; props . put ( ROOT_DIR_PATH_PROPERTY , rootDirectory ) ; String oldPrefix = getPropertyPrefix ( ) ; setProperties ( null , props ) ; setPropertyPrefix ( oldPrefix ) ; }
63539	Connection openNewConnection ( ) throws SQLException { Connection newConn = DriverManager . getConnection ( url , user , password ) ; if ( url . startsWith ( _STR ) ) { try ( Statement s = newConn . createStatement ( ) ) { } } else if ( url . startsWith ( _STR ) ) { try ( Statement s = newConn . createStatement ( ) ) { s . execute ( _STR ) ; } } return newConn ; }
45726	@ Override public void addRelations ( Task task , Iterable < ObjectId > projectIds , String fieldName ) { List < Project > newProjectList = new LinkedList < > ( ) ; Iterable < Project > projectsToAdd = projectRepository . findAll ( projectIds , null ) ; for ( Project project : projectsToAdd ) { newProjectList . add ( project ) ; } try { if ( PropertyUtils . getProperty ( task , fieldName ) != null ) { Iterable < Project > projects = ( Iterable < Project > ) PropertyUtils . getProperty ( task , fieldName ) ; for ( Project project : projects ) { newProjectList . add ( project ) ; } } } catch ( Exception e ) { throw new RuntimeException ( e ) ; } try { PropertyUtils . setProperty ( task , fieldName , newProjectList ) ; } catch ( Exception e ) { throw new RuntimeException ( e ) ; } taskRepository . save ( task ) ; }
57146	protected void doFloodBDDP ( long pinSwitch , OFPacketIn pi , FloodlightContext cntx ) { TopologyInstance ti = getCurrentInstance ( _BOOL ) ; Set < Long > switches = ti . getSwitchesInOpenflowDomain ( pinSwitch ) ; if ( switches == null ) { switches = new HashSet < Long > ( ) ; switches . add ( pinSwitch ) ; } for ( long sid : switches ) { IOFSwitch sw = floodlightProvider . getSwitch ( sid ) ; if ( sw == null ) continue ; Collection < Short > enabledPorts = sw . getEnabledPortNumbers ( ) ; if ( enabledPorts == null ) continue ; Set < Short > ports = new HashSet < Short > ( ) ; ports . addAll ( enabledPorts ) ; Set < Short > portsKnownToTopo = ti . getPortsWithLinks ( sid ) ; if ( portsKnownToTopo != null ) { for ( short p : portsKnownToTopo ) { NodePortTuple npt = new NodePortTuple ( sid , p ) ; if ( ti . isBroadcastDomainPort ( npt ) == _BOOL ) { ports . remove ( p ) ; } } } Set < Short > portsToEliminate = getPortsToEliminateForBDDP ( sid ) ; if ( portsToEliminate != null ) { ports . removeAll ( portsToEliminate ) ; } if ( pinSwitch == sid ) { ports . remove ( pi . getInPort ( ) ) ; } doMultiActionPacketOut ( pi . getPacketData ( ) , sw , ports , cntx ) ; } }
80129	public void sleepMillis ( final long millis ) { try { Thread . sleep ( millis ) ; } catch ( final InterruptedException e ) { logger . error ( e , e ) ; } }
70013	private static void verifyWriteSetNotFound ( final BTree btree ) { log . info ( _STR ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { if ( btree . contains ( i ) ) { throw new RuntimeException ( _STR + i ) ; } } }
9194	private double calculateEntropy ( double ... masses ) { double res = _NUM ; for ( double d : masses ) { res -= ( d == _NUM ) ? _NUM : d * Math . log ( d ) ; } return res / LOG2 ; }
61425	public static boolean isValidNmtoken ( String nmtoken ) { if ( nmtoken . length ( ) == _NUM ) return _BOOL ; for ( int i = _NUM ; i < nmtoken . length ( ) ; i ++ ) { char ch = nmtoken . charAt ( i ) ; if ( ! isName ( ch ) ) { return _BOOL ; } } return _BOOL ; }
38365	@ Override public void mousePressed ( MouseEvent e ) { m_frameLimiter . setRepeats ( _BOOL ) ; if ( ( e . getModifiers ( ) & InputEvent . BUTTON1_MASK ) != _NUM && ! e . isAltDown ( ) && m_mouseState == _NUM && m_scaling == _NUM ) { if ( ( ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) != _NUM ) && ( ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) == _NUM ) ) { m_mouseState = _NUM ; } else if ( ( ( e . getModifiers ( ) & InputEvent . SHIFT_MASK ) != _NUM ) && ( ( e . getModifiers ( ) & InputEvent . CTRL_MASK ) == _NUM ) ) { m_oldMousePos . width = e . getX ( ) ; m_oldMousePos . height = e . getY ( ) ; m_newMousePos . width = e . getX ( ) ; m_newMousePos . height = e . getY ( ) ; m_mouseState = _NUM ; Graphics g = getGraphics ( ) ; if ( m_ZoomBoxColor == null ) { g . setColor ( Color . black ) ; } else { g . setColor ( m_ZoomBoxColor ) ; } if ( m_ZoomBoxXORColor == null ) { g . setXORMode ( Color . white ) ; } else { g . setXORMode ( m_ZoomBoxXORColor ) ; } g . drawRect ( m_oldMousePos . width , m_oldMousePos . height , m_newMousePos . width - m_oldMousePos . width , m_newMousePos . height - m_oldMousePos . height ) ; g . dispose ( ) ; } else { m_oldMousePos . width = e . getX ( ) ; m_oldMousePos . height = e . getY ( ) ; m_newMousePos . width = e . getX ( ) ; m_newMousePos . height = e . getY ( ) ; m_mouseState = _NUM ; m_frameLimiter . start ( ) ; } } else if ( ( e . getButton ( ) == MouseEvent . BUTTON1 ) && e . isAltDown ( ) && e . isShiftDown ( ) && ! e . isControlDown ( ) ) { saveComponent ( ) ; } else if ( m_mouseState == _NUM && m_scaling == _NUM ) { } }
41451	private static double parseDoubleValue ( String parseString , String openTag , String closeTag , DataTypeValidationException exception ) throws DataTypeValidationException { String tagValue ; tagValue = parseStringValue ( parseString , openTag , closeTag , exception ) ; double doubleValue ; try { doubleValue = Double . parseDouble ( tagValue ) ; } catch ( NumberFormatException e ) { throw e ; } return doubleValue ; }
54768	public void putString ( String s ) throws ArrayIndexOutOfBoundsException , UnsupportedEncodingException { byte [ ] bytes = s . getBytes ( _STR ) ; int length = bytes . length ; int endAt = m_index + length + _NUM ; if ( endAt > m_content . length ) throw new ArrayIndexOutOfBoundsException ( endAt + _STR + m_content . length ) ; System . arraycopy ( bytes , _NUM , m_content , m_index , length ) ; m_index += length ; m_content [ m_index ++ ] = _STR ; debugAppendString ( s ) ; }
7991	private void pullEvent ( ) { final int newScrollValue ; final int itemDimension ; final float initialMotionValue , lastMotionValue ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : initialMotionValue = mInitialMotionX ; lastMotionValue = mLastMotionX ; break ; case VERTICAL : default : initialMotionValue = mInitialMotionY ; lastMotionValue = mLastMotionY ; break ; } switch ( mCurrentMode ) { case PULL_FROM_END : newScrollValue = Math . round ( Math . max ( initialMotionValue - lastMotionValue , _NUM ) / FRICTION ) ; itemDimension = getFooterSize ( ) ; break ; case PULL_FROM_START : default : newScrollValue = Math . round ( Math . min ( initialMotionValue - lastMotionValue , _NUM ) / FRICTION ) ; itemDimension = getHeaderSize ( ) ; break ; } setHeaderScroll ( newScrollValue ) ; if ( newScrollValue != _NUM && ! isRefreshing ( ) ) { float scale = Math . abs ( newScrollValue ) / ( float ) itemDimension ; switch ( mCurrentMode ) { case PULL_FROM_END : mFooterLayout . onPull ( scale ) ; break ; case PULL_FROM_START : default : mHeaderLayout . onPull ( scale ) ; break ; } if ( mState != State . PULL_TO_REFRESH && itemDimension >= Math . abs ( newScrollValue ) ) { setState ( State . PULL_TO_REFRESH ) ; } else if ( mState == State . PULL_TO_REFRESH && itemDimension < Math . abs ( newScrollValue ) ) { setState ( State . RELEASE_TO_REFRESH ) ; } } }
23018	public void addRtcpListener ( RtcpEventListener listener ) { listeners . addElement ( listener ) ; }
36263	@ Override protected void ensureNumberOfColumns ( int numberOfColumns ) { if ( data . length >= numberOfColumns ) { return ; } double [ ] newData = new double [ numberOfColumns ] ; System . arraycopy ( data , _NUM , newData , _NUM , data . length ) ; data = newData ; }
76037	private static BitMatrix extractPureBits ( BitMatrix image ) throws NotFoundException { int [ ] leftTopBlack = image . getTopLeftOnBit ( ) ; int [ ] rightBottomBlack = image . getBottomRightOnBit ( ) ; if ( leftTopBlack == null || rightBottomBlack == null ) { throw NotFoundException . getNotFoundInstance ( ) ; } float moduleSize = moduleSize ( leftTopBlack , image ) ; int top = leftTopBlack [ _NUM ] ; int bottom = rightBottomBlack [ _NUM ] ; int left = leftTopBlack [ _NUM ] ; int right = rightBottomBlack [ _NUM ] ; if ( left >= right || top >= bottom ) { throw NotFoundException . getNotFoundInstance ( ) ; } if ( bottom - top != right - left ) { right = left + ( bottom - top ) ; } int matrixWidth = Math . round ( ( right - left + _NUM ) / moduleSize ) ; int matrixHeight = Math . round ( ( bottom - top + _NUM ) / moduleSize ) ; if ( matrixWidth <= _NUM || matrixHeight <= _NUM ) { throw NotFoundException . getNotFoundInstance ( ) ; } if ( matrixHeight != matrixWidth ) { throw NotFoundException . getNotFoundInstance ( ) ; } int nudge = ( int ) ( moduleSize / _NUM ) ; top += nudge ; left += nudge ; int nudgedTooFarRight = left + ( int ) ( ( matrixWidth - _NUM ) * moduleSize ) - right ; if ( nudgedTooFarRight > _NUM ) { if ( nudgedTooFarRight > nudge ) { throw NotFoundException . getNotFoundInstance ( ) ; } left -= nudgedTooFarRight ; } int nudgedTooFarDown = top + ( int ) ( ( matrixHeight - _NUM ) * moduleSize ) - bottom ; if ( nudgedTooFarDown > _NUM ) { if ( nudgedTooFarDown > nudge ) { throw NotFoundException . getNotFoundInstance ( ) ; } top -= nudgedTooFarDown ; } BitMatrix bits = new BitMatrix ( matrixWidth , matrixHeight ) ; for ( int y = _NUM ; y < matrixHeight ; y ++ ) { int iOffset = top + ( int ) ( y * moduleSize ) ; for ( int x = _NUM ; x < matrixWidth ; x ++ ) { if ( image . get ( left + ( int ) ( x * moduleSize ) , iOffset ) ) { bits . set ( x , y ) ; } } } return bits ; }
13063	@ Override public void error ( String domain , String key , XMLParseException exception ) throws XNIException { if ( fErrorHandler != null ) { SAXParseException saxException = createSAXParseException ( exception ) ; try { fErrorHandler . error ( saxException ) ; } catch ( SAXParseException e ) { throw createXMLParseException ( e ) ; } catch ( SAXException e ) { throw createXNIException ( e ) ; } } }
17511	public static boolean connect ( FileDescriptor fd , InetAddress inetAddress , int port ) throws SocketException { try { return IoBridge . connect ( fd , inetAddress , port , _NUM ) ; } catch ( SocketTimeoutException ex ) { throw new AssertionError ( ex ) ; } }
58282	public boolean isWhitespace ( int nodeHandle ) { int type = getNodeType ( nodeHandle ) ; Node node = getNode ( nodeHandle ) ; if ( TEXT_NODE == type || CDATA_SECTION_NODE == type ) { FastStringBuffer buf = StringBufferPool . get ( ) ; while ( node != null ) { buf . append ( node . getNodeValue ( ) ) ; node = logicalNextDOMTextNode ( node ) ; } boolean b = buf . isWhitespace ( _NUM , buf . length ( ) ) ; StringBufferPool . free ( buf ) ; return b ; } return _BOOL ; }
37245	public CStatusPanel ( final BackEndDebuggerProvider debuggerProvider ) { super ( new BorderLayout ( ) ) ; Preconditions . checkNotNull ( debuggerProvider , _STR ) ; m_label . setForeground ( Color . BLACK ) ; add ( m_label ) ; m_synchronizer = new CStatusLabelSynchronizer ( m_label , debuggerProvider ) ; }
69034	@ Override public boolean open ( String access ) { if ( access . equals ( _STR ) ) { try { iStream = new FileImageInputStream ( new File ( filePath ) ) ; parser = new LabelParser ( ) ; metadata = parser . parseHeader ( iStream ) ; iStream . close ( ) ; iStream = null ; } catch ( IOException e ) { try { iStream . close ( ) ; } catch ( Exception x ) { } return ( _BOOL ) ; } } return ( super . open ( access ) ) ; }
78759	void deregisterSpring ( Spring spring ) { if ( spring == null ) { throw new IllegalArgumentException ( _STR ) ; } mActiveSprings . remove ( spring ) ; mSpringRegistry . remove ( spring . getId ( ) ) ; }
32391	@ Nullable public String fileName ( ) { return JavaLogger . fileName ( delegate ) ; }
43962	public static BNode parseBNode ( String nTriplesBNode , ValueFactory valueFactory ) throws IllegalArgumentException { if ( nTriplesBNode . startsWith ( _STR ) ) { return valueFactory . createBNode ( nTriplesBNode . substring ( _NUM ) ) ; } else { throw new IllegalArgumentException ( _STR + nTriplesBNode ) ; } }
70258	public void resetPSRs ( ) { pilotRolls . removeAllElements ( ) ; }
51375	public static void sort ( byte [ ] array ) { DualPivotQuicksort . sort ( array ) ; }
33298	public void closePopup ( ) { if ( openedSubPopup != null ) { openedSubPopup . closePopup ( ) ; } removeFromParent ( ) ; }
63217	public void freeObject ( int id ) { if ( cacheId == id ) { cacheId = - _NUM ; cache = null ; } map . remove ( id ) ; }
51812	private void stretchViewVertically ( View view , int crossSize ) { LayoutParams lp = ( LayoutParams ) view . getLayoutParams ( ) ; int newHeight = crossSize - lp . topMargin - lp . bottomMargin ; newHeight = Math . max ( newHeight , _NUM ) ; view . measure ( MeasureSpec . makeMeasureSpec ( view . getMeasuredWidth ( ) , MeasureSpec . EXACTLY ) , MeasureSpec . makeMeasureSpec ( newHeight , MeasureSpec . EXACTLY ) ) ; }
76612	public static InetAddress hexToInet6Address ( String addrHexString ) throws IllegalArgumentException { try { return numericToInetAddress ( String . format ( _STR , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) , addrHexString . substring ( _NUM , _NUM ) ) ) ; } catch ( Exception e ) { Log . e ( _STR , _STR + addrHexString + _STR + e ) ; throw new IllegalArgumentException ( e ) ; } }
40153	public void trackFailure ( ) { retryTime = Utils . currentTimeMillis ( ) + ( long ) backoff ; backoff = Math . min ( backoff * params . multiplier , params . maximum ) ; }
51518	public double readDouble ( ) throws IOException { return primitiveTypes . readDouble ( ) ; }
80316	private boolean isAtMaximum ( Adjustable bar ) { return ( bar . getValue ( ) + bar . getVisibleAmount ( ) >= bar . getMaximum ( ) ) ; }
24621	public boolean matchesCS ( String seq ) { return queue . startsWith ( seq , pos ) ; }
10890	protected void parseAndAddMapTileSet ( URL tileSetProperties ) throws IOException , MalformedURLException { Properties descProps = new Properties ( ) ; Logger logger = getLogger ( ) ; logger . info ( _STR ) ; InputStream descURLStream = tileSetProperties . openStream ( ) ; descProps . load ( descURLStream ) ; logger . info ( _STR + tileSetProperties . toString ( ) + _STR + descProps . toString ( ) ) ; MapTileSet mts = createMapTileSetFromProperties ( descProps ) ; if ( mts != null && mts . allGood ( ) ) { String mtsName = mts . getName ( ) ; mapTileSets . put ( mts . getName ( ) , mts ) ; logger . info ( _STR + mtsName + _STR ) ; } descURLStream . close ( ) ; }
36283	protected Date compute ( double value ) { if ( Double . isNaN ( value ) ) { return null ; } long dateLong = ( long ) value ; Date date = new Date ( dateLong ) ; Calendar cal = Calendar . getInstance ( ) ; cal . setTime ( date ) ; return cal . getTime ( ) ; }
8893	public void enablePan ( BluetoothAdapter adapter ) { if ( mPan == null ) mPan = ( BluetoothPan ) connectProxy ( adapter , BluetoothProfile . PAN ) ; assertNotNull ( mPan ) ; long start = System . currentTimeMillis ( ) ; mPan . setBluetoothTethering ( _BOOL ) ; long stop = System . currentTimeMillis ( ) ; assertTrue ( mPan . isTetheringOn ( ) ) ; writeOutput ( String . format ( _STR , ( stop - start ) ) ) ; }
30249	private int distBetweenPoints ( int x1 , int z1 , int x2 , int z2 , boolean bAllowDiags ) { int w = Math . abs ( x2 - x1 ) ; int h = Math . abs ( z2 - z1 ) ; if ( bAllowDiags ) { if ( w < h ) w = _NUM ; else h = _NUM ; } return w + h + _NUM ; }
60945	public URL ( String protocol , String host , int port , String file , URLStreamHandler handler ) throws MalformedURLException { if ( port < - _NUM ) { throw new MalformedURLException ( _STR + port ) ; } if ( protocol == null ) { throw new NullPointerException ( _STR ) ; } if ( host != null && host . contains ( _STR ) && host . charAt ( _NUM ) != _STR ) { host = _STR + host + _STR ; } this . protocol = protocol ; this . host = host ; this . port = port ; file = UrlUtils . authoritySafePath ( host , file ) ; int hash = file . indexOf ( _STR ) ; if ( hash != - _NUM ) { this . file = file . substring ( _NUM , hash ) ; this . ref = file . substring ( hash + _NUM ) ; } else { this . file = file ; } fixURL ( _BOOL ) ; if ( handler == null ) { setupStreamHandler ( ) ; if ( streamHandler == null ) { throw new MalformedURLException ( _STR + protocol ) ; } } else { streamHandler = handler ; } }
21623	private Workflow . Method createVolumesMethod ( URI systemURI , URI poolURI , List < URI > volumeURIs , VirtualPoolCapabilityValuesWrapper capabilities ) { return new Workflow . Method ( _STR , systemURI , poolURI , volumeURIs , capabilities ) ; }
25512	public FileCommandInfo ( int fd , String command , int result , String parameters ) { this ( _BOOL , fd , command , result , parameters ) ; }
78366	public void init ( GuiManualHerblore manual ) { for ( ManualWidgetBase widget : widgets ) widget . init ( manual ) ; }
68940	private static SSLSocketFactory trustAllHosts ( HttpsURLConnection connection ) { SSLSocketFactory oldFactory = connection . getSSLSocketFactory ( ) ; try { SSLContext sc = SSLContext . getInstance ( _STR ) ; sc . init ( null , trustAllCerts , new java . security . SecureRandom ( ) ) ; SSLSocketFactory newFactory = sc . getSocketFactory ( ) ; connection . setSSLSocketFactory ( newFactory ) ; } catch ( Exception e ) { Log . e ( LOG_TAG , e . getMessage ( ) , e ) ; } return oldFactory ; }
3413	public final double sampleMax ( ) { return _activeCountMax . getAndSet ( _activeCount . get ( ) ) ; }
13921	@ Get public Representation userCodeForm ( ) throws OAuth2RestletException , InvalidGrantException , NotFoundException , ServerException { final OAuth2Request request = requestFactory . create ( getRequest ( ) ) ; if ( request . getParameter ( OAuth2Constants . DeviceCode . USER_CODE ) != null ) { return verify ( null ) ; } else { return getTemplateRepresentation ( FORM , request , null ) ; } }
71715	public void testMissionNameConstruction ( ) { String xml = _STR ; xml += createStartMissionXml ( _STR , _STR ) ; xml += createEndMissionXml ( ) ; InputStream missionInputStream = new ByteArrayInputStream ( xml . getBytes ( ) ) ; String missionName = null ; try { missionName = MissionParser . getMissionName ( missionInputStream ) ; } catch ( MissionParseException e ) { e . printStackTrace ( ) ; } Assert . assertEquals ( _STR , missionName ) ; }
49382	@ Override public boolean equals ( Object other ) { if ( other == this ) { return _BOOL ; } if ( other instanceof ZoneOffsetTransition ) { ZoneOffsetTransition d = ( ZoneOffsetTransition ) other ; return transition . equals ( d . transition ) && offsetBefore . equals ( d . offsetBefore ) && offsetAfter . equals ( d . offsetAfter ) ; } return _BOOL ; }
15563	public void release ( ) { super . release ( ) ; init ( ) ; }
68679	public double unsafeSabrVolatility ( final double strike , final double forward , final double expiryTime , final double alpha , final double beta , final double nu , final double rho ) { final double oneMinusBeta = _NUM - beta ; final double A = Math . pow ( forward * strike , oneMinusBeta ) ; final double sqrtA = Math . sqrt ( A ) ; double logM ; if ( ! isClose ( forward , strike ) ) logM = Math . log ( forward / strike ) ; else { final double epsilon = ( forward - strike ) / strike ; logM = epsilon - _NUM * epsilon * epsilon ; } final double z = ( nu / alpha ) * sqrtA * logM ; final double B = _NUM - _NUM * rho * z + z * z ; final double C = oneMinusBeta * oneMinusBeta * logM * logM ; final double tmp = ( Math . sqrt ( B ) + z - rho ) / ( _NUM - rho ) ; final double xx = Math . log ( tmp ) ; final double D = sqrtA * ( _NUM + C / _NUM + C * C / _NUM ) ; final double d = _NUM + expiryTime * ( oneMinusBeta * oneMinusBeta * alpha * alpha / ( _NUM * A ) + _NUM * rho * beta * nu * alpha / sqrtA + ( _NUM - _NUM * rho * rho ) * ( nu * nu / _NUM ) ) ; double multiplier ; final double m = _NUM ; if ( Math . abs ( z * z ) > Constants . QL_EPSILON * m ) multiplier = z / xx ; else { final double talpha = ( _NUM - rho * rho ) / ( _NUM - rho ) ; final double tbeta = alpha - _NUM ; final double tgamma = rho / ( _NUM - rho ) ; multiplier = _NUM - beta * z + ( tgamma - talpha + tbeta * tbeta * _NUM ) * z * z ; } return ( alpha / D ) * multiplier * d ; }
8886	public void close ( ) { while ( ! mReceivers . isEmpty ( ) ) { mContext . unregisterReceiver ( mReceivers . remove ( _NUM ) ) ; } if ( mOutputWriter != null ) { try { mOutputWriter . close ( ) ; } catch ( IOException e ) { Log . w ( mTag , _STR , e ) ; } } }
5200	private void resolveFiles ( List < String > classpaths , Map < String , String > files , String [ ] paths , String prefix ) { for ( String path : paths ) { String relativePath = fileHandler . getName ( path ) ; if ( prefix != null ) { relativePath = fileHandler . append ( prefix , relativePath ) ; } if ( classpaths != null ) { classpaths . add ( relativePath ) ; } if ( fileHandler . isDirectory ( path ) ) { String [ ] children = fileHandler . getChildren ( path ) ; if ( children != null && children . length != _NUM ) { resolveFiles ( null , files , children , relativePath ) ; } } else { files . put ( relativePath , path ) ; } } }
58984	public void testGetInstance ( ) throws Exception { try { ExemptionMechanism . getInstance ( ( String ) null , _STR ) ; fail ( _STR ) ; } catch ( NoSuchProviderException pe ) { } try { ExemptionMechanism . getInstance ( _STR , ( String ) null ) ; fail ( _STR ) ; } catch ( IllegalArgumentException e ) { } }
62711	public synchronized void reloadConfiguration ( ) { properties = null ; finalParameters . clear ( ) ; }
23111	protected void removeMessageProcessor ( MessageProcessor oldMessageProcessor ) { synchronized ( messageProcessors ) { if ( messageProcessors . remove ( oldMessageProcessor ) ) { oldMessageProcessor . stop ( ) ; } } }
48303	X509IssuerSerial ( X509Certificate cert ) { this ( cert . getIssuerX500Principal ( ) , cert . getSerialNumber ( ) ) ; }
17369	private void addToSet ( ObjectXmlPersist persist , IFile file , String setName ) throws IOException , CoreException { Collection < GraphEdgeMatcherDescriptor > updateSet = loadEdgeMatchers ( persist , file ) ; persistUpdatedBundle ( persist , file , updateSet , setName ) ; }
19990	public void putBytes ( byte [ ] bytes ) { ensureCapacity ( bytes . length ) ; System . arraycopy ( bytes , _NUM , this . byteBuffer , this . position , bytes . length ) ; this . position += bytes . length ; }
31039	public static String arrayToDelimitedString ( Object [ ] arr , String delim ) { if ( arr == null ) { return _STR ; } StringBuffer sb = new StringBuffer ( ) ; for ( int i = _NUM ; i < arr . length ; i ++ ) { if ( i > _NUM ) { sb . append ( delim ) ; } sb . append ( arr [ i ] ) ; } return sb . toString ( ) ; }
79868	public void clearAll ( ) { final List < EncodedImage > old ; synchronized ( this ) { old = new ArrayList < > ( mMap . values ( ) ) ; mMap . clear ( ) ; } for ( int i = _NUM ; i < old . size ( ) ; i ++ ) { EncodedImage encodedImage = old . get ( i ) ; if ( encodedImage != null ) { encodedImage . close ( ) ; } } }
66217	public static CompiereColor parse ( String attributes ) { CompiereColor cc = new CompiereColor ( ) ; try { if ( attributes != null && attributes . length ( ) > _NUM ) cc . parseAttributres ( attributes ) ; } catch ( Exception e ) { log . severe ( _STR + attributes + _STR + e . toString ( ) ) ; } return cc ; }
35869	public synchronized static LuaState newLuaState ( ) { int i = getNextStateIndex ( ) ; LuaState L = new LuaState ( i ) ; states . add ( i , L ) ; return L ; }
78154	static long checkPreambleSize ( Memory mem ) { final long cap = mem . getCapacity ( ) ; if ( cap < _NUM ) { throwNotBigEnough ( cap , _NUM ) ; } final long pre0 = mem . getLong ( _NUM ) ; final int preLongs = ( int ) ( pre0 & _NUM ) ; final int required = Math . max ( preLongs << _NUM , _NUM ) ; if ( cap < required ) { throwNotBigEnough ( cap , required ) ; } return pre0 ; }
11501	public int read ( ) throws IOException { if ( inputStream == null ) { reopen ( ) ; } count ( _NUM ) ; return inputStream . read ( ) ; }
59762	private void fitImageToView ( ) { Drawable drawable = getDrawable ( ) ; if ( drawable == null || drawable . getIntrinsicWidth ( ) == _NUM || drawable . getIntrinsicHeight ( ) == _NUM ) { return ; } if ( matrix == null || prevMatrix == null ) { return ; } int drawableWidth = drawable . getIntrinsicWidth ( ) ; int drawableHeight = drawable . getIntrinsicHeight ( ) ; float scaleX = ( float ) viewWidth / drawableWidth ; float scaleY = ( float ) viewHeight / drawableHeight ; switch ( mScaleType ) { case CENTER : scaleX = scaleY = _NUM ; break ; case CENTER_CROP : scaleX = scaleY = Math . max ( scaleX , scaleY ) ; break ; case CENTER_INSIDE : scaleX = scaleY = Math . min ( _NUM , Math . min ( scaleX , scaleY ) ) ; case FIT_CENTER : scaleX = scaleY = Math . min ( scaleX , scaleY ) ; break ; case FIT_XY : break ; default : throw new UnsupportedOperationException ( _STR ) ; } float redundantXSpace = viewWidth - ( scaleX * drawableWidth ) ; float redundantYSpace = viewHeight - ( scaleY * drawableHeight ) ; matchViewWidth = viewWidth - redundantXSpace ; matchViewHeight = viewHeight - redundantYSpace ; if ( ! isZoomed ( ) && ! imageRenderedAtLeastOnce ) { matrix . setScale ( scaleX , scaleY ) ; matrix . postTranslate ( redundantXSpace / _NUM , redundantYSpace / _NUM ) ; normalizedScale = _NUM ; } else { if ( prevMatchViewWidth == _NUM || prevMatchViewHeight == _NUM ) { savePreviousImageValues ( ) ; } prevMatrix . getValues ( m ) ; m [ Matrix . MSCALE_X ] = matchViewWidth / drawableWidth * normalizedScale ; m [ Matrix . MSCALE_Y ] = matchViewHeight / drawableHeight * normalizedScale ; float transX = m [ Matrix . MTRANS_X ] ; float transY = m [ Matrix . MTRANS_Y ] ; float prevActualWidth = prevMatchViewWidth * normalizedScale ; float actualWidth = getImageWidth ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_X , transX , prevActualWidth , actualWidth , prevViewWidth , viewWidth , drawableWidth ) ; float prevActualHeight = prevMatchViewHeight * normalizedScale ; float actualHeight = getImageHeight ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_Y , transY , prevActualHeight , actualHeight , prevViewHeight , viewHeight , drawableHeight ) ; matrix . setValues ( m ) ; } fixTrans ( ) ; setImageMatrix ( matrix ) ; }
720	public void limit ( double x1 , double y1 , double x2 , double y2 ) { clip [ _NUM ] = Math . max ( clip [ _NUM ] , x1 ) ; clip [ _NUM ] = Math . max ( clip [ _NUM ] , y1 ) ; clip [ _NUM ] = Math . min ( clip [ _NUM ] , x2 ) ; clip [ _NUM ] = Math . min ( clip [ _NUM ] , y2 ) ; }
64288	public void shutdown ( ) { final long begin = System . currentTimeMillis ( ) ; log . info ( _STR ) ; log . info ( _STR + getTaskCount ( scheduledPool ) + _STR ) ; log . info ( _STR + getTaskCount ( instantPool ) + _STR ) ; log . info ( _STR + getTaskCount ( longRunningPool ) + _STR ) ; log . info ( _STR + ( workStealingPool . getQueuedTaskCount ( ) + workStealingPool . getQueuedSubmissionCount ( ) ) + _STR ) ; scheduledPool . shutdown ( ) ; instantPool . shutdown ( ) ; longRunningPool . shutdown ( ) ; workStealingPool . shutdown ( ) ; boolean success = _BOOL ; try { success |= awaitTermination ( _NUM ) ; scheduledPool . setExecuteExistingDelayedTasksAfterShutdownPolicy ( _BOOL ) ; scheduledPool . setContinueExistingPeriodicTasksAfterShutdownPolicy ( _BOOL ) ; success |= awaitTermination ( _NUM ) ; } catch ( InterruptedException e ) { e . printStackTrace ( ) ; } log . info ( _STR + success + _STR + ( System . currentTimeMillis ( ) - begin ) + _STR ) ; log . info ( _STR + getTaskCount ( scheduledPool ) + _STR ) ; log . info ( _STR + getTaskCount ( instantPool ) + _STR ) ; log . info ( _STR + getTaskCount ( longRunningPool ) + _STR ) ; log . info ( _STR + ( workStealingPool . getQueuedTaskCount ( ) + workStealingPool . getQueuedSubmissionCount ( ) ) + _STR ) ; workStealingPool . shutdownNow ( ) ; }
31961	public static Collection < InetAddress > toInetAddresses ( Collection < String > addrs , Collection < String > hostNames ) throws IgniteCheckedException { Set < InetAddress > res = new HashSet < > ( addrs . size ( ) ) ; Iterator < String > hostNamesIt = hostNames . iterator ( ) ; for ( String addr : addrs ) { String hostName = hostNamesIt . hasNext ( ) ? hostNamesIt . next ( ) : null ; InetAddress inetAddr = null ; if ( ! F . isEmpty ( hostName ) ) { try { inetAddr = InetAddress . getByName ( hostName ) ; } catch ( UnknownHostException ignored ) { } } if ( inetAddr == null || inetAddr . isLoopbackAddress ( ) ) { try { inetAddr = InetAddress . getByName ( addr ) ; } catch ( UnknownHostException ignored ) { } } if ( inetAddr != null ) res . add ( inetAddr ) ; } if ( res . isEmpty ( ) ) throw new IgniteCheckedException ( _STR + addrs + _STR + hostNames + _STR ) ; return res ; }
13971	public static String removeNewLineChars ( String s ) { String retString = null ; if ( ( s != null ) && ( s . length ( ) > _NUM ) && ( s . indexOf ( _STR ) != - _NUM ) ) { char [ ] chars = s . toCharArray ( ) ; int len = chars . length ; StringBuffer sb = new StringBuffer ( len ) ; for ( int i = _NUM ; i < len ; i ++ ) { char c = chars [ i ] ; if ( c != _STR ) { sb . append ( c ) ; } } retString = sb . toString ( ) ; } else { retString = s ; } return retString ; }
78109	void calculateCounters ( ) { if ( ! isDBAvailable ( ) ) return ; long time = System . currentTimeMillis ( ) ; int total = _NUM ; write . lock ( ) ; try { countResetFeedsAndCategories ( ) ; total += countFeedsWithUnread ( ) ; countCategoriesWithUnread ( ) ; countSpecialCategories ( total ) ; } finally { write . unlock ( ) ; } Log . i ( TAG , String . format ( _STR , total , ( System . currentTimeMillis ( ) - time ) ) ) ; }
80220	protected void appendHTML ( final StringBuilder sbuf , final char ch ) { switch ( ch ) { case _STR : sbuf . append ( _STR ) ; break ; case _STR : sbuf . append ( _STR ) ; break ; case _STR : sbuf . append ( _STR ) ; break ; default : sbuf . append ( ch ) ; break ; } }
70656	private Collection < Var > migrateColumns ( SQLTable currentTable ) { List < Var > vars = new ArrayList < > ( ) ; String tableType = currentTable . getEntityType ( ) ; Map < String , ResourceType . DataType > columns = currentTable . getColumns ( ) ; Map < String , String > foreignColumns = currentTable . getForeignKeyColumns ( ) ; for ( String column : columns . keySet ( ) ) { ResourceType . DataType columnType = columns . get ( column ) ; if ( foreignColumns . containsKey ( column ) ) { vars . addAll ( migrateAsRelation ( tableType , column , foreignColumns . get ( column ) ) ) ; } else { vars . addAll ( migrateAsResource ( tableType , columnType , column ) ) ; } } return vars ; }
19799	public int retrieveRowCount ( String tableName ) throws SQLException { ResultSet rs = null ; int rowCount = - _NUM ; try { rs = statement . executeQuery ( _STR + tableName ) ; rs . next ( ) ; rowCount = rs . getInt ( _NUM ) ; } finally { if ( rs != null ) { rs . close ( ) ; } } return rowCount ; }
40484	public JarModifier ( File jarFile ) throws JarException , IOException { this . jarFile = jarFile ; JarFile jar = new JarFile ( jarFile ) ; Enumeration < ? extends JarEntry > enumerator = jar . entries ( ) ; while ( enumerator . hasMoreElements ( ) ) { JarEntry currentEntry = ( JarEntry ) enumerator . nextElement ( ) ; JarEntry resetEntry = new JarEntry ( currentEntry . getName ( ) ) ; jarEntries . put ( currentEntry . getName ( ) , resetEntry ) ; } String manifestPath = META_INF + SEPERATOR + _STR ; JarEntry jarEntry = jar . getJarEntry ( manifestPath ) ; if ( jarEntry != null ) { Enumeration < JarEntry > entries = jar . entries ( ) ; while ( entries . hasMoreElements ( ) ) { jarEntry = ( JarEntry ) entries . nextElement ( ) ; if ( manifestPath . equalsIgnoreCase ( jarEntry . getName ( ) ) ) { break ; } else { jarEntry = null ; } } } Manifest manifest = new Manifest ( ) ; if ( jarEntry != null ) { manifest . read ( jar . getInputStream ( jarEntry ) ) ; } this . manifest = manifest ; jar . close ( ) ; }
36251	@ Override public int addAttribute ( Attribute a ) { if ( a == null ) { throw new IllegalArgumentException ( _STR ) ; } else { int index = - _NUM ; Attribute original = a ; a = ( Attribute ) a . clone ( ) ; if ( unusedColumnList . size ( ) > _NUM ) { synchronized ( unusedColumnList ) { if ( unusedColumnList . size ( ) > _NUM ) { index = unusedColumnList . remove ( _NUM ) ; attributes . set ( index , a ) ; } else { index = attributes . size ( ) ; attributes . add ( a ) ; } } } else { index = attributes . size ( ) ; attributes . add ( a ) ; } a . setTableIndex ( index ) ; original . setTableIndex ( index ) ; return index ; } }
54004	default B with ( String key , int value ) { return with ( key , Integer . toString ( value ) ) ; }
63177	public static < X > void sortTopN ( X [ ] array , int offset , int limit , Comparator < ? super X > comp ) { partitionTopN ( array , offset , limit , comp ) ; Arrays . sort ( array , offset , ( int ) Math . min ( ( long ) offset + limit , array . length ) , comp ) ; }
23131	protected boolean isServerTransaction ( ) { return this instanceof SIPServerTransaction ; }
44999	Object addMarkedOccurrenceHighlight ( int start , int end , MarkOccurrencesHighlightPainter p ) throws BadLocationException { Document doc = textArea . getDocument ( ) ; TextUI mapper = textArea . getUI ( ) ; HighlightInfo i = new LayeredHighlightInfo ( ) ; i . painter = p ; i . p0 = doc . createPosition ( start ) ; i . p1 = doc . createPosition ( end - _NUM ) ; markedOccurrences . add ( i ) ; mapper . damageRange ( textArea , start , end ) ; return i ; }
27208	public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
53889	public static void readFully ( InputStream in , byte buf [ ] , int off , int len ) throws IOException { int toRead = len ; while ( toRead > _NUM ) { int ret = in . read ( buf , off , toRead ) ; if ( ret < _NUM ) { throw new IOException ( _STR ) ; } toRead -= ret ; off += ret ; } }
35771	public static void assumeTrue ( BooleanSupplier assumptionSupplier , Supplier < String > messageSupplier ) throws TestAbortedException { if ( ! assumptionSupplier . getAsBoolean ( ) ) { throwTestAbortedException ( messageSupplier . get ( ) ) ; } }
26213	public static String addToCartBulk ( HttpServletRequest request , HttpServletResponse response ) { String categoryId = request . getParameter ( _STR ) ; ShoppingCart cart = getCartObject ( request ) ; Delegator delegator = ( Delegator ) request . getAttribute ( _STR ) ; LocalDispatcher dispatcher = ( LocalDispatcher ) request . getAttribute ( _STR ) ; ShoppingCartHelper cartHelper = new ShoppingCartHelper ( delegator , dispatcher , cart ) ; String controlDirective ; Map < String , Object > result ; Map < String , Object > paramMap = UtilHttp . getParameterMap ( request ) ; String catalogId = CatalogWorker . getCurrentCatalogId ( request ) ; result = cartHelper . addToCartBulk ( catalogId , categoryId , paramMap ) ; controlDirective = processResult ( result , request ) ; if ( controlDirective . equals ( ERROR ) ) { return _STR ; } else { return _STR ; } }
36127	public void addFrequentSet ( FrequentItemSet itemSet ) { frequentSets . add ( itemSet ) ; maximumSetSize = Math . max ( itemSet . getNumberOfItems ( ) , maximumSetSize ) ; }
29891	private int skipFromPeekBuffer ( int length ) { int bytesSkipped = Math . min ( peekBufferLength , length ) ; updatePeekBuffer ( bytesSkipped ) ; return bytesSkipped ; }
21798	protected Workflow . Method createRemoveVolumesFromCGMethod ( URI vplexURI , URI cgURI , List < URI > vplexVolumeURIs ) { return new Workflow . Method ( REMOVE_VOLUMES_FROM_CG_STEP , vplexURI , cgURI , vplexVolumeURIs ) ; }
55397	private static int showUrlsPrompt ( Component parent , List < String > urls ) { String text = _STR ; for ( String url : urls ) { url = splitUrl ( url ) ; text += url + _STR ; } String okOption = _STR ; if ( urls . size ( ) > _NUM ) { okOption = _STR + urls . size ( ) + _STR ; } String [ ] options = { okOption , _STR } ; if ( urls . size ( ) == _NUM ) { options = new String [ ] { okOption , _STR , _STR } ; } int chosenOption = JOptionPane . showOptionDialog ( parent , text , _STR , JOptionPane . OK_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE , null , options , _NUM ) ; return chosenOption ; }
20279	int convertMouse ( MouseEvent event ) { int result ; if ( panelFont == null ) return ( NO_MOUSE ) ; int colOff = event . getX ( ) - GRID_WIDTH - PANEL_MARGIN ; int colNum = colOff / horizStep ; int colRem = colOff % horizStep ; if ( ( colNum >= panelColumns ) || ( colRem < TEXT_MARGIN ) || ( colRem > ( horizStep - GRID_WIDTH - TEXT_MARGIN ) ) ) { return ( NO_MOUSE ) ; } int rowOff = event . getY ( ) - GRID_WIDTH - PANEL_MARGIN ; int rowNum = rowOff / vertiStep ; int rowRem = rowOff % vertiStep ; if ( ( rowRem < TEXT_MARGIN ) || ( rowRem > ( vertiStep - GRID_WIDTH - TEXT_MARGIN ) ) ) { return ( NO_MOUSE ) ; } result = cornerIndex + ( rowNum * panelColumns ) + colNum ; if ( result >= cellCount ) return ( NO_MOUSE ) ; return ( result ) ; }
84968	private static String computeRegexString ( String originalString , String oldName , String newName ) { StringBuilder builder = new StringBuilder ( originalString . length ( ) ) ; String oldNameOrNewNameRegEx = String . format ( _STR , Pattern . quote ( oldName ) , Pattern . quote ( newName ) ) ; int i = originalString . indexOf ( oldName ) ; if ( i >= _NUM ) { int prevI = _NUM ; while ( i >= _NUM ) { builder . append ( Pattern . quote ( originalString . substring ( prevI , i ) ) ) ; builder . append ( oldNameOrNewNameRegEx ) ; prevI = i ; i = originalString . indexOf ( oldName , i + oldName . length ( ) ) ; } builder . append ( Pattern . quote ( originalString . substring ( prevI + oldName . length ( ) , originalString . length ( ) ) ) ) ; } return builder . toString ( ) ; }
23133	public synchronized String generateCallIdentifier ( String address ) { String date = Long . toString ( System . currentTimeMillis ( ) + callIDCounter ++ + rand . nextLong ( ) ) ; byte cid [ ] = digester . digest ( date . getBytes ( ) ) ; String cidString = Utils . toHexString ( cid ) ; return cidString + _STR + address ; }
81705	int parseHour ( String source , char patternChar , int offset ) throws ParseException { int min = ( patternChar == HOUR_1_LETTER || patternChar == HOUR12_1_LETTER ) ? _NUM : _NUM ; int max = ( ( patternChar == HOUR_LETTER || patternChar == HOUR_1_LETTER ) ? _NUM : _NUM ) + min ; return parseNumber ( source , offset , _STR , min , max ) - min ; }
38910	public void doHistory ( KeyEvent e ) { if ( e . getSource ( ) == m_Input ) { switch ( e . getKeyCode ( ) ) { case KeyEvent . VK_UP : if ( m_HistoryPos > _NUM ) { m_HistoryPos -- ; String command = m_CommandHistory . elementAt ( m_HistoryPos ) ; m_Input . setText ( command ) ; } break ; case KeyEvent . VK_DOWN : if ( m_HistoryPos < m_CommandHistory . size ( ) ) { m_HistoryPos ++ ; String command = _STR ; if ( m_HistoryPos < m_CommandHistory . size ( ) ) { command = m_CommandHistory . elementAt ( m_HistoryPos ) ; } m_Input . setText ( command ) ; } break ; default : break ; } } }
81344	public static ReferenceBinding [ ] substitute ( Substitution substitution , ReferenceBinding [ ] originalTypes ) { if ( originalTypes == null ) return null ; ReferenceBinding [ ] substitutedTypes = originalTypes ; for ( int i = _NUM , length = originalTypes . length ; i < length ; i ++ ) { ReferenceBinding originalType = originalTypes [ i ] ; TypeBinding substitutedType = substitute ( substitution , originalType ) ; if ( ! ( substitutedType instanceof ReferenceBinding ) ) { return null ; } if ( substitutedType != originalType ) { if ( substitutedTypes == originalTypes ) { System . arraycopy ( originalTypes , _NUM , substitutedTypes = new ReferenceBinding [ length ] , _NUM , i ) ; } substitutedTypes [ i ] = ( ReferenceBinding ) substitutedType ; } else if ( substitutedTypes != originalTypes ) { substitutedTypes [ i ] = originalType ; } } return substitutedTypes ; }
62253	@ Override protected void onDraw ( Canvas canvas ) { super . onDraw ( canvas ) ; if ( mBitmapShader == null ) return ; canvas . drawCircle ( mCenterX , mCenterY , mCoverRadius , mCoverPaint ) ; canvas . drawCircle ( mCenterX , mCenterY , mCoverRadius , mCoverFrontPaint ) ; mDurationText = secondsToTime ( mDurationSecondsCurrent ) ; mDurationPaint . getTextBounds ( mDurationText , _NUM , mDurationText . length ( ) , mRectDuration ) ; canvas . drawText ( mDurationText , ( mCenterX - ( mRectDuration . width ( ) / _NUM ) ) , ( mCenterY + ( mRectDuration . height ( ) / _NUM ) ) , mDurationPaint ) ; if ( mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null ) { canvas . drawBitmap ( isAction1Selected ? mBitmapSelectedAction1 : mBitmapUnselectedAction1 , ( mCenterX - ( _NUM * ( mCenterX / _NUM ) ) ) , mCenterY + ( mCenterY / _NUM ) - ( mCenterY / _NUM ) , mActionPaint ) ; } if ( mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null ) { canvas . drawBitmap ( isAction2Selected ? mBitmapSelectedAction2 : mBitmapUnselectedAction2 , mCenterX - ( mCenterX / _NUM ) , mCenterY + ( mCenterY / _NUM ) - ( mCenterY / _NUM ) , mActionPaint ) ; } if ( mBitmapUnselectedAction3 != null && mBitmapSelectedAction3 != null ) { canvas . drawBitmap ( isAction3Selected ? mBitmapSelectedAction3 : mBitmapUnselectedAction3 , ( int ) ( mCenterX + ( _NUM * ( mCenterX / _NUM ) ) ) , mCenterY + ( mCenterY / _NUM ) - ( mCenterY / _NUM ) , mActionPaint ) ; } canvas . drawArc ( mProgressRectF , _NUM , _NUM , _BOOL , mPaintEmptyProgress ) ; canvas . drawArc ( mProgressRectF , _NUM , calculatePastProgress ( ) , _BOOL , mPaintLoadedProgress ) ; canvas . drawCircle ( ( float ) ( mCenterX + ( ( mCenterX - _NUM ) * Math . cos ( Math . toRadians ( calculatePastProgress ( ) - _NUM ) ) ) ) , ( float ) ( mCenterY + ( ( mCenterX - _NUM ) * Math . sin ( Math . toRadians ( calculatePastProgress ( ) - _NUM ) ) ) ) , mRadiusToggle , mPaintProgressToggle ) ; }
48994	private static Collection < TCPTransport > allKnownTransports ( ) { Set < TCPTransport > s ; synchronized ( localEndpoints ) { s = new HashSet < TCPTransport > ( localEndpoints . size ( ) ) ; for ( LinkedList < TCPEndpoint > epList : localEndpoints . values ( ) ) { TCPEndpoint ep = epList . getFirst ( ) ; s . add ( ep . transport ) ; } } return s ; }
71964	public void requestSecondsUntilIdleLockout ( ) { operations . add ( PasswordPolicyStateOperationType . GET_SECONDS_UNTIL_IDLE_LOCKOUT ) ; }
59586	@ RequestMapping ( value = _STR , method = { RequestMethod . GET } ) @ ResponseBody private static List < String > showHiveDatabases ( ) throws IOException { IHiveClient hiveClient = HiveClientFactory . getHiveClient ( ) ; List < String > results = null ; try { results = hiveClient . getHiveDbNames ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; throw new IOException ( e ) ; } return results ; }
18563	public void testNegNegFirstShorter ( ) { byte aBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; int aSign = - _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { - _NUM , _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , - _NUM , - _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . and ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , result . signum ( ) ) ; }
78148	private static double hackyAdjuster ( double f ) { double tmp = Math . sqrt ( _NUM - f ) ; return ( f <= _NUM ) ? tmp : tmp + ( _NUM * ( f - _NUM ) ) ; }
24770	private static Object fromString ( String s ) throws IOException , ClassNotFoundException { byte [ ] data = Base64 . decode ( s , Base64 . DEFAULT ) ; ObjectInputStream ois = new ObjectInputStream ( new ByteArrayInputStream ( data ) ) ; Object o = ois . readObject ( ) ; ois . close ( ) ; return o ; }
43816	private boolean copyDocument ( SearchDocument newDocument , SearchDocument document , Map < String , Set < String > > removedProperties ) { boolean mutated = _BOOL ; for ( String oldFieldName : document . getPropertyNames ( ) ) { newDocument . addProperty ( oldFieldName ) ; List < String > oldValues = document . getProperty ( oldFieldName ) ; if ( oldValues != null ) { Set < String > objectsRemoved = ( removedProperties != null ) ? removedProperties . get ( oldFieldName ) : null ; for ( String oldValue : oldValues ) { if ( ( objectsRemoved != null ) && ( objectsRemoved . contains ( oldValue ) ) ) { mutated = _BOOL ; } else { addProperty ( oldFieldName , oldValue , newDocument ) ; } } } } return mutated ; }
25591	public SVDMatrix ( Matrix Arg ) { this ( Arg , _BOOL , _BOOL , _BOOL ) ; }
23902	public void unlockForClear ( InternalDistributedMember locker ) { synchronized ( this . clearLockSync ) { InternalDistributedSystem instance = InternalDistributedSystem . getAnyInstance ( ) ; if ( instance != null && logger . isDebugEnabled ( ) ) { logger . debug ( _STR , locker , System . identityHashCode ( this ) ) ; } if ( this . lockOwner != null && ! locker . equals ( this . lockOwner ) ) { if ( instance != null && logger . isDebugEnabled ( ) ) { logger . debug ( _STR , lockOwner ) ; } return ; } unlockVersionGeneration ( locker ) ; } }
49031	public UnicastRef ( ) { }
60328	private static int lastIndexOf ( Object o , @ NotNull Object [ ] elements , int index ) { if ( o == null ) { for ( int i = index ; i >= _NUM ; i -- ) { if ( elements [ i ] == null ) { return i ; } } } else { for ( int i = index ; i >= _NUM ; i -- ) { if ( o . equals ( elements [ i ] ) ) { return i ; } } } return - _NUM ; }
64768	public void write ( ByteBuffer buffer ) throws IOException { buffer . position ( _NUM ) ; if ( mFileChannel . size ( ) + buffer . capacity ( ) < mMaxSize ) { while ( buffer . hasRemaining ( ) ) { mFileChannel . write ( buffer ) ; } updateWaveFileSize ( ) ; } else { int remaining = ( int ) ( mMaxSize - mFileChannel . size ( ) ) ; remaining -= ( int ) ( remaining % mAudioFormat . getFrameSize ( ) ) ; byte [ ] bytes = buffer . array ( ) ; ByteBuffer current = ByteBuffer . wrap ( Arrays . copyOf ( bytes , remaining ) ) ; ByteBuffer next = ByteBuffer . wrap ( Arrays . copyOfRange ( bytes , remaining , bytes . length ) ) ; while ( current . hasRemaining ( ) ) { mFileChannel . write ( current ) ; } updateWaveFileSize ( ) ; rollover ( ) ; while ( next . hasRemaining ( ) ) { mFileChannel . write ( next ) ; } updateWaveFileSize ( ) ; } }
31530	public static double dmod_d ( double lhs , double rhs ) { return rhs != _NUM ? lhs - rhs * Math . floor ( lhs / rhs ) : Double . NaN ; }
58922	public void testMaxLess ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . max ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertTrue ( _STR , result . signum ( ) == _NUM ) ; }
38817	private synchronized void block ( boolean tf ) { if ( tf ) { try { if ( m_ioThread . isAlive ( ) && m_state != IDLE ) { wait ( ) ; } } catch ( InterruptedException ex ) { } } else { notifyAll ( ) ; } }
11145	public void move ( MouseEvent e ) { Point2D pnt = getProjectionPoint ( e ) ; int x = ( int ) pnt . getX ( ) ; int y = ( int ) pnt . getY ( ) ; if ( poly . getRenderType ( ) == OMGraphic . RENDERTYPE_OFFSET ) { gpm = new OffsetGrabPoint ( x , y ) ; gpm . clear ( ) ; } else { gpm = gpo ; gpm . clear ( ) ; gpm . set ( x , y ) ; } addPolyGrabPointsToOGP ( gpm ) ; movingPoint = gpm ; }
17758	public FloatBuffer put ( float [ ] src , int srcOffset , int floatCount ) { Arrays . checkOffsetAndCount ( src . length , srcOffset , floatCount ) ; if ( floatCount > remaining ( ) ) { throw new BufferOverflowException ( ) ; } for ( int i = srcOffset ; i < srcOffset + floatCount ; ++ i ) { put ( src [ i ] ) ; } return this ; }
61500	public final void dispatchCharactersEvents ( int nodeHandle , ContentHandler ch , boolean normalize ) throws SAXException { int identity = makeNodeIdentity ( nodeHandle ) ; if ( identity == DTM . NULL ) return ; int type = _type2 ( identity ) ; if ( type == DTM . ELEMENT_NODE || type == DTM . DOCUMENT_NODE ) { int startNode = identity ; identity = _firstch2 ( identity ) ; if ( DTM . NULL != identity ) { int offset = - _NUM ; int length = _NUM ; do { type = _exptype2 ( identity ) ; if ( type == DTM . TEXT_NODE || type == DTM . CDATA_SECTION_NODE ) { int dataIndex = m_dataOrQName . elementAt ( identity ) ; if ( dataIndex >= _NUM ) { if ( - _NUM == offset ) { offset = dataIndex > > > TEXT_LENGTH_BITS ; } length += dataIndex & TEXT_LENGTH_MAX ; } else { if ( - _NUM == offset ) { offset = m_data . elementAt ( - dataIndex ) ; } length += m_data . elementAt ( - dataIndex + _NUM ) ; } } identity ++ ; } while ( _parent2 ( identity ) >= startNode ) ; if ( length > _NUM ) { if ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , offset , length ) ; else m_chars . sendSAXcharacters ( ch , offset , length ) ; } } } else if ( DTM . TEXT_NODE == type || DTM . CDATA_SECTION_NODE == type ) { int dataIndex = m_dataOrQName . elementAt ( identity ) ; if ( dataIndex >= _NUM ) { if ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , dataIndex > > > TEXT_LENGTH_BITS , dataIndex & TEXT_LENGTH_MAX ) ; else m_chars . sendSAXcharacters ( ch , dataIndex > > > TEXT_LENGTH_BITS , dataIndex & TEXT_LENGTH_MAX ) ; } else { if ( normalize ) m_chars . sendNormalizedSAXcharacters ( ch , m_data . elementAt ( - dataIndex ) , m_data . elementAt ( - dataIndex + _NUM ) ) ; else m_chars . sendSAXcharacters ( ch , m_data . elementAt ( - dataIndex ) , m_data . elementAt ( - dataIndex + _NUM ) ) ; } } else { int dataIndex = m_dataOrQName . elementAt ( identity ) ; if ( dataIndex < _NUM ) { dataIndex = - dataIndex ; dataIndex = m_data . elementAt ( dataIndex + _NUM ) ; } String str = ( String ) m_values . elementAt ( dataIndex ) ; if ( normalize ) FastStringBuffer . sendNormalizedSAXcharacters ( str . toCharArray ( ) , _NUM , str . length ( ) , ch ) ; else ch . characters ( str . toCharArray ( ) , _NUM , str . length ( ) ) ; } }
57031	public static boolean containIP ( int cidrPrefix , int cidrMaskBits , int ip ) { boolean matched = _BOOL ; int bitsToShift = _NUM - cidrMaskBits ; if ( bitsToShift > _NUM ) { cidrPrefix = cidrPrefix > > bitsToShift ; ip = ip > > bitsToShift ; cidrPrefix = cidrPrefix << bitsToShift ; ip = ip << bitsToShift ; } if ( cidrPrefix != ip ) { matched = _BOOL ; } return matched ; }
24371	protected static Boolean lock ( String serviceName , Object name ) { DistributedLockService service = DistributedLockService . getServiceNamed ( serviceName ) ; boolean locked = service . lock ( name , _NUM , - _NUM ) ; return Boolean . valueOf ( locked ) ; }
15157	protected int checkKnownCookie ( ) { int retVal = _NUM ; debug . message ( _STR , ADAPTIVE ) ; HttpServletRequest req = getHttpServletRequest ( ) ; if ( req != null ) { Cookie cookie = CookieUtils . getCookieFromReq ( req , knownCookieName ) ; if ( cookie != null ) { if ( knownCookieValue . equalsIgnoreCase ( CookieUtils . getCookieValue ( cookie ) ) ) { retVal = knownCookieScore ; } } } if ( knownCookieValue == null ) { knownCookieValue = _STR ; } if ( knownCookieSave ) { postAuthNMap . put ( _STR , knownCookieName ) ; postAuthNMap . put ( _STR , knownCookieValue ) ; } if ( ! knownCookieInvert ) { retVal = knownCookieScore - retVal ; } return retVal ; }
84681	public File [ ] selectImportFiles ( final String title , boolean multipleSelection , FileNameExtensionFilter [ ] fileNameExtensionFilters ) { if ( Boolean . parseBoolean ( System . getProperty ( _STR , Boolean . toString ( OSType . isMac ( ) ) ) ) ) { FileDialog importDialog = fileDialogs . get ( title ) ; if ( importDialog == null ) { importDialog = new FileDialog ( this , title , FileDialog . LOAD ) ; fileDialogs . put ( title , importDialog ) ; } importDialog . setVisible ( _BOOL ) ; if ( importDialog . getFile ( ) != null ) { return new File [ ] { new File ( importDialog . getDirectory ( ) , importDialog . getFile ( ) ) } ; } } else { JFileChooser importChooser = fileChoosers . get ( title ) ; if ( importChooser == null ) { importChooser = new JFileChooser ( Utils . getCWD ( ) ) ; importChooser . setMultiSelectionEnabled ( multipleSelection ) ; for ( FileNameExtensionFilter fileNameExtensionFilter : fileNameExtensionFilters ) { importChooser . setFileFilter ( fileNameExtensionFilter ) ; } importChooser . setDialogTitle ( title ) ; fileChoosers . put ( title , importChooser ) ; } int returnVal = importChooser . showOpenDialog ( this ) ; if ( returnVal == JFileChooser . APPROVE_OPTION ) { if ( importChooser . isMultiSelectionEnabled ( ) ) { return importChooser . getSelectedFiles ( ) ; } else { return new File [ ] { importChooser . getSelectedFile ( ) } ; } } } return null ; }
25087	public GT_MetaGenerated_Item ( String aUnlocalized , short aOffset , short aItemAmount ) { super ( aUnlocalized ) ; setCreativeTab ( GregTech_API . TAB_GREGTECH_MATERIALS ) ; setHasSubtypes ( _BOOL ) ; setMaxDamage ( _NUM ) ; mEnabledItems = new BitSet ( aItemAmount ) ; mVisibleItems = new BitSet ( aItemAmount ) ; mOffset = ( short ) Math . min ( _NUM , aOffset ) ; mItemAmount = ( short ) Math . min ( aItemAmount , _NUM - mOffset ) ; mIconList = new IIcon [ aItemAmount ] [ _NUM ] ; sInstances . put ( getUnlocalizedName ( ) , this ) ; }
37858	@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( _NUM ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addAll ( Collections . list ( super . listOptions ( ) ) ) ; return newVector . elements ( ) ; }
57377	@ Override public SSLEngineResult wrap ( ByteBuffer [ ] srcs , int offset , int len , ByteBuffer dst ) throws SSLException { if ( engine_was_shutteddown ) { return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , _NUM , _NUM ) ; } if ( ( srcs == null ) || ( dst == null ) ) { throw new IllegalStateException ( _STR ) ; } if ( dst . isReadOnly ( ) ) { throw new ReadOnlyBufferException ( ) ; } if ( ! handshake_started ) { beginHandshake ( ) ; } SSLEngineResult . HandshakeStatus handshakeStatus = getHandshakeStatus ( ) ; if ( ( session == null || engine_was_closed ) && ( handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_UNWRAP ) || handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_TASK ) ) ) { return new SSLEngineResult ( getEngineStatus ( ) , handshakeStatus , _NUM , _NUM ) ; } int capacity = dst . remaining ( ) ; int produced = _NUM ; if ( alertProtocol . hasAlert ( ) ) { if ( capacity < recordProtocol . getRecordSize ( _NUM ) ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , _NUM , _NUM ) ; } byte [ ] alert_data = alertProtocol . wrap ( ) ; dst . put ( alert_data ) ; if ( alertProtocol . isFatalAlert ( ) ) { alertProtocol . setProcessed ( ) ; if ( session != null ) { session . invalidate ( ) ; } shutdown ( ) ; return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , _NUM , alert_data . length ) ; } else { alertProtocol . setProcessed ( ) ; if ( close_notify_was_sent && close_notify_was_received ) { shutdown ( ) ; return new SSLEngineResult ( SSLEngineResult . Status . CLOSED , SSLEngineResult . HandshakeStatus . NOT_HANDSHAKING , _NUM , alert_data . length ) ; } return new SSLEngineResult ( getEngineStatus ( ) , getHandshakeStatus ( ) , _NUM , alert_data . length ) ; } } if ( capacity < recordProtocol . getMinRecordSize ( ) ) { if ( logger != null ) { logger . println ( _STR + capacity + _STR + recordProtocol . getMinRecordSize ( ) + _STR ) ; } return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , _NUM , _NUM ) ; } try { if ( ! handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . NEED_WRAP ) ) { dataStream . setSourceBuffers ( srcs , offset , len ) ; if ( ( capacity < SSLRecordProtocol . MAX_SSL_PACKET_SIZE ) && ( capacity < recordProtocol . getRecordSize ( dataStream . available ( ) ) ) ) { if ( logger != null ) { logger . println ( _STR + capacity + _STR + recordProtocol . getRecordSize ( dataStream . available ( ) ) + _STR ) ; } return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , _NUM , _NUM ) ; } if ( remaining_wrapped_data == null ) { remaining_wrapped_data = recordProtocol . wrap ( ContentType . APPLICATION_DATA , dataStream ) ; } if ( capacity < remaining_wrapped_data . length ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , dataStream . consumed ( ) , _NUM ) ; } else { dst . put ( remaining_wrapped_data ) ; produced = remaining_wrapped_data . length ; remaining_wrapped_data = null ; return new SSLEngineResult ( getEngineStatus ( ) , handshakeStatus , dataStream . consumed ( ) , produced ) ; } } else { if ( remaining_hsh_data == null ) { remaining_hsh_data = handshakeProtocol . wrap ( ) ; } if ( capacity < remaining_hsh_data . length ) { return new SSLEngineResult ( SSLEngineResult . Status . BUFFER_OVERFLOW , handshakeStatus , _NUM , _NUM ) ; } else { dst . put ( remaining_hsh_data ) ; produced = remaining_hsh_data . length ; remaining_hsh_data = null ; handshakeStatus = handshakeProtocol . getStatus ( ) ; if ( handshakeStatus . equals ( SSLEngineResult . HandshakeStatus . FINISHED ) ) { session = recordProtocol . getSession ( ) ; } } return new SSLEngineResult ( getEngineStatus ( ) , getHandshakeStatus ( ) , _NUM , produced ) ; } } catch ( AlertException e ) { alertProtocol . alert ( AlertProtocol . FATAL , e . getDescriptionCode ( ) ) ; engine_was_closed = _BOOL ; if ( session != null ) { session . invalidate ( ) ; } throw e . getReason ( ) ; } }
78015	public static byte [ ] readFully ( InputStream in ) throws IOException { try { return readFullyNoClose ( in ) ; } finally { in . close ( ) ; } }
71607	public static ParsedSql parseSqlStatement ( String sql ) { Set < String > namedParameters = new HashSet < String > ( ) ; ParsedSql parsedSql = new ParsedSql ( sql ) ; char [ ] statement = sql . toCharArray ( ) ; int namedParameterCount = _NUM ; int unnamedParameterCount = _NUM ; int totalParameterCount = _NUM ; int i = _NUM ; while ( i < statement . length ) { int skipToPosition = skipCommentsAndQuotes ( statement , i ) ; if ( i != skipToPosition ) { if ( skipToPosition >= statement . length ) { break ; } i = skipToPosition ; } char c = statement [ i ] ; if ( c == _STR || c == _STR ) { int j = i + _NUM ; if ( j < statement . length && statement [ j ] == _STR && c == _STR ) { i = i + _NUM ; continue ; } while ( j < statement . length && ! isParameterSeparator ( statement [ j ] ) ) { j ++ ; } if ( j - i > _NUM ) { String parameter = sql . substring ( i + _NUM , j ) ; if ( ! namedParameters . contains ( parameter ) ) { namedParameters . add ( parameter ) ; namedParameterCount ++ ; } parsedSql . addNamedParameter ( parameter , i , j ) ; totalParameterCount ++ ; } i = j - _NUM ; } else { if ( c == _STR ) { unnamedParameterCount ++ ; totalParameterCount ++ ; } } i ++ ; } parsedSql . setNamedParameterCount ( namedParameterCount ) ; parsedSql . setUnnamedParameterCount ( unnamedParameterCount ) ; parsedSql . setTotalParameterCount ( totalParameterCount ) ; return parsedSql ; }
48723	final void putLong ( int offset , long value ) { unsafe . putLong ( offset + address , value ) ; }
16925	public boolean onEvent ( ActionResult result ) { synchronized ( this ) { String requestId = result . getResponseInfo ( ) . mRequestId ; if ( requestId == null ) { return _BOOL ; } boolean eventRemoved = mRequestIds . remove ( requestId ) ; if ( eventRemoved ) { Class key = null ; for ( Class type : mLastRequestIdByType . keySet ( ) ) { if ( requestId . equals ( mLastRequestIdByType . get ( type ) ) ) { key = type ; break ; } } if ( key != null ) { mLastRequestIdByType . remove ( key ) ; } } return eventRemoved ; } }
10164	public static String gensalt ( int log_rounds , SecureRandom random ) { StringBuffer rs = new StringBuffer ( ) ; byte rnd [ ] = new byte [ BCRYPT_SALT_LEN ] ; random . nextBytes ( rnd ) ; rs . append ( _STR ) ; if ( log_rounds < _NUM ) { rs . append ( _STR ) ; } if ( log_rounds > _NUM ) { throw new IllegalArgumentException ( _STR ) ; } rs . append ( Integer . toString ( log_rounds ) ) ; rs . append ( _STR ) ; rs . append ( encode_base64 ( rnd , rnd . length ) ) ; return rs . toString ( ) ; }
23691	public void checkKey ( Object key ) throws PartitionedRegionException { if ( ! hasHash ) { return ; } if ( key == null ) { return ; } int expected = key . hashCode ( ) ; if ( expected == keyHash ) { return ; } throw new PartitionedRegionException ( _STR + expected + _STR + keyHash ) ; }
30305	public StringBuffer numberToString ( final String strNumberToConvert ) { String strNumber = _STR , signBit = _STR ; if ( strNumberToConvert . startsWith ( _STR ) ) { strNumber = _STR + strNumberToConvert . substring ( _NUM , strNumberToConvert . length ( ) ) ; signBit = _STR ; } else strNumber = _STR + strNumberToConvert ; final DecimalFormat dft = new DecimalFormat ( _STR ) ; final String strtemp = _STR + dft . format ( Double . parseDouble ( strNumber ) ) ; StringBuffer strbNumber = new StringBuffer ( strtemp ) ; final int intLen = strbNumber . length ( ) ; for ( int i = intLen - _NUM ; i > _NUM ; i = i - _NUM ) strbNumber . insert ( i , _STR ) ; if ( signBit . equals ( _STR ) ) strbNumber = strbNumber . insert ( _NUM , _STR ) ; return strbNumber ; }
8536	private void runInitScriptIfRequired ( String url , Connection connection ) throws SQLException { Matcher matcher = INITSCRIPT_MATCHING_PATTERN . matcher ( url ) ; if ( matcher . matches ( ) ) { String initScriptPath = matcher . group ( _NUM ) ; try { URL resource = Resources . getResource ( initScriptPath ) ; String sql = Resources . toString ( resource , Charsets . UTF_8 ) ; ScriptUtils . executeSqlScript ( connection , initScriptPath , sql ) ; } catch ( IOException | IllegalArgumentException e ) { LOGGER . warn ( _STR , initScriptPath ) ; throw new SQLException ( _STR + initScriptPath , e ) ; } catch ( ScriptException e ) { LOGGER . error ( _STR , initScriptPath , e ) ; throw new SQLException ( _STR + initScriptPath , e ) ; } } }
55160	private static int parseInt ( String value , int beginIndex , int endIndex ) throws NumberFormatException { if ( beginIndex < _NUM || endIndex > value . length ( ) || beginIndex > endIndex ) { throw new NumberFormatException ( value ) ; } int i = beginIndex ; int result = _NUM ; int digit ; if ( i < endIndex ) { digit = Character . digit ( value . charAt ( i ++ ) , _NUM ) ; if ( digit < _NUM ) { throw new NumberFormatException ( _STR + value ) ; } result = - digit ; } while ( i < endIndex ) { digit = Character . digit ( value . charAt ( i ++ ) , _NUM ) ; if ( digit < _NUM ) { throw new NumberFormatException ( _STR + value ) ; } result *= _NUM ; result -= digit ; } return - result ; }
74579	public static void println ( Object x ) { out . println ( x ) ; }
72362	public static void checkFinite ( final double [ ] val ) throws MathIllegalArgumentException { for ( int i = _NUM ; i < val . length ; i ++ ) { final double x = val [ i ] ; if ( Double . isInfinite ( x ) || Double . isNaN ( x ) ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . NOT_FINITE_NUMBER , x ) ; } } }
70884	private void initKeyboardButtons ( KeyboardView view ) { mButtons = new ArrayList < > ( ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_0 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_1 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_2 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_3 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_4 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_5 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_6 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_7 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_8 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_9 ) ) ; mButtons . add ( ( KeyboardButtonView ) view . findViewById ( R . id . pin_code_button_clear ) ) ; for ( View button : mButtons ) { button . setOnClickListener ( this ) ; } }
66282	public static boolean isAutoNew ( Properties ctx , int WindowNo ) { if ( ctx == null ) throw new IllegalArgumentException ( _STR ) ; String s = getContext ( ctx , WindowNo , _STR , _BOOL ) ; if ( s != null ) { if ( s . equals ( _STR ) ) return _BOOL ; else return _BOOL ; } return isAutoNew ( ctx ) ; }
9172	private static String findRelativePath ( String filePath , String dirPath ) { String relPath ; if ( ! dirPath . endsWith ( File . separator ) ) { dirPath = dirPath + File . separator ; } if ( filePath . startsWith ( dirPath ) ) { relPath = filePath . substring ( dirPath . length ( ) ) ; } else { relPath = filePath ; } return relPath ; }
65624	public boolean init ( ) { log . config ( _STR ) ; MClient client = MClient . get ( Env . getCtx ( ) ) ; String ASPFilter = _STR ; if ( client . isUseASP ( ) ) ASPFilter = _STR + _STR + _STR + _STR + _STR + client . getAD_Client_ID ( ) + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + client . getAD_Client_ID ( ) + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + client . getAD_Client_ID ( ) + _STR + _STR + _STR + _STR + _STR ; String sql = null ; if ( Env . isBaseLanguage ( Env . getCtx ( ) , _STR ) ) sql = _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + ASPFilter + _STR ; else sql = _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + Env . getAD_Language ( Env . getCtx ( ) ) + _STR + _STR + ASPFilter + _STR ; boolean hasFields = _BOOL ; Rows rows = new Rows ( ) ; try { PreparedStatement pstmt = DB . prepareStatement ( sql , null ) ; pstmt . setInt ( _NUM , m_processInfo . getAD_Process_ID ( ) ) ; ResultSet rs = pstmt . executeQuery ( ) ; while ( rs . next ( ) ) { hasFields = _BOOL ; createField ( rs , rows ) ; isPair = ! isPair ; } rs . close ( ) ; pstmt . close ( ) ; } catch ( SQLException e ) { log . log ( Level . SEVERE , sql , e ) ; } if ( m_mFields . size ( ) != m_mFields2 . size ( ) || m_mFields . size ( ) != m_wEditors . size ( ) || m_mFields2 . size ( ) != m_wEditors2 . size ( ) ) log . log ( Level . SEVERE , _STR ) ; if ( hasFields ) { centerPanel . appendChild ( rows ) ; dynamicDisplay ( ) ; } else dispose ( ) ; return hasFields ; }
45390	private static String doNormalize ( String filename , char separator , boolean keepSeparator ) { if ( filename == null ) { return null ; } int size = filename . length ( ) ; if ( size == _NUM ) { return filename ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < _NUM ) { return null ; } char [ ] array = new char [ size + _NUM ] ; filename . getChars ( _NUM , filename . length ( ) , array , _NUM ) ; char otherSeparator = separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR ; for ( int i = _NUM ; i < array . length ; i ++ ) { if ( array [ i ] == otherSeparator ) { array [ i ] = separator ; } } boolean lastIsDirectory = _BOOL ; if ( array [ size - _NUM ] != separator ) { array [ size ++ ] = separator ; lastIsDirectory = _BOOL ; } for ( int i = prefix + _NUM ; i < size ; i ++ ) { if ( array [ i ] == separator && array [ i - _NUM ] == separator ) { System . arraycopy ( array , i , array , i - _NUM , size - i ) ; size -- ; i -- ; } } for ( int i = prefix + _NUM ; i < size ; i ++ ) { if ( array [ i ] == separator && array [ i - _NUM ] == _STR && ( i == prefix + _NUM || array [ i - _NUM ] == separator ) ) { if ( i == size - _NUM ) { lastIsDirectory = _BOOL ; } System . arraycopy ( array , i + _NUM , array , i - _NUM , size - i ) ; size -= _NUM ; i -- ; } } outer : for ( int i = prefix + _NUM ; i < size ; i ++ ) { if ( array [ i ] == separator && array [ i - _NUM ] == _STR && array [ i - _NUM ] == _STR && ( i == prefix + _NUM || array [ i - _NUM ] == separator ) ) { if ( i == prefix + _NUM ) { return null ; } if ( i == size - _NUM ) { lastIsDirectory = _BOOL ; } int j ; for ( j = i - _NUM ; j >= prefix ; j -- ) { if ( array [ j ] == separator ) { System . arraycopy ( array , i + _NUM , array , j + _NUM , size - i ) ; size -= i - j ; i = j + _NUM ; continue outer ; } } System . arraycopy ( array , i + _NUM , array , prefix , size - i ) ; size -= i + _NUM - prefix ; i = prefix + _NUM ; } } if ( size <= _NUM ) { return _STR ; } if ( size <= prefix ) { return new String ( array , _NUM , size ) ; } if ( lastIsDirectory && keepSeparator ) { return new String ( array , _NUM , size ) ; } return new String ( array , _NUM , size - _NUM ) ; }
76339	public void resetSingleton ( ) { root = null ; tmpFileCounter . set ( _NUM ) ; accessedFiles . clear ( ) ; shouldAllThrowIOException = _BOOL ; classesThatShouldThrowIOException . clear ( ) ; synchronized ( leakingResources ) { for ( LeakingResource resource : leakingResources ) { try { resource . release ( ) ; } catch ( Exception e ) { logger . warn ( _STR + e . getMessage ( ) , e ) ; } } leakingResources . clear ( ) ; } }
58935	public void testAndNotNegNegFirstLonger ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; byte bBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . andNot ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
80372	public static String generateStringOfCharacters ( int count ) { StringBuilder sb = new StringBuilder ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { sb . append ( CHARACTERS . charAt ( ( int ) ( Math . random ( ) * CHARACTERS . length ( ) ) ) ) ; } return sb . toString ( ) ; }
68667	private ExchangeRateManager ( ) { if ( System . getProperty ( _STR ) == null ) throw new UnsupportedOperationException ( _STR ) ; addKnownRates ( ) ; }
86978	public void removeAttribute ( String name ) { if ( name != null ) if ( attributesList != null ) { for ( int i = _NUM ; i < attributesList . size ( ) ; i ++ ) { Object o = attributesList . elementAt ( i ) ; if ( o instanceof AttributeField ) { AttributeField a = ( AttributeField ) o ; try { String n = a . getName ( ) ; if ( n != null ) { if ( name . equals ( n ) ) { attributesList . remove ( a ) ; } } } catch ( SdpParseException e ) { } } } } }
55945	@ Override public void evict ( String key ) { key = safetyKey ( key ) ; final File file = new File ( cacheDirectory , key ) ; file . delete ( ) ; }
66433	public static boolean isUniqueContraintError ( Exception e ) { if ( DB . isPostgreSQL ( ) ) return isSQLState ( e , _STR ) ; return isErrorCode ( e , _NUM ) ; }
18273	ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
54600	void addFillComponents ( Container panel , int [ ] cols , int [ ] rows ) { Dimension filler = new Dimension ( _NUM , _NUM ) ; boolean filled_cell_11 = _BOOL ; CellConstraints cc = new CellConstraints ( ) ; if ( cols . length > _NUM && rows . length > _NUM ) { if ( cols [ _NUM ] == _NUM && rows [ _NUM ] == _NUM ) { panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , _NUM ) ) ; filled_cell_11 = _BOOL ; } } for ( int index = _NUM ; index < cols . length ; index ++ ) { if ( cols [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( cols [ index ] , _NUM ) ) ; } for ( int index = _NUM ; index < rows . length ; index ++ ) { if ( rows [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , rows [ index ] ) ) ; } }
43987	private void insertUsedContextPrefixes ( ) { int unknownPrefixesCount = unknownPrefixesInXMLLiteral . size ( ) ; if ( unknownPrefixesCount > _NUM ) { StringBuilder contextPrefixes = new StringBuilder ( _NUM ) ; ElementInfo topElement = peekStack ( ) ; for ( int i = _NUM ; i < unknownPrefixesCount ; i ++ ) { String prefix = unknownPrefixesInXMLLiteral . get ( i ) ; String namespace = topElement . getNamespace ( prefix ) ; if ( namespace != null ) { appendNamespaceDecl ( contextPrefixes , prefix , namespace ) ; } } int endOfFirstStartTag = charBuf . indexOf ( _STR ) ; charBuf . insert ( endOfFirstStartTag , contextPrefixes . toString ( ) ) ; } unknownPrefixesInXMLLiteral . clear ( ) ; }
32177	public void addPutTimeNanos ( long duration ) { putTimeNanos . addAndGet ( duration ) ; if ( delegate != null ) delegate . addPutTimeNanos ( duration ) ; }
83784	public static List < Integer > precomputeHashes ( byte [ ] data , long tweak ) { ArrayList < Integer > list = new ArrayList < > ( MAX_HASH_FUNCS ) ; for ( int i = _NUM ; i < MAX_HASH_FUNCS ; ++ i ) { list . add ( murmurhash3bit ( i , data , tweak ) ) ; } return list ; }
86888	@ RequestProcessing ( value = _STR , method = HTTPRequestMethod . GET ) @ Before ( adviceClass = { StopwatchStartAdvice . class , AnonymousViewCheck . class , UserBlockCheck . class } ) @ After ( adviceClass = StopwatchEndAdvice . class ) public void showHomeFollowingTags ( final HTTPRequestContext context , final HttpServletRequest request , final HttpServletResponse response , final String userName ) throws Exception { final JSONObject user = ( JSONObject ) request . getAttribute ( User . USER ) ; request . setAttribute ( Keys . TEMAPLTE_DIR_NAME , Symphonys . get ( _STR ) ) ; final AbstractFreeMarkerRenderer renderer = new SkinRenderer ( ) ; context . setRenderer ( renderer ) ; renderer . setTemplateName ( _STR ) ; final Map < String , Object > dataModel = renderer . getDataModel ( ) ; filler . fillHeaderAndFooter ( request , response , dataModel ) ; String pageNumStr = request . getParameter ( _STR ) ; if ( Strings . isEmptyOrNull ( pageNumStr ) || ! Strings . isNumeric ( pageNumStr ) ) { pageNumStr = _STR ; } final int pageNum = Integer . valueOf ( pageNumStr ) ; final int pageSize = Symphonys . getInt ( _STR ) ; final int windowSize = Symphonys . getInt ( _STR ) ; fillHomeUser ( dataModel , user ) ; final String followingId = user . optString ( Keys . OBJECT_ID ) ; dataModel . put ( Follow . FOLLOWING_ID , followingId ) ; avatarQueryService . fillUserAvatarURL ( user ) ; final JSONObject followingTagsResult = followQueryService . getFollowingTags ( followingId , pageNum , pageSize ) ; final List < JSONObject > followingTags = ( List < JSONObject > ) followingTagsResult . opt ( Keys . RESULTS ) ; dataModel . put ( Common . USER_HOME_FOLLOWING_TAGS , followingTags ) ; final boolean isLoggedIn = ( Boolean ) dataModel . get ( Common . IS_LOGGED_IN ) ; if ( isLoggedIn ) { final JSONObject currentUser = ( JSONObject ) dataModel . get ( Common . CURRENT_USER ) ; final String followerId = currentUser . optString ( Keys . OBJECT_ID ) ; final boolean isFollowing = followQueryService . isFollowing ( followerId , followingId ) ; dataModel . put ( Common . IS_FOLLOWING , isFollowing ) ; for ( final JSONObject followingTag : followingTags ) { final String homeUserFollowingTagId = followingTag . optString ( Keys . OBJECT_ID ) ; followingTag . put ( Common . IS_FOLLOWING , followQueryService . isFollowing ( followerId , homeUserFollowingTagId ) ) ; } } user . put ( UserExt . USER_T_CREATE_TIME , new Date ( user . getLong ( Keys . OBJECT_ID ) ) ) ; final int followingTagCnt = followingTagsResult . optInt ( Pagination . PAGINATION_RECORD_COUNT ) ; final int pageCount = ( int ) Math . ceil ( followingTagCnt / ( double ) pageSize ) ; final List < Integer > pageNums = Paginator . paginate ( pageNum , pageSize , pageCount , windowSize ) ; if ( ! pageNums . isEmpty ( ) ) { dataModel . put ( Pagination . PAGINATION_FIRST_PAGE_NUM , pageNums . get ( _NUM ) ) ; dataModel . put ( Pagination . PAGINATION_LAST_PAGE_NUM , pageNums . get ( pageNums . size ( ) - _NUM ) ) ; } dataModel . put ( Pagination . PAGINATION_CURRENT_PAGE_NUM , pageNum ) ; dataModel . put ( Pagination . PAGINATION_PAGE_COUNT , pageCount ) ; dataModel . put ( Pagination . PAGINATION_PAGE_NUMS , pageNums ) ; }
10930	public int elevationAt ( float lat , float lon ) { if ( frame_is_valid == _BOOL ) { if ( lat >= dsi . sw_lat && lat <= dsi . ne_lat && lon >= dsi . sw_lon && lon <= dsi . ne_lon ) { int lat_index = Math . round ( ( lat - dsi . sw_lat ) * _NUM / uhl . lat_post_interval ) ; int lon_index = Math . round ( ( lon - dsi . sw_lon ) * _NUM / uhl . lon_post_interval ) ; if ( elevations [ lon_index ] == null ) readDataRecord ( lon_index ) ; return ( int ) elevations [ lon_index ] [ lat_index ] ; } } return - _NUM ; }
46877	ObservedObject createObservedObject ( ObjectName object ) { return new ObservedObject ( object ) ; }
52997	private void deleteChildren ( Element container ) { while ( container . hasChildNodes ( ) ) { container . removeChild ( container . getLastChild ( ) ) ; } }
15505	private void saveInitialChildState ( FacesContext facesContext , UIComponent component ) { if ( component instanceof EditableValueHolder && ! component . isTransient ( ) ) { String clientId = component . getClientId ( facesContext ) ; SavedState state = new SavedState ( ) ; initialChildState . put ( clientId , state ) ; state . populate ( ( EditableValueHolder ) component ) ; } Iterator < UIComponent > iterator = component . getFacetsAndChildren ( ) ; while ( iterator . hasNext ( ) ) { saveChildState ( facesContext , iterator . next ( ) ) ; } }
4956	public boolean is_overlap ( ) { Set < BrdItem > start_contacts = get_start_contacts ( ) ; Set < BrdItem > end_contacts = get_end_contacts ( ) ; for ( BrdItem end_contact : end_contacts ) { if ( start_contacts . contains ( end_contact ) ) return _BOOL ; } return _BOOL ; }
67500	static Object ensureNotNull ( Location location , Object value ) { if ( value == null ) { throw new EvalException ( location , _STR ) ; } return value ; }
34350	public static final ArrayList readListXml ( InputStream in ) throws XmlPullParserException , IOException { XmlPullParser parser = Xml . newPullParser ( ) ; parser . setInput ( in , null ) ; return ( ArrayList ) readValueXml ( parser , new String [ _NUM ] ) ; }
51680	private static String padRight ( String s , int minLength ) { return String . format ( _STR + minLength + _STR , s ) ; }
37859	@ Override public Enumeration < String > enumerateMeasures ( ) { Vector < String > newVector = new Vector < String > ( _NUM ) ; newVector . addElement ( _STR ) ; return newVector . elements ( ) ; }
35674	protected synchronized void onSendTaskCompleted ( RecordBuffer < R > buffer ) { logger . trace ( _STR , name ( ) , buffer ) ; activeSendTasks . decrementAndGet ( ) ; }
73165	public void addPreferencesButton ( ) { JButton prefsButton = new JButton ( _STR ) ; prefsButton . setHideActionText ( _BOOL ) ; prefsButton . setAction ( RasterPlotActions . getPropertiesDialogAction ( this ) ) ; buttonPanel . add ( prefsButton ) ; }
1289	public void clearUnused ( ConfigImpl config ) { SystemOut . printDate ( config . getOutWriter ( ) , _STR + size ( ) + _STR + maxSize + _STR ) ; if ( size ( ) > maxSize ) { Object [ ] keys = keys ( ) ; LongKeyList list = new LongKeyList ( ) ; for ( int i = _NUM ; i < keys . length ; i ++ ) { PageSource ps = getPageSource ( keys [ i ] , _BOOL ) ; long updateTime = ps . getLastAccessTime ( ) ; if ( updateTime + timeout < System . currentTimeMillis ( ) ) { long add = ( ( ps . getAccessCount ( ) - _NUM ) * _NUM ) ; if ( add > timeout ) add = timeout ; list . add ( updateTime + add , keys [ i ] ) ; } } while ( size ( ) > maxSize ) { Object key = list . shift ( ) ; if ( key == null ) break ; remove ( key ) ; } } }
66034	public static GridField [ ] createFields ( Properties ctx , int WindowNo , int TabNo , int AD_Tab_ID ) { ArrayList < GridFieldVO > listVO = new ArrayList < GridFieldVO > ( ) ; int AD_Window_ID = _NUM ; boolean readOnly = _BOOL ; String sql = GridFieldVO . getSQL ( ctx ) ; PreparedStatement pstmt = null ; try { pstmt = DB . prepareStatement ( sql , null ) ; pstmt . setInt ( _NUM , AD_Tab_ID ) ; ResultSet rs = pstmt . executeQuery ( ) ; while ( rs . next ( ) ) { GridFieldVO vo = GridFieldVO . create ( ctx , WindowNo , TabNo , AD_Window_ID , AD_Tab_ID , readOnly , rs ) ; listVO . add ( vo ) ; } rs . close ( ) ; pstmt . close ( ) ; pstmt = null ; } catch ( Exception e ) { log . log ( Level . SEVERE , sql , e ) ; } try { if ( pstmt != null ) pstmt . close ( ) ; pstmt = null ; } catch ( Exception e ) { pstmt = null ; } GridField [ ] retValue = new GridField [ listVO . size ( ) ] ; for ( int i = _NUM ; i < listVO . size ( ) ; i ++ ) retValue [ i ] = new GridField ( ( GridFieldVO ) listVO . get ( i ) ) ; return retValue ; }
48809	public ShortInterleavedRaster ( SampleModel sampleModel , DataBuffer dataBuffer , Point origin ) { this ( sampleModel , dataBuffer , new Rectangle ( origin . x , origin . y , sampleModel . getWidth ( ) , sampleModel . getHeight ( ) ) , origin , null ) ; }
25799	private void copyCarbonDataFileToCarbonStorePath ( String localFileName ) throws CarbonDataWriterException { long copyStartTime = System . currentTimeMillis ( ) ; LOGGER . info ( _STR + localFileName + _STR + carbonDataDirectoryPath ) ; try { CarbonFile localCarbonFile = FileFactory . getCarbonFile ( localFileName , FileFactory . getFileType ( localFileName ) ) ; String carbonFilePath = carbonDataDirectoryPath + localFileName . substring ( localFileName . lastIndexOf ( File . separator ) ) ; copyLocalFileToCarbonStore ( carbonFilePath , localFileName , CarbonCommonConstants . BYTEBUFFER_SIZE , getMaxOfBlockAndFileSize ( fileSizeInBytes , localCarbonFile . getSize ( ) ) ) ; } catch ( IOException e ) { throw new CarbonDataWriterException ( _STR ) ; } LOGGER . info ( _STR + localFileName + _STR + ( System . currentTimeMillis ( ) - copyStartTime ) ) ; }
35226	@ Override public boolean flingBackward ( Selector obj , boolean isVertical ) throws UiObjectNotFoundException { UiScrollable scrollable = new UiScrollable ( obj . toUiSelector ( ) ) ; if ( isVertical ) scrollable . setAsVerticalList ( ) ; else scrollable . setAsHorizontalList ( ) ; return scrollable . flingBackward ( ) ; }
75824	protected static double toDouble ( String s ) { try { return Double . parseDouble ( s ) ; } catch ( Exception e ) { TestCase . fail ( _STR + s + _STR + throwableToString ( e ) ) ; return Double . NaN ; } }
37030	public void addListener ( final IFilterPanelListener < T > listener ) { m_listeners . addListener ( listener ) ; }
20449	public void testmirror ( File orig , File origni , File truecolor ) { File mirror = TestSupport . addSuffixToName ( orig , _STR ) ; File recov = TestSupport . addSuffixToName ( orig , _STR ) ; long crc0 = _NUM ; boolean interlaced ; boolean palete ; { PngReader pngr = new PngReader ( orig ) ; PngWriter pngw = null ; try { if ( rand . nextBoolean ( ) ) pngr . setLineSetFactory ( ImageLineSetDefault . getFactoryByte ( ) ) ; palete = pngr . imgInfo . indexed ; pngr . prepareSimpleDigestComputation ( ) ; interlaced = pngr . isInterlaced ( ) ; pngw = new PngWriter ( mirror , pngr . imgInfo , _BOOL ) ; pngw . setFilterType ( FilterType . FILTER_CYCLIC ) ; pngw . copyChunksFrom ( pngr . getChunksList ( ) ) ; IImageLineSet < ? extends IImageLine > lines = pngr . readRows ( ) ; for ( int row = _NUM ; row < pngr . imgInfo . rows ; row ++ ) { mirrorLine ( lines . getImageLine ( row ) , pngr . imgInfo ) ; pngw . writeRow ( lines . getImageLine ( row ) ) ; } pngr . end ( ) ; crc0 = PngHelperInternal . getDigest ( pngr ) ; pngw . end ( ) ; } finally { pngr . close ( ) ; if ( pngw != null ) pngw . close ( ) ; } } { PngReader pngr2 = new PngReader ( mirror ) ; PngWriter pngw = null ; try { if ( pngr2 . imgInfo . bitDepth < _NUM && rand . nextBoolean ( ) ) pngr2 . setLineSetFactory ( ImageLineSetDefault . getFactoryByte ( ) ) ; pngw = new PngWriter ( recov , pngr2 . imgInfo , _BOOL ) ; pngw . setFilterType ( FilterType . FILTER_DEFAULT ) ; pngw . copyChunksFrom ( pngr2 . getChunksList ( ) ) ; for ( int row = _NUM ; row < pngr2 . imgInfo . rows ; row ++ ) { IImageLine line = pngr2 . readRow ( ) ; mirrorLine ( line , pngr2 . imgInfo ) ; pngw . writeRow ( line ) ; } pngr2 . end ( ) ; pngw . end ( ) ; } finally { pngr2 . close ( ) ; if ( pngw != null ) pngw . close ( ) ; } } if ( ! interlaced ) TestSupport . testCrcEquals ( recov , crc0 ) ; else TestSupport . testSameCrc ( recov , origni ) ; if ( interlaced ) additionalTestInterlaced ( orig , origni ) ; if ( palete && truecolor . exists ( ) ) additionalTestPalette ( orig , truecolor ) ; }
50891	public boolean isStable ( ) { return myFeatures . contains ( FEATURE_STABLE ) ; }
55794	public static void calcTextSize ( Paint paint , String demoText , FSize outputFSize ) { Rect r = mCalcTextSizeRect ; r . set ( _NUM , _NUM , _NUM , _NUM ) ; paint . getTextBounds ( demoText , _NUM , demoText . length ( ) , r ) ; outputFSize . width = r . width ( ) ; outputFSize . height = r . height ( ) ; }
75444	protected void performDefaults ( ) { super . performDefaults ( ) ; initializeValues ( ) ; verifyValidation ( ) ; }
31020	public String toString ( ) { final StringBuilder buf = new StringBuilder ( _STR ) ; for ( int i = _NUM , end = _pos - _NUM ; i < end ; i ++ ) { buf . append ( _data [ i ] ) ; buf . append ( _STR ) ; } if ( size ( ) > _NUM ) { buf . append ( _data [ _pos - _NUM ] ) ; } buf . append ( _STR ) ; return buf . toString ( ) ; }
11728	public static void write ( int x1 , int y1 , Image image , int image_width , int image_height , LinkProperties properties , DataOutputStream dos ) throws IOException , InterruptedException { int [ ] pixels = new int [ image_width * image_height ] ; PixelGrabber pixelgrabber = new PixelGrabber ( image , _NUM , _NUM , image_width , image_height , pixels , _NUM , image_width ) ; pixelgrabber . grabPixels ( ) ; LinkRaster . write ( x1 , y1 , image_width , image_height , pixels , properties , dos ) ; }
32496	@ SuppressWarnings ( _STR ) public void testProjectionPredicateDifferentClassLoaders ( ) throws Exception { final Ignite ignite3 = startGrid ( _NUM ) ; URL [ ] clsLdrUrls ; try { clsLdrUrls = new URL [ ] { new URL ( GridTestProperties . getProperty ( _STR ) ) } ; } catch ( MalformedURLException e ) { throw new RuntimeException ( _STR , e ) ; } ClassLoader ldr1 = new URLClassLoader ( clsLdrUrls , getClass ( ) . getClassLoader ( ) ) ; Class taskCls = ldr1 . loadClass ( _STR ) ; Class nodeFilterCls = ldr1 . loadClass ( _STR ) ; IgnitePredicate < ClusterNode > nodeFilter = ( IgnitePredicate < ClusterNode > ) nodeFilterCls . getConstructor ( UUID . class ) . newInstance ( ignite2 . cluster ( ) . localNode ( ) . id ( ) ) ; Map < UUID , Integer > ret = ( Map < UUID , Integer > ) executeAsync ( compute ( ignite1 . cluster ( ) . forPredicate ( nodeFilter ) ) , taskCls , null ) . get ( TASK_EXEC_TIMEOUT_MS ) ; assert ret != null ; assert ret . get ( ignite1 . cluster ( ) . localNode ( ) . id ( ) ) != null && ret . get ( ignite1 . cluster ( ) . localNode ( ) . id ( ) ) == _NUM : ret . get ( ignite1 . cluster ( ) . localNode ( ) . id ( ) ) ; assert ret . get ( ignite3 . cluster ( ) . localNode ( ) . id ( ) ) != null && ret . get ( ignite3 . cluster ( ) . localNode ( ) . id ( ) ) == _NUM : ret . get ( ignite3 . cluster ( ) . localNode ( ) . id ( ) ) ; }
718	public void stateChanged ( ChangeEvent evt ) { int scale = slider . getValue ( ) ; value . setText ( _STR + String . valueOf ( scale ) ) ; size . setText ( _STR + ( width * scale ) + _STR + ( height * scale ) + _STR ) ; preview . repaint ( ) ; }
9324	public static void writeToFile ( String content , File dstFile ) throws IOException { BufferedWriter bufferedWriter = new BufferedWriter ( new FileWriter ( dstFile , _BOOL ) ) ; bufferedWriter . write ( content ) ; bufferedWriter . close ( ) ; }
50358	public static boolean isFileURL ( URL url ) { String protocol = url . getProtocol ( ) ; return ( URL_PROTOCOL_FILE . equals ( protocol ) || URL_PROTOCOL_VFSFILE . equals ( protocol ) || URL_PROTOCOL_VFS . equals ( protocol ) ) ; }
14102	private void updateStatus ( String relayState , int currentStatus ) { Integer tmp = ( Integer ) currentStatusMap . get ( relayState ) ; if ( tmp != null ) { int previousStatus = tmp . intValue ( ) ; switch ( previousStatus ) { case LOGOUT_SUCCEEDED_STATUS : if ( currentStatus > previousStatus ) { currentStatusMap . put ( relayState , new Integer ( currentStatus ) ) ; } break ; case LOGOUT_FAILED_STATUS : if ( currentStatus < LOGOUT_FAILED_STATUS ) { currentStatusMap . put ( relayState , new Integer ( LOGOUT_PARTIAL_STATUS ) ) ; } break ; default : break ; } } else { currentStatusMap . put ( relayState , new Integer ( currentStatus ) ) ; } }
60637	public static int [ ] oidStrToInts ( String oid ) throws IOException { int length = oid . length ( ) ; if ( oid . charAt ( length - _NUM ) == _STR ) { throw new IOException ( _STR + oid ) ; } int [ ] result = new int [ length / _NUM + _NUM ] ; int number = _NUM ; for ( int i = _NUM ; i < length ; i ++ ) { int value = _NUM ; int pos = i ; for ( ; i < length ; i ++ ) { char ch = oid . charAt ( i ) ; if ( ( ch < _STR ) || ( ch > _STR ) ) { break ; } value = _NUM * value + ( ch - _STR ) ; } if ( i == pos ) { throw new IOException ( _STR + oid ) ; } result [ number ++ ] = value ; if ( i == length ) { break ; } char ch = oid . charAt ( i ) ; if ( ch != _STR ) { throw new IOException ( _STR + oid ) ; } } if ( number < _NUM ) { throw new IOException ( _STR + oid ) ; } return Arrays . copyOfRange ( result , _NUM , number ) ; }
14398	public static Set < String > listServers ( SSOToken ssoToken , String siteName ) throws SMSException , SSOException , ConfigurationException { Set < String > members = new HashSet < > ( ) ; String siteId = getSiteId ( ssoToken , siteName ) ; if ( siteId != null ) { Set < String > allServers = ServerConfiguration . getServers ( ssoToken ) ; for ( String svr : allServers ) { if ( ServerConfiguration . belongToSite ( ssoToken , svr , siteName ) ) { members . add ( svr ) ; } } } return members ; }
75708	public static GenericObjectEditorDialog createDialog ( Container parent ) { return createDialog ( parent , null ) ; }
20245	public static boolean containsInLineFeatures ( StyledLayerDescriptor sld ) { if ( sld != null ) { for ( StyledLayer layer : sld . layers ( ) ) { if ( layer instanceof UserLayer ) { UserLayer userLayer = ( UserLayer ) layer ; if ( userLayer . getInlineFeatureDatastore ( ) != null ) { return _BOOL ; } } } } return _BOOL ; }
48588	public byte decodeBuffer ( InputStream in ) [ ] throws IOException { ByteArrayOutputStream outStream = new ByteArrayOutputStream ( ) ; decodeBuffer ( in , outStream ) ; return ( outStream . toByteArray ( ) ) ; }
42266	public static void runFinalization ( ) { RUNTIME . runFinalization ( ) ; }
100	private void displayAllStringDefinedInStringXml ( ) { SimpleIconFontTextView textView = ( SimpleIconFontTextView ) findViewById ( R . id . text_view_1 ) ; List < String > list = new ArrayList < > ( ) ; list . add ( getString ( R . string . gems_logo ) ) ; String text = TextUtils . join ( _STR , list ) ; textView . setText ( text ) ; }
14038	public static void checkHTTPRequestLength ( HttpServletRequest request ) throws ServletException { int maxContentLength = SAMLUtils . getMaxContentLength ( ) ; if ( maxContentLength != _NUM ) { int length = request . getContentLength ( ) ; if ( length == - _NUM ) { throw new ServletException ( bundle . getString ( _STR ) ) ; } if ( length > maxContentLength ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + length ) ; } throw new ServletException ( bundle . getString ( _STR ) ) ; } } }
3141	public void addForeignKeyConstraint ( String name , String sourceField , String targetField , String targetTable ) { ForeignKeyConstraint foreignKey = new ForeignKeyConstraint ( name , sourceField , targetField , targetTable ) ; addForeignKeyConstraint ( foreignKey ) ; }
75368	@ Override public void onCreate ( Bundle savedInstanceState ) { super . onCreate ( savedInstanceState ) ; mHandler = new Handler ( ) ; setContentView ( R . layout . voice_recognition ) ; Button speakButton = ( Button ) findViewById ( R . id . btn_speak ) ; mList = ( ListView ) findViewById ( R . id . list ) ; mSupportedLanguageView = ( Spinner ) findViewById ( R . id . supported_languages ) ; PackageManager pm = getPackageManager ( ) ; List < ResolveInfo > activities = pm . queryIntentActivities ( new Intent ( RecognizerIntent . ACTION_RECOGNIZE_SPEECH ) , _NUM ) ; if ( activities . size ( ) != _NUM ) { speakButton . setOnClickListener ( this ) ; } else { speakButton . setEnabled ( _BOOL ) ; speakButton . setText ( _STR ) ; } refreshVoiceSettings ( ) ; }
62791	public void push ( Notification notification , NotificationResponseListener listener ) { final String notificationTopic = notification . getTopic ( ) ; final String topic = notificationTopic == null ? defaultTopic : notificationTopic ; Request req = Utils . buildRequest ( client , topic , notification , gateway ) ; semaphore . acquireUninterruptibly ( ) ; req . send ( new ResponseListener ( semaphore , notification , listener ) ) ; }
13542	private static void appendJSONPair ( StringBuilder json , String key , String value ) throws UnsupportedEncodingException { boolean isValueNumeric = _BOOL ; try { if ( value . equals ( _STR ) || ! value . endsWith ( _STR ) ) { Double . parseDouble ( value ) ; isValueNumeric = _BOOL ; } } catch ( NumberFormatException e ) { isValueNumeric = _BOOL ; } if ( json . charAt ( json . length ( ) - _NUM ) != _STR ) { json . append ( _STR ) ; } json . append ( escapeJSON ( key ) ) ; json . append ( _STR ) ; if ( isValueNumeric ) { json . append ( value ) ; } else { json . append ( escapeJSON ( value ) ) ; } }
34004	public void updateFromResource ( ) { for ( String resource : resources ) { InputStream is = ClassLoader . getSystemResourceAsStream ( resource ) ; LinkedHashMap < EntryType , LinkedHashMap < String , ConfigEntry > > parseResult = parse ( is ) ; for ( EntryType type : myMap . keySet ( ) ) { LinkedHashMap < String , ConfigEntry > dataMappings = myMap . get ( type ) ; LinkedHashMap < String , ConfigEntry > resourceMappings = parseResult . get ( type ) ; LinkedHashMap < String , ConfigEntry > tempMappings = new LinkedHashMap < String , ConfigEntry > ( ) ; LinkedHashSet < String > keys = new LinkedHashSet < String > ( ) ; keys . addAll ( dataMappings . keySet ( ) ) ; keys . addAll ( resourceMappings . keySet ( ) ) ; for ( String key : keys ) { if ( resourceMappings . containsKey ( key ) ) { tempMappings . put ( key , resourceMappings . get ( key ) ) ; } else { tempMappings . put ( key , dataMappings . get ( key ) ) ; } } myMap . put ( type , tempMappings ) ; } } }
86346	private void deselect ( final int index , final boolean shouldFireEvents ) { checkWidget ( ) ; if ( index < _NUM || index >= items . size ( ) ) { return ; } final DLItem item = selection . remove ( index ) ; if ( shouldFireEvents ) { fireSelectionEvent ( item ) ; } final List < DLItem > deselectedItems = new ArrayList < DLItem > ( ) ; item . setLastAction ( LAST_ACTION . DESELECTION ) ; deselectedItems . add ( item ) ; if ( shouldFireEvents ) { fireSelectionChangeEvent ( deselectedItems ) ; } redrawTables ( ) ; }
68374	public boolean isLeaf ( Object nd ) { Node node = ( Node ) nd ; return ! node . hasChildNodes ( ) ; }
32545	public void addListener ( Listener listener ) { mListeners . add ( listener ) ; notifyServiceDiscovered ( mMatchingDrones ) ; }
47497	@ Override boolean equals ( Object obj ) ;
52735	private double [ ] parseVector ( String s ) { String [ ] entries = WHITESPACE_PATTERN . split ( s ) ; double [ ] d = new double [ entries . length ] ; for ( int i = _NUM ; i < entries . length ; i ++ ) { try { d [ i ] = ParseUtil . parseDouble ( entries [ i ] ) ; } catch ( NumberFormatException e ) { throw new AbortException ( _STR ) ; } } return d ; }
27753	public void test_create_update ( ) throws IOException { final String id = _STR ; final Map < String , Object > metadata = new HashMap < String , Object > ( ) ; metadata . put ( FileMetadataSchema . ID , id ) ; metadata . put ( _STR , _STR ) ; final int version0 ; final long createTime0 ; final byte [ ] expected0 = new byte [ ] { _NUM , _NUM , _NUM } ; { version0 = repo . create ( metadata ) ; metadata . put ( FileMetadataSchema . VERSION , Integer . valueOf ( version0 ) ) ; assertEquals ( _STR , _NUM , version0 ) ; RepositoryDocumentImpl doc = ( RepositoryDocumentImpl ) repo . read ( id ) ; createTime0 = doc . getVersionCreateTime ( ) ; Map < String , Object > actual = doc . asMap ( ) ; assertEquals ( _STR , id , actual . get ( FileMetadataSchema . ID ) ) ; assertEquals ( _STR , version0 , actual . get ( FileMetadataSchema . VERSION ) ) ; assertEquals ( _STR , _STR , actual . get ( _STR ) ) ; assertEquals ( _STR , metadata . size ( ) , actual . size ( ) ) ; repo . copyStream ( id , version0 , new ByteArrayInputStream ( expected0 ) ) ; assertEquals ( _STR , expected0 , read ( repo . inputStream ( id , version0 ) ) ) ; } final int version1 ; final long createTime1 ; final byte [ ] expected1 = new byte [ ] { _NUM , _NUM , _NUM } ; { metadata . put ( _STR , _STR ) ; DocumentImpl doc1 = new DocumentImpl ( metadata ) ; doc1 . copyStream ( expected1 ) ; version1 = repo . update ( doc1 ) ; assertEquals ( _STR , _NUM , version1 ) ; metadata . put ( FileMetadataSchema . VERSION , Integer . valueOf ( version1 ) ) ; RepositoryDocumentImpl doc = ( RepositoryDocumentImpl ) repo . read ( id ) ; createTime1 = doc . getVersionCreateTime ( ) ; assertNotSame ( _STR , _NUM , createTime1 ) ; assertNotSame ( _STR , createTime0 , createTime1 ) ; Map < String , Object > actual = doc . asMap ( ) ; assertEquals ( _STR , id , actual . get ( FileMetadataSchema . ID ) ) ; assertEquals ( _STR , version1 , actual . get ( FileMetadataSchema . VERSION ) ) ; assertEquals ( _STR , _STR , actual . get ( _STR ) ) ; assertEquals ( _STR , metadata . size ( ) , actual . size ( ) ) ; assertEquals ( _STR , expected1 , read ( repo . inputStream ( id , version1 ) ) ) ; assertEquals ( _STR , new byte [ ] { } , read ( repo . inputStream ( id , version0 ) ) ) ; { ITPS tps = repo . readMetadata ( id , createTime1 - _NUM ) ; ITPV tpv = tps . get ( FileMetadataSchema . VERSION ) ; assertEquals ( _STR , null , tpv . getValue ( ) ) ; } } }
53091	@ Override public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeDouble ( knnDistance ) ; }
31798	public SessionWrapper ( Session ses ) { this . ses = ses ; this . time = System . currentTimeMillis ( ) ; }
35879	public static List < BatchResponse > postWithSingleRequest ( final RequestSpecification requestSpec , final ResponseSpecification responseSpec , final BatchRequest br ) { final List < BatchRequest > batchRequests = new ArrayList < > ( ) ; batchRequests . add ( br ) ; final String jsonifiedRequest = BatchHelper . toJsonString ( batchRequests ) ; final List < BatchResponse > response = BatchHelper . postBatchRequestsWithoutEnclosingTransaction ( requestSpec , responseSpec , jsonifiedRequest ) ; Assert . assertNotNull ( response ) ; Assert . assertTrue ( response . size ( ) > _NUM ) ; return response ; }
59889	public File programDirectory ( ) { return programDirectory ; }
74050	@ Override public void clearRouteSensors ( ) { _controlSensorList = new ArrayList < > ( ) ; }
19938	public static KEYSTORE_TYPE fromString ( String x ) throws ConfigurationException { for ( KEYSTORE_TYPE currentType : KEYSTORE_TYPE . values ( ) ) { if ( x . equalsIgnoreCase ( currentType . toString ( ) ) ) return currentType ; } throw new ConfigurationException ( MessageFormat . format ( _STR , x ) ) ; }
56383	public ObjectMapper nextLevel ( ObjectMapper level ) { ObjectMapper previous = levelStack . peek ( ) ; levelStack . push ( level ) ; return previous ; }
67837	protected static int toDigit ( final char ch , final int index ) throws HexDecodeException { final int digit = Character . digit ( ch , _NUM ) ; if ( digit == - _NUM ) { throw new HexDecodeException ( _STR + ch + _STR + index ) ; } return digit ; }
78324	public JSONObject toJson ( ) throws JSONException { JSONObject json = new JSONObject ( ) ; JSONArray jpods = new JSONArray ( ) ; for ( DiasporaPod pod : pods ) { jpods . put ( pod . toJson ( ) ) ; } json . put ( _STR , jpods ) ; json . put ( _STR , System . currentTimeMillis ( ) ) ; return json ; }
9599	public static KeyStore load ( File keyStoreFile , Password password ) throws CryptoException , FileNotFoundException { KeyStoreType keyStoreType = null ; try { keyStoreType = CryptoFileUtil . detectKeyStoreType ( new FileInputStream ( keyStoreFile ) ) ; } catch ( FileNotFoundException ex ) { throw ex ; } catch ( IOException ex ) { throw new CryptoException ( res . getString ( _STR ) , ex ) ; } if ( keyStoreType == null ) { return null ; } return load ( keyStoreFile , password , keyStoreType ) ; }
38757	@ Override public void removePropertyChangeListener ( PropertyChangeListener pcl ) { m_pcSupport . removePropertyChangeListener ( pcl ) ; }
34765	@ VisibleForTesting static boolean isPrecachingEnabled ( Context context ) { SharedPreferences prefs = PreferenceManager . getDefaultSharedPreferences ( context ) ; return prefs . getBoolean ( PREF_IS_PRECACHING_ENABLED , _BOOL ) ; }
77090	public void and ( LongBitSet other ) { int pos = Math . min ( numWords , other . numWords ) ; while ( -- pos >= _NUM ) { bits [ pos ] &= other . bits [ pos ] ; } if ( numWords > other . numWords ) { Arrays . fill ( bits , other . numWords , numWords , _NUM ) ; } }
48133	@ Override public boolean equals ( Object obj ) { if ( this == obj ) return _BOOL ; if ( ! ( obj instanceof PrincipalEntry ) ) return _BOOL ; PrincipalEntry that = ( PrincipalEntry ) obj ; return ( principalClass . equals ( that . principalClass ) && principalName . equals ( that . principalName ) ) ; }
76602	public boolean isValidLockdownProfile ( ) { try { return _BOOL ; } catch ( IllegalArgumentException e ) { Log . w ( TAG , _STR , e ) ; return _BOOL ; } }
48733	private int readServerResponse ( ) throws IOException { StringBuffer replyBuf = new StringBuffer ( _NUM ) ; int c ; int continuingCode = - _NUM ; int code ; String response ; serverResponse . setSize ( _NUM ) ; while ( _BOOL ) { while ( ( c = in . read ( ) ) != - _NUM ) { if ( c == _STR ) { if ( ( c = in . read ( ) ) != _STR ) { replyBuf . append ( _STR ) ; } } replyBuf . append ( ( char ) c ) ; if ( c == _STR ) { break ; } } response = replyBuf . toString ( ) ; replyBuf . setLength ( _NUM ) ; if ( logger . isLoggable ( PlatformLogger . Level . FINEST ) ) { logger . finest ( _STR + serverAddr + _STR + response ) ; } if ( response . length ( ) == _NUM ) { code = - _NUM ; } else { try { code = Integer . parseInt ( response . substring ( _NUM , _NUM ) ) ; } catch ( NumberFormatException e ) { code = - _NUM ; } catch ( StringIndexOutOfBoundsException e ) { continue ; } } serverResponse . addElement ( response ) ; if ( continuingCode != - _NUM ) { if ( code != continuingCode || ( response . length ( ) >= _NUM && response . charAt ( _NUM ) == _STR ) ) { continue ; } else { continuingCode = - _NUM ; break ; } } else if ( response . length ( ) >= _NUM && response . charAt ( _NUM ) == _STR ) { continuingCode = code ; continue ; } else { break ; } } return code ; }
25214	public static boolean isExtension ( String filename , String [ ] extensions ) { if ( filename == null ) { return _BOOL ; } if ( extensions == null || extensions . length == _NUM ) { return indexOfExtension ( filename ) == - _NUM ; } String fileExt = getExtension ( filename ) ; for ( String extension : extensions ) { if ( fileExt . equals ( extension ) ) { return _BOOL ; } } return _BOOL ; }
7238	public FromClause ( Stream streamOne , OuterJoinQualifier outerJoinQualifier , Stream streamTwo ) { this ( streamOne ) ; add ( streamTwo ) ; outerJoinQualifiers . add ( outerJoinQualifier ) ; }
24826	private static void decodeAnsiX12Segment ( BitSource bits , StringBuilder result ) throws FormatException { int [ ] cValues = new int [ _NUM ] ; do { if ( bits . available ( ) == _NUM ) { return ; } int firstByte = bits . readBits ( _NUM ) ; if ( firstByte == _NUM ) { return ; } parseTwoBytes ( firstByte , bits . readBits ( _NUM ) , cValues ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { int cValue = cValues [ i ] ; if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue < _NUM ) { result . append ( ( char ) ( cValue + _NUM ) ) ; } else if ( cValue < _NUM ) { result . append ( ( char ) ( cValue + _NUM ) ) ; } else { throw FormatException . getFormatInstance ( ) ; } } } while ( bits . available ( ) > _NUM ) ; }
79951	public static KdbDatabase createKdbDatabase ( Credentials credentials , KdbHeader kdbHeader , InputStream inputStream ) throws IOException { DataInput dataInput = new LittleEndianDataInputStream ( inputStream ) ; checkSignature ( dataInput ) ; deserializeHeader ( kdbHeader , dataInput ) ; InputStream decryptedInputStream = kdbHeader . createDecryptedInputStream ( credentials . getKey ( ) , inputStream ) ; MessageDigest digest = Encryption . getMessageDigestInstance ( ) ; DigestInputStream digestInputStream = new DigestInputStream ( decryptedInputStream , digest ) ; dataInput = new LittleEndianDataInputStream ( digestInputStream ) ; KdbDatabase kdbDatabase = new KdbDatabase ( ) ; KdbGroup lastGroup = ( KdbGroup ) kdbDatabase . getRootGroup ( ) ; for ( long group = _NUM ; group < kdbHeader . getGroupCount ( ) ; group ++ ) { lastGroup = deserializeGroup ( lastGroup , dataInput ) ; } for ( long entry = _NUM ; entry < kdbHeader . getEntryCount ( ) ; entry ++ ) { deserializeEntry ( kdbDatabase , dataInput ) ; } if ( ! Arrays . equals ( digest . digest ( ) , kdbHeader . getContentHash ( ) ) ) { throw new IllegalStateException ( _STR ) ; } digestInputStream . close ( ) ; return kdbDatabase ; }
15797	private DiffPart decodeAdd ( final int blockSize_S , final int blockSize_L ) throws UnsupportedEncodingException , DecodingException { if ( blockSize_S < _NUM || blockSize_L < _NUM ) { throw new DecodingException ( _STR + blockSize_S + _STR + blockSize_L ) ; } int s = r . read ( blockSize_S ) ; int l = r . read ( blockSize_L ) ; ByteArrayOutputStream output = new ByteArrayOutputStream ( ) ; for ( int i = _NUM ; i < l ; i ++ ) { output . write ( r . readByte ( ) ) ; } DiffPart part = new DiffPart ( DiffAction . INSERT ) ; part . setStart ( s ) ; part . setText ( output . toString ( WIKIPEDIA_ENCODING ) ) ; return part ; }
39249	public void sort ( ) { Arrays . sort ( V , _NUM , size ( ) ) ; }
16822	public void rebuildPanel ( ) { if ( activeWorker != null && ! activeWorker . isDone ( ) ) { activeWorker . cancel ( _BOOL ) ; } panelImages . removeAll ( ) ; panelImages . revalidate ( ) ; scrollPane . repaint ( ) ; activeWorker = new ImageLoader ( mediaFiles ) ; activeWorker . execute ( ) ; }
20443	protected void processBytes ( byte [ ] buf , int off , int len ) { nBytesIn += len ; if ( len < _NUM || state . isDone ( ) ) return ; if ( state == State . ROW_READY ) throw new PngjInputException ( _STR ) ; if ( inf . needsDictionary ( ) || ! inf . needsInput ( ) ) throw new RuntimeException ( _STR ) ; inf . setInput ( buf , off , len ) ; if ( isCallbackMode ( ) ) { while ( inflateData ( ) ) { int nextRowLen = processRowCallback ( ) ; prepareForNextRow ( nextRowLen ) ; if ( isDone ( ) ) processDoneCallback ( ) ; } } else inflateData ( ) ; }
75748	@ Override protected String toString ( File obj ) { return obj . getAbsolutePath ( ) ; }
31377	public final void goToNextPage ( ) { final boolean isLastPage = viewPager . getCurrentItem ( ) == ( pages . size ( ) - _NUM ) ; if ( ! isLastPage ) { viewPager . setCurrentItem ( viewPager . getCurrentItem ( ) + _NUM , _BOOL ) ; } }
34941	private static InputStream nullInputStream ( ) throws NullPointerException { if ( currentTimeMillis ( ) > _NUM ) { return null ; } throw new NullPointerException ( ) ; }
41046	public List < TypeId < ? > > asList ( ) { return Collections . unmodifiableList ( Arrays . asList ( types ) ) ; }
9092	private static void deleteRules ( List < String > batchList , List < Rule > rulesToDelete ) { String deleteStatement = _STR + RULES_TABLE + _STR ; for ( Rule rule : rulesToDelete ) { batchList . add ( String . format ( deleteStatement , rule . getUid ( ) ) ) ; } }
16259	public boolean isVisited ( Object element ) { return myVisitedElements . containsKey ( element ) ; }
68662	public AwsIotConnection ( AbstractAwsIotClient client ) { this . client = client ; }
53676	public static < T > CompletableFuture < T > exceptionallyCompletedFuture ( Throwable throwable ) { final CompletableFuture < T > future = new CompletableFuture < T > ( ) ; future . completeExceptionally ( throwable ) ; return future ; }
66751	protected void initForecastErrors ( ArrayList < Float > model , TimeSeries . DataSequence data ) { double sumErr = _NUM ; double sumAbsErr = _NUM ; double sumAbsPercentErr = _NUM ; double sumErrSquared = _NUM ; int processedPoints = _NUM ; int n = data . size ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { double error = model . get ( i ) - data . get ( i ) . value ; sumErr += error ; sumAbsErr += Math . abs ( error ) ; sumAbsPercentErr += Math . abs ( error / data . get ( i ) . value ) ; sumErrSquared += error * error ; processedPoints ++ ; } this . bias = sumErr / processedPoints ; this . mad = sumAbsErr / processedPoints ; this . mape = sumAbsPercentErr / processedPoints ; this . mse = sumErrSquared / processedPoints ; this . sae = sumAbsErr ; errorsInit = _BOOL ; }
65122	public boolean checkModifiers ( MouseEvent e ) { return e . getModifiers ( ) == modifiers ; }
85403	public void emitRetainedVars ( GenerateJsVisitor gen ) { if ( ! retainedVars . isEmpty ( ) ) { gen . out ( _STR ) ; boolean first = _BOOL ; for ( String varName : retainedVars ) { if ( ! first ) { gen . out ( _STR ) ; } first = _BOOL ; gen . out ( varName ) ; } gen . endLine ( _BOOL ) ; retainedVars . clear ( ) ; } }
51442	public URI ( String scheme , String authority , String path , String query , String fragment ) throws URISyntaxException { if ( scheme != null && path != null && ! path . isEmpty ( ) && path . charAt ( _NUM ) != _STR ) { throw new URISyntaxException ( path , _STR ) ; } StringBuilder uri = new StringBuilder ( ) ; if ( scheme != null ) { uri . append ( scheme ) ; uri . append ( _STR ) ; } if ( authority != null ) { uri . append ( _STR ) ; AUTHORITY_ENCODER . appendEncoded ( uri , authority ) ; } if ( path != null ) { PATH_ENCODER . appendEncoded ( uri , path ) ; } if ( query != null ) { uri . append ( _STR ) ; ALL_LEGAL_ENCODER . appendEncoded ( uri , query ) ; } if ( fragment != null ) { uri . append ( _STR ) ; ALL_LEGAL_ENCODER . appendEncoded ( uri , fragment ) ; } parseURI ( uri . toString ( ) , _BOOL ) ; }
16666	public List < StructuredTranslation > KbestExtractOnHG ( HyperGraph hg , int topN ) { resetState ( ) ; if ( hg == null || hg . goalNode == null ) { return emptyList ( ) ; } final List < StructuredTranslation > kbest = new ArrayList < > ( topN ) ; for ( int k = _NUM ; k <= topN ; k ++ ) { StructuredTranslation translation = getKthStructuredTranslation ( hg . goalNode , k ) ; if ( translation == null ) { break ; } kbest . add ( translation ) ; } return kbest ; }
57734	@ Override public int read ( ) throws IOException { synchronized ( lock ) { checkNotClosed ( ) ; if ( pos != count ) { return str . charAt ( pos ++ ) ; } return - _NUM ; } }
21981	public static boolean isSnapshotFullCopySupported ( URI blockSnapURI , DbClient dbClient ) { BlockSnapshot blockObj = dbClient . queryObject ( BlockSnapshot . class , blockSnapURI ) ; StorageSystem storage = dbClient . queryObject ( StorageSystem . class , blockObj . getStorageController ( ) ) ; return ( storage != null && ( storage . deviceIsType ( Type . openstack ) || storage . deviceIsType ( Type . vnxblock ) || storage . deviceIsType ( Type . ibmxiv ) || storage . deviceIsType ( Type . vmax ) ) ) ; }
83428	public Iterable < ServiceDescriptor > listServices ( ) { ArrayList < ServiceDescriptor > serviceDescriptors = new ArrayList < ServiceDescriptor > ( ) ; for ( FileDescriptor fileDescriptor : fileDescriptors ) { serviceDescriptors . addAll ( fileDescriptor . getServices ( ) ) ; } return serviceDescriptors ; }
72161	private String stripCodeValueSentences ( String string ) { return string . replaceAll ( _STR , _STR ) ; }
18740	public void testDivideRoundHalfEvenNeg2 ( ) { String a = _STR ; int aScale = _NUM ; String b = _STR ; int bScale = _NUM ; String c = _STR ; int resScale = - _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_HALF_EVEN ) ; assertEquals ( _STR , c , result . toString ( ) ) ; assertEquals ( _STR , resScale , result . scale ( ) ) ; }
53170	public static double quantile ( double p , double alpha , double beta ) { if ( Double . isNaN ( alpha ) || Double . isNaN ( beta ) || Double . isNaN ( p ) || alpha < _NUM || beta < _NUM ) { return Double . NaN ; } if ( p < _NUM || p > _NUM ) { return Double . NaN ; } if ( p == _NUM ) { return _NUM ; } if ( p == _NUM ) { return _NUM ; } if ( p > _NUM ) { return _NUM - rawQuantile ( _NUM - p , beta , alpha , logBeta ( beta , alpha ) ) ; } else { return rawQuantile ( p , alpha , beta , logBeta ( alpha , beta ) ) ; } }
22	public boolean validate ( String cert , String signedData , String signature ) throws NoSuchAlgorithmException , IOException , Exception { byte [ ] certBytes = Base64 . decode ( cert ) ; byte [ ] signedDataBytes = Base64 . decode ( signedData ) ; byte [ ] signatureBytes = Base64 . decode ( signature ) ; return validate ( certBytes , signedDataBytes , signatureBytes ) ; }
31843	private SharedDeployment createNewDeployment ( GridDeploymentMetadata meta , boolean isCache ) { assert Thread . holdsLock ( mux ) ; assert meta . parentLoader ( ) == null ; IgniteUuid ldrId = IgniteUuid . fromUuid ( ctx . localNodeId ( ) ) ; GridDeploymentClassLoader clsLdr ; if ( meta . deploymentMode ( ) == CONTINUOUS || meta . participants ( ) == null ) { clsLdr = new GridDeploymentClassLoader ( ldrId , meta . userVersion ( ) , meta . deploymentMode ( ) , _BOOL , ctx , ctx . config ( ) . getClassLoader ( ) != null ? ctx . config ( ) . getClassLoader ( ) : U . gridClassLoader ( ) , meta . classLoaderId ( ) , meta . senderNodeId ( ) , comm , ctx . config ( ) . getNetworkTimeout ( ) , log , ctx . config ( ) . getPeerClassLoadingLocalClassPathExclude ( ) , ctx . config ( ) . getPeerClassLoadingMissedResourcesCacheSize ( ) , meta . deploymentMode ( ) == CONTINUOUS , _BOOL ) ; if ( meta . participants ( ) != null ) for ( Map . Entry < UUID , IgniteUuid > e : meta . participants ( ) . entrySet ( ) ) clsLdr . register ( e . getKey ( ) , e . getValue ( ) ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + _STR + clsLdr + _STR + meta + _STR ) ; } else { assert meta . deploymentMode ( ) == SHARED ; clsLdr = new GridDeploymentClassLoader ( ldrId , meta . userVersion ( ) , meta . deploymentMode ( ) , _BOOL , ctx , U . gridClassLoader ( ) , meta . participants ( ) , comm , ctx . config ( ) . getNetworkTimeout ( ) , log , ctx . config ( ) . getPeerClassLoadingLocalClassPathExclude ( ) , ctx . config ( ) . getPeerClassLoadingMissedResourcesCacheSize ( ) , _BOOL , _BOOL ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + _STR + clsLdr + _STR + meta + _STR ) ; } SharedDeployment dep = new SharedDeployment ( meta . deploymentMode ( ) , clsLdr , ldrId , meta . userVersion ( ) , meta . alias ( ) ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + dep ) ; if ( isCache ) { List < SharedDeployment > deps = F . addIfAbsent ( cache , meta . userVersion ( ) , new LinkedList < SharedDeployment > ( ) ) ; assert deps != null ; deps . add ( dep ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + cache ) ; } return dep ; }
61053	public int size ( ) { return seq . size ( ) ; }
5288	public void testAddServletRunAsRole ( ) throws Exception { String xml = WEBAPP_TEST_HEADER + _STR + _STR + _STR + _STR + _STR ; WebXml webXml = WebXmlIo . parseWebXml ( new ByteArrayInputStream ( xml . getBytes ( _STR ) ) , getEntityResolver ( ) ) ; WebXmlUtils . addServletRunAsRoleName ( webXml , _STR , _STR ) ; String roleName = WebXmlUtils . getServletRunAsRoleName ( webXml , _STR ) ; assertEquals ( _STR , roleName ) ; }
18681	public void testCase15 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . subtract ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( - _NUM , result . signum ( ) ) ; }
77204	public MultiTermQuery ( final String field ) { this . field = Objects . requireNonNull ( field , _STR ) ; }
22783	public static void printLine ( Object message ) { if ( ! isDisabled ( ) ) { printLine ( String . valueOf ( message ) ) ; } }
8980	public void accumulate ( TaggedLogAPIEntity entity ) throws Exception { AggregateAPIEntity current = root ; for ( String groupby : groupbys ) { String tagv = locateGroupbyField ( groupby , entity ) ; if ( tagv == null || tagv . isEmpty ( ) ) { tagv = UNASSIGNED_GROUPBY_ROOT_FIELD_NAME ; } Map < String , AggregateAPIEntity > children = current . getEntityList ( ) ; if ( children . get ( tagv ) == null ) { children . put ( tagv , factory . create ( ) ) ; current . setNumDirectDescendants ( current . getNumDirectDescendants ( ) + _NUM ) ; } AggregateAPIEntity child = children . get ( tagv ) ; if ( counting ) count ( child ) ; for ( String sumFunctionField : sumFunctionFields ) { sum ( child , entity , sumFunctionField ) ; } current = child ; } }
69298	public void testInvalidXml ( ) throws Exception { testInvalidGpx ( INVALID_XML_GPX ) ; }
66834	public String toString ( boolean expand ) { StringBuilder acc = new StringBuilder ( ) ; toString ( acc , _NUM , expand ) ; return acc . toString ( ) ; }
35296	public static boolean isAccessorPair ( TMember member , TMember member2 ) { return ( member instanceof TGetter && member2 instanceof TSetter ) || ( member instanceof TSetter && member2 instanceof TGetter ) ; }
30059	public static DateFormat createUTCDateFormatter ( String dateFormat ) { DateFormat formatter = new SimpleDateFormat ( dateFormat ) ; formatter . setTimeZone ( TimeZone . getTimeZone ( _STR ) ) ; return formatter ; }
83068	public void writeLinkedKml ( final String filename , final KmlType kml ) { if ( filename . equals ( _STR ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( filename . equals ( _STR ) ) { throw new IllegalArgumentException ( _STR ) ; } writeKml ( filename , kml ) ; }
26865	String destinationFilePath ( ) { return destinationFilePath ; }
49451	@ Override public void refreshUsersOrGroupsListFromServer ( ) { showLoadingDialog ( getString ( R . string . common_loading ) ) ; GetShareWithUsersAsyncTask getTask = new GetShareWithUsersAsyncTask ( this ) ; Object [ ] params = { getFile ( ) , getAccount ( ) , getStorageManager ( ) } ; getTask . execute ( params ) ; }
8551	public BootPanel ( ) { initComponents ( ) ; }
50240	private List < Header > defaultHeaders ( ) { DateFormat dateFormat = new SimpleDateFormat ( _STR ) ; List < Header > headers = new ArrayList < > ( ) ; headers . add ( new BasicHeader ( _STR , dateFormat . format ( new Date ( ) ) ) ) ; return headers ; }
54138	public AemParsys clear ( ) { List < WebElement > list = currentScope . findElements ( By . cssSelector ( SELECTOR_FOR_COMPONENT_IN_PARSYS ) ) ; list . forEach ( null ) ; return this ; }
76002	protected RequestHandle sendRequest ( DefaultHttpClient client , HttpContext httpContext , HttpUriRequest uriRequest , String contentType , ResponseHandlerInterface responseHandler , Context context ) { if ( contentType != null ) { uriRequest . setHeader ( _STR , contentType ) ; } responseHandler . setRequestHeaders ( uriRequest . getAllHeaders ( ) ) ; responseHandler . setRequestURI ( uriRequest . getURI ( ) ) ; Future < ? > request = threadPool . submit ( new AsyncHttpRequest ( client , httpContext , uriRequest , responseHandler ) ) ; if ( context != null ) { List < WeakReference < Future < ? > > > requestList = requestMap . get ( context ) ; if ( requestList == null ) { requestList = new LinkedList < WeakReference < Future < ? > > > ( ) ; requestMap . put ( context , requestList ) ; } requestList . add ( new WeakReference < Future < ? > > ( request ) ) ; } return new RequestHandle ( request ) ; }
69124	private void registerNewClient ( JsonObject jData ) { Client newClient = gson . fromJson ( jData , Client . class ) ; if ( newClient . isValid ( ) ) { addClient ( newClient ) ; broadcastNewClient ( newClient ) ; sendClientList ( newClient ) ; } else { logger . log ( Level . WARNING , _STR ) ; } }
43970	@ Override public void parse ( InputStream in , String baseURI ) throws IOException , RDFParseException , RDFHandlerException { if ( in == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( baseURI == null ) { throw new IllegalArgumentException ( _STR ) ; } InputSource inputSource = new InputSource ( new BOMInputStream ( in , _BOOL ) ) ; inputSource . setSystemId ( baseURI ) ; parse ( inputSource ) ; }
4696	public static Date parseDate ( String dateValue , Collection dateFormats ) throws DateParseException { if ( dateValue == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( dateFormats == null ) { dateFormats = DEFAULT_PATTERNS ; } if ( dateValue . length ( ) > _NUM && dateValue . startsWith ( _STR ) && dateValue . endsWith ( _STR ) ) { dateValue = dateValue . substring ( _NUM , dateValue . length ( ) - _NUM ) ; } SimpleDateFormat dateParser = null ; final Iterator formatIter = dateFormats . iterator ( ) ; while ( formatIter . hasNext ( ) ) { final String format = ( String ) formatIter . next ( ) ; if ( dateParser == null ) { dateParser = new SimpleDateFormat ( format , Locale . US ) ; dateParser . setTimeZone ( TimeZone . getTimeZone ( _STR ) ) ; } else { dateParser . applyPattern ( format ) ; } try { return dateParser . parse ( dateValue ) ; } catch ( final ParseException pe ) { } } throw new DateParseException ( _STR + dateValue ) ; }
24611	public JSONObject remove ( String name ) { if ( name == null ) { throw new NullPointerException ( _STR ) ; } int index = indexOf ( name ) ; if ( index != - _NUM ) { table . remove ( index ) ; names . remove ( index ) ; values . remove ( index ) ; } return this ; }
54859	EdgeMap < Block > findLoops ( Deque < Block > code , Map < Block , Block > idom , SetMap < Block , Edge > pred ) { EdgeMap < Block > loops = new EdgeMap < Block > ( ) ; for ( Block b : code ) for ( Edge s : b . succ ( ) ) if ( isLoop ( s , idom ) ) { verboseStatus ( _STR + s ) ; Block h = s . to ; Set < Block > loop = loops . get ( h ) ; Set < Block > work = new TreeSet < Block > ( ) ; for ( Edge p : pred . get ( h ) ) { if ( isLoop ( p , idom ) && ! loop . contains ( p . from ) && p . from != h ) { loop . add ( p . from ) ; work . add ( p . from ) ; } } while ( ! work . isEmpty ( ) ) { Block x = getBlock ( work ) ; for ( Edge p : pred . get ( x ) ) { if ( p . from != h && ! loop . contains ( p . from ) ) { loop . add ( p . from ) ; work . add ( p . from ) ; } } } } return loops ; }
73744	public int [ ] readLine ( ) { int record [ ] = new int [ MAX_LEN ] ; int checksum = _NUM ; try { while ( ( ( charIn = buffIn . read ( ) ) == _NUM ) || ( charIn == _NUM ) ) { } if ( charIn != _STR ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + lineNo ) ; } return new int [ ] { - _NUM } ; } } catch ( IOException e ) { JOptionPane . showMessageDialog ( this , _STR , _STR , JOptionPane . ERROR_MESSAGE ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + e . toString ( ) ) ; } } record [ LEN ] = rdHexByte ( ) ; checksum += record [ LEN ] ; record [ ADDRH ] = rdHexByte ( ) ; checksum += record [ ADDRH ] ; record [ ADDRL ] = rdHexByte ( ) ; checksum += record [ ADDRL ] ; record [ TYPE ] = rdHexByte ( ) ; checksum += record [ TYPE ] ; address = ( address & _NUM ) + record [ ADDRH ] * _NUM + record [ ADDRL ] ; type = record [ TYPE ] ; if ( type != END ) { len = record [ LEN ] ; for ( int i = _NUM ; i <= len ; i ++ ) { record [ TYPE + i ] = rdHexByte ( ) ; checksum += record [ TYPE + i ] ; } } int fileCheck = rdHexByte ( ) ; if ( ( ( checksum + fileCheck ) & _NUM ) != _NUM ) { log . error ( _STR + lineNo ) ; } lineNo ++ ; return record ; }
50544	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
31752	private void generateHiveTestFiles ( ) throws FileNotFoundException { try ( PrintWriter writerA = new PrintWriter ( new File ( testWorkDir , _STR ) ) ; PrintWriter writerB = new PrintWriter ( new File ( testWorkDir , _STR ) ) ) { char sep = _STR ; int idB = _NUM ; int idA = _NUM ; int v = _NUM ; for ( int i = _NUM ; i < _NUM ; i ++ ) { writerA . print ( idA ++ ) ; writerA . print ( sep ) ; writerA . println ( idB ) ; writerB . print ( idB ++ ) ; writerB . print ( sep ) ; writerB . println ( v += _NUM ) ; writerB . print ( idB ++ ) ; writerB . print ( sep ) ; writerB . println ( v += _NUM ) ; } writerA . flush ( ) ; writerB . flush ( ) ; } }
74365	public void renameEditorPanel ( Editor panel ) { if ( panelsList . size ( ) == _NUM ) { return ; } for ( int i = _NUM ; i < panelsList . size ( ) ; i ++ ) { Object o = panelsList . get ( i ) ; if ( o == panel ) { JCheckBoxMenuItem r = ( JCheckBoxMenuItem ) panelsSubMenu . getItem ( i ) ; r . setText ( panel . getTitle ( ) ) ; return ; } } }
80901	private boolean fitsAsSingleLine ( int col ) { return ( col + singleLineWidth ( ) <= PcalTLAGen . wrapColumn ) || ( bodyFormulas . sf == null && ( prcdFormulas == null || prcdFormulas . size ( ) == _NUM ) ) ; }
1666	@ Override protected void before ( ) throws Throwable { previousThreads = Thread . getAllStackTraces ( ) ; }
69048	public void sphericalToWorld ( Vector3 vec ) { if ( pjUnprojected == null ) { String projStr = _STR + projInfo . getSemiMajorAxis ( ) + _STR + projInfo . getSemiMinorAxis ( ) + _STR ; pjUnprojected = Proj4 . newInstance ( projStr ) ; } if ( pjProjected == null ) { pjProjected = Proj4 . newInstance ( proj4String ) ; } try { vec . toArray ( coord ) ; coord [ _NUM ] = Math . toRadians ( coord [ _NUM ] ) ; coord [ _NUM ] = Math . toRadians ( coord [ _NUM ] ) ; pjUnprojected . transform ( pjProjected , coord ) ; vec . setX ( coord [ _NUM ] ) ; vec . setY ( coord [ _NUM ] ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
17855	public String replace ( CharSequence target , CharSequence replacement ) { if ( target == null ) { throw new NullPointerException ( _STR ) ; } if ( replacement == null ) { throw new NullPointerException ( _STR ) ; } String targetString = target . toString ( ) ; int matchStart = indexOf ( targetString , _NUM ) ; if ( matchStart == - _NUM ) { return this ; } String replacementString = replacement . toString ( ) ; int targetLength = targetString . length ( ) ; if ( targetLength == _NUM ) { int resultLength = count + ( count + _NUM ) * replacementString . length ( ) ; StringBuilder result = new StringBuilder ( resultLength ) ; result . append ( replacementString ) ; int end = offset + count ; for ( int i = offset ; i != end ; ++ i ) { result . append ( value [ i ] ) ; result . append ( replacementString ) ; } return result . toString ( ) ; } StringBuilder result = new StringBuilder ( count ) ; int searchStart = _NUM ; do { result . append ( value , offset + searchStart , matchStart - searchStart ) ; result . append ( replacementString ) ; searchStart = matchStart + targetLength ; } while ( ( matchStart = indexOf ( targetString , searchStart ) ) != - _NUM ) ; result . append ( value , offset + searchStart , count - searchStart ) ; return result . toString ( ) ; }
81978	public static String encodeUrl ( final String str ) { return encode ( str , _STR ) ; }
48003	public void drawRenderedImage ( RenderedImage img , AffineTransform xform ) { if ( img == null ) { return ; } mPrintMetrics . drawImage ( this , img ) ; mDrawingArea . addInfinite ( ) ; }
6334	private long buildSize ( int durationInSeconds , LinkInfo linfo ) { long result = - _NUM ; double bitRateSum = _NUM ; switch ( linfo . fmt ) { case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM + _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM / _NUM ; break ; case _NUM : bitRateSum = _NUM / _NUM ; break ; } bitRateSum = bitRateSum * _NUM * _NUM ; result = ( long ) ( Math . ceil ( ( bitRateSum * durationInSeconds ) / _NUM ) ) ; return result ; }
57339	private void skipToEndOfLine ( ) { for ( ; pos < in . length ( ) ; pos ++ ) { char c = in . charAt ( pos ) ; if ( c == _STR || c == _STR ) { pos ++ ; break ; } } }
52170	public IndependenceTest indTestSubset ( List vars ) { return null ; }
25127	@ Override public void actOn ( File f ) { BufferedReader reader = null ; try { reader = new BufferedReader ( new FileReader ( f ) ) ; announceSeedsFromReader ( reader ) ; } catch ( FileNotFoundException fnf ) { logger . log ( Level . SEVERE , _STR , fnf ) ; } finally { IOUtils . closeQuietly ( reader ) ; } }
69106	public static String formatMillis ( int millis ) { String result = _STR ; int hr = millis / _NUM ; millis %= _NUM ; int min = millis / _NUM ; millis %= _NUM ; int sec = millis / _NUM ; if ( hr > _NUM ) { result += hr + _STR ; } if ( min >= _NUM ) { if ( min > _NUM ) { result += min + _STR ; } else { result += _STR + min + _STR ; } } if ( sec > _NUM ) { result += sec ; } else { result += _STR + sec ; } return result ; }
16835	public void addPropertyChangeListener ( String propertyName , PropertyChangeListener listener ) { propertyChangeSupport . addPropertyChangeListener ( propertyName , listener ) ; }
46680	public File createNewFolder ( File containingDir ) throws IOException { if ( containingDir == null ) { throw new IOException ( _STR ) ; } File newFolder = createFileObject ( containingDir , newFolderString ) ; int i = _NUM ; while ( newFolder . exists ( ) && i < _NUM ) { newFolder = createFileObject ( containingDir , MessageFormat . format ( newFolderNextString , new Integer ( i ) ) ) ; i ++ ; } if ( newFolder . exists ( ) ) { throw new IOException ( _STR + newFolder . getAbsolutePath ( ) ) ; } else { newFolder . mkdirs ( ) ; } return newFolder ; }
78755	public ResourcesPoet addTypedArray ( String name , @ NotNull List < String > values ) { Element element = document . createElement ( _STR ) ; element . setAttribute ( _STR , name ) ; for ( String value : values ) { Element valueElement = document . createElement ( _STR ) ; valueElement . appendChild ( document . createTextNode ( value ) ) ; element . appendChild ( valueElement ) ; } resourceElement . appendChild ( element ) ; return this ; }
64504	public boolean addSubAction ( final ConfAction actionConf ) throws GeneralException , ConfigurationException { if ( actionConf . getType ( ) != null ) { final SubAction sub = SubAction . factory ( actionConf . getType ( ) , actionConf ) ; if ( sub == null ) { if ( Cfg . DEBUG ) { Check . log ( TAG + _STR + actionConf . getType ( ) ) ; } return _BOOL ; } list . add ( sub ) ; if ( sub instanceof SubActionSlow ) { setQueue ( MAIN_QUEUE ) ; } return _BOOL ; } else { if ( Cfg . DEBUG ) { Check . log ( TAG + _STR ) ; } return _BOOL ; } }
3360	void fillEntryTree ( Set < PageLeafEntry > entries , Row row ) { int ptr = _rowHead ; byte [ ] buffer = _buffer ; while ( ptr < BLOCK_SIZE ) { int code = buffer [ ptr ] & CODE_MASK ; int len = getLength ( code , row ) ; if ( code == INSERT || code == REMOVE ) { PageLeafEntry entry = new PageLeafEntry ( this , row , ptr , len , code ) ; entries . add ( entry ) ; } ptr += len ; } }
22968	public static < S > boolean containsAtleastOne ( Collection < S > left , Collection < S > right ) { if ( left == null || right == null ) { return _BOOL ; } for ( S id : left ) { if ( right . contains ( id ) ) { return _BOOL ; } } return _BOOL ; }
44772	private boolean processKeyUp ( int keyCode ) { if ( keyCode == KeyEvent . KEYCODE_ESCAPE || keyCode == KeyEvent . KEYCODE_BACK ) { dismiss ( ) ; return _BOOL ; } else if ( keyCode == KeyEvent . KEYCODE_TAB ) { if ( mInKbMode ) { if ( isTypedTimeFullyLegal ( ) ) { finishKbMode ( _BOOL ) ; } return _BOOL ; } } else if ( keyCode == KeyEvent . KEYCODE_ENTER ) { if ( mInKbMode ) { if ( ! isTypedTimeFullyLegal ( ) ) { return _BOOL ; } finishKbMode ( _BOOL ) ; } if ( mCallback != null ) { mCallback . onTimeSet ( mTimePicker , mTimePicker . getHours ( ) , mTimePicker . getMinutes ( ) ) ; } dismiss ( ) ; return _BOOL ; } else if ( keyCode == KeyEvent . KEYCODE_DEL ) { if ( mInKbMode ) { if ( ! mTypedTimes . isEmpty ( ) ) { int deleted = deleteLastTypedKey ( ) ; String deletedKeyStr ; if ( deleted == getAmOrPmKeyCode ( AM ) ) { deletedKeyStr = mAmText ; } else if ( deleted == getAmOrPmKeyCode ( PM ) ) { deletedKeyStr = mPmText ; } else { deletedKeyStr = String . format ( _STR , getValFromKeyCode ( deleted ) ) ; } Utils . tryAccessibilityAnnounce ( mTimePicker , String . format ( mDeletedKeyFormat , deletedKeyStr ) ) ; updateDisplay ( _BOOL ) ; } } } else if ( keyCode == KeyEvent . KEYCODE_0 || keyCode == KeyEvent . KEYCODE_1 || keyCode == KeyEvent . KEYCODE_2 || keyCode == KeyEvent . KEYCODE_3 || keyCode == KeyEvent . KEYCODE_4 || keyCode == KeyEvent . KEYCODE_5 || keyCode == KeyEvent . KEYCODE_6 || keyCode == KeyEvent . KEYCODE_7 || keyCode == KeyEvent . KEYCODE_8 || keyCode == KeyEvent . KEYCODE_9 || ( ! mIs24HourMode && ( keyCode == getAmOrPmKeyCode ( AM ) || keyCode == getAmOrPmKeyCode ( PM ) ) ) ) { if ( ! mInKbMode ) { if ( mTimePicker == null ) { Log . e ( TAG , _STR ) ; return _BOOL ; } mTypedTimes . clear ( ) ; tryStartingKbMode ( keyCode ) ; return _BOOL ; } if ( addKeyIfLegal ( keyCode ) ) { updateDisplay ( _BOOL ) ; } return _BOOL ; } return _BOOL ; }
19202	public void assertDurationIsInRange ( long expectedMillis ) { long minimum = ( long ) ( ( double ) expectedMillis * _NUM ) ; long maximum = Math . max ( ( long ) ( ( double ) expectedMillis * _NUM ) , _NUM ) ; long waitMillis = Math . max ( expectedMillis * _NUM , _NUM ) ; long duration = getDurationMillis ( waitMillis ) ; if ( duration < minimum ) { Assert . fail ( _STR + expectedMillis + _STR + minimum + _STR + duration ) ; } else if ( duration > maximum ) { Assert . fail ( _STR + expectedMillis + _STR + maximum + _STR + duration ) ; } }
21681	public void logDiff ( String id , String field , String db , String hw ) { StringBuffer diffBuffer = new StringBuffer ( String . format ( _STR , id , field ) ) ; if ( db == null || db . isEmpty ( ) || db . equalsIgnoreCase ( NO_MATCHING_ENTRY ) ) { diffBuffer . append ( String . format ( _STR , hw ) ) ; } else if ( hw == null || hw . isEmpty ( ) || hw . equalsIgnoreCase ( NO_MATCHING_ENTRY ) ) { diffBuffer . append ( String . format ( _STR , db ) ) ; } else { diffBuffer . append ( String . format ( _STR , db != null ? db : _STR , hw != null ? hw : _STR ) ) ; } msgs . append ( diffBuffer . toString ( ) + _STR ) ; if ( log != null ) { log . info ( diffBuffer . toString ( ) ) ; } }
62545	public FieldFrameBodyIMG ( Lyrics3Image image ) { images . add ( image ) ; }
83494	public AbstractResource ( String mimetype ) { this ( mimetype , System . currentTimeMillis ( ) ) ; }
71005	private Parameters ( ) { for ( Iterator i = arguments . iterator ( ) ; i . hasNext ( ) ; ) { String arg = ( String ) i . next ( ) ; arg = arg . toLowerCase ( ) ; if ( ! arg . startsWith ( _STR ) ) throw new IllegalArgumentException ( _STR + arg ) ; int colonIndex = arg . indexOf ( _STR ) ; String key ; String value ; if ( colonIndex >= _NUM ) { key = arg . substring ( _NUM , colonIndex ) ; value = arg . substring ( colonIndex + _NUM ) ; } else { key = arg . substring ( _NUM ) ; value = _STR ; } if ( ! allowedKeys . contains ( key ) ) throw new IllegalArgumentException ( _STR + arg . substring ( _NUM ) + _STR + StringUtil . toCommaDelimitedString ( allowedKeys ) ) ; hashtable . put ( key , value ) ; } for ( Iterator i = requiredKeys . iterator ( ) ; i . hasNext ( ) ; ) { String requiredKey = ( String ) i . next ( ) ; if ( ! hashtable . containsKey ( requiredKey ) ) throw new IllegalArgumentException ( _STR + requiredKey ) ; } }
52669	public List < TLV > initRespondSmp ( String question , String secret , boolean initiating ) throws OtrException { if ( question != null && ! initiating ) throw new IllegalArgumentException ( _STR ) ; byte [ ] our_fp = Hex . decode ( keyManager . getLocalFingerprint ( sessionID ) ) ; String remoteFingerprint = keyManager . getRemoteFingerprint ( sessionID ) ; if ( remoteFingerprint == null ) throw new OtrException ( _STR ) ; byte [ ] their_fp = Hex . decode ( remoteFingerprint ) ; byte [ ] sessionId ; try { sessionId = computeSessionId ( session . getS ( ) ) ; } catch ( SMException ex ) { throw new OtrException ( ex ) ; } byte [ ] bytes = secret . getBytes ( SerializationUtils . UTF8 ) ; int combined_buf_len = _NUM + sessionId . length + bytes . length ; byte [ ] combined_buf = new byte [ combined_buf_len ] ; combined_buf [ _NUM ] = _NUM ; if ( initiating ) { System . arraycopy ( our_fp , _NUM , combined_buf , _NUM , _NUM ) ; System . arraycopy ( their_fp , _NUM , combined_buf , _NUM , _NUM ) ; } else { System . arraycopy ( their_fp , _NUM , combined_buf , _NUM , _NUM ) ; System . arraycopy ( our_fp , _NUM , combined_buf , _NUM , _NUM ) ; } System . arraycopy ( sessionId , _NUM , combined_buf , _NUM , sessionId . length ) ; System . arraycopy ( bytes , _NUM , combined_buf , _NUM + sessionId . length , bytes . length ) ; MessageDigest sha256 ; try { sha256 = MessageDigest . getInstance ( _STR ) ; } catch ( NoSuchAlgorithmException ex ) { throw new OtrException ( ex ) ; } byte [ ] combined_secret = sha256 . digest ( combined_buf ) ; byte [ ] smpmsg ; try { if ( initiating ) { smpmsg = SM . step1 ( smstate , combined_secret ) ; } else { smpmsg = SM . step2b ( smstate , combined_secret ) ; } } catch ( SMException ex ) { throw new OtrException ( ex ) ; } if ( question != null ) { bytes = question . getBytes ( SerializationUtils . UTF8 ) ; byte [ ] qsmpmsg = new byte [ bytes . length + _NUM + smpmsg . length ] ; System . arraycopy ( bytes , _NUM , qsmpmsg , _NUM , bytes . length ) ; System . arraycopy ( smpmsg , _NUM , qsmpmsg , bytes . length + _NUM , smpmsg . length ) ; smpmsg = qsmpmsg ; } TLV sendtlv = new TLV ( initiating ? ( question != null ? TLV . SMP1Q : TLV . SMP1 ) : TLV . SMP2 , smpmsg ) ; smstate . nextExpected = initiating ? SM . EXPECT2 : SM . EXPECT3 ; return makeTlvList ( sendtlv ) ; }
12486	private double melToLinFreq ( double inputFreq ) { return ( _NUM * ( Math . pow ( _NUM , ( inputFreq / _NUM ) ) - _NUM ) ) ; }
55988	public RoundedIconGenerator ( int iconWidthPx , int iconHeightPx , int cornerRadiusPx , int backgroundColor , float textSizePx ) { mIconWidthPx = iconWidthPx ; mIconHeightPx = iconHeightPx ; mCornerRadiusPx = cornerRadiusPx ; mBackgroundRect = new RectF ( _NUM , _NUM , mIconWidthPx , mIconHeightPx ) ; mBackgroundPaint = new Paint ( Paint . ANTI_ALIAS_FLAG ) ; mBackgroundPaint . setColor ( backgroundColor ) ; mTextPaint = new TextPaint ( Paint . ANTI_ALIAS_FLAG ) ; mTextPaint . setColor ( Color . WHITE ) ; mTextPaint . setFakeBoldText ( _BOOL ) ; mTextPaint . setTextSize ( textSizePx ) ; FontMetrics textFontMetrics = mTextPaint . getFontMetrics ( ) ; mTextHeight = ( float ) Math . ceil ( textFontMetrics . bottom - textFontMetrics . top ) ; mTextYOffset = - textFontMetrics . top ; }
77952	public static byte [ ] randomBytes ( int size ) { byte [ ] bytes = new byte [ size ] ; seededRandom . nextBytes ( bytes ) ; return bytes ; }
37618	@ Override public String toString ( ) { StringBuffer BfString = new StringBuffer ( ) ; BfString . append ( _STR ) ; if ( m_starting != null ) { BfString . append ( _STR ) ; BfString . append ( startSetToString ( ) ) ; BfString . append ( _STR ) ; } if ( m_threshold != - Double . MAX_VALUE ) { BfString . append ( _STR + Utils . doubleToString ( m_threshold , _NUM , _NUM ) + _STR ) ; } return BfString . toString ( ) ; }
76574	protected void arraycopy ( byte [ ] buf , int pos , int length ) { mMessage . write ( buf , pos , length ) ; mPosition = mPosition + length ; }
31799	public boolean expired ( ) { return System . currentTimeMillis ( ) - time > DFLT_EXPIRATION_TIMEOUT ; }
77893	public JSONObject put ( String key , boolean value ) throws JSONException { put ( key , value ? Boolean . TRUE : Boolean . FALSE ) ; return this ; }
22337	private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
52318	private void handleSelection ( View view , Item item , int position ) { if ( ! item . isSelectable ( ) ) { return ; } if ( item . isSelected ( ) && ! mAllowDeselection ) { return ; } boolean selected = _BOOL ; if ( mPositionBasedStateManagement ) { selected = mSelections . contains ( position ) ; } else { selected = item . isSelected ( ) ; } if ( mSelectWithItemUpdate || view == null ) { if ( ! mMultiSelect ) { deselect ( ) ; } if ( selected ) { deselect ( position ) ; } else { select ( position ) ; } } else { if ( ! mMultiSelect ) { if ( mPositionBasedStateManagement ) { Iterator < Integer > entries = mSelections . iterator ( ) ; while ( entries . hasNext ( ) ) { Integer pos = entries . next ( ) ; if ( pos != position ) { deselect ( pos , entries ) ; } } } else { Set < Integer > selections = getSelections ( ) ; for ( int pos : selections ) { if ( pos != position ) { deselect ( pos ) ; } } } } item . withSetSelected ( ! selected ) ; view . setSelected ( ! selected ) ; if ( mSelectionListener != null ) mSelectionListener . onSelectionChanged ( item , ! selected ) ; if ( mPositionBasedStateManagement ) { if ( selected ) { if ( mSelections . contains ( position ) ) { mSelections . remove ( position ) ; } } else { mSelections . add ( position ) ; } } } }
65707	public boolean canInvoke ( MDepreciationWorkfile assetwk , MAssetAcct assetAcct , int A_Current_Period , BigDecimal Accum_Dep ) { if ( assetwk == null ) { log . warning ( _STR ) ; return _BOOL ; } int offset = _NUM ; int lifePeriods = assetwk . getUseLifeMonths ( assetwk . isFiscal ( ) ) ; boolean ok = ( offset <= A_Current_Period ) ; if ( CLogMgt . isLevelFinest ( ) ) log . finest ( _STR + A_Current_Period + _STR + lifePeriods + _STR + offset + _STR + ok ) ; return ok ; }
62750	public boolean writeHeader ( OutputStream os ) { try { writeInt ( os , CACHE_MAGIC ) ; writeString ( os , key ) ; writeString ( os , etag == null ? _STR : etag ) ; writeLong ( os , serverDate ) ; writeLong ( os , lastModified ) ; writeLong ( os , ttl ) ; writeLong ( os , softTtl ) ; writeStringStringMap ( responseHeaders , os ) ; os . flush ( ) ; return _BOOL ; } catch ( IOException e ) { VolleyLog . d ( _STR , e . toString ( ) ) ; return _BOOL ; } }
6009	public byte [ ] bytes ( ) throws HttpRequestException { final ByteArrayOutputStream output = byteStream ( ) ; try { copy ( buffer ( ) , output ) ; } catch ( IOException e ) { throw new HttpRequestException ( e ) ; } return output . toByteArray ( ) ; }
82644	public void fadeOutAllLayers ( ) { mTransitionState = TRANSITION_STARTING ; Arrays . fill ( mIsLayerOn , _BOOL ) ; invalidateSelf ( ) ; }
50046	public TreeMap < Float , List < List < Integer > > > packModifiedFirstFitDescending ( ) { throw new UnsupportedOperationException ( _STR ) ; }
67405	public void addTextChangeListener ( final FilterQueryChangeListener textChangeListener ) { listeners . add ( textChangeListener ) ; }
80193	@ Override public Iterator < Profile > iterator ( ) { return profiles . iterator ( ) ; }
85147	private boolean startsWithSpace ( String str ) { return str . length ( ) != _NUM && str . charAt ( _NUM ) == _STR ; }
3320	public String wrap ( String path ) { return uriPrefix + path ; }
69101	private int keyToLevel ( String key ) { String [ ] token = key . split ( _STR ) ; return ( token . length - _NUM ) ; }
11663	public boolean mouseDragged ( MouseEvent e ) { if ( grabbed_plot_graphics_ ) { int x = e . getX ( ) ; int y = e . getY ( ) ; int dx = x - prevX ; int dy = y - prevY ; plotX += dx ; plotY += dy ; prevX = x ; prevY = y ; graph . resize ( plotX , plotY , plotWidth , plotHeight ) ; OMGraphicList plotGraphics = graph . getPlotGraphics ( ) ; plotGraphics . generate ( getProjection ( ) , _BOOL ) ; repaint ( ) ; } return _BOOL ; }
6885	private void initCachingHttpHeadersFilter ( ServletContext servletContext , EnumSet < DispatcherType > disps ) { log . debug ( _STR ) ; FilterRegistration . Dynamic cachingHttpHeadersFilter = servletContext . addFilter ( _STR , new CachingHttpHeadersFilter ( jHipsterProperties ) ) ; cachingHttpHeadersFilter . addMappingForUrlPatterns ( disps , _BOOL , _STR ) ; cachingHttpHeadersFilter . addMappingForUrlPatterns ( disps , _BOOL , _STR ) ; cachingHttpHeadersFilter . setAsyncSupported ( _BOOL ) ; }
13265	protected void addCommonComponent ( XMLComponent component ) { if ( fCommonComponents . contains ( component ) ) { return ; } fCommonComponents . add ( component ) ; addRecognizedParamsAndSetDefaults ( component ) ; }
47182	SNode awaitFulfill ( SNode s , boolean timed , long nanos ) { final long deadline = timed ? System . nanoTime ( ) + nanos : _NUM ; Thread w = Thread . currentThread ( ) ; int spins = ( shouldSpin ( s ) ? ( timed ? maxTimedSpins : maxUntimedSpins ) : _NUM ) ; for ( ; ; ) { if ( w . isInterrupted ( ) ) s . tryCancel ( ) ; SNode m = s . match ; if ( m != null ) return m ; if ( timed ) { nanos = deadline - System . nanoTime ( ) ; if ( nanos <= _NUM ) { s . tryCancel ( ) ; continue ; } } if ( spins > _NUM ) spins = shouldSpin ( s ) ? ( spins - _NUM ) : _NUM ; else if ( s . waiter == null ) s . waiter = w ; else if ( ! timed ) LockSupport . park ( this ) ; else if ( nanos > spinForTimeoutThreshold ) LockSupport . parkNanos ( this , nanos ) ; } }
9684	public void load ( GeneralSubtrees generalSubtrees ) { List < GeneralSubtree > generalSubtreesList = generalSubtrees . getGeneralSubtrees ( ) ; Collections . sort ( generalSubtreesList , new GeneralSubtreeBaseComparator ( ) ) ; data = new Object [ generalSubtreesList . size ( ) ] [ _NUM ] ; int i = _NUM ; for ( GeneralSubtree generalSubtree : generalSubtreesList ) { data [ i ] [ _NUM ] = generalSubtree ; data [ i ] [ _NUM ] = generalSubtree ; data [ i ] [ _NUM ] = generalSubtree ; i ++ ; } fireTableDataChanged ( ) ; }
51485	@ Override public synchronized int read ( ) { return pos < count ? buffer . charAt ( pos ++ ) & _NUM : - _NUM ; }
77520	public boolean isPingDisabled ( ) { return ( null != healthcheck && ! healthcheck . exists ( ) ) ; }
85002	public static void writeToFile ( File file , String contents ) throws IOException { FileOutputStream fos = new FileOutputStream ( file ) ; fos . write ( contents . getBytes ( ) ) ; fos . close ( ) ; }
31744	public void makeTreeOfWritables ( Iterable < Pair < String , Integer > > flatData ) { Text key = new Text ( ) ; for ( Pair < String , Integer > pair : flatData ) { key . set ( pair . key ) ; ArrayList < IntWritable > valList ; if ( ! mockInput . containsKey ( key ) ) { valList = new ArrayList < > ( ) ; mockInput . put ( key , valList ) ; key = new Text ( ) ; } else valList = ( ArrayList < IntWritable > ) mockInput . get ( key ) ; valList . add ( new IntWritable ( pair . value ( ) ) ) ; } }
71091	public static double angle ( Coordinate p0 , Coordinate p1 ) { double dx = p1 . x - p0 . x ; double dy = p1 . y - p0 . y ; return Math . atan2 ( dy , dx ) ; }
62951	public InMemoryCursor ( String [ ] columnNames ) { mCurrentPosition = - _NUM ; mColumnNames = columnNames ; }
20210	@ Override public boolean isEnabled ( ) { if ( ( attributeSelectionPanel != null ) && ! isValueOnly ( ) ) { return attributeSelectionPanel . isEnabled ( ) ; } else { if ( slider != null ) { return slider . isEnabled ( ) ; } } return _BOOL ; }
36412	private void renderForeground ( final ExecutionUnit process , final Graphics2D g2 , boolean printing ) { if ( drawHighlight && ! printing && ( model . isDragStarted ( ) || model . isDropTargetSet ( ) && model . isImportDragged ( ) ) || model . isOperatorSourceHovered ( ) ) { switch ( RapidMinerGUI . getDragHighlighteMode ( ) ) { case FULL : case BORDER : drawDragBorder ( process , g2 ) ; break ; case NONE : default : break ; } } }
83748	public ModbusTransaction createTransaction ( ) { ModbusSerialTransaction transaction = new ModbusSerialTransaction ( ) ; transaction . setTransport ( this ) ; return transaction ; }
68447	public void start ( ) { if ( runner == null ) { runner = new Thread ( this , _STR ) ; runner . start ( ) ; } }
17187	public synchronized int exportObject ( String name , Object obj ) throws CannotCompileException { Class clazz = obj . getClass ( ) ; ExportedObject eo = new ExportedObject ( ) ; eo . object = obj ; eo . methods = clazz . getMethods ( ) ; exportedObjects . addElement ( eo ) ; eo . identifier = exportedObjects . size ( ) - _NUM ; if ( name != null ) exportedNames . put ( name , eo ) ; try { stubGen . makeProxyClass ( clazz ) ; } catch ( NotFoundException e ) { throw new CannotCompileException ( e ) ; } return eo . identifier ; }
9136	protected final File createDBFFDCDirectory ( ) { File dbffdcDir = new File ( ffdcDirectoryName ) ; if ( ! dbffdcDir . exists ( ) ) { final boolean isDBFFDcDirCreated = dbffdcDir . mkdirs ( ) ; if ( isDBFFDcDirCreated ) { dbffdcDir = new File ( ffdcDirectoryName ) ; return dbffdcDir ; } } else if ( ! dbffdcDir . isDirectory ( ) ) { return null ; } return dbffdcDir ; }
62459	public static String readCharacterSizedString ( InputStream stream ) throws IOException { StringBuilder result = new StringBuilder ( ) ; int strLen = readUINT16 ( stream ) ; int character = stream . read ( ) ; character |= stream . read ( ) << _NUM ; do { if ( character != _NUM ) { result . append ( ( char ) character ) ; character = stream . read ( ) ; character |= stream . read ( ) << _NUM ; } } while ( character != _NUM || ( result . length ( ) + _NUM ) > strLen ) ; if ( strLen != ( result . length ( ) + _NUM ) ) { throw new IllegalStateException ( _STR ) ; } return result . toString ( ) ; }
76676	protected void processChildren ( QueryNode queryTree ) throws QueryNodeException { List < QueryNode > children = queryTree . getChildren ( ) ; ChildrenList newChildren ; if ( children != null && children . size ( ) > _NUM ) { newChildren = allocateChildrenList ( ) ; try { for ( QueryNode child : children ) { child = processIteration ( child ) ; if ( child == null ) { throw new NullPointerException ( ) ; } newChildren . add ( child ) ; } List < QueryNode > orderedChildrenList = setChildrenOrder ( newChildren ) ; queryTree . set ( orderedChildrenList ) ; } finally { newChildren . beingUsed = _BOOL ; } } }
6661	private void initializeMessages ( List < String > messages ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getGeneralMessages ( ) ) ) ; if ( OSUtils . isWindows ( ) ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getWindowsMessages ( ) ) ) ; } else if ( OSUtils . isMacOSX ( ) ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getMacOSXMessages ( ) ) ) ; } else if ( OSUtils . isLinux ( ) ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getLinuxMessages ( ) ) ) ; } else { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getOtherMessages ( ) ) ) ; } if ( ! OSUtils . isMacOSX ( ) ) { messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getNonMacOSXMessages ( ) ) ) ; } messages . addAll ( Arrays . asList ( TipOfTheDayMessages . getFrostWireMessages ( ) ) ) ; Collections . shuffle ( messages ) ; _currentTip = - _NUM ; }
72013	public PersistedQueue ( final File queueEnvPath , final String queueName , final int cacheSize ) { queueEnvPath . mkdirs ( ) ; final EnvironmentConfig dbEnvConfig = new EnvironmentConfig ( ) ; dbEnvConfig . setTransactional ( _BOOL ) ; dbEnvConfig . setAllowCreate ( _BOOL ) ; this . dbEnv = new Environment ( queueEnvPath , dbEnvConfig ) ; DatabaseConfig dbConfig = new DatabaseConfig ( ) ; dbConfig . setTransactional ( _BOOL ) ; dbConfig . setAllowCreate ( _BOOL ) ; dbConfig . setDeferredWrite ( _BOOL ) ; this . queueDatabase = dbEnv . openDatabase ( null , queueName , dbConfig ) ; this . queueName = queueName ; this . cacheSize = cacheSize ; this . opsCounter = _NUM ; }
75534	protected final StringBuilder write ( StringBuilder sb , final Object ... objects ) { for ( Object string : objects ) sb . append ( string ) ; return sb ; }
38681	@ Override public boolean connectionAllowed ( EventSetDescriptor esd ) { return connectionAllowed ( esd . getName ( ) ) ; }
23355	public static Request newPostOpenGraphActionRequest ( Session session , OpenGraphAction openGraphAction , Callback callback ) { if ( openGraphAction == null ) { throw new FacebookException ( _STR ) ; } if ( Utility . isNullOrEmpty ( openGraphAction . getType ( ) ) ) { throw new FacebookException ( _STR ) ; } String path = String . format ( MY_ACTION_FORMAT , openGraphAction . getType ( ) ) ; return newPostRequest ( session , path , openGraphAction , callback ) ; }
50242	public void showLoading ( ) { switchState ( LOADING , null , null , null , null , null , Collections . < Integer > emptyList ( ) ) ; }
16707	public void readExternal ( ObjectInput in ) throws IOException , ClassNotFoundException { int vocabSize = in . readInt ( ) ; for ( int i = _NUM ; i < vocabSize ; i ++ ) { String line = in . readUTF ( ) ; Vocabulary . id ( line ) ; } numTokens = in . readDouble ( ) ; countFuncs = new long [ in . readInt ( ) ] [ _NUM ] ; for ( int i = _NUM ; i < countFuncs . length ; i ++ ) { countFuncs [ i ] [ _NUM ] = in . readLong ( ) ; countFuncs [ i ] [ _NUM ] = in . readLong ( ) ; } typesFuncs = new long [ in . readInt ( ) ] [ _NUM ] ; for ( int i = _NUM ; i < typesFuncs . length ; i ++ ) { typesFuncs [ i ] [ _NUM ] = in . readLong ( ) ; typesFuncs [ i ] [ _NUM ] = in . readLong ( ) ; } quantizationBase = in . readDouble ( ) ; bf = new BloomFilter ( ) ; bf . readExternal ( in ) ; }
53141	public static double computeMAD ( double [ ] x , double median ) { for ( int i = _NUM ; i < x . length ; i ++ ) { x [ i ] = Math . abs ( x [ i ] - median ) ; } double mad = QuickSelect . median ( x ) ; if ( ! ( mad > _NUM ) ) { double min = Double . POSITIVE_INFINITY ; for ( double xi : x ) { if ( xi > _NUM && xi < min ) { min = xi ; } } if ( min < Double . POSITIVE_INFINITY ) { mad = min ; } else { mad = _NUM ; } } if ( mad == Double . POSITIVE_INFINITY ) { double max = _NUM ; for ( double xi : x ) { if ( xi < Double . POSITIVE_INFINITY && xi > max ) { max = xi ; } } if ( max < Double . POSITIVE_INFINITY ) { mad = max ; } else { mad = _NUM ; } } return mad ; }
50573	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
86974	public SdpException ( Throwable rootCause ) { super ( rootCause . getLocalizedMessage ( ) ) ; }
75591	private boolean linkFirst ( Node < E > node ) { if ( count >= capacity ) return _BOOL ; Node < E > f = first ; node . next = f ; first = node ; if ( last == null ) last = node ; else f . prev = node ; ++ count ; notEmpty . signal ( ) ; return _BOOL ; }
73778	protected void notifyPropertyChangeListener ( String property , Object oldValue , Object newValue ) { Set < PropertyChangeListener > v ; synchronized ( this ) { v = new HashSet < > ( listeners ) ; } for ( PropertyChangeListener listener : v ) { listener . propertyChange ( new PropertyChangeEvent ( this , property , oldValue , newValue ) ) ; } }
30679	public boolean indicateDirtyRead ( ITemplateHolder template ) { return ( ( template . isReadOperation ( ) && _useDirtyRead ) || template . isDirtyReadRequested ( ) ) ; }
766	public JValueSlider ( String title , int min , int max , int value ) { this ( title , new Integer ( min ) , new Integer ( max ) , new Integer ( value ) ) ; m_smin = min ; m_srange = max - min ; m_slider . setMinimum ( min ) ; m_slider . setMaximum ( max ) ; setValue ( new Integer ( value ) ) ; }
27035	protected void applyAttributesToSymbol ( TacticalGraphicAttributes graphicAttributes , TacticalSymbolAttributes symbolAttributes ) { Double value = graphicAttributes . getInteriorOpacity ( ) ; if ( value != null ) { symbolAttributes . setOpacity ( value ) ; } value = graphicAttributes . getScale ( ) ; if ( value != null ) { symbolAttributes . setScale ( value ) ; } Material material = graphicAttributes . getInteriorMaterial ( ) ; symbolAttributes . setInteriorMaterial ( material ) ; Font font = graphicAttributes . getTextModifierFont ( ) ; if ( font != null ) { symbolAttributes . setTextModifierFont ( font ) ; } material = graphicAttributes . getTextModifierMaterial ( ) ; if ( material != null ) { symbolAttributes . setTextModifierMaterial ( material ) ; } }
2926	public final void increaseIdleCount ( IdleStatus status , long currentTime ) { if ( status == IdleStatus . BOTH_IDLE ) { idleCountForBoth . incrementAndGet ( ) ; lastIdleTimeForBoth = currentTime ; } else if ( status == IdleStatus . READER_IDLE ) { idleCountForRead . incrementAndGet ( ) ; lastIdleTimeForRead = currentTime ; } else if ( status == IdleStatus . WRITER_IDLE ) { idleCountForWrite . incrementAndGet ( ) ; lastIdleTimeForWrite = currentTime ; } else { throw new IllegalArgumentException ( _STR + status ) ; } }
33321	public RemoteServiceDescriptor ( String baseUrl , HttpJsonRequestFactory requestFactory ) throws IllegalArgumentException { this . baseUrl = baseUrl ; this . requestFactory = requestFactory ; try { final URL baseUrlURL = new URL ( baseUrl ) ; final String protocol = baseUrlURL . getProtocol ( ) ; if ( ! ( protocol . equals ( _STR ) || protocol . equals ( _STR ) ) ) { throw new IllegalArgumentException ( String . format ( _STR , baseUrl ) ) ; } } catch ( MalformedURLException e ) { throw new IllegalArgumentException ( String . format ( _STR , baseUrl ) ) ; } }
75333	private Journal readJournal ( ParcelFileDescriptor oldState ) { Journal journal = new Journal ( ) ; if ( oldState == null ) { return journal ; } FileInputStream inStream = new FileInputStream ( oldState . getFileDescriptor ( ) ) ; try { int availableBytes = inStream . available ( ) ; if ( DEBUG ) Log . d ( TAG , _STR + availableBytes ) ; if ( availableBytes < MAX_JOURNAL_SIZE ) { byte [ ] buffer = new byte [ availableBytes ] ; int bytesRead = _NUM ; boolean valid = _BOOL ; InvalidProtocolBufferNanoException lastProtoException = null ; while ( availableBytes > _NUM ) { try { int result = inStream . read ( buffer , bytesRead , _NUM ) ; if ( result > _NUM ) { availableBytes -= result ; bytesRead += result ; } else { Log . w ( TAG , _STR ) ; availableBytes = _NUM ; } } catch ( IOException e ) { buffer = null ; availableBytes = _NUM ; } try { MessageNano . mergeFrom ( journal , readCheckedBytes ( buffer , bytesRead ) ) ; valid = _BOOL ; availableBytes = _NUM ; if ( VERBOSE ) Log . v ( TAG , _STR + bytesRead + _STR ) ; } catch ( InvalidProtocolBufferNanoException e ) { lastProtoException = e ; journal . clear ( ) ; } } if ( DEBUG ) Log . d ( TAG , _STR + bytesRead ) ; if ( ! valid ) { Log . w ( TAG , _STR , lastProtoException ) ; } } } catch ( IOException e ) { Log . w ( TAG , _STR , e ) ; } return journal ; }
63378	public Server start ( ) throws SQLException { try { started = _BOOL ; service . start ( ) ; String name = service . getName ( ) + _STR + service . getURL ( ) + _STR ; Thread t = new Thread ( this , name ) ; t . setDaemon ( service . isDaemon ( ) ) ; t . start ( ) ; for ( int i = _NUM ; i < _NUM ; i += i ) { wait ( i ) ; if ( isRunning ( _BOOL ) ) { return this ; } } if ( isRunning ( _BOOL ) ) { return this ; } throw DbException . get ( ErrorCode . EXCEPTION_OPENING_PORT_2 , name , _STR + _STR ) ; } catch ( DbException e ) { throw DbException . toSQLException ( e ) ; } }
74544	@ Override public boolean isComplete ( ) { return _BOOL ; }
85288	public ByteMatrix encode ( String contents , int width , int height , Map < EncodeHintType , Object > hints ) throws WriterException { if ( contents == null || contents . length ( ) == _NUM ) { throw new IllegalArgumentException ( _STR ) ; } if ( width < _NUM || height < _NUM ) { throw new IllegalArgumentException ( _STR + width + _STR + height ) ; } ErrorCorrectionLevel errorCorrectionLevel = ErrorCorrectionLevel . L ; if ( hints != null ) { ErrorCorrectionLevel requestedECLevel = ( ErrorCorrectionLevel ) hints . get ( EncodeHintType . ERROR_CORRECTION ) ; if ( requestedECLevel != null ) { errorCorrectionLevel = requestedECLevel ; } } QRCode code = new QRCode ( ) ; Encoder . encode ( contents , errorCorrectionLevel , hints , code ) ; return renderResult ( code , width , height ) ; }
57688	public IntBuffer put ( int [ ] src , int srcOffset , int intCount ) { if ( isReadOnly ( ) ) { throw new ReadOnlyBufferException ( ) ; } Arrays . checkOffsetAndCount ( src . length , srcOffset , intCount ) ; if ( intCount > remaining ( ) ) { throw new BufferOverflowException ( ) ; } for ( int i = srcOffset ; i < srcOffset + intCount ; ++ i ) { put ( src [ i ] ) ; } return this ; }
3386	public Request header ( String key , String value ) { Objects . requireNonNull ( key ) ; Objects . requireNonNull ( value ) ; _headers . put ( key , value ) ; return this ; }
6625	public void updateUI ( ) { super . updateUI ( ) ; setBackground ( new Color ( _NUM , _NUM , _NUM , _NUM ) ) ; setWrapStyleWord ( _BOOL ) ; setHighlighter ( null ) ; setEditable ( _BOOL ) ; LookAndFeel . installBorder ( this , _STR ) ; LookAndFeel . installColorsAndFont ( this , _STR , _STR , _STR ) ; if ( resizeHandler != null ) { resizeHandler . componentResized ( null ) ; } SizePolicy policy = ( SizePolicy ) getClientProperty ( SizePolicy . class ) ; if ( policy != null ) { GUIUtils . restrictSize ( this , policy ) ; } }
33228	public static void generateExtensionManager ( File rootFolder ) throws IOException { File outFile = new File ( rootFolder , REGISTRY_PATH ) ; StringBuilder builder = new StringBuilder ( ) ; builder . append ( _STR ) ; generateImports ( builder ) ; generateClass ( builder ) ; FileUtils . writeStringToFile ( outFile , builder . toString ( ) ) ; }
19958	public synchronized Future < V > submit ( Callable < V > task ) throws RejectedExecutionException { return pool . submit ( task ) ; }
1907	private void checkBucketName ( String name ) throws InvalidBucketNameException { if ( name == null ) { throw new InvalidBucketNameException ( NULL_STRING , _STR ) ; } if ( name . length ( ) < _NUM || name . length ( ) > _NUM ) { String msg = _STR ; throw new InvalidBucketNameException ( name , msg ) ; } if ( name . matches ( _STR ) ) { String msg = _STR + _STR ; throw new InvalidBucketNameException ( name , msg ) ; } if ( ! name . matches ( _STR ) ) { String msg = _STR + _STR ; throw new InvalidBucketNameException ( name , msg ) ; } }
56797	private void validateUserNamespaceAuthorizationCreateRequest ( UserNamespaceAuthorizationCreateRequest request ) { Assert . notNull ( request , _STR ) ; validateUserNamespaceAuthorizationKey ( request . getUserNamespaceAuthorizationKey ( ) ) ; validateNamespacePermissions ( request . getNamespacePermissions ( ) ) ; }
20007	protected String format ( Object o ) { return o . toString ( ) ; }
37550	public void calculateDerived ( ) { xStats . calculateDerived ( ) ; yStats . calculateDerived ( ) ; differencesStats . calculateDerived ( ) ; correlation = Double . NaN ; if ( ! Double . isNaN ( xStats . stdDev ) && ! Double . isNaN ( yStats . stdDev ) && ! Utils . eq ( xStats . stdDev , _NUM ) ) { double slope = ( xySum - xStats . sum * yStats . sum / count ) / ( xStats . sumSq - xStats . sum * xStats . mean ) ; if ( ! Utils . eq ( yStats . stdDev , _NUM ) ) { correlation = slope * xStats . stdDev / yStats . stdDev ; } else { correlation = _NUM ; } } if ( Utils . gr ( differencesStats . stdDev , _NUM ) ) { double tval = differencesStats . mean * Math . sqrt ( count ) / differencesStats . stdDev ; if ( m_degreesOfFreedom >= _NUM ) { differencesProbability = Statistics . FProbability ( tval * tval , _NUM , m_degreesOfFreedom ) ; } else { if ( count > _NUM ) { differencesProbability = Statistics . FProbability ( tval * tval , _NUM , ( int ) count - _NUM ) ; } else { differencesProbability = _NUM ; } } } else { if ( differencesStats . sumSq == _NUM ) { differencesProbability = _NUM ; } else { differencesProbability = _NUM ; } } differencesSignificance = _NUM ; if ( differencesProbability <= sigLevel ) { if ( xStats . mean > yStats . mean ) { differencesSignificance = _NUM ; } else { differencesSignificance = - _NUM ; } } }
50698	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
22015	protected boolean canDeleteConsistencyGroup ( final BlockConsistencyGroup consistencyGroup ) { return ( ! consistencyGroup . getInactive ( ) && ! consistencyGroup . created ( ) ) ; }
40244	public static void closeQuietly ( Closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( RuntimeException rethrown ) { throw rethrown ; } catch ( Exception ignored ) { } } }
1760	public AmqpMessage receiveNoWait ( ) throws Exception { checkClosed ( ) ; return prefetch . poll ( ) ; }
82297	@ Override protected void removeRange ( int start , int end ) { if ( start < _NUM ) { throw new IndexOutOfBoundsException ( _STR + start ) ; } else if ( end > size ) { throw new IndexOutOfBoundsException ( _STR + end + _STR + size ) ; } else if ( start > end ) { throw new IndexOutOfBoundsException ( _STR + start + _STR + end ) ; } if ( start == end ) { return ; } if ( end == size ) { Arrays . fill ( array , firstIndex + start , firstIndex + size , null ) ; } else if ( start == _NUM ) { Arrays . fill ( array , firstIndex , firstIndex + end , null ) ; firstIndex += end ; } else { System . arraycopy ( array , firstIndex + end , array , firstIndex + start , size - end ) ; int lastIndex = firstIndex + size ; int newLast = lastIndex + start - end ; Arrays . fill ( array , newLast , lastIndex , null ) ; } size -= end - start ; modCount ++ ; }
55563	private boolean zzRefill ( ) throws java . io . IOException { if ( zzStartRead > _NUM ) { System . arraycopy ( zzBuffer , zzStartRead , zzBuffer , _NUM , zzEndRead - zzStartRead ) ; zzEndRead -= zzStartRead ; zzCurrentPos -= zzStartRead ; zzMarkedPos -= zzStartRead ; zzPushbackPos -= zzStartRead ; zzStartRead = _NUM ; } if ( zzCurrentPos >= zzBuffer . length ) { final char newBuffer [ ] = new char [ zzCurrentPos * _NUM ] ; System . arraycopy ( zzBuffer , _NUM , newBuffer , _NUM , zzBuffer . length ) ; zzBuffer = newBuffer ; } final int numRead = zzReader . read ( zzBuffer , zzEndRead , zzBuffer . length - zzEndRead ) ; if ( numRead < _NUM ) { return _BOOL ; } else { zzEndRead += numRead ; return _BOOL ; } }
70296	private void checkDuplicateNamesDuringDelete ( List < Integer > ids ) { ArrayList < Entity > myEntities = game . getPlayerEntities ( game . getPlayer ( localPlayerNumber ) , _BOOL ) ; Hashtable < String , ArrayList < Integer > > rawNameToId = new Hashtable < String , ArrayList < Integer > > ( ( int ) ( myEntities . size ( ) * _NUM ) ) ; for ( Entity e : myEntities ) { String rawName = e . getShortNameRaw ( ) ; ArrayList < Integer > namedIds = rawNameToId . get ( rawName ) ; if ( namedIds == null ) { namedIds = new ArrayList < Integer > ( ) ; } namedIds . add ( e . getId ( ) ) ; rawNameToId . put ( rawName , namedIds ) ; } for ( int id : ids ) { Entity removedEntity = game . getEntity ( id ) ; if ( removedEntity == null ) { continue ; } String removedRawName = removedEntity . getShortNameRaw ( ) ; Integer count = duplicateNameHash . get ( removedEntity . getShortNameRaw ( ) ) ; if ( ( count != null ) && ( count > _NUM ) ) { ArrayList < Integer > namedIds = rawNameToId . get ( removedRawName ) ; for ( Integer i : namedIds ) { Entity e = game . getEntity ( i ) ; String eRawName = e . getShortNameRaw ( ) ; if ( eRawName . equals ( removedRawName ) && ( e . duplicateMarker > removedEntity . duplicateMarker ) ) { e . duplicateMarker -- ; e . generateShortName ( ) ; e . generateDisplayName ( ) ; if ( ! ids . contains ( e . getId ( ) ) ) { sendUpdateEntity ( e ) ; } } } duplicateNameHash . put ( removedEntity . getShortNameRaw ( ) , new Integer ( count - _NUM ) ) ; } else if ( count != null ) { duplicateNameHash . remove ( removedEntity . getShortNameRaw ( ) ) ; } } }
1874	protected void stopBKCluster ( ) throws Exception { if ( bkc != null ) { bkc . close ( ) ; } for ( BookieServer server : bs ) { server . shutdown ( ) ; AutoRecoveryMain autoRecovery = autoRecoveryProcesses . get ( server ) ; if ( autoRecovery != null && isAutoRecoveryEnabled ( ) ) { autoRecovery . shutdown ( ) ; LOG . debug ( _STR + server . getLocalAddress ( ) ) ; } } bs . clear ( ) ; for ( File f : tmpDirs ) { FileUtils . deleteDirectory ( f ) ; } }
85973	public void or ( Criteria criteria ) { oredCriteria . add ( criteria ) ; }
2499	public void releaseSelections ( Set < Entity > items ) { for ( Entity item : items ) { releaseSelection ( item ) ; } }
83250	public HubLinkMapping ( String fileName , int numberOfHubs , Network network ) { this . numberOfHubs = numberOfHubs ; if ( fileName . contains ( _STR ) ) { readMappingTable ( fileName ) ; unMappedLinksAtZeroHub = _BOOL ; return ; } handleUnmappedLinksStart ( ) ; try { FileReader fr = new FileReader ( fileName ) ; BufferedReader br = new BufferedReader ( fr ) ; String line ; StringTokenizer tokenizer ; String token ; int linkId ; line = br . readLine ( ) ; while ( line != null ) { tokenizer = new StringTokenizer ( line ) ; for ( int i = _NUM ; i < this . numberOfHubs ; i ++ ) { token = tokenizer . nextToken ( ) ; linkId = ( int ) Double . parseDouble ( token ) ; linkHubMapping . put ( Integer . toString ( linkId ) , i ) ; } if ( tokenizer . hasMoreTokens ( ) ) { throw new RuntimeException ( _STR ) ; } line = br . readLine ( ) ; } } catch ( RuntimeException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( _STR ) ; } linkHubMapping . remove ( _STR ) ; handleUnmappedLinksEnd ( network ) ; }
74305	public boolean deleteLoadName ( String load ) { if ( ! _loadList . contains ( load ) ) { return _BOOL ; } _loadList . remove ( load ) ; log . debug ( _STR + getName ( ) + _STR + load ) ; setDirtyAndFirePropertyChange ( LOADS_CHANGED_PROPERTY , _loadList . size ( ) + _NUM , _loadList . size ( ) ) ; return _BOOL ; }
17282	private ComputeState validateComputeName ( String awsId , String vmName ) throws Throwable { if ( this . isAwsClientMock ) { return null ; } ComputeState computeState = getComputeByAWSId ( this . host , awsId ) ; String tagNameValue = computeState . name ; assertNotNull ( _STR , tagNameValue ) ; assertEquals ( vmName , tagNameValue ) ; return computeState ; }
79178	public static String fromTag ( IntArrayTag tag ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( ARRAY_START ) ; boolean start = _BOOL ; for ( int value : tag . getValue ( ) ) { IntTag i = new IntTag ( value ) ; if ( start ) { start = _BOOL ; } else { builder . append ( ELEMENT_SEPERATOR ) ; } builder . append ( fromTag ( i ) ) ; } builder . append ( ARRAY_END ) ; return builder . toString ( ) ; }
84990	public static int removeArgsAndReturnInsertionIndex ( List < String > args , int argIndex , boolean tryRemovingArgValue ) { if ( argIndex < _NUM || argIndex >= args . size ( ) ) { return _NUM ; } if ( tryRemovingArgValue ) { String argValue = getArgValue ( args , argIndex + _NUM ) ; if ( argValue != null ) { args . remove ( argIndex + _NUM ) ; } } args . remove ( argIndex ) ; return argIndex ; }
14679	void replacePolicyInResourceTree ( ServiceTypeManager svtm , SSOToken token , Policy oldPolicy , Policy newPolicy ) throws PolicyException , SSOException { removePolicyFromResourceTree ( svtm , token , oldPolicy ) ; addPolicyToResourceTree ( svtm , token , newPolicy ) ; }
9400	public AtomicDoubleArray ( int length ) { larray = new AtomicLongArray ( length ) ; long ZERO = Double . doubleToRawLongBits ( _NUM ) ; for ( int i = _NUM ; i < length ; i ++ ) larray . set ( i , ZERO ) ; }
31396	private void copyAction ( File srcFile , File destFile ) throws FileNotFoundException , IOException { FileInputStream istream = new FileInputStream ( srcFile ) ; FileOutputStream ostream = new FileOutputStream ( destFile ) ; FileChannel input = istream . getChannel ( ) ; FileChannel output = ostream . getChannel ( ) ; try { input . transferTo ( _NUM , input . size ( ) , output ) ; } finally { istream . close ( ) ; ostream . close ( ) ; input . close ( ) ; output . close ( ) ; } }
52866	private void recomputeSeperation ( double [ ] [ ] means , double [ ] [ ] cdist , LongStatistic diststat ) { final int k = means . length ; for ( int i = _NUM ; i < k ; i ++ ) { DoubleVector mi = DoubleVector . wrap ( means [ i ] ) ; for ( int j = _NUM ; j < i ; j ++ ) { cdist [ i ] [ j ] = cdist [ j ] [ i ] = distanceFunction . distance ( mi , DoubleVector . wrap ( means [ j ] ) ) ; } } if ( diststat != null ) { diststat . increment ( ( k * ( k - _NUM ) ) > > _NUM ) ; } }
386	private static BufferedImage makeSquare ( BufferedImage input ) { if ( input . getHeight ( ) == input . getWidth ( ) ) { return input ; } else { int max = Math . max ( input . getHeight ( ) , input . getWidth ( ) ) ; int dx = ( max - input . getWidth ( ) ) / _NUM ; int dy = ( max - input . getHeight ( ) ) / _NUM ; return createImg ( max , max , input . getType ( ) , null ) ; } }
61549	protected abstract void handleLostEntry ( HttpRoute route ) ;
46983	public void writeStartElement ( String localName ) throws XMLStreamException { if ( localName == null || localName . length ( ) == _NUM ) { throw new XMLStreamException ( _STR ) ; } _state = STATE_ELEMENT ; if ( _currentEle != null && _currentEle . getState ( ) == ELEMENT_STARTTAG_OPEN ) { closeStartTag ( ) ; } _currentEle = new Element ( _currentEle , localName , _BOOL ) ; openStartTag ( ) ; _writer . write ( localName ) ; }
36443	public void addProcessInteractionListener ( final ProcessInteractionListener l ) { if ( l == null ) { throw new IllegalArgumentException ( _STR ) ; } processInteractionListeners . add ( l ) ; }
26003	private void traverseInternal ( Object root , boolean yieldRoot , IdentityHashMap < Object , Object > seen ) { if ( root == null || seen . containsKey ( root ) ) { return ; } if ( yieldRoot ) { if ( ! visit ( root ) ) { return ; } } seen . put ( root , root ) ; if ( root instanceof JSONObject ) { JSONObject json = ( JSONObject ) root ; Iterator < String > keys = json . keys ( ) ; while ( keys . hasNext ( ) ) { String key = keys . next ( ) ; try { traverseInternal ( json . get ( key ) , _BOOL , seen ) ; } catch ( JSONException e ) { throw new RuntimeException ( e ) ; } } } else if ( root instanceof JSONArray ) { JSONArray array = ( JSONArray ) root ; for ( int i = _NUM ; i < array . length ( ) ; ++ i ) { try { traverseInternal ( array . get ( i ) , _BOOL , seen ) ; } catch ( JSONException e ) { throw new RuntimeException ( e ) ; } } } else if ( root instanceof Map ) { Map < ? , ? > map = ( Map < ? , ? > ) root ; for ( Object value : map . values ( ) ) { traverseInternal ( value , _BOOL , seen ) ; } } else if ( root instanceof List ) { List < ? > list = ( List < ? > ) root ; for ( Object value : list ) { traverseInternal ( value , _BOOL , seen ) ; } } else if ( root instanceof ParseObject ) { if ( traverseParseObjects ) { ParseObject object = ( ParseObject ) root ; for ( String key : object . keySet ( ) ) { traverseInternal ( object . get ( key ) , _BOOL , seen ) ; } } } else if ( root instanceof ParseACL ) { ParseACL acl = ( ParseACL ) root ; ParseUser user = acl . getUnresolvedUser ( ) ; if ( user != null && user . isCurrentUser ( ) ) { traverseInternal ( user , _BOOL , seen ) ; } } }
84474	public StrBuilder replaceFirst ( final String searchStr , final String replaceStr ) { final int searchLen = ( searchStr == null ? _NUM : searchStr . length ( ) ) ; if ( searchLen > _NUM ) { final int index = indexOf ( searchStr , _NUM ) ; if ( index >= _NUM ) { final int replaceLen = ( replaceStr == null ? _NUM : replaceStr . length ( ) ) ; replaceImpl ( index , index + searchLen , searchLen , replaceStr , replaceLen ) ; } } return this ; }
51687	protected abstract void internalPut ( int index , byte b ) ;
74464	public CommonTurnoutOperationConfig ( TurnoutOperation op ) { super ( op ) ; myOp = ( CommonTurnoutOperation ) op ; maxTriesSpinner = new JSpinner ( ) ; intervalSpinner = new JSpinner ( ) ; Box vbox = Box . createVerticalBox ( ) ; Box hbox1 = Box . createHorizontalBox ( ) ; Box hbox2 = Box . createHorizontalBox ( ) ; vbox . add ( hbox2 ) ; vbox . add ( hbox1 ) ; vbox . add ( Box . createVerticalGlue ( ) ) ; hbox1 . add ( new JLabel ( Bundle . getMessage ( _STR ) ) ) ; hbox1 . add ( Box . createHorizontalGlue ( ) ) ; intervalSpinner . setMinimumSize ( new Dimension ( _NUM , _NUM ) ) ; intervalSpinner . setModel ( new SpinnerNumberModel ( myOp . getInterval ( ) , CommonTurnoutOperation . minInterval , CommonTurnoutOperation . maxInterval , CommonTurnoutOperation . intervalStepSize ) ) ; hbox1 . add ( intervalSpinner ) ; hbox2 . add ( new JLabel ( Bundle . getMessage ( _STR ) ) ) ; hbox2 . add ( Box . createHorizontalGlue ( ) ) ; maxTriesSpinner . setMinimumSize ( new Dimension ( _NUM , _NUM ) ) ; maxTriesSpinner . setModel ( new SpinnerNumberModel ( myOp . getMaxTries ( ) , CommonTurnoutOperation . minMaxTries , CommonTurnoutOperation . maxMaxTries , _NUM ) ) ; hbox2 . add ( maxTriesSpinner ) ; Box hbox3 = Box . createHorizontalBox ( ) ; hbox3 . add ( Box . createHorizontalStrut ( _NUM ) ) ; vbox . add ( hbox3 ) ; add ( vbox ) ; }
18	public static String gensalt ( int log_rounds , SecureRandom random ) { if ( log_rounds < _NUM || log_rounds > _NUM ) { throw new IllegalArgumentException ( _STR ) ; } StringBuilder rs = new StringBuilder ( ) ; byte rnd [ ] = new byte [ BCRYPT_SALT_LEN ] ; random . nextBytes ( rnd ) ; rs . append ( _STR ) ; if ( log_rounds < _NUM ) { rs . append ( _STR ) ; } rs . append ( log_rounds ) ; rs . append ( _STR ) ; encode_base64 ( rnd , rnd . length , rs ) ; return rs . toString ( ) ; }
76094	protected void drawDescription ( Canvas c ) { if ( ! mDescription . equals ( _STR ) ) { if ( mDescriptionPosition == null ) { c . drawText ( mDescription , getWidth ( ) - mViewPortHandler . offsetRight ( ) - _NUM , getHeight ( ) - mViewPortHandler . offsetBottom ( ) - _NUM , mDescPaint ) ; } else { c . drawText ( mDescription , mDescriptionPosition . x , mDescriptionPosition . y , mDescPaint ) ; } } }
64156	long parseBytes ( String freeSpace , String path ) throws IOException { try { long bytes = Long . parseLong ( freeSpace ) ; if ( bytes < _NUM ) { throw new IOException ( _STR + DF + _STR + _STR + path + _STR ) ; } return bytes ; } catch ( NumberFormatException ex ) { throw new IOExceptionWithCause ( _STR + DF + _STR + _STR + path + _STR , ex ) ; } }
35691	public String findInterlanguageLink ( String lang ) { int start = page . indexOf ( _STR + lang + _STR ) ; if ( start < _NUM ) return null ; int end = page . indexOf ( _STR , start ) ; if ( end < _NUM ) return null ; String link = page . substring ( start + _NUM + lang . length ( ) , end ) ; if ( link . indexOf ( _STR ) != - _NUM ) { return null ; } if ( link . length ( ) == _NUM ) return null ; return link ; }
37190	private void updateActions ( final INaviAddressSpace addressSpace ) { m_loadAddressSpaceAction . setEnabled ( ! addressSpace . isLoaded ( ) ) ; }
86544	public static < T > ParallelFlux < T > from ( Publisher < ? extends T > source , int parallelism ) { return from ( source , parallelism , QueueSupplier . SMALL_BUFFER_SIZE , QueueSupplier . small ( ) ) ; }
28478	private static void cleanDirectoryOnExit ( File directory ) throws IOException { if ( ! directory . exists ( ) ) { String message = directory + _STR ; throw new IllegalArgumentException ( message ) ; } if ( ! directory . isDirectory ( ) ) { String message = directory + _STR ; throw new IllegalArgumentException ( message ) ; } File [ ] files = directory . listFiles ( ) ; if ( files == null ) { throw new IOException ( _STR + directory ) ; } IOException exception = null ; for ( File file : files ) { try { forceDeleteOnExit ( file ) ; } catch ( IOException ioe ) { exception = ioe ; } } if ( null != exception ) { throw exception ; } }
86215	private void addGumball ( float xPos , float yPos ) { Gumball gumball = new Gumball ( ) ; gumball . mXInitPos = xPos ; gumball . mYInitPos = yPos ; gumball . mSoundPoolId = UUID . randomUUID ( ) ; mSoundPoolId . put ( gumball . mSoundPoolId , _BOOL ) ; mGameView . addGumball ( gumball ) ; mSoundPool . play ( mSoundBallDrop , _NUM , _NUM , _NUM , _NUM , _NUM ) ; }
1640	int put ( T segment , List < ? super T > recycleBin ) { int count ; if ( lastCount == _NUM ) { count = _NUM ; lastCount = _NUM ; last = segment ; } else if ( Objects . deepEquals ( last , segment ) ) { ++ lastCount ; count = _NUM ; recycleBin . add ( segment ) ; } else { count = lastCount ; lastCount = _NUM ; last = segment ; } return count ; }
59320	@ KnownFailure ( _STR ) public void testDelete6 ( ) throws SQLException { DatabaseCreator . fillFKStrictTable ( conn ) ; statement . execute ( _STR + DatabaseCreator . FKSTRICT_TABLE + _STR + DatabaseCreator . PARENT_TABLE + _STR ) ; ResultSet r = statement . executeQuery ( _STR + DatabaseCreator . FKSTRICT_TABLE + _STR ) ; r . next ( ) ; assertEquals ( _STR , _NUM , r . getInt ( _NUM ) ) ; r . close ( ) ; }
69621	public Channel chan ( final String topic , final JsonNode payload ) { LOG . log ( Level . FINE , _STR , new Object [ ] { topic , payload } ) ; final Channel channel = new Channel ( topic , payload , Socket . this ) ; synchronized ( channels ) { channels . add ( channel ) ; } return channel ; }
5038	public PlaPointFloat change_size ( double p_new_size ) { if ( v_x == _NUM && v_y == _NUM ) { return this ; } double length = Math . sqrt ( v_x * v_x + v_y * v_y ) ; double new_x = ( v_x * p_new_size ) / length ; double new_y = ( v_y * p_new_size ) / length ; return new PlaPointFloat ( new_x , new_y ) ; }
3359	int insert ( Row row , byte [ ] sourceBuffer , int sourceOffset , BlobOutputStream [ ] blobs ) { int rowHead = _rowHead ; int blobTail = _blobTail ; int rowLength = row . length ( ) ; rowHead -= rowLength ; if ( rowHead < blobTail ) { return - _NUM ; } byte [ ] buffer = _buffer ; System . arraycopy ( sourceBuffer , sourceOffset , buffer , rowHead , rowLength ) ; buffer [ rowHead ] = ( byte ) ( ( buffer [ rowHead ] & ~ CODE_MASK ) | INSERT ) ; blobTail = row . insertBlobs ( buffer , rowHead , blobTail , blobs ) ; if ( blobTail < _NUM ) { return - _NUM ; } setBlobTail ( blobTail ) ; rowHead ( rowHead ) ; validateBlock ( row ) ; return rowHead ; }
31779	private void addDefaultUri ( ) throws IgniteSpiException { assert uriEncodedList != null ; URI uri ; try { uri = U . resolveWorkDirectory ( DFLT_DEPLOY_DIR , _BOOL ) . toURI ( ) ; } catch ( IgniteCheckedException e ) { throw new IgniteSpiException ( _STR , e ) ; } uriEncodedList . add ( uri ) ; }
86825	protected void transfer ( String seqRange ) throws IOException { try { final int rangePos = seqRange . indexOf ( _STR ) ; if ( rangePos == - _NUM ) { transfer ( Long . parseLong ( seqRange ) ) ; } else { final String start = seqRange . substring ( _NUM , rangePos ) ; final String end = seqRange . substring ( rangePos + _NUM ) ; final long startIdx ; if ( start . length ( ) == _NUM ) { startIdx = _NUM ; } else { startIdx = Long . parseLong ( start ) ; } final long endIdx ; if ( end . length ( ) == _NUM ) { endIdx = mReader . numberSequences ( ) - _NUM ; } else { endIdx = Long . parseLong ( end ) ; } if ( startIdx > endIdx ) { throw new NumberFormatException ( _STR + seqRange ) ; } for ( long i = startIdx ; i <= endIdx ; i ++ ) { transfer ( i ) ; } } } catch ( final NumberFormatException e ) { warnInvalidSequence ( seqRange ) ; } }
71090	public static double distancePointLinePerpendicular ( Coordinate p , Coordinate A , Coordinate B ) { double len2 = ( B . x - A . x ) * ( B . x - A . x ) + ( B . y - A . y ) * ( B . y - A . y ) ; double s = ( ( A . y - p . y ) * ( B . x - A . x ) - ( A . x - p . x ) * ( B . y - A . y ) ) / len2 ; return Math . abs ( s ) * Math . sqrt ( len2 ) ; }
17844	BigInteger copy ( ) { prepareJavaRepresentation ( ) ; int [ ] copyDigits = new int [ numberLength ] ; System . arraycopy ( digits , _NUM , copyDigits , _NUM , numberLength ) ; return new BigInteger ( sign , numberLength , copyDigits ) ; }
58457	public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . replaceData ( _NUM , _NUM , _STR ) ; childData = child . getData ( ) ; assertEquals ( _STR , _STR , childData ) ; }
71999	public String patchFixIds ( ) { return properties . getProperty ( _STR ) ; }
82414	public final void readFully ( byte [ ] b ) throws java . io . IOException { readFully ( b , _NUM , b . length ) ; }
37182	private void createGui ( ) { final JPanel outerNamePanel = new JPanel ( new BorderLayout ( ) ) ; outerNamePanel . setBorder ( new TitledBorder ( _STR ) ) ; final JPanel namePanel = new JPanel ( new BorderLayout ( ) ) ; namePanel . setBorder ( new EmptyBorder ( _NUM , _NUM , _NUM , _NUM ) ) ; final JLabel nameLabel = new CHelpLabel ( _STR + _STR , new CNameHelp ( ) ) ; nameLabel . setPreferredSize ( new Dimension ( _NUM , _NUM ) ) ; namePanel . add ( nameLabel , BorderLayout . WEST ) ; namePanel . add ( m_nameTextField , BorderLayout . CENTER ) ; outerNamePanel . add ( namePanel , BorderLayout . CENTER ) ; final JPanel outerDescriptionPanel = new JPanel ( new BorderLayout ( ) ) ; outerDescriptionPanel . setBorder ( new EmptyBorder ( _NUM , _NUM , _NUM , _NUM ) ) ; final JPanel descriptionPanel = new JPanel ( new BorderLayout ( ) ) ; descriptionPanel . setBorder ( new TitledBorder ( _STR ) ) ; descriptionPanel . setMinimumSize ( new Dimension ( _NUM , _NUM ) ) ; descriptionPanel . add ( new JScrollPane ( m_descriptionField ) ) ; outerDescriptionPanel . add ( descriptionPanel , BorderLayout . CENTER ) ; final JPanel buttonPanel = new JPanel ( new GridLayout ( _NUM , _NUM ) ) ; buttonPanel . add ( new JPanel ( ) ) ; buttonPanel . setBorder ( new EmptyBorder ( _NUM , _NUM , _NUM , _NUM ) ) ; buttonPanel . add ( m_saveButton ) ; final JPanel topPanel = new JPanel ( new BorderLayout ( ) ) ; topPanel . add ( outerNamePanel , BorderLayout . NORTH ) ; topPanel . add ( outerDescriptionPanel , BorderLayout . CENTER ) ; topPanel . add ( buttonPanel , BorderLayout . SOUTH ) ; final JPanel bottomPanel = new JPanel ( new BorderLayout ( ) ) ; bottomPanel . setBorder ( m_tableBorder ) ; final JScrollPane scrollPane = new JScrollPane ( m_childrenTagTable ) ; bottomPanel . add ( scrollPane , BorderLayout . CENTER ) ; final JSplitPane splitPane = new JSplitPane ( JSplitPane . VERTICAL_SPLIT , _BOOL , topPanel , bottomPanel ) ; splitPane . setOneTouchExpandable ( _BOOL ) ; splitPane . setDividerLocation ( splitPane . getMinimumDividerLocation ( ) ) ; splitPane . setResizeWeight ( _NUM ) ; add ( splitPane ) ; }
40745	public static boolean isJellybeanOrLater ( ) { return Build . VERSION . SDK_INT >= Build . VERSION_CODES . JELLY_BEAN ; }
52074	public PartialCorrelationPdf ( int n , int k ) { this . n = n ; this . k = k ; double gammaRatio = gammaRatio ( n , k ) ; this . constant = ( _NUM / Math . pow ( Math . PI , _NUM ) ) * gammaRatio ; this . outsideExp = ( double ) ( n - k - _NUM ) / _NUM ; }
15616	private static boolean isEnabled ( ) { if ( SystemUtils . IS_OS_WINDOWS ) { return _BOOL ; } try { List < String > lines = CommandUtil . executeCommandAndGetLines ( Collections . singletonList ( _STR ) ) ; for ( String line : lines ) { if ( line . contains ( _STR ) ) { if ( line . contains ( _STR ) ) { Logger . info ( _STR ) ; return _BOOL ; } return _BOOL ; } } } catch ( Exception ex ) { } return _BOOL ; }
74774	public boolean validate ( ) { outputFile = new File ( outputPath ) ; if ( outputFile . exists ( ) || outputFile . isDirectory ( ) ) { invalidMessage = _STR ; return valid = _BOOL ; } if ( ! signMode ) { keyFile = new File ( keyFilePath ) ; if ( ! keyFile . exists ( ) || keyFile . isDirectory ( ) ) { invalidMessage = _STR ; return valid = _BOOL ; } } return valid = _BOOL ; }
81841	public void addResponseCodeListener ( ActionListener a ) { responseCodeListeners . addElement ( a ) ; }
84572	public double calculateLogLikelihood ( ) { double logL = _NUM ; for ( Statistic statistic : dataList ) { for ( int j = _NUM ; j < statistic . getDimension ( ) ; j ++ ) { logL -= Math . log ( statistic . getStatisticValue ( j ) ) ; } } return logL ; }
77069	public static boolean hasDeadStatesFromInitial ( Automaton a ) { BitSet reachableFromInitial = getLiveStatesFromInitial ( a ) ; BitSet reachableFromAccept = getLiveStatesToAccept ( a ) ; reachableFromInitial . andNot ( reachableFromAccept ) ; return reachableFromInitial . isEmpty ( ) == _BOOL ; }
80724	public Decimal subtract ( Decimal decimal ) { assertDefined ( ) ; if ( null == m_value ) { return ( decimal ) ; } BigDecimal value = m_value . subtract ( decimal . getBigDecimalValue ( ) ) ; return new Decimal ( value , SCALE ) ; }
52028	public final boolean equals ( Object object ) { if ( object == null ) { return _BOOL ; } if ( ! ( object instanceof KnowledgeEdge ) ) { return _BOOL ; } KnowledgeEdge pair = ( KnowledgeEdge ) object ; return from . equals ( pair . from ) && to . equals ( pair . to ) ; }
27345	protected int skipLine ( int c ) throws IOException { while ( c != - _NUM && c != _STR && c != _STR ) { c = reader . read ( ) ; } if ( c == _STR ) { c = reader . read ( ) ; lineNo ++ ; reportLocation ( lineNo , _NUM ) ; } else if ( c == _STR ) { c = reader . read ( ) ; if ( c == _STR ) { c = reader . read ( ) ; } lineNo ++ ; reportLocation ( lineNo , _NUM ) ; } return c ; }
43215	@ Override public void listVolumes ( CommandInput input , CompletionHandler completionHandler ) { createOrUpdateTargetSsl ( input ) ; URI uri = UriUtils . extendUri ( input . getDockerUri ( ) , _STR ) ; sendGet ( uri , null , completionHandler ) ; }
24720	public static ByteBuffer base64StringToByteBuffer ( String base64EncodedKey ) { return ByteBuffer . wrap ( base64DecodeString ( base64EncodedKey ) ) ; }
51086	public boolean step ( ) { long current = System . currentTimeMillis ( ) ; if ( mStart == _NUM || ( current - mStart < _NUM ) ) { mProgress = _NUM ; } else if ( current - mStart > mDuration ) { if ( mLoop ) { mProgress = _NUM ; start ( ) ; return _BOOL ; } mProgress = _NUM ; return _BOOL ; } else { mProgress = ( current - mStart ) / ( double ) mDuration ; } return _BOOL ; }
52340	protected void load_raw_characters ( StringBuilder sb ) throws IOException { int c = read_char ( ) ; for ( ; ; ) { c = read_char ( ) ; switch ( c ) { case CharacterSequence . CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1 : case CharacterSequence . CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2 : case CharacterSequence . CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3 : continue ; case - _NUM : return ; default : if ( ! IonTokenConstsX . is7bitValue ( c ) ) { c = read_large_char_sequence ( c ) ; } } if ( IonUTF8 . needsSurrogateEncoding ( c ) ) { sb . append ( IonUTF8 . highSurrogate ( c ) ) ; c = IonUTF8 . lowSurrogate ( c ) ; } sb . append ( ( char ) c ) ; } }
29504	public SignatureFakingOracle ( final String documentString ) throws SignatureFakingException { Security . addProvider ( new BouncyCastleProvider ( ) ) ; signatureValueElements = new LinkedList < Node > ( ) ; keyInfoElements = new LinkedList < Node > ( ) ; certificates = new LinkedList < String > ( ) ; certHandlers = new LinkedList < CertificateHandler > ( ) ; try { doc = DomUtilities . stringToDom ( documentString ) ; crawlSignatureElements ( ) ; log . debug ( _STR + signatureValueElements . size ( ) + _STR ) ; crawlKeyInfoElements ( ) ; log . debug ( _STR + keyInfoElements . size ( ) + _STR ) ; } catch ( SAXException e ) { throw new SignatureFakingException ( e ) ; } }
27290	public ArbitraryLengthPathNode ( final TermNode left , final TermNode right , final VarNode tVarLeft , final VarNode tVarRight , final long lowerBound , final long upperBound ) { this ( new BOp [ ] { new JoinGroupNode ( ) } , NV . asMap ( new NV ( Annotations . LEFT_TERM , left ) , new NV ( Annotations . RIGHT_TERM , right ) , new NV ( Annotations . TRANSITIVITY_VAR_LEFT , tVarLeft ) , new NV ( Annotations . TRANSITIVITY_VAR_RIGHT , tVarRight ) , new NV ( Annotations . DROP_VARS , new ArrayList < VarNode > ( ) ) , new NV ( Annotations . LOWER_BOUND , lowerBound ) , new NV ( Annotations . UPPER_BOUND , upperBound ) ) ) ; final Set < VarNode > dropVars = new LinkedHashSet < > ( ) ; dropVars . add ( tVarLeft ) ; dropVars . add ( tVarRight ) ; setProperty ( Annotations . DROP_VARS , dropVars ) ; }
72629	public void addChangingListener ( OnWheelChangedListener listener ) { changingListeners . add ( listener ) ; }
65433	private Integer scanYamlDirectiveNumber ( Mark startMark ) { char ch = reader . peek ( ) ; if ( ! Character . isDigit ( ch ) ) { throw new ScannerException ( _STR , startMark , _STR + ch + _STR + ( ( int ) ch ) + _STR , reader . getMark ( ) ) ; } int length = _NUM ; while ( Character . isDigit ( reader . peek ( length ) ) ) { length ++ ; } Integer value = Integer . parseInt ( reader . prefixForward ( length ) ) ; return value ; }
75755	public static final String toBitString ( int i [ ] ) { StringBuilder sb = new StringBuilder ( i . length ) ; for ( int b : i ) { sb . append ( b ) ; } return sb . toString ( ) ; }
64839	public static ByteBuffer convertToSigned16BitSamples ( Buffer buffer ) { return convertToSigned16BitSamples ( buffer . getSamples ( ) ) ; }
53935	boolean checkToken ( ByteWrapper token , Key nodeId , InetAddress ip , int port , Key lookupKey ) { updateTokenTimestamps ( ) ; boolean valid = checkToken ( token , nodeId , ip , port , lookupKey , timestampCurrent . get ( ) ) || checkToken ( token , nodeId , ip , port , lookupKey , timestampPrevious ) ; if ( ! valid ) DHT . logDebug ( _STR + ip . getHostAddress ( ) ) ; return valid ; }
22358	private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( _STR ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
36400	public void expandAll ( ) { cancelEditing ( ) ; final TreeModel tm = getModel ( ) ; final Object root = tm . getRoot ( ) ; if ( root != null ) { expandAllPaths ( new TreePath ( root ) , tm ) ; } }
27253	protected void describeVocabularies ( final IVCount [ ] predicatePartitionCounts ) { final Set < String > namespaces = new LinkedHashSet < String > ( ) ; { for ( IVCount tmp : predicatePartitionCounts ) { final URI p = ( URI ) tmp . getValue ( ) ; String namespace = p . getNamespace ( ) ; if ( namespace . endsWith ( _STR ) ) { namespace = namespace . substring ( _NUM , namespace . length ( ) - _NUM ) ; } namespaces . add ( namespace ) ; } } final String [ ] a = namespaces . toArray ( new String [ namespaces . size ( ) ] ) ; Arrays . sort ( a ) ; for ( String namespace : a ) { g . add ( aDataset , VoidVocabularyDecl . vocabulary , f . createURI ( namespace ) ) ; } }
2248	public void testInvokeAny4 ( ) throws Throwable { CountDownLatch latch = new CountDownLatch ( _NUM ) ; ExecutorService e = new ForkJoinPool ( _NUM ) ; PoolCleaner cleaner = null ; try { cleaner = cleaner ( e ) ; List < Callable < String > > l = new ArrayList < Callable < String > > ( ) ; l . add ( latchAwaitingStringTask ( latch ) ) ; l . add ( null ) ; try { e . invokeAny ( l ) ; shouldThrow ( ) ; } catch ( NullPointerException success ) { } latch . countDown ( ) ; } finally { if ( cleaner != null ) { cleaner . close ( ) ; } } }
36614	private static void solve_l2r_l1l2_svr ( Problem prob , double [ ] w , Parameter param ) { int l = prob . l ; double C = param . C ; double p = param . p ; int w_size = prob . n ; double eps = param . eps ; int i , s , iter = _NUM ; int max_iter = _NUM ; int active_size = l ; int [ ] index = new int [ l ] ; double d , G , H ; double Gmax_old = Double . POSITIVE_INFINITY ; double Gmax_new , Gnorm1_new ; double Gnorm1_init = _NUM ; double [ ] beta = new double [ l ] ; double [ ] QD = new double [ l ] ; double [ ] y = prob . y ; double [ ] lambda = new double [ ] { _NUM / C } ; double [ ] upper_bound = new double [ ] { Double . POSITIVE_INFINITY } ; if ( param . solverType == SolverType . L2R_L1LOSS_SVR_DUAL ) { lambda [ _NUM ] = _NUM ; upper_bound [ _NUM ] = C ; } for ( i = _NUM ; i < l ; i ++ ) { beta [ i ] = _NUM ; } for ( i = _NUM ; i < w_size ; i ++ ) { w [ i ] = _NUM ; } for ( i = _NUM ; i < l ; i ++ ) { QD [ i ] = _NUM ; for ( Feature xi : prob . x [ i ] ) { double val = xi . getValue ( ) ; QD [ i ] += val * val ; w [ xi . getIndex ( ) - _NUM ] += beta [ i ] * val ; } index [ i ] = i ; } while ( iter < max_iter ) { Gmax_new = _NUM ; Gnorm1_new = _NUM ; for ( i = _NUM ; i < active_size ; i ++ ) { int j = i + random . nextInt ( active_size - i ) ; swap ( index , i , j ) ; } for ( s = _NUM ; s < active_size ; s ++ ) { i = index [ s ] ; G = - y [ i ] + lambda [ GETI_SVR ( i ) ] * beta [ i ] ; H = QD [ i ] + lambda [ GETI_SVR ( i ) ] ; for ( Feature xi : prob . x [ i ] ) { int ind = xi . getIndex ( ) - _NUM ; double val = xi . getValue ( ) ; G += val * w [ ind ] ; } double Gp = G + p ; double Gn = G - p ; double violation = _NUM ; if ( beta [ i ] == _NUM ) { if ( Gp < _NUM ) { violation = - Gp ; } else if ( Gn > _NUM ) { violation = Gn ; } else if ( Gp > Gmax_old && Gn < - Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; continue ; } } else if ( beta [ i ] >= upper_bound [ GETI_SVR ( i ) ] ) { if ( Gp > _NUM ) { violation = Gp ; } else if ( Gp < - Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; continue ; } } else if ( beta [ i ] <= - upper_bound [ GETI_SVR ( i ) ] ) { if ( Gn < _NUM ) { violation = - Gn ; } else if ( Gn > Gmax_old ) { active_size -- ; swap ( index , s , active_size ) ; s -- ; continue ; } } else if ( beta [ i ] > _NUM ) { violation = Math . abs ( Gp ) ; } else { violation = Math . abs ( Gn ) ; } Gmax_new = Math . max ( Gmax_new , violation ) ; Gnorm1_new += violation ; if ( Gp < H * beta [ i ] ) { d = - Gp / H ; } else if ( Gn > H * beta [ i ] ) { d = - Gn / H ; } else { d = - beta [ i ] ; } if ( Math . abs ( d ) < _NUM ) { continue ; } double beta_old = beta [ i ] ; beta [ i ] = Math . min ( Math . max ( beta [ i ] + d , - upper_bound [ GETI_SVR ( i ) ] ) , upper_bound [ GETI_SVR ( i ) ] ) ; d = beta [ i ] - beta_old ; if ( d != _NUM ) { for ( Feature xi : prob . x [ i ] ) { w [ xi . getIndex ( ) - _NUM ] += d * xi . getValue ( ) ; } } } if ( iter == _NUM ) { Gnorm1_init = Gnorm1_new ; } iter ++ ; if ( iter % _NUM == _NUM ) { info ( _STR ) ; } if ( Gnorm1_new <= eps * Gnorm1_init ) { if ( active_size == l ) { break ; } else { active_size = l ; info ( _STR ) ; Gmax_old = Double . POSITIVE_INFINITY ; continue ; } } Gmax_old = Gmax_new ; } info ( _STR , iter ) ; if ( iter >= max_iter ) { info ( _STR ) ; } double v = _NUM ; int nSV = _NUM ; for ( i = _NUM ; i < w_size ; i ++ ) { v += w [ i ] * w [ i ] ; } v = _NUM * v ; for ( i = _NUM ; i < l ; i ++ ) { v += p * Math . abs ( beta [ i ] ) - y [ i ] * beta [ i ] + _NUM * lambda [ GETI_SVR ( i ) ] * beta [ i ] * beta [ i ] ; if ( beta [ i ] != _NUM ) { nSV ++ ; } } info ( _STR , v ) ; info ( _STR , nSV ) ; }
74518	public SignalGroupSubTableAction ( String s ) { }
76089	public static List < String > generateXVals ( int from , int to ) { List < String > xvals = new ArrayList < String > ( ) ; for ( int i = from ; i < to ; i ++ ) { xvals . add ( _STR + i ) ; } return xvals ; }
58911	public void testCompareToDiffSigns1 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = - _NUM ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; assertEquals ( _NUM , aNumber . compareTo ( bNumber ) ) ; }
30795	private HashMap addAttr ( SvcReg reg , EntryClass eclass , int fldidx , Object value ) { HashMap [ ] attrMaps = serviceByAttr . get ( eclass ) ; if ( attrMaps == null ) { attrMaps = new HashMap [ eclass . getNumFields ( ) ] ; serviceByAttr . put ( eclass , attrMaps ) ; } HashMap map = attrMaps [ fldidx ] ; if ( map == null ) { map = new HashMap ( _NUM ) ; attrMaps [ fldidx ] = map ; } ArrayList regs = ( ArrayList ) map . get ( value ) ; if ( regs == null ) { regs = new ArrayList ( _NUM ) ; map . put ( value , regs ) ; } else if ( regs . contains ( reg ) ) return map ; regs . add ( reg ) ; return map ; }
85889	public QueryStringDecoderUtil ( URI uri ) { this ( uri , Charset . defaultCharset ( ) ) ; }
44160	public static float [ ] cmykFromRgb ( int rgbColor ) { int red = ( _NUM & rgbColor ) > > _NUM ; int green = ( _NUM & rgbColor ) > > _NUM ; int blue = ( _NUM & rgbColor ) ; float black = Math . min ( _NUM - red / _NUM , Math . min ( _NUM - green / _NUM , _NUM - blue / _NUM ) ) ; float cyan = _NUM ; float magenta = _NUM ; float yellow = _NUM ; if ( black != _NUM ) { cyan = ( _NUM - ( red / _NUM ) - black ) / ( _NUM - black ) ; magenta = ( _NUM - ( green / _NUM ) - black ) / ( _NUM - black ) ; yellow = ( _NUM - ( blue / _NUM ) - black ) / ( _NUM - black ) ; } return new float [ ] { cyan , magenta , yellow , black } ; }
70836	public void removeSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { return ; } mListeners . remove ( listener ) ; }
82238	public static void showErrorMessage ( String msg ) { showErrorMessage ( msg , _NUM ) ; }
18368	public final static NameValuePair parseNameValuePair ( final String value , HeaderValueParser parser ) throws ParseException { if ( value == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( parser == null ) parser = BasicHeaderValueParser . DEFAULT ; CharArrayBuffer buffer = new CharArrayBuffer ( value . length ( ) ) ; buffer . append ( value ) ; ParserCursor cursor = new ParserCursor ( _NUM , value . length ( ) ) ; return parser . parseNameValuePair ( buffer , cursor ) ; }
26410	public static String stripCharsInBag ( String s , String bag ) { int i ; StringBuilder stringBuilder = new StringBuilder ( _STR ) ; for ( i = _NUM ; i < s . length ( ) ; i ++ ) { char c = s . charAt ( i ) ; if ( bag . indexOf ( c ) == - _NUM ) stringBuilder . append ( c ) ; } return stringBuilder . toString ( ) ; }
6930	public static double cos ( double radians ) { return Math . cos ( radians ) ; }
60133	public static String formatNumber ( float number , int digitCount , boolean separateThousands ) { char [ ] out = new char [ _NUM ] ; boolean neg = _BOOL ; if ( number == _NUM ) { return _STR ; } boolean zero = _BOOL ; if ( number < _NUM && number > - _NUM ) { zero = _BOOL ; } if ( number < _NUM ) { neg = _BOOL ; number = - number ; } if ( digitCount > POW_10 . length ) { digitCount = POW_10 . length - _NUM ; } number *= POW_10 [ digitCount ] ; long lval = Math . round ( number ) ; int ind = out . length - _NUM ; int charCount = _NUM ; boolean decimalPointAdded = _BOOL ; while ( lval != _NUM || charCount < ( digitCount + _NUM ) ) { int digit = ( int ) ( lval % _NUM ) ; lval = lval / _NUM ; out [ ind -- ] = ( char ) ( digit + _STR ) ; charCount ++ ; if ( charCount == digitCount ) { out [ ind -- ] = _STR ; charCount ++ ; decimalPointAdded = _BOOL ; } else if ( separateThousands && lval != _NUM && charCount > digitCount ) { if ( decimalPointAdded ) { if ( ( charCount - digitCount ) % _NUM == _NUM ) { out [ ind -- ] = _STR ; charCount ++ ; } } else { if ( ( charCount - digitCount ) % _NUM == _NUM ) { out [ ind -- ] = _STR ; charCount ++ ; } } } } if ( zero ) { out [ ind -- ] = _STR ; charCount += _NUM ; } if ( neg ) { out [ ind -- ] = _STR ; charCount += _NUM ; } int start = out . length - charCount ; return String . valueOf ( out , start , out . length - start ) ; }
81615	@ Override protected void onDestroy ( ) { super . onDestroy ( ) ; doReallyStop ( _BOOL ) ; mFragments . dispatchDestroy ( ) ; if ( mLoaderManager != null ) { mLoaderManager . doDestroy ( ) ; } }
11337	public void removeVetoableChangeListener ( String propertyName , VetoableChangeListener in_vcl ) { beanContextChildSupport . removeVetoableChangeListener ( propertyName , in_vcl ) ; }
3256	static public boolean doesFileExist ( Context c , String fileName , long fileSize , boolean deleteFileOnMismatch ) { File fileForNewFile = new File ( Helpers . generateSaveFileName ( c , fileName ) ) ; if ( fileForNewFile . exists ( ) ) { if ( fileForNewFile . length ( ) == fileSize ) { return _BOOL ; } if ( deleteFileOnMismatch ) { fileForNewFile . delete ( ) ; } } return _BOOL ; }
49287	static WindowsFileAttributes fromFindData ( long address ) { int fileAttrs = unsafe . getInt ( address + OFFSETOF_FIND_DATA_ATTRIBUTES ) ; long creationTime = unsafe . getLong ( address + OFFSETOF_FIND_DATA_CREATETIME ) ; long lastAccessTime = unsafe . getLong ( address + OFFSETOF_FIND_DATA_LASTACCESSTIME ) ; long lastWriteTime = unsafe . getLong ( address + OFFSETOF_FIND_DATA_LASTWRITETIME ) ; long size = ( ( long ) ( unsafe . getInt ( address + OFFSETOF_FIND_DATA_SIZEHIGH ) ) << _NUM ) + ( unsafe . getInt ( address + OFFSETOF_FIND_DATA_SIZELOW ) & _NUM ) ; int reparseTag = isReparsePoint ( fileAttrs ) ? unsafe . getInt ( address + OFFSETOF_FIND_DATA_RESERVED0 ) : _NUM ; return new WindowsFileAttributes ( fileAttrs , creationTime , lastAccessTime , lastWriteTime , size , reparseTag , _NUM , _NUM , _NUM ) ; }
54656	public static final void writeMapXml ( Map val , XmlSerializer out , WriteMapCallback callback ) throws XmlPullParserException , IOException { if ( val == null ) { return ; } Set s = val . entrySet ( ) ; Iterator i = s . iterator ( ) ; while ( i . hasNext ( ) ) { Map . Entry e = ( Map . Entry ) i . next ( ) ; writeValueXml ( e . getValue ( ) , ( String ) e . getKey ( ) , out , callback ) ; } }
8601	public void fireEventProgrammatically ( Event event ) { if ( ! event . isConsumed ( ) ) ripplerPane . fireEvent ( event ) ; }
76450	private boolean hasFullEntry ( JsonValue entry , QuerySide querySide ) { if ( querySide == QuerySide . SOURCE && sourceQueryFullEntry != null ) { return sourceQueryFullEntry ; } else if ( querySide == QuerySide . TARGET && targetQueryFullEntry != null ) { return targetQueryFullEntry ; } if ( entry != null ) { short ignoreFields = _NUM ; if ( entry . isDefined ( _STR ) ) { ignoreFields ++ ; } if ( entry . isDefined ( _STR ) ) { ignoreFields ++ ; } ignoreFields += _NUM ; return entry . size ( ) > ignoreFields ; } else { return _BOOL ; } }
80804	public static boolean isModule ( IResource resource ) { return ( resource != null && TLA_EXTENSION . equals ( resource . getFileExtension ( ) ) ) ; }
78054	public int writeAnnotation ( Annotation annotation ) { int off = data . position ( ) ; writeByte ( annotation . visibility ) ; writeEncodedArray ( annotation . encodedAnnotation ) ; return off ; }
78007	public static long fromInet4Address ( final InetAddress inetAddress ) { ensureIsInet4Address ( inetAddress ) ; return Integer . toUnsignedLong ( inetAddress . hashCode ( ) ) ; }
15824	public boolean revisionContainsTemplateName ( int revId , String templateName ) throws WikiApiException { return revisionContainsTemplateNames ( revId , Arrays . asList ( new String [ ] { templateName } ) ) ; }
67789	public List < GenericEntry > retrieveAllAccountInfoRequests ( Date fromDate ) throws AppsForYourDomainException , IOException , ServiceException { String url = BASE_URL + _STR + domain ; if ( fromDate != null ) { url += _STR + DATE_FORMAT . format ( fromDate ) ; } return getAllPages ( new URL ( url ) , GenericFeed . class ) ; }
36711	protected void drawCylinder ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean isShadow ) { int h4 = h / _NUM ; int r = w - _NUM ; if ( fillColor != null || fillPaint != null ) { Area area = new Area ( new Rectangle ( x , y + h4 / _NUM , r , h - h4 ) ) ; area . add ( new Area ( new Rectangle ( x , y + h4 / _NUM , r , h - h4 ) ) ) ; area . add ( new Area ( new Ellipse2D . Double ( x , y , r , h4 ) ) ) ; area . add ( new Area ( new Ellipse2D . Double ( x , y + h - h4 , r , h4 ) ) ) ; if ( isShadow ) { g . setColor ( mxConstants . SHADOW_COLOR ) ; g . translate ( mxConstants . SHADOW_OFFSETX , mxConstants . SHADOW_OFFSETY ) ; g . fill ( area ) ; g . translate ( - mxConstants . SHADOW_OFFSETX , - mxConstants . SHADOW_OFFSETY ) ; } if ( fillPaint != null ) { g . setPaint ( fillPaint ) ; } else { g . setColor ( fillColor ) ; } g . fill ( area ) ; } if ( penColor != null ) { g . setColor ( penColor ) ; int h2 = h4 / _NUM ; g . drawOval ( x , y , r , h4 ) ; g . drawLine ( x , y + h2 , x , y + h - h2 ) ; g . drawLine ( x + w - _NUM , y + h2 , x + w - _NUM , y + h - h2 ) ; g . drawArc ( x , y + h - h4 , r , h4 , _NUM , - _NUM ) ; } }
63018	public StringList plus ( String ... args ) { StringList newList = new StringList ( ) ; newList . addAll ( this ) ; newList . addAll ( Arrays . asList ( args ) ) ; return newList ; }
8577	private void walkParseTree ( List < SwiftBaseListener > listeners , TopLevelContext tree ) { ParseTreeWalker walker = new ParseTreeWalker ( ) ; listeners . forEach ( null ) ; }
77662	@ Override public final char readChar ( ) throws IOException { dis . readFully ( work , _NUM , _NUM ) ; return ( char ) ( ( work [ _NUM ] & _NUM ) << _NUM | ( work [ _NUM ] & _NUM ) ) ; }
84522	public static int truncatedCompareTo ( final Date date1 , final Date date2 , final int field ) { final Date truncatedDate1 = truncate ( date1 , field ) ; final Date truncatedDate2 = truncate ( date2 , field ) ; return truncatedDate1 . compareTo ( truncatedDate2 ) ; }
43307	protected List < DecompoundedWord > makeSplit ( String aWord ) { List < DecompoundedWord > result = new ArrayList < DecompoundedWord > ( ) ; for ( int i = _NUM ; i < aWord . length ( ) ; i ++ ) { String leftWord = aWord . substring ( _NUM , i + _NUM ) ; String rightWord = aWord . substring ( i + _NUM ) ; boolean leftGood = dict . contains ( leftWord ) && leftWord . length ( ) >= minWordLength ; boolean rightGood = rightWord . length ( ) > minRestLength || rightWord . length ( ) == _NUM ; if ( leftGood && rightGood ) { DecompoundedWord split = DecompoundedWord . createFromString ( leftWord + _STR + rightWord ) ; split . setSplitPos ( i ) ; result . add ( split ) ; } for ( String morpheme : morphemes . getAll ( ) ) { try { String leftWithoutMorpheme = leftWord . substring ( _NUM , leftWord . length ( ) - morpheme . length ( ) ) ; if ( leftWord . endsWith ( morpheme ) && dict . contains ( leftWithoutMorpheme ) && rightGood ) { DecompoundedWord split = DecompoundedWord . createFromString ( leftWithoutMorpheme + _STR + morpheme + _STR + rightWord ) ; split . setSplitPos ( i ) ; result . add ( split ) ; } } catch ( StringIndexOutOfBoundsException e ) { continue ; } } } return result ; }
28275	public static boolean isBookSearchUrl ( String url ) { return url . startsWith ( _STR ) || url . startsWith ( _STR ) ; }
66759	public static String classNamePath ( String className ) { String filename = className . replace ( _STR , File . separator ) ; filename = filename . replaceFirst ( _STR , _STR ) ; if ( filename . indexOf ( _STR ) > _NUM ) { filename = filename . substring ( _NUM , filename . indexOf ( _STR ) ) ; } return _STR + File . separator + filename + _STR ; }
16875	public void removeTitlePrefix ( String prfx ) { titlePrefix . remove ( prfx ) ; firePropertyChange ( TITLE_PREFIX , null , titlePrefix ) ; }
24090	public void send ( Set recipients , boolean multicast ) throws InterruptedException , ReplyException { final boolean isDebugEnabled = logger . isDebugEnabled ( ) ; if ( Thread . interrupted ( ) ) throw new InterruptedException ( ) ; recipients = new HashSet ( recipients ) ; DistributedMember me = originDm . getDistributionManagerId ( ) ; if ( recipients . contains ( me ) ) { recipients . remove ( me ) ; } if ( isDebugEnabled ) { logger . debug ( _STR , recipients ) ; } rp = new ReplyProcessor21 ( originDm , recipients ) ; processorId = rp . getProcessorId ( ) ; setRecipients ( recipients ) ; setMulticast ( multicast ) ; Set failures = originDm . putOutgoing ( this ) ; if ( failures != null && failures . size ( ) > _NUM ) { for ( Iterator i = failures . iterator ( ) ; i . hasNext ( ) ; ) { InternalDistributedMember mbr = ( InternalDistributedMember ) i . next ( ) ; if ( isDebugEnabled ) { logger . debug ( _STR , mbr ) ; } } } rp . waitForReplies ( ) ; }
30563	private boolean isRelevant ( Object service , Entry [ ] attributes ) { LOOP : for ( Entry e : _serviceAttributes ) { for ( Entry en : attributes ) { if ( e . equals ( en ) ) continue LOOP ; } return _BOOL ; } boolean flag = _BOOL ; for ( Entry en : attributes ) { if ( _serviceName . equals ( en ) ) { flag = _BOOL ; break ; } } if ( ! flag ) return _BOOL ; flag = _BOOL ; for ( Class cl : _classes ) { if ( cl . isInstance ( service ) ) { flag = _BOOL ; break ; } } return flag ; }
60326	private static boolean eq ( Object o1 , Object o2 ) { return o1 == null ? o2 == null : o1 . equals ( o2 ) ; }
74232	public int findCarByRoadNumber ( String roadNumber ) { if ( sysList != null ) { if ( ! roadNumber . equals ( _roadNumber ) ) { return getIndex ( _NUM , roadNumber ) ; } int index = getIndex ( _index , roadNumber ) ; if ( index > _NUM ) { return index ; } return getIndex ( _NUM , roadNumber ) ; } return - _NUM ; }
28974	@ SlashedClassName @ SuppressFBWarnings ( _STR ) public static String toSlashedClassName ( @ SlashedClassName ( when = When . UNKNOWN ) String className ) { if ( className . indexOf ( _STR ) >= _NUM ) { return DescriptorFactory . canonicalizeString ( className . replace ( _STR , _STR ) ) ; } return className ; }
75785	public static double P_AveragePrecision ( int y [ ] , int r [ ] ) { double avg_prec = _NUM ; int L = y . length ; List < Integer > ones = new ArrayList < Integer > ( ) ; for ( int j = _NUM ; j < L ; j ++ ) { if ( y [ j ] == _NUM ) { ones . add ( j ) ; } } if ( ones . size ( ) <= _NUM ) return _NUM ; for ( int j : ones ) { double s = _NUM ; for ( int k : ones ) { if ( r [ k ] <= r [ j ] ) { s ++ ; } } avg_prec += ( s / ( _NUM + r [ j ] ) ) ; } avg_prec /= ones . size ( ) ; return avg_prec ; }
74285	public Location newLocation ( String name ) { Location location = getLocationByName ( name ) ; if ( location == null ) { _id ++ ; location = new Location ( Integer . toString ( _id ) , name ) ; Integer oldSize = Integer . valueOf ( _locationHashTable . size ( ) ) ; _locationHashTable . put ( location . getId ( ) , location ) ; setDirtyAndFirePropertyChange ( LISTLENGTH_CHANGED_PROPERTY , oldSize , Integer . valueOf ( _locationHashTable . size ( ) ) ) ; } return location ; }
31874	@ Override public void close ( ) { closing = _BOOL ; if ( reservations == null || reservations . compareAndSet ( _NUM , - _NUM ) ) doClose ( ) ; }
56123	private void removeOMADownloadFromSharedPrefs ( long downloadId ) { Set < String > omaDownloads = getStoredDownloadInfo ( PENDING_OMA_DOWNLOADS ) ; for ( String omaDownload : omaDownloads ) { OMAEntry entry = OMAEntry . parseOMAEntry ( omaDownload ) ; if ( entry . mDownloadId == downloadId ) { omaDownloads . remove ( omaDownload ) ; storeDownloadInfo ( PENDING_OMA_DOWNLOADS , omaDownloads ) ; return ; } } }
51009	public static boolean isAndroidSdkDirInLocalPropertiesFile ( @ NotNull File projectDir ) { String androidHome = getAndroidHomeFromLocalPropertiesFile ( projectDir ) ; if ( ! Strings . isNullOrEmpty ( androidHome ) ) { String msg = String . format ( _STR , androidHome ) ; LOG . info ( msg ) ; return _BOOL ; } return _BOOL ; }
23356	public static boolean hasTokenInformation ( Bundle bundle ) { if ( bundle == null ) { return _BOOL ; } String token = bundle . getString ( TOKEN_KEY ) ; if ( ( token == null ) || ( token . length ( ) == _NUM ) ) { return _BOOL ; } long expiresMilliseconds = bundle . getLong ( EXPIRATION_DATE_KEY , _NUM ) ; if ( expiresMilliseconds == _NUM ) { return _BOOL ; } return _BOOL ; }
5776	public void resetPolicy ( ) { mPreferences . putString ( PREF_LAST_RESPONSE , Integer . toString ( Policy . RETRY ) ) ; setRetryUntil ( DEFAULT_RETRY_UNTIL ) ; setMaxRetries ( DEFAULT_MAX_RETRIES ) ; setRetryCount ( Long . parseLong ( DEFAULT_RETRY_COUNT ) ) ; setValidityTimestamp ( DEFAULT_VALIDITY_TIMESTAMP ) ; mPreferences . commit ( ) ; }
38741	@ Override public boolean connectionAllowed ( String eventName ) { if ( eventName . equals ( _STR ) && m_listenees . containsKey ( eventName ) ) { return _BOOL ; } return _BOOL ; }
2464	public static Vector2 pow ( Vector2 o , double power ) { return new Vector2 ( Math . pow ( o . x , power ) , Math . pow ( o . z , power ) ) ; }
39483	public static Object invokeStatic ( String clazz , String methodName , Class [ ] types , Object [ ] values ) throws NoSuchMethodException { try { return invokeStatic ( Class . forName ( clazz ) , methodName , types , values ) ; } catch ( ClassNotFoundException e ) { throw new NoSuchMethodException ( _STR + clazz + _STR ) ; } }
31549	public Prototype undump ( InputStream stream , String chunkname ) throws IOException { if ( stream . read ( ) != LUA_SIGNATURE [ _NUM ] || stream . read ( ) != LUA_SIGNATURE [ _NUM ] || stream . read ( ) != LUA_SIGNATURE [ _NUM ] || stream . read ( ) != LUA_SIGNATURE [ _NUM ] ) return null ; String sname = getSourceName ( chunkname ) ; LoadState s = new LoadState ( stream , sname ) ; s . loadHeader ( ) ; switch ( s . luacNumberFormat ) { case NUMBER_FORMAT_FLOATS_OR_DOUBLES : case NUMBER_FORMAT_INTS_ONLY : case NUMBER_FORMAT_NUM_PATCH_INT32 : break ; default : throw new LuaError ( _STR ) ; } return s . loadFunction ( LuaString . valueOf ( sname ) ) ; }
11520	public void addButton ( URL url , String info , ActionListener al ) { JButton b = new JButton ( new ImageIcon ( url , info ) ) ; b . setToolTipText ( info ) ; b . setMargin ( new Insets ( _NUM , _NUM , _NUM , _NUM ) ) ; b . addActionListener ( al ) ; b . setBorderPainted ( _BOOL ) ; add ( b ) ; }
85905	private void mapRequestToResponses ( Matcher < Request > requestMatcher , ResponseSource responses ) { mappings . add ( new MatcherResponseSourcePair ( requestMatcher , responses ) ) ; }
24939	@ Override protected void commitToInput ( ) { JmxBeanSensorAssignment assignment = getInput ( ) ; if ( null != assignment ) { assignment . setDomain ( domainText . getText ( ) ) ; assignment . setObjectNameParameters ( new HashMap < > ( parametersMap ) ) ; if ( allAttributesButton . getSelection ( ) ) { assignment . setAttributes ( Collections . < String > emptySet ( ) ) ; } else { assignment . setAttributes ( new HashSet < > ( attributesSet ) ) ; } } }
81984	public static String [ ] split ( String original , String separator ) { Vector nodes = new Vector ( ) ; int index = original . indexOf ( separator ) ; while ( index >= _NUM ) { nodes . addElement ( original . substring ( _NUM , index ) ) ; original = original . substring ( index + separator . length ( ) ) ; index = original . indexOf ( separator ) ; } nodes . addElement ( original ) ; String [ ] ret = new String [ nodes . size ( ) ] ; for ( int i = _NUM ; i < nodes . size ( ) ; i ++ ) { ret [ i ] = ( String ) nodes . elementAt ( i ) ; } return ret ; }
42390	public void insertTwin ( Instruction inst , Instruction twin ) { ListIterator < GCIRMapElement > iter = list . listIterator ( ) ; while ( iter . hasNext ( ) ) { GCIRMapElement newPtr = iter . next ( ) ; if ( newPtr . getInstruction ( ) == inst ) { iter . add ( newPtr . createTwin ( twin ) ) ; return ; } } throw new OptimizingCompilerException ( _STR + inst + _STR ) ; }
82535	public java . lang . Object newInstance ( ) throws java . lang . InstantiationException , java . lang . IllegalAccessException { Object o = newInstanceImpl ( ) ; if ( o == null ) { throw new InstantiationException ( ) ; } return o ; }
57481	FormatSpecifierParser ( String format ) { this . format = format ; this . length = format . length ( ) ; }
43916	public static void toString ( Iterator < ? > iter , String separator , StringBuilder sb ) { while ( iter . hasNext ( ) ) { sb . append ( iter . next ( ) ) ; if ( iter . hasNext ( ) ) { sb . append ( separator ) ; } } }
55212	public boolean isFull ( ) { if ( maxSize > _NUM && notifications . size ( ) >= maxSize ) { return _BOOL ; } return _BOOL ; }
64939	private void schedulePlaylistSave ( ) { if ( ! mPlaylistLoading ) { if ( mPlaylistSavePending . compareAndSet ( _BOOL , _BOOL ) ) { mThreadPoolManager . scheduleOnce ( new PlaylistSaveTask ( ) , _NUM , TimeUnit . SECONDS ) ; } } }
74092	public boolean isToRead ( ) { Iterator < VariableValue > i = variables . iterator ( ) ; while ( i . hasNext ( ) ) { VariableValue v = i . next ( ) ; if ( v . isToRead ( ) ) { return _BOOL ; } } return _BOOL ; }
68444	public void actionPerformed ( ActionEvent e ) { navigateToPriorDemo ( ) ; }
38977	public String toString ( ) { StringBuffer text = new StringBuffer ( ) ; for ( int i = _NUM ; i < m_Elements . length ; i ++ ) { if ( i > _NUM ) text . append ( _STR ) ; text . append ( Utils . doubleToString ( m_Elements [ i ] , _NUM ) ) ; } text . append ( _STR ) ; return text . toString ( ) ; }
1427	@ Deprecated public static Integer Integer ( int i ) { return Integer . valueOf ( i ) ; }
85965	public void or ( Criteria criteria ) { oredCriteria . add ( criteria ) ; }
13476	public static void v ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_VERBOSE ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . v ( tag , msg ) ; }
81307	public void saveIndexes ( ) { ArrayList toSave = new ArrayList ( ) ; synchronized ( this ) { Object [ ] valueTable = this . indexes . valueTable ; for ( int i = _NUM , l = valueTable . length ; i < l ; i ++ ) { Index index = ( Index ) valueTable [ i ] ; if ( index != null ) toSave . add ( index ) ; } } boolean allSaved = _BOOL ; for ( int i = _NUM , length = toSave . size ( ) ; i < length ; i ++ ) { Index index = ( Index ) toSave . get ( i ) ; ReadWriteMonitor monitor = index . monitor ; if ( monitor == null ) continue ; try { monitor . enterRead ( ) ; if ( index . hasChanged ( ) ) { if ( monitor . exitReadEnterWrite ( ) ) { try { saveIndex ( index ) ; } catch ( IOException e ) { if ( VERBOSE ) { Util . verbose ( _STR , System . err ) ; e . printStackTrace ( ) ; } allSaved = _BOOL ; } finally { monitor . exitWriteEnterRead ( ) ; } } else { allSaved = _BOOL ; } } } finally { monitor . exitRead ( ) ; } } if ( this . participantsContainers != null && this . participantUpdated ) { writeParticipantsIndexNamesFile ( ) ; this . participantUpdated = _BOOL ; } this . needToSave = ! allSaved ; }
83569	private double match_bitapScore ( int e , int x , int loc , String pattern ) { float accuracy = ( float ) e / pattern . length ( ) ; int proximity = Math . abs ( loc - x ) ; if ( Match_Distance == _NUM ) { return proximity == _NUM ? accuracy : _NUM ; } return accuracy + ( proximity / ( float ) Match_Distance ) ; }
13482	private void movePos ( float deltaY ) { if ( ( deltaY < _NUM && mPtrIndicator . isInStartPosition ( ) ) ) { if ( DEBUG ) { PtrCLog . e ( LOG_TAG , String . format ( _STR ) ) ; } return ; } int to = mPtrIndicator . getCurrentPosY ( ) + ( int ) deltaY ; if ( mPtrIndicator . willOverTop ( to ) ) { if ( DEBUG ) { PtrCLog . e ( LOG_TAG , String . format ( _STR ) ) ; } to = PtrIndicator . POS_START ; } mPtrIndicator . setCurrentPos ( to ) ; int change = to - mPtrIndicator . getLastPosY ( ) ; updatePos ( change ) ; }
47244	public void putAll ( Map < ? extends K , ? extends V > m ) { tryPresize ( m . size ( ) ) ; for ( Map . Entry < ? extends K , ? extends V > e : m . entrySet ( ) ) putVal ( e . getKey ( ) , e . getValue ( ) , _BOOL ) ; }
46460	public UndoableEdit insertString ( int where , String str ) throws BadLocationException { if ( where >= count || where < _NUM ) { throw new BadLocationException ( _STR , count ) ; } char [ ] chars = str . toCharArray ( ) ; replace ( where , _NUM , chars , _NUM , chars . length ) ; if ( marks != null ) { updateMarksForInsert ( where , str . length ( ) ) ; } return new InsertUndo ( where , str . length ( ) ) ; }
54332	public String toString ( ) { return Byte . toString ( getValue ( ) ) ; }
41574	boolean writeData ( ) throws IOException { int tosend ; int sent ; byte [ ] block = new byte [ kBlockSize ] ; do { tosend = Math . min ( sendStreamSize - totalSent , block . length ) ; System . arraycopy ( sendData , totalSent , block , _NUM , tosend ) ; if ( tosend > _NUM ) { sent = localSend ( block , tosend ) ; updateLocalClock ( ) ; if ( sent != - _NUM ) { totalSent += sent ; } else { logger . log ( Level . FINE , _STR ) ; } } else { sent = tosend = _NUM ; } } while ( sent > _NUM ) ; if ( logger . isLoggable ( Level . FINER ) ) { logger . log ( Level . FINER , _STR + totalSent + _STR + ( sendStreamSize - totalSent ) ) ; } return tosend == _NUM ; }
82585	public static int copyAndCloseOutput ( Reader input , Writer output ) throws IOException { try { return copy ( input , output ) ; } finally { output . close ( ) ; } }
44803	public int checkBookiesUp ( int count , int timeout ) throws Exception { ZooKeeper zkc = connectZooKeeper ( zkHost , zkPort , zkTimeoutSec ) ; try { int mostRecentSize = _NUM ; for ( int i = _NUM ; i < timeout ; i ++ ) { try { List < String > children = zkc . getChildren ( _STR , _BOOL ) ; children . remove ( _STR ) ; mostRecentSize = children . size ( ) ; if ( ( mostRecentSize > count ) || LOG . isDebugEnabled ( ) ) { LOG . info ( _STR + mostRecentSize + _STR + _STR + count ) ; if ( ( mostRecentSize > count ) || LOG . isTraceEnabled ( ) ) { for ( String child : children ) { LOG . info ( _STR + child ) ; } } } if ( mostRecentSize == count ) { break ; } } catch ( KeeperException e ) { } Thread . sleep ( _NUM ) ; } return mostRecentSize ; } finally { zkc . close ( ) ; } }
11482	public Point2D inverseTransform ( Point2D src , Point2D dst ) { try { src . setLocation ( src . getX ( ) + rotXOffset , src . getY ( ) + rotYOffset ) ; dst = rotTransform . inverseTransform ( src , dst ) ; } catch ( NoninvertibleTransformException e ) { logger . log ( Level . FINE , e . getMessage ( ) , e ) ; } return dst ; }
8496	public static Throwable shouldFail ( Class clazz , Closure code ) { Throwable th = null ; try { code . call ( ) ; } catch ( GroovyRuntimeException gre ) { th = ScriptBytecodeAdapter . unwrap ( gre ) ; } catch ( Throwable e ) { th = e ; } if ( th == null ) { fail ( _STR + code + _STR + clazz . getName ( ) ) ; } else if ( ! clazz . isInstance ( th ) ) { fail ( _STR + code + _STR + clazz . getName ( ) + _STR + th ) ; } return th ; }
17508	public int write ( byte [ ] destMac , byte [ ] packet , int offset , int byteCount ) { if ( destMac == null ) { throw new NullPointerException ( _STR ) ; } if ( packet == null ) { throw new NullPointerException ( _STR ) ; } Arrays . checkOffsetAndCount ( packet . length , offset , byteCount ) ; if ( destMac . length != _NUM ) { throw new IllegalArgumentException ( _STR + destMac . length ) ; } return sendPacket ( fd , mInterfaceName , mProtocolType , destMac , packet , offset , byteCount ) ; }
57997	private Boolean processYESNO ( StylesheetHandler handler , String uri , String name , String rawName , String value ) throws org . xml . sax . SAXException { if ( ! ( value . equals ( _STR ) || value . equals ( _STR ) ) ) { handleError ( handler , XSLTErrorResources . INVALID_BOOLEAN , new Object [ ] { name , value } , null ) ; return null ; } return new Boolean ( value . equals ( _STR ) ? _BOOL : _BOOL ) ; }
65753	protected ArrayList < KeyNamePair > loadRMAData ( int C_BPartner_ID ) { ArrayList < KeyNamePair > list = new ArrayList < KeyNamePair > ( ) ; String sqlStmt = _STR + _STR + _STR + _STR + _STR ; PreparedStatement pstmt = null ; try { pstmt = DB . prepareStatement ( sqlStmt , null ) ; pstmt . setInt ( _NUM , C_BPartner_ID ) ; ResultSet rs = pstmt . executeQuery ( ) ; while ( rs . next ( ) ) { list . add ( new KeyNamePair ( rs . getInt ( _NUM ) , rs . getString ( _NUM ) ) ) ; } rs . close ( ) ; } catch ( SQLException e ) { log . log ( Level . SEVERE , sqlStmt . toString ( ) , e ) ; } finally { if ( pstmt != null ) { try { pstmt . close ( ) ; } catch ( Exception ex ) { log . severe ( _STR ) ; } } } return list ; }
30370	@ Override public List < WorkOrder > searchWOForBilling ( final Map < String , Object > criteriaMap ) { logger . debug ( _STR ) ; final List < WorkOrder > filteredList = new ArrayList < WorkOrder > ( ) ; criteriaMap . put ( ACTION_FLAG , _STR ) ; for ( final WorkOrder workorder : searchWO ( criteriaMap ) ) if ( ! isWOValidforBill ( workorder . getId ( ) ) ) filteredList . add ( workorder ) ; return filteredList ; }
7911	public Week ( Date time , TimeZone zone , Locale locale ) { ParamChecks . nullNotPermitted ( time , _STR ) ; ParamChecks . nullNotPermitted ( zone , _STR ) ; ParamChecks . nullNotPermitted ( locale , _STR ) ; Calendar calendar = Calendar . getInstance ( zone , locale ) ; calendar . setTime ( time ) ; int tempWeek = calendar . get ( Calendar . WEEK_OF_YEAR ) ; if ( tempWeek == _NUM && calendar . get ( Calendar . MONTH ) == Calendar . DECEMBER ) { this . week = _NUM ; this . year = ( short ) ( calendar . get ( Calendar . YEAR ) + _NUM ) ; } else { this . week = ( byte ) Math . min ( tempWeek , LAST_WEEK_IN_YEAR ) ; int yyyy = calendar . get ( Calendar . YEAR ) ; if ( calendar . get ( Calendar . MONTH ) == Calendar . JANUARY && this . week >= _NUM ) { yyyy -- ; } this . year = ( short ) yyyy ; } peg ( calendar ) ; }
27402	public ResourceQueue ( final NonBlockingLockManagerWithNewDesign < R > lockService , final R resource ) { if ( lockService == null ) throw new IllegalArgumentException ( ) ; if ( resource == null ) throw new IllegalArgumentException ( ) ; this . lockService = lockService ; this . resource = resource ; this . queue = new LinkedBlockingQueue < T > ( ) ; this . statisticsTask = new QueueSizeMovingAverageTask ( resource . toString ( ) , queue ) ; }
48161	public void encodeAndSign ( X500Name subject , Signature signature ) throws CertificateException , IOException , SignatureException { DerOutputStream out , scratch ; byte [ ] certificateRequestInfo ; byte [ ] sig ; if ( encoded != null ) throw new SignatureException ( _STR ) ; this . subject = subject ; scratch = new DerOutputStream ( ) ; scratch . putInteger ( BigInteger . ZERO ) ; subject . encode ( scratch ) ; scratch . write ( subjectPublicKeyInfo . getEncoded ( ) ) ; attributeSet . encode ( scratch ) ; out = new DerOutputStream ( ) ; out . write ( DerValue . tag_Sequence , scratch ) ; certificateRequestInfo = out . toByteArray ( ) ; scratch = out ; signature . update ( certificateRequestInfo , _NUM , certificateRequestInfo . length ) ; sig = signature . sign ( ) ; AlgorithmId algId = null ; try { algId = AlgorithmId . get ( signature . getAlgorithm ( ) ) ; } catch ( NoSuchAlgorithmException nsae ) { throw new SignatureException ( nsae ) ; } algId . encode ( scratch ) ; scratch . putBitString ( sig ) ; out = new DerOutputStream ( ) ; out . write ( DerValue . tag_Sequence , scratch ) ; encoded = out . toByteArray ( ) ; }
35913	public synchronized void schedulePeriodicTask ( TimerTask task , long period ) { try { m_timer . scheduleAtFixedRate ( task , _NUM , period ) ; } catch ( IllegalStateException ie ) { m_timer = new Timer ( ) ; m_timer . scheduleAtFixedRate ( task , _NUM , period ) ; } }
63785	public static String abbreviate ( String str , FontMetrics fm , int width ) { int lastblank = _NUM , nchars = _NUM , cumx = _NUM ; while ( cumx < width && nchars < str . length ( ) ) { if ( Character . isWhitespace ( str . charAt ( nchars ) ) ) { lastblank = nchars ; } cumx += fm . charWidth ( str . charAt ( nchars ) ) ; nchars ++ ; } if ( nchars < str . length ( ) && lastblank > _NUM ) { nchars = lastblank ; } return ( nchars > _NUM ? str . substring ( _NUM , nchars ) : str ) ; }
73928	protected void stopWraparoundTest ( ) { if ( testRunning && wrapTest ) { wrapTimer . stop ( ) ; statusText1 . setText ( _STR + Integer . toString ( numErrors ) + _STR ) ; statusText1 . setVisible ( _BOOL ) ; statusText2 . setText ( Integer . toString ( numIterations ) + _STR ) ; statusText2 . setVisible ( _BOOL ) ; } }
72451	protected void checkRowIndex ( final int row ) throws MathIllegalArgumentException { if ( row < _NUM || row >= getRowDimension ( ) ) { throw new MathIllegalArgumentException ( LocalizedCoreFormats . ROW_INDEX , row , _NUM , getRowDimension ( ) - _NUM ) ; } }
10529	private void nukeSymbols ( ) { _count = _NUM ; _longestCollisionList = _NUM ; Arrays . fill ( _mainHash , _NUM ) ; Arrays . fill ( _mainNames , null ) ; Arrays . fill ( _collList , null ) ; _collCount = _NUM ; _collEnd = _NUM ; }
32661	private static float determineEnemyBlitzStrength ( final Territory blitzHere , final List < Route > blitzTerrRoutes , final List < Territory > blockTerr , final GameData data , final PlayerID ePlayer ) { final HashSet < Integer > ignore = new HashSet < > ( ) ; ignore . add ( _NUM ) ; final CompositeMatch < Unit > blitzUnit = new CompositeMatchAnd < > ( Matches . unitIsOwnedBy ( ePlayer ) , Matches . UnitCanBlitz , Matches . UnitCanMove ) ; final CompositeMatch < Territory > validBlitzRoute = new CompositeMatchAnd < > ( Matches . territoryHasNoEnemyUnits ( ePlayer , data ) , Matches . TerritoryIsNotImpassableToLandUnits ( ePlayer , data ) ) ; final List < Route > routes = new ArrayList < > ( ) ; final List < Unit > blitzUnits = findAttackers ( blitzHere , _NUM , ignore , ePlayer , data , blitzUnit , validBlitzRoute , blockTerr , routes , _BOOL ) ; for ( final Route r : routes ) { if ( r . numberOfSteps ( ) == _NUM ) { blitzTerrRoutes . add ( r ) ; } } return strength ( blitzUnits , _BOOL , _BOOL , _BOOL ) ; }
50427	public Name join ( String identifier ) { validateLowerUnderscore ( identifier ) ; List < NamePiece > newPieceList = new ArrayList < > ( ) ; newPieceList . addAll ( namePieces ) ; newPieceList . add ( new NamePiece ( identifier , CaseFormat . LOWER_UNDERSCORE ) ) ; return new Name ( newPieceList ) ; }
69990	private LocalDateTime parseDate ( String dateStr , boolean tryAgain ) { LocalDateTime date = LocalDateTime . now ( ZoneId . of ( _STR ) ) ; if ( mDateTimeFormatter == null ) { initFormatter ( dateStr ) ; } if ( mDateTimeFormatter != null ) { try { date = LocalDateTime . parse ( dateStr , mDateTimeFormatter ) ; } catch ( DateTimeParseException e ) { Timber . d ( String . format ( _STR , dateStr ) ) ; if ( tryAgain ) { Timber . d ( _STR ) ; mDateTimeFormatter = null ; parseDate ( dateStr , _BOOL ) ; } } } return date ; }
22686	public String toString ( ) { String string = caller ; if ( level > _NUM || thread != - _NUM ) { string += _STR ; } if ( level > _NUM ) { string += level ; } if ( thread != - _NUM ) { string += _STR + thread ; } if ( level > _NUM || thread != - _NUM ) { string += _STR ; } string += _STR ; if ( spawnMessage ) { string += _STR ; } if ( answer . length ( ) > _NUM ) { string += answer + _STR ; } if ( callee . length ( ) > _NUM ) { string += callee + _STR ; } string += message ; if ( returnsInstantly ) { string += _STR ; } return string ; }
68776	public static boolean isWhiteSpace ( int c ) { switch ( c ) { case NUL_CHAR : case _STR : case _STR : case FF_CHAR : case _STR : case _STR : return _BOOL ; default : return _BOOL ; } }
54153	public void remove ( RequestFilter filter ) { filters . remove ( filter ) ; }
75658	protected void removeClassifiers ( int [ ] indices ) { int i ; if ( indices == null ) { m_ModelClassifiers . removeAllElements ( ) ; } else { for ( i = indices . length - _NUM ; i >= _NUM ; i -- ) m_ModelClassifiers . remove ( indices [ i ] ) ; } setModified ( _BOOL ) ; }
38864	@ Override public void addPropertyChangeListener ( PropertyChangeListener pcl ) { m_pcSupport . addPropertyChangeListener ( pcl ) ; }
40231	public int numCheckpoints ( ) { return checkpoints . size ( ) ; }
66115	public void addElement ( Object anObject ) { p_data . add ( anObject ) ; fireIntervalAdded ( this , p_data . size ( ) - _NUM , p_data . size ( ) - _NUM ) ; if ( p_data . size ( ) == _NUM && m_selectedObject == null && anObject != null ) setSelectedItem ( anObject ) ; }
78698	public Builder addListenUrls ( List < String > urls ) { List < String > needAdd = new ArrayList < String > ( ) ; for ( String url : urls ) { if ( ! UrlUtil . isUrl ( url ) ) { continue ; } needAdd . add ( url ) ; } if ( ! CollectionUtil . isEmpty ( needAdd ) ) { if ( mListenUrls == null ) { mListenUrls = new HashSet < String > ( ) ; } mListenUrls . addAll ( needAdd ) ; } return this ; }
21034	public void addAssignedVirtualArrays ( Set < String > virtualArrayURIs ) { if ( ( virtualArrayURIs != null ) && ( ! virtualArrayURIs . isEmpty ( ) ) ) { HashSet < String > addVirtualArrays = new HashSet < String > ( ) ; addVirtualArrays . addAll ( virtualArrayURIs ) ; if ( _assignedVirtualArrays == null ) { setAssignedVirtualArrays ( new StringSet ( ) ) ; _assignedVirtualArrays . addAll ( addVirtualArrays ) ; } else { _assignedVirtualArrays . addAll ( addVirtualArrays ) ; } updateVirtualArrayTags ( ) ; } }
20169	@ Override public boolean isCellEditable ( int row , int column ) { EnvVar envVar = dataList . get ( row ) ; if ( column == COL_VALUE ) { return _BOOL ; } return ! envVar . isPredefined ( ) ; }
45007	private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
69712	private boolean dropInTrash ( ) { if ( mHighlightedBlockView != null ) { mHighlightedBlockView . setHighlightedConnection ( null ) ; mHighlightedBlockView = null ; } mDraggedConnections . clear ( ) ; return mController . trashRootBlock ( mPendingDrag . getRootDraggedBlock ( ) ) ; }
8549	< T > List < T > concatValues ( final T [ ] ... data ) { final List < T > rv = new ArrayList < > ( ) ; for ( T [ ] values : data ) { rv . addAll ( Arrays . asList ( values ) ) ; } return rv ; }
52173	public DagIterator ( Graph pattern ) { for ( Edge edge : pattern . getEdges ( ) ) { if ( Edges . isDirectedEdge ( edge ) || Edges . isUndirectedEdge ( edge ) ) { continue ; } throw new IllegalArgumentException ( _STR + _STR + edge ) ; } decoratedGraphs . add ( new DecoratedGraph ( pattern ) ) ; }
64361	private boolean validateCustomCatalog ( String title , String value ) { return _BOOL ; }
24037	public FunctionExecutionPooledExecutor ( BlockingQueue < Runnable > q , int poolSize , PoolStatHelper stats , ThreadFactory tf ) { this ( q , poolSize , stats , tf , Integer . getInteger ( DistributionConfig . GEMFIRE_PREFIX + _STR , _NUM * _NUM ) , _BOOL ) ; }
31479	protected boolean isSSDPDiscovery ( String body ) { if ( body != null && body . startsWith ( _STR ) && body . contains ( _STR ) ) { return _BOOL ; } return _BOOL ; }
51642	@ Override public void addChild ( WXComponent child , int index ) { if ( child == null || index < - _NUM ) { return ; } if ( child instanceof WXBaseRefresh ) { if ( ! checkRefreshOrLoading ( child ) ) { mRefreshs . add ( child ) ; } return ; } if ( mChildren == null ) { mChildren = new ArrayList < > ( ) ; } int count = mChildren . size ( ) ; index = index >= count ? - _NUM : index ; if ( index == - _NUM ) { mChildren . add ( child ) ; } else { mChildren . add ( index , child ) ; } }
46343	private void restoreSortingSelection ( int [ ] selection , int lead , ModelChange change ) { for ( int i = selection . length - _NUM ; i >= _NUM ; i -- ) { selection [ i ] = convertRowIndexToView ( selection [ i ] , change ) ; } lead = convertRowIndexToView ( lead , change ) ; if ( selection . length == _NUM || ( selection . length == _NUM && selection [ _NUM ] == getSelectedRow ( ) ) ) { return ; } selectionModel . setValueIsAdjusting ( _BOOL ) ; selectionModel . clearSelection ( ) ; for ( int i = selection . length - _NUM ; i >= _NUM ; i -- ) { if ( selection [ i ] != - _NUM ) { selectionModel . addSelectionInterval ( selection [ i ] , selection [ i ] ) ; } } SwingUtilities2 . setLeadAnchorWithoutSelection ( selectionModel , lead , lead ) ; selectionModel . setValueIsAdjusting ( _BOOL ) ; }
6313	public synchronized byte [ ] toByteArray ( ) { int remaining = count ; if ( remaining == _NUM ) { return EMPTY_BYTE_ARRAY ; } byte newbuf [ ] = new byte [ remaining ] ; int pos = _NUM ; for ( byte [ ] buf : buffers ) { int c = Math . min ( buf . length , remaining ) ; System . arraycopy ( buf , _NUM , newbuf , pos , c ) ; pos += c ; remaining -= c ; if ( remaining == _NUM ) { break ; } } return newbuf ; }
71286	@ After public void clean ( ) { mute ( null ) ; mute ( null ) ; mute ( null ) ; }
54121	public void consume ( int eventCount , long timeoutInMillis , Predicate < Event > condition ) throws TimeoutException { if ( eventCount < _NUM ) throw new IllegalArgumentException ( _STR ) ; if ( eventCount == _NUM ) return ; int eventsRemaining = eventCount ; final long stopTime = System . currentTimeMillis ( ) + timeoutInMillis ; while ( eventsRemaining > _NUM && System . currentTimeMillis ( ) < stopTime ) { Event nextEvent = queue . poll ( ) ; if ( nextEvent != null ) { if ( condition . test ( nextEvent ) ) { -- eventsRemaining ; consumedEvents . accept ( nextEvent ) ; } else { ignoredEvents . accept ( nextEvent ) ; } } } if ( eventsRemaining > _NUM ) { throw new TimeoutException ( _STR + ( eventCount - eventsRemaining ) + _STR + eventCount + _STR + timeoutInMillis + _STR ) ; } }
78082	private void updateUiFromCommand ( Command command ) { if ( command == null ) { return ; } actionsComboBox . setText ( command . getAction ( ) ) ; dataTextField . setText ( command . getData ( ) ) ; categoryTextField . setText ( command . getCategory ( ) ) ; mimeTextField . setText ( command . getMimeType ( ) ) ; componentTextField . setText ( command . getComponent ( ) ) ; userTextField . setText ( command . getUser ( ) ) ; flagsList_ . removeSelectionInterval ( _NUM , flagsList_ . getItemsCount ( ) ) ; List < IntentFlags > flags = command . getFlags ( ) ; if ( flags != null && flags . size ( ) > _NUM ) { for ( IntentFlags flag : command . getFlags ( ) ) { flagsList_ . setSelectedValue ( flag , _BOOL ) ; } } else { flagsList_ . setSelectedIndex ( _NUM ) ; } updateFlagsTextField ( ) ; tableModel_ . removeAllRows ( ) ; List < ExtraField > extras = command . getExtras ( ) ; if ( extras != null && extras . size ( ) > _NUM ) { for ( ExtraField extra : extras ) { tableModel_ . addRow ( extra ) ; } } updateTableVisibility ( ) ; }
18989	public void testCompareToZeroZero ( ) { BigInteger aNumber = BigInteger . ZERO ; BigInteger bNumber = BigInteger . ZERO ; assertEquals ( _NUM , aNumber . compareTo ( bNumber ) ) ; }
80078	public static int randGaussian ( final int mean , final int sd ) { return ( int ) ( rand . nextGaussian ( ) * sd + mean ) ; }
56032	private float computeOverscrollPercent ( ) { if ( mOverScrollOffset >= _NUM ) { return mOverScrollOffset / mMaxOverScroll ; } else { return mOverScrollOffset / mMaxUnderScroll ; } }
4843	public IVector ( int c ) { vector = new int [ Math . max ( defaultCapacity , c ) ] ; }
87104	public void processInvite ( RequestEvent requestEvent , ServerTransaction serverTransaction ) { final Request request = requestEvent . getRequest ( ) ; final SipProvider sipProvider = ( SipProvider ) requestEvent . getSource ( ) ; ServerTransaction st = serverTransaction ; try { if ( st == null ) { try { st = sipProvider . getNewServerTransaction ( request ) ; } catch ( TransactionUnavailableException tae ) { tae . printStackTrace ( ) ; return ; } catch ( TransactionAlreadyExistsException taex ) { return ; } } final String toTag = _STR + System . nanoTime ( ) ; Response response = messageFactory . createResponse ( Response . RINGING , request ) ; ToHeader toHeader = ( ToHeader ) response . getHeader ( ToHeader . NAME ) ; toHeader . setTag ( toTag ) ; st . sendResponse ( response ) ; response = messageFactory . createResponse ( Response . OK , request ) ; final Address address = addressFactory . createAddress ( _STR + myAddress + _STR + myPort + _STR ) ; final ContactHeader contactHeader = headerFactory . createContactHeader ( address ) ; response . addHeader ( contactHeader ) ; toHeader = ( ToHeader ) response . getHeader ( ToHeader . NAME ) ; toHeader . setTag ( toTag ) ; st . sendResponse ( response ) ; } catch ( Exception ex ) { ex . printStackTrace ( ) ; } }
31952	public static IgniteLogger logger ( GridKernalContext ctx , AtomicReference < IgniteLogger > logRef , Object obj ) { IgniteLogger log = logRef . get ( ) ; if ( log == null ) { logRef . compareAndSet ( null , ctx . log ( obj . getClass ( ) ) ) ; log = logRef . get ( ) ; } return log ; }
73920	protected boolean readReceiveDelay ( ) { try { receiveDelay = Integer . parseInt ( receiveDelayField . getText ( ) ) ; } catch ( Exception e ) { statusText1 . setText ( rb . getString ( _STR ) ) ; statusText1 . setVisible ( _BOOL ) ; receiveDelay = _NUM ; errorInStatus1 = _BOOL ; resetNotes2 ( ) ; return ( _BOOL ) ; } if ( receiveDelay < _NUM ) { statusText1 . setText ( rb . getString ( _STR ) ) ; statusText1 . setVisible ( _BOOL ) ; receiveDelay = _NUM ; errorInStatus1 = _BOOL ; resetNotes2 ( ) ; return ( _BOOL ) ; } if ( receiveDelay > _NUM ) { statusText1 . setText ( rb . getString ( _STR ) ) ; statusText1 . setVisible ( _BOOL ) ; receiveDelay = _NUM ; errorInStatus1 = _BOOL ; resetNotes2 ( ) ; return ( _BOOL ) ; } return _BOOL ; }
85099	private void writeIndent ( int times ) throws IOException { for ( int i = options . getBaseIndent ( ) + times ; i > _NUM ; i -- ) { writer . write ( options . getIndent ( ) ) ; } }
81724	@ Override public int hashCode ( ) { int result = _NUM ; Iterator < ? > it = iterator ( ) ; while ( it . hasNext ( ) ) { Object object = it . next ( ) ; result = ( _NUM * result ) + ( object == null ? _NUM : object . hashCode ( ) ) ; } return result ; }
7323	public static int parseString ( String value ) { return Integer . parseInt ( value ) ; }
49211	void doHandleJavaMouseEvent ( MouseEvent mouseEvent ) { if ( ! XToolkit . isLeftMouseButton ( mouseEvent ) && ! XToolkit . isRightMouseButton ( mouseEvent ) ) { return ; } XBaseWindow grabWindow = XAwtState . getGrabWindow ( ) ; Point ptGlobal = mouseEvent . getLocationOnScreen ( ) ; if ( ! hasPointerMoved ) { if ( grabInputPoint == null || ( Math . abs ( ptGlobal . x - grabInputPoint . x ) > getMouseMovementSmudge ( ) ) || ( Math . abs ( ptGlobal . y - grabInputPoint . y ) > getMouseMovementSmudge ( ) ) ) { hasPointerMoved = _BOOL ; } } XBaseMenuWindow wnd = getMenuWindowFromPoint ( ptGlobal ) ; XMenuItemPeer item = ( wnd != null ) ? wnd . getItemFromPoint ( wnd . toLocal ( ptGlobal ) ) : null ; XBaseMenuWindow cwnd = getShowingLeaf ( ) ; switch ( mouseEvent . getID ( ) ) { case MouseEvent . MOUSE_PRESSED : showingMousePressedSubmenu = null ; if ( ( grabWindow == this ) && ( wnd == null ) ) { ungrabInput ( ) ; } else { grabInput ( ) ; if ( item != null && ! item . isSeparator ( ) && item . isTargetItemEnabled ( ) ) { if ( wnd . getShowingSubmenu ( ) == item ) { showingMousePressedSubmenu = ( XMenuPeer ) item ; } wnd . selectItem ( item , _BOOL ) ; } else { if ( wnd != null ) { wnd . selectItem ( null , _BOOL ) ; } } } break ; case MouseEvent . MOUSE_RELEASED : if ( item != null && ! item . isSeparator ( ) && item . isTargetItemEnabled ( ) ) { if ( item instanceof XMenuPeer ) { if ( showingMousePressedSubmenu == item ) { if ( wnd instanceof XMenuBarPeer ) { ungrabInput ( ) ; } else { wnd . selectItem ( item , _BOOL ) ; } } } else { item . action ( mouseEvent . getWhen ( ) ) ; ungrabInput ( ) ; } } else { if ( hasPointerMoved || ( wnd instanceof XMenuBarPeer ) ) { ungrabInput ( ) ; } } showingMousePressedSubmenu = null ; break ; case MouseEvent . MOUSE_DRAGGED : if ( wnd != null ) { if ( item != null && ! item . isSeparator ( ) && item . isTargetItemEnabled ( ) ) { if ( grabWindow == this ) { wnd . selectItem ( item , _BOOL ) ; } } else { wnd . selectItem ( null , _BOOL ) ; } } else { if ( cwnd != null ) { cwnd . selectItem ( null , _BOOL ) ; } } break ; } }
33047	public boolean isInvalidNode ( ) { ASTNode first = fNodes . get ( _NUM ) ; ASTNode candidate = first . getParent ( ) ; if ( candidate == null ) return _BOOL ; if ( candidate . getNodeType ( ) == ASTNode . METHOD_DECLARATION ) return _BOOL ; return _BOOL ; }
35965	public void push ( final float value ) { int bits = Float . floatToIntBits ( value ) ; if ( bits == _NUM || bits == _NUM || bits == _NUM ) { mv . visitInsn ( Opcodes . FCONST_0 + ( int ) value ) ; } else { mv . visitLdcInsn ( value ) ; } }
51882	public void onMotion ( MotionEvent event , Interaction iact ) { }
38721	public synchronized void removeBatchClustererListener ( BatchClustererListener cl ) { m_batchClustererListeners . remove ( cl ) ; }
5948	public HeldLocksGrant refresh ( long expirationDateMs ) { return new HeldLocksGrant ( grantId , creationDateMs , expirationDateMs , lockMap , lockTimeout , versionId ) ; }
26011	void removeKnownObject ( ParseObject object ) { synchronized ( mutex ) { knownObjects . remove ( object ) ; } }
72702	static HeapBytesStore < byte [ ] > wrap ( @ NotNull byte [ ] bytes ) { return HeapBytesStore . wrap ( bytes ) ; }
76478	private static String parse ( JsonValue base ) { if ( ! base . isString ( ) ) { return null ; } return buildString ( base . asString ( ) ) ; }
58506	public void testValueOfLongNegative2 ( ) { long longVal = - _NUM ; BigInteger aNumber = BigInteger . valueOf ( longVal ) ; byte rBytes [ ] = { - _NUM , _NUM , - _NUM , - _NUM } ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , aNumber . signum ( ) ) ; }
28022	public void beforeInsert ( int index , char element ) { if ( index > size || index < _NUM ) throw new IndexOutOfBoundsException ( _STR + index + _STR + size ) ; ensureCapacity ( size + _NUM ) ; System . arraycopy ( elements , index , elements , index + _NUM , size - index ) ; elements [ index ] = element ; size ++ ; }
31867	private void growEntries ( ) { int newLen = ( next . length << _NUM ) + _NUM ; int [ ] newNext = new int [ newLen ] ; GridUnsafe . copyMemory ( next , INT_ARR_OFF , newNext , INT_ARR_OFF , size << _NUM ) ; next = newNext ; nextEmpty = new int [ newLen ] ; Arrays . fill ( nextEmpty , - _NUM ) ; Object [ ] newObjs = new Object [ newLen ] ; System . arraycopy ( objs , _NUM , newObjs , _NUM , size ) ; objs = newObjs ; }
76857	public SidedPlane ( final Vector p , final boolean onSide , final Vector A , final Vector B ) { super ( A , B ) ; sigNum = onSide ? Math . signum ( evaluate ( p ) ) : - Math . signum ( evaluate ( p ) ) ; if ( sigNum == _NUM ) throw new IllegalArgumentException ( _STR ) ; }
20361	public static boolean isInputStreamGZIPCompressed ( final PushbackInputStream inputStream ) throws IOException { if ( inputStream == null ) return _BOOL ; byte [ ] signature = new byte [ _NUM ] ; int readStatus = inputStream . read ( signature ) ; inputStream . unread ( signature ) ; int streamHeader = ( ( int ) signature [ _NUM ] & _NUM ) | ( ( signature [ _NUM ] << _NUM ) & _NUM ) ; return readStatus == _NUM && GZIPInputStream . GZIP_MAGIC == streamHeader ; }
61314	void insertOp ( int pos , int length , int op ) { int totalLen = m_ops . getOp ( OpMap . MAPINDEX_LENGTH ) ; for ( int i = totalLen - _NUM ; i >= pos ; i -- ) { m_ops . setOp ( i + length , m_ops . getOp ( i ) ) ; } m_ops . setOp ( pos , op ) ; m_ops . setOp ( OpMap . MAPINDEX_LENGTH , totalLen + length ) ; }
14789	private void clear ( ) { valid = _BOOL ; if ( ( listenerObjects == null ) || listenerObjects . isEmpty ( ) ) { deregisterListener ( ) ; } ssm = null ; if ( SMSEntry . cacheSMSEntries ) { orgConfigs . clear ( ) ; globalConfigs . clear ( ) ; } }
42524	public static void registerDecayableObject ( Decayable obj ) { decayObjects . add ( obj ) ; }
35431	public static void assertExpectedOutputContains ( String expectedString , String x ) { if ( ! x . contains ( expectedString ) ) { fail ( _STR + expectedString + _STR + x + _STR ) ; } }
39318	public boolean remove ( String classname ) { String pkgname ; HashSet < String > names ; classname = cleanUp ( classname ) ; pkgname = extractPackage ( classname ) ; names = m_Cache . get ( pkgname ) ; if ( names != null ) { return names . remove ( classname ) ; } else { return _BOOL ; } }
2226	public void testFailedStage ( ) { CFException ex = new CFException ( ) ; CompletionStage < Integer > f = CompletableFuture . failedStage ( ex ) ; AtomicInteger x = new AtomicInteger ( _NUM ) ; AtomicReference < Throwable > r = new AtomicReference < Throwable > ( ) ; f . whenComplete ( null ) ; assertEquals ( x . get ( ) , _NUM ) ; assertEquals ( r . get ( ) , ex ) ; }
64917	@ Override public void paintComponent ( Graphics g ) { super . paintComponent ( g ) ; Graphics2D graphics = ( Graphics2D ) g ; graphics . setBackground ( mColorSpectrumBackground ) ; RenderingHints renderHints = new RenderingHints ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; renderHints . put ( RenderingHints . KEY_RENDERING , RenderingHints . VALUE_RENDER_QUALITY ) ; graphics . setRenderingHints ( renderHints ) ; drawFrequencies ( graphics ) ; drawCursor ( graphics ) ; }
50812	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
3844	public void classLoaderDestroy ( DynamicClassLoader loader ) { Method destroy = getDestroyMethod ( _resource . getClass ( ) ) ; if ( destroy == null ) return ; try { destroy . invoke ( _resource ) ; } catch ( Throwable e ) { log . log ( Level . WARNING , e . toString ( ) , e ) ; } }
56950	public boolean deleteAttachmentPoint ( DatapathId sw , OFPort port ) { AttachmentPoint ap = new AttachmentPoint ( sw , port , new Date ( _NUM ) ) ; if ( this . oldAPs != null ) { ArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > ( ) ; apList . addAll ( this . oldAPs ) ; int index = apList . indexOf ( ap ) ; if ( index > _NUM ) { apList . remove ( index ) ; this . oldAPs = apList ; } } if ( this . attachmentPoints != null ) { ArrayList < AttachmentPoint > apList = new ArrayList < AttachmentPoint > ( ) ; apList . addAll ( this . attachmentPoints ) ; int index = apList . indexOf ( ap ) ; if ( index > _NUM ) { apList . remove ( index ) ; this . attachmentPoints = apList ; return _BOOL ; } } return _BOOL ; }
8093	static boolean isAssignableTo ( ClassNode type , ClassNode toBeAssignedTo ) { if ( UNKNOWN_PARAMETER_TYPE == type ) return _BOOL ; if ( type == toBeAssignedTo ) return _BOOL ; if ( toBeAssignedTo . redirect ( ) == STRING_TYPE && type . redirect ( ) == GSTRING_TYPE ) { return _BOOL ; } if ( isPrimitiveType ( toBeAssignedTo ) ) toBeAssignedTo = getWrapper ( toBeAssignedTo ) ; if ( isPrimitiveType ( type ) ) type = getWrapper ( type ) ; if ( Double_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) ; } if ( Float_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) && Double_TYPE != type . redirect ( ) ; } if ( Long_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) && Double_TYPE != type . redirect ( ) && Float_TYPE != type . redirect ( ) ; } if ( Integer_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) && Double_TYPE != type . redirect ( ) && Float_TYPE != type . redirect ( ) && Long_TYPE != type . redirect ( ) ; } if ( Short_TYPE == toBeAssignedTo ) { return type . isDerivedFrom ( Number_TYPE ) && Double_TYPE != type . redirect ( ) && Float_TYPE != type . redirect ( ) && Long_TYPE != type . redirect ( ) && Integer_TYPE != type . redirect ( ) ; } if ( Byte_TYPE == toBeAssignedTo ) { return type . redirect ( ) == Byte_TYPE ; } if ( type . isArray ( ) && toBeAssignedTo . isArray ( ) ) { return isAssignableTo ( type . getComponentType ( ) , toBeAssignedTo . getComponentType ( ) ) ; } if ( type . isDerivedFrom ( GSTRING_TYPE ) && STRING_TYPE . equals ( toBeAssignedTo ) ) { return _BOOL ; } if ( toBeAssignedTo . isDerivedFrom ( GSTRING_TYPE ) && STRING_TYPE . equals ( type ) ) { return _BOOL ; } if ( implementsInterfaceOrIsSubclassOf ( type , toBeAssignedTo ) ) { if ( OBJECT_TYPE . equals ( toBeAssignedTo ) ) return _BOOL ; if ( toBeAssignedTo . isUsingGenerics ( ) ) { GenericsType gt = GenericsUtils . buildWildcardType ( toBeAssignedTo ) ; return gt . isCompatibleWith ( type ) ; } return _BOOL ; } if ( type . isDerivedFrom ( CLOSURE_TYPE ) && isSAMType ( toBeAssignedTo ) ) { return _BOOL ; } return _BOOL ; }
56394	public synchronized int totalRecoverFiles ( ) { int total = _NUM ; for ( File file : fileDetails . values ( ) ) { if ( file . reused ( ) == _BOOL ) { total ++ ; } } return total ; }
6192	public static AnimGameItem process ( MD5Model md5Model , MD5AnimModel animModel , Vector3f defaultColour ) throws Exception { List < Matrix4f > invJointMatrices = calcInJointMatrices ( md5Model ) ; List < AnimatedFrame > animatedFrames = processAnimationFrames ( md5Model , animModel , invJointMatrices ) ; List < Mesh > list = new ArrayList < > ( ) ; for ( MD5Mesh md5Mesh : md5Model . getMeshes ( ) ) { Mesh mesh = generateMesh ( md5Model , md5Mesh ) ; handleTexture ( mesh , md5Mesh , defaultColour ) ; list . add ( mesh ) ; } Mesh [ ] meshes = new Mesh [ list . size ( ) ] ; meshes = list . toArray ( meshes ) ; AnimGameItem result = new AnimGameItem ( meshes , animatedFrames , invJointMatrices ) ; return result ; }
12992	ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
67199	@ Override @ Timed public void deleteAssignment ( Experiment experiment , User . ID userID , Context context , Application . Name appName , Assignment currentAssignment ) { deleteUserFromLookUp ( experiment . getID ( ) , userID , context ) ; boolean countUp = _BOOL ; assignmentsCountExecutor . execute ( new AssignmentCountEnvelope ( assignmentsRepository , experimentRepository , dbRepository , experiment , currentAssignment , countUp , eventLog , null , assignUserToExport , assignBucketCount ) ) ; deleteAssignmentOld ( experiment . getID ( ) , userID , context , appName , currentAssignment . getBucketLabel ( ) ) ; removeIndexUserToExperiment ( userID , experiment . getID ( ) , context , appName ) ; removeIndexUserToBucket ( userID , experiment . getID ( ) , context , currentAssignment . getBucketLabel ( ) ) ; removeIndexExperimentsToUser ( userID , experiment . getID ( ) , context , appName ) ; }
81747	String format ( Object obj , StringBuffer toAppendTo ) throws IllegalArgumentException { Date source = null ; if ( obj instanceof Date ) { source = ( Date ) obj ; } else if ( obj instanceof String ) { try { source = parse ( ( String ) obj ) ; } catch ( ParseException pe ) { throw new RuntimeException ( pe . toString ( ) ) ; } } if ( source == null ) { throw new IllegalArgumentException ( ( obj == null ) ? _STR : obj . toString ( ) ) ; } return format ( source , toAppendTo ) ; }
60816	private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { return unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; }
3813	public static ThreadDump create ( ) { ThreadDump threadDump = _threadDumpRef . get ( ) ; if ( threadDump == null ) { threadDump = new ThreadDumpPro ( ) ; _threadDumpRef . compareAndSet ( null , threadDump ) ; threadDump = _threadDumpRef . get ( ) ; } return threadDump ; }
64764	private void checkStart ( ) { if ( mCanProcessAudio && ! mOutput . isRunning ( ) && mOutput . available ( ) <= mBufferStartThreshold ) { mOutput . start ( ) ; } }
75011	protected boolean matchesFilter ( final String input , final String [ ] filter ) { for ( final String match : filter ) { if ( ! input . contains ( match ) ) return _BOOL ; } return _BOOL ; }
69588	private E unlinkFirst ( ) { Node < E > f = first ; if ( f == null ) return null ; Node < E > n = f . next ; E item = f . item ; f . item = null ; f . next = f ; first = n ; if ( n == null ) last = null ; else n . prev = null ; -- count ; notFull . signal ( ) ; return item ; }
84992	public IStatus run ( IProgressMonitor monitor ) { InputStream input = null ; FileOutputStream output = null ; IStatus jobStatus = Status . OK_STATUS ; byte [ ] b = new byte [ _NUM ] ; int bytesRead ; try { HttpURLConnection connection = ( HttpURLConnection ) url . openConnection ( ) ; input = url . openStream ( ) ; long totalBytesRead = _NUM ; int responseStatusCode = connection . getResponseCode ( ) ; if ( responseStatusCode >= HttpURLConnection . HTTP_BAD_REQUEST ) { jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , MessageFormat . format ( _STR , responseStatusCode , connection . getResponseMessage ( ) ) ) ; } long contentLength = connection . getContentLength ( ) ; output = new FileOutputStream ( target ) ; monitor . beginTask ( _STR + url . toString ( ) , ( int ) contentLength ) ; while ( jobStatus == Status . OK_STATUS ) { if ( contentLength > _NUM && totalBytesRead >= contentLength ) { break ; } bytesRead = input . read ( b ) ; if ( bytesRead == - _NUM ) { break ; } output . write ( b , _NUM , bytesRead ) ; totalBytesRead += bytesRead ; monitor . worked ( bytesRead ) ; if ( monitor . isCanceled ( ) ) { jobStatus = Status . CANCEL_STATUS ; break ; } } } catch ( MalformedURLException e ) { jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , _STR + url . toExternalForm ( ) , e ) ; } catch ( IOException e ) { jobStatus = new Status ( Status . ERROR , CorePlugin . PLUGIN_ID , _STR + url . toExternalForm ( ) , e ) ; } closeStreams ( input , output ) ; return jobStatus ; }
35782	private static synchronized void initDocBuilderFactory ( ) { docBuilderFactory = DocumentBuilderFactory . newInstance ( ) ; docBuilderFactory . setIgnoringComments ( _BOOL ) ; docBuilderFactory . setCoalescing ( _BOOL ) ; }
44005	public double interceptStdErr ( ) { return Math . sqrt ( svar0 ) ; }
66035	private void createMissingValues ( ) { String sql = _STR + _STR + _STR + _STR + _STR + _STR + _STR ; PreparedStatement pstmt = null ; try { pstmt = DB . prepareStatement ( sql , get_TrxName ( ) ) ; pstmt . setInt ( _NUM , getA_Registration_ID ( ) ) ; ResultSet rs = pstmt . executeQuery ( ) ; while ( rs . next ( ) ) { MRegistrationValue v = new MRegistrationValue ( this , rs . getInt ( _NUM ) , _STR ) ; v . saveEx ( ) ; } rs . close ( ) ; pstmt . close ( ) ; pstmt = null ; } catch ( Exception e ) { log . log ( Level . SEVERE , null , e ) ; } try { if ( pstmt != null ) pstmt . close ( ) ; pstmt = null ; } catch ( Exception e ) { pstmt = null ; } }
34254	private static String normalisePath ( String path ) { return path . replace ( _STR , _STR ) ; }
54775	public void startLaunchNotifier ( ) { if ( m_launchNotification == null ) throw new NullPointerException ( ) ; m_launchNotifierThread . setDaemon ( _BOOL ) ; m_launchNotifierThread . start ( ) ; }
49128	private static void encode ( List < AclEntry > acl , long address ) { long offset = address ; for ( AclEntry ace : acl ) { int flags = _NUM ; UserPrincipal who = ace . principal ( ) ; if ( ! ( who instanceof UnixUserPrincipals . User ) ) throw new ProviderMismatchException ( ) ; UnixUserPrincipals . User user = ( UnixUserPrincipals . User ) who ; int uid ; if ( user . isSpecial ( ) ) { uid = - _NUM ; if ( who == UnixUserPrincipals . SPECIAL_OWNER ) flags |= ACE_OWNER ; else if ( who == UnixUserPrincipals . SPECIAL_GROUP ) flags |= ( ACE_GROUP | ACE_IDENTIFIER_GROUP ) ; else if ( who == UnixUserPrincipals . SPECIAL_EVERYONE ) flags |= ACE_EVERYONE ; else throw new AssertionError ( _STR ) ; } else { if ( user instanceof UnixUserPrincipals . Group ) { uid = user . gid ( ) ; flags |= ACE_IDENTIFIER_GROUP ; } else { uid = user . uid ( ) ; } } int type ; switch ( ace . type ( ) ) { case ALLOW : type = ACE_ACCESS_ALLOWED_ACE_TYPE ; break ; case DENY : type = ACE_ACCESS_DENIED_ACE_TYPE ; break ; case AUDIT : type = ACE_SYSTEM_AUDIT_ACE_TYPE ; break ; case ALARM : type = ACE_SYSTEM_ALARM_ACE_TYPE ; break ; default : throw new AssertionError ( _STR ) ; } Set < AclEntryPermission > aceMask = ace . permissions ( ) ; int mask = _NUM ; if ( aceMask . contains ( AclEntryPermission . READ_DATA ) ) mask |= ACE_READ_DATA ; if ( aceMask . contains ( AclEntryPermission . WRITE_DATA ) ) mask |= ACE_WRITE_DATA ; if ( aceMask . contains ( AclEntryPermission . APPEND_DATA ) ) mask |= ACE_APPEND_DATA ; if ( aceMask . contains ( AclEntryPermission . READ_NAMED_ATTRS ) ) mask |= ACE_READ_NAMED_ATTRS ; if ( aceMask . contains ( AclEntryPermission . WRITE_NAMED_ATTRS ) ) mask |= ACE_WRITE_NAMED_ATTRS ; if ( aceMask . contains ( AclEntryPermission . EXECUTE ) ) mask |= ACE_EXECUTE ; if ( aceMask . contains ( AclEntryPermission . DELETE_CHILD ) ) mask |= ACE_DELETE_CHILD ; if ( aceMask . contains ( AclEntryPermission . READ_ATTRIBUTES ) ) mask |= ACE_READ_ATTRIBUTES ; if ( aceMask . contains ( AclEntryPermission . WRITE_ATTRIBUTES ) ) mask |= ACE_WRITE_ATTRIBUTES ; if ( aceMask . contains ( AclEntryPermission . DELETE ) ) mask |= ACE_DELETE ; if ( aceMask . contains ( AclEntryPermission . READ_ACL ) ) mask |= ACE_READ_ACL ; if ( aceMask . contains ( AclEntryPermission . WRITE_ACL ) ) mask |= ACE_WRITE_ACL ; if ( aceMask . contains ( AclEntryPermission . WRITE_OWNER ) ) mask |= ACE_WRITE_OWNER ; if ( aceMask . contains ( AclEntryPermission . SYNCHRONIZE ) ) mask |= ACE_SYNCHRONIZE ; Set < AclEntryFlag > aceFlags = ace . flags ( ) ; if ( aceFlags . contains ( AclEntryFlag . FILE_INHERIT ) ) flags |= ACE_FILE_INHERIT_ACE ; if ( aceFlags . contains ( AclEntryFlag . DIRECTORY_INHERIT ) ) flags |= ACE_DIRECTORY_INHERIT_ACE ; if ( aceFlags . contains ( AclEntryFlag . NO_PROPAGATE_INHERIT ) ) flags |= ACE_NO_PROPAGATE_INHERIT_ACE ; if ( aceFlags . contains ( AclEntryFlag . INHERIT_ONLY ) ) flags |= ACE_INHERIT_ONLY_ACE ; unsafe . putInt ( offset + OFFSETOF_UID , uid ) ; unsafe . putInt ( offset + OFFSETOF_MASK , mask ) ; unsafe . putShort ( offset + OFFSETOF_FLAGS , ( short ) flags ) ; unsafe . putShort ( offset + OFFSETOF_TYPE , ( short ) type ) ; offset += SIZEOF_ACE_T ; } }
64475	public static String expandHiddenDir ( final String filename ) { final int macro = filename . indexOf ( hiddenDirMacro , _NUM ) ; String expandedFilter ; if ( macro == - _NUM ) { return filename ; } if ( Cfg . DEBUG ) { Check . log ( TAG + _STR ) ; } expandedFilter = filename . replaceFirst ( _STR , StringUtils . chomp ( Path . hidden ( ) , _STR ) ) ; if ( Cfg . DEBUG ) { Check . log ( TAG + _STR + expandedFilter ) ; } return expandedFilter ; }
35675	private boolean tryQueueCurrentBuffer ( long elapsedWaiting ) { if ( currentBuffer . isEmpty ( ) ) return _BOOL ; if ( isOpen && neverPubQueue . size ( ) < neverPubCapacity ) { neverPubQueue . add ( currentBuffer ) ; totalQueuedRecords . addAndGet ( currentBuffer . sizeRecords ( ) ) ; totalQueuedBuffers . incrementAndGet ( ) ; onQueueBufferSuccess ( currentBuffer , elapsedWaiting ) ; currentBuffer = new RecordBuffer < > ( flow ) ; return _BOOL ; } else if ( elapsedWaiting > _NUM ) { onQueueBufferTimeout ( currentBuffer , elapsedWaiting ) ; return _BOOL ; } else return _BOOL ; }
74883	public void updateValue ( final Object value , final boolean isSelected , boolean sync ) { if ( isReadOnly ( ) ) { return ; } if ( GenericFormFactory . isTextForm ( formType ) ) { textString = ( String ) value ; if ( textString != null && textString . equals ( lastTextString ) ) { sync = _BOOL ; } lastTextString = textString ; } else { textString = ( String ) value ; this . isSelected = isSelected ; if ( isSelected != lastIsSelected && lastTextString != null && textString != null && textString . equals ( lastTextString ) ) { sync = _BOOL ; } lastTextString = textString ; lastIsSelected = isSelected ; } if ( ( sync && guiType != FormFactory . ULC ) && guiComp != null ) { syncGUI ( value ) ; } }
79055	public boolean hasNext ( ) throws IOException { dataInputStream . mark ( _NUM ) ; int val = dataInputStream . read ( ) ; dataInputStream . reset ( ) ; return val != - _NUM ; }
78633	private final StringBuilder appendParameterSignature ( StringBuilder buffer , char [ ] [ ] parameterTypes , char [ ] [ ] parameterNames ) { if ( parameterTypes != null ) { for ( int i = _NUM ; i < parameterTypes . length ; i ++ ) { if ( i > _NUM ) { buffer . append ( _STR ) ; buffer . append ( _STR ) ; } buffer . append ( parameterTypes [ i ] ) ; if ( parameterNames != null && parameterNames [ i ] != null ) { buffer . append ( _STR ) ; buffer . append ( parameterNames [ i ] ) ; } } } return buffer ; }
19725	public void completeHeartbeat ( Database database , long seqno , String eventId ) throws SQLException { if ( logger . isDebugEnabled ( ) ) logger . debug ( _STR ) ; Statement st = null ; ResultSet rs = null ; Timestamp sts = new Timestamp ( _NUM ) ; Timestamp now = new Timestamp ( System . currentTimeMillis ( ) ) ; ArrayList < Column > whereClause = new ArrayList < Column > ( ) ; ArrayList < Column > values = new ArrayList < Column > ( ) ; if ( logger . isDebugEnabled ( ) ) logger . debug ( _STR + now ) ; try { st = database . createStatement ( ) ; rs = st . executeQuery ( sourceTsQuery ) ; if ( rs . next ( ) ) sts = rs . getTimestamp ( _NUM ) ; } finally { if ( rs != null ) { try { rs . close ( ) ; } catch ( SQLException e ) { } } if ( st != null ) { try { st . close ( ) ; } catch ( SQLException e ) { } } } long lag_millis = now . getTime ( ) - sts . getTime ( ) ; hbId . setValue ( KEY ) ; whereClause . add ( hbId ) ; hbSeqno . setValue ( seqno ) ; hbEventId . setValue ( eventId ) ; hbTargetTstamp . setValue ( now ) ; hbLagMillis . setValue ( lag_millis ) ; values . add ( hbSeqno ) ; values . add ( hbEventId ) ; values . add ( hbTargetTstamp ) ; values . add ( hbLagMillis ) ; database . update ( hbTable , whereClause , values ) ; }
15993	public CipherParameters decrypt ( byte [ ] in , int inOff , int inLen , int keyLen ) throws IllegalArgumentException { if ( ! key . isPrivate ( ) ) { throw new IllegalArgumentException ( _STR ) ; } BigInteger n = key . getModulus ( ) ; BigInteger d = key . getExponent ( ) ; byte [ ] C = new byte [ inLen ] ; System . arraycopy ( in , inOff , C , _NUM , C . length ) ; BigInteger c = new BigInteger ( _NUM , C ) ; BigInteger r = c . modPow ( d , n ) ; return generateKey ( n , r , keyLen ) ; }
78644	public PrivateKey loadPrivateKey ( ) throws Exception { if ( defaultKeys ) { return getPrivateKeyFromString ( RSAKeyLoader . DEFAULT_PKEY ) ; } if ( priKey == null ) { FileReader f = new FileReader ( path + _STR + this . id ) ; BufferedReader r = new BufferedReader ( f ) ; String tmp = _STR ; String key = _STR ; while ( ( tmp = r . readLine ( ) ) != null ) { key = key + tmp ; } f . close ( ) ; r . close ( ) ; priKey = getPrivateKeyFromString ( key ) ; } return priKey ; }
17069	public void removeCategoriesListener ( SnapshotCategoriesListener listener ) { listeners . remove ( listener ) ; }
17913	public boolean hasUnsupportedCriticalExtension ( ) { Set extns = getCriticalExtensionOIDs ( ) ; if ( extns == null ) { return _BOOL ; } extns . remove ( RFC3280CertPathUtilities . ISSUING_DISTRIBUTION_POINT ) ; extns . remove ( RFC3280CertPathUtilities . DELTA_CRL_INDICATOR ) ; return ! extns . isEmpty ( ) ; }
16496	private Integer zGetWeekNumberForASevenDayRange ( LocalDate firstDateInRange , WeekFields weekFieldRules , boolean requireUnanimousWeekNumber ) { ArrayList < Integer > weekNumbersList = new ArrayList < Integer > ( ) ; for ( int daysIntoTheFuture = _NUM ; daysIntoTheFuture <= _NUM ; ++ daysIntoTheFuture ) { LocalDate currentDateInRange ; try { currentDateInRange = firstDateInRange . plusDays ( daysIntoTheFuture ) ; int currentWeekNumber = currentDateInRange . get ( weekFieldRules . weekOfWeekBasedYear ( ) ) ; weekNumbersList . add ( currentWeekNumber ) ; } catch ( Exception ex ) { return _NUM ; } } boolean isUnanimous = ( InternalUtilities . areObjectsEqual ( weekNumbersList . get ( _NUM ) , weekNumbersList . get ( _NUM ) ) ) ; if ( isUnanimous ) { return weekNumbersList . get ( _NUM ) ; } if ( requireUnanimousWeekNumber ) { return null ; } int mostCommonWeekNumber = InternalUtilities . getMostCommonElementInList ( weekNumbersList ) ; return mostCommonWeekNumber ; }
80956	private boolean isNotInArray ( String str , String [ ] array ) { for ( int i = _NUM ; i < array . length ; i ++ ) { if ( str . equals ( array [ i ] ) ) { return _BOOL ; } } return _BOOL ; }
60646	Node cloneOrImportNode ( short operation , Node node , boolean deep ) { NodeImpl copy = shallowCopy ( operation , node ) ; if ( deep ) { NodeList list = node . getChildNodes ( ) ; for ( int i = _NUM ; i < list . getLength ( ) ; i ++ ) { copy . appendChild ( cloneOrImportNode ( operation , list . item ( i ) , deep ) ) ; } } notifyUserDataHandlers ( operation , node , copy ) ; return copy ; }
40128	public static synchronized void cleanup ( ) { w . lock ( ) ; try { secp256k1_destroy_context ( Secp256k1Context . getContext ( ) ) ; } finally { w . unlock ( ) ; } }
22124	public void init ( ) throws Exception { loadParameterFromZK ( ) ; _invalidLoginCleanupExecutor . scheduleWithFixedDelay ( new InvalidLoginCleaner ( ) , CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS , CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS , TimeUnit . MINUTES ) ; _log . info ( _STR , _maxAuthnLoginAttemtsCount ) ; _log . info ( _STR , _maxAuthnLoginAttemtsLifeTimeInMins ) ; _log . info ( _STR , CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS ) ; }
77512	public List < String > makeURLList ( String shard ) { List < String > urls = StrUtils . splitSmart ( shard , _STR , _BOOL ) ; for ( int i = _NUM ; i < urls . size ( ) ; i ++ ) { urls . set ( i , buildUrl ( urls . get ( i ) ) ) ; } if ( urls . size ( ) > _NUM ) Collections . shuffle ( urls , r ) ; return urls ; }
28511	public InputStreamReader reader ( final String charset ) throws HttpRequestException { try { return new InputStreamReader ( stream ( ) , getValidCharset ( charset ) ) ; } catch ( UnsupportedEncodingException e ) { throw new HttpRequestException ( e ) ; } }
44129	private byte [ ] toZLIB ( RenderedImage image , Color bkg , String colorModel ) throws IOException { return ImageGraphics2D . toByteArray ( image , ImageConstants . RAW , ImageConstants . ENCODING_FLATE_ASCII85 , ImageGraphics2D . getRAWProperties ( bkg , colorModel ) ) ; }
35403	public void addVertex ( Object id ) throws IllegalArgumentException { if ( initialized ) { throw new IllegalArgumentException ( ) ; } Vertex vertex = new Vertex ( id ) ; Object existing = vertexMap . put ( id , vertex ) ; if ( existing != null ) { throw new IllegalArgumentException ( ) ; } vertexList . add ( vertex ) ; }
73824	public void configureLocalServices ( ) { clientMemo . setLnTrafficController ( this ) ; clientMemo . configureCommandStation ( LnCommandStationType . COMMAND_STATION_DCS100 , _BOOL , _BOOL ) ; clientMemo . configureManagers ( ) ; }
29385	private static int indexOf ( int fromIndex , CharSequence csq ) { if ( csq == null ) return _NUM ; int length = csq . length ( ) ; int j = fromIndex ; int i = ( j < length ) ? csq . charAt ( j ++ ) : _NUM ; i <<= _NUM ; i |= ( j < length ) ? csq . charAt ( j ++ ) : _NUM ; return i ; }
46537	protected SizeRequirements calculateMinorAxisRequirements ( int axis , SizeRequirements r ) { updateGrid ( ) ; calculateColumnRequirements ( axis ) ; if ( r == null ) { r = new SizeRequirements ( ) ; } long min = _NUM ; long pref = _NUM ; int n = columnRequirements . length ; for ( int i = _NUM ; i < n ; i ++ ) { SizeRequirements req = columnRequirements [ i ] ; min += req . minimum ; pref += req . preferred ; } int adjust = ( n + _NUM ) * cellSpacing + _NUM * borderWidth ; min += adjust ; pref += adjust ; r . minimum = ( int ) min ; r . preferred = ( int ) pref ; r . maximum = ( int ) pref ; AttributeSet attr = getAttributes ( ) ; CSS . LengthValue cssWidth = ( CSS . LengthValue ) attr . getAttribute ( CSS . Attribute . WIDTH ) ; if ( BlockView . spanSetFromAttributes ( axis , r , cssWidth , null ) ) { if ( r . minimum < ( int ) min ) { r . maximum = r . minimum = r . preferred = ( int ) min ; } } totalColumnRequirements . minimum = r . minimum ; totalColumnRequirements . preferred = r . preferred ; totalColumnRequirements . maximum = r . maximum ; Object o = attr . getAttribute ( CSS . Attribute . TEXT_ALIGN ) ; if ( o != null ) { String ta = o . toString ( ) ; if ( ta . equals ( _STR ) ) { r . alignment = _NUM ; } else if ( ta . equals ( _STR ) ) { r . alignment = _NUM ; } else if ( ta . equals ( _STR ) ) { r . alignment = _NUM ; } else { r . alignment = _NUM ; } } else { r . alignment = _NUM ; } return r ; }
3974	public void append ( String string ) { for ( int i = _NUM ; i < string . length ( ) ; i ++ ) append ( string . charAt ( i ) ) ; }
29334	public ListenableFuture < String > push ( final String name , final Expression func ) { String let = String . format ( _STR , name , func . toHaskell ( ) ) ; return pullRaw ( let ) ; }
80829	public final String toString ( int depth ) { if ( depth <= _NUM ) return _STR ; return ( _STR + super . toString ( depth ) + _STR + mantissa + _STR + exponent + _STR + ( bigVal != null ? bigVal . toString ( ) : _STR ) + _STR + image ) ; }
71634	public MetaDataColumnDescriptor ( String columnName , int jdbcType , Object defaultValue ) { _columnName = columnName . toUpperCase ( ) ; _jdbcType = jdbcType ; _defaultValue = defaultValue ; }
52768	private void bulkLoad ( double [ ] lmin , double [ ] lmax , List < Node > children , ArrayModifiableDBIDs ids , int start , int end , int dim , int level , int code ) { if ( dim == _NUM ) { DBIDArrayIter iter = ids . iter ( ) ; iter . seek ( start ) ; NumberVector first = relation . get ( iter ) ; iter . advance ( ) ; boolean degenerate = _BOOL ; loop : for ( ; iter . getOffset ( ) < end ; iter . advance ( ) ) { NumberVector other = relation . get ( iter ) ; for ( int d = _NUM ; d < lmin . length ; d ++ ) { if ( Math . abs ( first . doubleValue ( d ) - other . doubleValue ( d ) ) > _NUM ) { degenerate = _BOOL ; break loop ; } } } if ( degenerate ) { double [ ] center = new double [ lmin . length ] ; for ( int d = _NUM ; d < lmin . length ; d ++ ) { center [ d ] = lmin [ d ] * _NUM + lmax [ d ] * _NUM + shift [ d ] ; if ( center [ d ] > min [ d ] + width [ d ] ) { center [ d ] -= width [ d ] ; } } children . add ( new Node ( code , center , end - start , level , null ) ) ; return ; } } if ( dim == lmin . length ) { double [ ] center = new double [ lmin . length ] ; for ( int d = _NUM ; d < lmin . length ; d ++ ) { center [ d ] = lmin [ d ] * _NUM + lmax [ d ] * _NUM + shift [ d ] ; if ( center [ d ] > min [ d ] + width [ d ] ) { center [ d ] -= width [ d ] ; } } if ( end - start < nmin ) { children . add ( new Node ( code , center , end - start , level , null ) ) ; return ; } else { List < Node > newchildren = new ArrayList < > ( ) ; bulkLoad ( lmin , lmax , newchildren , ids , start , end , _NUM , level + _NUM , _NUM ) ; children . add ( new Node ( code , center , end - start , level , newchildren ) ) ; return ; } } else { DBIDArrayIter siter = ids . iter ( ) , eiter = ids . iter ( ) ; siter . seek ( start ) ; eiter . seek ( end - _NUM ) ; while ( siter . getOffset ( ) < eiter . getOffset ( ) ) { if ( getShiftedDim ( relation . get ( siter ) , dim , level ) <= _NUM ) { siter . advance ( ) ; continue ; } if ( getShiftedDim ( relation . get ( eiter ) , dim , level ) > _NUM ) { eiter . retract ( ) ; continue ; } ids . swap ( siter . getOffset ( ) , eiter . getOffset ( ) - _NUM ) ; siter . advance ( ) ; eiter . retract ( ) ; } final int spos = siter . getOffset ( ) ; if ( start < spos ) { final double tmp = lmax [ dim ] ; lmax [ dim ] = lmax [ dim ] * _NUM + lmin [ dim ] * _NUM ; bulkLoad ( lmin , lmax , children , ids , start , spos , dim + _NUM , level , code ) ; lmax [ dim ] = tmp ; } if ( spos < end ) { final double tmp = lmin [ dim ] ; lmin [ dim ] = lmax [ dim ] * _NUM + lmin [ dim ] * _NUM ; bulkLoad ( lmin , lmax , children , ids , spos , end , dim + _NUM , level , code | ( _NUM << dim ) ) ; lmin [ dim ] = tmp ; } } }
11445	protected ArrayList < float [ ] > _forwardPoly ( float [ ] rawllpts , int ltype , int nsegs , boolean isFilled ) { boolean DEBUG = Debug . debugging ( _STR ) ; int len = rawllpts . length > > > _NUM ; if ( len < _NUM ) return new ArrayList < float [ ] > ( _NUM ) ; if ( isComplicatedLineType ( ltype ) ) return doPolyDispatch ( rawllpts , ltype , nsegs , isFilled ) ; int invalid_count = _NUM ; boolean curr_invalid , prev_invalid = _BOOL ; Point temp = new Point ( ) ; AzimuthVar az_first = null , az_save = null , azVar = new AzimuthVar ( ) ; ArrayList < AzimuthVar > sections = new ArrayList < AzimuthVar > ( _NUM ) ; float [ ] x_ , xs = new float [ len ] ; float [ ] y_ , ys = new float [ len ] ; _forward ( rawllpts [ _NUM ] , rawllpts [ _NUM ] , temp , azVar ) ; xs [ _NUM ] = temp . x ; ys [ _NUM ] = temp . y ; prev_invalid = azVar . invalid_forward ; if ( prev_invalid ) { ++ invalid_count ; } else { azVar . index = _NUM ; azVar . current_azimuth = GreatCircle . sphericalAzimuth ( ( float ) centerY , ( float ) centerX , rawllpts [ _NUM ] , rawllpts [ _NUM ] ) ; if ( ! isFilled ) { sections . add ( azVar ) ; } else { az_first = azVar ; } azVar = new AzimuthVar ( ) ; } int i = _NUM , j = _NUM ; for ( i = _NUM , j = _NUM ; i < len ; i ++ , j += _NUM ) { azVar . invalid_forward = _BOOL ; _forward ( rawllpts [ j ] , rawllpts [ j + _NUM ] , temp , azVar ) ; curr_invalid = azVar . invalid_forward ; xs [ i ] = temp . x ; ys [ i ] = temp . y ; if ( ! curr_invalid && prev_invalid ) { azVar . index = i - _NUM ; azVar . current_azimuth = GreatCircle . sphericalAzimuth ( ( float ) centerY , ( float ) centerX , rawllpts [ j - _NUM ] , rawllpts [ j - _NUM ] ) ; sections . add ( azVar ) ; azVar = new AzimuthVar ( ) ; } else if ( curr_invalid ) { if ( ! prev_invalid ) { azVar . index = i ; if ( isFilled && ( invalid_count == _NUM ) ) { az_save = azVar ; } else { sections . add ( azVar ) ; } azVar = new AzimuthVar ( ) ; } ++ invalid_count ; } prev_invalid = curr_invalid ; } if ( invalid_count == _NUM ) { ArrayList < float [ ] > ret_val = new ArrayList < float [ ] > ( _NUM ) ; ret_val . add ( xs ) ; ret_val . add ( ys ) ; return ret_val ; } if ( invalid_count == len ) { return new ArrayList < float [ ] > ( _NUM ) ; } if ( ! prev_invalid ) { if ( isFilled && ( az_save != null ) ) { int l = az_save . index ; x_ = new float [ len + l ] ; y_ = new float [ len + l ] ; System . arraycopy ( xs , _NUM , x_ , _NUM , len ) ; System . arraycopy ( ys , _NUM , y_ , _NUM , len ) ; System . arraycopy ( xs , _NUM , x_ , len , l ) ; System . arraycopy ( ys , _NUM , y_ , len , l ) ; az_save . index = len + l ; sections . add ( az_save ) ; xs = x_ ; ys = y_ ; } else { if ( DEBUG && isFilled && ( az_save == null ) ) { Debug . output ( _STR ) ; } azVar . index = i ; j = rawllpts . length ; azVar . current_azimuth = GreatCircle . sphericalAzimuth ( ( float ) centerY , ( float ) centerX , rawllpts [ j - _NUM ] , rawllpts [ j - _NUM ] ) ; sections . add ( azVar ) ; } } else if ( az_save != null ) { if ( DEBUG ) Debug . output ( _STR ) ; sections . add ( az_first ) ; sections . add ( az_save ) ; } int size = sections . size ( ) ; ArrayList < float [ ] > ret_val = new ArrayList < float [ ] > ( size ) ; if ( isFilled && ( len > _NUM ) ) { generateFilledPoly ( xs , ys , sections , ret_val ) ; return ret_val ; } for ( j = _NUM ; j < size ; j += _NUM ) { AzimuthVar az1 = ( AzimuthVar ) sections . get ( j ) ; AzimuthVar az2 = ( AzimuthVar ) sections . get ( j + _NUM ) ; int off1 = az1 . index ; int off2 = az2 . index ; int l = off2 - off1 ; x_ = new float [ l ] ; y_ = new float [ l ] ; System . arraycopy ( xs , off1 , x_ , _NUM , l ) ; System . arraycopy ( ys , off1 , y_ , _NUM , l ) ; ret_val . add ( x_ ) ; ret_val . add ( y_ ) ; } return ret_val ; }
41754	private ArrayList < String > filterYears ( ArrayList < String > items ) { Iterator < String > iterator ; Calendar now = Calendar . getInstance ( ) ; int year = now . get ( Calendar . YEAR ) ; String yearInString = String . valueOf ( year ) ; Log . d ( TAG , _STR + yearInString ) ; int prevYear = year - _NUM ; String prevYearInString = String . valueOf ( prevYear ) ; Log . d ( TAG , _STR + prevYearInString ) ; for ( iterator = items . iterator ( ) ; iterator . hasNext ( ) ; ) { String s = iterator . next ( ) ; if ( s . matches ( _STR ) && ! s . contains ( yearInString ) && ! s . contains ( prevYearInString ) ) { Log . d ( TAG , _STR + s ) ; iterator . remove ( ) ; } } Log . d ( TAG , _STR + items . toString ( ) ) ; return items ; }
71987	public DataProviderEvent ( final LocalizableMessage reason , final Set < Type > types ) { Reject . ifNull ( reason , types ) ; Reject . ifTrue ( types . isEmpty ( ) ) ; this . reason = reason ; final EnumSet < Type > tmp = EnumSet . noneOf ( Type . class ) ; tmp . addAll ( types ) ; this . types = Collections . unmodifiableSet ( tmp ) ; }
57296	public < T > List < String > validateBean ( T bean , String errIfBeanNull ) { List < String > errors = new ArrayList < String > ( ) ; if ( bean == null ) { errors . add ( errIfBeanNull ) ; return errors ; } Set < ConstraintViolation < T > > violations = validator . validate ( bean ) ; for ( ConstraintViolation < T > violation : violations ) { errors . add ( violation . getMessage ( ) ) ; } return errors ; }
84947	protected void smartInsertAfterBracket ( IDocument document , DocumentCommand command ) { if ( command . offset == - _NUM || document . getLength ( ) == _NUM ) { return ; } try { int p = ( command . offset == document . getLength ( ) ? command . offset - _NUM : command . offset ) ; int line = document . getLineOfOffset ( p ) ; int start = document . getLineOffset ( line ) ; int whiteend = findEndOfWhiteSpace ( document , start , command . offset ) ; if ( whiteend == command . offset ) { int indLine = findMatchingOpenBracket ( document , line , command . offset , _NUM ) ; if ( indLine != - _NUM && indLine != line ) { StringBuffer replaceText = new StringBuffer ( getIndentOfLine ( document , indLine ) ) ; replaceText . append ( document . get ( whiteend , command . offset - whiteend ) ) ; replaceText . append ( command . text ) ; command . length = command . offset - start ; command . offset = start ; command . text = replaceText . toString ( ) ; } } } catch ( BadLocationException e ) { GWTPluginLog . logError ( e ) ; } }
10019	private String attemptToChooseFormattingPattern ( ) { if ( nationalNumber . length ( ) >= MIN_LEADING_DIGITS_LENGTH ) { getAvailableFormats ( nationalNumber . toString ( ) ) ; String formattedNumber = attemptToFormatAccruedDigits ( ) ; if ( formattedNumber . length ( ) > _NUM ) { return formattedNumber ; } return maybeCreateNewTemplate ( ) ? inputAccruedNationalNumber ( ) : accruedInput . toString ( ) ; } else { return appendNationalNumber ( nationalNumber . toString ( ) ) ; } }
65892	private void fillPicks ( ) throws Exception { MLookup orgL = MLookupFactory . get ( Env . getCtx ( ) , m_WindowNo , _NUM , _NUM , DisplayType . TableDir ) ; fWarehouse = new VLookup ( _STR , _BOOL , _BOOL , _BOOL , orgL ) ; lWarehouse . setText ( Msg . translate ( Env . getCtx ( ) , _STR ) ) ; fWarehouse . addVetoableChangeListener ( this ) ; m_M_Warehouse_ID = fWarehouse . getValue ( ) ; MLookup bpL = MLookupFactory . get ( Env . getCtx ( ) , m_WindowNo , _NUM , _NUM , DisplayType . Search ) ; fBPartner = new VLookup ( _STR , _BOOL , _BOOL , _BOOL , bpL ) ; lBPartner . setText ( Msg . translate ( Env . getCtx ( ) , _STR ) ) ; fBPartner . addVetoableChangeListener ( this ) ; lDocType . setText ( Msg . translate ( Env . getCtx ( ) , _STR ) ) ; cmbDocType . addItem ( new KeyNamePair ( MOrder . Table_ID , Msg . translate ( Env . getCtx ( ) , _STR ) ) ) ; cmbDocType . addItem ( new KeyNamePair ( MRMA . Table_ID , Msg . translate ( Env . getCtx ( ) , _STR ) ) ) ; cmbDocType . addActionListener ( this ) ; }
20254	@ Override protected FieldConfigBase createCopy ( FieldConfigBase fieldConfigBase ) { FieldConfigFontPreview copy = null ; if ( fieldConfigBase != null ) { copy = new FieldConfigFontPreview ( fieldConfigBase . getCommonData ( ) ) ; } return copy ; }
58876	public void testConstructorSignBytesZeroNull3 ( ) { byte aBytes [ ] = { } ; int aSign = _NUM ; byte rBytes [ ] = { _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , aNumber . signum ( ) ) ; }
61321	public Object castToType ( int t , XPathContext support ) throws javax . xml . transform . TransformerException { Object result ; switch ( t ) { case CLASS_STRING : result = str ( ) ; break ; case CLASS_NUMBER : result = new Double ( num ( ) ) ; break ; case CLASS_NODESET : result = iter ( ) ; break ; case CLASS_BOOLEAN : result = new Boolean ( bool ( ) ) ; break ; case CLASS_UNKNOWN : result = m_obj ; break ; default : error ( XPATHErrorResources . ER_CANT_CONVERT_TO_TYPE , new Object [ ] { getTypeString ( ) , Integer . toString ( t ) } ) ; result = null ; } return result ; }
28476	public static void forceDeleteOnExit ( File file ) throws IOException { if ( file . isDirectory ( ) ) { deleteDirectoryOnExit ( file ) ; } else { file . deleteOnExit ( ) ; } }
78975	public boolean init ( StepMetaInterface smi , StepDataInterface sdi ) { this . meta = ( ( SortKeyStepMeta ) smi ) ; this . data = ( ( SortKeyStepData ) sdi ) ; return super . init ( smi , sdi ) ; }
36434	private void printAnnotationFromEditor ( final WorkflowAnnotation anno , final Graphics2D g2 ) { Graphics2D gPr = ( Graphics2D ) g2 . create ( ) ; Rectangle2D loc = anno . getLocation ( ) ; gPr . translate ( loc . getX ( ) , loc . getY ( ) ) ; gPr . setClip ( _NUM , _NUM , ( int ) loc . getWidth ( ) , ( int ) loc . getHeight ( ) ) ; Dimension size = new Dimension ( ( int ) loc . getWidth ( ) , ( int ) loc . getHeight ( ) ) ; pane . setSize ( size ) ; pane . setText ( AnnotationDrawUtils . createStyledCommentString ( anno ) ) ; pane . setCaretPosition ( _NUM ) ; pane . paint ( gPr ) ; gPr . dispose ( ) ; }
5520	public void add ( IPoint pt ) { if ( inProgress ) { throw new ConcurrentModificationException ( _STR ) ; } points . add ( pt ) ; }
54020	public static Configuration load ( Reader reader ) throws IOException { try { Properties properties = new Properties ( ) ; properties . load ( reader ) ; return from ( properties ) ; } finally { reader . close ( ) ; } }
41121	public void add ( OffsettedItem item ) { throwIfPrepared ( ) ; try { if ( item . getAlignment ( ) > getAlignment ( ) ) { throw new IllegalArgumentException ( _STR ) ; } } catch ( NullPointerException ex ) { throw new NullPointerException ( _STR ) ; } items . add ( item ) ; }
36058	public static void addAnnotationToXML ( Element annotationsElement , String name , String value ) { if ( value == null ) { deleteAnnotationFromXML ( annotationsElement , name ) ; } else { final Document doc = annotationsElement . getOwnerDocument ( ) ; Element elem = doc . createElement ( _STR ) ; annotationsElement . appendChild ( elem ) ; elem . setAttribute ( _STR , name ) ; elem . setTextContent ( value ) ; } }
51515	public boolean readBoolean ( ) throws IOException { return primitiveTypes . readBoolean ( ) ; }
38006	public Enumeration < String > enumerateMeasures ( ) { Vector < String > newVector = new Vector < String > ( _NUM ) ; newVector . addElement ( _STR ) ; return newVector . elements ( ) ; }
38935	@ Override public Instances defineDataFormat ( ) throws Exception { ArrayList < Attribute > atts ; ArrayList < String > attValues ; int i ; m_Random = new Random ( getSeed ( ) ) ; m_nextClassShouldBeZero = _BOOL ; m_lastLabel = Double . NaN ; setNumExamplesAct ( getNumExamples ( ) ) ; atts = new ArrayList < Attribute > ( ) ; atts . add ( new Attribute ( _STR ) ) ; atts . add ( new Attribute ( _STR ) ) ; atts . add ( new Attribute ( _STR ) ) ; attValues = new ArrayList < String > ( ) ; for ( i = _NUM ; i < _NUM ; i ++ ) { attValues . add ( _STR + i ) ; } atts . add ( new Attribute ( _STR , attValues ) ) ; attValues = new ArrayList < String > ( ) ; for ( i = _NUM ; i <= _NUM ; i ++ ) { attValues . add ( _STR + i ) ; } atts . add ( new Attribute ( _STR , attValues ) ) ; attValues = new ArrayList < String > ( ) ; for ( i = _NUM ; i < _NUM ; i ++ ) { attValues . add ( _STR + i ) ; } atts . add ( new Attribute ( _STR , attValues ) ) ; atts . add ( new Attribute ( _STR ) ) ; atts . add ( new Attribute ( _STR ) ) ; atts . add ( new Attribute ( _STR ) ) ; attValues = new ArrayList < String > ( ) ; for ( i = _NUM ; i < _NUM ; i ++ ) { attValues . add ( _STR + i ) ; } atts . add ( new Attribute ( _STR , attValues ) ) ; m_DatasetFormat = new Instances ( getRelationNameToUse ( ) , atts , _NUM ) ; return m_DatasetFormat ; }
84818	public static double lnGamma ( double alpha ) { double x = alpha , f = _NUM , z ; if ( x < _NUM ) { f = _NUM ; z = x - _NUM ; while ( ++ z < _NUM ) { f *= z ; } x = z ; f = - Math . log ( f ) ; } z = _NUM / ( x * x ) ; return f + ( x - _NUM ) * Math . log ( x ) - x + _NUM + ( ( ( - _NUM * z + _NUM ) * z - _NUM ) * z + _NUM ) / x ; }
45128	private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
82039	public void startTicker ( long delay , boolean rightToLeft ) { if ( ! tickerEnabled ) { return ; } if ( ! isCellRenderer ( ) ) { Form parent = getComponentForm ( ) ; if ( parent != null ) { parent . registerAnimatedInternal ( this ) ; } } tickerStartTime = System . currentTimeMillis ( ) ; tickerDelay = delay ; tickerRunning = _BOOL ; this . rightToLeft = rightToLeft ; if ( isRTL ( ) ) { this . rightToLeft = ! this . rightToLeft ; } }
48169	static CipherSuite valueOf ( int id1 , int id2 ) { id1 &= _NUM ; id2 &= _NUM ; int id = ( id1 << _NUM ) | id2 ; CipherSuite c = idMap . get ( id ) ; if ( c == null ) { String h1 = Integer . toString ( id1 , _NUM ) ; String h2 = Integer . toString ( id2 , _NUM ) ; c = new CipherSuite ( _STR + h1 + _STR + h2 , id ) ; } return c ; }
76449	public static Context createPendingActionContext ( Context context , ReconAction action , String mappingName , JsonValue sourceObject , String reconId , Situation situation ) { Map < String , Object > pendingActionMap = new HashMap < String , Object > ( ) ; pendingActionMap . put ( MAPPING_NAME , mappingName ) ; pendingActionMap . put ( SOURCE_OBJECT , sourceObject ) ; pendingActionMap . put ( RECON_ID , reconId ) ; pendingActionMap . put ( ORIGINAL_SITUATION , situation . toString ( ) ) ; PendingActionContext pendingActionContext = new PendingActionContext ( context , pendingActionMap , action . toString ( ) ) ; return pendingActionContext ; }
68411	private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
66771	public void showDroidsafeTextMarkers ( IEditorPart openedEditor , String className ) { if ( openedEditor != null && openedEditor instanceof ITextEditor && fProcessedClasses != null ) { ITextEditor editor = ( ITextEditor ) openedEditor ; if ( fProcessedClasses . contains ( className ) ) { if ( fClassesNeedUpdate . contains ( className ) ) { ClassMarkerProcessor classProcessor = get ( className ) ; classProcessor . updateTaintMarkers ( editor ) ; fClassesNeedUpdate . remove ( className ) ; } } else { fProcessedClasses . add ( className ) ; Map < String , Map < IntRange , Map < String , Set < CallLocationModel > > > > classTaintedDataMap = fTaintedDataMap . get ( className ) ; Map < String , Set < IntRange > > classUnreachableMethodMap = fUnreachableSourceMethodMap . get ( className ) ; if ( classTaintedDataMap != null || classUnreachableMethodMap != null ) { IEditorInput input = editor . getEditorInput ( ) ; if ( input instanceof FileEditorInput ) { ClassMarkerProcessor classProcessor = get ( className ) ; classProcessor . showDroidsafeTextMarkers ( editor ) ; } } } } }
62900	private static void resolveNewExpression ( NewExpression objSubjectExpression , HashSet < String > objTypesSet ) { ClassReference objClassRef = objSubjectExpression . getClassReference ( ) ; if ( null == objClassRef || null == objClassRef . getFQN ( ) ) { objTypesSet . add ( Types . strResolvingAbortedOnPsiLevel ) ; return ; } objTypesSet . add ( objClassRef . getFQN ( ) ) ; }
2083	private static List < Size > pickUpToThree ( List < Size > sizes ) { List < Size > result = new ArrayList < Size > ( ) ; Size largest = sizes . get ( _NUM ) ; result . add ( largest ) ; Size lastSize = largest ; for ( Size size : sizes ) { double targetArea = Math . pow ( _NUM , result . size ( ) ) * area ( largest ) ; if ( area ( size ) < targetArea ) { if ( ! result . contains ( lastSize ) && ( targetArea - area ( lastSize ) < area ( size ) - targetArea ) ) { result . add ( lastSize ) ; } else { result . add ( size ) ; } } lastSize = size ; if ( result . size ( ) == _NUM ) { break ; } } if ( result . size ( ) < _NUM && ! result . contains ( lastSize ) ) { result . add ( lastSize ) ; } return result ; }
14418	private boolean verifyLogRecord ( String [ ] record , int macPos ) throws Exception { StringBuilder data = new StringBuilder ( ) ; for ( int m = _NUM ; m < record . length - _NUM ; m ++ ) { data . append ( record [ m ] ) ; } curMAC = record [ macPos ] ; verified = helper . verifyMAC ( data . toString ( ) , helper . toByteArray ( curMAC ) ) ; return verified ; }
75751	public static void copyToClipboard ( Transferable t ) { ClipboardHelper . copyToClipboard ( t ) ; }
59710	public static String formatPercent ( int downloadSize , int fileSize ) { float num = ( float ) downloadSize / fileSize ; float percent = ( ( float ) ( int ) ( num * _NUM ) ) / _NUM ; return String . valueOf ( percent + _STR ) ; }
46205	final private String attrDef2AttrDesc ( Attributes attrs ) throws NamingException { StringBuffer attrDesc = new StringBuffer ( _STR ) ; Attribute attr = null ; int count = _NUM ; attr = attrs . get ( NUMERICOID_ID ) ; if ( attr != null ) { attrDesc . append ( writeNumericOID ( attr ) ) ; count ++ ; } else { throw new ConfigurationException ( _STR + _STR ) ; } attr = attrs . get ( NAME_ID ) ; if ( attr != null ) { attrDesc . append ( writeQDescrs ( attr ) ) ; count ++ ; } attr = attrs . get ( DESC_ID ) ; if ( attr != null ) { attrDesc . append ( writeQDString ( attr ) ) ; count ++ ; } attr = attrs . get ( OBSOLETE_ID ) ; if ( attr != null ) { attrDesc . append ( writeBoolean ( attr ) ) ; count ++ ; } attr = attrs . get ( SUP_ID ) ; if ( attr != null ) { attrDesc . append ( writeWOID ( attr ) ) ; count ++ ; } attr = attrs . get ( EQUALITY_ID ) ; if ( attr != null ) { attrDesc . append ( writeWOID ( attr ) ) ; count ++ ; } attr = attrs . get ( ORDERING_ID ) ; if ( attr != null ) { attrDesc . append ( writeWOID ( attr ) ) ; count ++ ; } attr = attrs . get ( SUBSTR_ID ) ; if ( attr != null ) { attrDesc . append ( writeWOID ( attr ) ) ; count ++ ; } attr = attrs . get ( SYNTAX_ID ) ; if ( attr != null ) { attrDesc . append ( writeWOID ( attr ) ) ; count ++ ; } attr = attrs . get ( SINGLE_VAL_ID ) ; if ( attr != null ) { attrDesc . append ( writeBoolean ( attr ) ) ; count ++ ; } attr = attrs . get ( COLLECTIVE_ID ) ; if ( attr != null ) { attrDesc . append ( writeBoolean ( attr ) ) ; count ++ ; } attr = attrs . get ( NO_USER_MOD_ID ) ; if ( attr != null ) { attrDesc . append ( writeBoolean ( attr ) ) ; count ++ ; } attr = attrs . get ( USAGE_ID ) ; if ( attr != null ) { attrDesc . append ( writeQDString ( attr ) ) ; count ++ ; } if ( count < attrs . size ( ) ) { String attrId = null ; for ( NamingEnumeration < ? extends Attribute > ae = attrs . getAll ( ) ; ae . hasMoreElements ( ) ; ) { attr = ae . next ( ) ; attrId = attr . getID ( ) ; if ( attrId . equals ( NUMERICOID_ID ) || attrId . equals ( NAME_ID ) || attrId . equals ( SYNTAX_ID ) || attrId . equals ( DESC_ID ) || attrId . equals ( SINGLE_VAL_ID ) || attrId . equals ( EQUALITY_ID ) || attrId . equals ( ORDERING_ID ) || attrId . equals ( SUBSTR_ID ) || attrId . equals ( NO_USER_MOD_ID ) || attrId . equals ( USAGE_ID ) || attrId . equals ( SUP_ID ) || attrId . equals ( COLLECTIVE_ID ) || attrId . equals ( OBSOLETE_ID ) ) { continue ; } else { attrDesc . append ( writeQDStrings ( attr ) ) ; } } } attrDesc . append ( _STR ) ; return attrDesc . toString ( ) ; }
6496	private void updateActions ( ) { String selectedText = getSelectedText ( ) ; if ( selectedText == null ) selectedText = _STR ; boolean stuffSelected = ! selectedText . equals ( _STR ) ; boolean allSelected = selectedText . equals ( getText ( ) ) ; UNDO_ACTION . setEnabled ( isEnabled ( ) && isEditable ( ) && isUndoAvailable ( ) ) ; CUT_ACTION . setEnabled ( isEnabled ( ) && isEditable ( ) && stuffSelected ) ; COPY_ACTION . setEnabled ( isEnabled ( ) && stuffSelected ) ; PASTE_ACTION . setEnabled ( isEnabled ( ) && isEditable ( ) && isPasteAvailable ( ) ) ; DELETE_ACTION . setEnabled ( isEnabled ( ) && stuffSelected ) ; SELECT_ALL_ACTION . setEnabled ( isEnabled ( ) && ! allSelected ) ; }
52498	public static < T > Collection < T > makeImmutable ( Collection < T > mutableCollection ) { Collection < T > newCollection ; try { @ SuppressWarnings ( _STR ) Class < Collection < T > > cls = ( Class < Collection < T > > ) mutableCollection . getClass ( ) ; newCollection = cls . newInstance ( ) ; } catch ( InstantiationException | IllegalAccessException e ) { throw new IllegalStateException ( e ) ; } for ( T element : mutableCollection ) { newCollection . add ( Utils . makeImmutable ( element ) ) ; } return Collections . unmodifiableCollection ( newCollection ) ; }
70383	public synchronized void trackHexImages ( IHex hex , MediaTracker tracker ) { Image base = hexToImageCache . get ( hex ) ; List < Image > superImgs = hexToImageListCache . get ( hex ) ; List < Image > orthoImgs = orthoListCache . get ( hex ) ; tracker . addImage ( base , _NUM ) ; if ( superImgs != null ) { for ( Iterator < Image > i = superImgs . iterator ( ) ; i . hasNext ( ) ; ) { tracker . addImage ( i . next ( ) , _NUM ) ; } } if ( orthoImgs != null ) { for ( Iterator < Image > i = orthoImgs . iterator ( ) ; i . hasNext ( ) ; ) { tracker . addImage ( i . next ( ) , _NUM ) ; } } }
50142	public static Date parseText ( String dateStr ) { try { return mSimpleTextFormat . parse ( dateStr ) ; } catch ( ParseException e ) { e . printStackTrace ( ) ; throw new RuntimeException ( _STR ) ; } }
57	public boolean isProcessed ( Trace trace , Node node , Direction direction ) { boolean ret = _BOOL ; if ( processor . getNodeType ( ) == node . getType ( ) && processor . getDirection ( ) == direction ) { if ( uriFilter == null || uriFilter . test ( node . getUri ( ) ) ) { ret = _BOOL ; } } if ( log . isLoggable ( Level . FINEST ) ) { log . finest ( _STR + trace + _STR + node + _STR + direction + _STR + ret ) ; } return ret ; }
12893	@ Override public synchronized void powerOnSelfTest ( ) throws Error { for ( Iterator < WaveformSynthesizer > it = waveformSynthesizers . iterator ( ) ; it . hasNext ( ) ; ) { WaveformSynthesizer ws = it . next ( ) ; ws . powerOnSelfTest ( ) ; } }
71239	private QuadEdge [ ] fetchTriangleToVisit ( QuadEdge edge , Stack edgeStack , boolean includeFrame , Set visitedEdges ) { QuadEdge curr = edge ; int edgeCount = _NUM ; boolean isFrame = _BOOL ; do { triEdges [ edgeCount ] = curr ; if ( isFrameEdge ( curr ) ) isFrame = _BOOL ; QuadEdge sym = curr . sym ( ) ; if ( ! visitedEdges . contains ( sym ) ) edgeStack . push ( sym ) ; visitedEdges . add ( curr ) ; edgeCount ++ ; curr = curr . lNext ( ) ; } while ( curr != edge ) ; if ( isFrame && ! includeFrame ) return null ; return triEdges ; }
57839	public Collection engineGenerateCRLs ( InputStream inStream ) throws CRLException { CRL crl ; List crls = new ArrayList ( ) ; while ( ( crl = engineGenerateCRL ( inStream ) ) != null ) { crls . add ( crl ) ; } return crls ; }
14018	public void deleteEntityConfig ( String realm , String federationId ) throws WSFederationMetaException { if ( federationId == null ) { return ; } if ( realm == null ) { realm = _STR ; } String [ ] objs = { federationId , realm } ; try { Map oldAttrs = configInst . getConfiguration ( realm , federationId ) ; Set oldValues = ( Set ) oldAttrs . get ( ATTR_ENTITY_CONFIG ) ; if ( oldValues == null || oldValues . isEmpty ( ) ) { LogUtil . error ( Level . INFO , LogUtil . NO_ENTITY_DESCRIPTOR_DELETE_ENTITY_CONFIG , objs , null ) ; throw new WSFederationMetaException ( _STR , objs ) ; } IDPSSOConfigElement idpconfig = getIDPSSOConfig ( realm , federationId ) ; if ( idpconfig != null ) { removeFromCircleOfTrust ( idpconfig , realm , federationId ) ; } SPSSOConfigElement spconfig = getSPSSOConfig ( realm , federationId ) ; if ( spconfig != null ) { removeFromCircleOfTrust ( spconfig , realm , federationId ) ; } Set attr = new HashSet ( ) ; attr . add ( ATTR_ENTITY_CONFIG ) ; configInst . deleteConfiguration ( realm , federationId , attr ) ; LogUtil . access ( Level . INFO , LogUtil . ENTITY_CONFIG_DELETED , objs , null ) ; WSFederationMetaCache . putEntityConfig ( realm , federationId , null ) ; } catch ( ConfigurationException e ) { debug . error ( _STR , e ) ; String [ ] data = { e . getMessage ( ) , federationId , realm } ; LogUtil . error ( Level . INFO , LogUtil . CONFIG_ERROR_DELETE_ENTITY_CONFIG , data , null ) ; throw new WSFederationMetaException ( e ) ; } }
17071	public static synchronized DataSourceViewsManager sharedInstance ( ) { if ( sharedInstance == null ) sharedInstance = new DataSourceViewsManager ( ) ; return sharedInstance ; }
51904	public String tag ( String inner , String c1 , String c2 ) { boolean color = ( ( attr & ATTR_COLOR ) == ATTR_COLOR ) && ToastBootstrap . color ; String s = _STR ; if ( color ) s += _STR + c1 + _STR ; s += inner ; if ( color ) s += _STR + c2 + _STR ; s += _STR ; if ( color ) s += _STR + c1 + _STR ; return color ? Pretty . format ( s ) : s ; }
24189	private final String loadXmlDefinition ( ) { final Cache cache = CacheFactory . getAnyInstance ( ) ; final StringWriter stringWriter = new StringWriter ( ) ; final PrintWriter printWriter = new PrintWriter ( stringWriter ) ; CacheXmlGenerator . generate ( cache , printWriter , _BOOL , _BOOL , _BOOL ) ; printWriter . close ( ) ; return loadXmlDefinition ( stringWriter . toString ( ) ) ; }
41867	private Long id ( HttpServletRequest request ) { Long id = null ; String pathInfo = request . getPathInfo ( ) ; if ( pathInfo != null && pathInfo . length ( ) > _NUM ) { String idString = pathInfo . substring ( _NUM ) ; id = Long . valueOf ( idString ) ; } return id ; }
85646	public void uncompress ( ) { data . position ( _NUM ) ; InflaterInputStream inflater = new InflaterInputStream ( data . asInputStream ( ) ) ; byte [ ] buffer = new byte [ _NUM ] ; IoBuffer tmp = IoBuffer . allocate ( _NUM ) ; tmp . setAutoExpand ( _BOOL ) ; try { while ( inflater . available ( ) > _NUM ) { int decompressed = inflater . read ( buffer ) ; if ( decompressed <= _NUM ) { break ; } tmp . put ( buffer , _NUM , decompressed ) ; } } catch ( IOException e ) { tmp . free ( ) ; throw new RuntimeException ( _STR , e ) ; } finally { if ( inflater != null ) { try { inflater . close ( ) ; } catch ( IOException e1 ) { } } } data . free ( ) ; data = tmp ; data . flip ( ) ; prepareIO ( ) ; }
78006	public void poll ( final TcpSocketStatisticsHandler handler ) { this . statisticsHandler = handler ; try { fileLoader . load ( ) ; final ByteBuffer buffer = fileLoader . getBuffer ( ) ; lineParser . reset ( ) ; lineParser . handleToken ( buffer , buffer . position ( ) , buffer . limit ( ) ) ; } finally { this . statisticsHandler = null ; } monitoredSockets . purgeEntriesOlderThan ( updateCount ) ; updateCount ++ ; }
51502	@ Override public void close ( ) throws IOException { synchronized ( lock ) { if ( ! isClosed ( ) ) { in . close ( ) ; buf = null ; } } }
51411	public int compareTo ( CharBuffer otherBuffer ) { int compareRemaining = ( remaining ( ) < otherBuffer . remaining ( ) ) ? remaining ( ) : otherBuffer . remaining ( ) ; int thisPos = position ; int otherPos = otherBuffer . position ; char thisByte , otherByte ; while ( compareRemaining > _NUM ) { thisByte = get ( thisPos ) ; otherByte = otherBuffer . get ( otherPos ) ; if ( thisByte != otherByte ) { return thisByte < otherByte ? - _NUM : _NUM ; } thisPos ++ ; otherPos ++ ; compareRemaining -- ; } return remaining ( ) - otherBuffer . remaining ( ) ; }
83396	public UrbanSimZoneCSVWriterV2 ( String matsim4opusTempDirectory , String matsimOutputDirectory ) { this . matsim4opusTempDirectory = matsim4opusTempDirectory ; this . matsimOutputDirectory = matsimOutputDirectory ; try { log . info ( _STR ) ; zoneWriter = IOUtils . getBufferedWriter ( matsim4opusTempDirectory + FILE_NAME ) ; log . info ( _STR + matsim4opusTempDirectory + FILE_NAME + _STR ) ; zoneWriter . write ( Labels . ZONE_ID + _STR + Labels . ACCESSIBILITY_BY_FREESPEED + _STR + Labels . ACCESSIBILITY_BY_CAR + _STR + Labels . ACCESSIBILITY_BY_BIKE + _STR + Labels . ACCESSIBILITY_BY_WALK + _STR + Labels . ACCESSIBILITY_BY_PT ) ; zoneWriter . newLine ( ) ; log . info ( _STR ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
25875	@ Override public void agg ( Object newVal ) { if ( newVal instanceof byte [ ] ) { ByteBuffer buffer = ByteBuffer . wrap ( ( byte [ ] ) newVal ) ; buffer . rewind ( ) ; while ( buffer . hasRemaining ( ) ) { aggVal += buffer . getLong ( ) ; count += buffer . getDouble ( ) ; firstTime = _BOOL ; } return ; } aggVal += ( Long ) newVal ; count ++ ; firstTime = _BOOL ; }
14667	private static PolicyNotification extractPolicyNotification ( String xml ) throws PolicyEvaluationException { PolicyNotification policyNotification = null ; try { String notificationDataBlock = getNotificationDataBlock ( xml ) ; if ( notificationDataBlock != null ) { Document doc = XMLUtils . getXMLDocument ( new ByteArrayInputStream ( notificationDataBlock . getBytes ( ) ) ) ; Node rootNode = XMLUtils . getRootNode ( doc , NODE_POLICY_SERVICE ) ; if ( rootNode != null ) { Node notificationNode = XMLUtils . getChildNode ( rootNode , NODE_POLICY_NOTIFICATION ) ; if ( notificationNode != null ) { policyNotification = PolicyNotification . parseXML ( notificationNode ) ; } else { debug . error ( _STR + _STR + _STR ) ; throw new PolicyEvaluationException ( ResBundleUtils . rbName , _STR , null , null ) ; } } else { debug . error ( _STR + _STR ) ; } } else { debug . error ( _STR + _STR + _STR ) ; } } catch ( Exception xe ) { debug . error ( _STR , xe ) ; throw new PolicyEvaluationException ( ResBundleUtils . rbName , _STR , null , xe ) ; } return policyNotification ; }
70805	public synchronized void flush ( ) throws IOException { checkNotClosed ( ) ; trimToSize ( ) ; journalWriter . flush ( ) ; }
6177	private Object findParcel ( @ NonNull byte [ ] objectArray , @ NonNull String className ) { try { Class classTmp = getClassForName ( className ) ; Constructor declaredConstructor = classTmp . getDeclaredConstructor ( Parcel . class ) ; declaredConstructor . setAccessible ( _BOOL ) ; return declaredConstructor . newInstance ( WearBusTools . byteToParcel ( objectArray ) ) ; } catch ( Exception e ) { Log . d ( WearBusTools . BUSWEAR_TAG , _STR + e . getMessage ( ) ) ; } return null ; }
68584	private static final String decodeFieldName ( final String pXmlFieldName ) { StringBuilder str = new StringBuilder ( ) ; int fieldNameLength = pXmlFieldName . length ( ) ; char currentChar ; for ( int i = _NUM ; i < fieldNameLength ; i ++ ) { currentChar = pXmlFieldName . charAt ( i ) ; if ( currentChar == _STR ) { str . append ( Character . toUpperCase ( pXmlFieldName . charAt ( ++ i ) ) ) ; } else { str . append ( currentChar ) ; } } return str . toString ( ) ; }
22905	public boolean isLoginSet ( ) { return ( username != null && ( password != null && ! username . equals ( _STR ) && ! password . equals ( _STR ) ) ) || oauth ; }
7101	public void addContentItem ( ContentItem contentItem ) { if ( contentItems == null ) { contentItems = new ArrayList < ContentItem > ( ) ; } contentItems . add ( contentItem ) ; }
834	public static String canonicalizeClassName ( String name ) { String classname = name . replace ( _STR , _STR ) ; classname = classname . replace ( _STR , _STR ) ; if ( classname . startsWith ( _STR ) ) classname = classname . substring ( _NUM ) ; if ( classname . endsWith ( _STR ) ) classname = classname . substring ( _NUM , classname . length ( ) - _NUM ) ; return classname ; }
24391	public static final void pause ( final int milliseconds ) { if ( milliseconds >= _NUM || logger . isDebugEnabled ( ) ) { logger . info ( _STR , milliseconds ) ; } final long target = System . currentTimeMillis ( ) + milliseconds ; try { for ( ; ; ) { long msLeft = target - System . currentTimeMillis ( ) ; if ( msLeft <= _NUM ) { break ; } Thread . sleep ( msLeft ) ; } } catch ( InterruptedException e ) { Assert . fail ( _STR , e ) ; } }
63897	public boolean isHighlightWithInvisibleEdge ( ) { return highlightWithInvisibleEdge ; }
31739	private Configuration prepareJobForCancelling ( ) throws Exception { prepareFile ( _STR , _NUM ) ; executedTasks . set ( _NUM ) ; cancelledTasks . set ( _NUM ) ; failMapperId . set ( _NUM ) ; splitsCount . set ( _NUM ) ; Configuration cfg = new Configuration ( ) ; setupFileSystems ( cfg ) ; Job job = Job . getInstance ( cfg ) ; job . setOutputKeyClass ( Text . class ) ; job . setOutputValueClass ( IntWritable . class ) ; job . setMapperClass ( CancellingTestMapper . class ) ; job . setNumReduceTasks ( _NUM ) ; job . setInputFormatClass ( InFormat . class ) ; FileInputFormat . setInputPaths ( job , new Path ( _STR + getTestGridName ( _NUM ) + _STR ) ) ; FileOutputFormat . setOutputPath ( job , new Path ( _STR + getTestGridName ( _NUM ) + _STR ) ) ; job . setJarByClass ( getClass ( ) ) ; return job . getConfiguration ( ) ; }
6246	public void removeChangingListener ( OnWheelChangedListener listener ) { changingListeners . remove ( listener ) ; }
12910	public static double [ ] lsf2lpc ( double [ ] lsf ) { MathUtils . quickSort ( lsf ) ; int P = lsf . length ; int half_order = P / _NUM ; int i , j ; double xf , xx ; double [ ] a = new double [ P / _NUM + _NUM ] ; double [ ] a1 = new double [ P / _NUM + _NUM ] ; double [ ] a2 = new double [ P / _NUM + _NUM ] ; double [ ] b = new double [ P / _NUM + _NUM ] ; double [ ] b1 = new double [ P / _NUM + _NUM ] ; double [ ] b2 = new double [ P / _NUM + _NUM ] ; double [ ] p = new double [ P / _NUM ] ; double [ ] q = new double [ P / _NUM ] ; double [ ] oneMinusA = new double [ P + _NUM ] ; oneMinusA [ _NUM ] = _NUM ; if ( ( lsf [ _NUM ] <= _NUM ) || ( lsf [ _NUM ] >= _NUM ) ) { throw new IllegalArgumentException ( _STR + lsf [ _NUM ] ) ; } for ( i = _NUM ; i < P ; i ++ ) { if ( lsf [ i ] <= lsf [ i - _NUM ] ) throw new IllegalArgumentException ( _STR ) ; if ( ( lsf [ i ] <= _NUM ) || ( lsf [ i ] >= _NUM ) ) throw new IllegalArgumentException ( _STR + i + _STR + lsf [ i ] ) ; } for ( i = _NUM ; i < half_order ; i ++ ) { p [ i ] = - _NUM * Math . cos ( MathUtils . TWOPI * lsf [ _NUM * i ] ) ; q [ i ] = - _NUM * Math . cos ( MathUtils . TWOPI * lsf [ _NUM * i + _NUM ] ) ; } xf = _NUM ; for ( i = _NUM ; i <= P ; i ++ ) { if ( i == _NUM ) xx = _NUM ; else xx = _NUM ; a [ _NUM ] = xx + xf ; b [ _NUM ] = xx - xf ; xf = xx ; for ( j = _NUM ; j < half_order ; j ++ ) { a [ j + _NUM ] = a [ j ] + p [ j ] * a1 [ j ] + a2 [ j ] ; b [ j + _NUM ] = b [ j ] + q [ j ] * b1 [ j ] + b2 [ j ] ; a2 [ j ] = a1 [ j ] ; a1 [ j ] = a [ j ] ; b2 [ j ] = b1 [ j ] ; b1 [ j ] = b [ j ] ; } if ( i > _NUM ) oneMinusA [ i ] = _NUM * ( a [ half_order ] + b [ half_order ] ) ; } return oneMinusA ; }
82988	protected void generateFields ( ) { for ( Iterator < Element > iterator = mElements . iterator ( ) ; iterator . hasNext ( ) ; ) { Element element = iterator . next ( ) ; if ( ! element . used ) { iterator . remove ( ) ; continue ; } PsiField [ ] fields = mClass . getFields ( ) ; boolean duplicateField = _BOOL ; for ( PsiField field : fields ) { String name = field . getName ( ) ; if ( name != null && name . equals ( element . getFieldName ( ) ) ) { duplicateField = _BOOL ; break ; } } if ( duplicateField ) { iterator . remove ( ) ; continue ; } mClass . add ( mFactory . createFieldFromText ( _STR + element . name + _STR + element . getFieldName ( ) + _STR , mClass ) ) ; } }
69011	public boolean isFlying ( ) { return ( flyThroughDialog != null ) ; }
24432	public synchronized void init ( ) { channelFactory = new NioClientSocketChannelFactory ( Executors . newCachedThreadPool ( ) , Executors . newCachedThreadPool ( ) ) ; datagramChannelFactory = new NioDatagramChannelFactory ( Executors . newCachedThreadPool ( ) ) ; timer = new HashedWheelTimer ( ) ; }
6260	public static String removePattern ( final String source , final String regex ) { return replacePattern ( source , regex , StringUtils . EMPTY ) ; }
73636	private void consumeNestedScroll ( int dxUnconsumed , int dyUnconsumed , int dxFinalUnconsumed , int dyFinalUnconsumed ) { if ( mOverScrollEffect == OverScrollEffect . BOUNCE && dyFinalUnconsumed != _NUM ) { mUnconsumedOverScrollOffset += - dyFinalUnconsumed ; int maxOffset = mOverScrollOffsetLimit ; if ( mUnconsumedOverScrollOffset > _NUM ) { mUnconsumedOverScrollOffset = Math . min ( maxOffset , mUnconsumedOverScrollOffset ) ; } else if ( mUnconsumedOverScrollOffset < _NUM ) { mUnconsumedOverScrollOffset = Math . max ( - maxOffset , mUnconsumedOverScrollOffset ) ; } setScrollingOffset ( getUnconsumedScrollingOffset ( ) ) ; } pullEdgeEffects ( dxUnconsumed , dyUnconsumed ) ; }
69321	private void retrieveWaypoints ( SearchQuery query , ArrayList < Waypoint > waypoints ) { String queryLikeSelection2 = _STR + query . textQuery + _STR ; String [ ] waypointSelectionArgs = new String [ ] { queryLikeSelection2 , queryLikeSelection2 , queryLikeSelection2 } ; Cursor cursor = null ; try { cursor = providerUtils . getWaypointCursor ( WAYPOINT_SELECTION_QUERY , waypointSelectionArgs , WAYPOINT_SELECTION_ORDER , MAX_SCORED_WAYPOINTS ) ; if ( cursor != null ) { waypoints . ensureCapacity ( cursor . getCount ( ) ) ; while ( cursor . moveToNext ( ) ) { Waypoint waypoint = providerUtils . createWaypoint ( cursor ) ; if ( LocationUtils . isValidLocation ( waypoint . getLocation ( ) ) ) { waypoints . add ( waypoint ) ; } } } } finally { if ( cursor != null ) { cursor . close ( ) ; } } }
68935	void release ( ) { imageLoader . cancelPendingRequests ( ) ; loading = new boolean [ noxItems . size ( ) ] ; }
5878	public int size ( ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { return count ; } finally { lock . unlock ( ) ; } }
77314	public void add ( String name , long cnt ) { if ( _values == null ) { _values = new ArrayList < > ( _NUM ) ; } _values . add ( new Count ( this , name , cnt ) ) ; }
23029	void closeDialog ( ) ;
66710	private static void decodeTextCompaction ( int [ ] textCompactionData , int [ ] byteCompactionData , int length , StringBuilder result ) { Mode subMode = Mode . ALPHA ; Mode priorToShiftMode = Mode . ALPHA ; int i = _NUM ; while ( i < length ) { int subModeCh = textCompactionData [ i ] ; char ch = _NUM ; switch ( subMode ) { case ALPHA : if ( subModeCh < _NUM ) { ch = ( char ) ( _STR + subModeCh ) ; } else { if ( subModeCh == _NUM ) { ch = _STR ; } else if ( subModeCh == LL ) { subMode = Mode . LOWER ; } else if ( subModeCh == ML ) { subMode = Mode . MIXED ; } else if ( subModeCh == PS ) { priorToShiftMode = subMode ; subMode = Mode . PUNCT_SHIFT ; } else if ( subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE ) { result . append ( ( char ) byteCompactionData [ i ] ) ; } else if ( subModeCh == TEXT_COMPACTION_MODE_LATCH ) { subMode = Mode . ALPHA ; } } break ; case LOWER : if ( subModeCh < _NUM ) { ch = ( char ) ( _STR + subModeCh ) ; } else { if ( subModeCh == _NUM ) { ch = _STR ; } else if ( subModeCh == AS ) { priorToShiftMode = subMode ; subMode = Mode . ALPHA_SHIFT ; } else if ( subModeCh == ML ) { subMode = Mode . MIXED ; } else if ( subModeCh == PS ) { priorToShiftMode = subMode ; subMode = Mode . PUNCT_SHIFT ; } else if ( subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE ) { result . append ( ( char ) byteCompactionData [ i ] ) ; } else if ( subModeCh == TEXT_COMPACTION_MODE_LATCH ) { subMode = Mode . ALPHA ; } } break ; case MIXED : if ( subModeCh < PL ) { ch = MIXED_CHARS [ subModeCh ] ; } else { if ( subModeCh == PL ) { subMode = Mode . PUNCT ; } else if ( subModeCh == _NUM ) { ch = _STR ; } else if ( subModeCh == LL ) { subMode = Mode . LOWER ; } else if ( subModeCh == AL ) { subMode = Mode . ALPHA ; } else if ( subModeCh == PS ) { priorToShiftMode = subMode ; subMode = Mode . PUNCT_SHIFT ; } else if ( subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE ) { result . append ( ( char ) byteCompactionData [ i ] ) ; } else if ( subModeCh == TEXT_COMPACTION_MODE_LATCH ) { subMode = Mode . ALPHA ; } } break ; case PUNCT : if ( subModeCh < PAL ) { ch = PUNCT_CHARS [ subModeCh ] ; } else { if ( subModeCh == PAL ) { subMode = Mode . ALPHA ; } else if ( subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE ) { result . append ( ( char ) byteCompactionData [ i ] ) ; } else if ( subModeCh == TEXT_COMPACTION_MODE_LATCH ) { subMode = Mode . ALPHA ; } } break ; case ALPHA_SHIFT : subMode = priorToShiftMode ; if ( subModeCh < _NUM ) { ch = ( char ) ( _STR + subModeCh ) ; } else { if ( subModeCh == _NUM ) { ch = _STR ; } else if ( subModeCh == TEXT_COMPACTION_MODE_LATCH ) { subMode = Mode . ALPHA ; } } break ; case PUNCT_SHIFT : subMode = priorToShiftMode ; if ( subModeCh < PAL ) { ch = PUNCT_CHARS [ subModeCh ] ; } else { if ( subModeCh == PAL ) { subMode = Mode . ALPHA ; } else if ( subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE ) { result . append ( ( char ) byteCompactionData [ i ] ) ; } else if ( subModeCh == TEXT_COMPACTION_MODE_LATCH ) { subMode = Mode . ALPHA ; } } break ; } if ( ch != _NUM ) { result . append ( ch ) ; } i ++ ; } }
77713	public MediaConfig createChannelFileAttachment ( String file , MediaConfig config ) { config . addCredentials ( this ) ; String xml = POSTFILE ( this . url + _STR , file , config . name , config . toXML ( ) ) ; Element root = parse ( xml ) ; if ( root == null ) { return null ; } try { MediaConfig media = new MediaConfig ( ) ; media . parseXML ( root ) ; return media ; } catch ( Exception exception ) { this . exception = SDKException . parseFailure ( exception ) ; throw this . exception ; } }
20904	public void addParam ( AstNode param ) { assertNotNull ( param ) ; if ( params == null ) { params = new ArrayList < AstNode > ( ) ; } params . add ( param ) ; param . setParent ( this ) ; }
69701	DeleteEvent ( @ NonNull JSONObject json ) throws JSONException { super ( TYPE_DELETE , json ) ; if ( TextUtils . isEmpty ( mBlockId ) ) { throw new JSONException ( TYPENAME_DELETE + _STR + JSON_BLOCK_ID ) ; } mOldXml = json . optString ( JSON_OLD_VALUE ) ; JSONArray ids = json . getJSONArray ( JSON_IDS ) ; int count = ids . length ( ) ; List < String > temp = new ArrayList < > ( count ) ; for ( int i = _NUM ; i < count ; ++ i ) { temp . add ( ids . getString ( i ) ) ; } mIds = Collections . unmodifiableList ( temp ) ; }
22042	public static boolean isFullCopyRestorable ( Volume volume , DbClient dbClient ) { boolean result = _BOOL ; String replicaState = volume . getReplicaState ( ) ; if ( isVolumeFullCopy ( volume , dbClient ) && replicaState != null && ! replicaState . isEmpty ( ) ) { ReplicationState state = ReplicationState . getEnumValue ( replicaState ) ; if ( state != null && state == ReplicationState . SYNCHRONIZED ) { result = _BOOL ; } } return result ; }
46203	private final static String [ ] readQDStrings ( String string , int [ ] pos ) throws NamingException { return readQDescrs ( string , pos ) ; }
48707	private static boolean isBufferTooLarge ( ByteBuffer buf ) { return isBufferTooLarge ( buf . capacity ( ) ) ; }
24012	public static void resetIndexBufferTime ( ) { SAFE_QUERY_TIME . set ( _NUM ) ; }
23972	protected abstract AdminResponse createResponse ( DistributionManager dm ) ;
56130	protected boolean checkExternalStorageAndNotify ( String fileName ) { if ( fileName != null && fileName . startsWith ( _STR ) ) { alertDownloadFailure ( R . string . download_no_sdcard_dlg_title ) ; return _BOOL ; } String status = Environment . getExternalStorageState ( ) ; if ( ! status . equals ( Environment . MEDIA_MOUNTED ) ) { int title ; if ( status . equals ( Environment . MEDIA_SHARED ) ) { title = R . string . download_sdcard_busy_dlg_title ; } else { title = R . string . download_no_sdcard_dlg_title ; } alertDownloadFailure ( title ) ; return _BOOL ; } return _BOOL ; }
79982	public static String plnoun ( final int quantity , final String noun ) { final String enoun = fullForm ( noun ) ; if ( quantity == _NUM ) { return singular ( enoun ) ; } else { return plural ( noun ) ; } }
13986	public boolean verifyXMLSignature ( org . w3c . dom . Element element , java . lang . String certAlias ) throws XMLSignatureException { return verifyXMLSignature ( element , DEF_ID_ATTRIBUTE , certAlias ) ; }
62826	public void add ( Video video ) { videoList . add ( video ) ; notifyDataSetChanged ( ) ; }
20340	private static boolean isInHorizontalTargetZone ( float x , float y , float handleXStart , float handleXEnd , float handleY , float targetRadius ) { if ( x > handleXStart && x < handleXEnd && Math . abs ( y - handleY ) <= targetRadius ) { return _BOOL ; } return _BOOL ; }
83162	public void readTransportSystems ( final int [ ] columnsIndices , final BufferedReader reader ) throws IOException { String line = reader . readLine ( ) ; while ( line != null && line . length ( ) > _NUM ) { line = reader . readLine ( ) ; } }
61793	private boolean hasPrefix ( byte [ ] nal ) { if ( nal [ _NUM ] == _NUM && nal [ _NUM ] == _NUM && nal [ _NUM ] == _NUM && nal [ _NUM ] == _NUM ) return _BOOL ; else return _BOOL ; }
10530	private void unshareMain ( ) { int [ ] old = _mainHash ; int len = _mainHash . length ; _mainHash = new int [ len ] ; System . arraycopy ( old , _NUM , _mainHash , _NUM , len ) ; _mainHashShared = _BOOL ; }
54133	public ComponentConfigBuilder addItemInMultifield ( String multifieldLabel , int index , String itemType , String itemLabel , String value ) { String type = String . format ( _STR , index , itemType ) ; String label = String . format ( _STR , multifieldLabel , itemLabel ) ; config . add ( new ConfigurationEntry ( currentTab , type , label , value ) ) ; return this ; }
19463	public int size ( ) { return names . size ( ) ; }
5550	public static IMultiPoint [ ] randomPoints ( int n , int d , int scale ) { IMultiPoint points [ ] = new IMultiPoint [ n ] ; for ( int i = _NUM ; i < n ; i ++ ) { StringBuilder sb = new StringBuilder ( ) ; for ( int j = _NUM ; j < d ; j ++ ) { sb . append ( rGen . nextDouble ( ) * scale ) ; if ( j < d - _NUM ) { sb . append ( _STR ) ; } } points [ i ] = new Hyperpoint ( sb . toString ( ) ) ; } return points ; }
9334	private void parseParameters ( String parameters ) { Log . v ( _STR , _STR + _STR + parameters ) ; if ( parameters != null ) { int i ; do { i = parameters . indexOf ( _STR ) ; if ( i < _NUM ) { parseParameter ( parameters ) ; } else { parseParameter ( parameters . substring ( _NUM , i ) ) ; parameters = parameters . substring ( i + _NUM ) ; } } while ( i >= _NUM ) ; } }
79728	public void addHttpSessionToken ( String site , String token ) { if ( ! site . contains ( _STR ) ) { site = site + ( _STR ) ; } HttpSessionTokensSet siteTokens = sessionTokens . get ( site ) ; if ( siteTokens == null ) { siteTokens = new HttpSessionTokensSet ( ) ; sessionTokens . put ( site , siteTokens ) ; } log . info ( _STR + site + _STR + token ) ; siteTokens . addToken ( token ) ; unmarkRemovedDefaultSessionToken ( site , token ) ; }
17013	public GradleDistribution deserializeFromString ( String distributionString ) { Preconditions . checkNotNull ( distributionString ) ; String localInstallationPrefix = _STR ; if ( distributionString . startsWith ( localInstallationPrefix ) && distributionString . endsWith ( _STR ) ) { String localInstallationDir = distributionString . substring ( localInstallationPrefix . length ( ) , distributionString . length ( ) - _NUM ) ; return GradleDistribution . forLocalInstallation ( new File ( localInstallationDir ) ) ; } String remoteDistributionPrefix = _STR ; if ( distributionString . startsWith ( remoteDistributionPrefix ) && distributionString . endsWith ( _STR ) ) { String remoteDistributionUri = distributionString . substring ( remoteDistributionPrefix . length ( ) , distributionString . length ( ) - _NUM ) ; return GradleDistribution . forRemoteDistribution ( createURI ( remoteDistributionUri ) ) ; } String versionPrefix = _STR ; if ( distributionString . startsWith ( versionPrefix ) && distributionString . endsWith ( _STR ) ) { String version = distributionString . substring ( versionPrefix . length ( ) , distributionString . length ( ) - _NUM ) ; return GradleDistribution . forVersion ( version ) ; } String wrapperString = _STR ; if ( distributionString . equals ( wrapperString ) ) { return GradleDistribution . fromBuild ( ) ; } String message = String . format ( _STR , distributionString ) ; throw new RuntimeException ( message ) ; }
16147	public double metersToPixels ( ) { double screenCenterLat = screenTopLeft . latitude - screenSize . latitude / _NUM ; double metersToLon = _NUM / ( Util . LON_TO_METERS_AT_EQUATOR * Math . cos ( screenCenterLat / _NUM * Math . PI ) ) ; return screenSize . longitude / windowWidth * metersToLon ; }
54568	public boolean sendViaDataSocket ( byte [ ] bytes , int start , int len ) { if ( dataOutputStream == null ) { Log . i ( TAG , _STR ) ; return _BOOL ; } if ( len == _NUM ) { return _BOOL ; } try { dataOutputStream . write ( bytes , start , len ) ; } catch ( IOException e ) { Log . i ( TAG , _STR ) ; Log . i ( TAG , e . toString ( ) ) ; return _BOOL ; } localDataSocket . reportTraffic ( len ) ; return _BOOL ; }
29714	private void pushContext ( BaseContext c ) { contextStack . push ( c ) ; }
73009	@ Override public void bookmarksOrHistoryPicker ( ComboViews startView ) { if ( mTabControl . getCurrentWebView ( ) == null ) { return ; } if ( isInCustomActionMode ( ) ) { endActionMode ( ) ; } Bundle extras = new Bundle ( ) ; extras . putBoolean ( BrowserBookmarksPage . EXTRA_DISABLE_WINDOW , ! mTabControl . canCreateNewTab ( ) ) ; mUi . showComboView ( startView , extras ) ; }
12695	public FST ( String fileName , String encoding , boolean verbose ) throws IOException { FileInputStream fis = new FileInputStream ( fileName ) ; try { loadHeaderless ( fis , encoding , verbose ) ; } finally { fis . close ( ) ; } }
12825	public static double [ ] normalizeZscore ( double [ ] x ) { double mn = mean ( x , _NUM ) ; double sd = standardDeviation ( x , _NUM ) ; for ( int i = _NUM ; i < x . length ; i ++ ) if ( ! Double . isNaN ( x [ i ] ) ) x [ i ] = ( x [ i ] - mn ) / sd ; return x ; }
80813	void addLocation ( String location ) { if ( fLocationList . contains ( location ) ) { return ; } fLocationList . add ( location ) ; fTableViewer . refresh ( ) ; fTableViewer . setChecked ( location , _BOOL ) ; fTableViewer . setSelection ( new StructuredSelection ( location ) ) ; validateLocations ( ) ; }
33031	public JavaFormatter ( String lineDelimiter , int initialIndentLevel , boolean useCodeFormatter , IJavaProject project ) { fLineDelimiter = lineDelimiter ; fUseCodeFormatter = useCodeFormatter ; fInitialIndentLevel = initialIndentLevel ; fProject = project ; }
61576	public String encode ( final String pString , final String charset ) throws EncoderException { if ( pString == null ) { return null ; } try { return encodeText ( pString , charset ) ; } catch ( UnsupportedEncodingException e ) { throw new EncoderException ( e . getMessage ( ) ) ; } }
55596	private static void checkPathNeed ( ) { if ( samplingInterval == - _NUM ) { lastPreloadTime = readMorePaths ( ) ; } if ( ! Double . isNaN ( lastPreloadTime ) && SimClock . getTime ( ) >= lastPreloadTime - ( samplingInterval * MIN_AHEAD_INTERVALS ) ) { for ( int i = _NUM ; i < nrofPreload && ! Double . isNaN ( lastPreloadTime ) ; i ++ ) { lastPreloadTime = readMorePaths ( ) ; } } }
84735	public double wide ( Prior prior , Likelihood likelihood ) throws OperatorFailedException { final int nodeCount = tree . getNodeCount ( ) ; final NodeRef root = tree . getRoot ( ) ; NodeRef i ; int indexI ; do { indexI = MathUtils . nextInt ( nodeCount ) ; i = tree . getNode ( indexI ) ; } while ( root == i || ( tree . getParent ( i ) == root && tree . getNodeHeight ( i ) > tree . getNodeHeight ( getOtherChild ( tree , tree . getParent ( i ) , i ) ) ) ) ; List < Integer > secondNodeIndices = new ArrayList < Integer > ( ) ; List < Double > probabilities = new ArrayList < Double > ( ) ; NodeRef j , jP ; NodeRef iP = tree . getParent ( i ) ; double heightIP = tree . getNodeHeight ( iP ) ; double heightI = tree . getNodeHeight ( i ) ; double sum = _NUM ; double backward = calculateTreeLikelihood ( prior , likelihood , tree ) ; int offset = ( int ) - backward ; backward = Math . exp ( backward + offset ) ; for ( int n = _NUM ; n < nodeCount ; n ++ ) { j = tree . getNode ( n ) ; if ( j != root ) { jP = tree . getParent ( j ) ; if ( ( iP != jP ) && ( tree . getNodeHeight ( j ) < heightIP ) && ( heightI < tree . getNodeHeight ( jP ) ) ) { secondNodeIndices . add ( n ) ; swap ( tree , i , j , iP , jP ) ; double prob = Math . exp ( calculateTreeLikelihood ( prior , likelihood , tree ) + offset ) ; probabilities . add ( prob ) ; swap ( tree , i , j , jP , iP ) ; sum += prob ; } } } if ( sum <= _NUM ) { throw new OperatorFailedException ( _STR ) ; } double ran = Math . random ( ) * sum ; int index = _NUM ; while ( ran > _NUM ) { ran -= probabilities . get ( index ) ; index ++ ; } index -- ; j = tree . getNode ( secondNodeIndices . get ( index ) ) ; jP = tree . getParent ( j ) ; double heightJP = tree . getNodeHeight ( jP ) ; double heightJ = tree . getNodeHeight ( j ) ; double sumForward2 = _NUM ; NodeRef k , kP ; for ( int n = _NUM ; n < nodeCount ; n ++ ) { k = tree . getNode ( n ) ; if ( k != root ) { kP = tree . getParent ( k ) ; if ( ( jP != kP ) && ( tree . getNodeHeight ( k ) < heightJP ) && ( heightJ < tree . getNodeHeight ( kP ) ) ) { swap ( tree , j , k , jP , kP ) ; double prob = Math . exp ( calculateTreeLikelihood ( prior , likelihood , tree ) + offset ) ; sumForward2 += prob ; swap ( tree , j , k , kP , jP ) ; } } } swap ( tree , i , j , iP , jP ) ; double forward = probabilities . get ( index ) ; iP = jP ; heightIP = heightJP ; double sumBackward = _NUM ; for ( int n = _NUM ; n < nodeCount ; n ++ ) { j = tree . getNode ( n ) ; if ( j != root ) { jP = tree . getParent ( j ) ; if ( ( iP != jP ) && ( tree . getNodeHeight ( j ) < heightIP ) && ( heightI < tree . getNodeHeight ( jP ) ) ) { swap ( tree , i , j , iP , jP ) ; double prob = Math . exp ( calculateTreeLikelihood ( prior , likelihood , tree ) + offset ) ; sumBackward += prob ; swap ( tree , i , j , jP , iP ) ; } } } double sumBackward2 = _NUM ; j = tree . getNode ( secondNodeIndices . get ( index ) ) ; jP = tree . getParent ( j ) ; heightJP = tree . getNodeHeight ( jP ) ; heightJ = tree . getNodeHeight ( j ) ; for ( int n = _NUM ; n < nodeCount ; n ++ ) { k = tree . getNode ( n ) ; if ( k != root ) { kP = tree . getParent ( k ) ; if ( ( jP != kP ) && ( tree . getNodeHeight ( k ) < heightJP ) && ( heightJ < tree . getNodeHeight ( kP ) ) ) { swap ( tree , j , k , jP , kP ) ; double prob = Math . exp ( calculateTreeLikelihood ( prior , likelihood , tree ) + offset ) ; sumBackward2 += prob ; swap ( tree , j , k , kP , jP ) ; } } } double forwardProb = ( forward / sum ) + ( forward / sumForward2 ) ; double backwardProb = ( backward / sumBackward ) + ( backward / sumBackward2 ) ; double hastingsRatio = Math . log ( backwardProb / forwardProb ) ; return hastingsRatio ; }
65541	public boolean isInputColumnNameAllowed ( String columnName ) { if ( columnName == null || columnName . length ( ) == _NUM ) return _BOOL ; getInputColumnNames ( _BOOL ) ; for ( int i = _NUM ; i < m_inputcolumnnames . length ; i ++ ) { if ( columnName . equals ( m_inputcolumnnames [ i ] ) ) return _BOOL ; } return _BOOL ; }
55800	public static int rgb ( String hex ) { int color = ( int ) Long . parseLong ( hex . replace ( _STR , _STR ) , _NUM ) ; int r = ( color > > _NUM ) & _NUM ; int g = ( color > > _NUM ) & _NUM ; int b = ( color > > _NUM ) & _NUM ; return Color . rgb ( r , g , b ) ; }
38832	@ Override public void addPropertyChangeListener ( String name , PropertyChangeListener pcl ) { m_bcSupport . addPropertyChangeListener ( name , pcl ) ; }
51792	public void testEmptyOrNullBlob ( ) throws Exception { try { PreparedStatement stmt = connection . prepareStatement ( _STR ) ; try { stmt . setInt ( _NUM , _NUM ) ; stmt . setBytes ( _NUM , new byte [ _NUM ] ) ; int insertedCount = stmt . executeUpdate ( ) ; assertTrue ( _STR , insertedCount == _NUM ) ; stmt . setInt ( _NUM , _NUM ) ; stmt . setNull ( _NUM , Types . BINARY ) ; insertedCount = stmt . executeUpdate ( ) ; assertTrue ( _STR , insertedCount == _NUM ) ; } finally { stmt . close ( ) ; } stmt = connection . prepareStatement ( _STR ) ; stmt . setInt ( _NUM , _NUM ) ; try { ResultSet rs = stmt . executeQuery ( ) ; assertTrue ( _STR , rs . next ( ) ) ; assertTrue ( _STR , Arrays . equals ( rs . getBytes ( _NUM ) , new byte [ _NUM ] ) ) ; rs . close ( ) ; stmt . setInt ( _NUM , _NUM ) ; rs = stmt . executeQuery ( ) ; assertTrue ( _STR , rs . next ( ) ) ; assertTrue ( _STR , rs . getObject ( _NUM ) == null ) ; rs . close ( ) ; } finally { stmt . close ( ) ; } } catch ( Exception ex ) { ex . printStackTrace ( ) ; throw ex ; } }
22346	private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( _STR ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
22620	private synchronized void rebuildJournal ( ) throws IOException { if ( journalWriter != null ) { journalWriter . close ( ) ; } Writer writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFileTmp ) , Utils . US_ASCII ) ) ; try { writer . write ( MAGIC ) ; writer . write ( _STR ) ; writer . write ( VERSION_1 ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( appVersion ) ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( valueCount ) ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; for ( Entry entry : lruEntries . values ( ) ) { if ( entry . currentEditor != null ) { writer . write ( DIRTY + _STR + entry . key + _STR ) ; } else { writer . write ( CLEAN + _STR + entry . key + entry . getLengths ( ) + _STR ) ; } } } finally { writer . close ( ) ; } if ( journalFile . exists ( ) ) { renameTo ( journalFile , journalFileBackup , _BOOL ) ; } renameTo ( journalFileTmp , journalFile , _BOOL ) ; journalFileBackup . delete ( ) ; journalWriter = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFile , _BOOL ) , Utils . US_ASCII ) ) ; }
18688	public void testCase22 ( ) { byte bBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM } ; byte rBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM } ; int bSign = - _NUM ; BigInteger aNumber = BigInteger . ZERO ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . subtract ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _NUM , result . signum ( ) ) ; }
65099	@ SuppressWarnings ( _STR ) public void restore ( String fileName ) throws IOException , ClassNotFoundException { ObjectInputStream ois = new ObjectInputStream ( new FileInputStream ( fileName ) ) ; locations = ( Map < V , Point > ) ois . readObject ( ) ; ois . close ( ) ; initializeLocations ( ) ; locked = _BOOL ; fireStateChanged ( ) ; }
50516	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
23833	public void waitForData ( ) { if ( this . initialized ) { return ; } waitOnInitialization ( this . initializationLatchAfterGetInitialImage ) ; }
12497	private void blackmanHarris4sMin ( int size ) { int start = ( windowFunction . length - size ) / _NUM ; int stop = ( windowFunction . length + size ) / _NUM ; double scale = _NUM / ( double ) size / _NUM ; for ( int i = _NUM ; start < stop ; start ++ , i ++ ) windowFunction [ i ] = scale * ( _NUM - _NUM * Math . cos ( twoPI * i / size ) + _NUM * Math . cos ( _NUM * twoPI * i / size ) - _NUM * Math . cos ( _NUM * twoPI * i / size ) ) ; }
16000	private byte [ ] calculateCMSKeyChecksum ( byte [ ] key ) { byte [ ] result = new byte [ _NUM ] ; sha1 . update ( key , _NUM , key . length ) ; sha1 . doFinal ( digest , _NUM ) ; System . arraycopy ( digest , _NUM , result , _NUM , _NUM ) ; return result ; }
59409	public int hashCode ( ) { return _lowerNick . hashCode ( ) ; }
53795	public boolean incrementReceived ( ) { Long diff = System . currentTimeMillis ( ) - startTime ; if ( diff >= _NUM ) { packetsPerSecond = intervalPackets ; startTime = System . currentTimeMillis ( ) ; intervalPackets = _NUM ; return _BOOL ; } else { intervalPackets ++ ; } this . receivedPackets ++ ; return _BOOL ; }
80050	Sentence parseSentence ( final String text , final ConversationContext ctx ) { if ( isEmpty ( ) ) { return ConversationParser . parse ( text , ctx ) ; } String txt = text . trim ( ) ; final Sentence sentence = new SentenceImplementation ( ctx , txt ) ; txt = ConversationParser . detectSentenceType ( txt , sentence ) ; if ( typeMatching ) { readTypeMatchExpressions ( txt , ctx , sentence ) ; } else if ( exactMatching ) { readSimpleExpressions ( txt , ctx , sentence ) ; } else if ( similarMatching ) { readSimpleExpressions ( txt , ctx , sentence ) ; } else if ( jokerMatching ) { readJokerExpressions ( txt , ctx , sentence ) ; } else if ( caseInsensitive ) { readSimpleExpressions ( txt , ctx , sentence ) ; } return sentence ; }
54094	public KafkaCluster usingDirectory ( File dataDir ) { if ( running ) throw new IllegalStateException ( _STR ) ; if ( dataDir != null && dataDir . exists ( ) && ! dataDir . isDirectory ( ) && ! dataDir . canWrite ( ) && ! dataDir . canRead ( ) ) { throw new IllegalArgumentException ( _STR ) ; } this . dataDir = dataDir ; return this ; }
79601	private void expand ( int i ) { if ( count + i <= buf . length ) { return ; } byte [ ] newbuf = mPool . getBuf ( ( count + i ) * _NUM ) ; System . arraycopy ( buf , _NUM , newbuf , _NUM , count ) ; mPool . returnBuf ( buf ) ; buf = newbuf ; }
62735	void onConsumeFinished ( Purchase purchase , IabResult result ) ;
12897	protected boolean checkProsodicPosition ( Element currentRulePart , String prosodicPositionType ) { NamedNodeMap attNodes = currentRulePart . getAttributes ( ) ; for ( int z = _NUM ; z < attNodes . getLength ( ) ; z ++ ) { Node el = attNodes . item ( z ) ; String currentAtt = el . getNodeName ( ) ; String currentVal = el . getNodeValue ( ) ; if ( currentAtt . equals ( _STR ) ) { if ( ! currentVal . startsWith ( _STR ) ) { if ( ! prosodicPositionType . equals ( currentVal ) ) return _BOOL ; } else { currentVal = currentVal . substring ( _NUM , currentVal . length ( ) ) ; if ( prosodicPositionType . equals ( currentVal ) ) return _BOOL ; } } } return _BOOL ; }
79290	public static BigDecimal parseBigDecimalForEntity ( String bigDecimalString ) throws NumberFormatException { if ( bigDecimalString == null ) { return null ; } bigDecimalString = bigDecimalString . trim ( ) ; bigDecimalString = bigDecimalString . replaceAll ( _STR , _STR ) ; if ( bigDecimalString . length ( ) < _NUM ) { return null ; } return new BigDecimal ( bigDecimalString ) ; }
36292	public static void registerOperators ( String name , InputStream operatorsXML , ClassLoader classLoader ) { registerOperators ( name , operatorsXML , classLoader , null ) ; }
84043	private void doPermissionWorkBeforeAndroidM ( @ NonNull Activity activity , @ NonNull String [ ] permissions , @ Nullable PermissionsResultAction action ) { for ( String perm : permissions ) { if ( action != null ) { if ( ! mPermissions . contains ( perm ) ) { action . onResult ( perm , Permissions . NOT_FOUND ) ; } else if ( ActivityCompat . checkSelfPermission ( activity , perm ) != PackageManager . PERMISSION_GRANTED ) { action . onResult ( perm , Permissions . DENIED ) ; } else { action . onResult ( perm , Permissions . GRANTED ) ; } } } }
15058	public void deleteSubGroupContainers ( Set groupContainers ) throws AMException , SSOException { Iterator iter = groupContainers . iterator ( ) ; while ( iter . hasNext ( ) ) { String groupContainerDN = ( String ) iter . next ( ) ; AMGroupContainer groupContainer = new AMGroupContainerImpl ( token , groupContainerDN ) ; groupContainer . delete ( ) ; } }
79155	public GlowTask ( Plugin owner , Runnable task , boolean sync , long delay , long period ) { super ( task , null ) ; taskId = nextTaskId . getAndIncrement ( ) ; description = task . toString ( ) ; this . owner = owner ; this . delay = delay ; this . period = period ; counter = _NUM ; this . sync = sync ; }
42286	public static void init ( String [ ] args ) { try { compiler . initCompiler ( args ) ; if ( VM . BuildForAdaptiveSystem && VM . BuildWithBaseBootImageCompiler ) { optCompiler . initCompiler ( args ) ; } } catch ( Throwable e ) { while ( e != null ) { e . printStackTrace ( ) ; e = e . getCause ( ) ; } } }
40996	static native boolean openDev ( ) ;
75144	int sendNextByte ( ) { int result = _NUM ; try { long tDiff = interByteTime - ( ( System . currentTimeMillis ( ) - lastRxTime ) * _NUM ) ; if ( tDiff > _NUM ) { log . debug ( _STR + tDiff + _STR ) ; Thread . sleep ( tDiff / _NUM , ( int ) ( tDiff % _NUM ) ) ; } } catch ( InterruptedException ex ) { log . error ( _STR + ex . toString ( ) ) ; } if ( currTxCharPos >= currTxTgm . length ) { result = dequeueTelegram ( ) ; } if ( result == _NUM ) { writeChar ( currTxTgm [ currTxCharPos ++ ] , _BOOL ) ; if ( currTxCharPos >= currTxTgm . length ) { setProtStat ( ProtStatus . RECEIVING ) ; } } return result ; }
79709	public static String encode ( Serializable o ) { ByteArrayOutputStream bos = new ByteArrayOutputStream ( ) ; try { ObjectOutputStream oos = new ObjectOutputStream ( bos ) ; try { oos . writeObject ( o ) ; oos . flush ( ) ; } finally { oos . close ( ) ; } return Base64 . encodeBytes ( bos . toByteArray ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
26275	public static Map < String , Object > createImage ( DispatchContext dctx , Map < String , ? extends Object > context ) { Map < String , Object > result = createImageMethod ( dctx , context ) ; return result ; }
41189	public void addProfiles ( @ NonNull IProfile ... profiles ) { if ( mAccountHeaderBuilder . mProfiles == null ) { mAccountHeaderBuilder . mProfiles = new ArrayList < > ( ) ; } Collections . addAll ( mAccountHeaderBuilder . mProfiles , IdDistributor . checkIds ( profiles ) ) ; mAccountHeaderBuilder . updateHeaderAndList ( ) ; }
3192	private static boolean isIdentifierName ( String k ) { int n = k . length ( ) ; if ( n == _NUM ) { return _BOOL ; } if ( ! Character . isJavaIdentifierStart ( k . charAt ( _NUM ) ) ) { return _BOOL ; } for ( int i = _NUM ; i < n ; ++ i ) { if ( ! Character . isJavaIdentifierPart ( k . charAt ( i ) ) ) { return _BOOL ; } } return _BOOL ; }
59594	static boolean lessThanUnsignedLong ( long x1 , long x2 ) { return ( x1 + Long . MIN_VALUE ) < ( x2 + Long . MIN_VALUE ) ; }
52265	private void moveSingleNode ( Object source , Point newPoint ) { DisplayNode node = ( DisplayNode ) source ; int deltaX = newPoint . x - clickPoint . x ; int deltaY = newPoint . y - clickPoint . y ; int newX = node . getLocation ( ) . x + deltaX ; int newY = node . getLocation ( ) . y + deltaY ; node . setLocation ( newX , newY ) ; }
79404	public static < T > List < T > toList ( T obj1 , T obj2 , T obj3 ) { List < T > list = new LinkedList < T > ( ) ; list . add ( obj1 ) ; list . add ( obj2 ) ; list . add ( obj3 ) ; return list ; }
45069	public void addMacroRecord ( MacroRecord record ) { if ( record != null ) macroRecords . add ( record ) ; }
10382	@ SuppressWarnings ( _STR ) protected KafkaSpoutWrapper createKafkaSpout ( Map conf , TopologyContext context , SpoutOutputCollector collector , final String topic , String schemeClsName , SpoutSpec spoutSpec , Map < String , StreamDefinition > sds ) throws Exception { String kafkaBrokerZkQuorum = config . getString ( _STR ) ; BrokerHosts hosts = null ; if ( config . hasPath ( _STR ) ) { hosts = new ZkHosts ( kafkaBrokerZkQuorum , config . getString ( _STR ) ) ; } else { hosts = new ZkHosts ( kafkaBrokerZkQuorum ) ; } String transactionZkRoot = DEFAULT_STORM_KAFKA_TRANSACTION_ZK_ROOT ; if ( config . hasPath ( _STR ) ) { transactionZkRoot = config . getString ( _STR ) ; } String zkStateTransactionRelPath = DEFAULT_STORM_KAFKA_TRANSACTION_ZK_RELATIVE_PATH ; if ( config . hasPath ( _STR ) ) { zkStateTransactionRelPath = config . getString ( _STR ) ; } SpoutConfig spoutConfig = new SpoutConfig ( hosts , topic , transactionZkRoot , zkStateTransactionRelPath + _STR + topic + _STR + topologyId ) ; boolean stormKafkaUseSameZkQuorumWithKafkaBroker = config . getBoolean ( _STR ) ; if ( stormKafkaUseSameZkQuorumWithKafkaBroker ) { ZkServerPortUtils utils = new ZkServerPortUtils ( kafkaBrokerZkQuorum ) ; spoutConfig . zkServers = utils . getZkHosts ( ) ; spoutConfig . zkPort = utils . getZkPort ( ) ; } else { ZkServerPortUtils utils = new ZkServerPortUtils ( config . getString ( _STR ) ) ; spoutConfig . zkServers = utils . getZkHosts ( ) ; spoutConfig . zkPort = utils . getZkPort ( ) ; } spoutConfig . stateUpdateIntervalMs = config . hasPath ( _STR ) ? config . getInt ( _STR ) : _NUM ; spoutConfig . fetchSizeBytes = config . hasPath ( _STR ) ? config . getInt ( _STR ) : _NUM ; if ( config . hasPath ( _STR ) ) { spoutConfig . startOffsetTime = config . getInt ( _STR ) ; } spoutConfig . scheme = createMultiScheme ( conf , topic , schemeClsName ) ; KafkaSpoutWrapper wrapper = new KafkaSpoutWrapper ( spoutConfig , kafkaSpoutMetric ) ; SpoutOutputCollectorWrapper collectorWrapper = new SpoutOutputCollectorWrapper ( this , collector , topic , spoutSpec , numOfRouterBolts , sds , this . serializer ) ; wrapper . open ( conf , context , collectorWrapper ) ; if ( LOG . isInfoEnabled ( ) ) { LOG . info ( _STR , topic , schemeClsName ) ; } return wrapper ; }
40881	public Builder addEmail ( Email email ) { emails . add ( email ) ; return this ; }
1890	public static HashProvider best ( HashParameters params ) { return best ( params , EnumSet . of ( HashSupport . STATEFUL ) ) ; }
77796	public byte [ ] readRawBytes ( final int size ) throws IOException { if ( size < _NUM ) { throw InvalidProtocolBufferNanoException . negativeSize ( ) ; } if ( bufferPos + size > currentLimit ) { skipRawBytes ( currentLimit - bufferPos ) ; throw InvalidProtocolBufferNanoException . truncatedMessage ( ) ; } if ( size <= bufferSize - bufferPos ) { final byte [ ] bytes = new byte [ size ] ; System . arraycopy ( buffer , bufferPos , bytes , _NUM , size ) ; bufferPos += size ; return bytes ; } else { throw InvalidProtocolBufferNanoException . truncatedMessage ( ) ; } }
28220	static boolean pairSum ( int ar [ ] , int x ) { Arrays . sort ( ar ) ; int len = ar . length ; for ( int i = _NUM , j = len - _NUM ; i < j ; ) { if ( ar [ i ] + ar [ j ] == x ) { return _BOOL ; } else if ( ar [ i ] + ar [ j ] < x ) { i ++ ; } else { j -- ; } } return _BOOL ; }
55383	public synchronized void loadFromFile ( ) { entries . clear ( ) ; Path file = Paths . get ( fileName ) ; try ( BufferedReader reader = Files . newBufferedReader ( file , CHARSET ) ) { String line ; do { line = reader . readLine ( ) ; AddressbookEntry parsedEntry = parseLine ( line ) ; if ( parsedEntry != null ) { entries . put ( parsedEntry . getName ( ) , parsedEntry ) ; } } while ( line != null ) ; } catch ( IOException ex ) { LOGGER . warning ( _STR + ex . getLocalizedMessage ( ) ) ; } LOGGER . info ( _STR + entries . size ( ) + _STR + fileName ) ; scanCategories ( ) ; }
52164	public double localScore ( int i , int ... parents ) { for ( int p : parents ) if ( forbidden . contains ( p ) ) return Double . NaN ; double residualVariance = covariances . get ( i , i ) ; int n = getSampleSize ( ) ; int p = parents . length ; Matrix covxx = getSelection1 ( covariances , parents ) ; try { Matrix covxxInv = covxx . inverse ( ) ; Matrix covxy = getSelection2 ( covariances , parents , i ) ; Matrix b = covxxInv . times ( covxy ) ; double dot = _NUM ; for ( int j = _NUM ; j < covxy . getRowDimension ( ) ; j ++ ) { for ( int k = _NUM ; k < covxy . getColumnDimension ( ) ; k ++ ) { dot += covxy . get ( j , k ) * b . get ( j , k ) ; } } residualVariance -= dot ; if ( residualVariance <= _NUM ) { if ( isVerbose ( ) ) { out . println ( _STR + ( residualVariance / covariances . get ( i , i ) ) ) ; } return Double . NaN ; } double c = getPenaltyDiscount ( ) ; return score ( residualVariance , n , logn , p , c ) ; } catch ( Exception e ) { boolean removedOne = _BOOL ; while ( removedOne ) { List < Integer > _parents = new ArrayList < > ( ) ; for ( int y = _NUM ; y < parents . length ; y ++ ) _parents . add ( parents [ y ] ) ; _parents . removeAll ( forbidden ) ; parents = new int [ _parents . size ( ) ] ; for ( int y = _NUM ; y < _parents . size ( ) ; y ++ ) parents [ y ] = _parents . get ( y ) ; removedOne = printMinimalLinearlyDependentSet ( parents , covariances ) ; } return Double . NaN ; } }
1928	public boolean remove ( final int position ) { final AdapterTransaction removeTransaction = new RemoveTransaction < > ( this , position ) ; final boolean success = removeTransaction . perform ( ) ; mTransactions . offer ( removeTransaction ) ; return success ; }
85406	private void encodeTypes ( List < Type > types , Map < String , Object > m , String key , Declaration from ) { if ( types == null || types . isEmpty ( ) ) return ; List < Map < String , Object > > sats = new ArrayList < > ( types . size ( ) ) ; for ( Type st : types ) { sats . add ( typeMap ( st , from ) ) ; } m . put ( key , sats ) ; }
50115	public static void clearAssertionInformation ( ) { _AssertInfos . clear ( ) ; _AssertOccured = _BOOL ; }
41339	public void build ( String code , String customStatus ) { try { if ( customStatus != null ) { result . put ( resources . getString ( R . string . intent_extra_status ) , customStatus ) ; } else { result . put ( resources . getString ( R . string . intent_extra_status ) , resources . getString ( R . string . shared_pref_default_status ) ) ; } result . put ( resources . getString ( R . string . intent_extra_code ) , code ) ; operationListResult . put ( result ) ; } catch ( JSONException e ) { Log . e ( TAG , _STR + e . toString ( ) ) ; } }
1623	public static Operator generateBranchPlan ( AkibanInformationSchema ais , Table table ) { final Operator indexScan = generateIndexScan ( ais , table ) ; final Schema schema = SchemaCache . globalSchema ( ais ) ; PrimaryKey pkey = table . getPrimaryKeyIncludingInternal ( ) ; IndexRowType indexType = schema . indexRowType ( pkey . getIndex ( ) ) ; return generateBranchPlan ( table , indexScan , indexType ) ; }
57046	protected void addToMaintenanceQueue ( NodePortTuple npt ) { if ( maintenanceQueue . contains ( npt ) == _BOOL ) { maintenanceQueue . add ( npt ) ; } }
77735	private boolean linkFirst ( Node < E > node ) { if ( count >= capacity ) return _BOOL ; Node < E > f = first ; node . next = f ; first = node ; if ( last == null ) last = node ; else f . prev = node ; ++ count ; notEmpty . signal ( ) ; return _BOOL ; }
24793	public long startstack ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
14580	public static void copyRealmPrivilegesFromParent ( SSOToken token , OrganizationConfigManager parent , OrganizationConfigManager child ) throws SSOException , DelegationException { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + parent . getOrganizationName ( ) + _STR + child . getOrganizationName ( ) ) ; } DelegationManager pdm = new DelegationManager ( token , parent . getOrganizationName ( ) ) ; DelegationManager cdm = new DelegationManager ( token , child . getOrganizationName ( ) ) ; String childOrgName = DNMapper . orgNameToDN ( child . getOrganizationName ( ) ) ; Set pdps = pdm . getPrivileges ( ) ; if ( pdps == null || pdps . isEmpty ( ) ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR ) ; } return ; } for ( Iterator items = pdps . iterator ( ) ; items . hasNext ( ) ; ) { DelegationPrivilege dp = ( DelegationPrivilege ) items . next ( ) ; Set subjects = dp . getSubjects ( ) ; if ( subjects == null || subjects . isEmpty ( ) ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + dp ) ; } continue ; } Set newSubjects = new HashSet ( ) ; for ( Iterator subs = subjects . iterator ( ) ; subs . hasNext ( ) ; ) { String sName = ( String ) subs . next ( ) ; try { AMIdentity id = IdUtils . getIdentity ( token , sName ) ; AMIdentity newId = new AMIdentity ( token , id . getName ( ) , id . getType ( ) , childOrgName , id . getDN ( ) ) ; newSubjects . add ( IdUtils . getUniversalId ( newId ) ) ; } catch ( IdRepoException ide ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + dp , ide ) ; } continue ; } } dp . setSubjects ( newSubjects ) ; Set permissions = dp . getPermissions ( ) ; if ( ( permissions != null ) && ( ! permissions . isEmpty ( ) ) ) { Iterator it = permissions . iterator ( ) ; while ( it . hasNext ( ) ) { DelegationPermission perm = ( DelegationPermission ) it . next ( ) ; perm . setOrganizationName ( _STR + childOrgName ) ; } } cdm . addPrivilege ( dp ) ; if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + dp ) ; } } }
1147	public boolean match ( MimeType other ) { if ( this == other ) return _BOOL ; if ( type != null && other . type != null && ! type . equals ( other . type ) ) return _BOOL ; if ( subtype != null && other . subtype != null && ! subtype . equals ( other . subtype ) ) return _BOOL ; return _BOOL ; }
36554	@ Override public boolean isArmed ( ) { return other . isArmed ( ) ; }
9830	public EncoderTestSuiteBuilder valid ( int min , int max ) { _valid . set ( min , max + _NUM ) ; _invalid . clear ( min , max + _NUM ) ; _encoded . clear ( min , max + _NUM ) ; return this ; }
21902	protected List < VolumeDescriptor > createChangeVirtualPoolDescriptors ( StorageSystem vplexSystem , Volume volume , VirtualPool newVpool , String taskId , List < Recommendation > recommendations , VirtualPoolCapabilityValuesWrapper capabilities , ControllerOperationValuesWrapper operationsWrapper ) throws InternalException { URI volumeVarrayURI = volume . getVirtualArray ( ) ; VirtualArray volumeVarray = _dbClient . queryObject ( VirtualArray . class , volumeVarrayURI ) ; s_logger . info ( _STR , volumeVarrayURI ) ; URI volumeVpoolURI = volume . getVirtualPool ( ) ; VirtualPool currentVpool = _dbClient . queryObject ( VirtualPool . class , volumeVpoolURI ) ; List < VolumeDescriptor > descriptors = new ArrayList < VolumeDescriptor > ( ) ; VolumeDescriptor vplexVirtualVolumeDesc = new VolumeDescriptor ( VolumeDescriptor . Type . VPLEX_VIRT_VOLUME , volume . getStorageController ( ) , volume . getId ( ) , volume . getPool ( ) , null ) ; Map < String , Object > volumeParams = new HashMap < String , Object > ( ) ; volumeParams . put ( VolumeDescriptor . PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID , volume . getId ( ) ) ; volumeParams . put ( VolumeDescriptor . PARAM_VPOOL_CHANGE_NEW_VPOOL_ID , newVpool . getId ( ) ) ; volumeParams . put ( VolumeDescriptor . PARAM_VPOOL_CHANGE_OLD_VPOOL_ID , volume . getVirtualPool ( ) ) ; if ( operationsWrapper != null ) { if ( operationsWrapper . getMigrationSuspendBeforeCommit ( ) != null ) { volumeParams . put ( VolumeDescriptor . PARAM_MIGRATION_SUSPEND_BEFORE_COMMIT , operationsWrapper . getMigrationSuspendBeforeCommit ( ) ) ; } if ( operationsWrapper . getMigrationSuspendBeforeDeleteSource ( ) != null ) { volumeParams . put ( VolumeDescriptor . PARAM_MIGRATION_SUSPEND_BEFORE_DELETE_SOURCE , operationsWrapper . getMigrationSuspendBeforeDeleteSource ( ) ) ; } } vplexVirtualVolumeDesc . setParameters ( volumeParams ) ; descriptors . add ( vplexVirtualVolumeDesc ) ; if ( VirtualPoolChangeAnalyzer . vpoolChangeRequiresMigration ( currentVpool , newVpool ) ) { Volume migSrcVolume = getAssociatedVolumeInVArray ( volume , volumeVarrayURI ) ; descriptors . addAll ( createBackendVolumeMigrationDescriptors ( vplexSystem , volume , migSrcVolume , volumeVarray , newVpool , getVolumeCapacity ( migSrcVolume != null ? migSrcVolume : volume ) , taskId , recommendations , _BOOL , capabilities ) ) ; } URI haVarrayURI = VirtualPoolChangeAnalyzer . getHaVarrayURI ( currentVpool ) ; if ( haVarrayURI != null ) { VirtualArray haVarray = _dbClient . queryObject ( VirtualArray . class , haVarrayURI ) ; VirtualPool currentHaVpool = VirtualPoolChangeAnalyzer . getHaVpool ( currentVpool , _dbClient ) ; VirtualPool newHaVpool = VirtualPoolChangeAnalyzer . getNewHaVpool ( currentVpool , newVpool , _dbClient ) ; if ( VirtualPoolChangeAnalyzer . vpoolChangeRequiresMigration ( currentHaVpool , newHaVpool ) ) { Volume migSrcVolume = getAssociatedVolumeInVArray ( volume , haVarrayURI ) ; descriptors . addAll ( createBackendVolumeMigrationDescriptors ( vplexSystem , volume , migSrcVolume , haVarray , newHaVpool , getVolumeCapacity ( migSrcVolume != null ? migSrcVolume : volume ) , taskId , recommendations , _BOOL , capabilities ) ) ; } } return descriptors ; }
26459	public static boolean isJavaScriptEnabled ( HttpServletRequest request ) { HttpSession session = request . getSession ( ) ; Boolean javaScriptEnabled = ( Boolean ) session . getAttribute ( _STR ) ; if ( javaScriptEnabled != null ) { return javaScriptEnabled . booleanValue ( ) ; } return _BOOL ; }
47034	public boolean equals ( Object obj ) { if ( this == obj ) return _BOOL ; if ( obj instanceof ECFieldFp ) { return ( p . equals ( ( ( ECFieldFp ) obj ) . p ) ) ; } return _BOOL ; }
34361	public String name ( ) { return theName ; }
52409	public static void closeQuietly ( Closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( RuntimeException rethrown ) { throw rethrown ; } catch ( Exception ignored ) { } } }
71332	private static String checksumMD5 ( String data ) { MessageDigest md5 = null ; try { md5 = MessageDigest . getInstance ( _STR ) ; } catch ( NoSuchAlgorithmException ex ) { throw new RuntimeException ( _STR , ex ) ; } return hexEncode ( md5 . digest ( data . getBytes ( ) ) ) ; }
70329	public static boolean validSkinSpecFile ( String fileName ) { File file = new File ( Configuration . skinsDir ( ) , fileName ) ; if ( ! file . exists ( ) || ! file . isFile ( ) ) { return _BOOL ; } DocumentBuilderFactory dbf = DocumentBuilderFactory . newInstance ( ) ; try { DocumentBuilder builder = dbf . newDocumentBuilder ( ) ; Document doc = builder . parse ( file ) ; NodeList listOfComponents = doc . getElementsByTagName ( UI_ELEMENT ) ; if ( listOfComponents . getLength ( ) > _NUM ) { return _BOOL ; } else { return _BOOL ; } } catch ( Exception e ) { return _BOOL ; } }
78498	private void generateLegalTimesTree ( ) { int k0 = KeyEvent . KEYCODE_0 ; int k1 = KeyEvent . KEYCODE_1 ; int k2 = KeyEvent . KEYCODE_2 ; int k3 = KeyEvent . KEYCODE_3 ; int k4 = KeyEvent . KEYCODE_4 ; int k5 = KeyEvent . KEYCODE_5 ; int k6 = KeyEvent . KEYCODE_6 ; int k7 = KeyEvent . KEYCODE_7 ; int k8 = KeyEvent . KEYCODE_8 ; int k9 = KeyEvent . KEYCODE_9 ; mLegalTimesTree = new Node ( ) ; if ( mIs24HourMode ) { Node minuteFirstDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; Node minuteSecondDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; minuteFirstDigit . addChild ( minuteSecondDigit ) ; Node firstDigit = new Node ( k0 , k1 ) ; mLegalTimesTree . addChild ( firstDigit ) ; Node secondDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteFirstDigit ) ; Node thirdDigit = new Node ( k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; secondDigit = new Node ( k6 , k7 , k8 , k9 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteFirstDigit ) ; firstDigit = new Node ( k2 ) ; mLegalTimesTree . addChild ( firstDigit ) ; secondDigit = new Node ( k0 , k1 , k2 , k3 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteFirstDigit ) ; secondDigit = new Node ( k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( minuteSecondDigit ) ; firstDigit = new Node ( k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; mLegalTimesTree . addChild ( firstDigit ) ; firstDigit . addChild ( minuteFirstDigit ) ; } else { Node ampm = new Node ( getAmOrPmKeyCode ( AM ) , getAmOrPmKeyCode ( PM ) ) ; Node firstDigit = new Node ( k1 ) ; mLegalTimesTree . addChild ( firstDigit ) ; firstDigit . addChild ( ampm ) ; Node secondDigit = new Node ( k0 , k1 , k2 ) ; firstDigit . addChild ( secondDigit ) ; secondDigit . addChild ( ampm ) ; Node thirdDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; Node fourthDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; thirdDigit . addChild ( fourthDigit ) ; fourthDigit . addChild ( ampm ) ; thirdDigit = new Node ( k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; secondDigit = new Node ( k3 , k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; thirdDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; firstDigit = new Node ( k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; mLegalTimesTree . addChild ( firstDigit ) ; firstDigit . addChild ( ampm ) ; secondDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 ) ; firstDigit . addChild ( secondDigit ) ; thirdDigit = new Node ( k0 , k1 , k2 , k3 , k4 , k5 , k6 , k7 , k8 , k9 ) ; secondDigit . addChild ( thirdDigit ) ; thirdDigit . addChild ( ampm ) ; } }
84462	public StrBuilder insert ( final int index , final Object obj ) { if ( obj == null ) { return insert ( index , nullText ) ; } return insert ( index , obj . toString ( ) ) ; }
7826	@ Override public void handleMouseMoved ( ChartCanvas canvas , MouseEvent e ) { if ( ! canvas . isTooltipEnabled ( ) ) { return ; } String text = getTooltipText ( canvas , e . getX ( ) , e . getY ( ) ) ; canvas . setTooltip ( text , e . getScreenX ( ) , e . getScreenY ( ) ) ; }
64027	public int size ( ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { return count ; } finally { lock . unlock ( ) ; } }
25509	private boolean loadUnpackedUMD ( String filename ) throws IOException , GeneralJpcspException { if ( doUmdBuffering ) { return _BOOL ; } File file = new File ( filename ) ; if ( file . exists ( ) ) { RandomAccessFile raf = new RandomAccessFile ( file , _STR ) ; FileChannel roChannel = raf . getChannel ( ) ; ByteBuffer readbuffer = roChannel . map ( FileChannel . MapMode . READ_ONLY , _NUM , ( int ) roChannel . size ( ) ) ; emulator . load ( _STR , readbuffer ) ; raf . close ( ) ; log . info ( _STR ) ; return _BOOL ; } return _BOOL ; }
21568	public boolean disableVMAX3Compression ( URI blockObjectURI , StorageSystem storageSystem ) { VirtualPool virtualPool = null ; StoragePool storagePool = null ; Volume volume = null ; if ( URIUtil . isType ( blockObjectURI , Volume . class ) ) { volume = _dbClient . queryObject ( Volume . class , blockObjectURI ) ; } else if ( URIUtil . isType ( blockObjectURI , BlockSnapshot . class ) ) { BlockSnapshot snapshot = _dbClient . queryObject ( BlockSnapshot . class , blockObjectURI ) ; volume = _dbClient . queryObject ( Volume . class , snapshot . getParent ( ) ) ; } else if ( URIUtil . isType ( blockObjectURI , BlockMirror . class ) ) { BlockMirror mirror = _dbClient . queryObject ( BlockMirror . class , blockObjectURI ) ; virtualPool = _dbClient . queryObject ( VirtualPool . class , mirror . getVirtualPool ( ) ) ; storagePool = _dbClient . queryObject ( StoragePool . class , mirror . getPool ( ) ) ; } if ( volume != null ) { virtualPool = _dbClient . queryObject ( VirtualPool . class , volume . getVirtualPool ( ) ) ; storagePool = _dbClient . queryObject ( StoragePool . class , volume . getPool ( ) ) ; } return ( checkIfProviderSupportsCompressionOperations ( storageSystem ) && ! virtualPool . getCompressionEnabled ( ) && storagePool . getCompressionEnabled ( ) ) ; }
74689	public static LatLon rhumbEndPosition ( LatLon p , double rhumbAzimuthRadians , double pathLengthRadians ) { if ( p == null ) { throw new IllegalArgumentException ( _STR ) ; } return rhumbEndPosition ( p , Angle . fromRadians ( rhumbAzimuthRadians ) , Angle . fromRadians ( pathLengthRadians ) ) ; }
30832	private static int indexOf ( Object [ ] array , Object elt ) { return indexOf ( array , array . length , elt ) ; }
47822	public Dimension maximumLayoutSize ( Container target ) { return new Dimension ( Integer . MAX_VALUE , Integer . MAX_VALUE ) ; }
2635	public static String readStream ( InputStream in ) { BufferedReader reader = new BufferedReader ( new InputStreamReader ( in ) ) ; StringBuilder sb = new StringBuilder ( ) ; String line = null ; try { while ( ( line = reader . readLine ( ) ) != null ) { sb . append ( line + _STR ) ; } } catch ( IOException e ) { FreshAirLog . e ( _STR , e ) ; } finally { try { in . close ( ) ; } catch ( IOException e ) { } try { reader . close ( ) ; } catch ( IOException e ) { } } return sb . toString ( ) ; }
7360	public void update ( long n ) { uncounted . addAndGet ( n ) ; }
30955	private void logExpiration ( Entry e ) { if ( e . renewalsDone ( ) ) { logger . log ( Level . FINE , _STR , e . lease ) ; } else { logger . log ( Levels . FAILED , _STR , e . lease ) ; } }
44043	void removeRipple ( Ripple ripple ) { final Ripple [ ] ripples = mExitingRipples ; final int count = mExitingRipplesCount ; final int index = getRippleIndex ( ripple ) ; if ( index >= _NUM ) { System . arraycopy ( ripples , index + _NUM , ripples , index , count - ( index + _NUM ) ) ; ripples [ count - _NUM ] = null ; mExitingRipplesCount -- ; invalidateSelf ( ) ; } }
64265	protected final void writeS ( ByteBuffer buf , String text ) { if ( text == null ) { buf . putChar ( _STR ) ; } else { final int len = text . length ( ) ; for ( int i = _NUM ; i < len ; i ++ ) { buf . putChar ( text . charAt ( i ) ) ; } buf . putChar ( _STR ) ; } }
86115	@ Override public void onDrawEye ( Eye eye ) { GLES20 . glClear ( GLES20 . GL_COLOR_BUFFER_BIT | GLES20 . GL_DEPTH_BUFFER_BIT ) ; Engine . checkGLError ( _STR ) ; if ( ! prefOrientationProviderString . equals ( _STR ) ) { if ( firstOnDrawEye > _NUM ) { firstOnDrawEye -- ; float [ ] m = new float [ _NUM ] ; Matrix . invertM ( m , _NUM , mHeadViewSDK , _NUM ) ; Matrix . multiplyMM ( m , _NUM , eye . getEyeView ( ) , _NUM , m , _NUM ) ; if ( eye . getType ( ) == Eye . Type . RIGHT ) { mEyeRightView = m ; } else if ( eye . getType ( ) == Eye . Type . LEFT ) { mEyeLeftView = m ; } return ; } float [ ] m = new float [ _NUM ] ; if ( eye . getType ( ) == Eye . Type . RIGHT ) { Matrix . multiplyMM ( m , _NUM , mHeadViewUse , _NUM , mEyeRightView , _NUM ) ; } else { Matrix . multiplyMM ( m , _NUM , mHeadViewUse , _NUM , mEyeLeftView , _NUM ) ; } Matrix . multiplyMM ( mView , _NUM , m , _NUM , mCamera , _NUM ) ; } else { Matrix . multiplyMM ( mView , _NUM , eye . getEyeView ( ) , _NUM , mCamera , _NUM ) ; } float [ ] perspective = eye . getPerspective ( Z_NEAR , Z_FAR ) ; GLES20 . glEnable ( GLES20 . GL_DEPTH_TEST ) ; GLES20 . glBlendFunc ( GLES20 . GL_SRC_ALPHA , GLES20 . GL_ONE_MINUS_SRC_ALPHA ) ; GLES20 . glEnable ( GLES20 . GL_BLEND ) ; if ( prefShowEnv && bgEnv . isReady ( ) ) { Matrix . multiplyMM ( mModelView , _NUM , mView , _NUM , bgEnv . model , _NUM ) ; Matrix . multiplyMM ( mModelViewProjection , _NUM , perspective , _NUM , mModelView , _NUM ) ; bgEnv . draw ( eye . getType ( ) , mModelViewProjection ) ; } GLES20 . glDisable ( GLES20 . GL_DEPTH_TEST ) ; Matrix . multiplyMM ( mModelViewProjection , _NUM , perspective , _NUM , cameraPreview . model , _NUM ) ; cameraPreview . draw ( eye . getType ( ) , mModelViewProjection ) ; Matrix . multiplyMM ( mModelView , _NUM , mView , _NUM , screen . model , _NUM ) ; Matrix . multiplyMM ( mModelViewProjection , _NUM , perspective , _NUM , mModelView , _NUM ) ; screen . draw ( eye . getType ( ) , mModelViewProjection ) ; for ( ButtonThing button : buttonList ) { Matrix . multiplyMM ( mModelView , _NUM , mView , _NUM , button . model , _NUM ) ; Matrix . multiplyMM ( mModelViewProjection , _NUM , perspective , _NUM , mModelView , _NUM ) ; button . draw ( eye . getType ( ) , mModelViewProjection ) ; } Matrix . multiplyMM ( mModelViewProjection , _NUM , perspective , _NUM , aimPoint . model , _NUM ) ; aimPoint . draw ( Eye . Type . MONOCULAR , mModelViewProjection ) ; }
54108	protected SourceRecords consumeRecordsByTopic ( int numRecords ) throws InterruptedException { SourceRecords records = new SourceRecords ( ) ; consumeRecords ( numRecords , null ) ; return records ; }
16569	@ Override public boolean equals ( Object o ) { if ( this == o ) { return _BOOL ; } if ( ! ( o instanceof PrototypeSize ) ) { return _BOOL ; } PrototypeSize size = ( PrototypeSize ) o ; return prototype . equals ( size . prototype ) ; }
49909	private static int compareVersion ( String versionStr1 , String versionStr2 ) { if ( versionStr1 == null ) { throw new MLContextException ( _STR ) ; } if ( versionStr2 == null ) { throw new MLContextException ( _STR ) ; } Scanner scanner1 = null ; Scanner scanner2 = null ; try { scanner1 = new Scanner ( versionStr1 ) ; scanner2 = new Scanner ( versionStr2 ) ; scanner1 . useDelimiter ( _STR ) ; scanner2 . useDelimiter ( _STR ) ; while ( scanner1 . hasNextInt ( ) && scanner2 . hasNextInt ( ) ) { int version1 = scanner1 . nextInt ( ) ; int version2 = scanner2 . nextInt ( ) ; if ( version1 < version2 ) { return - _NUM ; } else if ( version1 > version2 ) { return _NUM ; } } return scanner1 . hasNextInt ( ) ? _NUM : _NUM ; } finally { scanner1 . close ( ) ; scanner2 . close ( ) ; } }
64231	public static boolean isValidVector ( Vector2f vector ) { if ( vector == null ) { return _BOOL ; } if ( Float . isNaN ( vector . x ) || Float . isNaN ( vector . y ) ) { return _BOOL ; } if ( Float . isInfinite ( vector . x ) || Float . isInfinite ( vector . y ) ) { return _BOOL ; } return _BOOL ; }
80038	public boolean isObsessional ( ) { return typeString . contains ( SUFFIX_OBSESSIONAL ) ; }
74203	@ edu . umd . cs . findbugs . annotations . SuppressFBWarnings ( value = _STR , justification = _STR ) public void changeLocoSpeed ( DccThrottle t , Block blk , float speed ) { if ( blk == referenced && speed == desiredSpeedStep ) { return ; } float blockLength = blk . getLengthMm ( ) ; if ( blk == referenced ) { distanceRemaining = distanceRemaining - getDistanceTravelled ( _throttle . getIsForward ( ) , _throttle . getSpeedSetting ( ) , ( ( float ) ( System . nanoTime ( ) - lastTimeTimerStarted ) / _NUM ) ) ; blockLength = distanceRemaining ; log . debug ( _STR ) ; } else { referenced = blk ; } changeLocoSpeed ( t , blockLength , speed ) ; }
47875	public boolean remove ( Object targetChild ) { return remove ( targetChild , _BOOL ) ; }
28959	private void notifyClassObservers ( ClassDescriptor classDescriptor ) { for ( IClassObserver observer : classObserverList ) { observer . observeClass ( classDescriptor ) ; } }
46930	public void dup2 ( ) { mv . visitInsn ( Opcodes . DUP2 ) ; }
64185	static boolean isAppXml ( String mime ) { return mime != null && ( mime . equals ( _STR ) || mime . equals ( _STR ) || mime . equals ( _STR ) || mime . startsWith ( _STR ) && mime . endsWith ( _STR ) ) ; }
55959	public static NativePage createNativePageForURL ( String url , NativePage candidatePage , Tab tab , TabModelSelector tabModelSelector , Activity activity ) { return createNativePageForURL ( url , candidatePage , tab , tabModelSelector , activity , tab . isIncognito ( ) ) ; }
67770	protected void throwParseException ( ParseException e ) throws ParseException { if ( locator != null ) { String elementLocation = _STR ; if ( curHandler != null ) { elementLocation += _STR + curHandler . qName ; } String location = _STR + String . valueOf ( locator . getLineNumber ( ) ) + _STR + String . valueOf ( locator . getColumnNumber ( ) ) + elementLocation + _STR ; LogUtils . logException ( logger , Level . FINE , location , e ) ; throw new ParseException ( location + e . getMessage ( ) , e ) ; } else { LogUtils . logException ( logger , Level . FINE , null , e ) ; throw e ; } }
38326	public CustomEditor ( ) { setLayout ( new BorderLayout ( ) ) ; add ( m_Label , BorderLayout . CENTER ) ; m_DeleteBut . addActionListener ( m_InnerActionListener ) ; m_EditBut . addActionListener ( m_InnerActionListener ) ; m_UpBut . addActionListener ( m_InnerActionListener ) ; m_DownBut . addActionListener ( m_InnerActionListener ) ; m_AddBut . addActionListener ( m_InnerActionListener ) ; m_ElementList . addListSelectionListener ( m_InnerSelectionListener ) ; m_ElementList . addMouseListener ( m_InnerMouseListener ) ; m_AddBut . setToolTipText ( _STR ) ; m_DeleteBut . setToolTipText ( _STR ) ; m_EditBut . setToolTipText ( _STR ) ; m_UpBut . setToolTipText ( _STR ) ; m_DownBut . setToolTipText ( _STR ) ; }
83888	public MemoidOne ( Function < ? super Input , ? extends Output > fn , BiPredicate < Input , Input > equality ) { fn_ = Objects . requireNonNull ( fn ) ; equality_ = Objects . requireNonNull ( equality ) ; }
7166	public static EPType singleValue ( Class singleValueType ) { if ( singleValueType != null && singleValueType . isArray ( ) ) { return new ClassMultiValuedEPType ( singleValueType , singleValueType . getComponentType ( ) ) ; } return new ClassEPType ( singleValueType ) ; }
20103	private static Class < ? > convertFieldType ( String fieldType ) { if ( fieldTypeMap . containsKey ( fieldType ) ) { return fieldTypeMap . get ( fieldType ) ; } return null ; }
15417	void addXMLElementAfterTokenIndex ( int lastTokenIndex , XMLElement element , boolean addAfterNewLine ) throws Exception { addXMLElementAfterTokenIndex ( lastTokenIndex , element , addAfterNewLine , _BOOL ) ; }
26279	public static Map < String , Object > findContentParents ( DispatchContext dctx , Map < String , ? extends Object > context ) { Map < String , Object > results = FastMap . newInstance ( ) ; List < Object > parentList = FastList . newInstance ( ) ; results . put ( _STR , parentList ) ; LocalDispatcher dispatcher = dctx . getDispatcher ( ) ; String contentId = ( String ) context . get ( _STR ) ; String contentAssocTypeId = ( String ) context . get ( _STR ) ; String direction = ( String ) context . get ( _STR ) ; if ( UtilValidate . isEmpty ( direction ) ) { direction = _STR ; } Map < String , Object > traversMap = FastMap . newInstance ( ) ; traversMap . put ( _STR , contentId ) ; traversMap . put ( _STR , direction ) ; traversMap . put ( _STR , contentAssocTypeId ) ; try { Map < String , Object > thisResults = dispatcher . runSync ( _STR , traversMap ) ; String errorMsg = ServiceUtil . getErrorMessage ( thisResults ) ; if ( UtilValidate . isNotEmpty ( errorMsg ) ) { Debug . logError ( _STR + errorMsg , module ) ; return ServiceUtil . returnError ( errorMsg ) ; } Map < String , Object > nodeMap = UtilGenerics . checkMap ( thisResults . get ( _STR ) ) ; walkParentTree ( nodeMap , parentList ) ; } catch ( GenericServiceException e ) { return ServiceUtil . returnFailure ( e . getMessage ( ) ) ; } return results ; }
25734	public static boolean arrayEquals ( Object x , Object y , double tolf , double told ) { if ( x == null && y == null ) { return _BOOL ; } if ( x == null || y == null ) { return _BOOL ; } Class < ? > xClass = x . getClass ( ) ; Class < ? > yClass = y . getClass ( ) ; if ( xClass != yClass ) { return _BOOL ; } if ( ! xClass . isArray ( ) ) { return x . equals ( y ) ; } else { if ( xClass . equals ( int [ ] . class ) ) { return Arrays . equals ( ( int [ ] ) x , ( int [ ] ) y ) ; } else if ( xClass . equals ( double [ ] . class ) ) { if ( told == _NUM ) { return Arrays . equals ( ( double [ ] ) x , ( double [ ] ) y ) ; } else { return doubleArrayEquals ( ( double [ ] ) x , ( double [ ] ) y , told ) ; } } else if ( xClass . equals ( long [ ] . class ) ) { return Arrays . equals ( ( long [ ] ) x , ( long [ ] ) y ) ; } else if ( xClass . equals ( float [ ] . class ) ) { if ( tolf == _NUM ) { return Arrays . equals ( ( float [ ] ) x , ( float [ ] ) y ) ; } else { return floatArrayEquals ( ( float [ ] ) x , ( float [ ] ) y , ( float ) tolf ) ; } } else if ( xClass . equals ( byte [ ] . class ) ) { return Arrays . equals ( ( byte [ ] ) x , ( byte [ ] ) y ) ; } else if ( xClass . equals ( short [ ] . class ) ) { return Arrays . equals ( ( short [ ] ) x , ( short [ ] ) y ) ; } else if ( xClass . equals ( char [ ] . class ) ) { return Arrays . equals ( ( char [ ] ) x , ( char [ ] ) y ) ; } else if ( xClass . equals ( boolean [ ] . class ) ) { return Arrays . equals ( ( boolean [ ] ) x , ( boolean [ ] ) y ) ; } else { Object [ ] xo = ( Object [ ] ) x ; Object [ ] yo = ( Object [ ] ) y ; if ( xo . length != yo . length ) { return _BOOL ; } for ( int i = _NUM ; i < xo . length ; i += _NUM ) { if ( ! arrayEquals ( xo [ i ] , yo [ i ] , tolf , told ) ) { return _BOOL ; } } return _BOOL ; } } }
76780	public Dictionary ( Directory tempDir , String tempFileNamePrefix , InputStream affix , List < InputStream > dictionaries , boolean ignoreCase ) throws IOException , ParseException { this . ignoreCase = ignoreCase ; this . needsInputCleaning = ignoreCase ; this . needsOutputCleaning = _BOOL ; flagLookup . add ( new BytesRef ( ) ) ; Path aff = Files . createTempFile ( tempPath , _STR , _STR ) ; OutputStream out = new BufferedOutputStream ( Files . newOutputStream ( aff ) ) ; InputStream aff1 = null ; InputStream aff2 = null ; boolean success = _BOOL ; try { final byte [ ] buffer = new byte [ _NUM * _NUM ] ; int len ; while ( ( len = affix . read ( buffer ) ) > _NUM ) { out . write ( buffer , _NUM , len ) ; } out . close ( ) ; aff1 = new BufferedInputStream ( Files . newInputStream ( aff ) ) ; String encoding = getDictionaryEncoding ( aff1 ) ; CharsetDecoder decoder = getJavaEncoding ( encoding ) ; aff2 = new BufferedInputStream ( Files . newInputStream ( aff ) ) ; readAffixFile ( aff2 , decoder ) ; IntSequenceOutputs o = IntSequenceOutputs . getSingleton ( ) ; Builder < IntsRef > b = new Builder < > ( FST . INPUT_TYPE . BYTE4 , o ) ; readDictionaryFiles ( tempDir , tempFileNamePrefix , dictionaries , decoder , b ) ; words = b . finish ( ) ; aliases = null ; morphAliases = null ; success = _BOOL ; } finally { IOUtils . closeWhileHandlingException ( out , aff1 , aff2 ) ; if ( success ) { Files . delete ( aff ) ; } else { IOUtils . deleteFilesIgnoringExceptions ( aff ) ; } } }
70127	public void collapseBuilding ( Building bldg ) { buildings . removeElement ( bldg ) ; Enumeration < Coords > bldgCoords = bldg . getCoords ( ) ; while ( bldgCoords . hasMoreElements ( ) ) { final Coords coords = bldgCoords . nextElement ( ) ; collapseBuilding ( coords ) ; } }
59953	@ RpcMethod public void detachISO ( String vmId , boolean isDeleteFile , AsyncMethodCallback < Host . AsyncClient . detach_iso_call > handler ) throws RpcException { ensureClient ( ) ; DetachISORequest detachISORequest = new DetachISORequest ( vmId ) ; detachISORequest . setDelete_file ( isDeleteFile ) ; clientProxy . setTimeout ( DETACH_ISO_TIMEOUT_MS ) ; logger . info ( _STR , vmId , getHostIp ( ) , detachISORequest ) ; try { clientProxy . detach_iso ( detachISORequest , handler ) ; } catch ( TException e ) { throw new RpcException ( e . getMessage ( ) ) ; } }
59999	private String readNfcErrorMsg ( ByteBuffer reply ) throws IOException { int errorType = reply . getInt ( ) ; int errorCode = reply . getInt ( ) ; int msgLen = reply . getInt ( ) ; if ( msgLen == _NUM ) { return _STR ; } ByteBuffer msgBuffer = ByteBuffer . allocate ( msgLen ) ; readFully ( msgBuffer ) ; String errorMsg = new String ( msgBuffer . array ( ) , _NUM , msgLen - _NUM , Charsets . US_ASCII ) ; return String . format ( _STR , errorType , errorCode , errorMsg ) ; }
59828	private void show ( boolean show ) { if ( show ) { if ( mXFade != null ) { mXFade . cancel ( ) ; } mState = STATE_PIE ; mCurrentItem = null ; PieItem root = getRoot ( ) ; for ( PieItem openItem : mOpen ) { if ( openItem . hasItems ( ) ) { for ( PieItem item : openItem . getItems ( ) ) { item . setSelected ( _BOOL ) ; } } } mLabel . setText ( _STR ) ; mOpen . clear ( ) ; mOpen . add ( root ) ; layoutPie ( ) ; fadeIn ( ) ; } else { mState = STATE_IDLE ; mTapMode = _BOOL ; if ( mXFade != null ) { mXFade . cancel ( ) ; } if ( mLabel != null ) { mLabel . setText ( _STR ) ; } } setVisible ( show ) ; mHandler . sendEmptyMessage ( show ? MSG_OPEN : MSG_CLOSE ) ; }
21927	private synchronized void persistProfileAndNotifyChange ( AuthnProvider modifiedProvider , boolean newObject ) { modifiedProvider . setLastModified ( System . currentTimeMillis ( ) ) ; if ( newObject ) { _dbClient . createObject ( modifiedProvider ) ; } else { _dbClient . persistObject ( modifiedProvider ) ; } notifyChange ( ) ; }
73316	public void addUndoableAction ( UndoableAction action ) { undoStack . push ( action ) ; redoStack . removeAllElements ( ) ; }
10183	public IntArrayList ( int [ ] data ) { array = new int [ ( int ) ( data . length * _NUM ) + _NUM ] ; size = data . length ; System . arraycopy ( data , _NUM , array , _NUM , size ) ; }
40227	private void addPingTimeData ( long sample ) { lastPingTimesLock . lock ( ) ; try { if ( lastPingTimes == null ) { lastPingTimes = new long [ PING_MOVING_AVERAGE_WINDOW ] ; Arrays . fill ( lastPingTimes , sample ) ; } else { System . arraycopy ( lastPingTimes , _NUM , lastPingTimes , _NUM , lastPingTimes . length - _NUM ) ; lastPingTimes [ lastPingTimes . length - _NUM ] = sample ; } } finally { lastPingTimesLock . unlock ( ) ; } }
87062	public StringBuilder encodeBody ( StringBuilder buffer ) { return buffer . append ( contentEncoding ) ; }
59079	protected void tearDown ( ) { try { ds . close ( ) ; sds . close ( ) ; } catch ( Exception e ) { } }
44936	public String substring ( String subject , int start , int stop ) { if ( stop == - _NUM || stop >= subject . length ( ) ) { return subject . substring ( start ) ; } return subject . substring ( start , stop ) ; }
74143	public boolean controlRunTrain ( int idx ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + idx + _STR + _runMode + _STR + getDisplayName ( ) ) ; } boolean ret = _BOOL ; int oldIndex = - MODE_MANUAL ; if ( _engineer == null ) { switch ( idx ) { case HALT : case RESUME : case RETRY : ret = _BOOL ; break ; case ABORT : if ( _runMode == Warrant . MODE_LEARN ) { firePropertyChange ( _STR , Integer . valueOf ( - MODE_LEARN ) , Integer . valueOf ( _idxCurrentOrder ) ) ; } else { stopWarrant ( _BOOL ) ; } break ; } } else { synchronized ( _engineer ) { oldIndex = _engineer . getRunState ( ) ; switch ( idx ) { case HALT : _engineer . setHalt ( _BOOL ) ; break ; case RESUME : _engineer . setHalt ( _BOOL ) ; restart ( ) ; ret = moveIntoNextBlock ( MID ) ; break ; case RETRY : BlockOrder bo = getBlockOrderAt ( _idxCurrentOrder + _NUM ) ; ret = _BOOL ; if ( bo != null ) { OBlock b = bo . getBlock ( ) ; if ( b . allocate ( this ) == null && ( b . getState ( ) & OBlock . OCCUPIED ) != _NUM ) { _idxCurrentOrder ++ ; if ( b . equals ( _stoppingBlock ) ) { _stoppingBlock . removePropertyChangeListener ( this ) ; _stoppingBlock = null ; } bo . setPath ( this ) ; restart ( ) ; goingActive ( b ) ; ret = _BOOL ; } } break ; case ABORT : stopWarrant ( _BOOL ) ; break ; } } } if ( ret ) { firePropertyChange ( _STR , Integer . valueOf ( oldIndex ) , Integer . valueOf ( idx ) ) ; } return ret ; }
81026	public void removeCustomSashFormListener ( ICustomSashFormListener listener ) { if ( customSashFormListeners != null ) { customSashFormListeners . remove ( listener ) ; } }
69459	public static void writeStringToFile ( File file , String data ) throws IOException { writeStringToFile ( file , data , Charset . defaultCharset ( ) , _BOOL ) ; }
70684	protected void deleteSessionVariables ( String sessionId , String ... varNames ) { if ( sessionId . equals ( _STR ) ) { return ; } Key key = keyFactory . newKey ( sessionId ) ; Transaction transaction = datastore . newTransaction ( ) ; try { Entity stateEntity = transaction . get ( key ) ; Entity . Builder builder = Entity . builder ( stateEntity ) ; StringBuilder delNames = new StringBuilder ( ) ; for ( String varName : varNames ) { delNames . append ( varName + _STR ) ; builder = builder . remove ( varName ) ; } datastore . update ( builder . build ( ) ) ; } catch ( NullPointerException e ) { } finally { if ( transaction . active ( ) ) { transaction . rollback ( ) ; } } }
60715	@ Override public String toString ( ) { StringBuilder sb = new StringBuilder ( _NUM ) ; format ( ( getYear ( ) + _NUM ) , _NUM , sb ) ; sb . append ( _STR ) ; format ( ( getMonth ( ) + _NUM ) , _NUM , sb ) ; sb . append ( _STR ) ; format ( getDate ( ) , _NUM , sb ) ; return sb . toString ( ) ; }
86743	@ Override public void close ( ) throws IOException { if ( mBufferCount > _NUM ) { try { mQueue . write ( mBuffer , _NUM , mBufferCount ) ; } catch ( InterruptedException e ) { throw new IOException ( _STR ) ; } mBufferCount = _NUM ; } mQueue . close ( ) ; try { mThread . join ( ) ; } catch ( InterruptedException e ) { throw new IOException ( _STR ) ; } finally { super . close ( ) ; } checkException ( ) ; }
64675	public static int parseStringAsInt ( String in ) throws IndexParseFieldException { try { return Integer . parseInt ( in ) ; } catch ( NumberFormatException e ) { throw new IndexParseFieldException ( in , e ) ; } }
25831	public void writeAll ( ResultSet rs , boolean includeColumnNames , boolean trim ) throws SQLException , IOException { if ( includeColumnNames ) { writeColumnNames ( rs ) ; } while ( rs . next ( ) ) { writeNext ( resultService . getColumnValues ( rs , trim ) ) ; } }
58498	public void testSpecialCase1 ( ) { byte aBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM } ; byte bBytes [ ] = { _NUM , - _NUM , - _NUM , - _NUM } ; int aSign = - _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . and ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , result . signum ( ) ) ; }
57004	private static void verifyDevice ( IDevice d , long mac , Short vlan , Integer ip , long swId , int port ) { assertNotNull ( d ) ; assertEquals ( MacAddress . of ( mac ) , d . getMACAddress ( ) ) ; if ( vlan == null ) assertArrayEquals ( new VlanVid [ ] { VlanVid . ofVlan ( - _NUM ) } , d . getVlanId ( ) ) ; else assertArrayEquals ( new VlanVid [ ] { VlanVid . ofVlan ( vlan ) } , d . getVlanId ( ) ) ; if ( ip == null ) assertArrayEquals ( new IPv4Address [ ] { IPv4Address . of ( _NUM ) } , d . getIPv4Addresses ( ) ) ; else assertArrayEquals ( new IPv4Address [ ] { IPv4Address . of ( ip ) } , d . getIPv4Addresses ( ) ) ; SwitchPort expectedAp = new SwitchPort ( DatapathId . of ( swId ) , OFPort . of ( port ) ) ; assertArrayEquals ( new SwitchPort [ ] { expectedAp } , d . getAttachmentPoints ( ) ) ; }
49366	public ZoneRulesBuilder addWindow ( ZoneOffset standardOffset , LocalDateTime until , TimeDefinition untilDefinition ) { Objects . requireNonNull ( standardOffset , _STR ) ; Objects . requireNonNull ( until , _STR ) ; Objects . requireNonNull ( untilDefinition , _STR ) ; TZWindow window = new TZWindow ( standardOffset , until , untilDefinition ) ; if ( windowList . size ( ) > _NUM ) { TZWindow previous = windowList . get ( windowList . size ( ) - _NUM ) ; window . validateWindowOrder ( previous ) ; } windowList . add ( window ) ; return this ; }
5477	public Hashtable < IPoint , List < ILineSegment > > intersections ( Iterator < ILineSegment > it ) { Collection < ILineSegment > c = new ArrayList < ILineSegment > ( ) ; while ( it . hasNext ( ) ) { c . add ( it . next ( ) ) ; } return intersections ( c . toArray ( new ILineSegment [ ] { } ) ) ; }
82051	public boolean isTTFNativeFont ( ) { return ttf ; }
33273	private void registerProviders ( ) { final DevMachine devMachine = appContext . getDevMachine ( ) ; if ( devMachine == null ) { return ; } final Set < Macro > providers = getMacros ( devMachine ) ; checkNotNull ( providers ) ; if ( providers . isEmpty ( ) ) { return ; } providerRegistry . register ( providers ) ; }
62357	public LongMap ( int initialCapacity , float loadFactor ) { if ( initialCapacity < _NUM ) throw new IllegalArgumentException ( _STR + initialCapacity ) ; if ( capacity > _NUM << _NUM ) throw new IllegalArgumentException ( _STR + initialCapacity ) ; capacity = MathUtils . nextPowerOfTwo ( initialCapacity ) ; if ( loadFactor <= _NUM ) throw new IllegalArgumentException ( _STR + loadFactor ) ; this . loadFactor = loadFactor ; threshold = ( int ) ( capacity * loadFactor ) ; mask = capacity - _NUM ; hashShift = _NUM - Integer . numberOfTrailingZeros ( capacity ) ; stashCapacity = Math . max ( _NUM , ( int ) Math . ceil ( Math . log ( capacity ) ) + _NUM ) ; pushIterations = Math . max ( Math . min ( capacity , _NUM ) , ( int ) Math . sqrt ( capacity ) / _NUM ) ; keyTable = new long [ capacity + stashCapacity ] ; valueTable = ( V [ ] ) new Object [ keyTable . length ] ; }
23066	protected ASN1Set ( ASN1Encodable obj ) { set . addElement ( obj ) ; }
51806	protected void populateStreamBlob ( int testId , byte [ ] baseContent , int requiredSize ) throws SQLException { final byte [ ] testBytes = generateBlobContent ( baseContent , requiredSize ) ; try ( FbDatabase db = createDatabaseConnection ( ) ) { listener = new SimpleStatementListener ( ) ; transaction = getTransaction ( db ) ; try { statement = db . createStatement ( transaction ) ; statement . addStatementListener ( listener ) ; final BlobParameterBuffer blobParameterBuffer = db . createBlobParameterBuffer ( ) ; blobParameterBuffer . addArgument ( BlobParameterBuffer . TYPE , BlobParameterBuffer . TYPE_STREAM ) ; final FbBlob blob = db . createBlobForOutput ( transaction , blobParameterBuffer ) ; blob . open ( ) ; int bytesWritten = _NUM ; while ( bytesWritten < testBytes . length ) { byte [ ] buffer = new byte [ Math . min ( blob . getMaximumSegmentSize ( ) , testBytes . length - bytesWritten ) ] ; System . arraycopy ( testBytes , bytesWritten , buffer , _NUM , buffer . length ) ; blob . putSegment ( buffer ) ; bytesWritten += buffer . length ; } blob . close ( ) ; statement . prepare ( INSERT_BLOB_TABLE ) ; final DatatypeCoder datatypeCoder = db . getDatatypeCoder ( ) ; FieldValue param1 = new FieldValue ( datatypeCoder . encodeInt ( testId ) ) ; FieldValue param2 = new FieldValue ( datatypeCoder . encodeLong ( blob . getBlobId ( ) ) ) ; statement . execute ( RowValue . of ( param1 , param2 ) ) ; statement . close ( ) ; } finally { transaction . commit ( ) ; } } }
74971	private static long signFromBit_antiCyclic ( final double value ) { return Double . doubleToRawLongBits ( value ) > > _NUM | _NUM ; }
32228	public void addNearKey ( KeyCacheObject key , GridCacheSharedContext ctx ) throws IgniteCheckedException { nearKeys . add ( key ) ; }
59672	private void analyzeClassFields ( String className , int action ) { try { Class < ? > dynamicClass = Class . forName ( className ) ; Field [ ] fields = dynamicClass . getDeclaredFields ( ) ; for ( Field field : fields ) { if ( isPrivateAndNonPrimitive ( field ) ) { oneToAnyConditions ( className , field , action ) ; manyToAnyConditions ( className , field , action ) ; } } } catch ( ClassNotFoundException ex ) { ex . printStackTrace ( ) ; throw new DatabaseGenerateException ( DatabaseGenerateException . CLASS_NOT_FOUND + className ) ; } }
18435	protected boolean isLevelEnabled ( int logLevel ) { return ( logLevel >= currentLogLevel ) ; }
37228	public static void loadAll ( final JFrame parent , final IDebugger debugger , final IAddress offset , final int size ) { checkArguments ( parent , debugger , offset ) ; final CDumpAllWaiter waiter = new CDumpAllWaiter ( debugger , offset , size ) ; CProgressDialog . showEndless ( parent , _STR + _STR , waiter ) ; if ( waiter . getException ( ) != null ) { CUtilityFunctions . logException ( waiter . getException ( ) ) ; final String innerMessage = _STR + _STR ; final String innerDescription = CUtilityFunctions . createDescription ( String . format ( _STR , offset . toHexString ( ) ) , new String [ ] { _STR } , new String [ ] { _STR } ) ; NaviErrorDialog . show ( parent , innerMessage , innerDescription , waiter . getException ( ) ) ; } }
85658	public static boolean deleteDirectory ( String directory , boolean useOSNativeDelete ) throws IOException { boolean result = _BOOL ; if ( ! useOSNativeDelete ) { File dir = new File ( directory ) ; for ( File file : dir . listFiles ( ) ) { if ( file . delete ( ) ) { log . debug ( _STR , file . getName ( ) ) ; } else { log . debug ( _STR , file . getName ( ) ) ; file . deleteOnExit ( ) ; } file = null ; } if ( dir . delete ( ) ) { log . debug ( _STR ) ; result = _BOOL ; } else { log . debug ( _STR ) ; dir . deleteOnExit ( ) ; } dir = null ; } else { Process p = null ; Thread std = null ; try { Runtime runTime = Runtime . getRuntime ( ) ; log . debug ( _STR ) ; if ( File . separatorChar == _STR ) { p = runTime . exec ( _STR + directory . replace ( _STR , _STR ) + _STR ) ; } else { p = runTime . exec ( _STR + directory . replace ( _STR , File . separatorChar ) ) ; } std = stdOut ( p ) ; while ( std . isAlive ( ) ) { try { Thread . sleep ( _NUM ) ; } catch ( Exception e ) { } } log . debug ( _STR ) ; result = _BOOL ; } catch ( Exception e ) { log . error ( _STR , e ) ; } finally { if ( null != p ) { log . debug ( _STR ) ; p . destroy ( ) ; p = null ; } std = null ; } } return result ; }
19270	public void testSetAttributeNodeNS1 ( ) throws Throwable { Document doc ; Element element ; Attr attribute1 ; Attr attribute2 ; Attr attrNode ; String attrName ; String attrNS ; NamedNodeMap attributes ; int length ; doc = ( Document ) load ( _STR , builder ) ; element = doc . createElementNS ( _STR , _STR ) ; attribute1 = doc . createAttributeNS ( _STR , _STR ) ; attribute2 = doc . createAttributeNS ( _STR , _STR ) ; attribute2 . setValue ( _STR ) ; element . setAttributeNodeNS ( attribute1 ) ; element . setAttributeNodeNS ( attribute2 ) ; attrNode = element . getAttributeNodeNS ( _STR , _STR ) ; attrName = attrNode . getNodeName ( ) ; attrNS = attrNode . getNamespaceURI ( ) ; assertEquals ( _STR , _STR , attrName ) ; assertEquals ( _STR , _STR , attrNS ) ; attributes = element . getAttributes ( ) ; length = ( int ) attributes . getLength ( ) ; assertEquals ( _STR , _NUM , length ) ; }
20665	public boolean isCritical ( ) { return _BOOL ; }
6531	public static String findEditTable ( String tables ) { if ( ! StringUtils . isEmpty ( tables ) ) { int spacepos = tables . indexOf ( _STR ) ; int commapos = tables . indexOf ( _STR ) ; if ( spacepos > _NUM && ( spacepos < commapos || commapos < _NUM ) ) { return tables . substring ( _NUM , spacepos ) ; } else if ( commapos > _NUM && ( commapos < spacepos || spacepos < _NUM ) ) { return tables . substring ( _NUM , commapos ) ; } return tables ; } else { throw new IllegalStateException ( _STR ) ; } }
74336	public void writeOperationsCarFile ( ) { makeBackupFile ( defaultOperationsFilename ( ) ) ; try { if ( ! checkFile ( defaultOperationsFilename ( ) ) ) { java . io . File file = new java . io . File ( defaultOperationsFilename ( ) ) ; java . io . File parentDir = file . getParentFile ( ) ; if ( ! parentDir . exists ( ) ) { if ( ! parentDir . mkdir ( ) ) { log . error ( _STR ) ; } } if ( file . createNewFile ( ) ) { log . debug ( _STR ) ; } } writeFile ( defaultOperationsFilename ( ) ) ; } catch ( Exception e ) { log . error ( _STR + e ) ; } }
58089	ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
55237	private boolean hasNewFollowers ( List < Follower > followers ) { return ! followers . isEmpty ( ) && followers . get ( _NUM ) . newFollower ; }
16134	private void onTrackPointElementStart ( Attributes attributes ) throws SAXException { String latitude = attributes . getValue ( ATT_LAT ) ; String longitude = attributes . getValue ( ATT_LON ) ; if ( latitude == null || longitude == null ) { throw new SAXException ( createErrorMessage ( _STR ) ) ; } try { latitudeValue = Double . parseDouble ( latitude ) ; longitudeValue = Double . parseDouble ( longitude ) ; } catch ( NumberFormatException e ) { throw new SAXException ( createErrorMessage ( _STR + latitude + _STR + longitude ) , e ) ; } }
64754	protected final void firePropertyChange ( PropertyChangeEvent evt ) { pcs . firePropertyChange ( evt ) ; }
40461	static int checkDesc ( final String desc , final int start , final boolean canBeVoid ) { if ( desc == null || start >= desc . length ( ) ) { throw new IllegalArgumentException ( _STR ) ; } int index ; switch ( desc . charAt ( start ) ) { case _STR : if ( canBeVoid ) { return start + _NUM ; } else { throw new IllegalArgumentException ( _STR + desc ) ; } case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : return start + _NUM ; case _STR : index = start + _NUM ; while ( index < desc . length ( ) && desc . charAt ( index ) == _STR ) { ++ index ; } if ( index < desc . length ( ) ) { return checkDesc ( desc , index , _BOOL ) ; } else { throw new IllegalArgumentException ( _STR + desc ) ; } case _STR : index = desc . indexOf ( _STR , start ) ; if ( index == - _NUM || index - start < _NUM ) { throw new IllegalArgumentException ( _STR + desc ) ; } try { checkInternalName ( desc , start + _NUM , index , null ) ; } catch ( IllegalArgumentException unused ) { throw new IllegalArgumentException ( _STR + desc ) ; } return index + _NUM ; default : throw new IllegalArgumentException ( _STR + desc ) ; } }
81353	public static void sortFields ( FieldBinding [ ] sortedFields , int left , int right ) { Arrays . sort ( sortedFields , left , right , FIELD_COMPARATOR ) ; }
37492	private void drawBackground ( final Graphics g ) { g . setColor ( m_bgColorOffset ) ; g . fillRect ( - m_firstColumn * m_charWidth , _NUM , m_offsetViewWidth , getHeight ( ) ) ; }
78339	public void addUniqueAttribute ( final String elementName , final String attrName ) { if ( ( elementName != null ) && ( attrName != null ) ) { _uniqueElementAttrMap . put ( elementName , attrName ) ; } }
59965	private static DeleteVmResponse checkDeleteVmResponse ( DeleteVmResponse deleteVmResponse ) throws RpcException { logger . info ( _STR , deleteVmResponse ) ; switch ( deleteVmResponse . getResult ( ) ) { case OK : break ; case SYSTEM_ERROR : throw new SystemErrorException ( deleteVmResponse . getError ( ) ) ; case VM_NOT_FOUND : throw new VmNotFoundException ( deleteVmResponse . getError ( ) ) ; case VM_NOT_POWERED_OFF : throw new VmNotPoweredOffException ( deleteVmResponse . getError ( ) ) ; default : throw new RpcException ( String . format ( _STR , deleteVmResponse . getResult ( ) ) ) ; } return deleteVmResponse ; }
18497	public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; { boolean success = _BOOL ; try { child . deleteData ( _NUM , _NUM ) ; } catch ( DOMException ex ) { success = ( ex . code == DOMException . INDEX_SIZE_ERR ) ; } assertTrue ( _STR , success ) ; } }
20556	public void limitTransAndScale ( Matrix matrix , RectF content ) { float [ ] vals = new float [ _NUM ] ; matrix . getValues ( vals ) ; float curTransX = vals [ Matrix . MTRANS_X ] ; float curScaleX = vals [ Matrix . MSCALE_X ] ; float curTransY = vals [ Matrix . MTRANS_Y ] ; float curScaleY = vals [ Matrix . MSCALE_Y ] ; mScaleX = Math . max ( mMinScaleX , curScaleX ) ; mScaleY = Math . max ( mMinScaleY , curScaleY ) ; float width = _NUM ; float height = _NUM ; if ( content != null ) { width = content . width ( ) ; height = content . height ( ) ; } float maxTransX = - width * ( mScaleX - _NUM ) ; float newTransX = Math . min ( Math . max ( curTransX , maxTransX - mTransOffsetX ) , mTransOffsetX ) ; float maxTransY = height * ( mScaleY - _NUM ) ; float newTransY = Math . max ( Math . min ( curTransY , maxTransY + mTransOffsetY ) , - mTransOffsetY ) ; vals [ Matrix . MTRANS_X ] = newTransX ; vals [ Matrix . MSCALE_X ] = mScaleX ; vals [ Matrix . MTRANS_Y ] = newTransY ; vals [ Matrix . MSCALE_Y ] = mScaleY ; matrix . setValues ( vals ) ; }
69888	public BlazeValueFactory valueFactory ( ) { return vf ; }
13929	public StatefulRefreshToken ( JsonValue token ) throws InvalidGrantException { super ( token ) ; if ( ! OAUTH_REFRESH_TOKEN . equals ( getTokenName ( ) ) ) { throw new InvalidGrantException ( _STR + getTokenId ( ) ) ; } }
71734	public void putStyle ( String styleId , StyleSelector styleSelector ) { try { int id = Integer . parseInt ( styleId ) ; mMaxStyleId = Math . max ( mMaxStyleId , id ) ; } catch ( NumberFormatException e ) { } mStyles . put ( styleId , styleSelector ) ; }
24242	private static String extractClientName ( String clientId , String host ) { String hostExcludedId = _STR ; if ( ( isIPv6 ( host ) || isIPv4 ( host ) ) && clientId . startsWith ( host ) ) { hostExcludedId = clientId . substring ( host . length ( ) ) ; } else { int firstDotIndex = host . indexOf ( _STR ) ; if ( firstDotIndex != - _NUM ) { String hostShortName = host . substring ( _NUM , firstDotIndex ) ; hostExcludedId = clientId . substring ( hostShortName . length ( ) ) ; } } String vmPIDAndKindRegex = _STR ; String regex = _STR ; String name = NOT_AVAILABLE ; String temp = hostExcludedId ; int openIndex = temp . indexOf ( _STR ) ; if ( openIndex != - _NUM ) { regex = vmPIDAndKindRegex + regex ; } if ( temp . matches ( regex ) ) { String [ ] splitted = temp . split ( _STR ) ; name = splitted [ splitted . length - _NUM ] ; } return name ; }
56550	public static < T > FastFuture < T > fromCompletableFuture ( final CompletableFuture < T > cf ) { final FastFuture < T > f = new FastFuture < > ( ) ; cf . thenAccept ( null ) ; cf . exceptionally ( null ) ; return f ; }
79187	public static boolean isPlaceAction ( InventoryAction action ) { switch ( action ) { case SWAP_WITH_CURSOR : case PLACE_ONE : case PLACE_ALL : case PLACE_SOME : return _BOOL ; } return _BOOL ; }
45115	private void refreshMarkers ( ) { removeAll ( ) ; Map markerMap = new HashMap ( ) ; List notices = textArea . getParserNotices ( ) ; for ( Iterator i = notices . iterator ( ) ; i . hasNext ( ) ; ) { ParserNotice notice = ( ParserNotice ) i . next ( ) ; if ( notice . getLevel ( ) <= levelThreshold || ( notice instanceof TaskNotice ) ) { Integer key = new Integer ( notice . getLine ( ) ) ; Marker m = ( Marker ) markerMap . get ( key ) ; if ( m == null ) { m = new Marker ( notice ) ; m . addMouseListener ( listener ) ; markerMap . put ( key , m ) ; add ( m ) ; } else { m . addNotice ( notice ) ; } } } if ( getShowMarkedOccurrences ( ) && textArea . getMarkOccurrences ( ) ) { List occurrences = textArea . getMarkedOccurrences ( ) ; for ( Iterator i = occurrences . iterator ( ) ; i . hasNext ( ) ; ) { DocumentRange range = ( DocumentRange ) i . next ( ) ; int line = _NUM ; try { line = textArea . getLineOfOffset ( range . getStartOffset ( ) ) ; } catch ( BadLocationException ble ) { continue ; } ParserNotice notice = new MarkedOccurrenceNotice ( range ) ; Integer key = new Integer ( line ) ; Marker m = ( Marker ) markerMap . get ( key ) ; if ( m == null ) { m = new Marker ( notice ) ; m . addMouseListener ( listener ) ; markerMap . put ( key , m ) ; add ( m ) ; } else { if ( ! m . containsMarkedOccurence ( ) ) { m . addNotice ( notice ) ; } } } } revalidate ( ) ; repaint ( ) ; }
40966	private List < View > addView ( View view , List < View > cache ) { if ( cache == null ) { cache = new LinkedList < View > ( ) ; } cache . add ( view ) ; return cache ; }
81977	public static byte [ ] readInputStream ( InputStream i ) throws IOException { ByteArrayOutputStream b = new ByteArrayOutputStream ( ) ; copy ( i , b ) ; return b . toByteArray ( ) ; }
6519	public void playMedia ( boolean showPlayerWindow ) { String filename = stopAndPrepareFilename ( ) ; if ( filename . length ( ) > _NUM ) { MPlayerMediator mplayerMediator = MPlayerMediator . instance ( ) ; if ( mplayerMediator != null ) { mplayerMediator . showPlayerWindow ( showPlayerWindow ) ; } mplayer . open ( filename , getAdjustedVolume ( ) ) ; } notifyState ( getState ( ) ) ; }
11947	public static String toUTF8String ( String s ) { return new String ( s . getBytes ( ) , Charset . forName ( PanboxConstants . STANDARD_CHARSET ) ) ; }
32276	public static int encodeCacheFlags ( Collection < GridClientCacheFlag > flagSet ) { int bits = _NUM ; if ( flagSet . contains ( GridClientCacheFlag . SKIP_STORE ) ) bits |= _NUM ; return bits ; }
28392	public void add ( DataSource source , boolean visible ) { add ( data . size ( ) , source , visible ) ; }
38091	@ Override public void addValue ( double value , double weight ) { m_WeightedSum += value * weight ; m_WeightedSumSquared += value * value * weight ; m_SumOfWeights += weight ; if ( m_TM . get ( value ) == null ) { m_TM . put ( value , weight ) ; } else { m_TM . put ( value , m_TM . get ( value ) + weight ) ; } }
37150	private JPanel buildRow ( final String string , final JCheckBox checkBox ) { final JPanel panel = new JPanel ( new BorderLayout ( ) ) ; panel . add ( new JLabel ( string ) , BorderLayout . WEST ) ; panel . add ( checkBox , BorderLayout . EAST ) ; checkBox . addItemListener ( m_checkBoxListener ) ; return panel ; }
62535	private static synchronized String formatAndParse ( SimpleDateFormat formatDate , SimpleDateFormat parseDate , String text ) { try { Date date = parseDate . parse ( text ) ; String result = formatDate . format ( date ) ; return result ; } catch ( ParseException e ) { logger . warning ( _STR + text ) ; } return _STR ; }
716	public static boolean isChildGroup ( String group ) { return group . indexOf ( GROUP_DELIMITER ) != - _NUM ; }
39919	private void throwArrayIndexOutOfBoundsException ( int itemIndex ) { throw new ArrayIndexOutOfBoundsException ( _STR + _STR + spaceItems . size ( ) + _STR + itemIndex ) ; }
49476	private LocusInfo createNextUncoveredLocusInfo ( final Locus stopBeforeLocus ) { while ( lastReferenceSequence <= stopBeforeLocus . getSequenceIndex ( ) && lastReferenceSequence <= referenceSequenceMask . getMaxSequenceIndex ( ) ) { if ( lastReferenceSequence == stopBeforeLocus . getSequenceIndex ( ) && lastPosition + _NUM >= stopBeforeLocus . getPosition ( ) ) { return null ; } final int nextbit = referenceSequenceMask . nextPosition ( lastReferenceSequence , lastPosition ) ; if ( nextbit == - _NUM ) { if ( lastReferenceSequence == stopBeforeLocus . getSequenceIndex ( ) ) { lastPosition = stopBeforeLocus . getPosition ( ) ; return null ; } lastReferenceSequence ++ ; lastPosition = _NUM ; } else if ( lastReferenceSequence < stopBeforeLocus . getSequenceIndex ( ) || nextbit < stopBeforeLocus . getPosition ( ) ) { lastPosition = nextbit ; return new LocusInfo ( getReferenceSequence ( lastReferenceSequence ) , lastPosition ) ; } else if ( nextbit >= stopBeforeLocus . getPosition ( ) ) { return null ; } } return null ; }
14699	public void globalConfigChanged ( String serviceName , String version , String groupName , String serviceComponent , int changeType ) { }
7046	public static void launchEmailIntent ( final Activity activity , String addr , String text ) { Log . i ( LOG_TAG , _STR + activity . getLocalClassName ( ) ) ; Intent emailIntent = new Intent ( Intent . ACTION_SEND ) ; emailIntent . putExtra ( Intent . EXTRA_EMAIL , new String [ ] { addr } ) ; emailIntent . setType ( _STR ) ; PackageManager emailpackageManager = activity . getPackageManager ( ) ; List < ResolveInfo > emailresolveInfos = emailpackageManager . queryIntentActivities ( emailIntent , _NUM ) ; if ( emailresolveInfos . size ( ) > _NUM ) { activity . startActivity ( emailIntent ) ; } }
32761	public int count ( ) { return n ; }
28487	public void add ( int position , T item ) { mData . add ( position , item ) ; notifyItemInserted ( position ) ; }
17178	public void addTranslator ( ClassPool cp , Translator t ) throws NotFoundException , CannotCompileException { source = cp ; translator = t ; t . start ( cp ) ; }
51977	private void onMainContentScrolled ( int currentY , int deltaY ) { if ( deltaY > mActionBarAutoHideSensivity ) { deltaY = mActionBarAutoHideSensivity ; } else if ( deltaY < - mActionBarAutoHideSensivity ) { deltaY = - mActionBarAutoHideSensivity ; } if ( Math . signum ( deltaY ) * Math . signum ( mActionBarAutoHideSignal ) < _NUM ) { mActionBarAutoHideSignal = deltaY ; } else { mActionBarAutoHideSignal += deltaY ; } boolean shouldShow = currentY < mActionBarAutoHideMinY || ( mActionBarAutoHideSignal <= - mActionBarAutoHideSensivity ) ; autoShowOrHideActionBar ( shouldShow ) ; }
10982	public void writeLEChars ( String s ) throws IOException { int length = s . length ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { int c = s . charAt ( i ) ; out . write ( c & _NUM ) ; out . write ( ( c > > > _NUM ) & _NUM ) ; } written += length * _NUM ; }
32828	public static String readLine ( ) { String line ; try { line = scanner . nextLine ( ) ; } catch ( NoSuchElementException e ) { line = null ; } return line ; }
44040	@ Deprecated public boolean isValid ( String regex ) { if ( regex == null ) { return _BOOL ; } Pattern pattern = Pattern . compile ( regex ) ; Matcher matcher = pattern . matcher ( getText ( ) ) ; return matcher . matches ( ) ; }
83352	public void writeToFile ( String filename ) { GridUtils . writeSpatialGridTable ( this , filename ) ; }
72893	public void addFooterView ( View v , Object data , boolean isSelectable ) { FixedViewInfo info = new FixedViewInfo ( ) ; info . view = v ; info . data = data ; info . isSelectable = isSelectable ; mFooterViewInfos . add ( info ) ; if ( mAdapter != null && mDataSetObserver != null ) { mDataSetObserver . onChanged ( ) ; } }
77549	public void addCloseHook ( CloseHook hook ) { if ( closeHooks == null ) { closeHooks = new ArrayList < > ( ) ; } closeHooks . add ( hook ) ; }
57520	public void rejectedExecution ( Runnable r , ThreadPoolExecutor e ) { if ( ! e . isShutdown ( ) ) { r . run ( ) ; } }
16292	private void updateRange ( double x , double y ) { mMinX = Math . min ( mMinX , x ) ; mMaxX = Math . max ( mMaxX , x ) ; mMinY = Math . min ( mMinY , y ) ; mMaxY = Math . max ( mMaxY , y ) ; }
28257	static boolean checkStandardUPCEANChecksum ( CharSequence s ) throws FormatException { int length = s . length ( ) ; if ( length == _NUM ) { return _BOOL ; } int sum = _NUM ; for ( int i = length - _NUM ; i >= _NUM ; i -= _NUM ) { int digit = ( int ) s . charAt ( i ) - ( int ) _STR ; if ( digit < _NUM || digit > _NUM ) { throw FormatException . getFormatInstance ( ) ; } sum += digit ; } sum *= _NUM ; for ( int i = length - _NUM ; i >= _NUM ; i -= _NUM ) { int digit = ( int ) s . charAt ( i ) - ( int ) _STR ; if ( digit < _NUM || digit > _NUM ) { throw FormatException . getFormatInstance ( ) ; } sum += digit ; } return sum % _NUM == _NUM ; }
42574	public void readConfig ( String filename ) throws FileNotFoundException { if ( filename == null || filename . equals ( _STR ) ) return ; readConfig ( new FileReader ( filename ) ) ; }
80383	private void applyTradingBonus ( Player player ) { player . incrementTradescore ( ) ; }
2570	public static String slurpURLNoExceptions ( URL u ) { try { return slurpURL ( u ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }
37232	private static void createCombinedTrace ( final TraceList newTrace , final List < TraceList > traces , final Set < BreakpointAddress > addresses ) { final Set < BreakpointAddress > visitedAddresses = new LinkedHashSet < BreakpointAddress > ( ) ; for ( final TraceList trace : traces ) { for ( final ITraceEvent event : trace ) { final BreakpointAddress address = event . getOffset ( ) ; if ( ! addresses . contains ( address ) ) { continue ; } if ( visitedAddresses . contains ( address ) ) { continue ; } visitedAddresses . add ( address ) ; newTrace . addEvent ( event ) ; } } }
27588	public void interruptAll ( ) { synchronized ( knownActorTasks ) { for ( Future < Void > ft : knownActorTasks ) { ft . cancel ( _BOOL ) ; } threadGuard . interruptAll ( ) ; } }
53898	@ SuppressWarnings ( _STR ) public void registerDefaultDeviceTypes ( ) { final HashMap < String , String > devicesList = DefaultPlatform . getDeviceServiceMap ( ) ; for ( HashMap . Entry < String , String > entry : devicesList . entrySet ( ) ) { String key = entry . getKey ( ) ; String value = entry . getValue ( ) ; try { registerDeviceService ( ( Class < DeviceService > ) Class . forName ( key ) , ( Class < DiscoveryProvider > ) Class . forName ( value ) ) ; } catch ( ClassNotFoundException e ) { e . printStackTrace ( ) ; } } }
55057	private static void removeDependencySubsets ( String swcLocation , Map < String , Set < String > > dependencyMap , SwcDependencyInfoImpl depInfo ) { Set < String > removeSet = new HashSet < String > ( ) ; SwcExternalScriptInfo externalInfo = depInfo . getSwcExternalScriptInfo ( swcLocation ) ; Map < String , Set < String > > externalsBySwc = new HashMap < String , Set < String > > ( ) ; for ( String swcDependLocation : dependencyMap . get ( swcLocation ) ) { for ( String swcDependLocation2 : dependencyMap . get ( swcLocation ) ) { if ( swcDependLocation . equals ( swcDependLocation2 ) ) continue ; Set < String > externalScripts = externalsBySwc . get ( swcDependLocation ) ; Set < String > externalScripts2 = externalsBySwc . get ( swcDependLocation2 ) ; if ( externalScripts == null ) { externalScripts = externalInfo . getExternalScripts ( swcDependLocation ) ; externalsBySwc . put ( swcDependLocation , externalScripts ) ; } if ( externalScripts2 == null ) { externalScripts2 = externalInfo . getExternalScripts ( swcDependLocation2 ) ; externalsBySwc . put ( swcDependLocation2 , externalScripts2 ) ; } if ( externalScripts2 . size ( ) > externalScripts . size ( ) && externalScripts2 . containsAll ( externalScripts ) ) { removeSet . add ( swcDependLocation ) ; break ; } } } Set < String > dependencySet = dependencyMap . get ( swcLocation ) ; dependencySet . removeAll ( removeSet ) ; }
52616	private void drawTicks ( Canvas canvas , double min , double max , double minAngle , double maxAngle , int centerX , int centerY , double longRadius , double shortRadius , double ticks , Paint paint , boolean labels ) { for ( double i = min ; i <= max ; i += ticks ) { double angle = getAngleForValue ( i , minAngle , maxAngle , min , max ) ; double sinValue = Math . sin ( angle ) ; double cosValue = Math . cos ( angle ) ; int x1 = Math . round ( centerX + ( float ) ( shortRadius * sinValue ) ) ; int y1 = Math . round ( centerY + ( float ) ( shortRadius * cosValue ) ) ; int x2 = Math . round ( centerX + ( float ) ( longRadius * sinValue ) ) ; int y2 = Math . round ( centerY + ( float ) ( longRadius * cosValue ) ) ; canvas . drawLine ( x1 , y1 , x2 , y2 , paint ) ; if ( labels ) { paint . setTextAlign ( Align . LEFT ) ; if ( x1 <= x2 ) { paint . setTextAlign ( Align . RIGHT ) ; } String text = i + _STR ; if ( Math . round ( i ) == ( long ) i ) { text = ( long ) i + _STR ; } canvas . drawText ( text , x1 , y1 , paint ) ; } } }
75978	private void updateBaseMatrix ( Drawable d ) { ImageView imageView = getImageView ( ) ; if ( null == imageView || null == d ) { return ; } final float viewWidth = imageView . getWidth ( ) ; final float viewHeight = imageView . getHeight ( ) ; final int drawableWidth = d . getIntrinsicWidth ( ) ; final int drawableHeight = d . getIntrinsicHeight ( ) ; mBaseMatrix . reset ( ) ; final float widthScale = viewWidth / drawableWidth ; final float heightScale = viewHeight / drawableHeight ; if ( mScaleType == ScaleType . CENTER ) { mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth ) / _NUM , ( viewHeight - drawableHeight ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_CROP ) { float scale = Math . max ( widthScale , heightScale ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_INSIDE ) { float scale = Math . min ( _NUM , Math . min ( widthScale , heightScale ) ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else { RectF mTempSrc = new RectF ( _NUM , _NUM , drawableWidth , drawableHeight ) ; RectF mTempDst = new RectF ( _NUM , _NUM , viewWidth , viewHeight ) ; switch ( mScaleType ) { case FIT_CENTER : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . CENTER ) ; break ; case FIT_START : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . START ) ; break ; case FIT_END : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . END ) ; break ; case FIT_XY : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . FILL ) ; break ; default : break ; } } resetMatrix ( ) ; }
69601	public static < T , K , L extends List < T > > BiFunction < Partition < T , K , L > , T , Boolean > alwaysInsert ( ) { return null ; }
10752	public void testFindSpringOpenLdap ( ) { LdapProxy proxy = getLdapOpenLdap ( ) ; List result = null ; try { result = proxy . find ( getLdapSearchVO ( _STR , LdapConstants . NO_SEARCH_LIMIT , null , null , null , LdapScopeConstants . SCOPE_SUBTREE ) ) ; } catch ( Exception e ) { } assertNotNull ( result ) ; assertEquals ( _NUM , result . size ( ) ) ; }
18950	public void testConstructorStringRadix8 ( ) { String value = _STR ; int radix = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( value , radix ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , aNumber . signum ( ) ) ; }
18229	private static boolean inEncoding ( char ch , String encoding ) { boolean isInEncoding ; try { char cArray [ ] = new char [ _NUM ] ; cArray [ _NUM ] = ch ; String s = new String ( cArray ) ; byte [ ] bArray = s . getBytes ( encoding ) ; isInEncoding = inEncoding ( ch , bArray ) ; } catch ( Exception e ) { isInEncoding = _BOOL ; if ( encoding == null ) isInEncoding = _BOOL ; } return isInEncoding ; }
14783	public void delete ( SSOToken token , String dn ) throws SMSException , SSOException { for ( String entry : subEntries ( token , dn , _STR , _NUM , _BOOL , _BOOL ) ) { debug . message ( _STR , entry ) ; delete ( token , getNamingAttribute ( ) + _STR + entry + _STR + dn ) ; } for ( String subOrg : searchSubOrgNames ( token , dn , _STR , _NUM , _BOOL , _BOOL , _BOOL ) ) { debug . message ( _STR , subOrg ) ; delete ( token , subOrg ) ; } delete ( token . getPrincipal ( ) , dn ) ; objectChanged ( dn , DELETE ) ; }
44982	private void removeHighlights ( ) { if ( textArea != null ) { RSyntaxTextAreaHighlighter h = ( RSyntaxTextAreaHighlighter ) textArea . getHighlighter ( ) ; for ( int i = _NUM ; i < tags . size ( ) ; i ++ ) { h . removeMarkOccurrencesHighlight ( tags . get ( i ) ) ; } } tags . clear ( ) ; }
24525	private static < T extends AbstractBlockBase < T > > void enqueueSuccessors ( T block , PriorityQueue < T > worklist , BitSet visitedBlocks ) { for ( T successor : block . getSuccessors ( ) ) { if ( ! visitedBlocks . get ( successor . getId ( ) ) ) { visitedBlocks . set ( successor . getId ( ) ) ; worklist . add ( successor ) ; } } }
55002	protected void addCommonComponent ( XMLComponent component ) { if ( fCommonComponents . contains ( component ) ) { return ; } fCommonComponents . add ( component ) ; addRecognizedParamsAndSetDefaults ( component ) ; }
26075	public void addRole ( String role ) { if ( role != null ) { roles . add ( role ) ; } }
37206	public CModulesCheckBoxPanel ( final CModulesTableModel modulesTableModel ) { super ( new BorderLayout ( ) ) ; final JCheckBox checkBox = new JCheckBox ( _STR ) ; checkBox . addItemListener ( new InternalCheckboxListener ( ) ) ; add ( checkBox ) ; m_modulesTableModel = modulesTableModel ; }
3817	public QDate ( ) { this ( _gmtTimeZone ) ; }
5601	protected void responseSent ( StreamResponseMessage responseMessage ) { if ( syncProtocol != null ) syncProtocol . responseSent ( responseMessage ) ; }
58228	public final void append ( FastStringBuffer value ) { if ( value == null ) return ; int strlen = value . length ( ) ; if ( _NUM == strlen ) return ; int copyfrom = _NUM ; char [ ] chunk = m_array [ m_lastChunk ] ; int available = m_chunkSize - m_firstFree ; while ( strlen > _NUM ) { if ( available > strlen ) available = strlen ; int sourcechunk = ( copyfrom + value . m_chunkSize - _NUM ) > > > value . m_chunkBits ; int sourcecolumn = copyfrom & value . m_chunkMask ; int runlength = value . m_chunkSize - sourcecolumn ; if ( runlength > available ) runlength = available ; System . arraycopy ( value . m_array [ sourcechunk ] , sourcecolumn , m_array [ m_lastChunk ] , m_firstFree , runlength ) ; if ( runlength != available ) System . arraycopy ( value . m_array [ sourcechunk + _NUM ] , _NUM , m_array [ m_lastChunk ] , m_firstFree + runlength , available - runlength ) ; strlen -= available ; copyfrom += available ; if ( strlen > _NUM ) { int i = m_array . length ; if ( m_lastChunk + _NUM == i ) { char [ ] [ ] newarray = new char [ i + _NUM ] [ ] ; System . arraycopy ( m_array , _NUM , newarray , _NUM , i ) ; m_array = newarray ; } chunk = m_array [ ++ m_lastChunk ] ; if ( chunk == null ) { if ( m_lastChunk == _NUM << m_rebundleBits && m_chunkBits < m_maxChunkBits ) { m_innerFSB = new FastStringBuffer ( this ) ; } chunk = m_array [ m_lastChunk ] = new char [ m_chunkSize ] ; } available = m_chunkSize ; m_firstFree = _NUM ; } } m_firstFree += available ; }
56358	protected Tuple < BlobStoreIndexShardSnapshots , Integer > buildBlobStoreIndexShardSnapshots ( Map < String , BlobMetaData > blobs ) { int latest = - _NUM ; for ( String name : blobs . keySet ( ) ) { if ( name . startsWith ( SNAPSHOT_INDEX_PREFIX ) ) { try { int gen = Integer . parseInt ( name . substring ( SNAPSHOT_INDEX_PREFIX . length ( ) ) ) ; if ( gen > latest ) { latest = gen ; } } catch ( NumberFormatException ex ) { logger . warn ( _STR , name ) ; } } } if ( latest >= _NUM ) { try { return new Tuple < > ( indexShardSnapshotsFormat . read ( blobContainer , Integer . toString ( latest ) ) , latest ) ; } catch ( IOException e ) { logger . warn ( _STR , e , SNAPSHOT_INDEX_PREFIX + latest ) ; } } List < SnapshotFiles > snapshots = new ArrayList < > ( ) ; for ( String name : blobs . keySet ( ) ) { try { BlobStoreIndexShardSnapshot snapshot = null ; if ( name . startsWith ( SNAPSHOT_PREFIX ) ) { snapshot = indexShardSnapshotFormat . readBlob ( blobContainer , name ) ; } else if ( name . startsWith ( LEGACY_SNAPSHOT_PREFIX ) ) { snapshot = indexShardSnapshotLegacyFormat . readBlob ( blobContainer , name ) ; } if ( snapshot != null ) { snapshots . add ( new SnapshotFiles ( snapshot . snapshot ( ) , snapshot . indexFiles ( ) ) ) ; } } catch ( IOException e ) { logger . warn ( _STR , e , name ) ; } } return new Tuple < > ( new BlobStoreIndexShardSnapshots ( snapshots ) , - _NUM ) ; }
44667	protected MapleQuestRequirement ( MapleQuest quest , ReadBin data ) throws IOException { this . quest = quest ; this . dayByDay = data . readByte ( ) > _NUM ; this . normalAutoStart = data . readByte ( ) > _NUM ; this . lvmin = data . readShort ( ) ; this . lvmax = data . readShort ( ) ; this . mbmin = data . readShort ( ) ; this . charismaMin = data . readShort ( ) ; this . charmMin = data . readShort ( ) ; this . craftMin = data . readShort ( ) ; this . insightMin = data . readShort ( ) ; this . senseMin = data . readShort ( ) ; this . willMin = data . readShort ( ) ; this . pop = data . readShort ( ) ; this . pettamenessmin = data . readShort ( ) ; this . subJobFlag = data . readShort ( ) ; this . npc = data . readInt ( ) ; this . interval = data . readInt ( ) ; this . end = data . readString ( ) ; this . startscript = data . readString ( ) ; this . endscript = data . readString ( ) ; short size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { int field = data . readInt ( ) ; fieldEnter . add ( field ) ; } size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { short job = data . readShort ( ) ; jobs . add ( job ) ; } size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { int id = data . readInt ( ) ; boolean acquire = data . readByte ( ) > _NUM ; skills . put ( id , acquire ) ; } size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { int id = data . readInt ( ) ; byte state = data . readByte ( ) ; byte order = data . readByte ( ) ; quests . put ( id , state ) ; } size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { int id = data . readInt ( ) ; int count = data . readInt ( ) ; byte order = data . readByte ( ) ; items . put ( id , count ) ; } size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { int id = data . readInt ( ) ; int count = data . readInt ( ) ; mobs . put ( id , count ) ; } size = data . readShort ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { int id = data . readInt ( ) ; pets . add ( id ) ; } }
77715	public ForumPostConfig createReply ( ForumPostConfig config ) { config . addCredentials ( this ) ; String xml = POST ( this . url + _STR , config . toXML ( ) ) ; Element root = parse ( xml ) ; if ( root == null ) { return null ; } try { ForumPostConfig reply = new ForumPostConfig ( ) ; reply . parseXML ( root ) ; return reply ; } catch ( Exception exception ) { this . exception = SDKException . parseFailure ( exception ) ; throw this . exception ; } }
4457	public boolean isArmed ( ) { return other . isArmed ( ) ; }
27141	public static AttribKey forHtmlAttrib ( ElKey el , String localName ) { return new AttribKey ( el , HTML_NS , localName ) ; }
35746	SparseArray ( Class < L > linearArrayType , int [ ] rowIndices , int [ ] colIndices , L realValues , L imagValues , int numRows , int numCols ) { validateUserSuppliedParameters ( linearArrayType , rowIndices , colIndices , realValues , imagValues ) ; _baseComponentType = linearArrayType . getComponentType ( ) ; _outputArrayType = ( Class < L [ ] > ) ArrayUtils . getArrayClass ( _baseComponentType , _NUM ) ; Map < SparseKey , SparseValue > sparseMap = createSparseMap ( linearArrayType , rowIndices , colIndices , realValues , imagValues , numRows , numCols ) ; _numRows = numRows ; _numCols = numCols ; ArrayList < SparseKey > keys = new ArrayList < SparseKey > ( sparseMap . keySet ( ) ) ; Collections . sort ( keys ) ; _rowIndices = new int [ keys . size ( ) ] ; _colIndices = new int [ keys . size ( ) ] ; _linearIndices = new int [ keys . size ( ) ] ; _realValues = linearArrayType . cast ( Array . newInstance ( _baseComponentType , keys . size ( ) ) ) ; _imagValues = imagValues == null ? null : linearArrayType . cast ( Array . newInstance ( _baseComponentType , keys . size ( ) ) ) ; for ( int i = _NUM ; i < keys . size ( ) ; i ++ ) { SparseKey key = keys . get ( i ) ; _rowIndices [ i ] = key . row ; _colIndices [ i ] = key . col ; _linearIndices [ i ] = key . linearIndex ; SparseValue value = sparseMap . get ( key ) ; setSparseValue ( value , _realValues , _imagValues , i ) ; } }
712	public static Tuple max ( TupleSet tuples , String field , Comparator cmp ) { if ( tuples instanceof Table ) { Table table = ( Table ) tuples ; ColumnMetadata md = table . getMetadata ( field ) ; return table . getTuple ( md . getMaximumRow ( ) ) ; } else { return max ( tuples . tuples ( ) , field , cmp ) ; } }
38552	protected void updateRadioLinks ( ) { m_CVBut . setEnabled ( _BOOL ) ; m_CVText . setEnabled ( m_CVBut . isSelected ( ) ) ; m_CVLab . setEnabled ( m_CVBut . isSelected ( ) ) ; m_SeedText . setEnabled ( m_CVBut . isSelected ( ) ) ; m_SeedLab . setEnabled ( m_CVBut . isSelected ( ) ) ; if ( m_AttributeEvaluatorEditor . getValue ( ) instanceof AttributeTransformer ) { m_CVBut . setSelected ( _BOOL ) ; m_CVBut . setEnabled ( _BOOL ) ; m_CVText . setEnabled ( _BOOL ) ; m_CVLab . setEnabled ( _BOOL ) ; m_SeedText . setEnabled ( _BOOL ) ; m_SeedLab . setEnabled ( _BOOL ) ; m_TrainBut . setSelected ( _BOOL ) ; } }
73826	private String idString ( int id1 , int id2 ) { return _STR + Integer . toHexString ( id2 & _NUM ) + _STR + Integer . toHexString ( id1 & _NUM ) + _STR + ( ( id2 & _NUM ) * _NUM + ( id1 & _NUM ) ) + _STR ; }
22722	public EtagCache resetStats ( ) { hits . set ( _NUM ) ; misses . set ( _NUM ) ; return this ; }
76159	public void testOtherToStringDefault ( ) { NumberConverter converter = makeConverter ( ) ; assertEquals ( _STR , _STR , converter . convert ( String . class , new StringBuffer ( _STR ) ) ) ; }
28771	private void removeItemAtInt ( int index , boolean updateChildrenOnMenuViews ) { if ( ( index < _NUM ) || ( index >= mItems . size ( ) ) ) return ; mItems . remove ( index ) ; if ( updateChildrenOnMenuViews ) onItemsChanged ( _BOOL ) ; }
18891	public void testShiftRight3 ( ) { byte aBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = _NUM ; int number = _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , _NUM , - _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . shiftRight ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
69999	private void showFilterDialog ( Filter filter ) { int sortOrder = mAdapter . getCount ( ) - _NUM ; if ( filter == null ) { EditFilterActivity . createNewFilter ( getActivity ( ) , sortOrder ) ; } else { EditFilterActivity . editFilter ( getActivity ( ) , filter , sortOrder ) ; } }
11697	public static int numPixelsBetween ( int x1 , int y1 , int x2 , int y2 ) { return ( int ) Math . sqrt ( Math . pow ( ( double ) ( x1 - x2 ) , _NUM ) + Math . pow ( ( double ) ( y1 - y2 ) , _NUM ) ) ; }
19399	private KeyStore createKeys ( KeyStore keyStore , String keyAlgorithm , String publicAlias , String privateAlias , PrivateKeyEntry signer ) throws Exception { PrivateKey caKey ; X509Certificate caCert ; X509Certificate [ ] caCertChain ; if ( signer == null ) { caKey = null ; caCert = null ; caCertChain = null ; } else { caKey = signer . getPrivateKey ( ) ; caCert = ( X509Certificate ) signer . getCertificate ( ) ; caCertChain = ( X509Certificate [ ] ) signer . getCertificateChain ( ) ; } PrivateKey privateKey ; X509Certificate x509c ; if ( publicAlias == null && privateAlias == null ) { privateKey = null ; x509c = null ; } else { int keySize ; if ( keyAlgorithm . equals ( _STR ) ) { keySize = _NUM ; } else if ( keyAlgorithm . equals ( _STR ) ) { keySize = _NUM ; } else if ( keyAlgorithm . equals ( _STR ) ) { keySize = _NUM ; } else if ( keyAlgorithm . equals ( _STR ) ) { keySize = _NUM ; keyAlgorithm = _STR ; } else { throw new IllegalArgumentException ( _STR + keyAlgorithm ) ; } KeyPairGenerator kpg = KeyPairGenerator . getInstance ( keyAlgorithm ) ; kpg . initialize ( keySize , new SecureRandom ( ) ) ; KeyPair kp = kpg . generateKeyPair ( ) ; privateKey = kp . getPrivate ( ) ; PublicKey publicKey = kp . getPublic ( ) ; X500Principal issuer = ( ( caCert != null ) ? caCert . getSubjectX500Principal ( ) : subject ) ; PrivateKey signingKey = ( caKey == null ) ? privateKey : caKey ; x509c = createCertificate ( publicKey , signingKey , subject , issuer , keyUsage , ca , extendedKeyUsages , criticalExtendedKeyUsages , subjectAltNames , permittedNameConstraints , excludedNameConstraints ) ; } X509Certificate [ ] x509cc ; if ( privateAlias == null ) { x509cc = null ; } else if ( caCertChain == null ) { x509cc = new X509Certificate [ ] { x509c } ; } else { x509cc = new X509Certificate [ caCertChain . length + _NUM ] ; x509cc [ _NUM ] = x509c ; System . arraycopy ( caCertChain , _NUM , x509cc , _NUM , caCertChain . length ) ; } if ( privateAlias != null ) { keyStore . setKeyEntry ( privateAlias , privateKey , keyPassword , x509cc ) ; } if ( publicAlias != null ) { keyStore . setCertificateEntry ( publicAlias , x509c ) ; } return keyStore ; }
74910	static boolean allowsPopup ( FormObject formObject ) { switch ( formObject . getParameterConstant ( PdfDictionary . Subtype ) ) { case PdfDictionary . Text : case PdfDictionary . Square : case PdfDictionary . Highlight : case PdfDictionary . Underline : case PdfDictionary . StrickOut : case PdfDictionary . Stamp : return _BOOL ; default : return _BOOL ; } }
84308	public static LocalGitRepo fromCurrentDir ( String remoteUrl ) throws ValidationException { Git git ; File gitDir = new File ( _STR ) ; try { git = Git . open ( gitDir ) ; } catch ( RepositoryNotFoundException rnfe ) { String fullPathOfCurrentDir = pathOf ( gitDir ) ; File gitRoot = getGitRootIfItExistsInOneOfTheParentDirectories ( new File ( fullPathOfCurrentDir ) ) ; String summary ; List < String > messages = new ArrayList < String > ( ) ; if ( gitRoot == null ) { summary = _STR ; messages . add ( summary ) ; messages . add ( fullPathOfCurrentDir + _STR ) ; } else { summary = _STR ; messages . add ( summary ) ; messages . add ( fullPathOfCurrentDir + _STR ) ; messages . add ( _STR + pathOf ( gitRoot ) ) ; } throw new ValidationException ( summary , messages ) ; } catch ( Exception e ) { throw new ValidationException ( _STR + pathOf ( gitDir ) + _STR , Arrays . asList ( _STR , e . toString ( ) ) ) ; } return new LocalGitRepo ( git , remoteUrl ) ; }
2460	public static Vector2 min ( Vector2 o1 , Vector2 o2 ) { return new Vector2 ( Math . min ( o1 . x , o2 . x ) , Math . min ( o1 . z , o2 . z ) ) ; }
76284	public void addTestCall ( GenericAccessibleObject < ? > call ) throws IllegalArgumentException { Inputs . checkNull ( call ) ; testMethods . add ( call ) ; }
45334	public void serialize ( KXmlSerializer serializer ) throws IOException { mDeviceInfo . serialize ( serializer ) ; serializeHostInfo ( serializer ) ; serializeTestSummary ( serializer ) ; monkeyTag . serialize ( serializer ) ; List < TestPackageResult > pkgs = new ArrayList < TestPackageResult > ( mPackageMap . values ( ) ) ; Collections . sort ( pkgs , new PkgComparator ( ) ) ; for ( TestPackageResult r : pkgs ) { r . serialize ( serializer ) ; } }
22112	private void verifyBlockMirrorMigration ( ) throws Exception { log . info ( _STR ) ; Iterator < BlockMirror > blockMirrorItr = _dbClient . queryIterativeObjects ( BlockMirror . class , blockMirrorURIs ) ; List < BlockObject > blockObjects = new ArrayList < BlockObject > ( ) ; while ( blockMirrorItr . hasNext ( ) ) { blockObjects . add ( blockMirrorItr . next ( ) ) ; } verifyBlockObjects ( blockObjects ) ; }
52362	public LogFormatter ( Logger log ) { if ( log == null ) log = Logger . getLogger ( Logger . GLOBAL_LOGGER_NAME ) ; Level lvl = null ; while ( log != null ) { lvl = log . getLevel ( ) ; if ( lvl != null ) break ; log = log . getParent ( ) ; } ; if ( lvl == null ) lvl = Level . WARNING ; this . level = lvl ; }
38725	public synchronized void removeTextListener ( TextListener cl ) { m_textListeners . remove ( cl ) ; }
41159	protected final void refreshLoadingViewsSize ( ) { final int maximumPullScroll = ( int ) ( getMaximumPullScroll ( ) * _NUM ) ; int pLeft = getPaddingLeft ( ) ; int pTop = getPaddingTop ( ) ; int pRight = getPaddingRight ( ) ; int pBottom = getPaddingBottom ( ) ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setWidth ( maximumPullScroll ) ; pLeft = - maximumPullScroll ; } else { pLeft = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setWidth ( maximumPullScroll ) ; pRight = - maximumPullScroll ; } else { pRight = _NUM ; } break ; case VERTICAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setHeight ( maximumPullScroll ) ; pTop = - maximumPullScroll ; } else { pTop = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setHeight ( maximumPullScroll ) ; pBottom = - maximumPullScroll ; } else { pBottom = _NUM ; } break ; } if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR , pLeft , pTop , pRight , pBottom ) ) ; } setPadding ( pLeft , pTop , pRight , pBottom ) ; }
9908	private Element createIDPEntityDescriptor ( boolean exportPrivateData ) throws Exception { Element entEle = doc . createElementNS ( null , SAMLNames . ENTDESCRIPTOR ) ; String id = idmClient . getEntityID ( tenantName ) ; String alias = idmClient . getLocalIDPAlias ( tenantName ) ; if ( id == null ) { id = tenantName ; } entEle . setAttribute ( SAMLNames . ENTID , id ) ; Element idpSSO = createIDPSSODescriptor ( exportPrivateData ) ; entEle . appendChild ( idpSSO ) ; if ( exportPrivateData ) { if ( alias == null || alias . isEmpty ( ) ) { alias = id ; } Element orgEle = createOrganization ( tenantName , tenantName , alias , SAMLNames . ENGLISH ) ; entEle . appendChild ( orgEle ) ; } return entEle ; }
16744	public void clear ( ) { infoQueue . clear ( ) ; while ( ! dataQueue . isEmpty ( ) ) { allocator . release ( dataQueue . remove ( ) ) ; } totalBytesDropped = _NUM ; totalBytesWritten = _NUM ; lastAllocation = null ; lastAllocationOffset = allocationLength ; }
53067	public void applyCamera ( GL2 gl ) { gl . glMatrixMode ( GL2 . GL_PROJECTION ) ; gl . glLoadIdentity ( ) ; glu . gluPerspective ( _NUM , width / ( float ) height , _NUM , _NUM ) ; eye [ _NUM ] = ( float ) Math . sin ( theta ) * _NUM ; eye [ _NUM ] = _NUM ; eye [ _NUM ] = ( float ) Math . cos ( theta ) * _NUM ; glu . gluLookAt ( eye [ _NUM ] , eye [ _NUM ] , eye [ _NUM ] , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM ) ; gl . glMatrixMode ( GL2 . GL_MODELVIEW ) ; gl . glLoadIdentity ( ) ; gl . glViewport ( _NUM , _NUM , width , height ) ; }
63507	public static ResultSet pointTable ( double x , double y ) { GeometryFactory factory = new GeometryFactory ( ) ; SimpleResultSet rs = new SimpleResultSet ( ) ; rs . addColumn ( _STR , Types . JAVA_OBJECT , _STR , _NUM , _NUM ) ; rs . addRow ( factory . createPoint ( new Coordinate ( x , y ) ) ) ; return rs ; }
21031	public void addToExistingVolumesIfAbsent ( Map < String , Integer > volumeWWNs ) { if ( _existingVolumes == null ) { _existingVolumes = new StringMap ( ) ; } for ( String wwn : volumeWWNs . keySet ( ) ) { String normalizedWWN = BlockObject . normalizeWWN ( wwn ) ; if ( ! _existingVolumes . containsKey ( normalizedWWN ) && ( _userAddedVolumes == null || ! _userAddedVolumes . containsKey ( normalizedWWN ) ) ) { String hluStr = ExportGroup . LUN_UNASSIGNED_STR ; Integer hlu = volumeWWNs . get ( normalizedWWN ) ; if ( hlu != null ) { hluStr = hlu . toString ( ) ; } _existingVolumes . put ( normalizedWWN , hluStr ) ; } } }
3723	public PathImpl createTempFile ( String prefix , String suffix ) throws IOException { if ( prefix == null || prefix . length ( ) == _NUM ) prefix = _STR ; if ( suffix == null ) suffix = _STR ; synchronized ( LOCK ) { for ( int i = _NUM ; i < _NUM ; i ++ ) { int r = Math . abs ( ( int ) RandomUtil . getRandomLong ( ) ) ; PathImpl file = lookup ( prefix + r + suffix ) ; if ( file . createNewFile ( ) ) return file ; } } throw new IOException ( _STR ) ; }
34982	static Map < TargetType , List < TypeCompound > > partitionByTargetType ( Collection < TypeCompound > annos , List < TypeCompound > unmatched , TargetType ... targetTypes ) { final Map < TargetType , List < TypeCompound > > targetTypeToAnnos = new HashMap < > ( ) ; for ( TargetType targetType : targetTypes ) { targetTypeToAnnos . put ( targetType , new ArrayList < TypeCompound > ( _NUM ) ) ; } for ( final TypeCompound anno : annos ) { final List < TypeCompound > annoSet = targetTypeToAnnos . get ( anno . getPosition ( ) . type ) ; if ( annoSet != null ) { annoSet . add ( anno ) ; } else if ( unmatched != null ) { unmatched . add ( anno ) ; } } return targetTypeToAnnos ; }
13337	ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
78004	public void load ( ) { try { if ( fileChannel == null ) { fileChannel = FileChannel . open ( path , StandardOpenOption . READ ) ; } fileChannel . position ( _NUM ) ; buffer . clear ( ) ; tmp . clear ( ) ; while ( fileChannel . read ( tmp ) > _NUM ) { tmp . flip ( ) ; if ( tmp . remaining ( ) > buffer . capacity ( ) - buffer . position ( ) ) { final ByteBuffer next = ByteBuffer . allocateDirect ( Math . max ( buffer . capacity ( ) * _NUM , tmp . remaining ( ) ) ) ; buffer . flip ( ) ; next . put ( buffer ) ; buffer = next ; } buffer . put ( tmp ) ; tmp . clear ( ) ; } buffer . flip ( ) ; } catch ( final IOException e ) { throw new UncheckedIOException ( e ) ; } }
80148	private void onHPChange ( final int amount ) { if ( User . squaredDistanceTo ( x , y ) < HEARING_DISTANCE_SQ ) { if ( amount > _NUM ) { addTextIndicator ( _STR + amount , NotificationType . POSITIVE ) ; } else { addTextIndicator ( String . valueOf ( amount ) , NotificationType . NEGATIVE ) ; } } }
50994	@ NotNull private File resolveName ( @ NotNull String name ) throws IOException { File file ; if ( name . startsWith ( ROOT ) ) { file = new File ( myTemplateRootFolder , name . substring ( ROOT . length ( ) ) ) ; } else if ( myLastTemplateFolders != null ) { file = new File ( myLastTemplateFolders . peek ( ) , name ) ; } else { file = new File ( myTemplateRootFolder , name ) ; } return file . getCanonicalFile ( ) ; }
11512	public void initToolTip ( ) { if ( ttmanager == null ) { ttmanager = ToolTipManager . sharedInstance ( ) ; ttmanager . registerComponent ( map ) ; ttmanager . setEnabled ( _BOOL ) ; return ; } if ( map != null ) { map . setToolTipText ( null ) ; } }
43879	public static String [ ] decodeArray ( String encodedArray ) { String [ ] items = encodedArray . split ( _STR ) ; ArrayList < String > list = new ArrayList < String > ( ) ; for ( int i = _NUM ; i < items . length ; i ++ ) { String item = items [ i ] ; item = gsub ( _STR , _STR , item ) ; if ( ! item . equals ( _STR ) ) { list . add ( item ) ; } } return list . toArray ( new String [ list . size ( ) ] ) ; }
83818	public boolean computeAngleOffset ( ) { if ( mFinished ) { return _BOOL ; } long systemClock = AnimationUtils . currentAnimationTimeMillis ( ) ; long timePassed = systemClock - mStartTime ; if ( timePassed < mDuration ) { switch ( mMode ) { case SCROLL_MODE : float sc = ( float ) timePassed / mDuration ; mCurrAngle = mStartAngle + Math . round ( mDeltaAngle * sc ) ; break ; case FLING_MODE : float timePassedSeconds = timePassed / _NUM ; float distance ; if ( mVelocity < _NUM ) { distance = mCoeffVelocity * mVelocity * timePassedSeconds - ( mDeceleration * timePassedSeconds * timePassedSeconds / _NUM ) ; } else { distance = - mCoeffVelocity * mVelocity * timePassedSeconds - ( mDeceleration * timePassedSeconds * timePassedSeconds / _NUM ) ; } mCurrAngle = mStartAngle - Math . signum ( mVelocity ) * Math . round ( distance ) ; break ; } return _BOOL ; } else { mFinished = _BOOL ; return _BOOL ; } }
27593	private void sendResource ( final UUID uuid , final Object resource , final long length , final InputStream is ) throws IOException { assert uuid != null ; assert resource != null ; assert length >= _NUM ; assert is != null ; assert ! sentStatus ; long bytesWritten = _NUM ; final long begin = System . nanoTime ( ) ; final OutputStream os = s . getOutputStream ( ) ; try { { final DataOutputStream dos = new DataOutputStream ( os ) ; dos . write ( new byte [ ] { StatusEnum . OK . get ( ) } ) ; dos . writeLong ( length ) ; dos . flush ( ) ; bytesWritten += _NUM + Bytes . SIZEOF_LONG ; sentStatus = _BOOL ; } final long checksum ; { final int BUFSIZE = Bytes . kilobyte32 * _NUM ; final CheckedInputStream cis = new CheckedInputStream ( new BufferedInputStream ( is ) , new Adler32 ( ) ) ; final byte [ ] buff = new byte [ BUFSIZE ] ; while ( _BOOL ) { final int read = cis . read ( buff , _NUM , BUFSIZE ) ; if ( read <= _NUM ) break ; os . write ( buff , _NUM , read ) ; bytesWritten += read ; } checksum = cis . getChecksum ( ) . getValue ( ) ; } { final DataOutputStream dos = new DataOutputStream ( os ) ; dos . writeLong ( checksum ) ; bytesWritten += Bytes . SIZEOF_LONG ; dos . flush ( ) ; } os . flush ( ) ; if ( log . isInfoEnabled ( ) ) log . info ( _STR + uuid + _STR + resource + _STR + length + _STR + checksum + _STR + TimeUnit . NANOSECONDS . toMillis ( System . nanoTime ( ) - begin ) + _STR ) ; } finally { try { os . close ( ) ; } catch ( Throwable t ) { } counters . bytesWritten . add ( bytesWritten ) ; counters . elapsedWriteNanos . add ( System . nanoTime ( ) - begin ) ; synchronized ( counters . maxWriteSizeLock ) { counters . maxWriteSize = Math . max ( counters . maxWriteSize , bytesWritten ) ; } } }
28666	public long sigignore ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
40104	private static byte [ ] generateSeed ( ) { try { final ByteArrayOutputStream seedBuffer = new ByteArrayOutputStream ( ) ; final DataOutputStream seedBufferOut = new DataOutputStream ( seedBuffer ) ; seedBufferOut . writeLong ( System . currentTimeMillis ( ) ) ; seedBufferOut . writeLong ( System . nanoTime ( ) ) ; seedBufferOut . writeInt ( Process . myPid ( ) ) ; seedBufferOut . writeInt ( Process . myUid ( ) ) ; seedBufferOut . write ( BUILD_FINGERPRINT_AND_DEVICE_SERIAL ) ; seedBufferOut . close ( ) ; return seedBuffer . toByteArray ( ) ; } catch ( final IOException e ) { throw new SecurityException ( _STR , e ) ; } }
50640	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
43940	public String render ( ValueExpr theExpr ) throws Exception { theExpr . visit ( this ) ; return mBuffer . toString ( ) ; }
34482	public void stopSampling ( ) { if ( mSamplingCounter . decrementAndGet ( ) == _NUM ) { mHandler . stopSamplingThread ( ) ; addFinalSample ( ) ; } }
42121	public static final void reverseWinding ( List < Vector2 > points ) { if ( points == null ) throw new NullPointerException ( Messages . getString ( _STR ) ) ; int size = points . size ( ) ; if ( size == _NUM || size == _NUM ) return ; Collections . reverse ( points ) ; }
9772	public DSignCsr ( JFrame parent , PKCS10CertificationRequest pkcs10Csr , File csrFile , PrivateKey signPrivateKey , KeyPairType signKeyPairType , X509Certificate verificationCertificate , Provider provider ) throws CryptoException { super ( parent , Dialog . ModalityType . DOCUMENT_MODAL ) ; this . pkcs10Csr = pkcs10Csr ; this . csrFile = csrFile ; this . signPrivateKey = signPrivateKey ; this . signKeyPairType = signKeyPairType ; this . verificationCertificate = verificationCertificate ; this . provider = provider ; setTitle ( res . getString ( _STR ) ) ; initComponents ( ) ; }
57042	protected static void init ( ) { String notificationfactoryClassName = null ; try { notificationfactoryClassName = System . getProperty ( NOTIFICATION_FACTORY_NAME ) ; } catch ( SecurityException e ) { throw new RuntimeException ( e ) ; } if ( notificationfactoryClassName != null ) { Class < ? > nfc ; try { nfc = Class . forName ( notificationfactoryClassName ) ; factory = ( INotificationManagerFactory ) nfc . newInstance ( ) ; } catch ( ClassNotFoundException | InstantiationException | IllegalAccessException e ) { throw new RuntimeException ( e ) ; } } else { factory = new SyslogNotificationFactory ( ) ; } }
57621	private int awaitDone ( boolean timed , long nanos ) throws InterruptedException { final long deadline = timed ? System . nanoTime ( ) + nanos : _NUM ; WaitNode q = null ; boolean queued = _BOOL ; for ( ; ; ) { if ( Thread . interrupted ( ) ) { removeWaiter ( q ) ; throw new InterruptedException ( ) ; } int s = state ; if ( s > COMPLETING ) { if ( q != null ) q . thread = null ; return s ; } else if ( s == COMPLETING ) Thread . yield ( ) ; else if ( q == null ) q = new WaitNode ( ) ; else if ( ! queued ) queued = UNSAFE . compareAndSwapObject ( this , waitersOffset , q . next = waiters , q ) ; else if ( timed ) { nanos = deadline - System . nanoTime ( ) ; if ( nanos <= _NUM ) { removeWaiter ( q ) ; return state ; } LockSupport . parkNanos ( this , nanos ) ; } else LockSupport . park ( this ) ; } }
5874	private boolean linkFirst ( Node < E > node ) { if ( count >= capacity ) return _BOOL ; Node < E > f = first ; node . next = f ; first = node ; if ( last == null ) last = node ; else f . prev = node ; ++ count ; notEmpty . signal ( ) ; return _BOOL ; }
44783	public static double clamp ( double value , double low , double high ) { return Math . min ( Math . max ( value , low ) , high ) ; }
43196	public static String parseVolumeHostDirectory ( String volume ) { if ( StringUtils . isEmpty ( volume ) ) { return volume ; } if ( ! volume . contains ( HOST_CONTAINER_DIR_DELIMITER ) ) { return volume ; } String [ ] hostContainerDir = volume . split ( HOST_CONTAINER_DIR_DELIMITER ) ; if ( hostContainerDir . length != _NUM ) { throw new IllegalArgumentException ( _STR ) ; } String hostDir = hostContainerDir [ _NUM ] ; return hostDir ; }
12591	private String fmtTime ( double time ) { return Utilities . pad ( timeFormatter . format ( time ) + _STR , _NUM ) ; }
17710	@ Override public synchronized Object [ ] toArray ( ) { Object [ ] result = new Object [ elementCount ] ; System . arraycopy ( elementData , _NUM , result , _NUM , elementCount ) ; return result ; }
49514	public static String right ( String s , int width , char fillChar ) { if ( s . length ( ) >= width ) { return s ; } StringBuffer sb = new StringBuffer ( width ) ; for ( int i = width - s . length ( ) ; -- i >= _NUM ; ) { sb . append ( fillChar ) ; } sb . append ( s ) ; return sb . toString ( ) ; }
47347	public synchronized boolean addAll ( Collection < ? extends E > c ) { modCount ++ ; Object [ ] a = c . toArray ( ) ; int numNew = a . length ; ensureCapacityHelper ( elementCount + numNew ) ; System . arraycopy ( a , _NUM , elementData , elementCount , numNew ) ; elementCount += numNew ; return numNew != _NUM ; }
78656	@ Override public void update ( DefaultApplicationState transState ) { newCheckpoint ( transState . getState ( ) , transState . getStateHash ( ) , transState . getLastCheckpointCID ( ) ) ; setLastCheckpointCID ( transState . getLastCheckpointCID ( ) ) ; }
68256	public static byte [ ] stringToUtf8Bytes ( String string ) { int len = string . length ( ) ; byte [ ] bytes = new byte [ len * _NUM ] ; int outAt = _NUM ; for ( int i = _NUM ; i < len ; i ++ ) { char c = string . charAt ( i ) ; if ( ( c != _NUM ) && ( c < _NUM ) ) { bytes [ outAt ] = ( byte ) c ; outAt ++ ; } else if ( c < _NUM ) { bytes [ outAt ] = ( byte ) ( ( ( c > > _NUM ) & _NUM ) | _NUM ) ; bytes [ outAt + _NUM ] = ( byte ) ( ( c & _NUM ) | _NUM ) ; outAt += _NUM ; } else { bytes [ outAt ] = ( byte ) ( ( ( c > > _NUM ) & _NUM ) | _NUM ) ; bytes [ outAt + _NUM ] = ( byte ) ( ( ( c > > _NUM ) & _NUM ) | _NUM ) ; bytes [ outAt + _NUM ] = ( byte ) ( ( c & _NUM ) | _NUM ) ; outAt += _NUM ; } } byte [ ] result = new byte [ outAt ] ; System . arraycopy ( bytes , _NUM , result , _NUM , outAt ) ; return result ; }
37283	private List < Pair < String , Object > > toPairList ( final Map < String , Object > bindings ) { final List < Pair < String , Object > > blist = new ArrayList < Pair < String , Object > > ( ) ; for ( final Map . Entry < String , Object > pair : bindings . entrySet ( ) ) { blist . add ( new Pair < String , Object > ( pair . getKey ( ) , pair . getValue ( ) ) ) ; } return blist ; }
30159	@ Override public boolean validateLabel ( String label ) { Objects . requireNonNull ( label , _STR ) ; return ! labels . contains ( label ) ; }
25418	public void addMessageObserver ( final MessageObserver observer ) { if ( observer == null ) { throw new NullPointerException ( ) ; } else if ( messageObservers == null ) { initMessageObserverList ( ) ; } messageObservers . add ( observer ) ; }
16262	public void show ( char initialChar ) { initialString = initialString . append ( initialChar ) ; show ( ) ; if ( SWT . getPlatform ( ) != _STR ) { setEditText ( initialString . toString ( ) ) ; } }
85655	private static void byte2hex ( byte b , StringBuffer buf ) { int high = ( ( b & _NUM ) > > _NUM ) ; int low = ( b & _NUM ) ; buf . append ( HEX_DIGITS [ high ] ) ; buf . append ( HEX_DIGITS [ low ] ) ; }
25579	public E remove ( int index ) { hashCodeUpToDate = _BOOL ; modCount ++ ; E oldValue = elementData ( index ) ; int numMoved = size - index - _NUM ; if ( numMoved > _NUM ) System . arraycopy ( elementData , index + _NUM , elementData , index , numMoved ) ; elementData [ -- size ] = null ; return oldValue ; }
39225	public static DoubleVector rnorm ( int n , double mean , double sd , Random random ) { if ( sd < _NUM ) throw new IllegalArgumentException ( _STR ) ; if ( sd == _NUM ) return new DoubleVector ( n , mean ) ; DoubleVector v = new DoubleVector ( n ) ; for ( int i = _NUM ; i < n ; i ++ ) v . set ( i , ( random . nextGaussian ( ) + mean ) / sd ) ; return v ; }
74834	private PdfObject readCompressedStream ( PdfObject rootObj , int pointer , final PdfFileReader currentPdfFile , final ObjectReader objectReader , final PdfObject linearObj ) throws PdfException { while ( pointer != - _NUM ) { movePointer ( pointer ) ; final byte [ ] raw = objectReader . readObjectData ( - _NUM , null ) ; final StringBuilder objectName = new StringBuilder ( ) ; char current1 , last = _STR ; int matched = _NUM , i1 = _NUM ; while ( i1 < raw . length ) { current1 = ( char ) raw [ i1 ] ; if ( current1 == _NUM || current1 == _NUM ) { current1 = _STR ; } if ( current1 == _STR && last == _STR ) { matched = _NUM ; } else if ( current1 == pattern . charAt ( matched ) ) { matched ++ ; } else { matched = _NUM ; objectName . append ( current1 ) ; } if ( matched == _NUM ) { break ; } last = current1 ; i1 ++ ; } objectName . append ( _STR ) ; final PdfObject pdfObject = new CompressedObject ( objectName . toString ( ) ) ; pdfObject . setCompressedStream ( _BOOL ) ; final ObjectDecoder objectDecoder = new ObjectDecoder ( currentPdfFile ) ; objectDecoder . readDictionaryAsObject ( pdfObject , _NUM , raw ) ; final int [ ] fieldSizes = pdfObject . getIntArray ( PdfDictionary . W ) ; byte [ ] xrefs = pdfObject . getDecodedStream ( ) ; if ( xrefs == null ) { xrefs = currentPdfFile . readStream ( pdfObject , _BOOL , _BOOL , _BOOL , _BOOL , _BOOL , null ) ; } final int [ ] Index = pdfObject . getIntArray ( PdfDictionary . Index ) ; if ( Index == null ) { CompressedObjects . readCompressedOffsets ( _NUM , _NUM , pdfObject . getInt ( PdfDictionary . Size ) , fieldSizes , xrefs , offset , pdf_datafile ) ; } else { final int count = Index . length ; int pntr = _NUM ; for ( int aa = _NUM ; aa < count ; aa += _NUM ) { pntr = CompressedObjects . readCompressedOffsets ( pntr , Index [ aa ] , Index [ aa + _NUM ] , fieldSizes , xrefs , offset , pdf_datafile ) ; } } if ( rootObj == null ) { rootObj = pdfObject . getDictionary ( PdfDictionary . Root ) ; encryptObj = pdfObject . getDictionary ( PdfDictionary . Encrypt ) ; if ( encryptObj != null ) { final byte [ ] [ ] IDs = pdfObject . getStringArray ( PdfDictionary . ID ) ; if ( IDs != null && this . ID == null ) { this . ID = IDs [ _NUM ] ; } } infoObject = pdfObject . getDictionary ( PdfDictionary . Info ) ; } if ( linearObj != null ) { pointer = - _NUM ; } else { pointer = pdfObject . getInt ( PdfDictionary . Prev ) ; if ( pointer != - _NUM && ! isCompressedStream ( pointer , ( int ) eof ) ) { return readLegacyReferenceTable ( rootObj , pointer , ( int ) eof , currentPdfFile ) ; } } } return rootObj ; }
46079	protected void warningOccurred ( int code ) { cbLock . lock ( ) ; try { if ( ( code < _NUM ) || ( code > MAX_WARNING ) ) { throw new InternalError ( _STR ) ; } processWarningOccurred ( _STR , Integer . toString ( code ) ) ; } finally { cbLock . unlock ( ) ; } }
72706	public boolean isKnownSub ( String subName ) { return KNOWN_SUBS . contains ( subName ) ; }
414	public String diff_text1 ( LinkedList < Diff > diffs ) { StringBuilder text = new StringBuilder ( ) ; for ( Diff aDiff : diffs ) { if ( aDiff . operation != Operation . INSERT ) { text . append ( aDiff . text ) ; } } return text . toString ( ) ; }
36943	public boolean isStored ( ) { return Integer . signum ( id ) != - _NUM ; }
64146	public static BigInteger sizeOfDirectoryAsBigInteger ( File directory ) { checkDirectory ( directory ) ; final File [ ] files = directory . listFiles ( ) ; if ( files == null ) { return BigInteger . ZERO ; } BigInteger size = BigInteger . ZERO ; for ( final File file : files ) { try { if ( ! isSymlink ( file ) ) { size = size . add ( BigInteger . valueOf ( sizeOf ( file ) ) ) ; } } catch ( IOException ioe ) { } } return size ; }
73930	public boolean isSearchLightBit ( int bit ) { if ( nodeType != SMINI ) { log . error ( _STR ) ; return ( _BOOL ) ; } if ( ( bit < _NUM ) || ( bit > _NUM ) ) { log . error ( _STR + Integer . toString ( bit ) ) ; return ( _BOOL ) ; } if ( locSearchLightBits [ bit ] == _NUM ) { return ( _BOOL ) ; } return ( _BOOL ) ; }
64094	public AgeFileFilter ( Date cutoffDate , boolean acceptOlder ) { this ( cutoffDate . getTime ( ) , acceptOlder ) ; }
84701	public void calcMajorTick ( ) { majorTick = _NUM ; majorTickCount = ( int ) Math . round ( log10 ( maxTick / minTick ) ) + _NUM ; }
79512	public boolean next ( ) throws GenericDataSourceException { try { return _rs . next ( ) ; } catch ( SQLException sqle ) { throw new GenericDataSourceException ( _STR + _sql , sqle ) ; } }
20900	public void put ( String sample , HiddenAttribute attribute , Object value ) { put ( sample , attribute . toString ( ) , value ) ; }
35925	void postMessage ( List < JetstreamMessage > msgs , DispatchQueueStats stats ) throws MessageServiceException { m_msgRcvCounter . addAndGet ( msgs . size ( ) ) ; if ( ( monitorUpstreamQueueAndPauseTraffic ( ) == UpstreamQueueState . FULL ) && ( m_paused . get ( ) ) ) { if ( ! m_msgProcessor . hasAvailableCapacity ( m_twentyPercentCapacity ) ) { m_totalMsgsDropped . increment ( ) ; return ; } } List < Runnable > requests = new ArrayList < Runnable > ( msgs . size ( ) ) ; for ( int i = _NUM , t = msgs . size ( ) ; i < t ; i ++ ) { JetstreamMessage tm = msgs . get ( i ) ; if ( tm . getTopic ( ) == null ) { m_totalMsgsDropped . increment ( ) ; if ( LOGGER . isDebugEnabled ( ) ) { LOGGER . debug ( _STR ) ; } continue ; } MessageServiceRequest msr = new MessageServiceRequest ( tm ) ; msr . setPriority ( tm . getPriority ( ) ) ; msr . setSequenceid ( tm . getSequenceId ( ) ) ; if ( msr . getPriority ( ) == JetstreamMessage . INTERNAL_MSG_PRIORITY ) { if ( ! m_internalMsgProcessor . processRequest ( msr ) ) { m_totalMsgsDropped . increment ( ) ; throw new MessageServiceException ( MessageServiceException . BUFFER_FULL , _STR ) ; } if ( m_msgsRcvdPerSec . addAndGet ( _NUM ) < _NUM ) m_msgsRcvdPerSec . set ( _NUM ) ; m_totalMsgsRcvd . increment ( ) ; } else { requests . add ( msr ) ; } } if ( ! requests . isEmpty ( ) ) { int batchsize = requests . size ( ) ; if ( ! m_msgProcessor . processBatch ( requests ) ) { m_totalMsgsDropped . addAndGet ( batchsize ) ; throw new MessageServiceException ( MessageServiceException . BUFFER_FULL , _STR + _STR + batchsize + _STR + m_msgProcessor . getAvailableCapacity ( ) ) ; } m_avgMsgsRcvdPerSec . add ( batchsize ) ; m_totalMsgsRcvd . addAndGet ( batchsize ) ; } if ( stats != null ) { stats . setHighPriorityQueueDepth ( ( int ) m_msgProcessor . getPendingRequests ( ) ) ; stats . setLowPriorityQueueDepth ( ( int ) m_msgProcessor . getPendingRequests ( ) ) ; stats . setMaxQueueDepth ( ( int ) m_msgProcessor . getMaxQueueSz ( ) ) ; } }
46729	public boolean unsetOrdering ( Object first , Object second ) { DigraphNode firstPONode = ( DigraphNode ) poNodes . get ( first ) ; DigraphNode secondPONode = ( DigraphNode ) poNodes . get ( second ) ; return firstPONode . removeEdge ( secondPONode ) || secondPONode . removeEdge ( firstPONode ) ; }
41709	public String convertSWFToHTML ( InputStream in ) throws Exception { StringWriter out1 = new StringWriter ( ) ; output = new PrintWriter ( out1 ) ; TagParser parser = new TagParser ( this ) ; SWFReader reader = new SWFReader ( parser , in ) ; reader . readFile ( ) ; in . close ( ) ; sizeCount = reader . size ; final String ret = _STR + ( headerstr . isEmpty ( ) ? _STR : _STR + headerstr + _STR ) + out1 . toString ( ) + _STR ; return ret ; }
85356	public void write ( ClassFile classFile , File f ) throws IOException { FileOutputStream f_out = new FileOutputStream ( f ) ; try { write ( classFile , f_out ) ; } finally { f_out . close ( ) ; } }
11433	public Shape greatCircleLineShape ( ) { GeneralPath path = null ; if ( llpts != null && llpts . length >= _NUM && llpts . length % _NUM == _NUM ) { double y1 = llpts [ _NUM ] ; double x1 = llpts [ _NUM ] ; path = new GeneralPath ( GeneralPath . WIND_EVEN_ODD , llpts . length / _NUM ) ; boolean firstCoords = _BOOL ; for ( int i = _NUM ; i < llpts . length ; i += _NUM ) { double y2 = llpts [ i ] ; double x2 = llpts [ i + _NUM ] ; double radDist = GreatCircle . sphericalDistance ( y1 , x1 , y2 , x2 ) ; int nsegs = ( int ) ( ProjMath . radToDeg ( radDist ) * segsPerDeg ) ; if ( nsegs == _NUM ) { nsegs = _NUM ; } double [ ] coords = GreatCircle . greatCircle ( y1 , x1 , y2 , x2 , nsegs , _BOOL ) ; if ( returnDegrees ) { ProjMath . arrayRadToDeg ( coords ) ; } for ( int j = _NUM ; j <= coords . length - _NUM ; j += _NUM ) { if ( firstCoords ) { path . moveTo ( coords [ j + _NUM ] , coords [ j ] ) ; firstCoords = _BOOL ; } else { path . lineTo ( coords [ j + _NUM ] , coords [ j ] ) ; } } x1 = x2 ; y1 = y2 ; } if ( returnDegrees ) { path . lineTo ( ProjMath . radToDeg ( x1 ) , ProjMath . radToDeg ( y1 ) ) ; } else { path . lineTo ( x1 , y1 ) ; } } return path ; }
25364	public Connection ( final InetSocketAddress peerAddress ) { this ( peerAddress , ( Handshaker ) null ) ; }
16416	protected static Vector convertToVector ( final Object [ ] anArray ) { if ( anArray == null ) { return null ; } final Vector v = new Vector ( anArray . length ) ; for ( final Object element : anArray ) { v . addElement ( element ) ; } return v ; }
73747	protected synchronized void notifyVersion ( SprogVersion v ) { ver = v ; for ( SprogVersionListener listener : getCopyOfListeners ( ) ) { try { listener . notifyVersion ( ver ) ; versionListeners . remove ( listener ) ; } catch ( Exception e ) { log . warn ( _STR + listener + _STR + e ) ; } } }
47697	protected void acceptDrop ( int dropOperation ) { DropTargetContextPeer peer = getDropTargetContextPeer ( ) ; if ( peer != null ) { peer . acceptDrop ( dropOperation ) ; } }
86020	public void clear ( ) { oredCriteria . clear ( ) ; orderByClause = null ; distinct = _BOOL ; }
38382	@ Override public String toString ( ) { String result ; result = super . toString ( ) ; if ( m_CapabilitiesFilter != null ) { initCapabilities ( ) ; if ( m_Capabilities != null ) { if ( m_Capabilities . supportsMaybe ( m_CapabilitiesFilter ) && ! m_Capabilities . supports ( m_CapabilitiesFilter ) ) { result = _STR + MAYBE_SUPPORT + _STR + result + _STR ; } else if ( ! m_Capabilities . supports ( m_CapabilitiesFilter ) ) { result = _STR + NO_SUPPORT + _STR + result + _STR ; } } } return result ; }
61149	ConfigurationError ( String msg , Exception x ) { super ( msg ) ; this . exception = x ; }
38989	public void splitNode ( KDTreeNode node , int numNodesCreated , double [ ] [ ] nodeRanges , double [ ] [ ] universe ) throws Exception { correctlyInitialized ( ) ; if ( node . m_NodesRectBounds == null ) { node . m_NodesRectBounds = new double [ _NUM ] [ node . m_NodeRanges . length ] ; for ( int i = _NUM ; i < node . m_NodeRanges . length ; i ++ ) { node . m_NodesRectBounds [ MIN ] [ i ] = node . m_NodeRanges [ i ] [ MIN ] ; node . m_NodesRectBounds [ MAX ] [ i ] = node . m_NodeRanges [ i ] [ MAX ] ; } } double maxRectWidth = Double . NEGATIVE_INFINITY , maxPtWidth = Double . NEGATIVE_INFINITY , tempval ; int splitDim = - _NUM , classIdx = m_Instances . classIndex ( ) ; for ( int i = _NUM ; i < node . m_NodesRectBounds [ _NUM ] . length ; i ++ ) { if ( i == classIdx ) continue ; tempval = node . m_NodesRectBounds [ MAX ] [ i ] - node . m_NodesRectBounds [ MIN ] [ i ] ; if ( m_NormalizeNodeWidth ) { tempval = tempval / universe [ i ] [ WIDTH ] ; } if ( tempval > maxRectWidth && node . m_NodeRanges [ i ] [ WIDTH ] > _NUM ) maxRectWidth = tempval ; } for ( int i = _NUM ; i < node . m_NodesRectBounds [ _NUM ] . length ; i ++ ) { if ( i == classIdx ) continue ; tempval = node . m_NodesRectBounds [ MAX ] [ i ] - node . m_NodesRectBounds [ MIN ] [ i ] ; if ( m_NormalizeNodeWidth ) { tempval = tempval / universe [ i ] [ WIDTH ] ; } if ( tempval >= maxRectWidth * ( _NUM - ERR ) && node . m_NodeRanges [ i ] [ WIDTH ] > _NUM ) { if ( node . m_NodeRanges [ i ] [ WIDTH ] > maxPtWidth ) { maxPtWidth = node . m_NodeRanges [ i ] [ WIDTH ] ; if ( m_NormalizeNodeWidth ) maxPtWidth = maxPtWidth / universe [ i ] [ WIDTH ] ; splitDim = i ; } } } double splitVal = node . m_NodesRectBounds [ MIN ] [ splitDim ] + ( node . m_NodesRectBounds [ MAX ] [ splitDim ] - node . m_NodesRectBounds [ MIN ] [ splitDim ] ) * _NUM ; if ( splitVal < node . m_NodeRanges [ splitDim ] [ MIN ] ) splitVal = node . m_NodeRanges [ splitDim ] [ MIN ] ; else if ( splitVal >= node . m_NodeRanges [ splitDim ] [ MAX ] ) splitVal = node . m_NodeRanges [ splitDim ] [ MAX ] - node . m_NodeRanges [ splitDim ] [ WIDTH ] * _NUM ; int rightStart = rearrangePoints ( m_InstList , node . m_Start , node . m_End , splitDim , splitVal ) ; if ( rightStart == node . m_Start || rightStart > node . m_End ) { if ( rightStart == node . m_Start ) throw new Exception ( _STR + node . m_NodeNumber + _STR + _STR + _STR ) ; else throw new Exception ( _STR + node . m_NodeNumber + _STR + _STR + _STR ) ; } node . m_SplitDim = splitDim ; node . m_SplitValue = splitVal ; double [ ] [ ] widths = new double [ _NUM ] [ node . m_NodesRectBounds [ _NUM ] . length ] ; System . arraycopy ( node . m_NodesRectBounds [ MIN ] , _NUM , widths [ MIN ] , _NUM , node . m_NodesRectBounds [ MIN ] . length ) ; System . arraycopy ( node . m_NodesRectBounds [ MAX ] , _NUM , widths [ MAX ] , _NUM , node . m_NodesRectBounds [ MAX ] . length ) ; widths [ MAX ] [ splitDim ] = splitVal ; node . m_Left = new KDTreeNode ( numNodesCreated + _NUM , node . m_Start , rightStart - _NUM , m_EuclideanDistance . initializeRanges ( m_InstList , node . m_Start , rightStart - _NUM ) , widths ) ; widths = new double [ _NUM ] [ node . m_NodesRectBounds [ _NUM ] . length ] ; System . arraycopy ( node . m_NodesRectBounds [ MIN ] , _NUM , widths [ MIN ] , _NUM , node . m_NodesRectBounds [ MIN ] . length ) ; System . arraycopy ( node . m_NodesRectBounds [ MAX ] , _NUM , widths [ MAX ] , _NUM , node . m_NodesRectBounds [ MAX ] . length ) ; widths [ MIN ] [ splitDim ] = splitVal ; node . m_Right = new KDTreeNode ( numNodesCreated + _NUM , rightStart , node . m_End , m_EuclideanDistance . initializeRanges ( m_InstList , rightStart , node . m_End ) , widths ) ; }
86244	public Date modifiedDate ( String path ) throws IllegalStateException , IOException , FTPIllegalReplyException , FTPException { synchronized ( lock ) { if ( ! connected ) { throw new IllegalStateException ( _STR ) ; } if ( ! authenticated ) { throw new IllegalStateException ( _STR ) ; } communication . sendFTPCommand ( _STR + path ) ; FTPReply r = communication . readFTPReply ( ) ; touchAutoNoopTimer ( ) ; if ( ! r . isSuccessCode ( ) ) { throw new FTPException ( r ) ; } String [ ] messages = r . getMessages ( ) ; if ( messages . length != _NUM ) { throw new FTPIllegalReplyException ( ) ; } else { try { return MDTM_DATE_FORMAT . parse ( messages [ _NUM ] ) ; } catch ( ParseException e ) { throw new FTPIllegalReplyException ( ) ; } } } }
9798	public boolean importPkcs8 ( ) { return jrbPkcs8 . isSelected ( ) ; }
35063	public ControlFlowGraph run ( CompilationUnitTree root , ProcessingEnvironment env , MethodTree tree , ClassTree classTree ) { UnderlyingAST underlyingAST = new CFGMethod ( tree , classTree ) ; return run ( root , env , underlyingAST ) ; }
70147	private boolean isValidEngine ( ) { if ( hasFlag ( ~ ( CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE | SUPERHEAVY_ENGINE | SUPPORT_VEE_ENGINE ) ) ) { problem . append ( _STR + engineFlags ) ; return _BOOL ; } if ( hasFlag ( SUPPORT_VEE_ENGINE ) && ( engineType != STEAM ) && ( engineType != COMBUSTION_ENGINE ) && ( engineType != BATTERY ) && ( engineType != FUEL_CELL ) && ( engineType != SOLAR ) && ( engineType != FISSION ) && ( engineType != NORMAL_ENGINE ) && ( engineType != NONE ) ) { problem . append ( _STR ) ; return _BOOL ; } if ( ( ( ( int ) Math . ceil ( engineRating / _NUM ) > ENGINE_RATINGS . length ) || ( engineRating < _NUM ) ) && ! hasFlag ( SUPPORT_VEE_ENGINE ) ) { problem . append ( _STR + engineRating ) ; return _BOOL ; } if ( ( engineRating > _NUM ) && ! hasFlag ( SUPPORT_VEE_ENGINE ) ) { engineFlags |= LARGE_ENGINE ; } switch ( engineType ) { case COMBUSTION_ENGINE : case NORMAL_ENGINE : case XL_ENGINE : case XXL_ENGINE : case FUEL_CELL : case NONE : case MAGLEV : case BATTERY : case SOLAR : break ; case COMPACT_ENGINE : if ( hasFlag ( LARGE_ENGINE ) ) { problem . append ( Messages . getString ( _STR ) ) ; return _BOOL ; } break ; case LIGHT_ENGINE : case FISSION : if ( hasFlag ( CLAN_ENGINE ) ) { problem . append ( Messages . getString ( _STR ) ) ; return _BOOL ; } break ; default : problem . append ( _STR + engineType ) ; return _BOOL ; } return _BOOL ; }
59367	static public void assertEquals ( String message , float expected , float actual , float delta ) { if ( Float . isInfinite ( expected ) ) { if ( ! ( expected == actual ) ) failNotEquals ( message , new Float ( expected ) , new Float ( actual ) ) ; } else if ( ! ( Math . abs ( expected - actual ) <= delta ) ) failNotEquals ( message , new Float ( expected ) , new Float ( actual ) ) ; }
64817	private void calculateD ( double [ ] b ) { int length = mExtremalIndices . size ( ) - _NUM ; mD = new double [ length ] ; for ( int k = _NUM ; k < length ; k ++ ) { mD [ k ] = b [ k ] * ( mGrid . getCosineFrequencyGrid ( ) [ mExtremalIndices . get ( k ) ] - mGrid . getCosineFrequencyGrid ( ) [ mExtremalIndices . get ( length ) ] ) ; } }
79837	public static byte [ ] base64decode ( String coded ) { if ( null == coded ) return null ; byte [ ] src = coded . getBytes ( ) ; int len = src . length ; int dlen = len - ( len / _NUM ) ; dlen = ( dlen > > > _NUM ) + ( dlen > > > _NUM ) ; int rem = _NUM ; if ( _NUM == src [ len - _NUM ] ) rem ++ ; if ( _NUM == src [ len - _NUM ] ) rem ++ ; dlen -= rem ; byte [ ] dst = new byte [ dlen ] ; int pos = _NUM ; int dpos = _NUM ; int col = _NUM ; len -= _NUM ; while ( pos < len ) { byte b0 = _base64de [ src [ pos ++ ] ] ; byte b1 = _base64de [ src [ pos ++ ] ] ; byte b2 = _base64de [ src [ pos ++ ] ] ; byte b3 = _base64de [ src [ pos ++ ] ] ; if ( B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3 ) throw new RuntimeException ( _STR + pos ) ; dst [ dpos ++ ] = ( byte ) ( ( b0 << _NUM ) | ( ( b1 > > > _NUM ) & _NUM ) ) ; dst [ dpos ++ ] = ( byte ) ( ( b1 << _NUM ) | ( ( b2 > > > _NUM ) & _NUM ) ) ; dst [ dpos ++ ] = ( byte ) ( ( b2 << _NUM ) | ( b3 & _NUM ) ) ; col += _NUM ; if ( _NUM == col ) { if ( _NUM != src [ pos ++ ] ) throw new RuntimeException ( _STR + ( pos - _NUM ) ) ; col = _NUM ; } } byte b0 = _base64de [ src [ pos ++ ] ] ; byte b1 = _base64de [ src [ pos ++ ] ] ; byte b2 = _base64de [ src [ pos ++ ] ] ; byte b3 = _base64de [ src [ pos ++ ] ] ; if ( B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3 ) throw new RuntimeException ( _STR + pos ) ; dst [ dpos ++ ] = ( byte ) ( ( b0 << _NUM ) | ( ( b1 > > > _NUM ) & _NUM ) ) ; if ( _NUM == rem ) return dst ; dst [ dpos ++ ] = ( byte ) ( ( b1 << _NUM ) | ( ( b2 > > > _NUM ) & _NUM ) ) ; if ( _NUM == rem ) return dst ; dst [ dpos ++ ] = ( byte ) ( ( b2 << _NUM ) | ( b3 & _NUM ) ) ; return dst ; }
70014	private static Properties loadProperties ( String propertiesFile ) { Properties properties = new Properties ( ) ; try ( InputStream is = new FileInputStream ( propertiesFile ) ) { properties . load ( is ) ; } catch ( IOException e ) { throw new RuntimeException ( _STR , e ) ; } return properties ; }
5792	public TextEditor replaceAll ( Pattern pattern , Replacement replacement ) { Matcher m = pattern . matcher ( text ) ; int lastIndex = _NUM ; StringBuilder sb = new StringBuilder ( ) ; while ( m . find ( ) ) { sb . append ( text . subSequence ( lastIndex , m . start ( ) ) ) ; sb . append ( replacement . replacement ( m ) ) ; lastIndex = m . end ( ) ; } sb . append ( text . subSequence ( lastIndex , text . length ( ) ) ) ; text = sb ; return this ; }
22182	public Map < String , Map < String , String > > list ( String serviceName ) { Map < String , Map < String , String > > results = new HashMap < String , Map < String , String > > ( ) ; ServiceInfo [ ] infos = jmdns . list ( _STR + serviceName + _STR ) ; for ( ServiceInfo info : infos ) { _log . info ( _STR , info ) ; final String [ ] hostAddrs = info . getHostAddresses ( ) ; final StringBuffer buf = new StringBuffer ( ) ; for ( String hostAddr : hostAddrs ) { buf . append ( hostAddr ) ; buf . append ( _STR ) ; } final String key = buf . toString ( ) ; _log . info ( _STR , key ) ; final Map < String , String > values = new HashMap < String , String > ( ) ; for ( Enumeration < String > e = info . getPropertyNames ( ) ; e . hasMoreElements ( ) ; ) { final String prop = e . nextElement ( ) ; final String value = new String ( info . getPropertyBytes ( prop ) ) ; _log . info ( _STR , prop , value ) ; values . put ( prop , value ) ; } if ( values . isEmpty ( ) ) { _log . warn ( _STR , key ) ; } results . put ( key , values . isEmpty ( ) ? null : values ) ; } return results ; }
56590	@ SuppressWarnings ( { _STR } ) @ Override default LazyFutureStream < U > concat ( final Stream < ? extends U > other ) { return fromStream ( Stream . concat ( StreamSupport . stream ( Spliterators . spliteratorUnknownSize ( iterator ( ) , Spliterator . ORDERED ) , _BOOL ) , StreamSupport . stream ( Spliterators . spliteratorUnknownSize ( other . iterator ( ) , Spliterator . ORDERED ) , _BOOL ) ) ) ; }
47802	private int moveComponents ( Container target , int x , int y , int width , int height , int rowStart , int rowEnd , boolean ltr , boolean useBaseline , int [ ] ascent , int [ ] descent ) { switch ( newAlign ) { case LEFT : x += ltr ? _NUM : width ; break ; case CENTER : x += width / _NUM ; break ; case RIGHT : x += ltr ? width : _NUM ; break ; case LEADING : break ; case TRAILING : x += width ; break ; } int maxAscent = _NUM ; int nonbaselineHeight = _NUM ; int baselineOffset = _NUM ; if ( useBaseline ) { int maxDescent = _NUM ; for ( int i = rowStart ; i < rowEnd ; i ++ ) { Component m = target . getComponent ( i ) ; if ( m . visible ) { if ( ascent [ i ] >= _NUM ) { maxAscent = Math . max ( maxAscent , ascent [ i ] ) ; maxDescent = Math . max ( maxDescent , descent [ i ] ) ; } else { nonbaselineHeight = Math . max ( m . getHeight ( ) , nonbaselineHeight ) ; } } } height = Math . max ( maxAscent + maxDescent , nonbaselineHeight ) ; baselineOffset = ( height - maxAscent - maxDescent ) / _NUM ; } for ( int i = rowStart ; i < rowEnd ; i ++ ) { Component m = target . getComponent ( i ) ; if ( m . isVisible ( ) ) { int cy ; if ( useBaseline && ascent [ i ] >= _NUM ) { cy = y + baselineOffset + maxAscent - ascent [ i ] ; } else { cy = y + ( height - m . height ) / _NUM ; } if ( ltr ) { m . setLocation ( x , cy ) ; } else { m . setLocation ( target . width - x - m . width , cy ) ; } x += m . width + hgap ; } } return height ; }
32158	@ Override public void readExternal ( ObjectInput in ) throws IOException { path = IgfsUtils . readPath ( in ) ; blockSize = in . readInt ( ) ; grpBlockSize = in . readLong ( ) ; len = in . readLong ( ) ; props = U . readStringMap ( in ) ; accessTime = in . readLong ( ) ; modificationTime = in . readLong ( ) ; flags = in . readByte ( ) ; }
7579	public StandardXYItemLabelGenerator ( ) { this ( DEFAULT_ITEM_LABEL_FORMAT , NumberFormat . getNumberInstance ( ) , NumberFormat . getNumberInstance ( ) ) ; }
42115	public Vector2 ( double direction ) { this . x = Math . cos ( direction ) ; this . y = Math . sin ( direction ) ; }
26289	public static Map < String , Object > convertDocumentFileToFile ( DispatchContext dctx , Map < String , ? extends Object > context ) { XMultiComponentFactory xmulticomponentfactory = null ; String stringUrl = ( String ) context . get ( _STR ) ; String stringConvertedFile = ( String ) context . get ( _STR ) ; String inputMimeType = ( String ) context . get ( _STR ) ; String outputMimeType = ( String ) context . get ( _STR ) ; String oooHost = ( String ) context . get ( _STR ) ; String oooPort = ( String ) context . get ( _STR ) ; try { xmulticomponentfactory = OpenOfficeWorker . getRemoteServer ( oooHost , oooPort ) ; File inputFile = new File ( stringUrl ) ; long fileSize = inputFile . length ( ) ; FileInputStream fis = new FileInputStream ( inputFile ) ; ByteArrayOutputStream baos = new ByteArrayOutputStream ( ( int ) fileSize ) ; int c ; while ( ( c = fis . read ( ) ) != - _NUM ) { baos . write ( c ) ; } OpenOfficeByteArrayInputStream oobais = new OpenOfficeByteArrayInputStream ( baos . toByteArray ( ) ) ; OpenOfficeByteArrayOutputStream oobaos = OpenOfficeWorker . convertOODocByteStreamToByteStream ( xmulticomponentfactory , oobais , inputMimeType , outputMimeType ) ; FileOutputStream fos = new FileOutputStream ( stringConvertedFile ) ; fos . write ( oobaos . toByteArray ( ) ) ; fos . close ( ) ; fis . close ( ) ; oobais . close ( ) ; oobaos . close ( ) ; Map results = ServiceUtil . returnSuccess ( ) ; return results ; } catch ( IOException e ) { Debug . logError ( e , _STR , module ) ; return ServiceUtil . returnError ( e . toString ( ) ) ; } catch ( Exception e ) { Debug . logError ( e , _STR , module ) ; return ServiceUtil . returnError ( e . toString ( ) ) ; } }
7806	public double adjustedPow10 ( double val ) { boolean negFlag = ( val < _NUM ) ; if ( negFlag ) { val = - val ; } double res ; if ( val < _NUM ) { res = ( Math . pow ( _NUM , val + _NUM ) - _NUM ) / _NUM ; } else { res = Math . pow ( _NUM , val ) ; } return negFlag ? ( - res ) : res ; }
62611	@ Override public void clear ( ) { columnList . forEach ( null ) ; }
66071	public boolean isLastInvoice ( ) { String cm = getCostingMethod ( ) ; return cm != null && cm . equals ( COSTINGMETHOD_LastInvoice ) ; }
6004	public static void proxyPort ( final int port ) { final String portValue = Integer . toString ( port ) ; setProperty ( _STR , portValue ) ; setProperty ( _STR , portValue ) ; }
21018	public static String fetchClusterName ( String clusterCgName ) { String clusterName = null ; if ( clusterCgName != null && ! clusterCgName . isEmpty ( ) ) { String [ ] tmp = clusterCgName . split ( SPLITTER ) ; clusterName = tmp [ _NUM ] ; } return clusterName ; }
4516	private void fetchMyServiceCardsFromServer ( ) { RetroCallback retroCallback ; retroCallback = new RetroCallback ( this ) ; retroCallback . setRequestId ( HttpConstants . ApiResponseCodes . GET_MY_SERVICES ) ; retroCallbackList . add ( retroCallback ) ; mYeloApi . getMyServiceCards ( retroCallback ) ; }
9779	public DViewAsymmetricKeyFields ( JDialog parent , String title , RSAPublicKey rsaPublicKey ) { super ( parent , title , Dialog . ModalityType . DOCUMENT_MODAL ) ; key = rsaPublicKey ; initFields ( ) ; }
84625	public List < ColourChange > sampleConditionalMigrationEvents2 ( int parentColour , double parentHeight , int childColour , double childHeight , double [ ] m ) { List < ColourChange > colourChanges = new ArrayList < ColourChange > ( ) ; if ( parentHeight < childHeight ) { throw new IllegalArgumentException ( _STR + parentHeight + _STR + childHeight + _STR ) ; } try { int currentColour = parentColour ; double currentHeight = parentHeight ; while ( _BOOL ) { ColourChange nextEvent = randomConditionalMigrationEvent ( currentColour , currentHeight , childColour , childHeight , m ) ; currentHeight = nextEvent . getTime ( ) ; currentColour = nextEvent . getColourAbove ( ) ; colourChanges . add ( nextEvent ) ; } } catch ( NoEventException nee ) { } reverseColourChangeList ( colourChanges , parentColour ) ; return colourChanges ; }
20293	public static boolean isAttribute ( Object objValue ) { if ( objValue instanceof String ) { String stringValue = ( String ) objValue ; if ( stringValue . startsWith ( ATTRIBUTE_START ) && stringValue . endsWith ( ATTRIBUTE_END ) ) { return _BOOL ; } } return _BOOL ; }
27366	public static String decodeASCII ( final byte [ ] key , final int off , final int len ) { final byte [ ] b = new byte [ len ] ; System . arraycopy ( key , off , b , _NUM , len ) ; for ( int i = _NUM ; i < len ; i ++ ) { b [ i ] = decodeByte ( b [ i ] ) ; } try { return new String ( b , _STR ) ; } catch ( UnsupportedEncodingException e ) { throw new RuntimeException ( e ) ; } }
36604	@ Override public void valueChanged ( TreeSelectionEvent e ) { if ( preventEvent ) { return ; } if ( mainFrame != null ) { List < Operator > selectedOperators = getSelectedOperators ( ) ; if ( selectedOperators != null && ! selectedOperators . isEmpty ( ) ) { mainFrame . selectOperators ( selectedOperators ) ; } } }
22677	public synchronized void removePropertyChangeListener ( PropertyChangeListener listener ) { listeners . remove ( listener ) ; }
57575	final boolean transferAfterCancelledWait ( Node node ) { if ( compareAndSetWaitStatus ( node , Node . CONDITION , _NUM ) ) { enq ( node ) ; return _BOOL ; } while ( ! isOnSyncQueue ( node ) ) Thread . yield ( ) ; return _BOOL ; }
4494	private static Intent createShareIntent ( Context context , final String shareText ) { final Intent shareIntent = new Intent ( Intent . ACTION_SEND ) ; shareIntent . putExtra ( android . content . Intent . EXTRA_SUBJECT , context . getString ( R . string . share_subject ) ) ; shareIntent . putExtra ( android . content . Intent . EXTRA_TEXT , shareText ) ; shareIntent . setType ( _STR ) ; return shareIntent ; }
30642	public static < U > AtomicIntegerFieldUpdater < U > newUpdater ( Class < U > tclass , String fieldName ) { if ( UnsafeHolder . isAvailable ( ) ) { return new AtomicIntegerFieldUpdaterImpl < U > ( tclass , fieldName ) ; } return AtomicIntegerFieldUpdater . newUpdater ( tclass , fieldName ) ; }
72527	private boolean tryStep ( final double t0 , final double [ ] y0 , final double step , final int k , final double [ ] scale , final double [ ] [ ] f , final double [ ] yMiddle , final double [ ] yEnd ) throws MathIllegalArgumentException , MathIllegalStateException { final int n = sequence [ k ] ; final double subStep = step / n ; final double subStep2 = _NUM * subStep ; double t = t0 + subStep ; for ( int i = _NUM ; i < y0 . length ; ++ i ) { yEnd [ i ] = y0 [ i ] + subStep * f [ _NUM ] [ i ] ; } f [ _NUM ] = computeDerivatives ( t , yEnd ) ; final double [ ] yTmp = y0 . clone ( ) ; for ( int j = _NUM ; j < n ; ++ j ) { if ( _NUM * j == n ) { System . arraycopy ( yEnd , _NUM , yMiddle , _NUM , y0 . length ) ; } t += subStep ; for ( int i = _NUM ; i < y0 . length ; ++ i ) { final double middle = yEnd [ i ] ; yEnd [ i ] = yTmp [ i ] + subStep2 * f [ j ] [ i ] ; yTmp [ i ] = middle ; } f [ j + _NUM ] = computeDerivatives ( t , yEnd ) ; if ( performTest && ( j <= maxChecks ) && ( k < maxIter ) ) { double initialNorm = _NUM ; for ( int l = _NUM ; l < scale . length ; ++ l ) { final double ratio = f [ _NUM ] [ l ] / scale [ l ] ; initialNorm += ratio * ratio ; } double deltaNorm = _NUM ; for ( int l = _NUM ; l < scale . length ; ++ l ) { final double ratio = ( f [ j + _NUM ] [ l ] - f [ _NUM ] [ l ] ) / scale [ l ] ; deltaNorm += ratio * ratio ; } if ( deltaNorm > _NUM * FastMath . max ( _NUM , initialNorm ) ) { return _BOOL ; } } } for ( int i = _NUM ; i < y0 . length ; ++ i ) { yEnd [ i ] = _NUM * ( yTmp [ i ] + yEnd [ i ] + subStep * f [ n ] [ i ] ) ; } return _BOOL ; }
75177	public Map < String , Object > convertDataToObjects ( Map < String , String > data ) { Map < String , Object > results = new HashMap < > ( ) ; if ( data != null ) { for ( String key : data . keySet ( ) ) { results . put ( key , data . get ( key ) ) ; } } return results ; }
37365	private static Pair < String , String > offsetLSR ( final long offset , final ITranslationEnvironment environment , final List < ReilInstruction > instructions , final String registerNodeValue1 , final String registerNodeValue2 , final String immediateNodeValue ) { final String address = environment . getNextVariableString ( ) ; final String tmpVar1 = environment . getNextVariableString ( ) ; final String tmpVar2 = environment . getNextVariableString ( ) ; final String index = environment . getNextVariableString ( ) ; long baseOffset = offset ; instructions . add ( ReilHelpers . createBsh ( baseOffset ++ , dw , registerNodeValue2 , dw , _STR + immediateNodeValue , qw , tmpVar1 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , qw , tmpVar1 , dw , dWordBitMask , dw , index ) ) ; instructions . add ( ReilHelpers . createAdd ( baseOffset ++ , dw , registerNodeValue1 , dw , index , dw , tmpVar2 ) ) ; instructions . add ( ReilHelpers . createAnd ( baseOffset ++ , dw , tmpVar2 , dw , dWordBitMask , dw , address ) ) ; return new Pair < String , String > ( address , registerNodeValue1 ) ; }
7165	public static RowLimitSpec buildRowLimitSpec ( EsperEPL2GrammarParser . RowLimitContext ctx ) { Object numRows ; Object offset ; if ( ctx . o != null ) { numRows = parseNumOrVariableIdent ( ctx . n1 , ctx . i1 ) ; offset = parseNumOrVariableIdent ( ctx . n2 , ctx . i2 ) ; } else if ( ctx . c != null ) { offset = parseNumOrVariableIdent ( ctx . n1 , ctx . i1 ) ; numRows = parseNumOrVariableIdent ( ctx . n2 , ctx . i2 ) ; } else { numRows = parseNumOrVariableIdent ( ctx . n1 , ctx . i1 ) ; offset = null ; } Integer numRowsInt = null ; String numRowsVariable = null ; if ( numRows instanceof String ) { numRowsVariable = ( String ) numRows ; } else { numRowsInt = ( Integer ) numRows ; } Integer offsetInt = null ; String offsetVariable = null ; if ( offset instanceof String ) { offsetVariable = ( String ) offset ; } else { offsetInt = ( Integer ) offset ; } return new RowLimitSpec ( numRowsInt , offsetInt , numRowsVariable , offsetVariable ) ; }
4945	public final int first_common_layer ( BrdItem p_other ) { int max_first_layer = Math . max ( first_layer ( ) , p_other . first_layer ( ) ) ; int min_last_layer = Math . min ( last_layer ( ) , p_other . last_layer ( ) ) ; if ( max_first_layer > min_last_layer ) { return - _NUM ; } return max_first_layer ; }
62169	public ItemStack removeItems ( ItemStack drive , ItemStack stack , int amountWanted ) { if ( getMaxKilobits ( drive ) == - _NUM ) return null ; int stored = getAmountStored ( drive , stack ) ; int amountGiven = Math . min ( amountWanted , stored ) ; if ( amountGiven > _NUM ) { setAmountStored ( drive , stack , stored - amountGiven ) ; stack . stackSize += amountGiven ; markDirty ( drive ) ; } return stack ; }
33089	public void saveIndexes ( ) { ArrayList toSave = new ArrayList ( ) ; synchronized ( this ) { Object [ ] valueTable = this . indexes . valueTable ; for ( int i = _NUM , l = valueTable . length ; i < l ; i ++ ) { Index index = ( Index ) valueTable [ i ] ; if ( index != null ) toSave . add ( index ) ; } } boolean allSaved = _BOOL ; for ( int i = _NUM , length = toSave . size ( ) ; i < length ; i ++ ) { Index index = ( Index ) toSave . get ( i ) ; ReadWriteMonitor monitor = index . monitor ; if ( monitor == null ) continue ; try { monitor . enterRead ( ) ; if ( index . hasChanged ( ) ) { if ( monitor . exitReadEnterWrite ( ) ) { try { saveIndex ( index ) ; } catch ( IOException e ) { if ( JobManager . VERBOSE ) { Util . verbose ( _STR , System . err ) ; e . printStackTrace ( ) ; } allSaved = _BOOL ; } finally { monitor . exitWriteEnterRead ( ) ; } } else { allSaved = _BOOL ; } } } finally { monitor . exitRead ( ) ; } } if ( this . participantsContainers != null && this . participantUpdated ) { writeParticipantsIndexNamesFile ( ) ; this . participantUpdated = _BOOL ; } this . needToSave = ! allSaved ; }
70066	public void addItem ( Artist artist , int position ) { if ( artist == null ) throw new NullPointerException ( _STR ) ; if ( position < getItemCount ( ) || position > getItemCount ( ) ) throw new IllegalArgumentException ( _STR ) ; artists . add ( position , artist ) ; notifyItemInserted ( position ) ; }
18450	public Process executeAsync ( final CommandLine command , Map < String , String > environment ) throws IOException { if ( workingDirectory != null && ! workingDirectory . exists ( ) ) { throw new IOException ( workingDirectory + _STR ) ; } return executeInternal ( command , environment , workingDirectory , streamHandler , null ) ; }
36040	public void expandAndSelectIfExists ( RepositoryLocation location ) { if ( location . parent ( ) != null ) { expandIfExists ( location . parent ( ) , location . getName ( ) ) ; } else { expandIfExists ( location , null ) ; } scrollPathToVisible ( getSelectionPath ( ) ) ; }
33770	public void nextToken ( ) { previousLine = line ; previousColumn = column ; while ( pos < matcher . regionStart ( ) ) { if ( text . charAt ( pos ) == _STR ) { ++ line ; column = _NUM ; } else { ++ column ; } ++ pos ; } if ( matcher . regionStart ( ) == matcher . regionEnd ( ) ) { currentToken = _STR ; } else { matcher . usePattern ( TOKEN ) ; if ( matcher . lookingAt ( ) ) { currentToken = matcher . group ( ) ; matcher . region ( matcher . end ( ) , matcher . regionEnd ( ) ) ; } else { currentToken = String . valueOf ( text . charAt ( pos ) ) ; matcher . region ( pos + _NUM , matcher . regionEnd ( ) ) ; } skipWhitespace ( ) ; } }
23236	public static void saveProvisioningValidity ( Context context , long validity ) { if ( validity <= _NUM ) { return ; } long next = System . currentTimeMillis ( ) + validity ; SharedPreferences preferences = context . getSharedPreferences ( AndroidRegistryFactory . RCS_PREFS_NAME , Activity . MODE_PRIVATE ) ; SharedPreferences . Editor editor = preferences . edit ( ) ; editor . putLong ( REGISTRY_PROVISIONING_VALIDITY , validity ) ; editor . putLong ( REGISTRY_PROVISIONING_EXPIRATION , next ) ; editor . commit ( ) ; }
48200	public void encode ( OutputStream out ) throws IOException { DerOutputStream tmp = new DerOutputStream ( ) ; if ( this . extensionValue == null ) { this . extensionId = PKIXExtensions . ReasonCode_Id ; this . critical = _BOOL ; encodeThis ( ) ; } super . encode ( tmp ) ; out . write ( tmp . toByteArray ( ) ) ; }
22530	public DriverTask unexportVolumesFromInitiators ( List < Initiator > initiators , List < StorageVolume > volumes ) { LOG . info ( _STR ) ; DriverTask task = new DellSCDriverTask ( _STR ) ; ScServer server = null ; StringBuilder errBuffer = new StringBuilder ( ) ; int volumesUnmapped = _NUM ; for ( StorageVolume volume : volumes ) { String ssn = volume . getStorageSystemId ( ) ; boolean isSnapshot = StringUtils . countMatches ( volume . getNativeId ( ) , _STR ) == _NUM ; try { StorageCenterAPI api = connectionManager . getConnection ( ssn ) ; ScVolume scVol = null ; if ( isSnapshot ) { scVol = api . findReplayView ( volume . getNativeId ( ) ) ; if ( scVol != null ) { api . deleteVolume ( scVol . instanceId ) ; volumesUnmapped ++ ; continue ; } } else { scVol = api . getVolume ( volume . getNativeId ( ) ) ; } if ( scVol == null ) { throw new DellSCDriverException ( String . format ( _STR , volume . getNativeId ( ) ) ) ; } if ( server == null ) { server = findScServer ( api , ssn , initiators ) ; } if ( server == null ) { throw new DellSCDriverException ( SERVER_CREATE_FAIL_MSG ) ; } ScMappingProfile [ ] mappingProfiles = api . findMappingProfiles ( server . instanceId , scVol . instanceId ) ; for ( ScMappingProfile mappingProfile : mappingProfiles ) { api . deleteMappingProfile ( mappingProfile . instanceId ) ; } volumesUnmapped ++ ; LOG . info ( _STR , scVol . name , server . name ) ; } catch ( StorageCenterAPIException | DellSCDriverException dex ) { String error = String . format ( _STR , volume . getDisplayName ( ) , dex ) ; LOG . error ( error ) ; errBuffer . append ( String . format ( _STR , error ) ) ; if ( SERVER_CREATE_FAIL_MSG . equals ( dex . getMessage ( ) ) ) { break ; } } } task . setMessage ( errBuffer . toString ( ) ) ; if ( volumesUnmapped == volumes . size ( ) ) { task . setStatus ( TaskStatus . READY ) ; } else if ( volumesUnmapped == _NUM ) { task . setStatus ( TaskStatus . FAILED ) ; } else { task . setStatus ( TaskStatus . PARTIALLY_FAILED ) ; } return task ; }
59914	public void createClusterAsync ( final String projectId , final ClusterCreateSpec clusterCreateSpec , final FutureCallback < Task > responseCallback ) throws IOException { String path = String . format ( _STR , getBasePath ( ) , projectId ) ; createObjectAsync ( path , serializeObjectAsJson ( clusterCreateSpec ) , responseCallback ) ; }
71882	public static DereferenceAliasesPolicy valueOf ( final int intValue ) { if ( intValue < _NUM || intValue >= ELEMENTS . length ) { return null ; } return ELEMENTS [ intValue ] ; }
19292	public void testGetNamedItemNS2 ( ) throws Throwable { Document doc ; NamedNodeMap attributes ; Node element ; Attr attribute ; NodeList elementList ; String attrName ; doc = ( Document ) load ( _STR , builder ) ; elementList = doc . getElementsByTagNameNS ( _STR , _STR ) ; element = elementList . item ( _NUM ) ; attributes = element . getAttributes ( ) ; attribute = ( Attr ) attributes . getNamedItemNS ( _STR , _STR ) ; attrName = attribute . getNodeName ( ) ; assertEquals ( _STR , _STR , attrName ) ; }
51154	public static void writeUnsafe ( PacketOutputStream out , String value , boolean noBackslashEscapes ) throws IOException { byte [ ] bytes = value . getBytes ( _STR ) ; out . writeUnsafe ( QUOTE ) ; writeBytesEscapedUnsafe ( out , bytes , bytes . length , noBackslashEscapes ) ; out . writeUnsafe ( QUOTE ) ; }
49474	public void add ( final SAMRecord read , final int position ) { recordAndOffsets . add ( new RecordAndOffset ( read , position ) ) ; }
224	private Sha256Hash calculateHash ( ) { try { ByteArrayOutputStream bos = new UnsafeByteArrayOutputStream ( HEADER_SIZE ) ; writeHeader ( bos ) ; return new Sha256Hash ( Utils . reverseBytes ( doubleDigest ( bos . toByteArray ( ) ) ) ) ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
13597	private void addPropertyType ( URI p , Resource t ) { OwlProperty prop = getProperty ( p ) ; if ( t . equals ( OWL . TRANSITIVEPROPERTY ) ) { prop . setTransitive ( ) ; } else if ( t . equals ( OWL . SYMMETRICPROPERTY ) ) { prop . setSymmetric ( ) ; } else if ( t . equals ( OWL2 . ASYMMETRICPROPERTY ) ) { prop . setAsymmetric ( ) ; } else if ( t . equals ( OWL . FUNCTIONALPROPERTY ) ) { prop . setFunctional ( ) ; } else if ( t . equals ( OWL . INVERSEFUNCTIONALPROPERTY ) ) { prop . setInverseFunctional ( ) ; } else if ( t . equals ( OWL2 . IRREFLEXIVEPROPERTY ) ) { prop . setIrreflexive ( ) ; } }
43520	public static void equals ( Object object1 , Object object2 ) { checkAssertion ( object1 . equals ( object2 ) , null ) ; }
56967	public static String writeActionsToString ( OFInstructionWriteActions inst , Logger log ) throws Exception { return ActionUtils . actionsToString ( inst . getActions ( ) , log ) ; }
24059	protected void preAddInterruptibly ( Object o ) throws InterruptedException { }
87035	public static String encodeLines ( byte [ ] in , int iOff , int iLen , int lineLen , String lineSeparator ) { int blockLen = ( lineLen * _NUM ) / _NUM ; if ( blockLen <= _NUM ) throw new IllegalArgumentException ( ) ; int lines = ( iLen + blockLen - _NUM ) / blockLen ; int bufLen = ( ( iLen + _NUM ) / _NUM ) * _NUM + lines * lineSeparator . length ( ) ; StringBuilder buf = new StringBuilder ( bufLen ) ; int ip = _NUM ; while ( ip < iLen ) { int l = Math . min ( iLen - ip , blockLen ) ; buf . append ( encode ( in , iOff + ip , l ) ) ; buf . append ( lineSeparator ) ; ip += l ; } return buf . toString ( ) ; }
74643	private ODataFeed readFeedLogPerf ( String query , Map < String , String > params ) throws IOException , ODataException { long delta_time = System . currentTimeMillis ( ) ; ODataFeed feed = client . readFeed ( query , params ) ; log ( Level . DEBUG , _STR + query + _STR + delta_time + _STR ) ; return feed ; }
46243	final int rllong ( DataInputStream dis ) throws IOException { int b1 , b2 , b3 , b4 ; int i = _NUM ; i = dis . readInt ( ) ; b1 = ( i & _NUM ) << _NUM ; b2 = ( i & _NUM ) << _NUM ; b3 = ( i & _NUM ) > > _NUM ; b4 = ( i & _NUM ) > > > _NUM ; i = ( b1 | b2 | b3 | b4 ) ; return i ; }
58820	public void testShiftRight4 ( ) { byte aBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = _NUM ; int number = _NUM ; byte rBytes [ ] = { _NUM , _NUM , - _NUM , _NUM , - _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . shiftRight ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
67000	public Dependencies resolveFromFile ( File file , String className , SootClass sc ) { DexlibWrapper wrapper = cache . get ( file ) ; if ( wrapper == null ) { wrapper = new DexlibWrapper ( file ) ; cache . put ( file , wrapper ) ; wrapper . initialize ( ) ; } Dependencies deps = wrapper . makeSootClass ( sc , className ) ; addSourceFileTag ( sc , _STR + file . getName ( ) ) ; return deps ; }
9864	public static String buildResponseUrl ( String tenant , LogoutState logoutState ) { String retval = null ; LogoutResponse samlResponse = logoutState . generateResponseForTenant ( tenant , logoutState . getMessageSource ( ) , logoutState . getLocale ( ) ) ; if ( samlResponse != null ) { log . info ( _STR + samlResponse . toString ( ) ) ; retval = logoutState . generateResponseUrlForTenant ( samlResponse , tenant ) ; } return retval ; }
82013	public static void assertLabel ( int [ ] path , String text ) { if ( verbose ) { log ( _STR + toString ( path ) + _STR + text + _STR ) ; } Label l = ( Label ) getComponentByPath ( path ) ; assertBool ( l != null , _STR + text ) ; assertBool ( text == l . getText ( ) || text . equals ( l . getText ( ) ) , ( _STR + l . getText ( ) ) + _STR + text ) ; }
53963	private void interpolateResultList ( ArrayList < PathParser . PathDataNode > list ) { if ( list == null || list . size ( ) <= _NUM ) return ; float [ ] [ ] listPenPos = PathNodeUtils . calculatePenPosition ( list ) ; ArrayList < PathParser . PathDataNode > subList = new ArrayList < > ( ) ; int size = list . size ( ) ; PathParser . PathDataNode currentNode = null ; int i = _NUM ; while ( i < size - _NUM ) { currentNode = list . get ( i ) ; if ( ! isInterpolatableCommand ( currentNode . mType ) ) { i ++ ; continue ; } boolean validSequence = _BOOL ; int k = i ; for ( int j = i ; j < size && validSequence ; j ++ ) { if ( currentNode . mType == list . get ( j ) . mType ) { k = j ; if ( ! Arrays . equals ( currentNode . mParams , list . get ( j ) . mParams ) ) break ; } else validSequence = _BOOL ; } if ( k - i > _NUM ) { interpolateSubList ( list . subList ( i , k + _NUM ) ) ; } i ++ ; } }
39348	private void initTokenizer ( StreamTokenizer tokenizer ) { tokenizer . resetSyntax ( ) ; tokenizer . whitespaceChars ( _NUM , ( _STR - _NUM ) ) ; tokenizer . wordChars ( _STR , _STR ) ; tokenizer . whitespaceChars ( _STR , _STR ) ; tokenizer . whitespaceChars ( _STR , _STR ) ; tokenizer . commentChar ( _STR ) ; tokenizer . whitespaceChars ( _STR , _STR ) ; tokenizer . quoteChar ( _STR ) ; tokenizer . quoteChar ( _STR ) ; tokenizer . eolIsSignificant ( _BOOL ) ; }
56987	protected void illegalMessageReceived ( OFMessage m ) { String msg = getSwitchStateMessage ( m , _STR ) ; throw new SwitchStateException ( msg ) ; }
75225	protected void run_ThreadSizeLoop ( ) throws Exception { for ( int i = _NUM ; i <= _NUM ; i += _NUM ) { setNumWorkers ( i ) ; try { Thread . sleep ( _NUM * _NUM ) ; } catch ( InterruptedException e ) { } } }
10954	protected boolean read ( ) { if ( ! nReuseHeader ) { Debug . message ( _STR , _STR ) ; return readHeader ( ) ; } byte [ ] tempData = new byte [ nDataSize - nFieldOffset ] ; int nReadBytes = poModule . read ( tempData , _NUM , tempData . length ) ; System . arraycopy ( pachData , nFieldOffset , tempData , _NUM , tempData . length ) ; if ( nReadBytes != ( int ) ( nDataSize - nFieldOffset ) && nReadBytes == - _NUM ) { return _BOOL ; } else if ( nReadBytes != ( int ) ( nDataSize - nFieldOffset ) ) { Debug . error ( _STR ) ; return _BOOL ; } return _BOOL ; }
25925	@ Override public boolean lock ( ) { try { if ( ! FileFactory . isFileExist ( location , FileFactory . getFileType ( tmpPath ) ) ) { FileFactory . mkdirs ( location , FileFactory . getFileType ( tmpPath ) ) ; } String lockFilePath = location + CarbonCommonConstants . FILE_SEPARATOR + lockFile ; if ( ! FileFactory . isFileExist ( lockFilePath , FileFactory . getFileType ( location ) ) ) { FileFactory . createNewLockFile ( lockFilePath , FileFactory . getFileType ( location ) ) ; } fileOutputStream = new FileOutputStream ( lockFilePath ) ; channel = fileOutputStream . getChannel ( ) ; try { fileLock = channel . tryLock ( ) ; } catch ( OverlappingFileLockException e ) { return _BOOL ; } if ( null != fileLock ) { return _BOOL ; } else { return _BOOL ; } } catch ( IOException e ) { return _BOOL ; } }
22974	public void open ( int port ) throws IOException { connection = new DatagramSocket ( port ) ; connection . setSoTimeout ( timeout ) ; }
37548	public String globalInfo ( ) { return _STR + _STR ; }
49923	public MLResults execute ( Script script ) { ScriptExecutor scriptExecutor = new ScriptExecutor ( sparkMonitoringUtil ) ; scriptExecutor . setExplain ( explain ) ; scriptExecutor . setExplainLevel ( explainLevel ) ; scriptExecutor . setStatistics ( statistics ) ; scriptExecutor . setInit ( scriptHistoryStrings . isEmpty ( ) ) ; return execute ( script , scriptExecutor ) ; }
85529	public void disable ( RichFormatterFeature feature ) { features . remove ( feature ) ; }
86513	public void removeEventListener ( ZWaveEventListener eventListener ) { synchronized ( zwaveEventListeners ) { zwaveEventListeners . remove ( eventListener ) ; } }
67336	private static double pythonTime ( ) { return System . currentTimeMillis ( ) / _NUM ; }
2305	@ SafeVarargs public final void add ( T ... newItems ) { add ( Arrays . asList ( newItems ) ) ; }
85457	public static String quoteIfJavaKeyword ( String name ) { return JVMModuleUtil . quoteIfJavaKeyword ( name ) ; }
64457	public static Recipe fromCursor ( Cursor cursor ) { Recipe recipe = new Recipe ( null ) ; for ( int c = _NUM ; c < cursor . getColumnCount ( ) ; c ++ ) { String columnName = cursor . getColumnName ( c ) ; if ( columnName . equals ( RecipeTable . ID_COLUMN ) ) { recipe . id = cursor . getString ( c ) ; } else if ( columnName . equals ( RecipeTable . TITLE_COLUMN ) ) { recipe . setTitle ( cursor . getString ( c ) ) ; } else if ( columnName . equals ( RecipeTable . DESCRIPTION_COLUMN ) ) { recipe . setDescription ( cursor . getString ( c ) ) ; } else if ( columnName . equals ( RecipeTable . PHOTO_COLUMN ) ) { recipe . setPhoto ( cursor . getString ( c ) ) ; } else if ( columnName . equals ( RecipeTable . PREP_TIME_COLUMN ) ) { recipe . setPrepTime ( cursor . getString ( c ) ) ; } } return recipe ; }
25138	public static void checkState ( boolean expression , @ Nullable Object errorMessage ) { if ( ! expression ) { throw new IllegalStateException ( String . valueOf ( errorMessage ) ) ; } }
5924	private static < T , ID > void addDropTableStatements ( DatabaseType databaseType , TableInfo < T , ID > tableInfo , List < String > statements ) { List < String > statementsBefore = new ArrayList < String > ( ) ; List < String > statementsAfter = new ArrayList < String > ( ) ; for ( FieldType fieldType : tableInfo . getFieldTypes ( ) ) { databaseType . dropColumnArg ( fieldType , statementsBefore , statementsAfter ) ; } StringBuilder sb = new StringBuilder ( _NUM ) ; sb . append ( _STR ) ; databaseType . appendEscapedEntityName ( sb , tableInfo . getTableName ( ) ) ; sb . append ( _STR ) ; statements . addAll ( statementsBefore ) ; statements . add ( sb . toString ( ) ) ; statements . addAll ( statementsAfter ) ; }
27393	public boolean isLocked ( ) { return ! queue . isEmpty ( ) ; }
24808	public long cguest_time ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
62259	private static ClassInfo findOrCreateClass ( String t ) { if ( ! t . endsWith ( _STR ) ) { return ClassInfo . findOrCreateClass ( t ) ; } else { String baseType = t . substring ( _NUM , t . indexOf ( _STR ) ) ; int level = ( t . length ( ) - t . indexOf ( _STR ) ) / _NUM ; String s = _STR ; for ( int i = _NUM ; i < level ; ++ i ) s += _STR ; if ( baseType . equals ( _STR ) ) s += _STR ; else if ( baseType . equals ( _STR ) ) s += _STR ; else s += _STR + baseType + _STR ; return ClassInfo . findOrCreateClass ( s ) ; } }
73917	private void resetNotes ( ) { if ( errorInStatus1 ) { if ( editMode ) { statusText1 . setText ( editStatus1 ) ; } else { statusText1 . setText ( stdStatus1 ) ; } errorInStatus1 = _BOOL ; } resetNotes2 ( ) ; }
25457	@ HLEFunction ( nid = _NUM , version = _NUM ) public int sceRtcSetTick ( TPointer timeAddr , TPointer64 ticksAddr ) { long ticks = ticksAddr . getValue ( ) - rtcMagicOffset ; ScePspDateTime time = ScePspDateTime . fromMicros ( ticks ) ; time . write ( timeAddr ) ; return _NUM ; }
64443	public static void write ( File file , CharSequence data , Charset encoding , boolean append ) throws IOException { String str = data == null ? null : data . toString ( ) ; writeStringToFile ( file , str , encoding , append ) ; }
70520	private void populateNavDrawer ( ) { mNavDrawerItems . clear ( ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_HOME ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_SEPARATOR ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_FOLLOWING ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_SHOTS ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_BUCKETS ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_PROJECTS ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_TEAMS ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_MY_LIKES ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_SEPARATOR_SPECIAL ) ; mNavDrawerItems . add ( NAVDRAWER_ITEM_SETTINGS ) ; createNavDrawerItems ( ) ; }
47958	private BigInteger oddModPow ( BigInteger y , BigInteger z ) { if ( y . equals ( ONE ) ) return this ; if ( signum == _NUM ) return ZERO ; int [ ] base = mag . clone ( ) ; int [ ] exp = y . mag ; int [ ] mod = z . mag ; int modLen = mod . length ; if ( ( modLen & _NUM ) != _NUM ) { int [ ] x = new int [ modLen + _NUM ] ; System . arraycopy ( mod , _NUM , x , _NUM , modLen ) ; mod = x ; modLen ++ ; } int wbits = _NUM ; int ebits = bitLength ( exp , exp . length ) ; if ( ( ebits != _NUM ) || ( exp [ _NUM ] != _NUM ) ) { while ( ebits > bnExpModThreshTable [ wbits ] ) { wbits ++ ; } } int tblmask = _NUM << wbits ; int [ ] [ ] table = new int [ tblmask ] [ ] ; for ( int i = _NUM ; i < tblmask ; i ++ ) table [ i ] = new int [ modLen ] ; long n0 = ( mod [ modLen - _NUM ] & LONG_MASK ) + ( ( mod [ modLen - _NUM ] & LONG_MASK ) << _NUM ) ; long inv = - MutableBigInteger . inverseMod64 ( n0 ) ; int [ ] a = leftShift ( base , base . length , modLen << _NUM ) ; MutableBigInteger q = new MutableBigInteger ( ) , a2 = new MutableBigInteger ( a ) , b2 = new MutableBigInteger ( mod ) ; b2 . normalize ( ) ; MutableBigInteger r = a2 . divide ( b2 , q ) ; table [ _NUM ] = r . toIntArray ( ) ; if ( table [ _NUM ] . length < modLen ) { int offset = modLen - table [ _NUM ] . length ; int [ ] t2 = new int [ modLen ] ; System . arraycopy ( table [ _NUM ] , _NUM , t2 , offset , table [ _NUM ] . length ) ; table [ _NUM ] = t2 ; } int [ ] b = montgomerySquare ( table [ _NUM ] , mod , modLen , inv , null ) ; int [ ] t = Arrays . copyOf ( b , modLen ) ; for ( int i = _NUM ; i < tblmask ; i ++ ) { table [ i ] = montgomeryMultiply ( t , table [ i - _NUM ] , mod , modLen , inv , null ) ; } int bitpos = _NUM << ( ( ebits - _NUM ) & ( _NUM - _NUM ) ) ; int buf = _NUM ; int elen = exp . length ; int eIndex = _NUM ; for ( int i = _NUM ; i <= wbits ; i ++ ) { buf = ( buf << _NUM ) | ( ( ( exp [ eIndex ] & bitpos ) != _NUM ) ? _NUM : _NUM ) ; bitpos >>>= _NUM ; if ( bitpos == _NUM ) { eIndex ++ ; bitpos = _NUM << ( _NUM - _NUM ) ; elen -- ; } } int multpos = ebits ; ebits -- ; boolean isone = _BOOL ; multpos = ebits - wbits ; while ( ( buf & _NUM ) == _NUM ) { buf >>>= _NUM ; multpos ++ ; } int [ ] mult = table [ buf > > > _NUM ] ; buf = _NUM ; if ( multpos == ebits ) isone = _BOOL ; while ( _BOOL ) { ebits -- ; buf <<= _NUM ; if ( elen != _NUM ) { buf |= ( ( exp [ eIndex ] & bitpos ) != _NUM ) ? _NUM : _NUM ; bitpos >>>= _NUM ; if ( bitpos == _NUM ) { eIndex ++ ; bitpos = _NUM << ( _NUM - _NUM ) ; elen -- ; } } if ( ( buf & tblmask ) != _NUM ) { multpos = ebits - wbits ; while ( ( buf & _NUM ) == _NUM ) { buf >>>= _NUM ; multpos ++ ; } mult = table [ buf > > > _NUM ] ; buf = _NUM ; } if ( ebits == multpos ) { if ( isone ) { b = mult . clone ( ) ; isone = _BOOL ; } else { t = b ; a = montgomeryMultiply ( t , mult , mod , modLen , inv , a ) ; t = a ; a = b ; b = t ; } } if ( ebits == _NUM ) break ; if ( ! isone ) { t = b ; a = montgomerySquare ( t , mod , modLen , inv , a ) ; t = a ; a = b ; b = t ; } } int [ ] t2 = new int [ _NUM * modLen ] ; System . arraycopy ( b , _NUM , t2 , modLen , modLen ) ; b = montReduce ( t2 , mod , modLen , ( int ) inv ) ; t2 = Arrays . copyOf ( b , modLen ) ; return new BigInteger ( _NUM , t2 ) ; }
18522	public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childValue ; int childLength ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; childValue = child . getData ( ) ; childLength = childValue . length ( ) ; assertEquals ( _STR , _NUM , childLength ) ; }
60415	public int nextToken ( ) { while ( index < length && Character . isWhitespace ( expr [ index ] ) ) { index ++ ; } tokenVal = null ; if ( index == length ) return TOKEN_END ; int start = index ; char currentChar = expr [ index ] ; char nextChar = ( char ) _NUM ; index ++ ; if ( index < length ) nextChar = expr [ index ] ; switch ( currentChar ) { case _STR : return TOKEN_LBRACE ; case _STR : return TOKEN_RBRACE ; case _STR : return TOKEN_EQ ; case _STR : if ( nextChar == _STR ) { index ++ ; return TOKEN_NOT_EQ ; } return TOKEN_NOT ; case _STR : if ( nextChar == _STR ) { index ++ ; return TOKEN_OR ; } break ; case _STR : if ( nextChar == _STR ) { index ++ ; return TOKEN_AND ; } break ; case _STR : if ( nextChar == _STR ) { index ++ ; return TOKEN_GE ; } return TOKEN_GT ; case _STR : if ( nextChar == _STR ) { index ++ ; return TOKEN_LE ; } return TOKEN_LT ; default : break ; } int end = index ; if ( currentChar == _STR || currentChar == _STR ) { char endChar = currentChar ; boolean escaped = _BOOL ; start ++ ; for ( ; index < length ; index ++ ) { if ( expr [ index ] == _STR && ! escaped ) { escaped = _BOOL ; continue ; } if ( expr [ index ] == endChar && ! escaped ) break ; escaped = _BOOL ; } end = index ; index ++ ; } else if ( currentChar == _STR ) { char endChar = currentChar ; boolean escaped = _BOOL ; for ( ; index < length ; index ++ ) { if ( expr [ index ] == _STR && ! escaped ) { escaped = _BOOL ; continue ; } if ( expr [ index ] == endChar && ! escaped ) break ; escaped = _BOOL ; } end = ++ index ; } else { for ( ; index < length ; index ++ ) { if ( isMetaChar ( expr [ index ] ) ) break ; } end = index ; } this . tokenVal = new String ( expr , start , end - start ) ; return TOKEN_STRING ; }
10142	public static Byte [ ] valuesOf ( byte [ ] array ) { Byte [ ] dest = new Byte [ array . length ] ; for ( int i = _NUM ; i < array . length ; i ++ ) { dest [ i ] = Byte . valueOf ( array [ i ] ) ; } return dest ; }
21098	public void auditCallhome ( OperationTypeEnum auditType , String operationalStatus , String description , Object ... descparams ) { _auditMgr . recordAuditLog ( null , null , EVENT_SERVICE_TYPE , auditType , System . currentTimeMillis ( ) , operationalStatus , description , descparams ) ; }
12815	public static float mean ( float [ ] data , int startIndex , int endIndex ) { float mean = _NUM ; int total = _NUM ; startIndex = Math . max ( startIndex , _NUM ) ; startIndex = Math . min ( startIndex , data . length - _NUM ) ; endIndex = Math . max ( endIndex , _NUM ) ; endIndex = Math . min ( endIndex , data . length - _NUM ) ; if ( startIndex > endIndex ) startIndex = endIndex ; for ( int i = startIndex ; i <= endIndex ; i ++ ) { if ( Float . isNaN ( data [ i ] ) ) throw new IllegalArgumentException ( _STR ) ; mean += data [ i ] ; total ++ ; } mean /= total ; return mean ; }
23275	public static String constructNTPtime ( long date ) { long ntpTime = _NUM ; long startTime = ( date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE ) + ntpTime ; return String . valueOf ( startTime ) ; }
34302	protected MediaType selectMediaType ( ServerWebExchange exchange , List < MediaType > producibleTypes ) { List < MediaType > acceptableTypes = getAcceptableTypes ( exchange ) ; producibleTypes = getProducibleTypes ( exchange , producibleTypes ) ; Set < MediaType > compatibleMediaTypes = new LinkedHashSet < > ( ) ; for ( MediaType acceptable : acceptableTypes ) { for ( MediaType producible : producibleTypes ) { if ( acceptable . isCompatibleWith ( producible ) ) { compatibleMediaTypes . add ( selectMoreSpecificMediaType ( acceptable , producible ) ) ; } } } List < MediaType > result = new ArrayList < > ( compatibleMediaTypes ) ; MediaType . sortBySpecificityAndQuality ( result ) ; for ( MediaType mediaType : compatibleMediaTypes ) { if ( mediaType . isConcrete ( ) ) { return mediaType ; } else if ( mediaType . equals ( MediaType . ALL ) || mediaType . equals ( MEDIA_TYPE_APPLICATION_ALL ) ) { return MediaType . APPLICATION_OCTET_STREAM ; } } return null ; }
46252	public void paintBorder ( Component c , Graphics g , int x , int y , int width , int height ) { if ( ! ( c instanceof JPopupMenu ) ) { return ; } Font origFont = g . getFont ( ) ; Color origColor = g . getColor ( ) ; JPopupMenu popup = ( JPopupMenu ) c ; String title = popup . getLabel ( ) ; if ( title == null ) { return ; } g . setFont ( font ) ; FontMetrics fm = SwingUtilities2 . getFontMetrics ( popup , g , font ) ; int fontHeight = fm . getHeight ( ) ; int descent = fm . getDescent ( ) ; int ascent = fm . getAscent ( ) ; Point textLoc = new Point ( ) ; int stringWidth = SwingUtilities2 . stringWidth ( popup , fm , title ) ; textLoc . y = y + ascent + TEXT_SPACING ; textLoc . x = x + ( ( width - stringWidth ) / _NUM ) ; g . setColor ( background ) ; g . fillRect ( textLoc . x - TEXT_SPACING , textLoc . y - ( fontHeight - descent ) , stringWidth + ( _NUM * TEXT_SPACING ) , fontHeight - descent ) ; g . setColor ( foreground ) ; SwingUtilities2 . drawString ( popup , g , title , textLoc . x , textLoc . y ) ; MotifGraphicsUtils . drawGroove ( g , x , textLoc . y + TEXT_SPACING , width , GROOVE_HEIGHT , shadowColor , highlightColor ) ; g . setFont ( origFont ) ; g . setColor ( origColor ) ; }
10190	public void ensureCapacity ( int mincap ) { if ( mincap > array . length ) { int newcap = ( ( array . length * _NUM ) > > _NUM ) + _NUM ; int [ ] olddata = array ; array = new int [ newcap < mincap ? mincap : newcap ] ; System . arraycopy ( olddata , _NUM , array , _NUM , size ) ; } }
77115	public void invalidateAndUnmap ( ByteBuffer ... bufs ) throws IOException { if ( cleaner != null ) { invalidated = _BOOL ; barrier . lazySet ( _NUM ) ; Thread . yield ( ) ; for ( ByteBuffer b : bufs ) { cleaner . freeBuffer ( resourceDescription , b ) ; } } }
24572	public int addDir ( File file ) { if ( ! file . exists ( ) ) { return _NUM ; } String [ ] names = getNames ( getFiles ( file , _STR ) ) ; loadClass ( file , names ) ; return _NUM ; }
83979	private boolean isMineshafterPresent ( ) { try { Class . forName ( _STR ) ; return _BOOL ; } catch ( Exception e ) { return _BOOL ; } }
7570	@ Override public boolean equals ( Object obj ) { if ( obj == this ) { return _BOOL ; } if ( ! ( obj instanceof BubbleXYItemLabelGenerator ) ) { return _BOOL ; } if ( ! super . equals ( obj ) ) { return _BOOL ; } BubbleXYItemLabelGenerator that = ( BubbleXYItemLabelGenerator ) obj ; if ( ! ObjectUtilities . equal ( this . zFormat , that . zFormat ) ) { return _BOOL ; } if ( ! ObjectUtilities . equal ( this . zDateFormat , that . zDateFormat ) ) { return _BOOL ; } return _BOOL ; }
15270	public static boolean hasElementChild ( Node node ) { NodeList nl = node . getChildNodes ( ) ; Node child = null ; int length = nl . getLength ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { child = nl . item ( i ) ; if ( child . getNodeType ( ) == Node . ELEMENT_NODE ) { return _BOOL ; } } return _BOOL ; }
49208	public void delItem ( int index ) { synchronized ( getMenuTreeLock ( ) ) { if ( selectedIndex == index ) { selectItem ( null , _BOOL ) ; } else if ( selectedIndex > index ) { selectedIndex -- ; } if ( index < items . size ( ) ) { items . remove ( index ) ; } else { if ( log . isLoggable ( PlatformLogger . Level . FINE ) ) { log . fine ( _STR + index + _STR + items . size ( ) ) ; } } } updateSize ( ) ; }
68413	public static int countCSSPrimitiveNames ( ) { return ALL_PRIMITIVE_PROPERTY_NAMES . size ( ) ; }
84175	public void printString ( String v ) throws IOException { printString ( v , _NUM , v . length ( ) ) ; }
56813	private void checkPermission ( Object object , NamespacePermissionEnum [ ] permissions , List < AccessDeniedException > accessDeniedExceptions ) { if ( object != null ) { if ( object instanceof Collection ) { Collection < ? > collection = ( Collection < ? > ) object ; for ( Object element : collection ) { checkPermission ( element , permissions , accessDeniedExceptions ) ; } } else if ( object instanceof String ) { try { checkPermission ( ( String ) object , permissions ) ; } catch ( AccessDeniedException accessDeniedException ) { accessDeniedExceptions . add ( accessDeniedException ) ; } } else { throw new IllegalStateException ( String . format ( _STR , String . class , Collection . class , object . getClass ( ) ) ) ; } } }
99	private void displayAllStringDefinedInStringXml ( ) { SimpleIconFontTextView textView = ( SimpleIconFontTextView ) findViewById ( R . id . text_view_2 ) ; List < String > list = new ArrayList < > ( ) ; list . add ( getString ( R . string . cubeicon_gems_logo ) ) ; list . add ( getString ( R . string . cubeicon_android ) ) ; list . add ( getString ( R . string . cubeicon_heart ) ) ; String text = TextUtils . join ( _STR , list ) ; textView . setText ( text ) ; }
40787	private static Intent createMapActivityIntent ( Context context , URLSpan [ ] urlSpans ) { for ( int span_i = _NUM ; span_i < urlSpans . length ; span_i ++ ) { URLSpan urlSpan = urlSpans [ span_i ] ; String urlString = urlSpan . getURL ( ) ; if ( urlString . startsWith ( GEO_PREFIX ) ) { Intent geoIntent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( urlString ) ) ; geoIntent . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; return geoIntent ; } } return null ; }
30224	private StringBuilder generateParameters ( ) { StringBuilder parameters = new StringBuilder ( ) ; if ( filterMap == null && expandParameters == null ) { return parameters ; } parameters . append ( _STR ) ; int filterParameterCounter = _NUM ; if ( filterMap != null && ! filterMap . isEmpty ( ) ) { parameters . append ( FILTER_PREFIX ) ; for ( Map . Entry < String , String > filterEntry : filterMap . entrySet ( ) ) { parameters . append ( String . format ( _STR , filterEntry . getKey ( ) , filterEntry . getValue ( ) ) ) ; if ( ++ filterParameterCounter < filterMap . size ( ) ) { parameters . append ( _STR ) ; } } if ( expandParameters != null ) { parameters . append ( _STR ) ; } } if ( expandParameters != null ) { parameters . append ( EXPAND_PREFIX ) ; Iterator iterator = expandParameters . iterator ( ) ; parameters . append ( String . format ( _STR , iterator . next ( ) ) ) ; while ( iterator . hasNext ( ) ) { parameters . append ( String . format ( _STR , iterator . next ( ) ) ) ; } } return parameters ; }
77849	public void writeExif ( Bitmap bmap , OutputStream exifOutStream ) throws IOException { if ( bmap == null || exifOutStream == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = getExifWriterStream ( exifOutStream ) ; bmap . compress ( Bitmap . CompressFormat . JPEG , _NUM , s ) ; s . flush ( ) ; }
57424	public void removeAttribute ( int index ) { if ( index >= _NUM && index < length ) { if ( index < length - _NUM ) { System . arraycopy ( data , ( index + _NUM ) * _NUM , data , index * _NUM , ( length - index - _NUM ) * _NUM ) ; } index = ( length - _NUM ) * _NUM ; data [ index ++ ] = null ; data [ index ++ ] = null ; data [ index ++ ] = null ; data [ index ++ ] = null ; data [ index ] = null ; length -- ; } else { badIndex ( index ) ; } }
28973	public static @ CheckForNull @ SlashedClassName String fromFieldSignature ( String signature ) { if ( signature . charAt ( _NUM ) != _STR ) { return null ; } return signature . substring ( _NUM , signature . length ( ) - _NUM ) ; }
53605	private void paintPreview ( int dx , int dy , float zoomfactor ) { if ( image != null ) { Graphics2D g2 = ( Graphics2D ) getGraphics ( ) ; UColor bg = renderer . getBackgroundColor ( ) ; g2 . setBackground ( new Color ( bg . getRed ( ) , bg . getGreen ( ) , bg . getBlue ( ) , bg . getAlpha ( ) ) ) ; int newWidth = Math . round ( image . getWidth ( null ) * zoomfactor ) ; int newHeight = ( int ) Math . round ( image . getHeight ( null ) * zoomfactor ) ; g2 . drawImage ( image , dx , dy , newWidth , newHeight , null ) ; if ( dx > _NUM ) g2 . clearRect ( _NUM , _NUM , dx , getHeight ( ) ) ; else g2 . clearRect ( getWidth ( ) + dx , _NUM , getWidth ( ) , getHeight ( ) ) ; if ( dy > _NUM ) g2 . clearRect ( _NUM , _NUM , getWidth ( ) , dy ) ; else g2 . clearRect ( _NUM , getHeight ( ) + dy , getWidth ( ) , getHeight ( ) ) ; } }
71526	@ RequiresPermission ( Manifest . permission . CAMERA ) public CameraSource start ( ) throws IOException { synchronized ( mCameraLock ) { if ( mCamera != null ) { return this ; } mCamera = createCamera ( ) ; if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . HONEYCOMB ) { mDummySurfaceTexture = new SurfaceTexture ( DUMMY_TEXTURE_NAME ) ; mCamera . setPreviewTexture ( mDummySurfaceTexture ) ; } else { mDummySurfaceView = new SurfaceView ( mContext ) ; mCamera . setPreviewDisplay ( mDummySurfaceView . getHolder ( ) ) ; } mCamera . startPreview ( ) ; mProcessingThread = new Thread ( mFrameProcessor ) ; mFrameProcessor . setActive ( _BOOL ) ; mProcessingThread . start ( ) ; } return this ; }
52581	public synchronized void clear ( ) { mCategories . clear ( ) ; mValues . clear ( ) ; }
62656	public static List < List < Double > > partitionVariable ( List < Double > arr , int chunk ) { int count = _NUM ; List < List < Double > > ret = new ArrayList < List < Double > > ( ) ; while ( count < arr . size ( ) ) { List < Double > sublist = arr . subList ( count , count + chunk ) ; count += chunk ; ret . add ( sublist ) ; } for ( List < Double > lists : ret ) { if ( lists . size ( ) < chunk ) ret . remove ( lists ) ; } return ret ; }
46263	private static void updateWindowUI ( Window window ) { SwingUtilities . updateComponentTreeUI ( window ) ; Window ownedWins [ ] = window . getOwnedWindows ( ) ; for ( Window ownedWin : ownedWins ) { updateWindowUI ( ownedWin ) ; } }
28886	public void clearResults ( ) { if ( resultList != null ) { resultList . clear ( ) ; mAdapter . notifyDataSetChanged ( ) ; } listener . onSearchCleared ( ) ; }
51056	public ArrayList < ConstraintWidget > findWidgets ( WidgetContainer container , int x , int y , int width , int height ) { ArrayList < ConstraintWidget > found = new ArrayList < > ( ) ; Rectangle area = new Rectangle ( x , y , width , height ) ; for ( ConstraintWidget widget : container . getChildren ( ) ) { WidgetCompanion companion = ( WidgetCompanion ) widget . getCompanionWidget ( ) ; WidgetDecorator decorator = companion . getWidgetDecorator ( WidgetDecorator . BLUEPRINT_STYLE ) ; if ( ! decorator . isVisible ( ) ) { continue ; } Rectangle bounds = new Rectangle ( widget . getDrawX ( ) , widget . getDrawY ( ) , widget . getWidth ( ) , widget . getHeight ( ) ) ; if ( area . intersects ( bounds ) ) { found . add ( widget ) ; } } return found ; }
52356	public final void printSymbol ( CharSequence text ) throws IOException { if ( text == null ) { appendAscii ( _STR ) ; } else if ( text . length ( ) == _NUM ) { throw new EmptySymbolException ( ) ; } else if ( symbolNeedsQuoting ( text , _BOOL ) ) { appendAscii ( _STR ) ; printCodePoints ( text , SYMBOL_ESCAPE_CODES ) ; appendAscii ( _STR ) ; } else { appendAscii ( text ) ; } }
79232	public static ShoppingCartItem makeItem ( Integer cartLocation , GenericValue product , BigDecimal selectedAmount , BigDecimal quantity , BigDecimal unitPrice , Timestamp reservStart , BigDecimal reservLength , BigDecimal reservPersons , Timestamp shipBeforeDate , Timestamp shipAfterDate , Map < String , GenericValue > additionalProductFeatureAndAppls , Map < String , Object > attributes , String prodCatalogId , ProductConfigWrapper configWrapper , String itemType , ShoppingCart . ShoppingCartItemGroup itemGroup , LocalDispatcher dispatcher , ShoppingCart cart , Boolean triggerExternalOpsBool , Boolean triggerPriceRulesBool , GenericValue parentProduct , Boolean skipInventoryChecks , Boolean skipProductChecks ) throws CartItemModifyException { return makeItem ( cartLocation , product , selectedAmount , quantity , unitPrice , reservStart , reservLength , reservPersons , null , null , shipBeforeDate , shipAfterDate , additionalProductFeatureAndAppls , attributes , prodCatalogId , configWrapper , itemType , itemGroup , dispatcher , cart , triggerExternalOpsBool , triggerPriceRulesBool , parentProduct , skipInventoryChecks , skipProductChecks ) ; }
61914	@ Override public String toString ( ) { Map < Assignment , Double > sortedTable = InferenceUtils . getNBest ( table , Math . max ( table . size ( ) , _NUM ) ) ; String str = _STR ; for ( Entry < Assignment , Double > entry : sortedTable . entrySet ( ) ) { String prob = StringUtils . getShortForm ( entry . getValue ( ) ) ; str += _STR + entry . getKey ( ) + _STR + prob + _STR ; } return ( str . length ( ) > _NUM ) ? str . substring ( _NUM , str . length ( ) - _NUM ) : str ; }
37031	protected final void updateBorderText ( final String text ) { Preconditions . checkNotNull ( text , _STR ) ; m_titledBorder . setTitle ( text ) ; updateUI ( ) ; }
75538	private void addClasses ( Class < ? > [ ] classes , HashSet < Class < ? > > result , String fieldName ) { if ( classes == null || classes . length == _NUM ) Error . classesAbsent ( fieldName , configuredClass ) ; for ( Class < ? > classe : classes ) result . add ( classe ) ; }
84207	public void resetReferences ( ) { if ( _refs != null ) _refs . clear ( ) ; }
256	public static BigInteger decodeMPI ( byte [ ] mpi , boolean hasLength ) { byte [ ] buf ; if ( hasLength ) { int length = ( int ) readUint32BE ( mpi , _NUM ) ; buf = new byte [ length ] ; System . arraycopy ( mpi , _NUM , buf , _NUM , length ) ; } else buf = mpi ; if ( buf . length == _NUM ) return BigInteger . ZERO ; boolean isNegative = ( buf [ _NUM ] & _NUM ) == _NUM ; if ( isNegative ) buf [ _NUM ] &= _NUM ; BigInteger result = new BigInteger ( buf ) ; return isNegative ? result . negate ( ) : result ; }
13792	public void schemaChanged ( String serviceName , String version ) { synchronized ( mapRealmToFormat ) { mapRealmToFormat . remove ( ROOT ) ; } }
61165	public void sort ( DTMIterator v , Vector keys , XPathContext support ) throws javax . xml . transform . TransformerException { m_keys = keys ; int n = v . getLength ( ) ; Vector nodes = new Vector ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { NodeCompareElem elem = new NodeCompareElem ( v . item ( i ) ) ; nodes . addElement ( elem ) ; } Vector scratchVector = new Vector ( ) ; mergesort ( nodes , scratchVector , _NUM , n - _NUM , support ) ; for ( int i = _NUM ; i < n ; i ++ ) { v . setItem ( ( ( NodeCompareElem ) nodes . elementAt ( i ) ) . m_node , i ) ; } v . setCurrentPos ( _NUM ) ; }
13183	protected DateTimeData parse ( String str ) throws SchemaDateTimeException { DateTimeData date = new DateTimeData ( str , this ) ; int len = str . length ( ) ; date . year = YEAR ; date . day = DAY ; if ( str . charAt ( _NUM ) != _STR || str . charAt ( _NUM ) != _STR ) { throw new SchemaDateTimeException ( _STR + str ) ; } int stop = _NUM ; date . month = parseInt ( str , _NUM , stop ) ; if ( str . length ( ) >= stop + _NUM && str . charAt ( stop ) == _STR && str . charAt ( stop + _NUM ) == _STR ) { stop += _NUM ; } if ( stop < len ) { if ( ! isNextCharUTCSign ( str , stop , len ) ) { throw new SchemaDateTimeException ( _STR + str ) ; } else { getTimeZone ( str , date , stop , len ) ; } } validateDateTime ( date ) ; saveUnnormalized ( date ) ; if ( date . utc != _NUM && date . utc != _STR ) { normalize ( date ) ; } date . position = _NUM ; return date ; }
86507	private void addToQueue ( SerialMessage serialMessage ) { if ( serialMessage == null ) { return ; } if ( ! msgQueue . contains ( serialMessage ) && msgQueue . remainingCapacity ( ) > _NUM ) { msgQueue . add ( serialMessage ) ; } sendMessage ( ) ; }
52971	private DBID stringToDBID ( String query ) { return DBIDUtil . importInteger ( Integer . valueOf ( query ) ) ; }
12804	@ Override public final void writeShort ( int v ) throws IOException { work [ _NUM ] = ( byte ) v ; work [ _NUM ] = ( byte ) ( v > > _NUM ) ; dis . write ( work , _NUM , _NUM ) ; }
3659	final public void println ( long v ) { Writer out = this . out ; if ( out == null ) return ; print ( v ) ; try { out . write ( _newline , _NUM , _newline . length ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } }
29710	public ThriftServiceMetadata ( Class < ? > serviceType ) { requireNonNull ( serviceType , _STR ) ; interfaces = init ( null , Collections . singleton ( serviceType ) ) ; }
48832	public WritableRaster createCompatibleWritableRaster ( int w , int h ) { if ( w <= _NUM || h <= _NUM ) { throw new RasterFormatException ( _STR + ( ( w <= _NUM ) ? _STR : _STR ) ) ; } SampleModel sm = sampleModel . createCompatibleSampleModel ( w , h ) ; return new BytePackedRaster ( sm , new Point ( _NUM , _NUM ) ) ; }
59932	public static Response invalidEntity ( ConstraintViolationException e ) { StringBuilder errorMessage = new StringBuilder ( ) ; boolean firstPass = _BOOL ; for ( ConstraintViolation error : e . getConstraintViolations ( ) ) { if ( ! firstPass ) { errorMessage . append ( _STR ) ; } errorMessage . append ( String . format ( _STR , error . getPropertyPath ( ) , error . getMessage ( ) , error . getInvalidValue ( ) ) ) ; firstPass = _BOOL ; } ExternalException externalException = new ExternalException ( ErrorCode . INVALID_ENTITY , errorMessage . toString ( ) , null ) ; return externalException ( externalException ) ; }
74146	public String checkStartBlock ( int mode ) { if ( log . isDebugEnabled ( ) ) log . debug ( _STR + getDisplayName ( ) + _STR ) ; BlockOrder bo = _orders . get ( _NUM ) ; OBlock block = bo . getBlock ( ) ; String msg = block . allocate ( this ) ; if ( msg != null ) { return msg ; } msg = bo . setPath ( this ) ; if ( msg != null ) { return msg ; } int state = block . getState ( ) ; if ( ( state & OBlock . DARK ) != _NUM || _tempRunBlind ) { msg = Bundle . getMessage ( _STR , block . getDisplayName ( ) ) ; } else if ( ( state & OBlock . OCCUPIED ) == _NUM ) { if ( mode == MODE_LEARN ) { msg = _STR ; } else { msg = _STR ; } msg = Bundle . getMessage ( msg , getTrainName ( ) , block . getDisplayName ( ) ) ; } else { TrackerTableAction . stopTrackerIn ( block ) ; } return msg ; }
67509	private void parseSwitch ( int indent , boolean firstContent , String header , Layout layout , List < Elem > elems ) { TokenStream tokens = new TokenStream ( header ) ; Elem selector = parseExpr ( tokens ) ; tokens . checkAtEnd ( ) ; ImmutableList . Builder < Case > cases = ImmutableList . builder ( ) ; List < Elem > defaultElems = null ; boolean done ; String line = getNextLine ( ) ; Matcher matcher = COMMAND_LINE . matcher ( line ) ; String command ; String rest ; if ( matcher . find ( ) ) { command = matcher . group ( COMMAND_NAME_GROUP ) ; rest = line . substring ( matcher . end ( ) ) ; done = _BOOL ; } else { error ( _STR ) ; done = _BOOL ; command = null ; rest = null ; } while ( ! done ) { switch ( command ) { case END_COMMAND : checkHeaderEmpty ( command , rest ) ; done = _BOOL ; break ; case DEFAULT_COMMAND : checkHeaderEmpty ( command , rest ) ; if ( defaultElems != null ) { error ( _STR ) ; } defaultElems = parseUntil ( indent , layout , END_COMMAND ) ; command = lastTerminator ; rest = lastTerminatorHeader ; done = lastTerminator == null ; break ; case CASE_COMMAND : tokens = new TokenStream ( rest ) ; Elem value = parseExpr ( tokens ) ; tokens . checkAtEnd ( ) ; List < Elem > caseElems = parseUntil ( indent , layout , END_COMMAND , CASE_COMMAND , DEFAULT_COMMAND ) ; if ( value != null ) { cases . add ( Case . create ( value , caseElems ) ) ; } command = lastTerminator ; rest = lastTerminatorHeader ; done = lastTerminator == null ; break ; default : unexpectedCommandError ( command ) ; done = _BOOL ; break ; } } if ( selector != null ) { elems . add ( Block . create ( ! firstContent , Switch . create ( input . location ( ) , selector , cases . build ( ) , defaultElems ) ) ) ; } }
10899	public void init ( String prefix , java . net . URL url ) { try { java . io . InputStream in = url . openStream ( ) ; Properties props = new Properties ( ) ; props . load ( in ) ; init ( getLayers ( prefix , props ) ) ; } catch ( java . net . MalformedURLException murle ) { logger . warning ( _STR + url + _STR ) ; } catch ( java . io . IOException e ) { logger . warning ( _STR ) ; } }
55828	boolean suppressedBy ( DNSIncoming msg ) { try { for ( DNSRecord answer : msg . getAllAnswers ( ) ) { if ( suppressedBy ( answer ) ) { return _BOOL ; } } return _BOOL ; } catch ( ArrayIndexOutOfBoundsException e ) { logger . log ( Level . WARNING , _STR + msg + _STR , e ) ; return _BOOL ; } }
23606	public static Properties createProperties ( final Map < String , String > map ) { Properties properties = new Properties ( ) ; if ( ! ( map == null || map . isEmpty ( ) ) ) { for ( Entry < String , String > entry : map . entrySet ( ) ) { properties . setProperty ( entry . getKey ( ) , entry . getValue ( ) ) ; } } return properties ; }
10119	public Node selectFirst ( String query ) { List < Node > selectedNodes = select ( query ) ; if ( selectedNodes . isEmpty ( ) ) { return null ; } return selectedNodes . get ( _NUM ) ; }
11057	public static String [ ] stringArrayFromProperties ( Properties p , String propName , String tok ) { String [ ] ret = null ; String raw = p . getProperty ( propName ) ; if ( raw != null && raw . length ( ) > _NUM ) { try { StringTokenizer token = new StringTokenizer ( raw , tok ) ; int numPaths = token . countTokens ( ) ; ret = new String [ numPaths ] ; for ( int i = _NUM ; i < numPaths ; i ++ ) { ret [ i ] = token . nextToken ( ) ; } return ret ; } catch ( java . util . NoSuchElementException e ) { e . printStackTrace ( ) ; } } return ret ; }
11167	public void generate ( int x1 , int y1 , int x2 , int y2 ) { Point midPoint = new Point ( ) ; Point arcCenter = new Point ( ) ; Point2D peakPoint = new Point2D . Float ( ) ; double distance = Math . sqrt ( Math . pow ( Math . abs ( y2 - y1 ) , _NUM ) + Math . pow ( Math . abs ( x2 - x1 ) , _NUM ) ) ; double straightLineSlope = Math . atan ( ( double ) ( y2 - y1 ) / ( double ) ( x2 - x1 ) ) ; double inverseSlope = straightLineSlope - ( Math . PI / _NUM ) ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + Math . toDegrees ( straightLineSlope ) + _STR + distance + _STR ) ; } midPoint . setLocation ( x1 + ( ( x2 - x1 ) / _NUM ) , y1 + ( ( y2 - y1 ) / _NUM ) ) ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + x1 + _STR + y1 + _STR + x2 + _STR + y2 + _STR + midPoint . x + _STR + midPoint . y + _STR ) ; } double arccos = Math . cos ( arcAngle ) ; double arcRadius ; if ( arccos != _NUM ) { arcRadius = distance / Math . sqrt ( _NUM * ( _NUM - Math . cos ( arcAngle ) ) ) ; } else { arcRadius = distance / Math . sqrt ( _NUM ) ; } if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + arcRadius ) ; } double x = arcRadius - arcRadius * Math . cos ( arcAngle ) ; double rPrime = ( distance / _NUM ) * ( Math . sqrt ( _NUM - Math . pow ( x / distance , _NUM ) ) ) / Math . sin ( arcAngle / _NUM ) ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + rPrime ) ; } int direction = _NUM ; if ( arcUp ) direction = - _NUM ; arcCenter . x = midPoint . x + ( direction * ( int ) ( rPrime * Math . cos ( inverseSlope ) ) ) ; arcCenter . y = midPoint . y + ( direction * ( int ) ( rPrime * Math . sin ( inverseSlope ) ) ) ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR ) ; arcGraphics = new OMGraphicList ( ) ; double dist1 = Math . sqrt ( Math . pow ( ( double ) ( arcCenter . x - x1 ) , _NUM ) + Math . pow ( ( double ) ( arcCenter . y - y1 ) , _NUM ) ) ; double dist2 = Math . sqrt ( Math . pow ( ( double ) ( arcCenter . x - x2 ) , _NUM ) + Math . pow ( ( double ) ( arcCenter . y - y2 ) , _NUM ) ) ; Debug . output ( _STR + arcCenter . x + _STR + arcCenter . y + _STR + Math . toDegrees ( inverseSlope ) + _STR ) ; Debug . output ( _STR + dist1 + _STR + dist2 ) ; OMRect point1 = new OMRect ( x1 - _NUM , y1 - _NUM , x1 + _NUM , y1 + _NUM ) ; OMRect point2 = new OMRect ( x2 - _NUM , y2 - _NUM , x2 + _NUM , y2 + _NUM ) ; OMRect arcPoint = new OMRect ( arcCenter . x - _NUM , arcCenter . y - _NUM , arcCenter . x + _NUM , arcCenter . y + _NUM ) ; point1 . setLinePaint ( OMColor . red ) ; point2 . setLinePaint ( OMColor . red ) ; arcPoint . setLinePaint ( OMColor . blue ) ; arcGraphics . add ( point1 ) ; arcGraphics . add ( point2 ) ; arcGraphics . add ( arcPoint ) ; OMLine line1 = new OMLine ( x1 , y1 , x2 , y2 ) ; OMLine line2 = new OMLine ( midPoint . x , midPoint . y , arcCenter . x , arcCenter . y ) ; arcGraphics . add ( line1 ) ; arcGraphics . add ( line2 ) ; } int realCount = _NUM ; double startSlope = getRealAngle ( ( float ) arcCenter . getX ( ) , ( float ) arcCenter . getY ( ) , x1 , y1 ) ; double endSlope = getRealAngle ( ( float ) arcCenter . getX ( ) , ( float ) arcCenter . getY ( ) , x2 , y2 ) ; double smallSlope , largeSlope ; double angleIncrement ; smallSlope = ( startSlope > endSlope ) ? endSlope : startSlope ; largeSlope = ( smallSlope == startSlope ) ? endSlope : startSlope ; while ( Math . abs ( smallSlope - largeSlope ) > Math . PI ) { if ( Math . abs ( largeSlope - smallSlope - Math . PI ) < _NUM ) { break ; } Debug . message ( _STR , _STR ) ; double tmpSlope = smallSlope + MoreMath . TWO_PI ; smallSlope = largeSlope ; largeSlope = tmpSlope ; } if ( MoreMath . approximately_equal ( arcAngle , Math . PI ) && arcUp ) { Debug . message ( _STR , _STR ) ; double tmpSlope = smallSlope + MoreMath . TWO_PI ; smallSlope = largeSlope ; largeSlope = tmpSlope ; } if ( Math . abs ( y2 - y1 ) < Math . abs ( x2 - x1 ) ) { angleIncrement = Math . PI / Math . abs ( x2 - x1 ) ; } else { angleIncrement = Math . PI / Math . abs ( y2 - y1 ) ; } int numPoints = ( int ) ( Math . abs ( smallSlope - largeSlope ) / angleIncrement + _NUM ) ; float [ ] xPoints = new float [ numPoints ] ; float [ ] yPoints = new float [ numPoints ] ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + startSlope + _STR + Math . toDegrees ( startSlope ) + _STR + endSlope + _STR + Math . toDegrees ( endSlope ) + _STR ) ; Debug . output ( _STR + smallSlope + _STR + Math . toDegrees ( smallSlope ) + _STR + largeSlope + _STR + Math . toDegrees ( largeSlope ) + _STR + angleIncrement + _STR + Math . toDegrees ( angleIncrement ) + _STR ) ; } reversed = _BOOL ; while ( smallSlope < largeSlope && realCount < numPoints ) { xPoints [ realCount ] = arcCenter . x + ( int ) ( arcRadius * Math . cos ( smallSlope ) ) ; yPoints [ realCount ] = arcCenter . y + ( int ) ( arcRadius * Math . sin ( smallSlope ) ) ; if ( realCount == _NUM && xPoints [ realCount ] == x2 ) { Debug . message ( _STR , _STR ) ; reversed = _BOOL ; } if ( Debug . debugging ( _STR ) && realCount == _NUM ) { OMLine startLine = new OMLine ( arcCenter . x , arcCenter . y , ( int ) xPoints [ _NUM ] , ( int ) yPoints [ _NUM ] ) ; startLine . setLinePaint ( OMColor . white ) ; arcGraphics . add ( startLine ) ; } else if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + smallSlope + _STR + smallSlope * _NUM / Math . PI + _STR + xPoints [ realCount ] + _STR + yPoints [ realCount ] ) ; } if ( Math . abs ( largeSlope - smallSlope - ( arcAngle / _NUM ) ) < angleIncrement ) { peakPoint . setLocation ( xPoints [ realCount ] , yPoints [ realCount ] ) ; Debug . message ( _STR , _STR ) ; } smallSlope += angleIncrement ; realCount ++ ; } xpoints = new float [ realCount ] ; ypoints = new float [ realCount ] ; System . arraycopy ( xPoints , _NUM , xpoints , _NUM , realCount ) ; System . arraycopy ( yPoints , _NUM , ypoints , _NUM , realCount ) ; }
86420	private static int compareLocales ( Locale primary , Locale other ) { final String lang = primary . getLanguage ( ) ; if ( ( lang == null ) || ! lang . equals ( other . getLanguage ( ) ) ) { return _NUM ; } final String country = primary . getCountry ( ) ; if ( ( country == null ) || ! country . equals ( other . getCountry ( ) ) ) { return _NUM ; } final String variant = primary . getVariant ( ) ; if ( ( variant == null ) || ! variant . equals ( other . getVariant ( ) ) ) { return _NUM ; } return _NUM ; }
63548	void queryReadResult ( PreparedStatement prep ) throws SQLException { ResultSet rs = prep . executeQuery ( ) ; ResultSetMetaData meta = rs . getMetaData ( ) ; int columnCount = meta . getColumnCount ( ) ; while ( rs . next ( ) ) { for ( int i = _NUM ; i < columnCount ; i ++ ) { rs . getString ( i + _NUM ) ; } } }
67167	public static < V > boolean addDistinctEntry ( List < V > sourceList , V entry ) { return ( sourceList != null && ! sourceList . contains ( entry ) ) ? sourceList . add ( entry ) : _BOOL ; }
66252	public boolean equals ( Object obj ) { if ( obj instanceof MSort ) { MSort ms = ( MSort ) obj ; if ( data == ms . data ) return _BOOL ; } return _BOOL ; }
36811	public static void endTransaction ( final CConnection connection ) throws SQLException { endTransaction ( connection . getConnection ( ) ) ; }
37137	public CCrossReferencesPanel ( ) { super ( new BorderLayout ( ) ) ; m_table . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; add ( new JScrollPane ( m_table ) ) ; m_table . addMouseListener ( new InternalMouseListener ( ) ) ; }
60899	private void doubleCapacity ( ) { int p = head ; int n = elements . length ; int r = n - p ; int newCapacity = n << _NUM ; if ( newCapacity < _NUM ) throw new IllegalStateException ( _STR ) ; Object [ ] a = new Object [ newCapacity ] ; System . arraycopy ( elements , p , a , _NUM , r ) ; System . arraycopy ( elements , _NUM , a , r , p ) ; elements = a ; head = _NUM ; tail = n ; }
15372	private void changeOpenAMDebugFolder ( String newOpenAMDebugFolder ) { SystemPropertiesManager . initializeProperties ( DebugConstants . CONFIG_DEBUG_DIRECTORY , newOpenAMDebugFolder ) ; }
40582	protected String computeFullUrl ( URL baseUrl , String link ) { if ( link == null || link . length ( ) == _NUM ) { return null ; } if ( ! link . startsWith ( _STR ) ) { if ( link . startsWith ( _STR ) ) { link = baseUrl . getProtocol ( ) + _STR + baseUrl . getAuthority ( ) + link ; } else { if ( link . contains ( _STR ) ) { return null ; } String path = baseUrl . getPath ( ) ; if ( ! path . endsWith ( _STR ) ) { int sep = path . lastIndexOf ( _STR ) ; String file = path . substring ( sep + _NUM ) ; if ( file . contains ( _STR ) || file . contains ( _STR ) ) path = path . substring ( _NUM , sep ) ; } link = baseUrl . getProtocol ( ) + _STR + baseUrl . getAuthority ( ) + path + _STR + link ; } } link = normalizeUrlEnding ( link ) ; String l = link . toLowerCase ( Locale . ROOT ) ; if ( l . endsWith ( _STR ) || l . endsWith ( _STR ) || l . endsWith ( _STR ) || l . endsWith ( _STR ) ) { return null ; } return link ; }
3848	private void loadManifest ( ) { if ( _isManifestRead ) return ; synchronized ( this ) { if ( _isManifestRead ) return ; try { _manifest = _jarPath . getManifest ( ) ; if ( _manifest == null ) return ; Attributes attr = _manifest . getMainAttributes ( ) ; if ( attr != null ) addManifestPackage ( _STR , attr ) ; Map < String , Attributes > entries = _manifest . getEntries ( ) ; for ( Map . Entry < String , Attributes > entry : entries . entrySet ( ) ) { String pkg = entry . getKey ( ) ; attr = entry . getValue ( ) ; if ( attr == null ) continue ; addManifestPackage ( pkg , attr ) ; } } catch ( IOException e ) { log . log ( Level . WARNING , e . toString ( ) , e ) ; } finally { _isManifestRead = _BOOL ; } } }
81351	public ReferenceBinding [ ] convertToRawTypes ( ReferenceBinding [ ] originalTypes , boolean forceErasure , boolean forceRawEnclosingType ) { if ( originalTypes == null ) return null ; ReferenceBinding [ ] convertedTypes = originalTypes ; for ( int i = _NUM , length = originalTypes . length ; i < length ; i ++ ) { ReferenceBinding originalType = originalTypes [ i ] ; ReferenceBinding convertedType = ( ReferenceBinding ) convertToRawType ( forceErasure ? originalType . erasure ( ) : originalType , forceRawEnclosingType ) ; if ( convertedType != originalType ) { if ( convertedTypes == originalTypes ) { System . arraycopy ( originalTypes , _NUM , convertedTypes = new ReferenceBinding [ length ] , _NUM , i ) ; } convertedTypes [ i ] = convertedType ; } else if ( convertedTypes != originalTypes ) { convertedTypes [ i ] = originalType ; } } return convertedTypes ; }
71589	public void addColumn ( int idx , Column column ) { if ( column != null ) { columns . add ( idx , column ) ; } }
83722	public void readData ( DataInput din ) throws IOException { reference = din . readUnsignedShort ( ) ; andMask = din . readUnsignedShort ( ) ; orMask = din . readUnsignedShort ( ) ; }
63936	boolean removeDisplay ( Display display ) { return m_displays . remove ( display ) ; }
86655	public double nextGaussian ( ) { if ( mHaveNextNextGaussian ) { mHaveNextNextGaussian = _BOOL ; return mNextNextGaussian ; } else { double v1 , v2 , s ; do { v1 = _NUM * nextDouble ( ) - _NUM ; v2 = _NUM * nextDouble ( ) - _NUM ; s = v1 * v1 + v2 * v2 ; } while ( s >= _NUM || s == _NUM ) ; final double multiplier = StrictMath . sqrt ( - _NUM * StrictMath . log ( s ) / s ) ; mNextNextGaussian = v2 * multiplier ; mHaveNextNextGaussian = _BOOL ; return v1 * multiplier ; } }
27513	private void fireEvent ( final IRunningQuery q ) { if ( q == null ) throw new IllegalArgumentException ( ) ; if ( listeners . isEmpty ( ) ) { return ; } final IRunningQueryListener [ ] a = listeners . toArray ( new IRunningQueryListener [ _NUM ] ) ; for ( IRunningQueryListener l : a ) { final IRunningQueryListener listener = l ; try { listener . notify ( q ) ; } catch ( Throwable t ) { if ( InnerCause . isInnerCause ( t , InterruptedException . class ) ) { throw new RuntimeException ( t ) ; } log . error ( t , t ) ; } } }
23116	private void updateContactHeaderPort ( int localPort , SIPMessage message ) { if ( message != null && message . getContactHeader ( ) != null ) { ContactHeader contactHeader = message . getContactHeader ( ) ; Address contactAddress = contactHeader . getAddress ( ) ; contactAddress . setPort ( localPort ) ; } }
64548	public static AndroidHttpClient newInstance ( String userAgent ) { return newInstance ( userAgent , null ) ; }
32191	@ Nullable GridCacheMvccCandidate addEntry ( GridLocalCacheEntry entry ) throws GridCacheEntryRemovedException { GridCacheMvccCandidate c = entry . addLocal ( threadId , lockVer , null , null , timeout , ! inTx ( ) , inTx ( ) , implicitSingle ( ) , _BOOL ) ; entries . add ( entry ) ; if ( c == null && timeout < _NUM ) { if ( log . isDebugEnabled ( ) ) log . debug ( _STR + entry ) ; onFailed ( ) ; return null ; } if ( c != null ) { entry . readyLocal ( c ) ; } return c ; }
69757	@ Override public void visitVertex ( StreetRouter . State state ) { Integer edgeIdx = state . backEdge ; if ( ! ( edgeIdx == null || edgeIdx == - _NUM ) ) { EdgeStore . Edge edge = edgeStore . getCursor ( edgeIdx ) ; GeoJsonFeature feature = new GeoJsonFeature ( edge . getGeometry ( ) ) ; feature . addProperty ( _STR , state . weight ) ; feature . addProperty ( _STR , state . streetMode ) ; feature . addProperty ( _STR , state . backEdge ) ; features . add ( feature ) ; } }
28087	public void test_BSBM_Q1_noSolutions ( ) throws Exception { final TestHelper helper = new TestHelper ( _STR , _STR , new String [ ] { } , _STR ) ; assertSameJoinOrder ( new int [ ] { _NUM , _NUM , _NUM , _NUM , _NUM } , helper ) ; }
9222	public static void deleteFileOrLog ( File file ) { if ( ! file . delete ( ) ) { logger . warn ( FAILED_DELETING_FILE + file . getPath ( ) ) ; } }
52595	public synchronized void remove ( int index ) { super . remove ( index ) ; mMaxValues . remove ( index ) ; }
13358	public GitlabGroupMember addGroupMember ( GitlabGroup group , GitlabUser user , GitlabAccessLevel accessLevel ) throws IOException { return addGroupMember ( group . getId ( ) , user . getId ( ) , accessLevel ) ; }
14460	protected Logger ( String name , String resourceBundleName ) { super ( name , resourceBundleName ) ; }
52955	@ Override public void increment ( double coord , short val ) { int bin = getBinNr ( coord ) ; if ( bin < _NUM ) { if ( size - bin > data . length ) { short [ ] tmpdata = new short [ growSize ( data . length , size - bin ) ] ; System . arraycopy ( data , _NUM , tmpdata , - bin , size ) ; data = tmpdata ; } else { System . arraycopy ( data , _NUM , data , - bin , size ) ; Arrays . fill ( data , _NUM , - bin , ( short ) _NUM ) ; } data [ _NUM ] = val ; assert ( data . length >= size - bin ) ; offset -= bin ; size -= bin ; } else if ( bin >= data . length ) { short [ ] tmpdata = new short [ growSize ( data . length , bin + _NUM ) ] ; System . arraycopy ( data , _NUM , tmpdata , _NUM , size ) ; tmpdata [ bin ] = val ; data = tmpdata ; size = bin + _NUM ; max = Double . MAX_VALUE ; } else { if ( bin >= size ) { size = bin + _NUM ; } data [ bin ] += val ; } }
85921	public static void checkArgument ( boolean expression , Object errorMessage ) { if ( ! expression ) { throw new IllegalArgumentException ( String . valueOf ( errorMessage ) ) ; } }
54060	default Document putAll ( Map < ? extends CharSequence , Object > fields ) { if ( fields != null ) { for ( Map . Entry < ? extends CharSequence , Object > entry : fields . entrySet ( ) ) { set ( entry . getKey ( ) , entry . getValue ( ) ) ; } } return this ; }
15828	private boolean containsIgnoreCase ( List < String > stringlist , String match ) { for ( String s : stringlist ) { if ( s . equalsIgnoreCase ( match ) ) { return _BOOL ; } } return _BOOL ; }
53139	public static double computeMAD ( double [ ] x , double median ) { for ( int i = _NUM ; i < x . length ; i ++ ) { x [ i ] = Math . abs ( x [ i ] - median ) ; } double mad = QuickSelect . median ( x ) ; if ( ! ( mad > _NUM ) ) { double min = Double . POSITIVE_INFINITY ; for ( double xi : x ) { if ( xi > _NUM && xi < min ) { min = xi ; } } if ( min < Double . POSITIVE_INFINITY ) { mad = min ; } else { mad = _NUM ; } } return mad ; }
36926	private static < T > void initializeKnownPlugins ( final T pluginInterface , final IPluginRegistry < IPlugin < T > > registry , final List < PluginConfigItem > xmlPluginOrder , final List < Pair < IPlugin < T > , PluginStatus > > validatedPlugins , final List < Pair < IPlugin < T > , Exception > > initializedPlugins , final Set < Long > processedPlugins ) { for ( final PluginConfigItem pt : xmlPluginOrder ) { processedPlugins . add ( pt . getGUID ( ) ) ; final IPlugin < T > plugin = findPlugin ( validatedPlugins , pt . getGUID ( ) ) ; if ( plugin != null ) { if ( pt . isLoad ( ) ) { initializePlugin ( plugin , pluginInterface , registry , initializedPlugins ) ; } else { registry . addDisabledPlugin ( plugin , DisabledPluginReason . NotLoaded ) ; } } } }
37509	public static void sessionStop ( ) { if ( mProcess == null ) return ; mProcess . destroy ( ) ; mProcess = null ; }
6003	public static void keepAlive ( final boolean keepAlive ) { setProperty ( _STR , Boolean . toString ( keepAlive ) ) ; }
4530	public static Request newUploadVideoRequest ( Session session , File file , Callback callback ) throws FileNotFoundException { ParcelFileDescriptor descriptor = ParcelFileDescriptor . open ( file , ParcelFileDescriptor . MODE_READ_ONLY ) ; Bundle parameters = new Bundle ( _NUM ) ; parameters . putParcelable ( file . getName ( ) , descriptor ) ; return new Request ( session , MY_VIDEOS , parameters , HttpMethod . POST , callback ) ; }
77841	private static byte [ ] readCheckedBytes ( byte [ ] buffer , int dataSize ) throws InvalidProtocolBufferNanoException { CheckedMessage wrapper = new CheckedMessage ( ) ; MessageNano . mergeFrom ( wrapper , buffer , _NUM , dataSize ) ; CRC32 checksum = new CRC32 ( ) ; checksum . update ( wrapper . payload ) ; if ( wrapper . checksum != checksum . getValue ( ) ) { throw new InvalidProtocolBufferNanoException ( _STR ) ; } return wrapper . payload ; }
32416	private MulticastSocket createSocket ( ) throws IOException { MulticastSocket sock = new MulticastSocket ( mcastPort ) ; sock . setLoopbackMode ( _BOOL ) ; if ( sockItf != null ) sock . setInterface ( sockItf ) ; if ( sock . getLoopbackMode ( ) ) U . warn ( log , _STR + _STR ) ; sock . joinGroup ( mcastGrp ) ; if ( ttl != - _NUM ) sock . setTimeToLive ( ttl ) ; return sock ; }
84725	void copyNodeStructure ( ArrayList < Node > destination ) { while ( destination . size ( ) < nodes . size ( ) ) destination . add ( new Node ( ) ) ; while ( destination . size ( ) > nodes . size ( ) ) destination . remove ( _NUM ) ; int n = nodes . size ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { Node node0 = nodes . get ( i ) ; Node node1 = destination . get ( i ) ; node1 . heightParameter = node0 . heightParameter ; node1 . rateParameter = node0 . rateParameter ; node1 . traitParameter = node0 . traitParameter ; node1 . partitioning = node0 . partitioning ; node1 . taxon = node0 . taxon ; node1 . bifurcation = node0 . bifurcation ; node1 . number = node0 . number ; node1 . myHashCode = node0 . myHashCode ; if ( node0 . leftParent != null ) { node1 . leftParent = storedNodes . get ( nodes . indexOf ( node0 . leftParent ) ) ; } else { node1 . leftParent = null ; } if ( node0 . rightParent != null ) { node1 . rightParent = storedNodes . get ( nodes . indexOf ( node0 . rightParent ) ) ; } else { node1 . rightParent = null ; } if ( node0 . leftChild != null ) { node1 . leftChild = storedNodes . get ( nodes . indexOf ( node0 . leftChild ) ) ; } else { node1 . leftChild = null ; } if ( node0 . rightChild != null ) { node1 . rightChild = storedNodes . get ( nodes . indexOf ( node0 . rightChild ) ) ; } else { node1 . rightChild = null ; } } }
36072	protected void checkSelectedSubsetMetaData ( ExampleSetMetaData subsetMetaData ) { }
49590	private void validateWill ( String dest , Object payload ) { if ( ( dest == null ) || ( payload == null ) ) { throw new IllegalArgumentException ( ) ; } MqttTopic . validate ( dest , _BOOL ) ; }
57382	public BerInputStream ( InputStream in , int initialSize ) throws IOException { this . in = in ; buffer = new byte [ initialSize ] ; next ( ) ; if ( length != INDEFINIT_LENGTH ) { if ( buffer . length < ( length + offset ) ) { byte [ ] newBuffer = new byte [ length + offset ] ; System . arraycopy ( buffer , _NUM , newBuffer , _NUM , offset ) ; buffer = newBuffer ; } } else { isIndefinedLength = _BOOL ; throw new ASN1Exception ( _STR ) ; } }
65376	private Member nextMember ( Member . Type type ) { return new TestMember ( type , new Address ( _STR , ++ port ) , new Address ( _STR , port + _NUM ) ) ; }
48546	protected void encodeLineSuffix ( OutputStream aStream ) throws IOException { pStream . println ( ) ; }
82182	boolean isSystemFont ( ) { return systemFont ; }
34238	public void addToBeLoaded ( final String url ) { if ( toBeLoaded == null ) { toBeLoaded = new ArrayList < String > ( ) ; } if ( StringUtils . isNotBlank ( url ) ) { toBeLoaded . add ( url ) ; } }
54058	default Document putAll ( Iterator < Field > fields ) { while ( fields . hasNext ( ) ) { Field field = fields . next ( ) ; setValue ( field . getName ( ) , field . getValue ( ) ) ; } return this ; }
82880	public AppraiseGitReviewClient ( Repository repo ) { this . repo = repo ; this . author = new PersonIdent ( repo ) ; }
27540	public RootBlockView ( final boolean rootBlock0 , final ByteBuffer buf , final ChecksumUtility checker ) throws RootBlockException { if ( buf == null ) throw new IllegalArgumentException ( ) ; if ( buf . remaining ( ) != SIZEOF_ROOT_BLOCK ) { throw new IllegalArgumentException ( _STR + SIZEOF_ROOT_BLOCK + _STR + buf . remaining ( ) ) ; } this . buf = buf . asReadOnlyBuffer ( ) ; this . rootBlock0 = rootBlock0 ; switch ( getStoreType ( ) ) { case RW : { am = new RWAddressManager ( null ) ; break ; } case WORM : { final int offsetBits = getOffsetBits ( ) ; am = new WormAddressManager ( offsetBits ) ; break ; } default : throw new RootBlockException ( _STR + getStoreType ( ) ) ; } if ( checker == null ) { log . warn ( _STR ) ; } this . checker = checker ; valid ( ) ; }
4759	protected SOAPRequest createSOAPRequest ( final String methodName , final SOAPMethodRequestWriter requestWriter ) { final PostMethod method = new PostMethod ( endpoint . toString ( ) ) ; method . setContentChunked ( _BOOL ) ; setRequestHeaders ( method , methodName ) ; final SOAPRequestEntity requestEntity = buildRequestEntity ( methodName , requestWriter ) ; requestEntity . setSOAPHeaderProvider ( soapHeaderProvider ) ; final BufferedSOAPRequestEntity bufferedEntity = new BufferedSOAPRequestEntity ( requestEntity ) ; method . setRequestEntity ( bufferedEntity ) ; return new SOAPRequest ( method , requestEntity ) ; }
33948	@ SuppressWarnings ( _STR ) @ Test public void innerEnum ( ) { Class < ? > pc = PlayingCard . class ; List < Enum < ? > > include = new ArrayList < > ( ) ; List < Enum < ? > > exclude = new ArrayList < > ( ) ; for ( Class < ? > c : pc . getDeclaredClasses ( ) ) { int mods = c . getModifiers ( ) ; if ( c . isEnum ( ) ) { if ( Modifier . isPublic ( mods ) ) { include . addAll ( asList ( c . getEnumConstants ( ) ) ) ; } else { exclude . addAll ( asList ( c . getEnumConstants ( ) ) ) ; } } } Set < TypedOperation > actual = getConcreteOperations ( pc ) ; assertEquals ( _STR , include . size ( ) + _NUM , actual . size ( ) ) ; for ( Enum < ? > e : include ) { assertTrue ( _STR + e . name ( ) + _STR , actual . contains ( createEnumOperation ( e ) ) ) ; } for ( Enum < ? > e : exclude ) { assertFalse ( _STR + e . name ( ) + _STR , actual . contains ( createEnumOperation ( e ) ) ) ; } }
58323	public String toURI ( ) { CharArrayBuffer buffer = new CharArrayBuffer ( _NUM ) ; buffer . append ( this . schemeName ) ; buffer . append ( _STR ) ; buffer . append ( this . hostname ) ; if ( this . port != - _NUM ) { buffer . append ( _STR ) ; buffer . append ( Integer . toString ( this . port ) ) ; } return buffer . toString ( ) ; }
59148	public void testWildcardsDoesNotNeedTwoDots ( ) throws Exception { String cert = _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR ; CertificateFactory cf = CertificateFactory . getInstance ( _STR ) ; InputStream in = new ByteArrayInputStream ( cert . getBytes ( _STR ) ) ; X509Certificate x509 = ( X509Certificate ) cf . generateCertificate ( in ) ; mySSLSession session = new mySSLSession ( new X509Certificate [ ] { x509 } ) ; HostnameVerifier verifier = HttpsURLConnection . getDefaultHostnameVerifier ( ) ; assertTrue ( verifier . verify ( _STR , session ) ) ; }
54087	public static boolean inTargetDir ( File file ) { return inTargetDir ( file . toPath ( ) ) ; }
29398	public final boolean skipAny ( char c , CharSequence csq ) { int i = index ; int n = csq . length ( ) ; for ( ; ( i < n ) && ( csq . charAt ( i ) == c ) ; i ++ ) { } if ( i == index ) return _BOOL ; index = i ; return _BOOL ; }
38960	private void generateUniformIntegerExamples ( Instances format , int numInstances , SubspaceClusterDefinition cl , String cName ) { Instance example = null ; int numAtts = m_NumAttributes ; if ( getClassFlag ( ) ) { numAtts ++ ; } example = new DenseInstance ( numAtts ) ; example . setDataset ( format ) ; boolean [ ] attributes = cl . getAttributes ( ) ; double [ ] minValue = cl . getMinValue ( ) ; double [ ] maxValue = cl . getMaxValue ( ) ; int [ ] minInt = new int [ minValue . length ] ; int [ ] maxInt = new int [ maxValue . length ] ; int [ ] intValue = new int [ maxValue . length ] ; int [ ] numInt = new int [ minValue . length ] ; int num = _NUM ; for ( int i = _NUM ; i < minValue . length ; i ++ ) { minInt [ i ] = ( int ) Math . ceil ( minValue [ i ] ) ; maxInt [ i ] = ( int ) Math . floor ( maxValue [ i ] ) ; numInt [ i ] = ( maxInt [ i ] - minInt [ i ] + _NUM ) ; num = num * numInt [ i ] ; } int numEach = numInstances / num ; int rest = numInstances - numEach * num ; for ( int i = _NUM ; i < m_NumAttributes ; i ++ ) { if ( attributes [ i ] ) { example . setValue ( i , minInt [ i ] ) ; intValue [ i ] = minInt [ i ] ; } else { example . setMissing ( i ) ; } } if ( getClassFlag ( ) ) { example . setClassValue ( cName ) ; } int added = _NUM ; int attr = _NUM ; do { for ( int k = _NUM ; k < numEach ; k ++ ) { format . add ( example ) ; example = ( Instance ) example . copy ( ) ; added ++ ; } if ( rest > _NUM ) { format . add ( example ) ; example = ( Instance ) example . copy ( ) ; added ++ ; rest -- ; } if ( added >= numInstances ) { break ; } boolean done = _BOOL ; do { if ( attributes [ attr ] && ( intValue [ attr ] + _NUM <= maxInt [ attr ] ) ) { intValue [ attr ] ++ ; done = _BOOL ; } else { attr ++ ; } } while ( ! done ) ; example . setValue ( attr , intValue [ attr ] ) ; } while ( added < numInstances ) ; }
63767	public synchronized boolean removeAll ( Collection c ) { Object [ ] elements = getArray ( ) ; int len = elements . length ; if ( len != _NUM ) { int newlen = _NUM ; Object [ ] temp = new Object [ len ] ; for ( int i = _NUM ; i < len ; ++ i ) { Object element = elements [ i ] ; if ( ! c . contains ( element ) ) temp [ newlen ++ ] = element ; } if ( newlen != len ) { setArray ( copyOfRange ( temp , _NUM , newlen , Object [ ] . class ) ) ; return _BOOL ; } } return _BOOL ; }
57579	private final boolean compareAndSetTail ( Node expect , Node update ) { return unsafe . compareAndSwapObject ( this , tailOffset , expect , update ) ; }
50605	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
86965	public Phone createPhone ( String value ) { PhoneField phoneImpl = new PhoneField ( ) ; try { phoneImpl . setValue ( value ) ; } catch ( SdpException s ) { s . printStackTrace ( ) ; } return phoneImpl ; }
58192	private ListResourceBundle loadResourceBundle ( String resourceBundle ) throws MissingResourceException { m_resourceBundleName = resourceBundle ; Locale locale = getLocale ( ) ; ListResourceBundle lrb ; try { ResourceBundle rb = ResourceBundle . getBundle ( m_resourceBundleName , locale ) ; lrb = ( ListResourceBundle ) rb ; } catch ( MissingResourceException e ) { try { lrb = ( ListResourceBundle ) ResourceBundle . getBundle ( m_resourceBundleName , new Locale ( _STR , _STR ) ) ; } catch ( MissingResourceException e2 ) { throw new MissingResourceException ( _STR + m_resourceBundleName , m_resourceBundleName , _STR ) ; } } m_resourceBundle = lrb ; return lrb ; }
21713	private Set < String > returnRemotePoolsAssociatedWithRemoteCopySettings ( Map < String , List < String > > remoteCopySettings , Set < String > poolUris ) { Set < String > remotePoolUris = new HashSet < String > ( ) ; for ( Entry < String , List < String > > entry : remoteCopySettings . entrySet ( ) ) { VirtualPool vPool = _objectCache . queryObject ( VirtualPool . class , URI . create ( entry . getKey ( ) ) ) ; if ( null == vPool ) { remotePoolUris . addAll ( poolUris ) ; } else if ( null != vPool . getUseMatchedPools ( ) && vPool . getUseMatchedPools ( ) ) { if ( null != vPool . getMatchedStoragePools ( ) ) { remotePoolUris . addAll ( vPool . getMatchedStoragePools ( ) ) ; } } else if ( null != vPool . getAssignedStoragePools ( ) ) { remotePoolUris . addAll ( vPool . getAssignedStoragePools ( ) ) ; } } return remotePoolUris ; }
32628	private String convertToHtml ( final String string ) { return _STR + string . replaceAll ( _STR , _STR ) + _STR ; }
17761	private synchronized void addLock ( FileLock lock ) throws OverlappingFileLockException { long lockEnd = lock . position ( ) + lock . size ( ) ; for ( FileLock existingLock : locks ) { if ( existingLock . position ( ) > lockEnd ) { break ; } if ( existingLock . overlaps ( lock . position ( ) , lock . size ( ) ) ) { throw new OverlappingFileLockException ( ) ; } } locks . add ( lock ) ; }
43047	public static void UF7 ( double [ ] x , double [ ] f , int nx ) { int count1 = _NUM ; int count2 = _NUM ; double sum1 = _NUM ; double sum2 = _NUM ; double yj ; for ( int j = _NUM ; j <= nx ; j ++ ) { yj = x [ j - _NUM ] - Math . sin ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; if ( j % _NUM == _NUM ) { sum2 += yj * yj ; count2 ++ ; } else { sum1 += yj * yj ; count1 ++ ; } } yj = Math . pow ( x [ _NUM ] , _NUM ) ; f [ _NUM ] = yj + _NUM * sum1 / ( double ) count1 ; f [ _NUM ] = _NUM - yj + _NUM * sum2 / ( double ) count2 ; }
68165	private void reloadModelWithNewValue ( final Long newValue ) { final long newValueAsPrimitive = newValue == null ? getModelUpdatePeriod ( ) : newValue ; for ( final PropertyChangeListener listener : modelUpdatePeriodListeners ) { final PropertyChangeEvent event = new PropertyChangeEvent ( this , _STR , getModelUpdatePeriod ( ) , newValueAsPrimitive ) ; listener . propertyChange ( event ) ; } }
55899	public static final String moveToUCIString ( Move m ) { String ret = squareToString ( m . from ) ; ret += squareToString ( m . to ) ; switch ( m . promoteTo ) { case Piece . WQUEEN : case Piece . BQUEEN : ret += _STR ; break ; case Piece . WROOK : case Piece . BROOK : ret += _STR ; break ; case Piece . WBISHOP : case Piece . BBISHOP : ret += _STR ; break ; case Piece . WKNIGHT : case Piece . BKNIGHT : ret += _STR ; break ; default : break ; } return ret ; }
49325	public Image createAcceleratedImage ( Component target , int width , int height ) { ColorModel model = getColorModel ( Transparency . OPAQUE ) ; WritableRaster wr = model . createCompatibleWritableRaster ( width , height ) ; return new OffScreenImage ( target , model , wr , model . isAlphaPremultiplied ( ) ) ; }
84344	public void displayState ( ) { PrintWriter xout = context . get ( Log . outKey ) ; xout . println ( _STR + fileObjectHistory ) ; xout . println ( _STR + openTypeNames ) ; xout . println ( _STR + generatedSourceNames ) ; xout . println ( _STR + generatedClasses . keySet ( ) ) ; xout . println ( _STR + aggregateGeneratedSourceNames ) ; xout . println ( _STR + aggregateGeneratedClassNames ) ; }
43492	public static void writeStringToWriter ( String string , Writer writer ) throws IOException { BufferedWriter bw = new BufferedWriter ( writer ) ; try { bw . write ( string ) ; } finally { bw . close ( ) ; } }
2670	private void ensureCapacity ( int n ) { if ( n <= _NUM ) { return ; } int max ; if ( data == null || data . length == _NUM ) { max = _NUM ; } else if ( data . length >= n * _NUM ) { return ; } else { max = data . length ; } while ( max < n * _NUM ) { max *= _NUM ; } String newData [ ] = new String [ max ] ; if ( length > _NUM ) { System . arraycopy ( data , _NUM , newData , _NUM , length * _NUM ) ; } data = newData ; }
76688	public final void decRef ( ) throws IOException { ensureOpen ( ) ; final int rc = refCount . decrementAndGet ( ) ; if ( rc == _NUM ) { boolean success = _BOOL ; try { doClose ( ) ; closed = _BOOL ; success = _BOOL ; } finally { if ( ! success ) { refCount . incrementAndGet ( ) ; } } } else if ( rc < _NUM ) { throw new IllegalStateException ( _STR + rc + _STR ) ; } }
9616	public static X500Name x500PrincipalToX500Name ( X500Principal principal ) { return X500Name . getInstance ( KseX500NameStyle . INSTANCE , principal . getEncoded ( ) ) ; }
28085	private void assertDescribedResource ( final BigdataValue describedResource , final IDescribeCache describeCache , final TestHelper h ) { final Graph actualGraph = describeCache . lookup ( describedResource . getIV ( ) ) ; assertNotNull ( actualGraph ) ; final Set < Statement > expectedGraph = getExpectedDescription ( describedResource , h ) ; h . compareGraphs ( new HashSet < Statement > ( actualGraph ) , expectedGraph ) ; for ( Statement stmt : actualGraph ) { assertTrue ( stmt instanceof BigdataStatement ) ; final BigdataStatement st = ( BigdataStatement ) stmt ; assertNotNull ( st . s ( ) ) ; assertNotNull ( st . p ( ) ) ; assertNotNull ( st . o ( ) ) ; if ( st . getContext ( ) != null ) { assertNotNull ( st . c ( ) ) ; } } }
66219	public boolean isFlat ( ) { return TYPE_FLAT . equals ( getType ( ) ) ; }
83623	@ Deprecated private List < CharSequence > buildLimitedNetworksList ( ) { final Context context = getActivity ( ) ; final ArrayList < CharSequence > limited = Lists . newArrayList ( ) ; if ( hasSubscription ( context ) ) { final String subscriberId = getActiveSubscriberId ( context ) ; if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateMobileAll ( subscriberId ) ) ) { limited . add ( getText ( R . string . data_usage_list_mobile ) ) ; } if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateMobile3gLower ( subscriberId ) ) ) { limited . add ( getText ( R . string . data_usage_tab_3g ) ) ; } if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateMobile4g ( subscriberId ) ) ) { limited . add ( getText ( R . string . data_usage_tab_4g ) ) ; } } if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateWifiWildcard ( ) ) ) { limited . add ( getText ( R . string . data_usage_tab_wifi ) ) ; } if ( mPolicyEditor . hasLimitedPolicy ( buildTemplateEthernet ( ) ) ) { limited . add ( getText ( R . string . data_usage_tab_ethernet ) ) ; } return limited ; }
29304	public int evalRPN ( String [ ] tokens ) { if ( tokens == null || tokens . length == _NUM ) return _NUM ; Stack < String > s = new Stack < String > ( ) ; int len = tokens . length ; for ( int i = _NUM ; i < len ; i ++ ) { String cur = tokens [ i ] ; if ( isOperator ( cur ) ) { int t2 = Integer . parseInt ( s . pop ( ) ) ; int t1 = Integer . parseInt ( s . pop ( ) ) ; int res = calculate ( t1 , t2 , cur ) ; s . push ( Integer . toString ( res ) ) ; } else s . push ( cur ) ; } return Integer . valueOf ( s . peek ( ) ) ; }
70465	public synchronized void addAllSeries ( List < XYSeries > series ) { mSeries . addAll ( series ) ; }
32535	private static void exit ( String errMsg , Options options , int exitCode ) { if ( errMsg != null ) echo ( _STR + errMsg ) ; String runner = System . getProperty ( IGNITE_PROG_NAME , _STR ) ; int space = runner . indexOf ( _STR ) ; runner = runner . substring ( _NUM , space == - _NUM ? runner . length ( ) : space ) ; if ( options != null ) { HelpFormatter formatter = new HelpFormatter ( ) ; formatter . printHelp ( runner , options ) ; } System . exit ( exitCode ) ; }
78815	@ Override public int compare ( NewSplitEmittedTerm term1 , NewSplitEmittedTerm term2 ) { return term1 . compareTo ( term2 ) ; }
16133	public AABB merge ( AABB other ) { minX = Math . min ( minX , other . minX ) ; maxX = Math . max ( maxX , other . maxX ) ; minY = Math . min ( minY , other . minY ) ; maxY = Math . max ( maxY , other . maxY ) ; minZ = Math . min ( minZ , other . minZ ) ; maxZ = Math . max ( maxZ , other . maxZ ) ; return this ; }
10298	public static String generateAutoTag ( int stackOffset ) { StackTraceElement [ ] currentStack = getCurrentStack ( ) ; StackTraceElement element = currentStack [ stackOffset ] ; String className = element . getClassName ( ) ; String pkgPath [ ] = className . split ( _STR ) ; if ( pkgPath . length > _NUM ) { className = pkgPath [ pkgPath . length - _NUM ] ; } StringBuilder sbInnerClass = new StringBuilder ( ) ; int index ; String strLoop = className ; while ( ( index = strLoop . lastIndexOf ( _STR ) ) != - _NUM ) { String piece = strLoop . substring ( index + _NUM ) ; sbInnerClass . insert ( _NUM , piece ) ; if ( ! piece . matches ( _STR ) ) { break ; } sbInnerClass . insert ( _NUM , _STR ) ; strLoop = strLoop . substring ( _NUM , index ) ; } if ( sbInnerClass . length ( ) > _NUM && sbInnerClass . charAt ( _NUM ) == _STR ) { sbInnerClass . deleteCharAt ( _NUM ) ; } String innerClassName = sbInnerClass . toString ( ) ; if ( TextUtils . isDigitsOnly ( innerClassName ) ) { innerClassName = null ; } return TextUtils . isEmpty ( innerClassName ) ? className : innerClassName ; }
18191	public void flushPending ( ) throws SAXException { if ( m_needToCallStartDocument ) { startDocumentInternal ( ) ; m_needToCallStartDocument = _BOOL ; } if ( m_elemContext . m_startTagOpen ) { closeStartTag ( ) ; m_elemContext . m_startTagOpen = _BOOL ; } if ( m_cdataTagOpen ) { closeCDATA ( ) ; m_cdataTagOpen = _BOOL ; } if ( m_writer != null ) { try { m_writer . flush ( ) ; } catch ( IOException e ) { } } }
70944	private void handleSubscribe ( String [ ] args ) { switch ( args [ _NUM ] ) { case _STR : TestSubscriber < Payload > rrsub = new TestSubscriber < > ( _NUM ) ; payloadSubscribers . put ( args [ _NUM ] , rrsub ) ; idToType . put ( args [ _NUM ] , args [ _NUM ] ) ; ReactiveSocket rrclient = createClient . get ( ) ; Publisher < Payload > rrpub = rrclient . requestResponse ( new PayloadImpl ( args [ _NUM ] , args [ _NUM ] ) ) ; rrpub . subscribe ( rrsub ) ; break ; case _STR : TestSubscriber < Payload > rssub = new TestSubscriber < > ( _NUM ) ; payloadSubscribers . put ( args [ _NUM ] , rssub ) ; idToType . put ( args [ _NUM ] , args [ _NUM ] ) ; ReactiveSocket rsclient = createClient . get ( ) ; Publisher < Payload > rspub = rsclient . requestStream ( new PayloadImpl ( args [ _NUM ] , args [ _NUM ] ) ) ; rspub . subscribe ( rssub ) ; break ; case _STR : TestSubscriber < Payload > rsubsub = new TestSubscriber < > ( _NUM ) ; payloadSubscribers . put ( args [ _NUM ] , rsubsub ) ; idToType . put ( args [ _NUM ] , args [ _NUM ] ) ; ReactiveSocket rsubclient = createClient . get ( ) ; Publisher < Payload > rsubpub = rsubclient . requestSubscription ( new PayloadImpl ( args [ _NUM ] , args [ _NUM ] ) ) ; rsubpub . subscribe ( rsubsub ) ; break ; case _STR : TestSubscriber < Void > fnfsub = new TestSubscriber < > ( _NUM ) ; fnfSubscribers . put ( args [ _NUM ] , fnfsub ) ; idToType . put ( args [ _NUM ] , args [ _NUM ] ) ; ReactiveSocket fnfclient = createClient . get ( ) ; Publisher < Void > fnfpub = fnfclient . fireAndForget ( new PayloadImpl ( args [ _NUM ] , args [ _NUM ] ) ) ; fnfpub . subscribe ( fnfsub ) ; break ; default : break ; } }
67417	@ PostConstruct public void init ( ) { configurationViews . add ( defaultDistributionSetTypeLayout ) ; configurationViews . add ( authenticationConfigurationView ) ; configurationViews . add ( pollingConfigurationView ) ; }
61511	public ExtendedType ( int nodetype , String namespace , String localName ) { this . nodetype = nodetype ; this . namespace = namespace ; this . localName = localName ; this . hash = nodetype + namespace . hashCode ( ) + localName . hashCode ( ) ; }
57950	private static void validateNewAddition ( Vector paths , ExpressionOwner owner , LocPathIterator path ) throws RuntimeException { assertion ( owner . getExpression ( ) == path , _STR ) ; int n = paths . size ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { ExpressionOwner ew = ( ExpressionOwner ) paths . elementAt ( i ) ; assertion ( ew != owner , _STR ) ; assertion ( ew . getExpression ( ) != path , _STR ) ; } }
77976	@ Override public void start ( ) { for ( int i = _NUM ; i < threadCount ; ++ i ) { Set < SystemStreamPartition > threadSsps = new HashSet < SystemStreamPartition > ( ) ; for ( SystemStreamPartition ssp : ssps ) { if ( Math . abs ( ssp . hashCode ( ) ) % threadCount == i ) { threadSsps . add ( ssp ) ; } } Thread thread = new Thread ( new MockSystemConsumerRunnable ( threadSsps ) , _STR + i ) ; thread . setDaemon ( _BOOL ) ; threads . add ( thread ) ; thread . start ( ) ; } }
42920	private List < double [ ] > initializeWeightsND ( ) { int N = _NUM ; List < double [ ] > candidates = new ArrayList < double [ ] > ( numberOfPoints * N ) ; for ( int i = _NUM ; i < numberOfPoints * N ; i ++ ) { double [ ] weight = new double [ numberOfObjectives ] ; for ( int j = _NUM ; j < numberOfObjectives ; j ++ ) { weight [ j ] = PRNG . nextDouble ( ) ; } double sum = StatUtils . sum ( weight ) ; for ( int j = _NUM ; j < numberOfObjectives ; j ++ ) { weight [ j ] /= sum ; } candidates . add ( weight ) ; } List < double [ ] > weights = new ArrayList < double [ ] > ( numberOfPoints * N ) ; for ( int i = _NUM ; i < numberOfObjectives ; i ++ ) { double [ ] weight = new double [ numberOfObjectives ] ; weight [ i ] = _NUM ; weights . add ( weight ) ; } while ( weights . size ( ) < numberOfPoints ) { double [ ] weight = null ; double distance = Double . NEGATIVE_INFINITY ; for ( int i = _NUM ; i < candidates . size ( ) ; i ++ ) { double d = Double . POSITIVE_INFINITY ; for ( int j = _NUM ; j < weights . size ( ) ; j ++ ) { d = Math . min ( d , MathArrays . distance ( candidates . get ( i ) , weights . get ( j ) ) ) ; } if ( d > distance ) { weight = candidates . get ( i ) ; distance = d ; } } weights . add ( weight ) ; candidates . remove ( weight ) ; } return weights ; }
6629	public void undo ( ) { try { if ( undoManager != null ) undoManager . undoOrRedo ( ) ; } catch ( CannotUndoException ignored ) { } catch ( CannotRedoException ignored ) { } }
71592	public void removeColumn ( Column column ) { if ( column != null ) { columns . remove ( column ) ; } }
5415	public String info ( ) { StringBuilder sb = new StringBuilder ( _STR + tableSize + _STR + elements + _STR + loadFactor + _STR + threshold ) ; sb . append ( _STR + numEmpty ) ; int size = _NUM ; int min = elements ; int max = - _NUM ; for ( int i = _NUM ; i < tableSize ; i ++ ) { LinkedList < String > list = bins [ i ] ; if ( list != null ) { int sz = list . size ( ) ; size += sz ; if ( sz < min ) { min = sz ; } if ( sz > max ) { max = sz ; } } } float avg = size ; int base = ( tableSize - numEmpty ) ; if ( base == _NUM ) { sb . append ( _STR ) ; sb . append ( _STR ) ; sb . append ( _STR ) ; } else { avg /= base ; sb . append ( _STR + avg ) ; sb . append ( _STR + min ) ; sb . append ( _STR + max ) ; } return sb . toString ( ) ; }
61777	public boolean peekSample ( MediaCodec . BufferInfo out_bufferInfo ) { update ( ) ; boolean result = _BOOL ; if ( ! mAvailableOutputBuffers . isEmpty ( ) ) { int index = mAvailableOutputBuffers . peek ( ) ; MediaCodec . BufferInfo info = mOutputBufferInfo [ index ] ; out_bufferInfo . set ( info . offset , info . size , info . presentationTimeUs , info . flags ) ; result = _BOOL ; } return result ; }
25881	@ Override public AbstractScannedResult scanBlocklet ( BlocksChunkHolder blocksChunkHolder ) throws QueryExecutionException { try { fillScannedResult ( blocksChunkHolder ) ; } catch ( FilterUnsupportedException e ) { throw new QueryExecutionException ( e . getMessage ( ) ) ; } return scannedResult ; }
62026	@ Override public int hashCode ( ) { return subconditions . hashCode ( ) - operator . hashCode ( ) ; }
66360	public void balanceSegments ( ) { MAcctSchemaElement [ ] elements = m_acctSchema . getAcctSchemaElements ( ) ; for ( int i = _NUM ; i < elements . length ; i ++ ) { MAcctSchemaElement ase = elements [ i ] ; if ( ase . isBalanced ( ) ) balanceSegment ( ase . getElementType ( ) ) ; } }
36428	public AnnotationDrawer ( final AnnotationsModel model , final ProcessRendererModel rendererModel ) { this . model = model ; this . rendererModel = rendererModel ; this . displayCache = new HashMap < > ( ) ; this . cachedID = new HashMap < > ( ) ; pane = new JEditorPane ( _STR , _STR ) ; pane . setBorder ( null ) ; pane . setOpaque ( _BOOL ) ; }
80975	public boolean hasUserPartitions ( ) { return ! userOutput . isEmpty ( ) ; }
37480	@ Override public void insertString ( final int offs , final String str , final AttributeSet attr ) { if ( offs < _NUM ) { return ; } if ( str . length ( ) > _NUM ) { int i ; for ( i = _NUM ; i < str . length ( ) ; i ++ ) { if ( str . charAt ( i ) == _STR ) { remainingTextString = str . substring ( i + _NUM ) ; remainingTextAttr = attr ; inputKeyListener . keyPressed ( new KeyEvent ( new Container ( ) , KeyEvent . KEY_PRESSED , _NUM , _NUM , KeyEvent . VK_ENTER , _STR ) ) ; break ; } else { insertChar ( offs + i , _STR + str . charAt ( i ) ) ; } } } else if ( str . length ( ) == _NUM ) { insertChar ( offs , str ) ; } }
43958	protected int readCodePoint ( ) throws IOException { int next = reader . read ( ) ; if ( Character . isHighSurrogate ( ( char ) next ) ) { next = Character . toCodePoint ( ( char ) next , ( char ) reader . read ( ) ) ; } return next ; }
59580	public static int putInt ( byte [ ] bytes , int offset , int val ) { if ( littleEndian ) { val = Integer . reverseBytes ( val ) ; } theUnsafe . putInt ( bytes , offset + BYTE_ARRAY_BASE_OFFSET , val ) ; return offset + Bytes . SIZEOF_INT ; }
28384	public Item ( Drawable symbol , String labelText , Font font ) { double fontSize = font . getSize2D ( ) ; setLayout ( new EdgeLayout ( fontSize , _NUM ) ) ; this . symbol = symbol ; add ( symbol , Location . WEST ) ; label = new Label ( labelText ) ; label . setFont ( font ) ; label . setAlignmentX ( _NUM ) ; label . setAlignmentY ( _NUM ) ; add ( label , Location . CENTER ) ; }
13366	void tag ( String tag ) ;
80389	public int consume ( ) { int consumedAmount ; if ( Math . abs ( left ) < Math . abs ( getRegen ( ) ) ) { consumedAmount = left ; left = _NUM ; } else { consumedAmount = getRegen ( ) ; left -= getRegen ( ) ; } return consumedAmount ; }
31717	private Delegate delegate ( ) throws HadoopIgfsCommunicationException { Exception errShmem = null ; Exception errTcp = null ; Delegate curDelegate = delegateRef . get ( ) ; if ( curDelegate != null ) return curDelegate ; boolean skipInProc = parameter ( conf , PARAM_IGFS_ENDPOINT_NO_EMBED , authority , _BOOL ) ; if ( ! skipInProc ) { IgfsEx igfs = getIgfsEx ( endpoint . grid ( ) , endpoint . igfs ( ) ) ; if ( igfs != null ) { HadoopIgfsEx hadoop = null ; try { hadoop = new HadoopIgfsInProc ( igfs , log , userName ) ; curDelegate = new Delegate ( hadoop , hadoop . handshake ( logDir ) ) ; } catch ( IOException | IgniteCheckedException e ) { if ( e instanceof HadoopIgfsCommunicationException ) if ( hadoop != null ) hadoop . close ( _BOOL ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR , e ) ; } } } boolean skipLocShmem = parameter ( conf , PARAM_IGFS_ENDPOINT_NO_LOCAL_SHMEM , authority , _BOOL ) ; if ( curDelegate == null && ! skipLocShmem && ! U . isWindows ( ) ) { HadoopIgfsEx hadoop = null ; try { hadoop = new HadoopIgfsOutProc ( endpoint . port ( ) , endpoint . grid ( ) , endpoint . igfs ( ) , log , userName ) ; curDelegate = new Delegate ( hadoop , hadoop . handshake ( logDir ) ) ; } catch ( IOException | IgniteCheckedException e ) { if ( e instanceof HadoopIgfsCommunicationException ) hadoop . close ( _BOOL ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + endpoint . port ( ) + _STR , e ) ; errShmem = e ; } } boolean skipLocTcp = parameter ( conf , PARAM_IGFS_ENDPOINT_NO_LOCAL_TCP , authority , _BOOL ) ; if ( curDelegate == null && ! skipLocTcp ) { HadoopIgfsEx hadoop = null ; try { hadoop = new HadoopIgfsOutProc ( LOCALHOST , endpoint . port ( ) , endpoint . grid ( ) , endpoint . igfs ( ) , log , userName ) ; curDelegate = new Delegate ( hadoop , hadoop . handshake ( logDir ) ) ; } catch ( IOException | IgniteCheckedException e ) { if ( e instanceof HadoopIgfsCommunicationException ) hadoop . close ( _BOOL ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + endpoint . host ( ) + _STR + endpoint . port ( ) + _STR , e ) ; errTcp = e ; } } if ( curDelegate == null && ( skipLocTcp || ! F . eq ( LOCALHOST , endpoint . host ( ) ) ) ) { HadoopIgfsEx hadoop = null ; try { hadoop = new HadoopIgfsOutProc ( endpoint . host ( ) , endpoint . port ( ) , endpoint . grid ( ) , endpoint . igfs ( ) , log , userName ) ; curDelegate = new Delegate ( hadoop , hadoop . handshake ( logDir ) ) ; } catch ( IOException | IgniteCheckedException e ) { if ( e instanceof HadoopIgfsCommunicationException ) hadoop . close ( _BOOL ) ; if ( log . isDebugEnabled ( ) ) log . debug ( _STR + endpoint . host ( ) + _STR + endpoint . port ( ) + _STR , e ) ; errTcp = e ; } } if ( curDelegate != null ) { if ( ! delegateRef . compareAndSet ( null , curDelegate ) ) curDelegate . doomed = _BOOL ; return curDelegate ; } else { SB errMsg = new SB ( _STR + authority + _STR ) ; if ( errShmem != null ) errMsg . a ( _STR + endpoint . port ( ) + _STR + errShmem + _STR ) ; errMsg . a ( _STR + endpoint . host ( ) + _STR + endpoint . port ( ) + _STR + errTcp + _STR ) ; errMsg . a ( _STR + _STR ) ; throw new HadoopIgfsCommunicationException ( errMsg . toString ( ) ) ; } }
7239	public FromClause add ( OuterJoinQualifier outerJoinQualifier ) { outerJoinQualifiers . add ( outerJoinQualifier ) ; return this ; }
6401	private static final File [ ] encode ( String src ) { if ( src == null || src . length ( ) == _NUM ) { return ( new File [ _NUM ] ) ; } StringTokenizer tokenizer = new StringTokenizer ( src , _STR ) ; File [ ] dirs = new File [ tokenizer . countTokens ( ) ] ; for ( int i = _NUM ; i < dirs . length ; i ++ ) { dirs [ i ] = new File ( tokenizer . nextToken ( ) ) ; } return dirs ; }
62150	private boolean journalRebuildRequired ( ) { final int redundantOpCompactThreshold = _NUM ; return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries . size ( ) ; }
67925	public E poll ( long timeout , TimeUnit unit ) throws InterruptedException { long nanos = unit . toNanos ( timeout ) ; final ReentrantLock lock = this . lock ; lock . lockInterruptibly ( ) ; long t = now ( ) ; TenantQueue . Item item = null ; try { for ( ; ; ) { TenantQueue q = nextQueue ( t ) ; if ( q == null ) { if ( nanos <= _NUM ) return null ; else nanos = available . awaitNanos ( nanos ) ; } else { long delay = q . next - t ; if ( delay <= _NUM ) { item = q . poll ( t ) ; return item == null ? null : item . element ; } if ( nanos <= _NUM ) return null ; if ( nanos < delay || leader != null ) nanos = available . awaitNanos ( nanos ) ; else { Thread thisThread = Thread . currentThread ( ) ; leader = thisThread ; try { long timeLeft = available . awaitNanos ( delay ) ; nanos -= delay - timeLeft ; } finally { if ( leader == thisThread ) leader = null ; } } } t = System . nanoTime ( ) ; } } finally { if ( leader == null && hasNext ( ) ) available . signal ( ) ; lock . unlock ( ) ; done ( item , t ) ; } }
59637	public void addSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList < SwipeListener > ( ) ; } mListeners . add ( listener ) ; }
26149	public int size ( ) { return patterns . size ( ) ; }
78103	private SublimeBaseMenuItem addInternal ( int pivotID , Positioned positioned , SublimeBaseMenuItem newItem ) { int newItemGroupId = newItem . getGroupId ( ) ; checkExistenceOfGroup ( newItemGroupId ) ; int pivotIndex = findItemIndex ( pivotID ) ; SublimeBaseMenuItem pivot = mItems . get ( pivotIndex ) ; if ( newItem . getItemType ( ) == SublimeBaseMenuItem . ItemType . GROUP_HEADER ) { checkIfGroupHeaderAlreadyExistsForGroup ( newItemGroupId ) ; int index = findGroupIndex ( newItemGroupId ) ; if ( index >= _NUM ) { mItems . add ( index , newItem ) ; } else { if ( positioned == Positioned . BEFORE ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivot . getItemType ( ) == SublimeBaseMenuItem . ItemType . GROUP_HEADER ) { mItems . add ( pivotIndex , newItem ) ; } else { mItems . add ( newItem ) ; } } else if ( positioned == Positioned . AFTER ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivotIndex == findLastGroupIndex ( newItemGroupId ) ) { mItems . add ( pivotIndex + _NUM , newItem ) ; } else { mItems . add ( newItem ) ; } } } } else { if ( newItemGroupId != NO_GROUP_ID ) { int lastGroupIndex = findLastGroupIndex ( newItemGroupId ) ; if ( lastGroupIndex == mItems . size ( ) ) { if ( positioned == Positioned . BEFORE ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivotIndex == findGroupIndex ( pivot . getGroupId ( ) ) ) { mItems . add ( pivotIndex , newItem ) ; } else { mItems . add ( newItem ) ; } } else if ( positioned == Positioned . AFTER ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivotIndex == findLastGroupIndex ( pivot . getGroupId ( ) ) ) { mItems . add ( pivotIndex + _NUM , newItem ) ; } else { mItems . add ( newItem ) ; } } } else { if ( newItemGroupId == pivot . getGroupId ( ) ) { if ( positioned == Positioned . BEFORE ) { if ( pivot . getItemType ( ) != SublimeBaseMenuItem . ItemType . GROUP_HEADER ) { mItems . add ( pivotIndex , newItem ) ; } else { mItems . add ( lastGroupIndex + _NUM , newItem ) ; } } else if ( positioned == Positioned . AFTER ) { mItems . add ( pivotIndex + _NUM , newItem ) ; } } else { mItems . add ( lastGroupIndex + _NUM , newItem ) ; } } } else { if ( positioned == Positioned . BEFORE ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || findGroupIndex ( pivot . getGroupId ( ) ) == pivotIndex ) { mItems . add ( pivotIndex , newItem ) ; } else { mItems . add ( newItem ) ; } } else if ( positioned == Positioned . AFTER ) { if ( pivot . getGroupId ( ) == NO_GROUP_ID || pivotIndex == findLastGroupIndex ( pivot . getGroupId ( ) ) ) { mItems . add ( pivotIndex + _NUM , newItem ) ; } else { mItems . add ( newItem ) ; } } } } onItemsChanged ( ) ; return newItem ; }
67973	public static void writeUint8 ( OutputStream theOs , int theValue ) throws IOException { theOs . write ( theValue ) ; }
73119	private E unlinkFirst ( ) { Node < E > f = first ; if ( f == null ) return null ; Node < E > n = f . next ; E item = f . item ; f . item = null ; f . next = f ; first = n ; if ( n == null ) last = null ; else n . prev = null ; -- count ; notFull . signal ( ) ; return item ; }
18755	public void testCase11 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . add ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
53774	@ Override public void addHeader ( final String header , final String value ) { mHeadersOptions . add ( new HeaderOption ( header , value ) ) ; }
13977	public void store ( ) throws SAMLException { try { keyProvider . store ( ) ; } catch ( KeyStoreException e ) { throw new SAMLException ( e . getMessage ( ) ) ; } catch ( CertificateException e ) { throw new SAMLException ( e . getMessage ( ) ) ; } catch ( NoSuchAlgorithmException e ) { throw new SAMLException ( e . getMessage ( ) ) ; } catch ( IOException e ) { throw new SAMLException ( e . getMessage ( ) ) ; } }
36937	static void appendToPointerHierarchy ( final BaseType type , final BaseType pointer ) { Preconditions . checkNotNull ( type , _STR ) ; Preconditions . checkNotNull ( pointer , _STR ) ; Preconditions . checkArgument ( type != pointer , _STR ) ; Preconditions . checkArgument ( pointer . pointedToBy != type , _STR ) ; Preconditions . checkArgument ( type . pointsTo != pointer , _STR ) ; pointer . pointsTo = type ; type . pointedToBy = pointer ; }
51400	public static void sort ( long [ ] a ) { doSort ( a , _NUM , a . length - _NUM ) ; }
72960	public String toString ( ) { return _STR + String . format ( _STR , ValueSimilarity * _NUM ) + _STR + String . format ( _STR , ContainmentSimilarity * _NUM ) + _STR + String . format ( _STR , SizeSimilarity * _NUM ) ; }
54399	public Optional < T > last ( ) { Iterator < T > iterator = iterator ( ) ; T value = null ; while ( iterator . hasNext ( ) ) value = iterator . next ( ) ; return Optional . of ( value ) ; }
72342	public static void threadSleep ( long millis ) { try { Thread . sleep ( millis ) ; } catch ( InterruptedException ex ) { Log . e ( _STR , StringUtils . exceptionStackTraceToString ( ex ) ) ; } }
18146	public int indexOf ( Node elem , int index ) { runTo ( - _NUM ) ; if ( null == m_map ) return - _NUM ; for ( int i = index ; i < m_firstFree ; i ++ ) { Node node = m_map [ i ] ; if ( ( null != node ) && node . equals ( elem ) ) return i ; } return - _NUM ; }
84533	static boolean isPackageAccess ( final int modifiers ) { return ( modifiers & ACCESS_TEST ) == _NUM ; }
83256	public void write ( final String filename ) { PrintStream stream ; try { stream = new PrintStream ( new File ( filename ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; return ; } write ( stream ) ; stream . close ( ) ; }
80247	ManagedWindowDecorator ( Window window , String windowId ) { this . window = window ; name = _STR + windowId ; }
45510	@ Override public void write ( byte [ ] b , int off , int len ) throws IOException { while ( len > _NUM ) { int c = Math . min ( len , decoderIn . remaining ( ) ) ; decoderIn . put ( b , off , c ) ; processInput ( _BOOL ) ; len -= c ; off += c ; } if ( writeImmediately ) { flushOutput ( ) ; } }
24818	public static void log ( String message , Object ... args ) { if ( loggingEnabled ) { Log . d ( TAG , args . length == _NUM ? message : String . format ( message , args ) ) ; } }
57222	protected void processUpdates ( Queue < DeviceUpdate > updates ) { if ( updates == null ) return ; DeviceUpdate update = null ; while ( null != ( update = updates . poll ( ) ) ) { if ( logger . isTraceEnabled ( ) ) { logger . trace ( _STR , update ) ; } if ( update . change == DeviceUpdate . Change . DELETE ) { deviceSyncManager . removeDevice ( update . device ) ; } else { deviceSyncManager . storeDevice ( update . device ) ; } List < IDeviceListener > listeners = deviceListeners . getOrderedListeners ( ) ; notifyListeners ( listeners , update ) ; } }
23764	boolean handleRemoteCanRebalance ( long size ) { return _BOOL ; }
75020	public static File toSLDFile ( final File file ) { final String path = file . getAbsolutePath ( ) ; final String base = path . substring ( _NUM , path . length ( ) - _NUM ) ; String newPath = base + _STR ; File sld = new File ( newPath ) ; if ( sld . exists ( ) ) { return sld ; } newPath = base + _STR ; sld = new File ( newPath ) ; if ( sld . exists ( ) ) { return sld ; } return null ; }
24878	private String insertProperties ( String template , Map < String , String > properties ) { for ( Entry < String , String > entry : properties . entrySet ( ) ) { template = template . replace ( entry . getKey ( ) , entry . getValue ( ) ) ; } return template ; }
16824	public static void changeFont ( JComponent comp , int style ) { Font font = comp . getFont ( ) ; comp . setFont ( font . deriveFont ( style ) ) ; }
59748	public void drawContours ( Mat img , Color color ) { Drawing . drawContours ( img , contours , color ) ; }
33666	public static void saveX509Cert ( String certStr , File certFile ) throws IOException { BufferedWriter writer = new BufferedWriter ( new FileWriter ( certFile ) ) ; writer . write ( BEGIN_CERT ) ; writer . newLine ( ) ; writer . write ( certStr ) ; writer . newLine ( ) ; writer . write ( END_CERT ) ; writer . newLine ( ) ; writer . close ( ) ; }
73641	public void clearOnCentralPositionChangedListener ( ) { mOnCentralPositionChangedListeners . clear ( ) ; }
39480	public static Object invokeStatic ( Class clazz , String methodName ) throws NoSuchMethodException { try { Method method = clazz . getMethod ( methodName , new Class [ _NUM ] ) ; Object result = method . invoke ( null , new Object [ _NUM ] ) ; return result ; } catch ( IllegalAccessException e ) { throw new NoSuchMethodException ( methodName + _STR ) ; } catch ( InvocationTargetException e ) { throw new InternalError ( e . getMessage ( ) ) ; } }
70515	@ Deprecated public boolean isFillBelowLine ( ) { return mFillBelowLine . size ( ) > _NUM ; }
13640	public void onPatchServiceResult ( boolean isUpgradePatch ) { if ( ! isRetryEnable ) { TinkerLog . w ( TAG , _STR ) ; return ; } if ( ! isUpgradePatch ) { TinkerLog . w ( TAG , _STR ) ; return ; } if ( retryInfoFile . exists ( ) ) { SharePatchFileUtil . safeDeleteFile ( retryInfoFile ) ; } if ( tempPatchFile . exists ( ) ) { SharePatchFileUtil . safeDeleteFile ( tempPatchFile ) ; } }
65393	public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case _NUM : return NOTE_ID ; case _NUM : return CLASS_NAME ; case _NUM : return INTERPRETER_CONTEXT ; default : return null ; } }
52690	public static boolean isStanza ( Packet packet ) { if ( packet instanceof Message ) return _BOOL ; if ( packet instanceof IQ ) return _BOOL ; if ( packet instanceof Presence ) return _BOOL ; return _BOOL ; }
74887	@ Override public int execute ( final FormObject form , final int type , final String code , final int eventType , final char keyPressed ) { int messageCode = ActionHandler . NOMESSAGE ; if ( code instanceof String ) { final String js = code ; final String [ ] args = JSFunction . convertToArray ( js ) ; final String command = args [ _NUM ] ; if ( command . startsWith ( _STR ) ) { messageCode = handleAFCommands ( form , command , js , args , eventType , keyPressed ) ; } } return messageCode ; }
62859	private boolean needsUpdate ( Long bundleVersion , String beanVersion ) { if ( beanVersion . contains ( _STR ) ) { Log . i ( TAG , _STR + bundleVersion ) ; Log . i ( TAG , _STR + beanVersion ) ; return _BOOL ; } else { try { long parsedVersion = Long . parseLong ( beanVersion . split ( _STR ) [ _NUM ] ) ; Log . i ( TAG , _STR + bundleVersion ) ; Log . i ( TAG , _STR + parsedVersion ) ; if ( bundleVersion > parsedVersion ) { return _BOOL ; } else { Log . i ( TAG , _STR ) ; } } catch ( NumberFormatException e ) { Log . e ( TAG , _STR + beanVersion ) ; fail ( BeanError . UNPARSABLE_FW_VERSION ) ; } } return _BOOL ; }
15520	public void clear ( FacesContext facesContext , Map < String , Object > viewMap ) { if ( LOGGER . isLoggable ( Level . FINEST ) ) { LOGGER . log ( Level . FINEST , _STR ) ; } Map < String , ViewScopeContextObject > contextMap = getContextMap ( facesContext , viewMap ) ; if ( contextMap != null ) { destroyBeans ( viewMap , contextMap ) ; } }
52476	public void loadLogicalTablesWithGranularities ( Map < String , TableGroup > nameGroupMap , Set < ? extends Granularity > validGrains , ResourceDictionaries dictionaries ) { for ( Map . Entry < String , TableGroup > entry : nameGroupMap . entrySet ( ) ) { String logicalTableName = entry . getKey ( ) ; TableGroup group = entry . getValue ( ) ; loadLogicalTableWithGranularities ( logicalTableName , group , validGrains , dictionaries ) ; } }
1180	protected int readBlock ( ) { blockSize = read ( ) ; int n = _NUM ; if ( blockSize > _NUM ) { try { int count = _NUM ; while ( n < blockSize ) { count = in . read ( block , n , blockSize - n ) ; if ( count == - _NUM ) break ; n += count ; } } catch ( IOException e ) { } if ( n < blockSize ) { status = STATUS_FORMAT_ERROR ; } } return n ; }
42793	@ Override public void addNewSubscription ( final Subscription newSubscription ) { final String clientID = newSubscription . getClientId ( ) ; List < ClientTopicCouple > clientSubscriptions = subscriptions . get ( clientID ) ; if ( clientSubscriptions == null ) { clientSubscriptions = new ArrayList < > ( ) ; subscriptions . put ( clientID , clientSubscriptions ) ; } clientSubscriptions . add ( newSubscription . asClientTopicCouple ( ) ) ; }
57391	public X509CertPathImpl ( List < ? extends java . security . cert . Certificate > certs ) throws CertificateException { super ( _STR ) ; final int size = certs . size ( ) ; certificates = new ArrayList < X509Certificate > ( size ) ; for ( int i = _NUM ; i < size ; i ++ ) { final java . security . cert . Certificate cert = certs . get ( i ) ; if ( ! ( cert instanceof X509Certificate ) ) { throw new CertificateException ( _STR + i + _STR ) ; } certificates . add ( ( X509Certificate ) cert ) ; } }
36204	public Process ( final String xmlString ) throws IOException , XMLException { initContext ( ) ; StringReader in = new StringReader ( xmlString ) ; readProcess ( in ) ; in . close ( ) ; }
40845	public ConsulTopologyFraction ( ) { this . url = DEFAULT_URL ; }
10391	protected String buildQualifierRegex ( String qualifierValue ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( _STR ) ; sb . append ( qualifierValue ) ; sb . append ( _STR ) ; return sb . toString ( ) ; }
71614	public String shortenName ( String name , int desiredLength ) { int originalLength = name . length ( ) ; if ( ( desiredLength <= _NUM ) || ( originalLength <= desiredLength ) ) { return name ; } int delta = originalLength - desiredLength ; int startCut = desiredLength / _NUM ; StringBuffer result = new StringBuffer ( ) ; result . append ( name . substring ( _NUM , startCut ) ) ; if ( ( ( startCut == _NUM ) || ( name . charAt ( startCut - _NUM ) != _STR ) ) && ( ( startCut + delta + _NUM == originalLength ) || ( name . charAt ( startCut + delta + _NUM ) != _STR ) ) ) { result . append ( _STR ) ; } result . append ( name . substring ( startCut + delta + _NUM , originalLength ) ) ; return result . toString ( ) ; }
28366	public static Color blend ( Color color1 , Color color2 , double weight ) { double w2 = MathUtils . limit ( weight , _NUM , _NUM ) ; double w1 = _NUM - w2 ; int r = ( int ) Math . round ( w1 * color1 . getRed ( ) + w2 * color2 . getRed ( ) ) ; int g = ( int ) Math . round ( w1 * color1 . getGreen ( ) + w2 * color2 . getGreen ( ) ) ; int b = ( int ) Math . round ( w1 * color1 . getBlue ( ) + w2 * color2 . getBlue ( ) ) ; int a = ( int ) Math . round ( w1 * color1 . getAlpha ( ) + w2 * color2 . getAlpha ( ) ) ; return new Color ( r , g , b , a ) ; }
28663	public long kstkeip ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
5014	private void decideUILookAndFeel ( MainOptions options ) { try { boolean systemPlaf = _BOOL ; systemPlaf = options . system_plaf ; String systemPlafReq = System . getenv ( _STR ) ; if ( systemPlafReq != null && systemPlafReq . equalsIgnoreCase ( _STR ) ) systemPlaf = _BOOL ; if ( systemPlaf ) UIManager . setLookAndFeel ( UIManager . getSystemLookAndFeelClassName ( ) ) ; } catch ( Exception exc ) { exc . printStackTrace ( ) ; } }
62571	public static BufferedImage toBufferedImage ( Image img , int type ) { if ( img instanceof BufferedImage ) { return ( BufferedImage ) img ; } BufferedImage bimage = new BufferedImage ( img . getWidth ( null ) , img . getHeight ( null ) , type ) ; Graphics2D bGr = bimage . createGraphics ( ) ; bGr . drawImage ( img , _NUM , _NUM , null ) ; bGr . dispose ( ) ; return bimage ; }
54372	private JSONArray readArray ( ) throws JSONException { JSONArray result = new JSONArray ( ) ; boolean hasTrailingSeparator = _BOOL ; while ( _BOOL ) { switch ( nextCleanInternal ( ) ) { case - _NUM : throw syntaxError ( _STR ) ; case _STR : if ( hasTrailingSeparator ) { result . put ( null ) ; } return result ; case _STR : case _STR : result . put ( null ) ; hasTrailingSeparator = _BOOL ; continue ; default : pos -- ; } result . put ( nextValue ( ) ) ; switch ( nextCleanInternal ( ) ) { case _STR : return result ; case _STR : case _STR : hasTrailingSeparator = _BOOL ; continue ; default : throw syntaxError ( _STR ) ; } } }
85654	public static byte [ ] hexStringToByteArray ( String strA ) { ByteArrayOutputStream result = new ByteArrayOutputStream ( ) ; byte sum = ( byte ) _NUM ; boolean nextCharIsUpper = _BOOL ; for ( int i = _NUM ; i < strA . length ( ) ; i ++ ) { char c = strA . charAt ( i ) ; switch ( Character . toUpperCase ( c ) ) { case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; case _STR : if ( nextCharIsUpper ) { sum = ( byte ) _NUM ; nextCharIsUpper = _BOOL ; } else { sum |= ( byte ) _NUM ; result . write ( sum ) ; nextCharIsUpper = _BOOL ; } break ; default : break ; } } if ( ! nextCharIsUpper ) { throw new RuntimeException ( _STR ) ; } return result . toByteArray ( ) ; }
26727	public List < Node > listAvailableTerminals ( Class < ? > type ) { List < Node > result = new ArrayList < Node > ( ) ; for ( Node node : availableNodes ) { if ( ( node . getNumberOfArguments ( ) == _NUM ) && type . isAssignableFrom ( node . getReturnType ( ) ) ) { result . add ( node ) ; } } return result ; }
73194	public void removeSensorSelectionListener ( SensorSelectionListener listener ) { listenerList . remove ( SensorSelectionListener . class , listener ) ; }
29428	public void write ( int c ) throws IOException { if ( _output == null ) throw new IOException ( _STR ) ; _output . append ( ( char ) c ) ; }
19434	private static void testDexClassLoader ( ) { ClassLoader dexClassLoader = getDexClassLoader ( ) ; Class anotherClass ; try { anotherClass = dexClassLoader . loadClass ( _STR ) ; } catch ( ClassNotFoundException cnfe ) { throw new RuntimeException ( _STR ) ; } Object another ; try { another = anotherClass . newInstance ( ) ; } catch ( IllegalAccessException ie ) { throw new RuntimeException ( _STR , ie ) ; } catch ( InstantiationException ie ) { throw new RuntimeException ( _STR , ie ) ; } dexClassLoader . getResource ( _STR ) ; }
32183	public void register ( GridCacheTtlManager mgr ) { synchronized ( mux ) { if ( cleanupWorker == null ) startCleanupWorker ( ) ; mgrs . add ( mgr ) ; } }
26434	public static java . sql . Time toSqlTime ( int hour , int minute , int second ) { java . util . Date newDate = toDate ( _NUM , _NUM , _NUM , hour , minute , second ) ; if ( newDate != null ) { return new java . sql . Time ( newDate . getTime ( ) ) ; } else { return null ; } }
14445	public void initializeKeyStore ( ) { try { Logger logger = ( com . sun . identity . log . Logger ) Logger . getLogger ( logName ) ; resetCurrentFileList ( logName ) ; addToCurrentFileList ( logName , logName , logName ) ; String logPath = lmanager . getProperty ( LogConstants . LOG_LOCATION ) ; if ( ! logPath . endsWith ( _STR ) ) logPath += _STR ; String fileName = logName ; String loggerFileName = logPath + PREFIX + _STR + fileName ; String verifierFileName = logPath + PREFIX + _STR + fileName ; Debug . message ( logName + _STR + loggerFileName ) ; Debug . message ( logName + _STR + verifierFileName ) ; helper . initializeSecureLogHelper ( loggerFileName , logPassword , verifierFileName , logPassword ) ; Debug . message ( logName + _STR ) ; helper . initializeVerifier ( verifierFileName , logPassword , verPassword ) ; Debug . message ( logName + _STR ) ; } catch ( Exception e ) { Debug . error ( logName + _STR , e ) ; } }
49308	private native byte [ ] imageDataToPlatformImageBytes ( byte [ ] imageData , int width , int height , long format ) ;
59833	public void writeExif ( Bitmap bmap , OutputStream exifOutStream ) throws IOException { if ( bmap == null || exifOutStream == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = getExifWriterStream ( exifOutStream ) ; bmap . compress ( Bitmap . CompressFormat . JPEG , _NUM , s ) ; s . flush ( ) ; }
16889	public static String cleanFolderStackingMarkers ( String filename ) { if ( ! StringUtils . isEmpty ( filename ) ) { Matcher m = folderStackingPattern . matcher ( filename ) ; if ( m . matches ( ) ) { return m . group ( _NUM ) + m . group ( _NUM ) ; } } return filename ; }
30932	public void discard ( ServiceRegistrar reg ) { synchronized ( registrars ) { if ( terminated ) { throw new IllegalStateException ( _STR ) ; } if ( reg == null ) return ; sendDiscarded ( reg , null ) ; } }
13113	public boolean isFinalState ( int state ) { return ( state < _NUM ) ? _BOOL : fFinalStateFlags [ state ] ; }
4234	public static String generateScaleMarkers ( int proteinLength , int maxNumScaleMarkers ) { if ( maxNumScaleMarkers < _NUM ) { maxNumScaleMarkers = _NUM ; } int scale = calcScale ( proteinLength , maxNumScaleMarkers ) ; StringBuilder sb = new StringBuilder ( _STR ) ; int index = _NUM ; int numRemaining = proteinLength ; while ( index <= proteinLength ) { index += scale ; numRemaining -= scale ; sb . append ( _STR ) ; if ( ( numRemaining > _NUM ) && ( numRemaining < scale ) ) { if ( numRemaining < ( scale / _NUM ) ) { sb . append ( proteinLength ) ; break ; } } if ( index >= proteinLength ) { sb . append ( proteinLength ) ; } else { sb . append ( index ) ; } } return sb . toString ( ) ; }
54613	public void writeFigTreeBlock ( Map < String , Object > settings ) throws IOException { writer . println ( _STR ) ; for ( String key : settings . keySet ( ) ) { Object value = settings . get ( key ) ; writer . println ( _STR + key + _STR + createString ( value ) + _STR ) ; } writer . println ( _STR ) ; }
49078	public int hashCode ( ) { return font . hashCode ( ) ^ glyphs . length ; }
84081	public boolean equals ( Object obj ) { if ( obj == this ) { return _BOOL ; } if ( obj instanceof Map == _BOOL ) { return _BOOL ; } Map map = ( Map ) obj ; if ( map . size ( ) != size ( ) ) { return _BOOL ; } MapIterator it = mapIterator ( ) ; try { while ( it . hasNext ( ) ) { Object key = it . next ( ) ; Object value = it . getValue ( ) ; if ( value == null ) { if ( map . get ( key ) != null || map . containsKey ( key ) == _BOOL ) { return _BOOL ; } } else { if ( value . equals ( map . get ( key ) ) == _BOOL ) { return _BOOL ; } } } } catch ( ClassCastException ignored ) { return _BOOL ; } catch ( NullPointerException ignored ) { return _BOOL ; } return _BOOL ; }
13277	@ Override public void doctypeDecl ( String rootElement , String publicId , String systemId , Augmentations augs ) throws XNIException { fInDTD = _BOOL ; try { if ( fLexicalHandler != null ) { fLexicalHandler . startDTD ( rootElement , publicId , systemId ) ; } } catch ( SAXException e ) { throw new XNIException ( e ) ; } if ( fDeclHandler != null ) { fDeclaredAttrs = new SymbolHash ( ) ; } }
72263	public void writeExif ( byte [ ] jpeg , String exifOutFileName ) throws FileNotFoundException , IOException { if ( jpeg == null || exifOutFileName == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = null ; try { s = getExifWriterStream ( exifOutFileName ) ; s . write ( jpeg , _NUM , jpeg . length ) ; s . flush ( ) ; } catch ( IOException e ) { closeSilently ( s ) ; throw e ; } s . close ( ) ; }
66212	public void cleanStart ( ) { Connection conn = getConnection ( _BOOL , _BOOL ) ; if ( conn == null ) throw new IllegalStateException ( _STR ) ; dropDatabase ( conn ) ; createUser ( conn ) ; createDatabase ( conn ) ; try { if ( conn != null ) conn . close ( ) ; } catch ( SQLException e2 ) { log . log ( Level . SEVERE , _STR , e2 ) ; } conn = null ; }
65300	static TemplateModelException newMethodArgInvalidValueException ( String methodName , int argIdx , Object ... details ) { return new _TemplateModelException ( methodName , _STR , Integer . valueOf ( argIdx + _NUM ) , _STR , details ) ; }
77756	public static byte [ ] compressForZlib ( String stringToCompress ) { byte [ ] returnValues = null ; try { returnValues = compressForZlib ( stringToCompress . getBytes ( _STR ) ) ; } catch ( UnsupportedEncodingException uee ) { uee . printStackTrace ( ) ; } return returnValues ; }
23215	private void loadMap ( String extension , String mimeType ) { if ( ! mimeTypeToExtensionMap . containsKey ( mimeType ) ) { mimeTypeToExtensionMap . put ( mimeType , extension ) ; } extensionToMimeTypeMap . put ( extension , mimeType ) ; if ( isImageType ( mimeType ) ) { imageMimeTypeSet . add ( mimeType ) ; } }
45273	public void startDTD ( String name , String publicId , String systemId ) throws org . xml . sax . SAXException { }
34391	private String convertTimestamp ( ) { String result = timestampFormat . replaceAll ( VALID_DATEFORMAT_CHAR_PATTERN + _STR , _STR ) ; result = result . replaceAll ( Pattern . quote ( _STR ) , _STR ) ; return result ; }
49545	public static String encode ( byte [ ] bytes ) { int len = bytes . length ; final StringBuffer encoded = new StringBuffer ( ( len + _NUM ) / _NUM * _NUM ) ; int i = _NUM ; int j = len ; while ( j >= _NUM ) { encoded . append ( to64 ( ( ( ( bytes [ i ] & _NUM ) << _NUM ) | ( int ) ( ( bytes [ i + _NUM ] & _NUM ) << _NUM ) | ( int ) ( bytes [ i + _NUM ] & _NUM ) ) , _NUM ) ) ; i += _NUM ; j -= _NUM ; } if ( j == _NUM ) { encoded . append ( to64 ( ( ( bytes [ i ] & _NUM ) << _NUM ) | ( ( bytes [ i + _NUM ] & _NUM ) ) , _NUM ) ) ; } if ( j == _NUM ) { encoded . append ( to64 ( ( ( bytes [ i ] & _NUM ) ) , _NUM ) ) ; } return encoded . toString ( ) ; }
3653	final public void print ( double v ) { Writer out = this . out ; if ( out == null ) return ; try { String s = String . valueOf ( v ) ; out . write ( s , _NUM , s . length ( ) ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } }
24453	public String toString ( ) { StringBuffer result = new StringBuffer ( ipAddress . toString ( ) ) ; result . append ( _STR ) ; result . append ( extendedNetworkPrefix ) ; return result . toString ( ) ; }
40610	private static boolean containsChroot ( String zkHost ) { return zkHost . contains ( _STR ) ; }
53975	public static void onDatabase ( MongoClient client , String dbName , Consumer < MongoDatabase > dbOperation ) { if ( contains ( client . listDatabaseNames ( ) , dbName ) ) { dbOperation . accept ( client . getDatabase ( dbName ) ) ; } }
71644	protected int createHashCode ( ) { int result = uri . hashCode ( ) ^ prefix . hashCode ( ) ; if ( result == _NUM ) { result = _NUM ; } return result ; }
6096	private void updateBaseMatrix ( Drawable d ) { ImageView imageView = getImageView ( ) ; if ( null == imageView || null == d ) { return ; } final float viewWidth = imageView . getWidth ( ) ; final float viewHeight = imageView . getHeight ( ) ; final int drawableWidth = d . getIntrinsicWidth ( ) ; final int drawableHeight = d . getIntrinsicHeight ( ) ; mBaseMatrix . reset ( ) ; final float widthScale = viewWidth / drawableWidth ; final float heightScale = viewHeight / drawableHeight ; if ( mScaleType == ScaleType . CENTER ) { mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth ) / _NUM , ( viewHeight - drawableHeight ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_CROP ) { float scale = Math . max ( widthScale , heightScale ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_INSIDE ) { float scale = Math . min ( _NUM , Math . min ( widthScale , heightScale ) ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else { RectF mTempSrc = new RectF ( _NUM , _NUM , drawableWidth , drawableHeight ) ; RectF mTempDst = new RectF ( _NUM , _NUM , viewWidth , viewHeight ) ; switch ( mScaleType ) { case FIT_CENTER : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . CENTER ) ; break ; case FIT_START : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . START ) ; break ; case FIT_END : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . END ) ; break ; case FIT_XY : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . FILL ) ; break ; default : break ; } } resetMatrix ( ) ; }
70434	public static PlaceholderFragment newInstance ( int sectionNumber ) { PlaceholderFragment fragment = new PlaceholderFragment ( ) ; Bundle args = new Bundle ( ) ; args . putInt ( ARG_SECTION_NUMBER , sectionNumber ) ; fragment . setArguments ( args ) ; return fragment ; }
65733	public String importTrl ( String directory , int AD_Client_ID , String AD_Language , String Trl_Table ) { String fileName = directory + File . separator + Trl_Table + _STR + AD_Language + _STR ; log . info ( fileName ) ; File in = new File ( fileName ) ; if ( ! in . exists ( ) ) { String msg = _STR + fileName ; log . log ( Level . SEVERE , msg ) ; return msg ; } try { TranslationHandler handler = new TranslationHandler ( AD_Client_ID ) ; SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; SAXParser parser = factory . newSAXParser ( ) ; parser . parse ( in , handler ) ; log . info ( _STR + handler . getUpdateCount ( ) ) ; return Msg . getMsg ( m_ctx , _STR ) + _STR + handler . getUpdateCount ( ) ; } catch ( Exception e ) { log . log ( Level . SEVERE , _STR , e ) ; return e . toString ( ) ; } }
42995	public ResultFileReader ( Problem problem , File file ) throws IOException { super ( ) ; this . problem = problem ; reader = new BufferedReader ( new FileReader ( file ) ) ; line = reader . readLine ( ) ; }
35508	@ Override public void onFailure ( IMqttToken asyncActionToken , Throwable exception ) { exception . printStackTrace ( ) ; Log . e ( _STR , _STR + exception . getMessage ( ) ) ; onDisconnect ( _BOOL ) ; }
67222	@ Override public boolean exclude ( String identifier ) { return blacklist . contains ( identifier ) ; }
77442	public static boolean checkCommunicationError ( Exception exc ) { Throwable rootCause = SolrException . getRootCause ( exc ) ; boolean wasCommError = ( rootCause instanceof ConnectException || rootCause instanceof ConnectTimeoutException || rootCause instanceof NoHttpResponseException || rootCause instanceof SocketException ) ; return wasCommError ; }
23127	public boolean isReliable ( ) { return _BOOL ; }
35962	private void push ( final int type ) { if ( outputStack == null ) { outputStack = new int [ _NUM ] ; } int n = outputStack . length ; if ( outputStackTop >= n ) { int [ ] t = new int [ Math . max ( outputStackTop + _NUM , _NUM * n ) ] ; System . arraycopy ( outputStack , _NUM , t , _NUM , n ) ; outputStack = t ; } outputStack [ outputStackTop ++ ] = type ; int top = owner . inputStackTop + outputStackTop ; if ( top > owner . outputStackMax ) { owner . outputStackMax = top ; } }
44925	static private String SHORT_Max_Plus ( ) { long tempValue = Short . MAX_VALUE + _NUM ; return String . valueOf ( tempValue ) ; }
11110	public void firePropertyChange ( String name , Object oldValue , Object newValue ) { beanContextChildSupport . firePropertyChange ( name , oldValue , newValue ) ; }
72786	public static String encode ( String value ) { value = value . replace ( _STR , _STR ) ; value = value . replace ( _STR , _STR ) ; value = value . replace ( _STR , _STR ) ; value = value . replace ( _STR , _STR ) ; value = value . replace ( _STR , _STR ) ; value = value . replace ( _STR , _STR ) ; return value ; }
56869	public void createDatabaseEntitiesForStoragePolicyTesting ( ) { createDatabaseEntitiesForStoragePolicyTesting ( AbstractServiceTest . STORAGE_POLICY_NAMESPACE_CD , Arrays . asList ( AbstractServiceTest . STORAGE_POLICY_RULE_TYPE ) , AbstractServiceTest . BDEF_NAMESPACE , AbstractServiceTest . BDEF_NAME , Arrays . asList ( AbstractServiceTest . FORMAT_FILE_TYPE_CODE ) , Arrays . asList ( AbstractServiceTest . STORAGE_NAME ) , Arrays . asList ( AbstractServiceTest . STORAGE_NAME_2 ) ) ; }
68785	private PDFPage createPage ( int pagenum , PDFObject pageObj ) throws IOException { int rotation = _NUM ; RectF mediabox = null ; RectF cropbox = null ; PDFObject mediaboxObj = getInheritedValue ( pageObj , _STR ) ; if ( mediaboxObj != null ) { mediabox = parseRect ( mediaboxObj ) ; } PDFObject cropboxObj = getInheritedValue ( pageObj , _STR ) ; if ( cropboxObj != null ) { cropbox = parseRect ( cropboxObj ) ; } PDFObject rotateObj = getInheritedValue ( pageObj , _STR ) ; if ( rotateObj != null ) { rotation = rotateObj . getIntValue ( ) ; } RectF bbox = ( ( cropbox == null ) ? mediabox : cropbox ) ; return new PDFPage ( pagenum , bbox , rotation , cache ) ; }
14623	static Map addElementToMap ( String key , Set values , Map toMap ) { if ( ( key != null ) && ( toMap != null ) ) { toMap . put ( key , values ) ; } return toMap ; }
80102	public void saveBootProp ( ) throws IOException { if ( ! bootProp . equals ( bootPropOrg ) ) { final String propFile = jarFolder + _STR ; final OutputStream os = new FileOutputStream ( propFile ) ; try { bootProp . store ( os , _STR ) ; } finally { os . close ( ) ; } } }
45278	private int append ( FileSystem fs , Configuration conf , Path src , PrintWriter writer , int currentRecordNumber ) throws IOException { BufferedReader reader = new BufferedReader ( new InputStreamReader ( fs . open ( src ) ) ) ; try { String line = reader . readLine ( ) ; while ( line != null ) { if ( line . startsWith ( _STR ) ) { line = _STR + currentRecordNumber ++ ; } writer . println ( line ) ; line = reader . readLine ( ) ; } return currentRecordNumber ; } finally { reader . close ( ) ; } }
51144	public PacketOutputStream writeTimestampLength ( final Calendar calendar , Timestamp ts , boolean fractionalSeconds ) { assureBufferCapacity ( fractionalSeconds ? _NUM : _NUM ) ; buffer . put ( ( byte ) ( fractionalSeconds ? _NUM : _NUM ) ) ; buffer . putShort ( ( short ) calendar . get ( Calendar . YEAR ) ) ; buffer . put ( ( byte ) ( ( calendar . get ( Calendar . MONTH ) + _NUM ) & _NUM ) ) ; buffer . put ( ( byte ) ( calendar . get ( Calendar . DAY_OF_MONTH ) & _NUM ) ) ; buffer . put ( ( byte ) calendar . get ( Calendar . HOUR_OF_DAY ) ) ; buffer . put ( ( byte ) calendar . get ( Calendar . MINUTE ) ) ; buffer . put ( ( byte ) calendar . get ( Calendar . SECOND ) ) ; if ( fractionalSeconds ) { buffer . putInt ( ts . getNanos ( ) / _NUM ) ; } return this ; }
18427	public int difference ( String s1 , String s2 ) throws EncoderException { return SoundexUtils . difference ( this , s1 , s2 ) ; }
4828	public static String morpha ( String text , boolean tags ) { if ( text . isEmpty ( ) ) { return _STR ; } String [ ] textParts = whitespace . split ( text ) ; StringBuilder result = new StringBuilder ( ) ; try { for ( String textPart : textParts ) { Morpha morpha = new Morpha ( new StringReader ( textPart ) , tags ) ; if ( result . length ( ) != _NUM ) { result . append ( _STR ) ; } result . append ( morpha . next ( ) ) ; } } catch ( Error e ) { return text ; } catch ( java . io . IOException e ) { return text ; } return result . toString ( ) ; }
9221	public static void deleteFile ( File file ) throws AdeUsageException { if ( ! file . delete ( ) ) { throw new AdeUsageException ( FAILED_DELETING_FILE + file . getPath ( ) ) ; } }
6477	public Shape createCheckMark ( final int x , final int y , final int w , final int h ) { double xf = w / _NUM ; double hf = h / _NUM ; path . reset ( ) ; path . moveTo ( x , y + _NUM * hf ) ; path . lineTo ( x + _NUM * xf , y + _NUM * hf ) ; path . lineTo ( x + _NUM * xf , y + _NUM * hf ) ; path . lineTo ( x + _NUM * xf , y ) ; path . lineTo ( x + _NUM * xf , y ) ; path . lineTo ( x + _NUM * xf , y + _NUM * hf ) ; path . closePath ( ) ; return path ; }
52423	@ Override public synchronized void initialize ( ) { if ( ! mRootDirectory . exists ( ) ) { if ( ! mRootDirectory . mkdirs ( ) ) { VolleyLog . e ( _STR , mRootDirectory . getAbsolutePath ( ) ) ; } return ; } File [ ] files = mRootDirectory . listFiles ( ) ; if ( files == null ) { return ; } for ( File file : files ) { FileInputStream fis = null ; try { fis = new FileInputStream ( file ) ; CacheHeader entry = CacheHeader . readHeader ( fis ) ; entry . size = file . length ( ) ; putEntry ( entry . key , entry ) ; } catch ( IOException e ) { if ( file != null ) { file . delete ( ) ; } } finally { try { if ( fis != null ) { fis . close ( ) ; } } catch ( IOException ignored ) { } } } }
27059	public TCPChannelClient ( ExecutorService executor , TCPChannelEvents eventListener , String ip , int port ) { this . executor = executor ; executorThreadCheck = new ThreadUtils . ThreadChecker ( ) ; executorThreadCheck . detachThread ( ) ; this . eventListener = eventListener ; InetAddress address ; try { address = InetAddress . getByName ( ip ) ; } catch ( UnknownHostException e ) { reportError ( _STR ) ; return ; } if ( address . isAnyLocalAddress ( ) ) { socket = new TCPSocketServer ( address , port ) ; } else { socket = new TCPSocketClient ( address , port ) ; } socket . start ( ) ; }
11343	protected void cutSelectedBean ( ) { if ( Debug . debugging ( _STR ) ) Debug . output ( _STR ) ; if ( selectedBean == null || selectedBeanLocation == null ) { if ( Debug . debugging ( _STR ) ) Debug . output ( _STR + selectedBean ) ; if ( Debug . debugging ( _STR ) ) Debug . output ( _STR + selectedBeanLocation ) ; clearSelection ( ) ; return ; } try { serBean = new ByteArrayOutputStream ( ) ; ObjectOutputStream oos = new ObjectOutputStream ( serBean ) ; oos . writeObject ( selectedBean ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; clearSelection ( ) ; if ( Debug . debugging ( _STR ) ) Debug . output ( _STR ) ; return ; } cutBean = selectedBean ; selectedBeanBox . showCut ( selectedBean ) ; if ( Debug . debugging ( _STR ) ) Debug . output ( _STR ) ; }
33245	public RemoverManager track ( Remover remover ) { if ( handlers == null ) { handlers = new ArrayList < > ( ) ; } handlers . add ( remover ) ; return this ; }
11319	public void actionPerformed ( java . awt . event . ActionEvent e ) { Object source = e . getSource ( ) ; if ( ! ( source instanceof JMenuItem ) ) return ; JMenuItem mi = ( JMenuItem ) source ; String name = mi . getText ( ) ; OMGraphicHandlerLayer targetLayer = ( OMGraphicHandlerLayer ) layers . get ( name ) ; if ( targetLayer == null ) { Debug . message ( _STR , _STR + _STR + name ) ; return ; } targetLayer . doAction ( ( OMGraphic ) transferData , new OMAction ( OMAction . UPDATE_GRAPHIC_MASK ) ) ; }
20227	private void addEntry ( ) { model . addNewEntry ( ) ; removeButton . setEnabled ( _BOOL ) ; }
52804	private void ensureSize ( ) { if ( children == EMPTY_CHILDREN ) { children = new FPNode [ _NUM ] ; return ; } int newsize = children . length == _NUM ? INITIAL_SIZE : ( children . length << _NUM ) ; children = Arrays . copyOf ( children , newsize ) ; }
51409	public UUID ( long mostSigBits , long leastSigBits ) { this . mostSigBits = mostSigBits ; this . leastSigBits = leastSigBits ; init ( ) ; }
111	public static PrettyPrint indentWithSpaces ( int number ) { if ( number < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } char [ ] chars = new char [ number ] ; Arrays . fill ( chars , _STR ) ; return new PrettyPrint ( chars ) ; }
15480	private static void renderHandler ( FacesContext context , UIComponent component , Collection < ClientBehaviorContext . Parameter > params , String handlerName , Object handlerValue , String behaviorEventName , String submitTarget , boolean needsSubmit , boolean includeExec ) throws IOException { ResponseWriter writer = context . getResponseWriter ( ) ; String userHandler = getNonEmptyUserHandler ( handlerValue ) ; List < ClientBehavior > behaviors = getClientBehaviors ( component , behaviorEventName ) ; if ( ( null != behaviors ) && ( behaviors . size ( ) > _NUM ) && Util . componentIsDisabled ( component ) ) { behaviors = null ; } if ( params == null ) { params = Collections . emptyList ( ) ; } String handler = null ; switch ( getHandlerType ( behaviors , params , userHandler , needsSubmit , includeExec ) ) { case USER_HANDLER_ONLY : handler = userHandler ; break ; case SINGLE_BEHAVIOR_ONLY : handler = getSingleBehaviorHandler ( context , component , behaviors . get ( _NUM ) , params , behaviorEventName , submitTarget , needsSubmit ) ; break ; case SUBMIT_ONLY : handler = getSubmitHandler ( context , component , params , submitTarget , _BOOL ) ; break ; case CHAIN : handler = getChainedHandler ( context , component , behaviors , params , behaviorEventName , userHandler , submitTarget , needsSubmit ) ; break ; default : assert ( _BOOL ) ; } writer . writeAttribute ( handlerName , handler , null ) ; }
82934	public String constructTSDBMetricName ( ) { StringBuilder sb = new StringBuilder ( getScope ( ) ) ; if ( _namespace != null && ! _namespace . isEmpty ( ) ) { sb . append ( getNamespace ( ) ) ; } return sb . toString ( ) ; }
2832	@ Override protected void registerNewSelector ( ) throws IOException { synchronized ( selector ) { Set < SelectionKey > keys = selector . keys ( ) ; Selector newSelector = null ; if ( selectorProvider == null ) { newSelector = Selector . open ( ) ; } else { newSelector = selectorProvider . openSelector ( ) ; } for ( SelectionKey key : keys ) { SelectableChannel ch = key . channel ( ) ; NioSession session = ( NioSession ) key . attachment ( ) ; SelectionKey newKey = ch . register ( newSelector , key . interestOps ( ) , session ) ; session . setSelectionKey ( newKey ) ; } selector . close ( ) ; selector = newSelector ; } }
18907	public void testCase4 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , - _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . multiply ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
55240	protected synchronized void received ( int responseCode , String stream , String json ) { FollowerInfo result = parseFollowers ( stream , json ) ; if ( result != null ) { noError ( stream ) ; cached . put ( stream , result ) ; if ( type == Follower . Type . FOLLOWER ) { listener . receivedFollowers ( result ) ; if ( hasNewFollowers ( result . followers ) ) { listener . newFollowers ( result ) ; } } else if ( type == Follower . Type . SUBSCRIBER ) { listener . receivedSubscribers ( result ) ; } requested . add ( stream ) ; } else { String errorMessage = _STR ; if ( responseCode == _NUM ) { errorMessage = _STR ; error ( stream , _NUM ) ; } else if ( responseCode == _NUM ) { errorMessage = _STR ; error ( stream , _NUM ) ; } else if ( responseCode == _NUM || responseCode == _NUM ) { errorMessage = _STR ; error ( stream , _NUM ) ; } else if ( responseCode == _NUM ) { errorMessage = _STR ; error ( stream , _NUM ) ; } else { errorMessage = _STR ; error ( stream , _NUM ) ; } FollowerInfo errorResult = new FollowerInfo ( type , stream , errorMessage ) ; cached . put ( stream , errorResult ) ; if ( type == Follower . Type . FOLLOWER ) { listener . receivedFollowers ( errorResult ) ; } else if ( type == Follower . Type . SUBSCRIBER ) { listener . receivedSubscribers ( errorResult ) ; } } }
30063	public static < T > List < T > select ( Connection connection , String rawSqlQuery , RowProcessor < T > rowProcessor , Object ... parameters ) throws IOException , SQLException { PreparedStatement stmt = null ; ResultSet rs = null ; try { stmt = connection . prepareStatement ( rawSqlQuery ) ; for ( int index = _NUM ; index < parameters . length ; index ++ ) { JdbcUtils . bindParameter ( stmt , index + _NUM , parameters [ index ] ) ; } rs = stmt . executeQuery ( ) ; List < T > result = Lists . newLinkedList ( ) ; while ( rs . next ( ) ) { result . add ( rowProcessor . process ( rs ) ) ; } return result ; } finally { JdbcUtils . closeResultSet ( rs ) ; JdbcUtils . closeStatement ( stmt ) ; } }
44796	public static long nowInNanos ( ) { return System . nanoTime ( ) ; }
59058	public void test_clone ( ) { Format fm = new MockFormat ( ) ; Format fmc = ( Format ) fm . clone ( ) ; assertEquals ( fm . getClass ( ) , fmc . getClass ( ) ) ; }
57203	public Future < SyncReply > sendRequest ( int xid , SyncMessage request ) throws RemoteStoreException { ensureConnected ( ) ; RemoteSyncFuture future = new RemoteSyncFuture ( xid , connectionGeneration ) ; futureMap . put ( Integer . valueOf ( xid ) , future ) ; if ( futureMap . size ( ) > MAX_PENDING_REQUESTS ) { synchronized ( futureNotify ) { while ( futureMap . size ( ) > MAX_PENDING_REQUESTS ) { try { futureNotify . wait ( ) ; } catch ( InterruptedException e ) { throw new RemoteStoreException ( _STR , e ) ; } } } } channel . writeAndFlush ( request ) ; return future ; }
34343	public static boolean isEmpty ( String str ) { return ( null == str || _NUM == str . length ( ) ) ; }
60806	private static final boolean compareAndSetWaitStatus ( Node node , int expect , int update ) { return unsafe . compareAndSwapInt ( node , waitStatusOffset , expect , update ) ; }
39084	public void enableDependency ( Capability c ) { if ( doNotCheckCapabilities ( ) ) { return ; } if ( c == Capability . NOMINAL_ATTRIBUTES ) { enableDependency ( Capability . BINARY_ATTRIBUTES ) ; } else if ( c == Capability . BINARY_ATTRIBUTES ) { enableDependency ( Capability . UNARY_ATTRIBUTES ) ; } else if ( c == Capability . UNARY_ATTRIBUTES ) { enableDependency ( Capability . EMPTY_NOMINAL_ATTRIBUTES ) ; } else if ( c == Capability . NOMINAL_CLASS ) { enableDependency ( Capability . BINARY_CLASS ) ; } m_Dependencies . add ( c ) ; }
71281	public IVariable [ ] extractRobotDebugVariables ( final int stackTraceId , final Map < String , Object > newVariables ) { final RobotDebugVariablesContext currentVariablesContext = findCurrentVariablesContext ( stackTraceId ) ; Map < String , IVariable > previousVariablesMap = initPreviousVariablesState ( currentVariablesContext ) ; final Map < String , IVariable > nonGlobalVariablesMap = new LinkedHashMap < > ( ) ; if ( previousVariablesMap == null ) { initNewNonGlobalVariables ( newVariables , nonGlobalVariablesMap ) ; } else { initVariablesComparingWithPreviousState ( newVariables , previousVariablesMap , nonGlobalVariablesMap ) ; } final LinkedList < IVariable > currentVariablesList = createCurrentVariablesList ( nonGlobalVariablesMap ) ; saveCurrentVariablesState ( stackTraceId , currentVariablesContext , nonGlobalVariablesMap ) ; return currentVariablesList . toArray ( new IVariable [ currentVariablesList . size ( ) ] ) ; }
78749	public ResourcesPoet addInteger ( String name , String value ) { Element bool = document . createElement ( _STR ) ; bool . setAttribute ( _STR , name ) ; bool . appendChild ( document . createTextNode ( String . valueOf ( value ) ) ) ; resourceElement . appendChild ( bool ) ; return this ; }
24830	static boolean checkStandardUPCEANChecksum ( CharSequence s ) throws FormatException { int length = s . length ( ) ; if ( length == _NUM ) { return _BOOL ; } int sum = _NUM ; for ( int i = length - _NUM ; i >= _NUM ; i -= _NUM ) { int digit = ( int ) s . charAt ( i ) - ( int ) _STR ; if ( digit < _NUM || digit > _NUM ) { throw FormatException . getFormatInstance ( ) ; } sum += digit ; } sum *= _NUM ; for ( int i = length - _NUM ; i >= _NUM ; i -= _NUM ) { int digit = ( int ) s . charAt ( i ) - ( int ) _STR ; if ( digit < _NUM || digit > _NUM ) { throw FormatException . getFormatInstance ( ) ; } sum += digit ; } return sum % _NUM == _NUM ; }
53849	public static String mapFullWidthLetterToHalfWidth ( String text ) { }
57097	private static < T > void assertCollectionEqualsNoOrder ( Collection < T > expected , Collection < T > actual ) { String msg = String . format ( _STR , expected . toString ( ) , actual . toString ( ) ) ; assertEquals ( msg , expected . size ( ) , actual . size ( ) ) ; for ( T e : expected ) { if ( ! actual . contains ( e ) ) { msg = String . format ( _STR + _STR , e , expected , actual ) ; fail ( msg ) ; } } }
68456	private static boolean hasResponseBody ( int requestMethod , int responseCode ) { return requestMethod != Request . Method . HEAD && ! ( HttpStatus . SC_CONTINUE <= responseCode && responseCode < HttpStatus . SC_OK ) && responseCode != HttpStatus . SC_NO_CONTENT && responseCode != HttpStatus . SC_NOT_MODIFIED ; }
72181	public int availableInProcess ( ) { return Math . max ( _NUM , maxInProcess - pending . size ( ) ) ; }
2195	public void add ( double x ) { Cell [ ] as ; long b , v ; int m ; Cell a ; if ( ( as = cells ) != null || ! casBase ( b = base , Double . doubleToRawLongBits ( Double . longBitsToDouble ( b ) + x ) ) ) { boolean uncontended = _BOOL ; if ( as == null || ( m = as . length - _NUM ) < _NUM || ( a = as [ getProbe ( ) & m ] ) == null || ! ( uncontended = a . cas ( v = a . value , Double . doubleToRawLongBits ( Double . longBitsToDouble ( v ) + x ) ) ) ) doubleAccumulate ( x , null , uncontended ) ; } }
55279	public boolean shouldExecuteAction ( ) { if ( delay <= _NUM ) { return _BOOL ; } long timePassed = System . currentTimeMillis ( ) - lastActionExecuted ; if ( timePassed > delay * _NUM ) { lastActionExecuted = System . currentTimeMillis ( ) ; return _BOOL ; } return _BOOL ; }
33250	public static int moveByWord ( String text , int column , boolean forward , boolean returnCursorAtEnd ) { int curColumn = column ; int length = text . length ( ) ; int direction = forward ? _NUM : - _NUM ; boolean farWordEnd = ( ( direction == _NUM && returnCursorAtEnd ) || ( direction == - _NUM && ! returnCursorAtEnd ) ) ; boolean foundEarlyMatch = _BOOL ; if ( ! UnicodeUtils . isWhitespace ( text . charAt ( curColumn ) ) ) { curColumn = skipNonwhitespaceSimilar ( text , curColumn , forward ) ; if ( farWordEnd && curColumn - direction != column ) { curColumn -= direction ; foundEarlyMatch = _BOOL ; } } if ( ! foundEarlyMatch && curColumn >= _NUM && curColumn < length ) { curColumn = skipWhitespace ( text , curColumn , forward ) ; if ( farWordEnd && curColumn >= _NUM && curColumn < length ) { curColumn = skipNonwhitespaceSimilar ( text , curColumn , forward ) - direction ; } } if ( curColumn < _NUM || curColumn >= length ) { return - _NUM ; } return curColumn ; }
24049	protected void handleOrDeferMessage ( DistributionMessage msg ) { synchronized ( startupLock ) { if ( beingSick || playingDead ) { if ( msg . containsRegionContentChange ( ) || msg instanceof PartitionMessageWithDirectReply ) { startupMessages . add ( new StartupEvent ( msg ) ) ; return ; } } if ( ! processingEvents ) { startupMessages . add ( new StartupEvent ( msg ) ) ; return ; } } dispatchMessage ( msg ) ; }
21392	public boolean zoneExportRemoveVolumes ( List < NetworkZoningParam > zoningParams , Collection < URI > volumeURIs , String stepId ) { NetworkZoningParam zoningParam = zoningParams . get ( _NUM ) ; _log . info ( String . format ( _STR , zoningParam . getExportGroupDisplay ( ) , volumeURIs . toString ( ) ) ) ; return doZoneExportMasksDelete ( zoningParams , volumeURIs , stepId ) ; }
43594	private void shutdown ( ) { if ( nbestListWriter != null ) { logger . info ( _STR ) ; nbestListWriter . close ( ) ; } if ( alignmentWriter != null ) { logger . info ( _STR ) ; alignmentWriter . close ( ) ; } }
46384	@ Override public void paintIcon ( Component c , Graphics g , int x , int y ) { Painter painter = ( Painter ) UIManager . get ( prefix + _STR + key ) ; if ( painter != null ) { JComponent jc = ( c instanceof JComponent ) ? ( JComponent ) c : null ; Graphics2D gfx = ( Graphics2D ) g ; gfx . translate ( x , y ) ; painter . paint ( gfx , jc , width , height ) ; gfx . translate ( - x , - y ) ; } }
70843	protected void zoomImageToPosition ( float scale , float centerX , float centerY , long durationMs ) { if ( scale > getMaxScale ( ) ) { scale = getMaxScale ( ) ; } final float oldScale = getCurrentScale ( ) ; final float deltaScale = scale - oldScale ; post ( mZoomImageToPositionRunnable = new ZoomImageToPosition ( CropImageView . this , durationMs , oldScale , deltaScale , centerX , centerY ) ) ; }
19859	public List < Map < String , String > > list ( Database conn ) throws SQLException { ResultSet rs = null ; Statement statement = conn . createStatement ( ) ; List < Map < String , String > > shardToChannels = new ArrayList < Map < String , String > > ( ) ; try { rs = statement . executeQuery ( select ) ; while ( rs . next ( ) ) { Map < String , String > shard = new HashMap < String , String > ( ) ; shard . put ( ShardChannelTable . SHARD_ID_COL , rs . getString ( ShardChannelTable . SHARD_ID_COL ) ) ; shard . put ( ShardChannelTable . CHANNEL_COL , rs . getString ( ShardChannelTable . CHANNEL_COL ) ) ; shardToChannels . add ( shard ) ; } } finally { close ( rs ) ; close ( statement ) ; } return shardToChannels ; }
80709	public Boolean isHidden ( File f ) { String name = f . getName ( ) ; if ( ( name != null ) && ! name . equals ( _STR ) && ( name . charAt ( _NUM ) == _STR ) ) { return Boolean . TRUE ; } else { return Boolean . FALSE ; } }
70073	private boolean scrollViewCanScrollVertically ( ScrollView scrollView , int direction ) { final int offset = Math . max ( _NUM , scrollView . getScrollY ( ) ) ; final int range = computeVerticalScrollRange ( scrollView ) - scrollView . getHeight ( ) ; if ( range == _NUM ) return _BOOL ; if ( direction < _NUM ) { return offset > _NUM ; } else { return offset < range - _NUM ; } }
11340	public JarInfo loadJar ( ) throws IOException { ZipInputStream zis = null ; Manifest mf = null ; boolean empty = _BOOL ; try { zis = new ZipInputStream ( jarStream ) ; ZipEntry ent = null ; while ( ( ent = zis . getNextEntry ( ) ) != null ) { empty = _BOOL ; String name = ent . getName ( ) ; if ( Manifest . isManifestName ( name ) ) { ByteArrayOutputStream baos = new ByteArrayOutputStream ( ) ; byte buffer [ ] = new byte [ _NUM ] ; for ( ; ; ) { int len = zis . read ( buffer ) ; if ( len < _NUM ) { break ; } baos . write ( buffer , _NUM , len ) ; } byte [ ] buf = baos . toByteArray ( ) ; mf = new Manifest ( buf ) ; } } } catch ( IOException ex ) { throw ex ; } catch ( Throwable th ) { th . printStackTrace ( ) ; throw new IOException ( _STR + th ) ; } finally { if ( zis != null ) { try { zis . close ( ) ; } catch ( Exception ex ) { } } } if ( empty ) { throw new IOException ( _STR ) ; } JarInfo ji = createJarInfo ( mf ) ; return ji ; }
16858	public void invalidateTitleSortable ( ) { for ( Movie movie : new ArrayList < > ( movieList ) ) { movie . clearTitleSortable ( ) ; } }
61915	public void addRow ( Assignment head , double prob ) { if ( prob < _NUM || prob > _NUM ) { return ; } headVars . addAll ( head . getVariables ( ) ) ; table . put ( head , prob ) ; }
24267	public byte [ ] createJarFromFileContent ( final String fileName , final String content ) throws IOException { ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream ( ) ; JarOutputStream jarOutputStream = new JarOutputStream ( byteArrayOutputStream ) ; JarEntry entry = new JarEntry ( fileName ) ; entry . setTime ( System . currentTimeMillis ( ) ) ; jarOutputStream . putNextEntry ( entry ) ; jarOutputStream . write ( content . getBytes ( ) ) ; jarOutputStream . closeEntry ( ) ; jarOutputStream . close ( ) ; return byteArrayOutputStream . toByteArray ( ) ; }
84263	private boolean goTo ( long day , boolean animate , boolean setSelected , boolean forceScroll ) { if ( setSelected ) { mSelectedDay . setTimeInMillis ( day ) ; } mTempDay . setTimeInMillis ( day ) ; final int position = getPositionFromDay ( day ) ; View child ; int i = _NUM ; int top = _NUM ; do { child = getChildAt ( i ++ ) ; if ( child == null ) { break ; } top = child . getTop ( ) ; } while ( top < _NUM ) ; int selectedPosition ; if ( child != null ) { selectedPosition = getPositionForView ( child ) ; } else { selectedPosition = _NUM ; } if ( setSelected ) { mAdapter . setSelectedDay ( mSelectedDay ) ; } if ( position != selectedPosition || forceScroll ) { setMonthDisplayed ( mTempDay ) ; mPreviousScrollState = OnScrollListener . SCROLL_STATE_FLING ; if ( animate ) { smoothScrollToPositionFromTop ( position , LIST_TOP_OFFSET , GOTO_SCROLL_DURATION ) ; return _BOOL ; } else { postSetSelection ( position ) ; } } else if ( setSelected ) { setMonthDisplayed ( mSelectedDay ) ; } return _BOOL ; }
5542	public boolean search ( V v ) { int h = hashMethod . hash ( v ) ; LinkedList < V > list = ( LinkedList < V > ) table [ h ] ; if ( list == null ) { return _BOOL ; } return list . contains ( v ) ; }
44366	public void closeJDBCConnection ( Connection conn ) { try { if ( conn != null ) { conn . close ( ) ; } } catch ( SQLException sqle ) { subclassLogWrapper ( _STR ) ; } }
73954	@ Override public void messageItemDetails ( String strClass , String item , String description , String [ ] msgOption , int [ ] msgNumber , int defaultOption ) { HashMap < Integer , String > options = new HashMap < > ( msgOption . length ) ; for ( int i = _NUM ; i < msgOption . length ; i ++ ) { options . put ( msgNumber [ i ] , msgOption [ i ] ) ; } messageItemDetails ( strClass , description , item , options , defaultOption ) ; }
69030	public void addListener ( ColorMapListener listener ) { listeners . add ( listener ) ; }
52771	protected void computePDists ( Relation < O > relation , KNNQuery < O > knn , WritableDoubleDataStore pdists ) { FiniteProgress prdsProgress = LOG . isVerbose ( ) ? new FiniteProgress ( _STR , relation . size ( ) , LOG ) : null ; for ( DBIDIter iditer = relation . iterDBIDs ( ) ; iditer . valid ( ) ; iditer . advance ( ) ) { final KNNList neighbors = knn . getKNNForDBID ( iditer , kreach + _NUM ) ; int ks = _NUM ; double ssum = _NUM ; for ( DoubleDBIDListIter neighbor = neighbors . iter ( ) ; neighbor . valid ( ) && ks < kreach ; neighbor . advance ( ) ) { if ( DBIDUtil . equal ( neighbor , iditer ) ) { continue ; } final double d = neighbor . doubleValue ( ) ; ssum += d * d ; ks ++ ; } double pdist = ks > _NUM ? Math . sqrt ( ssum / ks ) : _NUM ; pdists . putDouble ( iditer , pdist ) ; LOG . incrementProcessed ( prdsProgress ) ; } LOG . ensureCompleted ( prdsProgress ) ; }
6262	private static String appendIfMissing ( final String str , final CharSequence suffix , final boolean ignoreCase , final CharSequence ... suffixes ) { if ( str == null || isEmpty ( suffix ) || endsWith ( str , suffix , ignoreCase ) ) { return str ; } if ( suffixes != null && suffixes . length > _NUM ) { for ( final CharSequence s : suffixes ) { if ( endsWith ( str , s , ignoreCase ) ) { return str ; } } } return str + suffix . toString ( ) ; }
31473	private JSONArray requestAllFileSystems ( ) throws IOException , JSONException { JSONArray ret = new JSONArray ( ) ; for ( Filesystem fs : filesystems ) { ret . put ( fs . getRootEntry ( ) ) ; } return ret ; }
43069	ExternalProblem ( Process process ) { this ( process . getInputStream ( ) , process . getOutputStream ( ) ) ; RedirectStream . redirect ( process . getErrorStream ( ) , System . err ) ; }
14503	protected static boolean networkMonitorExist ( String nwMonName ) { String classMethod = _STR ; if ( debug . messageEnabled ( ) ) { debug . message ( classMethod + _STR + nwMonName ) ; } if ( ( nwMonName == null ) || ( nwMonName . length ( ) == _NUM ) ) { if ( debug . warningEnabled ( ) ) { debug . warning ( classMethod + _STR ) ; } return _BOOL ; } Set < String > ntwStats = NetworkMonitor . getInstanceNames ( ) ; String ss = nwMonName . toLowerCase ( ) ; if ( ntwStats . contains ( ss ) ) { return _BOOL ; } else { return _BOOL ; } }
55708	protected boolean error_recovery ( boolean debug ) throws java . lang . Exception { if ( debug ) debug_message ( _STR ) ; if ( ! find_recovery_config ( debug ) ) { if ( debug ) debug_message ( _STR ) ; return _BOOL ; } read_lookahead ( ) ; for ( ; ; ) { if ( debug ) debug_message ( _STR ) ; if ( try_parse_ahead ( debug ) ) { break ; } if ( lookahead [ _NUM ] . sym == EOF_sym ( ) ) { if ( debug ) debug_message ( _STR ) ; return _BOOL ; } if ( debug ) debug_message ( _STR + lookahead [ _NUM ] . sym ) ; restart_lookahead ( ) ; } if ( debug ) debug_message ( _STR ) ; parse_lookahead ( debug ) ; return _BOOL ; }
66680	public void andWith ( List < QueryPredicate > predicates ) { children . addAll ( predicates ) ; }
70238	public void addRoll ( MMRandom rng ) { int result = rng . randomInt ( this . faces ) + this . min ; all . addElement ( new Integer ( result ) ) ; this . total += result ; if ( keep != - _NUM && all . size ( ) >= keep ) { this . total = _NUM ; Collections . sort ( all , Collections . reverseOrder ( ) ) ; for ( int i = _NUM ; i < keep ; i ++ ) { this . total += all . get ( i ) ; } } }
39207	public boolean checkCanonicalUserOptions ( ) { boolean result ; OptionHandler handler ; String [ ] userOptions ; String [ ] userOptionsCheck ; print ( _STR ) ; try { handler = getDefaultHandler ( ) ; handler . setOptions ( getUserOptions ( ) ) ; if ( getDebug ( ) ) { print ( _STR ) ; } userOptions = handler . getOptions ( ) ; if ( getDebug ( ) ) { println ( printOptions ( userOptions ) ) ; } if ( getDebug ( ) ) { println ( _STR ) ; } handler . setOptions ( userOptions . clone ( ) ) ; if ( getDebug ( ) ) { println ( _STR ) ; } userOptionsCheck = handler . getOptions ( ) ; compareOptions ( userOptions , userOptionsCheck ) ; println ( _STR ) ; result = _BOOL ; } catch ( Exception e ) { println ( _STR ) ; result = _BOOL ; if ( getDebug ( ) ) { println ( e ) ; } } return result ; }
6709	public static void closeQuietly ( final Closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( final RuntimeException rethrown ) { throw rethrown ; } catch ( final Exception ignored ) { } } }
75840	public static void pushEncryptedMessage ( final TextSecureEnvelope envelope ) { while ( _BOOL ) { try { queue . put ( envelope ) ; return ; } catch ( final InterruptedException e ) { } } }
28706	public static int randomRangeInt ( int min , int max ) { return ( int ) ( Math . random ( ) < _NUM ? ( ( _NUM - Math . random ( ) ) * ( max - min ) + min ) : ( Math . random ( ) * ( max - min ) + min ) ) ; }
27921	public void test_simplePrematureClose ( ) { Striterator iter = new Striterator ( m_data . iterator ( ) ) ; int i = _NUM ; while ( iter . hasNext ( ) ) { iter . next ( ) ; if ( ++ i == _NUM ) { iter . close ( ) ; assertTrue ( ! iter . hasNext ( ) ) ; } } assertTrue ( ! iter . isOpen ( ) ) ; assertTrue ( i == _NUM ) ; }
25502	public void pushDrawList ( PspGeList list ) { synchronized ( drawListQueue ) { drawListQueue . add ( list ) ; } }
21910	private void populateTaskList ( Volume source , Map < BlockMirror , Volume > groupMirrorSourceMap , TaskList taskList , String taskId , ResourceOperationTypeEnum operationType ) { Set < URI > groupSet = new HashSet < URI > ( ) ; addTask ( taskList , source , taskId , operationType ) ; for ( Entry < BlockMirror , Volume > entry : groupMirrorSourceMap . entrySet ( ) ) { BlockMirror mirror = entry . getKey ( ) ; Volume mirrorSource = entry . getValue ( ) ; if ( source . isInCG ( ) && null != taskList . getTaskList ( ) ) { groupSet . add ( mirrorSource . getConsistencyGroup ( ) ) ; } } List < BlockConsistencyGroup > groups = _dbClient . queryObject ( BlockConsistencyGroup . class , groupSet ) ; for ( BlockConsistencyGroup group : groups ) { addTask ( taskList , group , taskId , operationType ) ; } }
63824	public static Tuple max ( Iterator tuples , String field , Comparator cmp ) { Tuple t = null , tmp ; Object min = null ; if ( tuples . hasNext ( ) ) { t = ( Tuple ) tuples . next ( ) ; min = t . get ( field ) ; } while ( tuples . hasNext ( ) ) { tmp = ( Tuple ) tuples . next ( ) ; Object obj = tmp . get ( field ) ; if ( cmp . compare ( obj , min ) > _NUM ) { t = tmp ; min = obj ; } } return t ; }
38956	public String clusterDefinitionsTipText ( ) { return _STR ; }
58857	public void testConstructorSignBytesPositive1 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM } ; int aSign = _NUM ; byte rBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , aNumber . signum ( ) ) ; }
26587	public void fling ( int startX , int startY , int velocityX , int velocityY , int minX , int maxX , int minY , int maxY , int overX , int overY ) { if ( mFlywheel && ! isFinished ( ) ) { float oldVelocityX = mScrollerX . mCurrVelocity ; float oldVelocityY = mScrollerY . mCurrVelocity ; if ( Math . signum ( velocityX ) == Math . signum ( oldVelocityX ) && Math . signum ( velocityY ) == Math . signum ( oldVelocityY ) ) { velocityX += oldVelocityX ; velocityY += oldVelocityY ; } } mMode = FLING_MODE ; mScrollerX . fling ( startX , velocityX , minX , maxX , overX ) ; mScrollerY . fling ( startY , velocityY , minY , maxY , overY ) ; }
6886	public Map < String , Object > convertDataToObjects ( Map < String , String > data ) { Map < String , Object > results = new HashMap < > ( ) ; if ( data != null ) { for ( String key : data . keySet ( ) ) { results . put ( key , data . get ( key ) ) ; } } return results ; }
45150	private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
3112	public void addListener ( NavigatorListener listener ) { listeners . add ( listener ) ; }
78969	public void closeStream ( ) { CarbonUtil . closeStreams ( stream ) ; executorService . shutdown ( ) ; }
50220	public double patience ( int k , F f , int N ) { double pf = p ( f ) ; BinomialDistribution dist = new BinomialDistribution ( null , N , pf ) ; double p0 = Math . pow ( _NUM - pf , N ) ; return _NUM - ( dist . cumulativeProbability ( k - _NUM ) - p0 ) / ( _NUM - p0 ) ; }
7927	public static List seriesNameListFromDataArray ( Object [ ] [ ] data ) { int seriesCount = data . length ; List seriesNameList = new java . util . ArrayList ( seriesCount ) ; for ( int i = _NUM ; i < seriesCount ; i ++ ) { seriesNameList . add ( _STR + ( i + _NUM ) ) ; } return seriesNameList ; }
56279	@ Override public int read ( char b [ ] , int off , int len ) throws IOException { ensureOpen ( ) ; if ( ( off < _NUM ) || ( off > b . length ) || ( len < _NUM ) || ( ( off + len ) > b . length ) || ( ( off + len ) < _NUM ) ) { throw new IndexOutOfBoundsException ( ) ; } else if ( len == _NUM ) { return _NUM ; } if ( pos >= count ) { return - _NUM ; } if ( pos + len > count ) { len = count - pos ; } if ( len <= _NUM ) { return _NUM ; } System . arraycopy ( buf , pos , b , off , len ) ; pos += len ; return len ; }
43056	public static void CF6 ( double [ ] x , double [ ] f , double [ ] c , int nx ) { double sum1 = _NUM ; double sum2 = _NUM ; double yj ; for ( int j = _NUM ; j <= nx ; j ++ ) { if ( j % _NUM == _NUM ) { yj = x [ j - _NUM ] - _NUM * x [ _NUM ] * Math . cos ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; sum1 += yj * yj ; } else { yj = x [ j - _NUM ] - _NUM * x [ _NUM ] * Math . sin ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; sum2 += yj * yj ; } } f [ _NUM ] = x [ _NUM ] + sum1 ; f [ _NUM ] = ( _NUM - x [ _NUM ] ) * ( _NUM - x [ _NUM ] ) + sum2 ; c [ _NUM ] = x [ _NUM ] - _NUM * x [ _NUM ] * Math . sin ( _NUM * x [ _NUM ] * PI + _NUM * PI / nx ) - MYSIGN ( ( x [ _NUM ] - _NUM ) * ( _NUM - x [ _NUM ] ) ) * Math . sqrt ( Math . abs ( ( x [ _NUM ] - _NUM ) * ( _NUM - x [ _NUM ] ) ) ) ; c [ _NUM ] = x [ _NUM ] - _NUM * x [ _NUM ] * Math . sin ( _NUM * x [ _NUM ] * PI + _NUM * PI / nx ) - MYSIGN ( _NUM * Math . sqrt ( _NUM - x [ _NUM ] ) - _NUM * ( _NUM - x [ _NUM ] ) ) * Math . sqrt ( Math . abs ( _NUM * Math . sqrt ( _NUM - x [ _NUM ] ) - _NUM * ( _NUM - x [ _NUM ] ) ) ) ; }
13454	public static void f ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_FATAL ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . wtf ( tag , msg ) ; }
12641	private static void expandNumberAt ( String numberString , int startIndex , WordRelation wordRelation ) { expandNumber ( numberString . substring ( startIndex , numberString . length ( ) ) , wordRelation ) ; }
69855	public static boolean nullEquals ( String s1 , String s2 ) { return ( s1 == null ? s2 == null : s1 . equals ( s2 ) ) ; }
52966	@ Override public void run ( ) { MultipleObjectsBundle data = generator . loadData ( ) ; if ( LOG . isVerbose ( ) ) { LOG . verbose ( _STR ) ; } try { if ( outputFile . exists ( ) && LOG . isVerbose ( ) ) { LOG . verbose ( _STR + outputFile + _STR + _STR ) ; } try ( OutputStreamWriter outStream = new FileWriter ( outputFile , _BOOL ) ) { writeClusters ( outStream , data ) ; } } catch ( IOException e ) { throw new AbortException ( _STR , e ) ; } if ( LOG . isVerbose ( ) ) { LOG . verbose ( _STR ) ; } }
21778	private boolean usedAllRule17Directors ( Set < String > allocatedDirectors , PortAllocationContext context ) { Set < String > rule17Directors = getRule17Directors ( context ) ; for ( String director : allocatedDirectors ) { rule17Directors . remove ( director ) ; } return rule17Directors . isEmpty ( ) ; }
85054	public void stop ( ) { synchronized ( privateInstanceLock ) { if ( connectionAcceptThread == null ) { return ; } } isStopped . set ( _BOOL ) ; try { connectionAcceptThread . interrupt ( ) ; connectionAcceptThread . join ( ) ; } catch ( InterruptedException e ) { } try { serverSocket . close ( ) ; } catch ( IOException e ) { } }
13132	private static String expandSystemIdStrictOn ( String systemId , String baseSystemId ) throws URI . MalformedURIException { URI systemURI = new URI ( systemId , _BOOL ) ; if ( systemURI . isAbsoluteURI ( ) ) { return systemId ; } URI baseURI = null ; if ( baseSystemId == null || baseSystemId . length ( ) == _NUM ) { baseURI = getUserDir ( ) ; } else { baseURI = new URI ( baseSystemId , _BOOL ) ; if ( ! baseURI . isAbsoluteURI ( ) ) { baseURI . absolutize ( getUserDir ( ) ) ; } } systemURI . absolutize ( baseURI ) ; return systemURI . toString ( ) ; }
54789	public static void free ( DMessage msg ) { int index = size2Index ( msg . getSize ( ) ) ; msg . clear ( ) ; if ( index < _NUM ) ; else if ( m_cache [ index ] != null ) ; else m_cache [ index ] = msg ; }
84480	public boolean equalsIgnoreCase ( final StrBuilder other ) { if ( this == other ) { return _BOOL ; } if ( this . size != other . size ) { return _BOOL ; } final char thisBuf [ ] = this . buffer ; final char otherBuf [ ] = other . buffer ; for ( int i = size - _NUM ; i >= _NUM ; i -- ) { final char c1 = thisBuf [ i ] ; final char c2 = otherBuf [ i ] ; if ( c1 != c2 && Character . toUpperCase ( c1 ) != Character . toUpperCase ( c2 ) ) { return _BOOL ; } } return _BOOL ; }
64656	protected static Long convertUuidToLong ( UUID uuid ) { if ( uuid == null ) { return null ; } Long convertedUuid ; if ( uuid . version ( ) == _NUM ) { convertedUuid = uuid . timestamp ( ) ; } else { convertedUuid = uuid . getMostSignificantBits ( ) ; } return convertedUuid ; }
24995	public void addVMArguments ( String vmArgumentName , String vmArgumentValue ) { VmArgumentData vmArg = new VmArgumentData ( vmArgumentName , vmArgumentValue ) ; vmSet . add ( vmArg ) ; }
33914	private void applyTo ( ClassVisitor v , Field f ) { if ( Log . isLoggingOn ( ) ) { Log . logLine ( String . format ( _STR , f . toGenericString ( ) ) ) ; } v . visit ( f ) ; }
58910	public void testCompareToEqualNeg ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int bSign = - _NUM ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; assertEquals ( _NUM , aNumber . compareTo ( bNumber ) ) ; }
8744	public void testScreenshot ( ) throws Exception { Log . d ( LOG_TAG , _STR ) ; ScreenshotStubActivity activity = getActivity ( ) ; assertNotNull ( activity ) ; File screenshotDir = getScreenshotDir ( ) ; NewScreenshotObserver observer = new NewScreenshotObserver ( screenshotDir . getAbsolutePath ( ) ) ; observer . startWatching ( ) ; takeScreenshot ( ) ; if ( observer . getCreatedPath ( ) == null ) { synchronized ( observer ) { observer . wait ( SCREEN_WAIT_TIME_SEC * _NUM ) ; } } assertNotNull ( String . format ( _STR , SCREEN_WAIT_TIME_SEC ) , observer . getCreatedPath ( ) ) ; File screenshotFile = new File ( screenshotDir , observer . getCreatedPath ( ) ) ; try { assertTrue ( String . format ( _STR , screenshotFile . getName ( ) ) , screenshotFile . isFile ( ) ) ; assertTrue ( String . format ( _STR , screenshotFile . getName ( ) ) , isValidImage ( screenshotFile ) ) ; } finally { screenshotFile . delete ( ) ; } }
22032	public TaskResourceRep unlinkTargetVolumesFromSnapshotSession ( URI snapSessionURI , SnapshotSessionUnlinkTargetsParam param ) { return unlinkTargetVolumesFromSnapshotSession ( snapSessionURI , param , OperationTypeEnum . UNLINK_SNAPSHOT_SESSION_TARGET ) ; }
71204	private List reverse ( List seq ) { LinkedList newSeq = new LinkedList ( ) ; for ( Iterator i = seq . iterator ( ) ; i . hasNext ( ) ; ) { DirectedEdge de = ( DirectedEdge ) i . next ( ) ; newSeq . addFirst ( de . getSym ( ) ) ; } return newSeq ; }
18018	protected LocPathIterator changePartToRef ( final QName uniquePseudoVarName , WalkingIterator wi , final int numSteps , final boolean isGlobal ) { Variable var = new Variable ( ) ; var . setQName ( uniquePseudoVarName ) ; var . setIsGlobal ( isGlobal ) ; if ( isGlobal ) { ElemTemplateElement elem = getElemFromExpression ( wi ) ; StylesheetRoot root = elem . getStylesheetRoot ( ) ; Vector vars = root . getVariablesAndParamsComposed ( ) ; var . setIndex ( vars . size ( ) - _NUM ) ; } AxesWalker walker = wi . getFirstWalker ( ) ; for ( int i = _NUM ; i < numSteps ; i ++ ) { assertion ( null != walker , _STR ) ; walker = walker . getNextWalker ( ) ; } if ( null != walker ) { FilterExprWalker few = new FilterExprWalker ( wi ) ; few . setInnerExpression ( var ) ; few . exprSetParent ( wi ) ; few . setNextWalker ( walker ) ; walker . setPrevWalker ( few ) ; wi . setFirstWalker ( few ) ; return wi ; } else { FilterExprIteratorSimple feis = new FilterExprIteratorSimple ( var ) ; feis . exprSetParent ( wi . exprGetParent ( ) ) ; return feis ; } }
25655	@ Deprecated @ Override public String readLine ( ) throws IOException { StringBuilder b = new StringBuilder ( _NUM ) ; int chr ; while ( ( chr = read ( ) ) >= _NUM ) { if ( chr != _STR ) { b . append ( ( char ) chr ) ; } else { return b . toString ( ) ; } } return b . toString ( ) ; }
74821	private void addToScene ( final Node items ) { collection . add ( items ) ; }
71996	public String documentationHomePageUrl ( ) { return properties . getProperty ( _STR ) ; }
86635	public static boolean hasTaxonomyInfo ( SequencesReader reader ) { final File taxonFile = new File ( reader . path ( ) , TAXONOMY_FILE ) ; final File mappingFile = new File ( reader . path ( ) , TAXONOMY_TO_SEQUENCE_FILE ) ; if ( taxonFile . exists ( ) && mappingFile . exists ( ) ) { return _BOOL ; } else if ( taxonFile . exists ( ) || mappingFile . exists ( ) ) { throw new NoTalkbackSlimException ( _STR ) ; } else { return _BOOL ; } }
86330	public void removeSelectionListener ( final SelectionListener listener ) { checkWidget ( ) ; if ( listener == null ) { SWT . error ( SWT . ERROR_NULL_ARGUMENT ) ; } listOfSelectionListeners . remove ( listener ) ; }
8326	public void replace ( ClassNode type , int n ) { remove ( n ) ; push ( type ) ; }
13786	public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { submitCycle = _BOOL ; EntitiesModel model = ( EntitiesModel ) getModel ( ) ; AMPropertySheet prop = ( AMPropertySheet ) getChild ( PROPERTY_ATTRIBUTE ) ; String universalId = ( String ) getPageSessionAttribute ( UNIVERSAL_ID ) ; try { Map oldValues = model . getAttributeValues ( universalId , _BOOL ) ; Map values = prop . getAttributeValues ( oldValues , _BOOL , model ) ; String curRealm = ( String ) getPageSessionAttribute ( AMAdminConstants . CURRENT_REALM ) ; model . modifyEntity ( curRealm , universalId , values ) ; setInlineAlertMessage ( CCAlert . TYPE_INFO , _STR , _STR ) ; } catch ( AMConsoleException e ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , _STR , e . getMessage ( ) ) ; } forwardTo ( ) ; }
76862	private static Boolean isInsidePolygon ( final GeoPoint point , final List < GeoPoint > polyPoints ) { final double latitude = point . getLatitude ( ) ; final double longitude = point . getLongitude ( ) ; final double sinLatitude = Math . sin ( latitude ) ; final double cosLatitude = Math . cos ( latitude ) ; final double sinLongitude = Math . sin ( longitude ) ; final double cosLongitude = Math . cos ( longitude ) ; double arcDistance = _NUM ; Double prevAngle = null ; for ( final GeoPoint polyPoint : polyPoints ) { final Double angle = computeAngle ( polyPoint , sinLatitude , cosLatitude , sinLongitude , cosLongitude ) ; if ( angle == null ) { return null ; } if ( prevAngle != null ) { double angleDelta = angle - prevAngle ; if ( angleDelta < - Math . PI ) { angleDelta += Math . PI * _NUM ; } if ( angleDelta > Math . PI ) { angleDelta -= Math . PI * _NUM ; } if ( Math . abs ( angleDelta - Math . PI ) < Vector . MINIMUM_RESOLUTION ) { return null ; } arcDistance += angleDelta ; } prevAngle = angle ; } if ( prevAngle != null ) { final Double lastAngle = computeAngle ( polyPoints . get ( _NUM ) , sinLatitude , cosLatitude , sinLongitude , cosLongitude ) ; if ( lastAngle == null ) { return null ; } double angleDelta = lastAngle - prevAngle ; if ( angleDelta < - Math . PI ) { angleDelta += Math . PI * _NUM ; } if ( angleDelta > Math . PI ) { angleDelta -= Math . PI * _NUM ; } if ( Math . abs ( angleDelta - Math . PI ) < Vector . MINIMUM_RESOLUTION ) { return null ; } arcDistance += angleDelta ; } if ( Math . abs ( arcDistance ) < Vector . MINIMUM_RESOLUTION ) { return null ; } return arcDistance > _NUM ; }
32815	private Node deleteMax ( Node x ) { if ( x . right == null ) return x . left ; x . right = deleteMax ( x . right ) ; x . size = _NUM + size ( x . left ) + size ( x . right ) ; x . height = _NUM + Math . max ( height ( x . left ) , height ( x . right ) ) ; return balance ( x ) ; }
35457	public void clear ( ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { for ( Node < E > f = first ; f != null ; ) { f . item = null ; Node < E > n = f . next ; f . prev = null ; f . next = null ; f = n ; } first = last = null ; count = _NUM ; notFull . signalAll ( ) ; } finally { lock . unlock ( ) ; } }
12242	protected void onProgress ( int itemcount , int size ) { }
45980	private TreeNode ( long nodeValue , SnmpMibAgent agent , TreeNode sup ) { this . nodeValue = nodeValue ; this . parent = sup ; agents . addElement ( agent ) ; }
7909	public Week ( Date time ) { this ( time , TimeZone . getDefault ( ) , Locale . getDefault ( ) ) ; }
4073	public CodeAttribute createCode ( ) { CodeAttribute code = new CodeAttribute ( ) ; for ( int i = _NUM ; i < _attributes . size ( ) ; i ++ ) { Attribute attr = _attributes . get ( i ) ; if ( attr instanceof CodeAttribute ) return ( CodeAttribute ) attr ; } return null ; }
32817	public BinaryOut ( String filename ) { try { OutputStream os = new FileOutputStream ( filename ) ; out = new BufferedOutputStream ( os ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
51525	protected ObjectStreamClass readClassDescriptor ( ) throws IOException , ClassNotFoundException { ObjectStreamClass newClassDesc = new ObjectStreamClass ( ) ; String name = input . readUTF ( ) ; if ( name . length ( ) == _NUM ) { throw new IOException ( _STR ) ; } newClassDesc . setName ( name ) ; newClassDesc . setSerialVersionUID ( input . readLong ( ) ) ; newClassDesc . setFlags ( input . readByte ( ) ) ; if ( descriptorHandle == - _NUM ) { descriptorHandle = nextHandle ( ) ; } registerObjectRead ( newClassDesc , descriptorHandle , _BOOL ) ; readFieldDescriptors ( newClassDesc ) ; return newClassDesc ; }
44578	public static boolean createNewFile ( File targetFile ) { if ( targetFile . exists ( ) ) targetFile . delete ( ) ; try { return targetFile . createNewFile ( ) ; } catch ( IOException e ) { return _BOOL ; } }
58512	public void testZeroOne ( ) { byte aBytes [ ] = { _NUM } ; byte bBytes [ ] = { _NUM } ; int aSign = _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . or ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
19897	protected int executePrepareStatement ( List < Column > columns , PreparedStatement statement ) throws SQLException { int bindNo = _NUM ; for ( Column c : columns ) { setColumnValue ( statement , bindNo , c ) ; bindNo ++ ; } return statement . executeUpdate ( ) ; }
9890	public Config ( SamlAuthorityConfiguration samlAuthorityConfig , TokenRestrictions tokenRestrictions , Collection < List < Certificate > > validCerts , long clockTolerance , Collection < IDPConfig > inExternalIdps ) { Validate . notNull ( samlAuthorityConfig ) ; Validate . notNull ( tokenRestrictions ) ; Validate . notEmpty ( validCerts ) ; List < Certificate > authorityCert = samlAuthorityConfig . getSigningCertificateChain ( ) ; boolean authorityCertInValidCerts = _BOOL ; for ( List < Certificate > currentChain : validCerts ) { Validate . notEmpty ( currentChain ) ; Validate . noNullElements ( currentChain ) ; if ( ! authorityCertInValidCerts && currentChain . equals ( authorityCert ) ) { authorityCertInValidCerts = _BOOL ; } } Validate . isTrue ( authorityCertInValidCerts , _STR ) ; Validate . isTrue ( clockTolerance >= _NUM ) ; this . samlAuthorityConfig = samlAuthorityConfig ; this . validCerts = validCerts ; this . clockTolerance = clockTolerance ; this . tokenRestrictions = tokenRestrictions ; HashMap < String , IDPConfig > idpsSet = new HashMap < String , IDPConfig > ( ) ; if ( inExternalIdps != null ) { for ( IDPConfig conf : inExternalIdps ) { if ( conf != null ) { idpsSet . put ( conf . getEntityID ( ) , conf ) ; } } } this . externalIdps = Collections . unmodifiableMap ( idpsSet ) ; }
85725	public static void checkNotEmpty ( String string ) { if ( string . isEmpty ( ) ) { throw new NullPointerException ( ) ; } }
13293	protected void addCommonComponent ( XMLComponent component ) { if ( fCommonComponents . contains ( component ) ) { return ; } fCommonComponents . add ( component ) ; addRecognizedParamsAndSetDefaults ( component ) ; }
16911	public void cancelUnnamedTasks ( ) { if ( unnamedTaskExecutor != null ) { unnamedTaskExecutor . shutdownNow ( ) ; } }
52623	public static double [ ] minmax ( List < Double > values ) { if ( values . size ( ) == _NUM ) { return new double [ _NUM ] ; } double min = values . get ( _NUM ) ; double max = min ; int length = values . size ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { double value = values . get ( i ) ; min = Math . min ( min , value ) ; max = Math . max ( max , value ) ; } return new double [ ] { min , max } ; }
86031	public Criteria createCriteria ( ) { Criteria criteria = createCriteriaInternal ( ) ; if ( oredCriteria . size ( ) == _NUM ) { oredCriteria . add ( criteria ) ; } return criteria ; }
28565	private char readEscapeCharacter ( ) throws IOException { if ( pos == limit && ! fillBuffer ( _NUM ) ) { throw syntaxError ( _STR ) ; } char escaped = buffer [ pos ++ ] ; switch ( escaped ) { case _STR : if ( pos + _NUM > limit && ! fillBuffer ( _NUM ) ) { throw syntaxError ( _STR ) ; } char result = _NUM ; for ( int i = pos , end = i + _NUM ; i < end ; i ++ ) { char c = buffer [ i ] ; result <<= _NUM ; if ( c >= _STR && c <= _STR ) { result += ( c - _STR ) ; } else if ( c >= _STR && c <= _STR ) { result += ( c - _STR + _NUM ) ; } else if ( c >= _STR && c <= _STR ) { result += ( c - _STR + _NUM ) ; } else { throw new NumberFormatException ( _STR + new String ( buffer , pos , _NUM ) ) ; } } pos += _NUM ; return result ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : lineNumber ++ ; lineStart = pos ; case _STR : case _STR : case _STR : case _STR : return escaped ; default : throw syntaxError ( _STR ) ; } }
53783	private void updateParamsForAuth ( String [ ] authNames , List < Pair > queryParams , Map < String , String > headerParams ) { for ( String authName : authNames ) { Authentication auth = authentications . get ( authName ) ; if ( auth == null ) throw new RuntimeException ( _STR + authName ) ; auth . applyToParams ( queryParams , headerParams ) ; } }
23422	private void fixSpannedWithSpaces ( SpannableStringBuilder builder , int widthMeasureSpec , int heightMeasureSpec ) { long startFix = System . currentTimeMillis ( ) ; FixingResult result = addSpacesAroundSpansUntilFixed ( builder , widthMeasureSpec , heightMeasureSpec ) ; if ( result . fixed ) { removeUnneededSpaces ( widthMeasureSpec , heightMeasureSpec , builder , result ) ; } else { fallbackToString ( widthMeasureSpec , heightMeasureSpec ) ; } long fixDuration = System . currentTimeMillis ( ) - startFix ; Logger . d ( TAG , _STR + fixDuration ) ; }
67232	public EventsIntegrationTest ( ) { setResponseLogLengthLimit ( _NUM ) ; dateFormat = new SimpleDateFormat ( _STR ) ; Calendar cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , - _NUM ) ; yesterday = dateFormat . format ( cal . getTime ( ) ) ; yesterday += _STR ; cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , _NUM ) ; today = dateFormat . format ( cal . getTime ( ) ) ; today += _STR ; cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , _NUM ) ; tomorrow = dateFormat . format ( cal . getTime ( ) ) ; tomorrow += _STR ; cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , _NUM ) ; tomorrowPlus3 = dateFormat . format ( cal . getTime ( ) ) ; tomorrowPlus3 += _STR ; cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , - _NUM ) ; yesterdayMinus3 = dateFormat . format ( cal . getTime ( ) ) ; yesterdayMinus3 += _STR ; cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , _NUM ) ; tomorrowPlus5 = dateFormat . format ( cal . getTime ( ) ) ; tomorrowPlus5 += _STR ; cal = Calendar . getInstance ( ) ; cal . add ( Calendar . DATE , - _NUM ) ; yesterdayMinus5 = dateFormat . format ( cal . getTime ( ) ) ; yesterdayMinus5 += _STR ; experiment = ExperimentFactory . createExperiment ( ) ; experiment . startTime = yesterdayMinus3 ; experiment . endTime = tomorrowPlus3 ; experiment . samplingPercent = _NUM ; experiment . label = _STR ; experiment . applicationName = QBO + UUID . randomUUID ( ) ; DefaultNameExclusionStrategy experimentComparisonStrategy = new DefaultNameExclusionStrategy ( _STR , _STR , _STR ) ; experiment . setSerializationStrategy ( experimentComparisonStrategy ) ; }
45199	private void removeBookmarkTrackingIcons ( ) { if ( trackingIcons != null ) { for ( Iterator i = trackingIcons . iterator ( ) ; i . hasNext ( ) ; ) { GutterIconImpl ti = ( GutterIconImpl ) i . next ( ) ; if ( ti . getIcon ( ) == bookmarkIcon ) { i . remove ( ) ; } } } }
83911	public SimpleMetricGroup ( GroupName name , Stream < ? extends Metric > i ) { this ( name , i . collect ( Collectors . < Metric > toList ( ) ) ) ; }
70323	public boolean isInside ( Point point ) { return bounds . contains ( point ) ; }
1686	private void resolveProtocols ( ClassLoader loader ) { ServiceLoader < ProtocolManagerFactory > serviceLoader = ServiceLoader . load ( ProtocolManagerFactory . class , loader ) ; loadProtocolManagerFactories ( serviceLoader ) ; }
73985	public static List < InetAddress > hostAddresses ( ) { List < InetAddress > addrList = new ArrayList < > ( ) ; Enumeration < NetworkInterface > IFCs = null ; try { IFCs = NetworkInterface . getNetworkInterfaces ( ) ; } catch ( SocketException ex ) { log . error ( _STR , ex ) ; } if ( IFCs != null ) { while ( IFCs . hasMoreElements ( ) ) { NetworkInterface IFC = IFCs . nextElement ( ) ; try { if ( IFC . isUp ( ) ) { Enumeration < InetAddress > addresses = IFC . getInetAddresses ( ) ; while ( addresses . hasMoreElements ( ) ) { InetAddress address = addresses . nextElement ( ) ; if ( ! address . isLoopbackAddress ( ) && ! address . isLinkLocalAddress ( ) ) { addrList . add ( address ) ; } } } } catch ( SocketException ex ) { log . error ( _STR , IFC . toString ( ) , ex ) ; } } } return addrList ; }
13417	public final static int caculateInSampleSize ( BitmapFactory . Options options , int rqsW , int rqsH ) { final int height = options . outHeight ; final int width = options . outWidth ; int inSampleSize = _NUM ; if ( rqsW == _NUM || rqsH == _NUM ) return _NUM ; if ( height > rqsH || width > rqsW ) { final int heightRatio = Math . round ( ( float ) height / ( float ) rqsH ) ; final int widthRatio = Math . round ( ( float ) width / ( float ) rqsW ) ; inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio ; } return inSampleSize ; }
80145	public boolean hasStatus ( final StatusID status ) { return statuses . contains ( status ) ; }
2491	@ Override public String toString ( ) { return _STR + _STR + instanceList + _STR + outcomeList + _STR + weightList + _STR + sequenceIds + _STR + sequencePositions + _STR + addingAnotherInstancesAllowed + _STR + totalNonNullFeaturesCount + _STR ; }
17440	static synchronized void computePRF_SSLv3 ( byte [ ] out , byte [ ] secret , byte [ ] seed ) { if ( sha == null ) { init ( ) ; } int pos = _NUM ; int iteration = _NUM ; byte [ ] digest ; while ( pos < out . length ) { byte [ ] pref = new byte [ iteration ] ; Arrays . fill ( pref , ( byte ) ( _NUM + iteration ++ ) ) ; sha . update ( pref ) ; sha . update ( secret ) ; sha . update ( seed ) ; md5 . update ( secret ) ; md5 . update ( sha . digest ( ) ) ; digest = md5 . digest ( ) ; if ( pos + _NUM > out . length ) { System . arraycopy ( digest , _NUM , out , pos , out . length - pos ) ; pos = out . length ; } else { System . arraycopy ( digest , _NUM , out , pos , _NUM ) ; pos += _NUM ; } } }
64862	public void addChannelMap ( ChannelMap channelMap ) { if ( ! mChannelMaps . contains ( channelMap ) ) { mChannelMaps . add ( channelMap ) ; int index = mChannelMaps . indexOf ( channelMap ) ; fireIntervalAdded ( this , index , index ) ; broadcast ( new ChannelMapEvent ( channelMap , Event . ADD ) ) ; } }
82359	@ Override public boolean add ( E o ) { if ( null == o ) { throw new NullPointerException ( ) ; } if ( offer ( o ) ) { return _BOOL ; } throw new IllegalStateException ( ) ; }
50831	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
31064	public Object putResource ( Object key , Object value ) { return ( objectCache . put ( key , value ) ) ; }
44469	public UidRange [ ] parseUidRange ( ) throws DecodingException { CharacterValidator validator = new MessageSetCharValidator ( ) ; String nextWord = consumeWord ( validator , _BOOL ) ; int commaPos = nextWord . indexOf ( _STR ) ; if ( commaPos == - _NUM ) { return new UidRange [ ] { parseUidRange ( nextWord ) } ; } ArrayList < UidRange > rangeList = new ArrayList < UidRange > ( ) ; int pos = _NUM ; while ( commaPos != - _NUM ) { String range = nextWord . substring ( pos , commaPos ) ; UidRange set = parseUidRange ( range ) ; rangeList . add ( set ) ; pos = commaPos + _NUM ; commaPos = nextWord . indexOf ( _STR , pos ) ; } String range = nextWord . substring ( pos ) ; rangeList . add ( parseUidRange ( range ) ) ; List < UidRange > merged = UidRange . mergeRanges ( rangeList ) ; return merged . toArray ( new UidRange [ merged . size ( ) ] ) ; }
76757	private String replaceSuffix ( String value , String toReplace , String changeTo ) { String vvalue ; if ( ( value == null ) || ( toReplace == null ) || ( changeTo == null ) ) { return value ; } vvalue = removeSuffix ( value , toReplace ) ; if ( value . equals ( vvalue ) ) { return value ; } else { return vvalue + changeTo ; } }
12321	private void executeClaimedTask ( ClaimedTask claimedTask ) { if ( ! claimedTask . setStartTime ( new Date ( ) ) ) { _log . info ( _STR , claimedTask . getTask ( ) ) ; return ; } ScanRangeTask task = claimedTask . getTask ( ) ; boolean releaseTask = _BOOL ; try { _scanWorkflow . renewScanRangeTasks ( ImmutableList . of ( task ) , QUEUE_RENEW_TTL ) ; releaseTask = asyncRangeScan ( task ) ; } finally { unclaimTask ( claimedTask , releaseTask ) ; _backgroundService . submit ( _startScansIfAvailableRunnable ) ; } }
37002	private static boolean createNaviDirectory ( ) { final File dir = new File ( ConfigHelper . getConfigurationDirectory ( Constants . COMPANY_NAME , Constants . PROJECT_NAME ) ) ; return dir . exists ( ) || dir . mkdir ( ) ; }
73915	public void updateButtonActionPerformed ( ) { if ( ! readReceiveDelay ( ) ) { return ; } if ( ! readPulseWidth ( ) ) { return ; } if ( ! checkConsistency ( ) ) { return ; } if ( curNode . getNodeType ( ) != nodeType ) { curNode . setNodeType ( nodeType ) ; } setNodeParameters ( ) ; changedNode = _BOOL ; editMode = _BOOL ; curNode = null ; addButton . setVisible ( _BOOL ) ; editButton . setVisible ( _BOOL ) ; deleteButton . setVisible ( _BOOL ) ; doneButton . setVisible ( _BOOL ) ; updateButton . setVisible ( _BOOL ) ; cancelButton . setVisible ( _BOOL ) ; nodeAddrField . setVisible ( _BOOL ) ; nodeAddrStatic . setVisible ( _BOOL ) ; statusText2 . setText ( stdStatus2 ) ; statusText3 . setText ( stdStatus3 ) ; statusText1 . setText ( rb . getString ( _STR ) + _STR + Integer . toString ( nodeAddress ) ) ; errorInStatus1 = _BOOL ; }
54272	public static Class toClass ( ClassFile cf , ClassLoader loader , ProtectionDomain domain ) throws CannotCompileException { try { byte [ ] b = toBytecode ( cf ) ; Method method ; Object [ ] args ; if ( domain == null ) { method = defineClass1 ; args = new Object [ ] { cf . getName ( ) , b , new Integer ( _NUM ) , new Integer ( b . length ) } ; } else { method = defineClass2 ; args = new Object [ ] { cf . getName ( ) , b , new Integer ( _NUM ) , new Integer ( b . length ) , domain } ; } return toClass2 ( method , loader , args ) ; } catch ( RuntimeException e ) { throw e ; } catch ( java . lang . reflect . InvocationTargetException e ) { throw new CannotCompileException ( e . getTargetException ( ) ) ; } catch ( Exception e ) { throw new CannotCompileException ( e ) ; } }
29058	public Iterator < Target > targetIterator ( ) { return targetList . iterator ( ) ; }
24912	private void fitSizeOfScrolledContent ( ) { Point p = scrollComposite . getSize ( ) ; main . setSize ( main . computeSize ( p . x , SWT . DEFAULT ) ) ; }
34896	public int hashCode ( ) { return name . hashCode ( ) ; }
48899	private static Map < String , SnmpOid > buildPoolIndexMap ( SnmpCachedData cached ) { if ( cached == null ) return Collections . emptyMap ( ) ; final SnmpOid [ ] indexes = cached . indexes ; final Object [ ] datas = cached . datas ; final int len = indexes . length ; final Map < String , SnmpOid > m = new HashMap < > ( len ) ; for ( int i = _NUM ; i < len ; i ++ ) { final SnmpOid index = indexes [ i ] ; if ( index == null ) continue ; final MemoryPoolMXBean mpm = ( MemoryPoolMXBean ) datas [ i ] ; if ( mpm == null ) continue ; final String name = mpm . getName ( ) ; if ( name == null ) continue ; m . put ( name , index ) ; } return m ; }
9675	public DCryptoStrength ( JFrame parent ) throws CryptoException { super ( parent , res . getString ( _STR ) , ModalityType . DOCUMENT_MODAL ) ; initComponents ( ) ; }
6594	private Component createSeparator ( ) { JSeparator sep = new JSeparator ( SwingConstants . VERTICAL ) ; sep . setPreferredSize ( new Dimension ( _NUM , _NUM ) ) ; sep . setMinimumSize ( new Dimension ( _NUM , _NUM ) ) ; return sep ; }
54547	public void add ( final T object ) { synchronized ( mLock ) { mList . add ( object ) ; } notifyDataSetChanged ( ) ; }
913	public void build ( RealmResults < T > results ) { int xIndex = _NUM ; for ( T object : results ) { mValues . add ( buildEntryFromResultObject ( object , xIndex ++ ) ) ; } }
16034	public byte [ ] generateSignature ( ) throws CryptoException , DataLengthException { contentDigest . doFinal ( mDash , mDash . length - hLen - sLen ) ; if ( sLen != _NUM ) { random . nextBytes ( salt ) ; System . arraycopy ( salt , _NUM , mDash , mDash . length - sLen , sLen ) ; } byte [ ] h = new byte [ hLen ] ; contentDigest . update ( mDash , _NUM , mDash . length ) ; contentDigest . doFinal ( h , _NUM ) ; block [ block . length - sLen - _NUM - hLen - _NUM ] = _NUM ; System . arraycopy ( salt , _NUM , block , block . length - sLen - hLen - _NUM , sLen ) ; byte [ ] dbMask = maskGeneratorFunction1 ( h , _NUM , h . length , block . length - hLen - _NUM ) ; for ( int i = _NUM ; i != dbMask . length ; i ++ ) { block [ i ] ^= dbMask [ i ] ; } block [ _NUM ] &= ( _NUM > > ( ( block . length * _NUM ) - emBits ) ) ; System . arraycopy ( h , _NUM , block , block . length - hLen - _NUM , hLen ) ; block [ block . length - _NUM ] = trailer ; byte [ ] b = cipher . processBlock ( block , _NUM , block . length ) ; clearBlock ( block ) ; return b ; }
53469	public static double [ ] [ ] computeWeightMatrix ( final int quanth , final int quants , final int quantb ) { final int dim = quanth * quants * quantb ; assert ( dim > _NUM ) ; final double [ ] [ ] m = new double [ dim ] [ dim ] ; for ( int x = _NUM ; x < dim ; x ++ ) { final int hx = x / ( quantb * quants ) ; final int sx = ( x / quantb ) % quants ; final int bx = x % quantb ; for ( int y = x ; y < dim ; y ++ ) { final int hy = y / ( quantb * quants ) ; final int sy = ( y / quantb ) % quants ; final int by = y % quantb ; final double chx = Math . cos ( ( hx + _NUM ) / quanth * MathUtil . TWOPI ) ; final double chy = Math . cos ( ( hy + _NUM ) / quanth * MathUtil . TWOPI ) ; final double shx = MathUtil . cosToSin ( ( hx + _NUM ) / quanth * MathUtil . TWOPI , chx ) ; final double shy = MathUtil . cosToSin ( ( hy + _NUM ) / quanth * MathUtil . TWOPI , chy ) ; final double cos = chx * ( sx + _NUM ) / quants - chy * ( sy + _NUM ) / quants ; final double sin = shx * ( sx + _NUM ) / quants - shy * ( sy + _NUM ) / quants ; final double db = ( bx - by ) / ( double ) quantb ; final double val = _NUM - Math . sqrt ( ( db * db + sin * sin + cos * cos ) / _NUM ) ; m [ x ] [ y ] = m [ y ] [ x ] = val ; } } return m ; }
18566	public void testNegPosFirstLonger ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM } ; byte bBytes [ ] = { - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int bSign = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . and ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
6310	@ Override public void write ( byte [ ] b , int off , int len ) { if ( ( off < _NUM ) || ( off > b . length ) || ( len < _NUM ) || ( ( off + len ) > b . length ) || ( ( off + len ) < _NUM ) ) { throw new IndexOutOfBoundsException ( ) ; } else if ( len == _NUM ) { return ; } synchronized ( this ) { int newcount = count + len ; int remaining = len ; int inBufferPos = count - filledBufferSum ; while ( remaining > _NUM ) { int part = Math . min ( remaining , currentBuffer . length - inBufferPos ) ; System . arraycopy ( b , off + len - remaining , currentBuffer , inBufferPos , part ) ; remaining -= part ; if ( remaining > _NUM ) { needNewBuffer ( newcount ) ; inBufferPos = _NUM ; } } count = newcount ; } }
42605	public static void openFileIntent ( Context context , File openFile ) { if ( context != null && openFile . exists ( ) ) { try { Intent intent = getFileIntent ( context , openFile ) ; context . startActivity ( intent ) ; } catch ( Exception e ) { GlobalUtils . logThis ( TAG , _STR , e ) ; } } }
79426	public static java . sql . Date toSqlDate ( String date ) { java . util . Date newDate = toDate ( date , _STR ) ; if ( newDate != null ) { return new java . sql . Date ( newDate . getTime ( ) ) ; } else { return null ; } }
29578	private synchronized void rebuildJournal ( ) throws IOException { if ( journalWriter != null ) { journalWriter . close ( ) ; } Writer writer = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFileTmp ) , Util . US_ASCII ) ) ; try { writer . write ( MAGIC ) ; writer . write ( _STR ) ; writer . write ( VERSION_1 ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( appVersion ) ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( valueCount ) ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; for ( Entry entry : lruEntries . values ( ) ) { if ( entry . currentEditor != null ) { writer . write ( DIRTY + _STR + entry . key + _STR ) ; } else { writer . write ( CLEAN + _STR + entry . key + entry . getLengths ( ) + _STR ) ; } } } finally { writer . close ( ) ; } if ( journalFile . exists ( ) ) { renameTo ( journalFile , journalFileBackup , _BOOL ) ; } renameTo ( journalFileTmp , journalFile , _BOOL ) ; journalFileBackup . delete ( ) ; journalWriter = new BufferedWriter ( new OutputStreamWriter ( new FileOutputStream ( journalFile , _BOOL ) , Util . US_ASCII ) ) ; }
74977	public static int round ( final float value ) { final int bits = Float . floatToRawIntBits ( value ) ; final int biasedExp = bits > > _NUM & _NUM ; final int shift = _NUM - _NUM + MAX_FLOAT_EXPONENT - biasedExp ; if ( ( shift & - _NUM ) == _NUM ) { int extendedMantissa = _NUM | bits & _NUM ; if ( bits < _NUM ) { extendedMantissa = - extendedMantissa ; } return ( extendedMantissa > > shift ) + _NUM > > _NUM ; } else { return ( int ) value ; } }
5668	public static PlainText plain ( short text ) { return plain ( Integer . toString ( text ) ) ; }
54317	public AttributeInfo copy ( ConstPool newCp , Map classnames ) { Copier copier = new Copier ( info , constPool , newCp , classnames ) ; try { copier . parameters ( ) ; return new ParameterAnnotationsAttribute ( newCp , getName ( ) , copier . close ( ) ) ; } catch ( Exception e ) { throw new RuntimeException ( e . toString ( ) ) ; } }
22225	private String createComponentChanges ( ) { StringBuilder builder = new StringBuilder ( ) ; for ( ServiceCatalogDiff serviceCatalogDiff : diffList ) { builder . append ( createApiChanges ( serviceCatalogDiff ) ) ; } return builder . toString ( ) ; }
70069	public static synchronized void it ( String description , UnsafeBlock block ) { it ( description , identity ( ) , block ) ; }
78785	public static boolean isWritable ( final File file , final boolean makeDirs ) { if ( file == null ) { Log . e ( FileUtils . class , _STR ) ; return _BOOL ; } final String fileParentDir = file . getParent ( ) ; if ( ! TextUtils . isEmpty ( fileParentDir ) ) { final File fileDir = new File ( fileParentDir ) ; if ( ! fileDir . exists ( ) ) { if ( makeDirs ) return makeDirsForFile ( file ) ; else return _BOOL ; } } boolean isWritable = _BOOL ; if ( file . exists ( ) ) isWritable = file . canWrite ( ) ; else { try { isWritable = file . createNewFile ( ) ; } catch ( IOException e ) { } if ( isWritable ) isWritable = file . delete ( ) ; } return isWritable ; }
45865	public String toString ( ) { return oid . toString ( ) ; }
14268	private static void createOrgAuthConfig ( String realmName ) throws Exception { String classMethod = _STR ; OrganizationConfigManager org = new OrganizationConfigManager ( ssoToken , realmName ) ; ServiceConfig orgConfig = org . getServiceConfig ( AUTH_SERVICE_NAME ) ; if ( orgConfig != null ) { Map aa = orgConfig . getAttributes ( ) ; if ( debug . messageEnabled ( ) ) { debug . message ( classMethod + _STR + realmName ) ; debug . message ( classMethod + _STR + aa ) ; } String orgName = realmName ; if ( LDAPUtils . isDN ( realmName ) ) { orgName = LDAPUtils . rdnValueFromDn ( realmName ) ; } String authConfigName = orgName + _STR ; String adminAuthConfigName = orgName + _STR ; Set authConfigAttrValue = ( Set ) aa . get ( ATTR_ORG_AUTH_MODULE ) ; if ( debug . messageEnabled ( ) ) { debug . message ( classMethod + _STR + authConfigAttrValue ) ; } Set newVal = new HashSet ( ) ; if ( authConfigAttrValue . size ( ) != _NUM && ! authConfigAttrValue . contains ( authConfigName ) ) { newVal . add ( authConfigName ) ; orgConfig . replaceAttributeValues ( ATTR_ORG_AUTH_MODULE , authConfigAttrValue , newVal ) ; } Set adminConfigAttrValue = ( Set ) aa . get ( ATTR_ADMIN_AUTH_MODULE ) ; if ( debug . messageEnabled ( ) ) { debug . message ( _STR + adminConfigAttrValue ) ; } if ( adminConfigAttrValue . size ( ) != _NUM && ! adminConfigAttrValue . contains ( adminAuthConfigName ) ) { newVal . clear ( ) ; newVal . add ( adminAuthConfigName ) ; orgConfig . replaceAttributeValues ( ATTR_ADMIN_AUTH_MODULE , adminConfigAttrValue , newVal ) ; } aa = orgConfig . getAttributes ( ) ; ServiceConfig s = org . getServiceConfig ( AUTH_CONFIG_SERVICE ) ; ServiceConfig authConfig = s . getSubConfig ( NAMED_CONFIG ) ; if ( authConfig == null ) { s . addSubConfig ( NAMED_CONFIG , null , _NUM , null ) ; authConfig = s . getSubConfig ( NAMED_CONFIG ) ; } Map aMap = new HashMap ( ) ; aMap . put ( ATTR_AUTH_CONFIG , authConfigAttrValue ) ; authConfig . addSubConfig ( authConfigName , SUB_NAMED_CONFIG , _NUM , aMap ) ; aMap . clear ( ) ; aMap . put ( ATTR_AUTH_CONFIG , adminConfigAttrValue ) ; authConfig . addSubConfig ( adminAuthConfigName , SUB_NAMED_CONFIG , _NUM , aMap ) ; } }
4092	public void read ( ByteCodeParser in ) throws IOException { int length = in . readInt ( ) ; _maxStack = in . readShort ( ) ; _maxLocals = in . readShort ( ) ; int codeLength = in . readInt ( ) ; _code = new byte [ codeLength ] ; in . read ( _code , _NUM , codeLength ) ; int exnCount = in . readShort ( ) ; for ( int i = _NUM ; i < exnCount ; i ++ ) { ExceptionItem exn = new ExceptionItem ( ) ; exn . setStart ( in . readShort ( ) & _NUM ) ; exn . setEnd ( in . readShort ( ) & _NUM ) ; exn . setHandler ( in . readShort ( ) & _NUM ) ; exn . setType ( in . readShort ( ) & _NUM ) ; _exceptions . add ( exn ) ; } int attrCount = in . readShort ( ) ; for ( int i = _NUM ; i < attrCount ; i ++ ) { Attribute attr = in . parseAttribute ( ) ; _attributes . add ( attr ) ; } }
19040	public void testSkip ( ) throws Exception { byte [ ] data = new byte [ ] { - _NUM , - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; TestInputStream tis = new TestInputStream ( data ) ; CipherInputStream cis = new CipherInputStream ( tis , new NullCipher ( ) ) ; int expected = data . length ; byte [ ] result = new byte [ expected ] ; int skipped = ( int ) cis . skip ( _NUM ) ; int ind = skipped ; int got = skipped + cis . read ( result , _NUM , _NUM ) ; while ( _BOOL ) { for ( int j = _NUM ; j < got - ind ; j ++ ) { if ( result [ j ] != data [ ind + j ] ) { fail ( _STR + _STR + data [ ind + j ] + _STR + result [ j ] ) ; } } if ( got == expected ) { break ; } else if ( got > expected ) { fail ( _STR + _STR + _STR ) ; } else { ind = got ; got += cis . read ( result , _NUM , _NUM ) ; } } if ( ( got = cis . read ( result , _NUM , _NUM ) ) != - _NUM ) { fail ( _STR + _STR + got + _STR ) ; } }
46548	void addString ( int c ) { if ( strpos == str . length ) { char newstr [ ] = new char [ str . length + _NUM ] ; System . arraycopy ( str , _NUM , newstr , _NUM , str . length ) ; str = newstr ; } str [ strpos ++ ] = ( char ) c ; }
71839	@ Override public int hashCode ( ) { return oid . hashCode ( ) ; }
39248	public CholeskyDecomposition ( Matrix Arg ) { double [ ] [ ] A = Arg . getArray ( ) ; n = Arg . getRowDimension ( ) ; L = new double [ n ] [ n ] ; isspd = ( Arg . getColumnDimension ( ) == n ) ; for ( int j = _NUM ; j < n ; j ++ ) { double [ ] Lrowj = L [ j ] ; double d = _NUM ; for ( int k = _NUM ; k < j ; k ++ ) { double [ ] Lrowk = L [ k ] ; double s = _NUM ; for ( int i = _NUM ; i < k ; i ++ ) { s += Lrowk [ i ] * Lrowj [ i ] ; } Lrowj [ k ] = s = ( A [ j ] [ k ] - s ) / L [ k ] [ k ] ; d = d + s * s ; isspd = isspd & ( A [ k ] [ j ] == A [ j ] [ k ] ) ; } d = A [ j ] [ j ] - d ; isspd = isspd & ( d > _NUM ) ; L [ j ] [ j ] = Math . sqrt ( Math . max ( d , _NUM ) ) ; for ( int k = j + _NUM ; k < n ; k ++ ) { L [ j ] [ k ] = _NUM ; } } }
64727	protected void findCandidateCrossings ( S2Point a , S2Point b , List < Integer > candidateCrossings ) { Preconditions . checkState ( indexComputed ) ; ArrayList < S2CellId > cover = Lists . newArrayList ( ) ; getCovering ( a , b , _BOOL , cover ) ; Set < Integer > uniqueSet = new HashSet < Integer > ( ) ; getEdgesInParentCells ( cover , uniqueSet ) ; getEdgesInChildrenCells ( a , b , cover , uniqueSet ) ; candidateCrossings . clear ( ) ; candidateCrossings . addAll ( uniqueSet ) ; }
29190	public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case _NUM : return TRUE_AS_OF_SECS ; case _NUM : return SOURCE ; case _NUM : return SYSTEM ; default : return null ; } }
36037	public RepositoryLocation ( String repositoryName , String [ ] pathComponents ) throws MalformedRepositoryLocationException { if ( repositoryName == null || repositoryName . isEmpty ( ) ) { throw new MalformedRepositoryLocationException ( _STR ) ; } if ( pathComponents == null ) { throw new MalformedRepositoryLocationException ( _STR ) ; } for ( String pathComp : pathComponents ) { if ( pathComp == null || pathComp . isEmpty ( ) ) { throw new MalformedRepositoryLocationException ( _STR ) ; } } this . repositoryName = repositoryName ; this . path = pathComponents ; }
25901	public void addProperty ( String key , String value ) { carbonProperties . setProperty ( key , value ) ; }
81275	protected JavaElementDelta createDeltaTree ( IJavaElement element , JavaElementDelta delta ) { JavaElementDelta childDelta = delta ; ArrayList ancestors = getAncestors ( element ) ; if ( ancestors == null ) { if ( equalsAndSameParent ( delta . getElement ( ) , getElement ( ) ) ) { this . kind = delta . kind ; this . changeFlags = delta . changeFlags ; this . movedToHandle = delta . movedToHandle ; this . movedFromHandle = delta . movedFromHandle ; } } else { for ( int i = _NUM , size = ancestors . size ( ) ; i < size ; i ++ ) { IJavaElement ancestor = ( IJavaElement ) ancestors . get ( i ) ; JavaElementDelta ancestorDelta = new JavaElementDelta ( ancestor ) ; ancestorDelta . addAffectedChild ( childDelta ) ; childDelta = ancestorDelta ; } } return childDelta ; }
16865	@ Override public String toString ( ) { return getTitle ( ) ; }
87087	public int size ( ) { if ( hmap == null ) { return _NUM ; } return hmap . size ( ) ; }
56253	public static String replace ( String inString , String oldPattern , String newPattern ) { if ( ! hasLength ( inString ) || ! hasLength ( oldPattern ) || newPattern == null ) { return inString ; } StringBuilder sb = new StringBuilder ( ) ; int pos = _NUM ; int index = inString . indexOf ( oldPattern ) ; int patLen = oldPattern . length ( ) ; while ( index >= _NUM ) { sb . append ( inString . substring ( pos , index ) ) ; sb . append ( newPattern ) ; pos = index + patLen ; index = inString . indexOf ( oldPattern , pos ) ; } sb . append ( inString . substring ( pos ) ) ; return sb . toString ( ) ; }
83381	public boolean coordinateInZone ( Id < ActivityFacility > zoneID , Coord coordinate ) { Point point = MGC . xy2Point ( coordinate . getX ( ) , coordinate . getY ( ) ) ; return pointInZone ( zoneID , point ) ; }
38143	public String associatorTipText ( ) { return _STR ; }
12725	public XwavesLabelfileReader ( Reader reader ) throws IOException { this . reader = new BufferedReader ( reader ) ; parseLabels ( ) ; reader . close ( ) ; }
79964	public static double parseDoubleDefault ( String s , double def ) { if ( s == null ) { return def ; } try { return Double . parseDouble ( s ) ; } catch ( NumberFormatException e ) { return def ; } }
57270	public static void registerApp ( int application , String appName ) throws AppIDException { if ( ( application & APP_ID_MASK ) != application ) { throw new InvalidAppIDValueException ( application ) ; } String oldApp = appIdMap . putIfAbsent ( application , appName ) ; if ( oldApp != null && ! oldApp . equals ( appName ) ) { throw new AppIDInUseException ( application , oldApp , appName ) ; } }
24115	public boolean putProfile ( Profile profile ) { return putProfile ( profile , _BOOL ) ; }
44336	public void print ( char c ) { writer . print ( c ) ; }
69708	public void initBlockViews ( ) { if ( mWorkspaceView != null ) { List < Block > rootBlocks = mWorkspace . getRootBlocks ( ) ; ConnectionManager connManager = mWorkspace . getConnectionManager ( ) ; for ( int i = _NUM ; i < rootBlocks . size ( ) ; i ++ ) { BlockGroup bg = mViewFactory . buildBlockGroupTree ( rootBlocks . get ( i ) , connManager , mTouchHandler ) ; mWorkspaceView . addView ( bg ) ; } } }
13811	protected void clearAllTrails ( SSOTokenID tokenID ) { boolean removed = _BOOL ; String key = tokenID . toString ( ) ; synchronized ( mapTokenIDs ) { removed = ( mapTokenIDs . remove ( key ) != null ) ; } }
9700	public DNetscapeCaRevocationUrl ( JDialog parent , byte [ ] value ) throws IOException { super ( parent ) ; setTitle ( res . getString ( _STR ) ) ; initComponents ( ) ; prepopulateWithValue ( value ) ; }
22317	private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
42841	public static int [ ] parseNumberList ( String listStr , int minVal , int maxVal , boolean allowZero ) { int [ ] values ; if ( listStr . indexOf ( _STR ) < _NUM ) { values = new int [ _NUM ] ; values [ _NUM ] = parseIntRange ( listStr , minVal , maxVal , allowZero ) ; } else { String [ ] valueStrs = listStr . split ( _STR ) ; int len = valueStrs . length ; values = new int [ len ] ; for ( int i = _NUM ; i < len ; i ++ ) { values [ i ] = parseIntRange ( valueStrs [ i ] , minVal , maxVal , allowZero ) ; } } return values ; }
22074	public DirectoryOrFileNotFoundException ( String entity , String name ) { super ( String . format ( _errorMessage , entity , name ) ) ; }
25811	public void closeStream ( ) { CarbonUtil . closeStreams ( stream ) ; executorService . shutdown ( ) ; }
45805	void scramble ( ) { initialSize = getSize ( ) ; int a [ ] = new int [ initialSize . height / _NUM ] ; double f = initialSize . width / ( double ) a . length ; for ( int i = a . length ; -- i >= _NUM ; ) { a [ i ] = ( int ) ( i * f ) ; } for ( int i = a . length ; -- i >= _NUM ; ) { int j = ( int ) ( i * Math . random ( ) ) ; int t = a [ i ] ; a [ i ] = a [ j ] ; a [ j ] = t ; } arr = a ; }
79614	private int readAnnotationValue ( int v , final char [ ] buf , final String name , final AnnotationVisitor av ) { int i ; if ( av == null ) { switch ( b [ v ] & _NUM ) { case _STR : return v + _NUM ; case _STR : return readAnnotationValues ( v + _NUM , buf , _BOOL , null ) ; case _STR : return readAnnotationValues ( v + _NUM , buf , _BOOL , null ) ; default : return v + _NUM ; } } switch ( b [ v ++ ] & _NUM ) { case _STR : case _STR : case _STR : case _STR : av . visit ( name , readConst ( readUnsignedShort ( v ) , buf ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , new Byte ( ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , readInt ( items [ readUnsignedShort ( v ) ] ) == _NUM ? Boolean . FALSE : Boolean . TRUE ) ; v += _NUM ; break ; case _STR : av . visit ( name , new Short ( ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , new Character ( ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , readUTF8 ( v , buf ) ) ; v += _NUM ; break ; case _STR : av . visitEnum ( name , readUTF8 ( v , buf ) , readUTF8 ( v + _NUM , buf ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , Type . getType ( readUTF8 ( v , buf ) ) ) ; v += _NUM ; break ; case _STR : v = readAnnotationValues ( v + _NUM , buf , _BOOL , av . visitAnnotation ( name , readUTF8 ( v , buf ) ) ) ; break ; case _STR : int size = readUnsignedShort ( v ) ; v += _NUM ; if ( size == _NUM ) { return readAnnotationValues ( v - _NUM , buf , _BOOL , av . visitArray ( name ) ) ; } switch ( this . b [ v ++ ] & _NUM ) { case _STR : byte [ ] bv = new byte [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { bv [ i ] = ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , bv ) ; -- v ; break ; case _STR : boolean [ ] zv = new boolean [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { zv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) != _NUM ; v += _NUM ; } av . visit ( name , zv ) ; -- v ; break ; case _STR : short [ ] sv = new short [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { sv [ i ] = ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , sv ) ; -- v ; break ; case _STR : char [ ] cv = new char [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { cv [ i ] = ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , cv ) ; -- v ; break ; case _STR : int [ ] iv = new int [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { iv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , iv ) ; -- v ; break ; case _STR : long [ ] lv = new long [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { lv [ i ] = readLong ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , lv ) ; -- v ; break ; case _STR : float [ ] fv = new float [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { fv [ i ] = Float . intBitsToFloat ( readInt ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; } av . visit ( name , fv ) ; -- v ; break ; case _STR : double [ ] dv = new double [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { dv [ i ] = Double . longBitsToDouble ( readLong ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; } av . visit ( name , dv ) ; -- v ; break ; default : v = readAnnotationValues ( v - _NUM , buf , _BOOL , av . visitArray ( name ) ) ; } } return v ; }
86994	public static SIPHeader parseSIPHeader ( String header ) throws ParseException { int start = _NUM ; int end = header . length ( ) - _NUM ; try { while ( header . charAt ( start ) <= _NUM ) start ++ ; while ( header . charAt ( end ) <= _NUM ) end -- ; } catch ( ArrayIndexOutOfBoundsException e ) { throw new ParseException ( _STR , _NUM ) ; } StringBuilder buffer = new StringBuilder ( end + _NUM ) ; int i = start ; int lineStart = start ; boolean endOfLine = _BOOL ; while ( i <= end ) { char c = header . charAt ( i ) ; if ( c == _STR || c == _STR ) { if ( ! endOfLine ) { buffer . append ( header . substring ( lineStart , i ) ) ; endOfLine = _BOOL ; } } else { if ( endOfLine ) { endOfLine = _BOOL ; if ( c == _STR || c == _STR ) { buffer . append ( _STR ) ; lineStart = i + _NUM ; } else { lineStart = i ; } } } i ++ ; } buffer . append ( header . substring ( lineStart , i ) ) ; buffer . append ( _STR ) ; HeaderParser hp = ParserFactory . createParser ( buffer . toString ( ) ) ; if ( hp == null ) throw new ParseException ( _STR , _NUM ) ; return hp . parse ( ) ; }
47787	private static int convertSRGBtoLinearRGB ( int color ) { float input , output ; input = color / _NUM ; if ( input <= _NUM ) { output = input / _NUM ; } else { output = ( float ) Math . pow ( ( input + _NUM ) / _NUM , _NUM ) ; } return Math . round ( output * _NUM ) ; }
86602	public void recordBeginning ( ) { final String msg = _STR + mModuleName + _STR + mRunId ; mUsageMessages . add ( msg ) ; Diagnostic . developerLog ( msg ) ; mClient . recordBeginning ( mModuleName , mRunId ) ; }
31239	static float rotateY ( float pX , float pY , float cX , float cY , float angleInDegrees ) { double angle = Math . toRadians ( angleInDegrees ) ; return ( float ) ( Math . sin ( angle ) * ( pX - cX ) + Math . cos ( angle ) * ( pY - cY ) + cY ) ; }
12663	public boolean isPronounceable ( String word ) { String lowerCaseWord = word . toLowerCase ( ) ; return ( prefixFSM . accept ( lowerCaseWord ) && suffixFSM . accept ( lowerCaseWord ) ) ; }
71121	public void addSplitEdges ( List edgeList ) { addEndpoints ( ) ; Iterator it = iterator ( ) ; EdgeIntersection eiPrev = ( EdgeIntersection ) it . next ( ) ; while ( it . hasNext ( ) ) { EdgeIntersection ei = ( EdgeIntersection ) it . next ( ) ; Edge newEdge = createSplitEdge ( eiPrev , ei ) ; edgeList . add ( newEdge ) ; eiPrev = ei ; } }
2536	public IOUtils ( ) { super ( ) ; }
1840	public MemBasedCache ( int maxCacheSizeInBytes ) { mMaxCacheSizeInBytes = maxCacheSizeInBytes ; mDataEntries = new LinkedHashMap < String , CacheHeader > ( _NUM , _NUM , _BOOL ) ; }
34629	public void updateMaxTextWidths ( float requiredWidth , float matchContentsWidth ) { mMaxRequiredWidth = Math . max ( mMaxRequiredWidth , requiredWidth ) ; mMaxMatchContentsWidth = Math . max ( mMaxMatchContentsWidth , matchContentsWidth ) ; }
53054	public void enableOverview ( boolean b ) { if ( overviewItem != null ) { overviewItem . setEnabled ( b ) ; } }
11282	public void mouseEntered ( MouseEvent e ) { if ( Debug . debugging ( _STR ) ) { Debug . output ( getID ( ) + _STR ) ; } super . mouseEntered ( e ) ; autoZoom = _BOOL ; }
77524	public PageOfCollections fetchPage ( PageOfCollections page , SolrZkClient zkClient ) throws KeeperException , InterruptedException { List < String > children = getCollections ( zkClient ) ; page . selected = children ; if ( page . start == _NUM && page . rows == - _NUM && page . filter == null && children . size ( ) > _NUM ) { page . rows = _NUM ; page . start = _NUM ; } if ( page . filterType == FilterType . name && page . filter != null ) children = page . applyNameFilter ( children ) ; if ( page . filterType != FilterType . status ) page . selectPage ( children ) ; return page ; }
54237	public void accept ( final AnnotationVisitor av ) { if ( av != null ) { if ( values != null ) { for ( int i = _NUM ; i < values . size ( ) ; i += _NUM ) { String name = ( String ) values . get ( i ) ; Object value = values . get ( i + _NUM ) ; accept ( av , name , value ) ; } } av . visitEnd ( ) ; } }
56381	public IdsQueryBuilder addIds ( String ... ids ) { values . addAll ( Arrays . asList ( ids ) ) ; return this ; }
81120	private void stop ( HttpServletRequest request , HttpServletResponse response ) throws IOException { PrintWriter out = response . getWriter ( ) ; String label = request . getParameter ( _STR ) ; Monitor mon = removeMon ( label , null , DEFAULT_UNITS ) ; if ( mon == null ) { out . println ( ERROR + _STR ) ; } else { mon . stop ( ) ; out . println ( OK + _STR + mon ) ; } }
67779	public static String normalizeUrl ( String requestUrl ) throws OAuthException { if ( ( requestUrl == null ) || ( requestUrl . length ( ) == _NUM ) ) { throw new OAuthException ( _STR ) ; } URI uri ; try { uri = new URI ( requestUrl ) ; } catch ( URISyntaxException e ) { throw new OAuthException ( e ) ; } String authority = uri . getAuthority ( ) ; String scheme = uri . getScheme ( ) ; if ( authority == null || scheme == null ) { throw new OAuthException ( _STR ) ; } authority = authority . toLowerCase ( ) ; scheme = scheme . toLowerCase ( ) ; if ( ( scheme . equals ( _STR ) && uri . getPort ( ) == _NUM ) || ( scheme . equals ( _STR ) && uri . getPort ( ) == _NUM ) ) { int index = authority . lastIndexOf ( _STR ) ; if ( index >= _NUM ) { authority = authority . substring ( _NUM , index ) ; } } return scheme + _STR + authority + uri . getRawPath ( ) ; }
84181	public void invoke ( InputStream is , OutputStream os , SerializerFactory serializerFactory ) throws Exception { boolean isDebug = _BOOL ; if ( isDebugInvoke ( ) ) { isDebug = _BOOL ; PrintWriter dbg = createDebugPrintWriter ( ) ; HessianDebugInputStream dIs = new HessianDebugInputStream ( is , dbg ) ; dIs . startTop2 ( ) ; is = dIs ; HessianDebugOutputStream dOs = new HessianDebugOutputStream ( os , dbg ) ; dOs . startTop2 ( ) ; os = dOs ; } HessianInputFactory . HeaderType header = _inputFactory . readHeader ( is ) ; AbstractHessianInput in ; AbstractHessianOutput out ; switch ( header ) { case CALL_1_REPLY_1 : in = _hessianFactory . createHessianInput ( is ) ; out = _hessianFactory . createHessianOutput ( os ) ; break ; case CALL_1_REPLY_2 : in = _hessianFactory . createHessianInput ( is ) ; out = _hessianFactory . createHessian2Output ( os ) ; break ; case HESSIAN_2 : in = _hessianFactory . createHessian2Input ( is ) ; in . readCall ( ) ; out = _hessianFactory . createHessian2Output ( os ) ; break ; default : throw new IllegalStateException ( header + _STR ) ; } if ( serializerFactory != null ) { in . setSerializerFactory ( serializerFactory ) ; out . setSerializerFactory ( serializerFactory ) ; } try { invoke ( _service , in , out ) ; } finally { in . close ( ) ; out . close ( ) ; if ( isDebug ) os . close ( ) ; } }
30438	private void commitLocalTransaction ( ) throws CommitFailedException { if ( _tx == null ) { return ; } if ( _logger . isLoggable ( Level . FINEST ) ) { _logger . log ( Level . FINEST , _STR + _tx ) ; } try { _tx . commit ( ) ; } catch ( Exception e ) { if ( _logger . isLoggable ( Level . SEVERE ) ) { _logger . log ( Level . SEVERE , _STR + _tx , e ) ; } throw new CommitFailedException ( e ) ; } }
14338	public static Entry addObjectClass ( Entry entry ) { Attribute attribute = entry . getAttribute ( CoreTokenConstants . OBJECT_CLASS ) ; if ( attribute == null ) { entry . addAttribute ( CoreTokenConstants . OBJECT_CLASS , CoreTokenConstants . FR_CORE_TOKEN ) ; } return entry ; }
30274	@ SuppressWarnings ( _STR ) public List < Boundary > populateArea ( final Long wardId ) { HierarchyType hType = heirarchyTypeService . getHierarchyTypeByName ( hierarchyTypeName ) ; ; List < Boundary > areaList = new LinkedList < Boundary > ( ) ; final BoundaryType childBoundaryType = boundaryTypeService . getBoundaryTypeByNameAndHierarchyType ( _STR , hType ) ; final Boundary parentBoundary = boundaryService . getBoundaryById ( wardId ) ; areaList = new LinkedList ( crossHeirarchyService . getCrossHierarchyChildrens ( parentBoundary , childBoundaryType ) ) ; LOGGER . info ( _STR + areaList . toString ( ) ) ; return areaList ; }
67838	private static String readName ( DataInputStream dis , byte data [ ] ) throws IOException { int c = dis . readUnsignedByte ( ) ; if ( ( c & _NUM ) == _NUM ) { c = ( ( c & _NUM ) << _NUM ) + dis . readUnsignedByte ( ) ; HashSet < Integer > jumps = new HashSet < Integer > ( ) ; jumps . add ( c ) ; return readName ( data , c , jumps ) ; } if ( c == _NUM ) { return _STR ; } byte b [ ] = new byte [ c ] ; dis . readFully ( b ) ; String s = IDN . toUnicode ( new String ( b ) ) ; String t = readName ( dis , data ) ; if ( t . length ( ) > _NUM ) { s = s + _STR + t ; } return s ; }
1725	public SimpleString concat ( final char c ) { byte [ ] bytes = new byte [ data . length + _NUM ] ; System . arraycopy ( data , _NUM , bytes , _NUM , data . length ) ; bytes [ data . length ] = ( byte ) ( c & _NUM ) ; bytes [ data . length + _NUM ] = ( byte ) ( c > > _NUM & _NUM ) ; return new SimpleString ( bytes ) ; }
1994	public static double probToLogOdds ( double prob ) { if ( gr ( prob , _NUM ) || ( sm ( prob , _NUM ) ) ) { throw new IllegalArgumentException ( _STR + _STR + prob ) ; } double p = SMALL + ( _NUM - _NUM * SMALL ) * prob ; return Math . log ( p / ( _NUM - p ) ) ; }
47233	private void signalNotEmpty ( ) { final ReentrantLock takeLock = this . takeLock ; takeLock . lock ( ) ; try { notEmpty . signal ( ) ; } finally { takeLock . unlock ( ) ; } }
12699	public void deepFill ( MaryNode specTree ) { tree = specTree ; numberOfLeaves = _NUM ; sortNode ( _NUM , tree ) ; }
22915	public int nodeCount ( ) { return nodes == null ? _NUM : nodes . size ( ) ; }
71342	public void addToGlobalBlacklist ( String host ) { addToGlobalBlacklist ( host , System . currentTimeMillis ( ) + this . globalBlacklistTimeout ) ; }
49937	public boolean addNode ( Lop node ) { if ( nodes . contains ( node ) ) return _BOOL ; nodes . add ( node ) ; return _BOOL ; }
68950	private JSONArray requestAllFileSystems ( ) throws IOException , JSONException { JSONArray ret = new JSONArray ( ) ; for ( Filesystem fs : filesystems ) { ret . put ( fs . getRootEntry ( ) ) ; } return ret ; }
47067	private void writeObject ( java . io . ObjectOutputStream s ) throws java . io . IOException { s . defaultWriteObject ( ) ; for ( Node < K , V > n = findFirst ( ) ; n != null ; n = n . next ) { V v = n . getValidValue ( ) ; if ( v != null ) { s . writeObject ( n . key ) ; s . writeObject ( v ) ; } } s . writeObject ( null ) ; }
75808	public static final double sigma ( double a ) { return _NUM / ( _NUM + Math . exp ( - a ) ) ; }
53939	public void insertOrRefresh ( final KBucketEntry newEntry ) { if ( newEntry == null ) return ; List < KBucketEntry > entriesRef = entries ; for ( KBucketEntry existing : entriesRef ) { if ( existing . equals ( newEntry ) ) { existing . mergeInTimestamps ( newEntry ) ; return ; } if ( existing . matchIPorID ( newEntry ) ) { DHT . logInfo ( _STR + newEntry + _STR + existing + _STR ) ; return ; } } if ( newEntry . verifiedReachable ( ) ) { if ( entriesRef . size ( ) < DHTConstants . MAX_ENTRIES_PER_BUCKET ) { modifyMainBucket ( null , newEntry ) ; return ; } if ( replaceBadEntry ( newEntry ) ) return ; KBucketEntry youngest = entriesRef . get ( entriesRef . size ( ) - _NUM ) ; if ( youngest . getCreationTime ( ) > newEntry . getCreationTime ( ) || newEntry . getRTT ( ) * _NUM < youngest . getRTT ( ) ) { modifyMainBucket ( youngest , newEntry ) ; insertInReplacementBucket ( youngest ) ; return ; } } insertInReplacementBucket ( newEntry ) ; }
44135	public void translate ( double x , double y ) { currentTransform . translate ( x , y ) ; try { writeTransform ( new AffineTransform ( _NUM , _NUM , _NUM , _NUM , x , y ) ) ; } catch ( IOException e ) { handleException ( e ) ; } }
21985	public static boolean isSupportedAddRPProtectionVirtualPoolChange ( Volume volume , VirtualPool currentVpool , VirtualPool newVpool , DbClient dbClient , StringBuffer notSuppReasonBuff ) { s_logger . info ( String . format ( _STR , currentVpool . getLabel ( ) , newVpool . getLabel ( ) ) ) ; if ( isSameVirtualPool ( currentVpool , newVpool , notSuppReasonBuff ) ) { return _BOOL ; } if ( volume . checkForRp ( ) || VirtualPool . vPoolSpecifiesProtection ( currentVpool ) ) { notSuppReasonBuff . append ( _STR ) ; return _BOOL ; } if ( ! VirtualPool . vPoolSpecifiesHighAvailability ( currentVpool ) && VirtualPool . vPoolSpecifiesRPVPlex ( newVpool ) ) { notSuppReasonBuff . append ( _STR ) ; return _BOOL ; } if ( VirtualPool . vPoolSpecifiesHighAvailability ( currentVpool ) && ! VirtualPool . vPoolSpecifiesHighAvailabilityDistributed ( currentVpool ) && VirtualPool . vPoolSpecifiesMetroPoint ( newVpool ) ) { notSuppReasonBuff . append ( _STR + _STR ) ; return _BOOL ; } String [ ] include = new String [ ] { TYPE , VARRAYS , REF_VPOOL , MIRROR_VPOOL , FAST_EXPANSION , ACLS , INACTIVE , PROTOCOLS , PROVISIONING_TYPE , USE_MATCHED_POOLS , ARRAY_INFO , DRIVE_TYPE , AUTO_TIER_POLICY_NAME , HOST_IO_LIMIT_IOPS , HOST_IO_LIMIT_BANDWIDTH , VMAX_COMPRESSION_ENABLED , IS_THIN_VOLUME_PRE_ALLOCATION_ENABLED , ASSIGNED_STORAGE_POOLS } ; Map < String , Change > changes = analyzeChanges ( currentVpool , newVpool , include , null , null ) ; if ( ! changes . isEmpty ( ) ) { notSuppReasonBuff . append ( _STR ) ; fillInNotSupportedReasons ( changes , notSuppReasonBuff ) ; return _BOOL ; } include = new String [ ] { PROTECTION_VARRAY_SETTINGS } ; changes = analyzeChanges ( currentVpool , newVpool , include , null , null ) ; if ( changes . isEmpty ( ) ) { notSuppReasonBuff . append ( _STR ) ; fillInNotSupportedReasons ( changes , notSuppReasonBuff ) ; return _BOOL ; } if ( VirtualPool . vPoolSpecifiesHighAvailability ( currentVpool ) && ( VirtualPool . vPoolSpecifiesRPVPlex ( newVpool ) || VirtualPool . vPoolSpecifiesMetroPoint ( newVpool ) ) ) { VirtualPoolChangeOperationEnum op = vplexCommonChecks ( volume , currentVpool , newVpool , dbClient , notSuppReasonBuff , include ) ; if ( op == null || ! op . equals ( VirtualPoolChangeOperationEnum . RP_PROTECTED ) ) { return _BOOL ; } } return _BOOL ; }
11133	private void writeObject ( ObjectOutputStream oos ) throws IOException { oos . defaultWriteObject ( ) ; boolean writeFont = ( f != OMText . DEFAULT_FONT ) ; oos . writeBoolean ( writeFont ) ; if ( writeFont ) { oos . writeObject ( f . getName ( ) ) ; oos . writeInt ( f . getSize ( ) ) ; oos . writeInt ( f . getStyle ( ) ) ; } writeStroke ( oos , stroke , OMGraphic . BASIC_STROKE ) ; writeStroke ( oos , textMatteStroke , DEFAULT_TEXT_MATTE_STROKE ) ; }
42694	private static void writeSpaces ( Writer out , int amt ) throws IOException { while ( amt > _NUM ) { out . write ( _STR ) ; amt -- ; } }
53436	public static double relativeOverlap ( SpatialComparable box1 , SpatialComparable box2 ) { final int dim = assertSameDimensionality ( box1 , box2 ) ; double overlap = _NUM ; double vol1 = _NUM ; double vol2 = _NUM ; for ( int i = _NUM ; i < dim ; i ++ ) { final double box1min = box1 . getMin ( i ) ; final double box1max = box1 . getMax ( i ) ; final double box2min = box2 . getMin ( i ) ; final double box2max = box2 . getMax ( i ) ; final double omax = Math . min ( box1max , box2max ) ; final double omin = Math . max ( box1min , box2min ) ; if ( omax <= omin ) { return _NUM ; } overlap *= omax - omin ; vol1 *= box1max - box1min ; vol2 *= box2max - box2min ; } return overlap / ( vol1 + vol2 ) ; }
40276	protected void handleAutoDraw ( ) { if ( isToolItemSelected ( ToolBarItemKey . AUTO_DRAW ) ) { onAutoDraw ( ) ; } }
50646	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
72300	protected final void _loadToHaveAtLeast ( int minAvailable ) throws IOException { if ( _inputStream == null ) { throw _constructError ( _STR + minAvailable + _STR ) ; } int amount = _inputEnd - _inputPtr ; _currInputProcessed += _inputPtr ; if ( amount > _NUM && _inputPtr > _NUM ) { System . arraycopy ( _inputBuffer , _inputPtr , _inputBuffer , _NUM , amount ) ; _inputEnd = amount ; } else { _inputEnd = _NUM ; } _inputPtr = _NUM ; while ( _inputEnd < minAvailable ) { int count = _inputStream . read ( _inputBuffer , _inputEnd , _inputBuffer . length - _inputEnd ) ; if ( count < _NUM ) { _closeInput ( ) ; if ( count == _NUM ) { throw new IOException ( _STR + amount + _STR ) ; } throw _constructError ( _STR + minAvailable + _STR + minAvailable + _STR ) ; } _inputEnd += count ; } }
73761	public Z21Message ( byte [ ] a , int l ) { super ( String . valueOf ( a ) ) ; setBinary ( _BOOL ) ; }
65252	private MethodDescriptor [ ] sortMethodDescriptors ( MethodDescriptor [ ] methodDescriptors ) { return methodSorter != null ? methodSorter . sortMethodDescriptors ( methodDescriptors ) : methodDescriptors ; }
11048	public static Properties parsePropertyList ( String list ) throws PropertyStringFormatException { return parsePropertyList ( list , propertySeparators , keyValueSeparators ) ; }
65181	public boolean packageHasAnnotation ( Annotation annotation ) { try { Package pkg = type . getPackage ( ) ; if ( pkg == null ) { return _BOOL ; } String className = pkg . getName ( ) + _STR ; Class < ? > packageType = Class . forName ( className ) ; AnnotationAccessor accessor = new AnnotationAccessor ( supportedAnnotations , packageType , ignoreAnnotationFailure ) ; return accessor . typeHas ( annotation ) ; } catch ( ClassNotFoundException e ) { return _BOOL ; } }
37101	private String buildToolTip ( final CTaggedGraphNodesContainerNode node ) { final StringBuilder tooltip = new StringBuilder ( _STR ) ; boolean first = _BOOL ; for ( final NaviNode graphnode : node . getGraphNodes ( ) ) { if ( ! first ) { tooltip . append ( _STR ) ; } tooltip . append ( CNodesDisplayString . getDisplayString ( graphnode ) ) ; first = _BOOL ; } return tooltip + _STR ; }
39908	public void makeGraph ( File linkGraph ) throws Exception { String temp212 ; int rowNum = _NUM ; BufferedReader br = new BufferedReader ( new InputStreamReader ( new FileInputStream ( linkGraph ) ) ) ; while ( ( temp212 = br . readLine ( ) ) != null ) { String [ ] strs = temp212 . split ( _STR ) ; for ( int i = _NUM ; i < strs . length ; i ++ ) { graph [ rowNum ] [ i ] = Double . parseDouble ( strs [ i ] ) ; } rowNum ++ ; } for ( int i = _NUM ; i < dataNum ; i ++ ) { for ( int j = _NUM ; j < dimension ; j ++ ) { W [ i ] [ j ] = r . nextDouble ( ) ; H [ j ] [ i ] = r . nextDouble ( ) ; } } for ( int i = _NUM ; i < dataNum ; i ++ ) { double sumW = _NUM ; double sumH = _NUM ; for ( int j = _NUM ; j < dimension ; j ++ ) { sumW += W [ i ] [ j ] * W [ i ] [ j ] ; sumH += H [ j ] [ i ] * H [ j ] [ i ] ; } sumW = Math . sqrt ( sumW ) ; sumH = Math . sqrt ( sumH ) ; for ( int j = _NUM ; j < dimension ; j ++ ) { W [ i ] [ j ] /= sumW ; H [ j ] [ i ] /= sumH ; } } trainW ( ) ; init = _BOOL ; }
39886	public void removeSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { return ; } mListeners . remove ( listener ) ; }
8558	public boolean removeOnItemClickListener ( OnItemClickListener itemClickListener ) { return clickListeners . remove ( itemClickListener ) ; }
72900	@ Override protected int lookForSelectablePosition ( int position , boolean lookDown ) { final ListAdapter adapter = mAdapter ; if ( adapter == null || isInTouchMode ( ) ) { return INVALID_POSITION ; } final int count = adapter . getCount ( ) ; if ( ! mAreAllItemsSelectable ) { if ( lookDown ) { position = Math . max ( _NUM , position ) ; while ( position < count && ! adapter . isEnabled ( position ) ) { position ++ ; } } else { position = Math . min ( position , count - _NUM ) ; while ( position >= _NUM && ! adapter . isEnabled ( position ) ) { position -- ; } } if ( position < _NUM || position >= count ) { return INVALID_POSITION ; } return position ; } else { if ( position < _NUM || position >= count ) { return INVALID_POSITION ; } return position ; } }
86681	public static String padRight ( final String s , final int length ) { final int pad = length - s . length ( ) ; return pad > _NUM ? s + getSpaceString ( pad ) : s ; }
71843	private static String [ ] collationMatchingRuleNames ( final List < String > localeNames , final int numSuffix , final String symbolicSuffix ) { final List < String > names = new ArrayList < > ( ) ; for ( String localeName : localeNames ) { if ( symbolicSuffix . isEmpty ( ) ) { names . add ( localeName ) ; } else { names . add ( localeName + _STR + numSuffix ) ; names . add ( localeName + _STR + symbolicSuffix ) ; } } return names . toArray ( new String [ names . size ( ) ] ) ; }
25600	public static boolean isCacheSafe ( Class < ? > clazz , ClassLoader classLoader ) { Assert . notNull ( clazz , _STR ) ; ClassLoader target = clazz . getClassLoader ( ) ; if ( target == null ) { return _BOOL ; } ClassLoader cur = classLoader ; if ( cur == target ) { return _BOOL ; } while ( cur != null ) { cur = cur . getParent ( ) ; if ( cur == target ) { return _BOOL ; } } return _BOOL ; }
4782	public void write ( PrintStream out ) { write ( out , table ) ; }
41483	static Part from ( String encoded , String decoded ) { if ( encoded == null ) { return NULL ; } if ( encoded . length ( ) == _NUM ) { return EMPTY ; } if ( decoded == null ) { return NULL ; } if ( decoded . length ( ) == _NUM ) { return EMPTY ; } return new Part ( encoded , decoded ) ; }
50715	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
47513	private int [ ] createEpochMonths ( int epochDay , int minYear , int maxYear , Map < Integer , int [ ] > years ) { int numMonths = ( maxYear - minYear + _NUM ) * _NUM + _NUM ; int epochMonth = _NUM ; int [ ] epochMonths = new int [ numMonths ] ; minMonthLength = Integer . MAX_VALUE ; maxMonthLength = Integer . MIN_VALUE ; for ( int year = minYear ; year <= maxYear ; year ++ ) { int [ ] months = years . get ( year ) ; for ( int month = _NUM ; month < _NUM ; month ++ ) { int length = months [ month ] ; epochMonths [ epochMonth ++ ] = epochDay ; if ( length < _NUM || length > _NUM ) { throw new IllegalArgumentException ( _STR + minYear ) ; } epochDay += length ; minMonthLength = Math . min ( minMonthLength , length ) ; maxMonthLength = Math . max ( maxMonthLength , length ) ; } } epochMonths [ epochMonth ++ ] = epochDay ; if ( epochMonth != epochMonths . length ) { throw new IllegalStateException ( _STR + epochMonth + _STR + epochMonths . length ) ; } return epochMonths ; }
20951	private static String descriptorToInternalName ( String descriptor ) { switch ( descriptor . charAt ( _NUM ) ) { case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : return descriptor ; case _STR : return classDescriptorToInternalName ( descriptor ) ; default : throw new IllegalArgumentException ( _STR + descriptor ) ; } }
72923	public Subscription register ( Object mBean , MBeanDescription description ) { return register ( mBean , description . getMBeanName ( getNextId ( ) ) ) ; }
32525	void checkAfterUnmarshalled ( ) { assertEquals ( shortVal . shortValue ( ) , _NUM ) ; assertEquals ( longVal , _NUM ) ; assertNull ( aArr ) ; assertNull ( strVal ) ; assertEquals ( doubleVal , _NUM ) ; }
70010	public void put ( int key , E value ) { int i = ContainerHelpers . binarySearch ( mKeys , mSize , key ) ; if ( i >= _NUM ) { mValues [ i ] = value ; } else { i = ~ i ; if ( i < mSize && mValues [ i ] == DELETED ) { mKeys [ i ] = key ; mValues [ i ] = value ; return ; } if ( mGarbage && mSize >= mKeys . length ) { gc ( ) ; i = ~ ContainerHelpers . binarySearch ( mKeys , mSize , key ) ; } if ( mSize >= mKeys . length ) { int n = ContainerHelpers . idealIntArraySize ( mSize + _NUM ) ; int [ ] nkeys = new int [ n ] ; Object [ ] nvalues = new Object [ n ] ; System . arraycopy ( mKeys , _NUM , nkeys , _NUM , mKeys . length ) ; System . arraycopy ( mValues , _NUM , nvalues , _NUM , mValues . length ) ; mKeys = nkeys ; mValues = nvalues ; } if ( mSize - i != _NUM ) { System . arraycopy ( mKeys , i , mKeys , i + _NUM , mSize - i ) ; System . arraycopy ( mValues , i , mValues , i + _NUM , mSize - i ) ; } mKeys [ i ] = key ; mValues [ i ] = value ; mSize ++ ; } }
56566	@ Override public < R > CompletableFuture < R > collect ( final Supplier < R > supplier , final BiConsumer < R , ? super T > accumulator , final BiConsumer < R , R > combiner ) { return CompletableFuture . supplyAsync ( null , exec ) ; }
33743	@ SuppressWarnings ( _STR ) protected Object fromReflectionType ( final Object value ) { FieldDescriptor descriptor = getDescriptor ( ) ; if ( descriptor . isRepeated ( ) ) { if ( descriptor . getJavaType ( ) == FieldDescriptor . JavaType . MESSAGE || descriptor . getJavaType ( ) == FieldDescriptor . JavaType . ENUM ) { final List result = new ArrayList ( ) ; for ( final Object element : ( List ) value ) { result . add ( singularFromReflectionType ( element ) ) ; } return result ; } else { return value ; } } else { return singularFromReflectionType ( value ) ; } }
9454	public void registerManufacturerSpecificBuilder ( int companyId , ADManufacturerSpecificBuilder builder ) { if ( companyId < _NUM || _NUM < companyId ) { String message = String . format ( _STR , companyId ) ; throw new IllegalArgumentException ( message ) ; } if ( builder == null ) { return ; } Integer key = Integer . valueOf ( companyId ) ; List < ADManufacturerSpecificBuilder > builders = mMSBuilders . get ( key ) ; if ( builders == null ) { builders = new ArrayList < ADManufacturerSpecificBuilder > ( ) ; mMSBuilders . put ( key , builders ) ; } builders . add ( _NUM , builder ) ; }
36982	public static ReilGraph copyReilCode ( final Window parent , final INaviCodeNode node ) { final ReilTranslator < INaviInstruction > translator = new ReilTranslator < INaviInstruction > ( ) ; try { return translator . translate ( new StandardEnvironment ( ) , node ) ; } catch ( final InternalTranslationException e ) { CUtilityFunctions . logException ( e ) ; final String message = _STR + _STR ; final String description = CUtilityFunctions . createDescription ( String . format ( _STR , node . getAddress ( ) ) , new String [ ] { _STR } , new String [ ] { _STR + _STR } ) ; NaviErrorDialog . show ( parent , message , description , e ) ; } return null ; }
69434	private static void applyOverrides ( ) { InputStream stream = getContentTypesPropertiesStream ( ) ; if ( stream == null ) { return ; } try { try { Properties overrides = new Properties ( ) ; overrides . load ( stream ) ; for ( Map . Entry < Object , Object > entry : overrides . entrySet ( ) ) { String extension = ( String ) entry . getKey ( ) ; String mimeType = ( String ) entry . getValue ( ) ; add ( mimeType , extension ) ; } } finally { stream . close ( ) ; } } catch ( IOException ignored ) { } }
1112	public static String toString ( Reader reader , long timeout ) throws IOException { StringWriter sw = new StringWriter ( _NUM ) ; copy ( toBufferedReader ( reader ) , sw , timeout ) ; sw . close ( ) ; return sw . toString ( ) ; }
20728	private static float computeSimilarity ( Lane a , Lane b ) { int same = _NUM ; int diff = _NUM ; int firstCoordinate = Math . max ( a . getFirstNonGapPosition ( ) , b . getFirstNonGapPosition ( ) ) ; int lastCoordinate = Math . min ( a . getLastNonGapPosition ( ) , b . getLastNonGapPosition ( ) ) ; for ( int i = firstCoordinate ; i <= lastCoordinate ; i ++ ) { char cha = a . charAt ( i ) ; char chb = b . charAt ( i ) ; if ( Character . isLetter ( cha ) && Character . isLetter ( chb ) ) { if ( Character . toLowerCase ( cha ) == Character . toLowerCase ( ( chb ) ) ) same ++ ; else diff ++ ; } } return Math . max ( same > _NUM ? _NUM : _NUM , same - _NUM * diff ) ; }
24325	private void forceOverflow ( ) { forceOverflow ( ) ; }
77671	public int find ( String string ) { if ( string == null ) { return - _NUM ; } for ( int i = _NUM ; i != m_stringOffsets . length ; ++ i ) { int offset = m_stringOffsets [ i ] ; int length = getShort ( m_strings , offset ) ; if ( length != string . length ( ) ) { continue ; } int j = _NUM ; for ( ; j != length ; ++ j ) { offset += _NUM ; if ( string . charAt ( j ) != getShort ( m_strings , offset ) ) { break ; } } if ( j == length ) { return i ; } } return - _NUM ; }
49950	public String prepOperand ( String label , DataType dt , ValueType vt , boolean literal ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( label ) ; sb . append ( Lop . DATATYPE_PREFIX ) ; sb . append ( dt ) ; sb . append ( Lop . VALUETYPE_PREFIX ) ; sb . append ( vt ) ; sb . append ( Lop . LITERAL_PREFIX ) ; sb . append ( literal ) ; return sb . toString ( ) ; }
84603	public static List < SpaceTime > divideConquerBrownianBridge ( MultivariateNormalDistribution normal , SpaceTime start , SpaceTime end , int depth , int maxTries , SpaceTimeRejector rejector ) { List < SpaceTime > points = new LinkedList < SpaceTime > ( ) ; points . add ( start ) ; points . add ( end ) ; stop = _BOOL ; if ( divideConquerBrownianBridge ( normal , _NUM , points , depth , maxTries , rejector ) == ( _NUM << ( depth - _NUM ) ) ) { return points ; } stop = _BOOL ; return null ; }
5252	public static EjbJarXmlVersion valueOf ( DocumentType docType ) throws NullPointerException { return valueOf ( docType . getPublicId ( ) ) ; }
58377	private boolean matchStrings ( String pattern , String str , boolean caseSensitive ) { char [ ] patArr = pattern . toCharArray ( ) ; char [ ] strArr = str . toCharArray ( ) ; int patIdxStart = _NUM ; int patIdxEnd = patArr . length - _NUM ; int strIdxStart = _NUM ; int strIdxEnd = strArr . length - _NUM ; char ch ; boolean containsStar = _BOOL ; for ( char c : patArr ) { if ( c == _STR ) { containsStar = _BOOL ; break ; } } if ( ! containsStar ) { if ( patIdxEnd != strIdxEnd ) { return _BOOL ; } for ( int i = _NUM ; i <= patIdxEnd ; i ++ ) { ch = patArr [ i ] ; if ( ch != _STR ) { if ( different ( caseSensitive , ch , strArr [ i ] ) ) { return _BOOL ; } } } return _BOOL ; } if ( patIdxEnd == _NUM ) { return _BOOL ; } while ( ( ch = patArr [ patIdxStart ] ) != _STR && strIdxStart <= strIdxEnd ) { if ( ch != _STR ) { if ( different ( caseSensitive , ch , strArr [ strIdxStart ] ) ) { return _BOOL ; } } patIdxStart ++ ; strIdxStart ++ ; } if ( strIdxStart > strIdxEnd ) { for ( int i = patIdxStart ; i <= patIdxEnd ; i ++ ) { if ( patArr [ i ] != _STR ) { return _BOOL ; } } return _BOOL ; } while ( ( ch = patArr [ patIdxEnd ] ) != _STR && strIdxStart <= strIdxEnd ) { if ( ch != _STR ) { if ( different ( caseSensitive , ch , strArr [ strIdxEnd ] ) ) { return _BOOL ; } } patIdxEnd -- ; strIdxEnd -- ; } if ( strIdxStart > strIdxEnd ) { for ( int i = patIdxStart ; i <= patIdxEnd ; i ++ ) { if ( patArr [ i ] != _STR ) { return _BOOL ; } } return _BOOL ; } while ( patIdxStart != patIdxEnd && strIdxStart <= strIdxEnd ) { int patIdxTmp = - _NUM ; for ( int i = patIdxStart + _NUM ; i <= patIdxEnd ; i ++ ) { if ( patArr [ i ] == _STR ) { patIdxTmp = i ; break ; } } if ( patIdxTmp == patIdxStart + _NUM ) { patIdxStart ++ ; continue ; } int patLength = patIdxTmp - patIdxStart - _NUM ; int strLength = strIdxEnd - strIdxStart + _NUM ; int foundIdx = - _NUM ; strLoop : for ( int i = _NUM ; i <= strLength - patLength ; i ++ ) { for ( int j = _NUM ; j < patLength ; j ++ ) { ch = patArr [ patIdxStart + j + _NUM ] ; if ( ch != _STR ) { if ( different ( caseSensitive , ch , strArr [ strIdxStart + i + j ] ) ) { continue strLoop ; } } } foundIdx = strIdxStart + i ; break ; } if ( foundIdx == - _NUM ) { return _BOOL ; } patIdxStart = patIdxTmp ; strIdxStart = foundIdx + patLength ; } for ( int i = patIdxStart ; i <= patIdxEnd ; i ++ ) { if ( patArr [ i ] != _STR ) { return _BOOL ; } } return _BOOL ; }
62653	public static List < Double > mergeCoords ( List < Double > x , List < Double > y ) { if ( x . size ( ) != y . size ( ) ) throw new IllegalArgumentException ( _STR ) ; List < Double > ret = new ArrayList < > ( ) ; for ( int i = _NUM ; i < x . size ( ) ; i ++ ) { ret . add ( x . get ( i ) ) ; ret . add ( y . get ( i ) ) ; } return ret ; }
32854	public static void print ( int x ) { out . print ( x ) ; out . flush ( ) ; }
20281	public void copyText ( ) { int end , start ; end = selectedCharField . getSelectionEnd ( ) ; start = selectedCharField . getSelectionStart ( ) ; selectedCharField . selectAll ( ) ; selectedCharField . copy ( ) ; selectedCharField . select ( start , end ) ; }
13717	public void handleButton1Request ( RequestInvocationEvent event ) throws ModelControlException { try { AuthPropertiesModel model = ( AuthPropertiesModel ) getModel ( ) ; Map original = model . getValues ( ) ; AMPropertySheet ps = ( AMPropertySheet ) getChild ( PROPERTY_ATTRIBUTE ) ; model . setValues ( ps . getAttributeValues ( original , _BOOL , model ) ) ; setInlineAlertMessage ( CCAlert . TYPE_INFO , _STR , _STR ) ; } catch ( AMConsoleException a ) { setInlineAlertMessage ( CCAlert . TYPE_ERROR , _STR , a . getMessage ( ) ) ; } forwardTo ( ) ; }
86328	private void buildDescriptionPanel ( final Composite parent ) { descriptionLabel = new StyledText ( parent , SWT . READ_ONLY ) ; descriptionLabel . setText ( _STR ) ; descriptionLabel . setLayoutData ( new GridData ( GridData . FILL , GridData . FILL , _BOOL , _BOOL , _NUM , _NUM ) ) ; }
10769	public HttpMethodClient ( ) { this ( _NUM , _NUM , _NUM * _NUM ) ; }
16036	public ISO9796d2PSSSigner ( AsymmetricBlockCipher cipher , Digest digest , int saltLength , boolean implicit ) { this . cipher = cipher ; this . digest = digest ; this . hLen = digest . getDigestSize ( ) ; this . saltLength = saltLength ; if ( implicit ) { trailer = TRAILER_IMPLICIT ; } else { Integer trailerObj = ( Integer ) trailerMap . get ( digest . getAlgorithmName ( ) ) ; if ( trailerObj != null ) { trailer = trailerObj . intValue ( ) ; } else { throw new IllegalArgumentException ( _STR ) ; } } }
62310	String decodeTextValue ( byte [ ] data ) throws IOException { boolean isCompressed = ( ( data . length > _NUM ) && ( data [ _NUM ] == TEXT_COMPRESSION_HEADER [ _NUM ] ) && ( data [ _NUM ] == TEXT_COMPRESSION_HEADER [ _NUM ] ) ) ; if ( isCompressed ) { StringBuilder textBuf = new StringBuilder ( data . length ) ; int dataStart = TEXT_COMPRESSION_HEADER . length ; int dataEnd = dataStart ; boolean inCompressedMode = _BOOL ; while ( dataEnd < data . length ) { if ( data [ dataEnd ] == ( byte ) _NUM ) { decodeTextSegment ( data , dataStart , dataEnd , inCompressedMode , textBuf ) ; inCompressedMode = ! inCompressedMode ; ++ dataEnd ; dataStart = dataEnd ; } else { ++ dataEnd ; } } decodeTextSegment ( data , dataStart , dataEnd , inCompressedMode , textBuf ) ; return textBuf . toString ( ) ; } return decodeUncompressedText ( data , getCharset ( ) ) ; }
14287	private < S , T > Set < T > extract ( final Collection < S > collection , final Extractor < S , T > extractor ) { final Set < T > values = new HashSet < T > ( collection . size ( ) ) ; for ( final S instance : collection ) { values . add ( extractor . getValue ( instance ) ) ; } return values ; }
78093	public static boolean isZTE ( ) { return sBuildModel . startsWith ( _STR ) ; }
4832	static public String normalizeToEncoding ( String origString_ , Charset encoding_ ) { String normString = origString_ ; CharsetEncoder encoder = encoding_ . newEncoder ( ) ; if ( ! encoder . canEncode ( origString_ ) ) { final int length = origString_ . length ( ) ; char [ ] normSeq = new char [ ( origString_ . length ( ) ) ] ; int charNum = _NUM ; for ( int offset = _NUM ; offset < length ; ) { Pair < Character , Integer > replacement = normalizeCodepoint ( origString_ , encoding_ , offset ) ; Character replacedChar = replacement . getFirst ( ) ; int codepoint = replacement . getSecond ( ) ; if ( null != replacedChar ) { normSeq [ charNum ] = replacedChar ; charNum ++ ; } offset += Character . charCount ( codepoint ) ; } normString = new String ( normSeq ) ; } return normString ; }
30710	private FastConcurrentSkipListMap . Node < K , V > loNode ( ) { if ( lo == null ) return m . findFirst ( ) ; else if ( loInclusive ) return m . findNear ( lo , m . GT | m . EQ ) ; else return m . findNear ( lo , m . GT ) ; }
38154	public int size ( ) { return m_sets . size ( ) ; }
1506	public Line3D ( Stack < Vector3 > points , float thickness , int [ ] colors , boolean createVBOs ) { super ( ) ; mPoints = points ; mLineThickness = thickness ; mColors = colors ; if ( colors != null && colors . length != points . size ( ) ) throw new RuntimeException ( _STR ) ; init ( createVBOs ) ; }
13	public static byte [ ] asUnsignedByteArray ( BigInteger value ) { byte [ ] bytes = value . toByteArray ( ) ; if ( bytes [ _NUM ] == _NUM ) { byte [ ] tmp = new byte [ bytes . length - _NUM ] ; System . arraycopy ( bytes , _NUM , tmp , _NUM , tmp . length ) ; return tmp ; } return bytes ; }
78383	public static float approximateLength ( float controlPoints [ ] [ ] ) { float length = _NUM ; for ( int i = _NUM ; i < controlPoints . length - _NUM ; i ++ ) { float xDif = controlPoints [ i + _NUM ] [ _NUM ] - controlPoints [ i ] [ _NUM ] ; float yDif = controlPoints [ i + _NUM ] [ _NUM ] - controlPoints [ i ] [ _NUM ] ; float zDif = controlPoints [ i + _NUM ] [ _NUM ] - controlPoints [ i ] [ _NUM ] ; length += Math . sqrt ( xDif * xDif + yDif * yDif + zDif * zDif ) ; } return length ; }
49193	protected int mapDragOperationFromModifiers ( MouseEvent e ) { int mods = e . getModifiersEx ( ) ; int btns = mods & ButtonMask ; if ( ! ( btns == InputEvent . BUTTON1_DOWN_MASK || btns == InputEvent . BUTTON2_DOWN_MASK ) ) { return DnDConstants . ACTION_NONE ; } return SunDragSourceContextPeer . convertModifiersToDropAction ( mods , getSourceActions ( ) ) ; }
7255	public UpdateClause addAssignment ( Expression expression ) { assignments . add ( new Assignment ( expression ) ) ; return this ; }
30773	private boolean stepValue ( ) { while ( _BOOL ) { if ( iter != null && iter . hasNext ( ) ) { svcs = ( ArrayList ) iter . next ( ) ; svcidx = svcs . size ( ) ; return _BOOL ; } if ( ! stepClass ( ) ) return _BOOL ; if ( iter == null ) return _BOOL ; } }
52278	private ArrayList < IconMarker > createIconMarkers ( ) { final ArrayList < IconMarker > iconMarkers = new ArrayList < > ( LOCATIONS . length ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ _NUM ] , R . drawable . bread , R . drawable . bread_c ) ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ _NUM ] , R . drawable . butcher , R . drawable . butcher_c ) ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ _NUM ] , R . drawable . fruits , R . drawable . fruits_c ) ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ _NUM ] , R . drawable . grocery , R . drawable . grocery_c ) ) ; iconMarkers . add ( new IconMarker ( LOCATIONS [ _NUM ] , R . drawable . patisserie , R . drawable . patisserie_c ) ) ; return iconMarkers ; }
52431	public void hasNetworkConnection ( NetworkRequestCheckListener listener ) { if ( hasNetworkConnection ( ) ) { testNetworkRequest ( listener ) ; } else { listener . onNoResponse ( ) ; } }
69828	public void assignThreadForSubscriber ( @ NonNull Object subscriber ) { Looper looper = Looper . myLooper ( ) ; if ( looper != null ) { mSubscribersDefaultThreads . put ( new IdentityWeakReferenceKey < > ( subscriber ) , looper != Looper . getMainLooper ( ) ? new Handler ( looper ) : mUiThreadHandler ) ; } else { mSubscribersDefaultThreads . remove ( new IdentityWeakReferenceKey < > ( subscriber ) ) ; } }
14649	private void validateDynamicAttribute ( Set dynamicSet ) throws PolicyException { if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + _STR + dynamicSet ) ; } responseAttrNames = new HashSet ( ) ; repoAttrNames = new HashSet ( ) ; responseAttrToRepoAttr = new HashMap ( ) ; if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + _STR + validDynamicAttrNames ) ; } Set dynamicAttrs = ( ( Set ) properties . get ( DYNAMIC_ATTRIBUTE ) ) ; if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + _STR + dynamicAttrs ) ; } Iterator dynamicAttrsIter = dynamicAttrs . iterator ( ) ; while ( dynamicAttrsIter . hasNext ( ) ) { String attr = ( String ) dynamicAttrsIter . next ( ) ; if ( ! validDynamicAttrNames . contains ( attr ) ) { if ( DEBUG . warningEnabled ( ) ) { DEBUG . warning ( _STR + _STR + _STR + attr ) ; } continue ; } String [ ] attrNames = parseDynamicAttrName ( attr ) ; String responseAttrName = attrNames [ _NUM ] ; String repoAttrName = attrNames [ _NUM ] ; responseAttrNames . add ( responseAttrName ) ; repoAttrNames . add ( repoAttrName ) ; addToResponseAttrToRepoAttrMap ( responseAttrName , repoAttrName ) ; if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + _STR + _STR + responseAttrName + _STR + repoAttrName ) ; } } if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + _STR + responseAttrToRepoAttr ) ; DEBUG . message ( _STR + _STR ) ; } }
63863	public static boolean typeCheck ( Class type , Object instance ) { return type . isAssignableFrom ( instance . getClass ( ) ) || isWrapperInstance ( type , instance ) ; }
74156	public synchronized void init ( ) { ArrayList < Warrant > tempList = new ArrayList < Warrant > ( ) ; List < String > systemNameList = _manager . getSystemNameList ( ) ; Iterator < String > iter = systemNameList . iterator ( ) ; while ( iter . hasNext ( ) ) { Warrant w = _manager . getBySystemName ( iter . next ( ) ) ; if ( ! _warList . contains ( w ) ) { w . addPropertyChangeListener ( this ) ; } else { _warList . remove ( w ) ; } tempList . add ( w ) ; } for ( int i = _NUM ; i < _warList . size ( ) ; i ++ ) { Warrant w = _warList . get ( i ) ; if ( ! _warNX . contains ( w ) ) { w . removePropertyChangeListener ( this ) ; } } for ( int i = _NUM ; i < _warNX . size ( ) ; i ++ ) { tempList . add ( _warNX . get ( i ) ) ; } _warList = tempList ; }
82134	public void addCommand ( Command cmd , int offset ) { menuBar . addCommand ( cmd , offset ) ; }
532	public boolean connect ( final String address ) { if ( mBluetoothAdapter == null || address == null ) { Log . w ( TAG , _STR ) ; return _BOOL ; } if ( mBluetoothDeviceAddress != null && address . equals ( mBluetoothDeviceAddress ) && mBluetoothGatt != null ) { Log . d ( TAG , _STR ) ; if ( mBluetoothGatt . connect ( ) ) { mConnectionState = STATE_CONNECTING ; return _BOOL ; } else { return _BOOL ; } } final BluetoothDevice device = mBluetoothAdapter . getRemoteDevice ( address ) ; if ( device == null ) { Log . w ( TAG , _STR ) ; return _BOOL ; } mBluetoothGatt = device . connectGatt ( this , _BOOL , mGattCallback ) ; Log . d ( TAG , _STR ) ; mBluetoothDeviceAddress = address ; mConnectionState = STATE_CONNECTING ; return _BOOL ; }
38470	private double normalDens ( double x , double mean , double stdDev ) { double diff = x - mean ; return ( _NUM / ( m_normConst * stdDev ) ) * Math . exp ( - ( diff * diff / ( _NUM * stdDev * stdDev ) ) ) ; }
17348	private static void drawShape ( GL2 gl , Shape s ) { PathIterator it = s . getPathIterator ( new AffineTransform ( ) , shapeFlatness ) ; float [ ] lastMoveTo = new float [ _NUM ] ; float [ ] f = new float [ _NUM ] ; while ( ! it . isDone ( ) ) { int res = it . currentSegment ( f ) ; switch ( res ) { case PathIterator . SEG_CLOSE : GLPanel . V ( gl , lastMoveTo [ _NUM ] , lastMoveTo [ _NUM ] ) ; break ; case PathIterator . SEG_MOVETO : GLPanel . V ( gl , f [ _NUM ] , f [ _NUM ] ) ; System . arraycopy ( f , _NUM , lastMoveTo , _NUM , _NUM ) ; break ; case PathIterator . SEG_LINETO : GLPanel . V ( gl , f [ _NUM ] , f [ _NUM ] ) ; break ; case PathIterator . SEG_CUBICTO : CubicCurve2D c = new CubicCurve2D . Float ( lastMoveTo [ _NUM ] , lastMoveTo [ _NUM ] , f [ _NUM ] , f [ _NUM ] , f [ _NUM ] , f [ _NUM ] , f [ _NUM ] , f [ _NUM ] ) ; drawShape ( gl , c ) ; break ; default : throw new Error ( _STR + _STR + res ) ; } it . next ( ) ; } }
1809	@ Override protected void tearDown ( ) throws NamingException , JMSException { NamingEnumeration < Binding > iter = context . listBindings ( _STR ) ; while ( iter . hasMore ( ) ) { Binding binding = iter . next ( ) ; Object connFactory = binding . getObject ( ) ; if ( connFactory instanceof ActiveMQConnectionFactory ) { } } }
80592	protected List < URI > load ( final InputStream in ) throws SAXException , IOException { SAXParser saxParser ; final SAXParserFactory factory = SAXParserFactory . newInstance ( ) ; try { saxParser = factory . newSAXParser ( ) ; } catch ( final ParserConfigurationException ex ) { throw new SAXException ( ex ) ; } groups = new LinkedList < URI > ( ) ; saxParser . parse ( in , this ) ; return groups ; }
42180	public final void lazySet ( long newValue ) { unsafe . putOrderedLong ( this , valueOffset , newValue ) ; }
60650	private static List < Object > createEqualityKey ( Node node ) { List < Object > values = new ArrayList < Object > ( ) ; values . add ( node . getNodeType ( ) ) ; values . add ( node . getNodeName ( ) ) ; values . add ( node . getLocalName ( ) ) ; values . add ( node . getNamespaceURI ( ) ) ; values . add ( node . getPrefix ( ) ) ; values . add ( node . getNodeValue ( ) ) ; for ( Node child = node . getFirstChild ( ) ; child != null ; child = child . getNextSibling ( ) ) { values . add ( child ) ; } switch ( node . getNodeType ( ) ) { case DOCUMENT_TYPE_NODE : DocumentTypeImpl doctype = ( DocumentTypeImpl ) node ; values . add ( doctype . getPublicId ( ) ) ; values . add ( doctype . getSystemId ( ) ) ; values . add ( doctype . getInternalSubset ( ) ) ; values . add ( doctype . getEntities ( ) ) ; values . add ( doctype . getNotations ( ) ) ; break ; case ELEMENT_NODE : Element element = ( Element ) node ; values . add ( element . getAttributes ( ) ) ; break ; } return values ; }
67706	@ Deprecated public static String Collection2String ( Collection < ? > in , String separator ) { if ( in == null ) { return null ; } return Iterator2String ( in . iterator ( ) , separator ) ; }
29654	public static byte [ ] decodeBase64 ( String base64Str ) { return DatatypeConverter . parseBase64Binary ( base64Str ) ; }
40275	protected void removeAllPremoveDrops ( ) { for ( PremoveInfo info : premoves . toArray ( new PremoveInfo [ _NUM ] ) ) { if ( info . isPremoveDrop ) { premoves . remove ( info ) ; } } }
18833	public void testClearBitZero ( ) { byte aBytes [ ] = { _NUM } ; int aSign = _NUM ; int number = _NUM ; byte rBytes [ ] = { _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . clearBit ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
66246	public static String sayNumber ( StringBuffer appendTo , double number ) throws IllegalArgumentException { if ( number == Double . MIN_VALUE ) { throw new IllegalArgumentException ( _STR ) ; } if ( number < _NUM ) { appendTo . append ( _STR ) ; } double abs = Math . abs ( number ) ; if ( abs < POWER_THREE ) { saySimpleNumber ( appendTo , ( int ) abs ) ; } else if ( abs < _NUM ) { int thousand = ( int ) ( abs % POWER_THREE ) ; appendTo . append ( _STR ) ; saySimpleNumber ( appendTo , thousand ) ; } else if ( abs < POWER_SIX ) { int thousand = ( int ) ( abs % POWER_SIX / POWER_THREE ) ; saySimpleNumber ( appendTo , thousand ) ; appendTo . append ( _STR ) ; double remainder = abs - thousand * POWER_THREE ; if ( remainder > _NUM ) { appendTo . append ( _STR ) ; sayNumber ( appendTo , remainder ) ; } } else if ( abs < POWER_NINE ) { int million = ( int ) ( abs % POWER_NINE / POWER_SIX ) ; saySimpleNumber ( appendTo , million ) ; appendTo . append ( _STR ) ; double remainder = abs - million * POWER_SIX ; if ( remainder > _NUM ) { appendTo . append ( _STR ) ; sayNumber ( appendTo , remainder ) ; } } else if ( abs < POWER_TWELVE ) { int billion = ( int ) ( abs % POWER_TWELVE / POWER_NINE ) ; saySimpleNumber ( appendTo , billion ) ; appendTo . append ( _STR ) ; double remainder = abs - billion * POWER_NINE ; if ( remainder > _NUM ) { appendTo . append ( _STR ) ; sayNumber ( appendTo , remainder ) ; } } else if ( abs < POWER_FIFTEEN ) { int trillion = ( int ) ( abs % POWER_FIFTEEN / POWER_TWELVE ) ; saySimpleNumber ( appendTo , trillion ) ; appendTo . append ( _STR ) ; double remainder = abs - trillion * POWER_TWELVE ; if ( remainder > _NUM ) { appendTo . append ( _STR ) ; sayNumber ( appendTo , remainder ) ; } } else { appendTo . append ( _STR ) ; } return appendTo . toString ( ) ; }
74159	public void stop ( ) { _throttle . setSpeedSetting ( - _NUM ) ; _throttle . setSpeedSetting ( _NUM ) ; stopLabel . setIcon ( stopIcon ) ; stopLabel . setIconTextGap ( _gap ) ; pack ( ) ; }
48227	public void encode ( OutputStream out ) throws IOException { DerOutputStream tmp = new DerOutputStream ( ) ; dnName . encode ( tmp ) ; out . write ( tmp . toByteArray ( ) ) ; }
84599	public void makeDirty ( ) { betaChanged = _BOOL ; newMode = _BOOL ; precisionChanged = _BOOL ; regressionInterface . makeDirty ( instance ) ; }
47252	private ArrayList < E > toArrayList ( ) { ArrayList < E > list = new ArrayList < E > ( ) ; for ( Node < E > p = first ( ) ; p != null ; p = succ ( p ) ) { E item = p . item ; if ( item != null ) list . add ( item ) ; } return list ; }
18383	public boolean remove ( HttpConnection connection ) { TimeValues times = connectionToTimes . remove ( connection ) ; if ( times == null ) { log . warn ( _STR ) ; return _BOOL ; } else { return System . currentTimeMillis ( ) <= times . timeExpires ; } }
38234	@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( _NUM ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR + _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; return newVector . elements ( ) ; }
82831	private List < String > split ( String prefix ) { List < String > parts = new ArrayList < String > ( ) ; int bracketCount = _NUM ; boolean inquotes = _BOOL ; int lastIndex = _NUM ; for ( int i = _NUM ; i < prefix . length ( ) ; i ++ ) { char c = prefix . charAt ( i ) ; if ( c == _STR ) { bracketCount ++ ; continue ; } else if ( c == _STR ) { inquotes = ! inquotes ; continue ; } else if ( c == _STR ) { bracketCount -- ; if ( bracketCount < _NUM ) { throw new RuntimeException ( _STR + prefix ) ; } continue ; } if ( c == _STR && ! inquotes && bracketCount == _NUM ) { parts . add ( prefix . substring ( lastIndex , i ) ) ; lastIndex = i + _NUM ; } } if ( lastIndex < prefix . length ( ) - _NUM && ! inquotes && bracketCount == _NUM ) { parts . add ( prefix . substring ( lastIndex ) ) ; } return parts ; }
69136	public static long lowerHexToUnsignedLong ( String lowerHex ) { int length = lowerHex . length ( ) ; if ( length < _NUM || length > _NUM ) throw isntLowerHexLong ( lowerHex ) ; int i = length > _NUM ? length - _NUM : _NUM ; long result = _NUM ; for ( ; i < length ; i ++ ) { char c = lowerHex . charAt ( i ) ; result <<= _NUM ; if ( c >= _STR && c <= _STR ) { result |= c - _STR ; } else if ( c >= _STR && c <= _STR ) { result |= c - _STR + _NUM ; } else { throw isntLowerHexLong ( lowerHex ) ; } } return result ; }
27949	public static double sampleSkewStandardError ( int size ) { int n = size ; return Math . sqrt ( _NUM * n * ( n - _NUM ) / ( ( n - _NUM ) * ( n + _NUM ) * ( n + _NUM ) ) ) ; }
9670	public void load ( List < PolicyQualifierInfo > policyQualifierInfo ) { PolicyQualifierInfo [ ] policyQualifierInfoArray = policyQualifierInfo . toArray ( new PolicyQualifierInfo [ policyQualifierInfo . size ( ) ] ) ; Arrays . sort ( policyQualifierInfoArray , new PolicyQualifierInfoComparator ( ) ) ; data = new Object [ policyQualifierInfoArray . length ] [ _NUM ] ; int i = _NUM ; for ( PolicyQualifierInfo policyQualInfo : policyQualifierInfoArray ) { data [ i ] [ _NUM ] = policyQualInfo ; i ++ ; } fireTableDataChanged ( ) ; }
13623	public void runScript ( Reader reader ) throws IOException , SQLException { try { boolean originalAutoCommit = connection . getAutoCommit ( ) ; try { if ( originalAutoCommit != this . autoCommit ) { connection . setAutoCommit ( this . autoCommit ) ; } runScript ( connection , reader ) ; } finally { connection . setAutoCommit ( originalAutoCommit ) ; } } catch ( IOException | SQLException e ) { throw e ; } catch ( Exception e ) { throw new RuntimeException ( _STR + e , e ) ; } }
84738	public double doOperation ( ) throws OperatorFailedException { double logq ; final NodeRef root = tree . getRoot ( ) ; final double oldTreeHeight = tree . getNodeHeight ( root ) ; NodeRef i ; do { i = tree . getNode ( MathUtils . nextInt ( tree . getNodeCount ( ) ) ) ; } while ( root == i ) ; final NodeRef iP = tree . getParent ( i ) ; final NodeRef CiP = getOtherChild ( tree , iP , i ) ; final NodeRef PiP = tree . getParent ( iP ) ; final double delta = getDelta ( ) ; final double oldHeight = tree . getNodeHeight ( iP ) ; final double newHeight = oldHeight + delta ; if ( delta > _NUM ) { if ( PiP != null && tree . getNodeHeight ( PiP ) < newHeight ) { NodeRef newParent = PiP ; NodeRef newChild = iP ; while ( tree . getNodeHeight ( newParent ) < newHeight ) { newChild = newParent ; newParent = tree . getParent ( newParent ) ; if ( newParent == null ) break ; } tree . beginTreeEdit ( ) ; if ( tree . isRoot ( newChild ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . setRoot ( iP ) ; if ( tree . hasNodeTraits ( ) ) { tree . swapAllTraits ( newChild , iP ) ; } if ( tree . hasRates ( ) ) { final double rootNodeRate = tree . getNodeRate ( newChild ) ; tree . setNodeRate ( newChild , tree . getNodeRate ( iP ) ) ; tree . setNodeRate ( iP , rootNodeRate ) ; } } else { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . addChild ( newParent , iP ) ; } tree . setNodeHeight ( iP , newHeight ) ; tree . endTreeEdit ( ) ; final int possibleSources = intersectingEdges ( tree , newChild , oldHeight , null ) ; logq = - Math . log ( possibleSources ) ; } else { tree . setNodeHeight ( iP , newHeight ) ; logq = _NUM ; } } else { if ( tree . getNodeHeight ( i ) > newHeight ) { return Double . NEGATIVE_INFINITY ; } if ( tree . getNodeHeight ( CiP ) > newHeight ) { List < NodeRef > newChildren = new ArrayList < NodeRef > ( ) ; final int possibleDestinations = intersectingEdges ( tree , CiP , newHeight , newChildren ) ; if ( newChildren . size ( ) == _NUM ) { return Double . NEGATIVE_INFINITY ; } final int childIndex = MathUtils . nextInt ( newChildren . size ( ) ) ; NodeRef newChild = newChildren . get ( childIndex ) ; NodeRef newParent = tree . getParent ( newChild ) ; tree . beginTreeEdit ( ) ; if ( tree . isRoot ( iP ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( newParent , iP ) ; tree . setRoot ( CiP ) ; if ( tree . hasNodeTraits ( ) ) { tree . swapAllTraits ( iP , CiP ) ; } if ( tree . hasRates ( ) ) { final double rootNodeRate = tree . getNodeRate ( iP ) ; tree . setNodeRate ( iP , tree . getNodeRate ( CiP ) ) ; tree . setNodeRate ( CiP , rootNodeRate ) ; } } else { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . removeChild ( newParent , newChild ) ; tree . addChild ( iP , newChild ) ; tree . addChild ( PiP , CiP ) ; tree . addChild ( newParent , iP ) ; } tree . setNodeHeight ( iP , newHeight ) ; tree . endTreeEdit ( ) ; logq = Math . log ( possibleDestinations ) ; } else { tree . setNodeHeight ( iP , newHeight ) ; logq = _NUM ; } } if ( swapInRandomRate ) { final NodeRef j = tree . getNode ( MathUtils . nextInt ( tree . getNodeCount ( ) ) ) ; if ( j != i ) { final double tmp = tree . getNodeRate ( i ) ; tree . setNodeRate ( i , tree . getNodeRate ( j ) ) ; tree . setNodeRate ( j , tmp ) ; } } if ( swapInRandomTrait ) { final NodeRef j = tree . getNode ( MathUtils . nextInt ( tree . getNodeCount ( ) ) ) ; if ( j != i ) { tree . swapAllTraits ( i , j ) ; } } if ( logq == Double . NEGATIVE_INFINITY ) throw new OperatorFailedException ( _STR ) ; if ( scaledDirichletBranches ) { if ( oldTreeHeight != tree . getNodeHeight ( tree . getRoot ( ) ) ) throw new OperatorFailedException ( _STR ) ; } return logq ; }
46067	MarkerSegment findMarkerSegment ( Class cls , boolean first ) { if ( first ) { Iterator iter = markerSequence . iterator ( ) ; while ( iter . hasNext ( ) ) { MarkerSegment seg = ( MarkerSegment ) iter . next ( ) ; if ( cls . isInstance ( seg ) ) { return seg ; } } } else { ListIterator iter = markerSequence . listIterator ( markerSequence . size ( ) ) ; while ( iter . hasPrevious ( ) ) { MarkerSegment seg = ( MarkerSegment ) iter . previous ( ) ; if ( cls . isInstance ( seg ) ) { return seg ; } } } return null ; }
56609	default Filterable < T > removeAll ( final T ... values ) { return removeAll ( Stream . of ( values ) ) ; }
26282	public static Map < String , Object > createContentAssocMethod ( DispatchContext dctx , Map < String , ? extends Object > rcontext ) throws GenericServiceException , GenericEntityException { Map < String , Object > context = UtilMisc . makeMapWritable ( rcontext ) ; List < String > targetOperationList = ContentWorker . prepTargetOperationList ( context , _STR ) ; List < String > contentPurposeList = ContentWorker . prepContentPurposeList ( context ) ; context . put ( _STR , targetOperationList ) ; context . put ( _STR , contentPurposeList ) ; Locale locale = ( Locale ) context . get ( _STR ) ; Delegator delegator = dctx . getDelegator ( ) ; LocalDispatcher dispatcher = dctx . getDispatcher ( ) ; Map < String , Object > result = FastMap . newInstance ( ) ; String contentIdFrom = ( String ) context . get ( _STR ) ; String contentIdTo = ( String ) context . get ( _STR ) ; String contentId = ( String ) context . get ( _STR ) ; int contentIdCount = _NUM ; if ( UtilValidate . isNotEmpty ( contentIdFrom ) ) contentIdCount ++ ; if ( UtilValidate . isNotEmpty ( contentIdTo ) ) contentIdCount ++ ; if ( UtilValidate . isNotEmpty ( contentId ) ) contentIdCount ++ ; if ( contentIdCount < _NUM ) { Debug . logError ( _STR , _STR ) ; return ServiceUtil . returnError ( UtilProperties . getMessage ( resource , _STR , locale ) ) ; } if ( UtilValidate . isNotEmpty ( contentIdFrom ) ) { if ( UtilValidate . isEmpty ( contentIdTo ) ) contentIdTo = contentId ; } if ( UtilValidate . isNotEmpty ( contentIdTo ) ) { if ( UtilValidate . isEmpty ( contentIdFrom ) ) contentIdFrom = contentId ; } GenericValue contentAssoc = delegator . makeValue ( _STR , FastMap . newInstance ( ) ) ; contentAssoc . put ( _STR , contentIdFrom ) ; contentAssoc . put ( _STR , contentIdTo ) ; contentAssoc . put ( _STR , context . get ( _STR ) ) ; contentAssoc . put ( _STR , context . get ( _STR ) ) ; contentAssoc . put ( _STR , context . get ( _STR ) ) ; Timestamp fromDate = ( Timestamp ) context . get ( _STR ) ; if ( fromDate == null ) { contentAssoc . put ( _STR , UtilDateTime . nowTimestamp ( ) ) ; } else { contentAssoc . put ( _STR , fromDate ) ; } Timestamp thruDate = ( Timestamp ) context . get ( _STR ) ; if ( thruDate == null ) { contentAssoc . put ( _STR , null ) ; } else { contentAssoc . put ( _STR , thruDate ) ; } contentAssoc . put ( _STR , context . get ( _STR ) ) ; contentAssoc . put ( _STR , context . get ( _STR ) ) ; String upperCoordinateStr = ( String ) context . get ( _STR ) ; if ( UtilValidate . isEmpty ( upperCoordinateStr ) ) { contentAssoc . put ( _STR , null ) ; } else { contentAssoc . put ( _STR , upperCoordinateStr ) ; } String leftCoordinateStr = ( String ) context . get ( _STR ) ; if ( UtilValidate . isEmpty ( leftCoordinateStr ) ) { contentAssoc . put ( _STR , null ) ; } else { contentAssoc . put ( _STR , leftCoordinateStr ) ; } GenericValue userLogin = ( GenericValue ) context . get ( _STR ) ; String userLoginId = ( String ) userLogin . get ( _STR ) ; String createdByUserLogin = userLoginId ; String lastModifiedByUserLogin = userLoginId ; Timestamp createdDate = UtilDateTime . nowTimestamp ( ) ; Timestamp lastModifiedDate = UtilDateTime . nowTimestamp ( ) ; contentAssoc . put ( _STR , createdByUserLogin ) ; contentAssoc . put ( _STR , lastModifiedByUserLogin ) ; contentAssoc . put ( _STR , createdDate ) ; contentAssoc . put ( _STR , lastModifiedDate ) ; Map < String , Object > serviceInMap = FastMap . newInstance ( ) ; String permissionStatus = null ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; serviceInMap . put ( _STR , targetOperationList ) ; serviceInMap . put ( _STR , contentPurposeList ) ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; serviceInMap . put ( _STR , contentIdTo ) ; serviceInMap . put ( _STR , contentIdFrom ) ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; serviceInMap . put ( _STR , context . get ( _STR ) ) ; Map < String , Object > permResults = null ; permResults = dispatcher . runSync ( _STR , serviceInMap ) ; permissionStatus = ( String ) permResults . get ( _STR ) ; if ( permissionStatus != null && permissionStatus . equals ( _STR ) ) { contentAssoc . create ( ) ; } else { String errorMsg = ( String ) permResults . get ( ModelService . ERROR_MESSAGE ) ; result . put ( ModelService . ERROR_MESSAGE , errorMsg ) ; return ServiceUtil . returnFailure ( errorMsg ) ; } result . put ( _STR , contentIdTo ) ; result . put ( _STR , contentIdFrom ) ; result . put ( _STR , contentAssoc . get ( _STR ) ) ; result . put ( _STR , contentAssoc . get ( _STR ) ) ; return result ; }
28860	public void reset ( boolean clear ) { gotVersion = _BOOL ; gotHeaderLength = _BOOL ; gotHeader = _BOOL ; gotBody = _BOOL ; gotBodyBoundary = _BOOL ; headerLength = _NUM ; bodyLength = _NUM ; bodyBytesReceived = _NUM ; if ( clear ) { bufferOffset = _NUM ; buffer . clear ( ) ; bodyFile = null ; if ( bodyStream != null ) { try { bodyStream . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } bodyStream = null ; } } }
60768	void removeAt ( final int removeIndex ) { final Object [ ] items = this . items ; if ( removeIndex == takeIndex ) { items [ takeIndex ] = null ; takeIndex = inc ( takeIndex ) ; count -- ; if ( itrs != null ) itrs . elementDequeued ( ) ; } else { final int putIndex = this . putIndex ; for ( int i = removeIndex ; ; ) { int next = inc ( i ) ; if ( next != putIndex ) { items [ i ] = items [ next ] ; i = next ; } else { items [ i ] = null ; this . putIndex = i ; break ; } } count -- ; if ( itrs != null ) itrs . removedAt ( removeIndex ) ; } notFull . signal ( ) ; }
70064	private void saveAndClose ( boolean save ) { content . setEnabled ( _BOOL ) ; if ( timer != null ) { timer . cancel ( ) ; timer = null ; } if ( timerNextSync != null ) { timerNextSync . cancel ( ) ; timerNextSync = null ; } if ( save ) { Log . d ( LOG_TAG , _STR ) ; saveData ( null ) ; } else { Log . d ( LOG_TAG , _STR ) ; } Intent data = new Intent ( ) ; data . setAction ( Intent . ACTION_VIEW ) ; data . putExtra ( PARAM_NOTE , note ) ; data . putExtra ( PARAM_NOTE_POSITION , notePosition ) ; setResult ( RESULT_OK , data ) ; finish ( ) ; }
33460	public static Uri addMessage ( ContentResolver resolver , String address , String body , String subject , Long date , boolean deliveryReport , long threadId ) { final Uri CONTENT_URI = Uri . parse ( _STR ) ; return addMessageToUri ( resolver , CONTENT_URI , address , body , subject , date , _BOOL , deliveryReport , threadId ) ; }
28496	public static < T > void blockingSubscribePrint ( Observable < T > observable , String name ) { CountDownLatch latch = new CountDownLatch ( _NUM ) ; subscribePrint ( observable . finallyDo ( null ) , name ) ; try { latch . await ( ) ; } catch ( InterruptedException e ) { } }
29985	public static final double calcNiceNumber ( final double RANGE , final boolean ROUND ) { double niceFraction ; double exponent = Math . floor ( Math . log10 ( RANGE ) ) ; double fraction = RANGE / Math . pow ( _NUM , exponent ) ; if ( ROUND ) { if ( Double . compare ( fraction , _NUM ) < _NUM ) { niceFraction = _NUM ; } else if ( Double . compare ( fraction , _NUM ) < _NUM ) { niceFraction = _NUM ; } else if ( Double . compare ( fraction , _NUM ) < _NUM ) { niceFraction = _NUM ; } else { niceFraction = _NUM ; } } else { if ( Double . compare ( fraction , _NUM ) <= _NUM ) { niceFraction = _NUM ; } else if ( Double . compare ( fraction , _NUM ) <= _NUM ) { niceFraction = _NUM ; } else if ( Double . compare ( fraction , _NUM ) <= _NUM ) { niceFraction = _NUM ; } else { niceFraction = _NUM ; } } return niceFraction * Math . pow ( _NUM , exponent ) ; }
31836	private final Object internalReplace ( Object k , Object v , Object cv ) { int h = spread ( k . hashCode ( ) ) ; Object oldVal = null ; for ( Node [ ] tab = table ; ; ) { Node f ; int i , fh ; Object fk ; if ( tab == null || ( f = tabAt ( tab , i = ( tab . length - _NUM ) & h ) ) == null ) break ; else if ( ( fh = f . hash ) == MOVED ) { if ( ( fk = f . key ) instanceof TreeBin ) { TreeBin t = ( TreeBin ) fk ; boolean validated = _BOOL ; boolean deleted = _BOOL ; t . acquire ( _NUM ) ; try { if ( tabAt ( tab , i ) == f ) { validated = _BOOL ; TreeNode p = t . getTreeNode ( h , k , t . root ) ; if ( p != null ) { Object pv = p . val ; if ( cv == null || cv == pv || cv . equals ( pv ) ) { oldVal = pv ; if ( ( p . val = v ) == null ) { deleted = _BOOL ; t . deleteTreeNode ( p ) ; } } } } } finally { t . release ( _NUM ) ; } if ( validated ) { if ( deleted ) counter . add ( - _NUM ) ; break ; } } else tab = ( Node [ ] ) fk ; } else if ( ( fh & HASH_BITS ) != h && f . next == null ) break ; else if ( ( fh & LOCKED ) != _NUM ) { checkForResize ( ) ; f . tryAwaitLock ( tab , i ) ; } else if ( f . casHash ( fh , fh | LOCKED ) ) { boolean validated = _BOOL ; boolean deleted = _BOOL ; try { if ( tabAt ( tab , i ) == f ) { validated = _BOOL ; for ( Node e = f , pred = null ; ; ) { Object ek , ev ; if ( ( e . hash & HASH_BITS ) == h && ( ( ev = e . val ) != null ) && ( ( ek = e . key ) == k || k . equals ( ek ) ) ) { if ( cv == null || cv == ev || cv . equals ( ev ) ) { oldVal = ev ; if ( ( e . val = v ) == null ) { deleted = _BOOL ; Node en = e . next ; if ( pred != null ) pred . next = en ; else setTabAt ( tab , i , en ) ; } } break ; } pred = e ; if ( ( e = e . next ) == null ) break ; } } } finally { if ( ! f . casHash ( fh | LOCKED , fh ) ) { f . hash = fh ; synchronized ( f ) { f . notifyAll ( ) ; } ; } } if ( validated ) { if ( deleted ) counter . add ( - _NUM ) ; break ; } } } return oldVal ; }
23101	private static final boolean copyHeader ( String name , String fromReq , StringBuffer buf ) { int start = fromReq . indexOf ( name ) ; if ( start != - _NUM ) { int end = fromReq . indexOf ( _STR , start ) ; if ( end != - _NUM ) { buf . append ( fromReq . subSequence ( start - _NUM , end ) ) ; return _BOOL ; } } return _BOOL ; }
26579	public void sendMetric ( final String name , final double value ) { logger . debug ( String . format ( _STR , name , value ) ) ; if ( telemetryClient != null ) { telemetryClient . trackMetric ( name , value ) ; } }
54059	default Document putAll ( Iterable < Field > fields , Predicate < CharSequence > acceptableFieldNames ) { for ( Field field : fields ) { if ( acceptableFieldNames . test ( field . getName ( ) ) ) { setValue ( field . getName ( ) , field . getValue ( ) ) ; } } return this ; }
15627	public static URL findResourceBase ( String baseResource , ClassLoader loader ) { URL url = loader . getResource ( baseResource ) ; return findResourceBase ( url , baseResource ) ; }
7278	public String toEPL ( EPStatementFormatter formatter ) { StringWriter writer = new StringWriter ( ) ; toEPL ( formatter , writer ) ; return writer . toString ( ) ; }
46969	public boolean isSpecified ( int index ) { if ( ( index < _NUM ) || ( index >= mLength ) ) { throw new ArrayIndexOutOfBoundsException ( _STR ) ; } String str = mItems [ ( index << _NUM ) + _NUM ] ; return ( ( str != null ) ? ( str . charAt ( _NUM ) == _STR ) : _BOOL ) ; }
23582	public StatArchiveReader ( String archiveName ) throws IOException { this ( new File [ ] { new File ( archiveName ) } , null , _BOOL ) ; }
68272	private static void initAdbSocketAddr ( ) { try { sAdbServerPort = getAdbServerPort ( ) ; InetAddress hostAddr = InetAddress . getByName ( DEFAULT_ADB_HOST ) ; sSocketAddr = new InetSocketAddress ( hostAddr , sAdbServerPort ) ; } catch ( UnknownHostException e ) { } }
3670	public int read ( long fileOffset , byte [ ] buffer , int offset , int length ) throws IOException { _file . seek ( fileOffset ) ; return _file . read ( buffer , offset , length ) ; }
55127	private boolean matchesAnyTag ( String tagName ) { return tagNames . contains ( tagName ) ; }
62894	default void shutdown ( ) { Platform . exit ( ) ; }
46345	public boolean isExpanded ( int row ) { TreeUI tree = getUI ( ) ; if ( tree != null ) { TreePath path = tree . getPathForRow ( this , row ) ; if ( path != null ) { Boolean value = expandedState . get ( path ) ; return ( value != null && value . booleanValue ( ) ) ; } } return _BOOL ; }
24580	private static int labelEnd ( String s ) { int colonIndex = s . indexOf ( _STR ) ; int semicolonIndex = s . indexOf ( _STR ) ; if ( ( semicolonIndex == - _NUM ) || ( colonIndex < semicolonIndex ) ) { return colonIndex ; } else { return - _NUM ; } }
20569	public void addListener ( AnimatorListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList < AnimatorListener > ( ) ; } mListeners . add ( listener ) ; }
85879	public HttpMethodInfo ( Method method , Object handler , Object [ ] args , MultivaluedMap < String , Object > formParameters , Response responder ) { this . method = method ; this . handler = handler ; this . args = Arrays . copyOf ( args , args . length ) ; this . formParameters = formParameters ; this . responder = responder ; }
77788	public static boolean equals ( byte [ ] [ ] field1 , byte [ ] [ ] field2 ) { int index1 = _NUM ; int length1 = field1 == null ? _NUM : field1 . length ; int index2 = _NUM ; int length2 = field2 == null ? _NUM : field2 . length ; while ( _BOOL ) { while ( index1 < length1 && field1 [ index1 ] == null ) { index1 ++ ; } while ( index2 < length2 && field2 [ index2 ] == null ) { index2 ++ ; } boolean atEndOf1 = index1 >= length1 ; boolean atEndOf2 = index2 >= length2 ; if ( atEndOf1 && atEndOf2 ) { return _BOOL ; } else if ( atEndOf1 != atEndOf2 ) { return _BOOL ; } else if ( ! Arrays . equals ( field1 [ index1 ] , field2 [ index2 ] ) ) { return _BOOL ; } index1 ++ ; index2 ++ ; } }
38369	private void drawText ( int x1 , int y1 , int s , boolean e_or_n , Graphics g ) { Color oldColor = g . getColor ( ) ; g . setPaintMode ( ) ; if ( m_FontColor == null ) { g . setColor ( Color . black ) ; } else { g . setColor ( m_FontColor ) ; } String st ; if ( e_or_n ) { Edge e = m_edges [ s ] . m_edge ; for ( int noa = _NUM ; ( st = e . getLine ( noa ) ) != null ; noa ++ ) { g . drawString ( st , ( m_edges [ s ] . m_width - m_fontSize . stringWidth ( st ) ) / _NUM + x1 , y1 + ( noa + _NUM ) * m_fontSize . getHeight ( ) ) ; } } else { Node e = m_nodes [ s ] . m_node ; for ( int noa = _NUM ; ( st = e . getLine ( noa ) ) != null ; noa ++ ) { g . drawString ( st , ( m_nodes [ s ] . m_width - m_fontSize . stringWidth ( st ) ) / _NUM + x1 , y1 + ( noa + _NUM ) * m_fontSize . getHeight ( ) ) ; } } g . setColor ( oldColor ) ; }
55490	public void update ( List < Race > races ) { if ( currentRace == null ) { return ; } if ( races . contains ( currentRace ) ) { setRace ( races . get ( races . indexOf ( currentRace ) ) ) ; } }
65226	public boolean required ( ) { return _parameterMetadata . contains ( Metadata . REQUIRED ) ; }
73105	protected void sendDataToReceiver ( ResultReceiver receiver , Intent originalIntent , Serializable data ) { if ( receiver != null && data != null ) { Bundle bundle = new Bundle ( ) ; bundle . putParcelable ( ServiceReceiver . EXTRA_ORIGINAL_INTENT , originalIntent ) ; bundle . putSerializable ( ServiceReceiver . EXTRA_DATA , data ) ; receiver . send ( ServiceReceiver . STATUS_DATA , bundle ) ; } }
20925	private static Object matchOrReplace ( Context cx , Scriptable scope , Scriptable thisObj , Object [ ] args , RegExpImpl reImpl , GlobData data , boolean forceFlat ) { NativeRegExp re ; String str = ScriptRuntime . toString ( thisObj ) ; data . str = str ; Scriptable topScope = ScriptableObject . getTopLevelScope ( scope ) ; if ( args . length == _NUM ) { Object compiled = NativeRegExp . compileRE ( cx , _STR , _STR , _BOOL ) ; re = new NativeRegExp ( topScope , compiled ) ; } else if ( args [ _NUM ] instanceof NativeRegExp ) { re = ( NativeRegExp ) args [ _NUM ] ; } else { String src = ScriptRuntime . toString ( args [ _NUM ] ) ; String opt ; if ( data . optarg < args . length ) { args [ _NUM ] = src ; opt = ScriptRuntime . toString ( args [ data . optarg ] ) ; } else { opt = null ; } Object compiled = NativeRegExp . compileRE ( cx , src , opt , forceFlat ) ; re = new NativeRegExp ( topScope , compiled ) ; } data . global = ( re . getFlags ( ) & NativeRegExp . JSREG_GLOB ) != _NUM ; int [ ] indexp = { _NUM } ; Object result = null ; if ( data . mode == RA_SEARCH ) { result = re . executeRegExp ( cx , scope , reImpl , str , indexp , NativeRegExp . TEST ) ; if ( result != null && result . equals ( Boolean . TRUE ) ) result = Integer . valueOf ( reImpl . leftContext . length ) ; else result = Integer . valueOf ( - _NUM ) ; } else if ( data . global ) { re . lastIndex = _NUM ; for ( int count = _NUM ; indexp [ _NUM ] <= str . length ( ) ; count ++ ) { result = re . executeRegExp ( cx , scope , reImpl , str , indexp , NativeRegExp . TEST ) ; if ( result == null || ! result . equals ( Boolean . TRUE ) ) break ; if ( data . mode == RA_MATCH ) { match_glob ( data , cx , scope , count , reImpl ) ; } else { if ( data . mode != RA_REPLACE ) Kit . codeBug ( ) ; SubString lastMatch = reImpl . lastMatch ; int leftIndex = data . leftIndex ; int leftlen = lastMatch . index - leftIndex ; data . leftIndex = lastMatch . index + lastMatch . length ; replace_glob ( data , cx , scope , reImpl , leftIndex , leftlen ) ; } if ( reImpl . lastMatch . length == _NUM ) { if ( indexp [ _NUM ] == str . length ( ) ) break ; indexp [ _NUM ] ++ ; } } } else { result = re . executeRegExp ( cx , scope , reImpl , str , indexp , ( ( data . mode == RA_REPLACE ) ? NativeRegExp . TEST : NativeRegExp . MATCH ) ) ; } return result ; }
40476	public void tableSwitch ( final int [ ] keys , final TableSwitchGenerator generator , final boolean useTable ) { for ( int i = _NUM ; i < keys . length ; ++ i ) { if ( keys [ i ] < keys [ i - _NUM ] ) { throw new IllegalArgumentException ( _STR ) ; } } Label def = newLabel ( ) ; Label end = newLabel ( ) ; if ( keys . length > _NUM ) { int len = keys . length ; int min = keys [ _NUM ] ; int max = keys [ len - _NUM ] ; int range = max - min + _NUM ; if ( useTable ) { Label [ ] labels = new Label [ range ] ; Arrays . fill ( labels , def ) ; for ( int i = _NUM ; i < len ; ++ i ) { labels [ keys [ i ] - min ] = newLabel ( ) ; } mv . visitTableSwitchInsn ( min , max , def , labels ) ; for ( int i = _NUM ; i < range ; ++ i ) { Label label = labels [ i ] ; if ( label != def ) { mark ( label ) ; generator . generateCase ( i + min , end ) ; } } } else { Label [ ] labels = new Label [ len ] ; for ( int i = _NUM ; i < len ; ++ i ) { labels [ i ] = newLabel ( ) ; } mv . visitLookupSwitchInsn ( def , keys , labels ) ; for ( int i = _NUM ; i < len ; ++ i ) { mark ( labels [ i ] ) ; generator . generateCase ( keys [ i ] , end ) ; } } } mark ( def ) ; generator . generateDefault ( ) ; mark ( end ) ; }
12507	public void print ( PrintWriter output , int w , int d ) { DecimalFormat format = new DecimalFormat ( ) ; format . setDecimalFormatSymbols ( new DecimalFormatSymbols ( Locale . US ) ) ; format . setMinimumIntegerDigits ( _NUM ) ; format . setMaximumFractionDigits ( d ) ; format . setMinimumFractionDigits ( d ) ; format . setGroupingUsed ( _BOOL ) ; print ( output , format , w + _NUM ) ; }
81726	public static < E > Set < E > newSetFromMap ( Map < E , Boolean > map ) { if ( map . isEmpty ( ) ) { return new SetFromMap < E > ( map ) ; } throw new IllegalArgumentException ( ) ; }
43475	public void removeBiomeType ( BiomeDictionary . Type type ) { ArrayList < BiomeGenBase > entryList = new ArrayList < BiomeGenBase > ( ) ; entryList . addAll ( Arrays . asList ( BiomeDictionary . getBiomesForType ( type ) ) ) ; for ( BiomeGenBase biome : entryList ) { Iterator < BiomeEntry > iterator = allowedBiomes . iterator ( ) ; while ( iterator . hasNext ( ) ) { if ( BiomeDictionary . areBiomesEquivalent ( iterator . next ( ) . biome , biome ) ) iterator . remove ( ) ; } } }
46588	static SizeRequirements calculateTiledRequirements ( LayoutIterator iter , SizeRequirements r ) { long minimum = _NUM ; long maximum = _NUM ; long preferred = _NUM ; int lastMargin = _NUM ; int totalSpacing = _NUM ; int n = iter . getCount ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { iter . setIndex ( i ) ; int margin0 = lastMargin ; int margin1 = ( int ) iter . getLeadingCollapseSpan ( ) ; totalSpacing += Math . max ( margin0 , margin1 ) ; preferred += ( int ) iter . getPreferredSpan ( _NUM ) ; minimum += iter . getMinimumSpan ( _NUM ) ; maximum += iter . getMaximumSpan ( _NUM ) ; lastMargin = ( int ) iter . getTrailingCollapseSpan ( ) ; } totalSpacing += lastMargin ; totalSpacing += _NUM * iter . getBorderWidth ( ) ; minimum += totalSpacing ; preferred += totalSpacing ; maximum += totalSpacing ; if ( r == null ) { r = new SizeRequirements ( ) ; } r . minimum = ( minimum > Integer . MAX_VALUE ) ? Integer . MAX_VALUE : ( int ) minimum ; r . preferred = ( preferred > Integer . MAX_VALUE ) ? Integer . MAX_VALUE : ( int ) preferred ; r . maximum = ( maximum > Integer . MAX_VALUE ) ? Integer . MAX_VALUE : ( int ) maximum ; return r ; }
16074	public static void writePaddedInteger ( Writer out , long value , int size ) throws IOException { int intValue = ( int ) value ; if ( intValue == value ) { writePaddedInteger ( out , intValue , size ) ; } else if ( size <= _NUM ) { out . write ( Long . toString ( value ) ) ; } else { if ( value < _NUM ) { out . write ( _STR ) ; if ( value != Long . MIN_VALUE ) { value = - value ; } else { for ( ; size > _NUM ; size -- ) { out . write ( _STR ) ; } out . write ( _STR ) ; return ; } } int digits = ( int ) ( Math . log ( value ) / LOG_10 ) + _NUM ; for ( ; size > digits ; size -- ) { out . write ( _STR ) ; } out . write ( Long . toString ( value ) ) ; } }
71980	private static LDAPFilter createORFilter ( FilterSet filterSet ) throws LDAPException , IOException { List < JAXBElement < ? > > list = filterSet . getFilterGroup ( ) ; ArrayList < RawFilter > filters = new ArrayList < > ( list . size ( ) ) ; for ( JAXBElement < ? > filter : list ) { filters . add ( createFilter ( filter ) ) ; } return LDAPFilter . createORFilter ( filters ) ; }
83499	private void sendBlob ( String index , byte [ ] blob ) { sendInstruction ( new GuacamoleInstruction ( _STR , index , DatatypeConverter . printBase64Binary ( blob ) ) ) ; }
70987	protected void defineLabels ( ) { labelsValues = calcLabels ( ) ; if ( handleValues ) labels = getLabelsFromValues ( ) ; else labels = getLabelsFromData ( ) ; nLabels = labels . size ( ) ; }
52491	public static Set < Interval > mergeIntervalToSet ( Set < Interval > intervals , Interval intervalToMerge ) { LinkedHashSet < Interval > copyOfOriginalSet = new LinkedHashSet < > ( intervals ) ; copyOfOriginalSet . add ( intervalToMerge ) ; return mergeIntervalSet ( copyOfOriginalSet ) ; }
8128	public static String dropWhile ( GString self , @ ClosureParams ( value = FromString . class , conflictResolutionStrategy = PickFirstResolver . class , options = { _STR , _STR } ) Closure condition ) { return dropWhile ( self . toString ( ) , condition ) ; }
22762	public void addNode ( TopologicalNode node ) { nodeList . add ( node ) ; }
32967	public void printText ( String text ) { view . print ( text , text . endsWith ( _STR ) ) ; for ( ActionDelegate actionDelegate : actionDelegates ) { actionDelegate . onConsoleOutput ( this ) ; } }
36256	@ Override public void trim ( ) { if ( counter < x . length ) { int [ ] y = new int [ counter ] ; System . arraycopy ( x , _NUM , y , _NUM , counter ) ; x = y ; resizeValues ( counter ) ; } }
53216	private void divide ( int [ ] idx , double [ ] data , ArrayList < int [ ] > ret , int start , int end , int depth ) { if ( depth == _NUM ) { int [ ] a = Arrays . copyOfRange ( idx , start , end ) ; Arrays . sort ( a ) ; ret . add ( a ) ; return ; } final int count = end - start ; if ( count == _NUM ) { for ( int j = _NUM << depth ; j > _NUM ; -- j ) { ret . add ( new int [ _NUM ] ) ; } return ; } double m = _NUM ; for ( int i = start ; i < end ; i ++ ) { m += data [ i ] ; } m /= count ; int pos = Arrays . binarySearch ( data , start , end , m ) ; if ( pos >= _NUM ) { final int opt = ( start + end ) > > _NUM ; while ( data [ pos ] == m ) { if ( pos < opt ) { pos ++ ; } else if ( pos > opt ) { pos -- ; } else { break ; } } } else { pos = ( - pos - _NUM ) ; } divide ( idx , data , ret , start , pos , depth - _NUM ) ; divide ( idx , data , ret , pos , end , depth - _NUM ) ; }
2275	void assertThreadsStayAlive ( long millis , Thread ... threads ) { try { delay ( millis ) ; for ( Thread thread : threads ) assertTrue ( thread . isAlive ( ) ) ; } catch ( InterruptedException fail ) { threadFail ( _STR ) ; } }
29757	public AbstractWorkerManager ( String id ) { _id = id ; _status = new WorkerManagerStatus ( ) ; setExecutionMode ( EXECUTION_MODE . NON_SERIAL ) ; setupExecutor ( ) ; }
12922	@ Override public void applyInline ( double [ ] data , int pos , int len ) { int i ; double [ ] dataOut = new double [ len ] ; if ( len > real . length ) { throw new IllegalArgumentException ( _STR ) ; } int middle = len / _NUM + len % _NUM ; System . arraycopy ( data , _NUM , dataOut , _NUM , len ) ; System . arraycopy ( dataOut , pos + middle , real , _NUM , len - middle ) ; System . arraycopy ( dataOut , pos , real , real . length - middle , middle ) ; if ( real . length > len ) Arrays . fill ( real , len - middle , real . length - middle , _NUM ) ; Arrays . fill ( imag , _NUM , imag . length , _NUM ) ; FFT . transform ( real , imag , _BOOL ) ; process ( real , imag ) ; FFT . transform ( real , imag , _BOOL ) ; System . arraycopy ( real , _NUM , dataOut , pos + middle , len - middle ) ; System . arraycopy ( real , real . length - middle , dataOut , pos , middle ) ; double origAvgEnergy = SignalProcUtils . getAverageSampleEnergy ( data , len ) ; for ( i = _NUM ; i < len ; i ++ ) data [ i ] = amount * dataOut [ i ] + oneMinusAmount * data [ i ] ; double newAvgEnergy = SignalProcUtils . getAverageSampleEnergy ( data , len ) ; double scale = origAvgEnergy / newAvgEnergy ; for ( i = _NUM ; i < len ; i ++ ) data [ i ] *= _NUM * scale ; }
50334	@ OnMessage public void onMessage ( String message , Session session ) { callInternal ( _STR , session , message ) ; }
4940	public final boolean insert_via ( BrdViaInfo p_via_info , PlaPointInt p_location , NetNosList p_net_no_arr , int p_trace_clearance_class_no , int [ ] p_trace_pen_halfwidth_arr , int p_max_recursion_depth , int p_max_via_recursion_depth , int p_pull_tight_accuracy , int p_pull_tight_time_limit ) { shove_fail_clear ( ) ; changed_area_clear ( ) ; boolean r_ok = shove_via_algo . shove_via_insert ( p_via_info , p_location , p_net_no_arr , p_trace_clearance_class_no , p_trace_pen_halfwidth_arr , p_max_recursion_depth , p_max_via_recursion_depth ) ; if ( ! r_ok ) return _BOOL ; NetNosList opt_net_no_arr = p_max_recursion_depth <= _NUM ? p_net_no_arr : NetNosList . EMPTY ; TimeLimitStoppable t_limit = new TimeLimitStoppable ( s_PREVENT_ENDLESS_LOOP ) ; changed_area_optimize ( opt_net_no_arr , p_pull_tight_accuracy , null , t_limit , null ) ; return _BOOL ; }
27485	boolean thresholdExceeded ( final Set < IBindingSet > distinctProjectionBuffer , final int distinctProjectionBufferThreshold , final List < IBindingSet > incomingBindingsBuffer , final int incomingBindingsBufferThreshold ) { return distinctProjectionBuffer . size ( ) >= distinctProjectionBufferThreshold || incomingBindingsBuffer . size ( ) >= incomingBindingsBufferThreshold ; }
14451	public static byte [ ] toByteArray ( String str ) { int len = str . length ( ) ; StringTokenizer st = new StringTokenizer ( str , _STR ) ; String [ ] newStrArray = new String [ st . countTokens ( ) ] ; int j = _NUM ; while ( st . hasMoreTokens ( ) ) { newStrArray [ j ] = st . nextToken ( ) ; j ++ ; } byte [ ] ret = new byte [ newStrArray . length ] ; int tmp ; for ( int i = _NUM ; i < newStrArray . length ; i ++ ) { tmp = Integer . parseInt ( newStrArray [ i ] , _NUM ) ; ret [ i ] = ( byte ) ( tmp - _NUM ) ; } return ret ; }
78909	public static boolean nullEquals ( String s1 , String s2 ) { return ( s1 == null ? s2 == null : s1 . equals ( s2 ) ) ; }
74860	private char [ ] fFormatDigits ( final double x ) { String sx ; int i , j , k ; final int n1In ; final int n2In ; int expon = _NUM ; boolean minusSign = _BOOL ; if ( x > _NUM ) { sx = Double . toString ( x ) ; } else if ( x < _NUM ) { sx = Double . toString ( - x ) ; minusSign = _BOOL ; } else { sx = Double . toString ( x ) ; if ( sx . charAt ( _NUM ) == _STR ) { minusSign = _BOOL ; sx = sx . substring ( _NUM ) ; } } final int ePos = sx . indexOf ( _STR ) ; final int rPos = sx . indexOf ( _STR ) ; if ( rPos != - _NUM ) { n1In = rPos ; } else if ( ePos != - _NUM ) { n1In = ePos ; } else { n1In = sx . length ( ) ; } if ( rPos != - _NUM ) { if ( ePos != - _NUM ) { n2In = ePos - rPos - _NUM ; } else { n2In = sx . length ( ) - rPos - _NUM ; } } else { n2In = _NUM ; } if ( ePos != - _NUM ) { int ie = ePos + _NUM ; expon = _NUM ; if ( sx . charAt ( ie ) == _STR ) { for ( ++ ie ; ie < sx . length ( ) ; ie ++ ) { if ( sx . charAt ( ie ) != _STR ) { break ; } } if ( ie < sx . length ( ) ) { expon = - Integer . parseInt ( sx . substring ( ie ) ) ; } } else { if ( sx . charAt ( ie ) == _STR ) { ++ ie ; } for ( ; ie < sx . length ( ) ; ie ++ ) { if ( sx . charAt ( ie ) != _STR ) { break ; } } if ( ie < sx . length ( ) ) { expon = Integer . parseInt ( sx . substring ( ie ) ) ; } } } final int p ; if ( precisionSet ) { p = precision ; } else { p = defaultDigits - _NUM ; } final char [ ] ca1 = sx . toCharArray ( ) ; final char [ ] ca2 = new char [ n1In + n2In ] ; final char [ ] ca3 ; final char [ ] ca4 ; final char [ ] ca5 ; for ( j = _NUM ; j < n1In ; j ++ ) { ca2 [ j ] = ca1 [ j ] ; } i = j + _NUM ; for ( k = _NUM ; k < n2In ; j ++ , i ++ , k ++ ) { ca2 [ j ] = ca1 [ i ] ; } if ( n1In + expon <= _NUM ) { ca3 = new char [ - expon + n2In ] ; for ( j = _NUM , k = _NUM ; k < ( - n1In - expon ) ; k ++ , j ++ ) { ca3 [ j ] = _STR ; } for ( i = _NUM ; i < ( n1In + n2In ) ; i ++ , j ++ ) { ca3 [ j ] = ca2 [ i ] ; } } else { ca3 = ca2 ; } boolean carry = _BOOL ; if ( p < - expon + n2In ) { if ( expon < _NUM ) { i = p ; } else { i = p + n1In ; } carry = checkForCarry ( ca3 , i ) ; if ( carry ) { carry = startSymbolicCarry ( ca3 , i - _NUM , _NUM ) ; } } if ( n1In + expon <= _NUM ) { ca4 = new char [ _NUM + p ] ; if ( ! carry ) { ca4 [ _NUM ] = _STR ; } else { ca4 [ _NUM ] = _STR ; } if ( alternateForm || ! precisionSet || precision != _NUM ) { ca4 [ _NUM ] = _STR ; for ( i = _NUM , j = _NUM ; i < Math . min ( p , ca3 . length ) ; i ++ , j ++ ) { ca4 [ j ] = ca3 [ i ] ; } for ( ; j < ca4 . length ; j ++ ) { ca4 [ j ] = _STR ; } } } else { if ( ! carry ) { if ( alternateForm || ! precisionSet || precision != _NUM ) { ca4 = new char [ n1In + expon + p + _NUM ] ; } else { ca4 = new char [ n1In + expon ] ; } j = _NUM ; } else { if ( alternateForm || ! precisionSet || precision != _NUM ) { ca4 = new char [ n1In + expon + p + _NUM ] ; } else { ca4 = new char [ n1In + expon + _NUM ] ; } ca4 [ _NUM ] = _STR ; j = _NUM ; } for ( i = _NUM ; i < Math . min ( n1In + expon , ca3 . length ) ; i ++ , j ++ ) { ca4 [ j ] = ca3 [ i ] ; } for ( ; i < n1In + expon ; i ++ , j ++ ) { ca4 [ j ] = _STR ; } if ( alternateForm || ! precisionSet || precision != _NUM ) { ca4 [ j ] = _STR ; j ++ ; for ( k = _NUM ; i < ca3 . length && k < p ; i ++ , j ++ , k ++ ) { ca4 [ j ] = ca3 [ i ] ; } for ( ; j < ca4 . length ; j ++ ) { ca4 [ j ] = _STR ; } } } int nZeros = _NUM ; if ( ! leftJustify && leadingZeros ) { int xThousands = _NUM ; if ( thousands ) { int xlead = _NUM ; if ( ca4 [ _NUM ] == _STR || ca4 [ _NUM ] == _STR || ca4 [ _NUM ] == _STR ) { xlead = _NUM ; } int xdp = xlead ; for ( ; xdp < ca4 . length ; xdp ++ ) { if ( ca4 [ xdp ] == _STR ) { break ; } } xThousands = ( xdp - xlead ) / _NUM ; } if ( fieldWidthSet ) { nZeros = fieldWidth - ca4 . length ; } if ( ( ! minusSign && ( leadingSign || leadingSpace ) ) || minusSign ) { nZeros -- ; } nZeros -= xThousands ; if ( nZeros < _NUM ) { nZeros = _NUM ; } } j = _NUM ; if ( ( ! minusSign && ( leadingSign || leadingSpace ) ) || minusSign ) { ca5 = new char [ ca4 . length + nZeros + _NUM ] ; j ++ ; } else { ca5 = new char [ ca4 . length + nZeros ] ; } if ( ! minusSign ) { if ( leadingSign ) { ca5 [ _NUM ] = _STR ; } if ( leadingSpace ) { ca5 [ _NUM ] = _STR ; } } else { ca5 [ _NUM ] = _STR ; } for ( i = _NUM ; i < nZeros ; i ++ , j ++ ) { ca5 [ j ] = _STR ; } for ( i = _NUM ; i < ca4 . length ; i ++ , j ++ ) { ca5 [ j ] = ca4 [ i ] ; } int lead = _NUM ; if ( ca5 [ _NUM ] == _STR || ca5 [ _NUM ] == _STR || ca5 [ _NUM ] == _STR ) { lead = _NUM ; } int dp = lead ; for ( ; dp < ca5 . length ; dp ++ ) { if ( ca5 [ dp ] == _STR ) { break ; } } final int nThousands = ( dp - lead ) / _NUM ; if ( dp < ca5 . length ) { ca5 [ dp ] = dfs . getDecimalSeparator ( ) ; } char [ ] ca6 = ca5 ; if ( thousands && nThousands > _NUM ) { ca6 = new char [ ca5 . length + nThousands + lead ] ; ca6 [ _NUM ] = ca5 [ _NUM ] ; for ( i = lead , k = lead ; i < dp ; i ++ ) { if ( i > _NUM && ( dp - i ) % _NUM == _NUM ) { ca6 [ k ] = dfs . getGroupingSeparator ( ) ; ca6 [ k + _NUM ] = ca5 [ i ] ; k += _NUM ; } else { ca6 [ k ] = ca5 [ i ] ; k ++ ; } } for ( ; i < ca5 . length ; i ++ , k ++ ) { ca6 [ k ] = ca5 [ i ] ; } } return ca6 ; }
49156	int maxLength ( ) { FontMetrics fm = getFontMetrics ( getFont ( ) ) ; int m = _NUM ; int end = items . size ( ) ; for ( int i = _NUM ; i < end ; i ++ ) { int l = fm . stringWidth ( ( ( String ) items . elementAt ( i ) ) ) ; m = Math . max ( m , l ) ; } return m ; }
61364	public void write ( final char chars [ ] , final int start , final int length ) throws java . io . IOException { if ( m_writer != null ) m_writer . write ( chars , start , length ) ; int lengthx3 = ( length << _NUM ) + length ; if ( lengthx3 >= buf_length ) { flushBuffer ( ) ; setBufferSize ( _NUM * lengthx3 ) ; } if ( lengthx3 > buf_length - count ) { flushBuffer ( ) ; } final int n = length + start ; for ( int i = start ; i < n ; i ++ ) { final char c = chars [ i ] ; if ( c < _NUM ) buf [ count ++ ] = ( byte ) ( c ) ; else if ( c < _NUM ) { buf [ count ++ ] = ( byte ) ( _NUM + ( c > > _NUM ) ) ; buf [ count ++ ] = ( byte ) ( _NUM + ( c & _NUM ) ) ; } else { buf [ count ++ ] = ( byte ) ( _NUM + ( c > > _NUM ) ) ; buf [ count ++ ] = ( byte ) ( _NUM + ( ( c > > _NUM ) & _NUM ) ) ; buf [ count ++ ] = ( byte ) ( _NUM + ( c & _NUM ) ) ; } } }
5037	public PlaPointInt round_to_the_left ( PlaDirection p_dir ) { PlaPointFloat dir = p_dir . to_float ( ) ; double rounded_x ; if ( dir . v_y > _NUM ) { rounded_x = Math . floor ( v_x ) ; } else if ( dir . v_y < _NUM ) { rounded_x = Math . ceil ( v_x ) ; } else { rounded_x = Math . round ( v_x ) ; } double rounded_y ; if ( dir . v_x > _NUM ) { rounded_y = Math . ceil ( v_y ) ; } else if ( dir . v_x < _NUM ) { rounded_y = Math . floor ( v_y ) ; } else { rounded_y = Math . round ( v_y ) ; } return new PlaPointInt ( rounded_x , rounded_y ) ; }
58312	protected HttpHost determineProxy ( HttpHost target , HttpRequest request , HttpContext context ) throws HttpException { ProxySelector psel = this . proxySelector ; if ( psel == null ) psel = ProxySelector . getDefault ( ) ; if ( psel == null ) return null ; URI targetURI = null ; try { targetURI = new URI ( target . toURI ( ) ) ; } catch ( URISyntaxException usx ) { throw new HttpException ( _STR + target , usx ) ; } List < Proxy > proxies = psel . select ( targetURI ) ; Proxy p = chooseProxy ( proxies , target , request , context ) ; HttpHost result = null ; if ( p . type ( ) == Proxy . Type . HTTP ) { if ( ! ( p . address ( ) instanceof InetSocketAddress ) ) { throw new HttpException ( _STR + p . address ( ) ) ; } final InetSocketAddress isa = ( InetSocketAddress ) p . address ( ) ; result = new HttpHost ( getHost ( isa ) , isa . getPort ( ) ) ; } return result ; }
51191	private void addReference ( final int sourcePosition , final int referencePosition ) { if ( srcAndRefPositions == null ) { srcAndRefPositions = new int [ _NUM ] ; } if ( referenceCount >= srcAndRefPositions . length ) { int [ ] a = new int [ srcAndRefPositions . length + _NUM ] ; System . arraycopy ( srcAndRefPositions , _NUM , a , _NUM , srcAndRefPositions . length ) ; srcAndRefPositions = a ; } srcAndRefPositions [ referenceCount ++ ] = sourcePosition ; srcAndRefPositions [ referenceCount ++ ] = referencePosition ; }
48792	public Object [ ] toArray ( ) { return Arrays . copyOf ( elementData , size ) ; }
85587	public boolean isRunning ( ) { return mThread != null && mThread . isAlive ( ) ; }
11967	public static byte [ ] unwrapVCF ( File sourceFile , File tmpFile ) throws FileNotFoundException , IOException { ZipArchiveInputStream in = null ; FileOutputStream fos = null ; String hmacString = null ; try { in = new ZipArchiveInputStream ( new FileInputStream ( sourceFile ) ) ; ArchiveEntry entry ; in . getNextEntry ( ) ; fos = new FileOutputStream ( tmpFile ) ; IOUtils . copy ( in , fos ) ; entry = in . getNextEntry ( ) ; hmacString = entry . getName ( ) ; return Utils . hexToBytes ( hmacString ) ; } catch ( StringIndexOutOfBoundsException e ) { logger . error ( _STR + hmacString + _STR , e ) ; throw e ; } catch ( Exception e ) { logger . error ( _STR , e ) ; throw e ; } finally { if ( fos != null ) { fos . flush ( ) ; fos . close ( ) ; } if ( in != null ) { in . close ( ) ; } } }
50487	public boolean registerUser ( String username , String password , String uri ) throws DataAccessException { if ( checkUsernameExists ( username ) ) { return _BOOL ; } storeUser ( username , password , uri ) ; return _BOOL ; }
68215	public SELECT ( @ NonNull String ... columns ) { if ( columns == null ) { throw new NullPointerException ( _STR ) ; } if ( columns . length == _NUM ) throw new IllegalArgumentException ( _STR ) ; StringBuilder builder = new StringBuilder ( _STR ) ; for ( int i = _NUM ; i < columns . length ; i ++ ) { builder . append ( columns [ i ] ) ; if ( i != ( columns . length - _NUM ) ) builder . append ( _STR ) ; } sql = builder . toString ( ) ; }
45936	public static synchronized MBeanInfo testCompliance ( final Class < ? > baseClass , Class < ? > mbeanInterface ) throws NotCompliantMBeanException { if ( mbeanInterface == null ) mbeanInterface = getStandardMBeanInterface ( baseClass ) ; ReflectUtil . checkPackageAccess ( mbeanInterface ) ; MBeanIntrospector < ? > introspector = StandardMBeanIntrospector . getInstance ( ) ; return getClassMBeanInfo ( introspector , baseClass , mbeanInterface ) ; }
26348	public static Set < String > toStringSet ( TemplateSequenceModel seqModel ) throws TemplateModelException { Set < String > set = new HashSet < String > ( ) ; for ( int i = _NUM ; i < seqModel . size ( ) ; i ++ ) { set . add ( getAsStringNonEscaping ( ( TemplateScalarModel ) seqModel . get ( i ) ) ) ; } return set ; }
34199	public JKSSignatureToken ( InputStream ksStream , String ksPassword ) { try { keyStore = KeyStore . getInstance ( KeyStore . getDefaultType ( ) ) ; password = ( ksPassword == null ) ? null : ksPassword . toCharArray ( ) ; keyStore . load ( ksStream , password ) ; } catch ( Exception e ) { throw new DSSException ( e ) ; } finally { if ( ksStream != null ) { try { ksStream . close ( ) ; } catch ( IOException e ) { logger . error ( e . getMessage ( ) , e ) ; } } } }
47850	protected void writeLocation ( String loc ) throws IOException { hadAnnotations |= ( loc != null ) ; locOut . writeObject ( loc ) ; }
431	protected int __offset ( int vtable_offset ) { int vtable = bb_pos - bb . getInt ( bb_pos ) ; return vtable_offset < bb . getShort ( vtable ) ? bb . getShort ( vtable + vtable_offset ) : _NUM ; }
21284	public static String selectText ( XPathExpression expr , Node context ) { try { return ( String ) expr . evaluate ( context , XPathConstants . STRING ) ; } catch ( XPathExpressionException e ) { throw new XmlException ( e ) ; } }
29711	public static HttpHeaders toArmeria ( io . netty . handler . codec . http . HttpHeaders inHeaders ) { if ( inHeaders . isEmpty ( ) ) { return HttpHeaders . EMPTY_HEADERS ; } final HttpHeaders out = new DefaultHttpHeaders ( _BOOL , inHeaders . size ( ) ) ; toArmeria ( inHeaders , out ) ; return out ; }
25324	public static int calculateRMSLevel ( short [ ] audioData , int numframes ) { long lSum = _NUM ; int numread = _NUM ; for ( short s : audioData ) { lSum = lSum + s ; numread ++ ; if ( numread == numframes ) break ; } double dAvg = lSum / numframes ; double sumMeanSquare = _NUM ; numread = _NUM ; for ( short anAudioData : audioData ) { sumMeanSquare = sumMeanSquare + Math . pow ( anAudioData - dAvg , _NUM ) ; numread ++ ; if ( numread == numframes ) break ; } double averageMeanSquare = sumMeanSquare / numframes ; return ( int ) ( Math . pow ( averageMeanSquare , _NUM ) + _NUM ) ; }
39994	private void initProgram ( ) { glUseProgram ( this . program ) ; vec3ArrayUniform = glGetUniformLocation ( this . program , _STR ) ; chosenUniform = glGetUniformLocation ( this . program , _STR ) ; glUseProgram ( _NUM ) ; }
48376	public boolean engineContainsAlias ( String alias ) { return entries . containsKey ( alias . toLowerCase ( Locale . ENGLISH ) ) ; }
17395	public void invertSelectedRelations ( ) { ISelection selection = viewer . getSelection ( ) ; if ( ! ( selection instanceof IStructuredSelection ) ) { return ; } IStructuredSelection structuredSelection = ( IStructuredSelection ) selection ; Collection < Relation > inverse = computeInverseRelations ( getTableRelations ( ) , structuredSelection ) ; StructuredSelection nextSelection = new StructuredSelection ( inverse . toArray ( ) ) ; viewer . setSelection ( nextSelection , _BOOL ) ; }
18642	public void testFloatValueNeg ( ) { String a = _STR ; BigDecimal aNumber = new BigDecimal ( a ) ; float result = - _NUM ; assertTrue ( _STR , aNumber . floatValue ( ) == result ) ; }
76386	public void bindKeyStore ( final KeyStoreService keyStoreService ) { this . keyStore = keyStoreService ; }
69714	protected void drawConnectorCenters ( Canvas c ) { List < Connection > connections = mBlock . getAllConnections ( ) ; Paint paint = new Paint ( ) ; paint . setStyle ( Paint . Style . FILL ) ; for ( int i = _NUM ; i < connections . size ( ) ; i ++ ) { Connection conn = connections . get ( i ) ; if ( conn . inDragMode ( ) ) { if ( conn . isConnected ( ) ) { paint . setColor ( Color . RED ) ; } else { paint . setColor ( Color . MAGENTA ) ; } } else { if ( conn . isConnected ( ) ) { paint . setColor ( Color . GREEN ) ; } else { paint . setColor ( Color . CYAN ) ; } } mTempWorkspacePoint . set ( conn . getPosition ( ) . x - mBlock . getPosition ( ) . x , conn . getPosition ( ) . y - mBlock . getPosition ( ) . y ) ; mHelper . workspaceToVirtualViewDelta ( mTempWorkspacePoint , mTempConnectionPosition ) ; if ( mHelper . useRtl ( ) ) { mTempConnectionPosition . x += mBlockViewSize . x ; } c . drawCircle ( mTempConnectionPosition . x , mTempConnectionPosition . y , _NUM , paint ) ; } }
29056	private static boolean isMerge ( InstructionHandle handle ) { if ( handle . hasTargeters ( ) ) { InstructionTargeter [ ] targeterList = handle . getTargeters ( ) ; for ( InstructionTargeter targeter : targeterList ) { if ( targeter instanceof BranchInstruction ) { return _BOOL ; } } } return _BOOL ; }
22155	private synchronized void loadTrustManager ( ) { try { TrustManagerFactory tmf = TrustManagerFactory . getInstance ( X509_ALGORITHM ) ; tmf . init ( keystore ) ; for ( TrustManager trustManager : tmf . getTrustManagers ( ) ) { if ( trustManager instanceof X509TrustManager ) { defaultViPRTrustManager = ( X509TrustManager ) trustManager ; log . debug ( _STR ) ; break ; } } log . info ( _STR , defaultViPRTrustManager . getAcceptedIssuers ( ) . length ) ; } catch ( GeneralSecurityException e ) { log . error ( e . getMessage ( ) , e ) ; } }
45259	private boolean isOutsideDocElem ( ) { return ( null == m_docFrag ) && m_elemStack . size ( ) == _NUM && ( null == m_currentNode || m_currentNode . getNodeType ( ) == Node . DOCUMENT_NODE ) ; }
14484	public ThreadPool ( String name , int poolSize ) { this . poolSize = poolSize ; this . poolName = name ; taskList = new LinkedList < Runnable > ( ) ; threads = new WorkerThread [ poolSize ] ; createThreads ( ) ; }
33745	private static Object invokeOrDie ( final Method method , final Object object , final Object ... params ) { try { return method . invoke ( object , params ) ; } catch ( IllegalAccessException e ) { throw new RuntimeException ( _STR + _STR , e ) ; } catch ( InvocationTargetException e ) { final Throwable cause = e . getCause ( ) ; if ( cause instanceof RuntimeException ) { throw ( RuntimeException ) cause ; } else if ( cause instanceof Error ) { throw ( Error ) cause ; } else { throw new RuntimeException ( _STR , cause ) ; } } }
43728	public void clear ( ) { this . normal = null ; this . depth = _NUM ; }
2718	public String name ( ) { return theName ; }
84294	public final void addHelperTextColor ( @ ColorInt final int color ) { if ( ! helperTextColors . contains ( color ) ) { helperTextColors . add ( color ) ; verifyPasswordStrength ( ) ; } }
69760	public void advanceToNextMinute ( ) { }
77519	ListBasedTokenStream ( AttributeSource attributeSource , List < AttributeSource > tokens ) { super ( attributeSource . getAttributeFactory ( ) ) ; this . tokens = tokens ; addAttributes ( attributeSource ) ; }
47866	@ SuppressWarnings ( _STR ) protected Class resolveClass ( ObjectStreamClass classDesc ) throws IOException , ClassNotFoundException { String cname = classDesc . getName ( ) ; return ClassFinder . resolveClass ( cname , this . loader ) ; }
26541	public Map < String , Object > makeValid ( Map < String , ? extends Object > source , String mode ) { return makeValid ( source , mode , _BOOL , null ) ; }
43891	public static int find ( byte [ ] a , int fromIndex , int toIndex , byte [ ] key ) { int result = - _NUM ; int sublen = key . length ; int maxpos , first , sp = _NUM ; maxpos = Math . min ( toIndex , a . length ) - sublen ; for ( first = fromIndex ; sp != sublen && first <= maxpos ; first ++ ) { first = find ( a , first , maxpos , key [ _NUM ] ) ; if ( ( first < _NUM ) || ( first > maxpos ) ) { break ; } for ( sp = _NUM ; sp < sublen ; sp ++ ) { if ( a [ first + sp ] != key [ sp ] ) { sp = sublen ; } } } if ( sublen == _NUM ) { result = _NUM ; } else if ( sp == sublen ) { result = ( first - _NUM ) ; } return result ; }
17320	private void addSyntheticEdge ( Collection < GraphEdge > result , GraphEdge original , GraphNode head , GraphNode tail ) { result . add ( new GraphEdge ( head , tail , original . getRelation ( ) ) ) ; }
11080	public void addStates ( State [ ] s ) { for ( int i = _NUM ; i < s . length ; i ++ ) states . addElement ( s [ i ] ) ; }
75202	private synchronized void readObject ( java . io . ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; init ( getMask ( actions ) ) ; }
49240	private static byte [ ] WindowsRegEnumKeyEx1 ( int hKey , int subKeyIndex , int maxKeyLength ) { byte [ ] result = WindowsRegEnumKeyEx ( hKey , subKeyIndex , maxKeyLength ) ; if ( result != null ) { return result ; } else { long sleepTime = INIT_SLEEP_TIME ; for ( int i = _NUM ; i < MAX_ATTEMPTS ; i ++ ) { try { Thread . sleep ( sleepTime ) ; } catch ( InterruptedException e ) { return result ; } sleepTime *= _NUM ; result = WindowsRegEnumKeyEx ( hKey , subKeyIndex , maxKeyLength ) ; if ( result != null ) { return result ; } } } return result ; }
138	public Tasker addTask ( Task task ) { tasks . add ( task ) ; lastAddedTask = task ; return this ; }
40017	private void initComputeProgram ( ) { glUseProgram ( computeProgram ) ; IntBuffer workGroupSize = BufferUtils . createIntBuffer ( _NUM ) ; glGetProgramiv ( computeProgram , GL_COMPUTE_WORK_GROUP_SIZE , workGroupSize ) ; workGroupSizeX = workGroupSize . get ( _NUM ) ; workGroupSizeY = workGroupSize . get ( _NUM ) ; timeUniform = glGetUniformLocation ( computeProgram , _STR ) ; blendFactorUniform = glGetUniformLocation ( computeProgram , _STR ) ; bounceCountUniform = glGetUniformLocation ( computeProgram , _STR ) ; IntBuffer params = BufferUtils . createIntBuffer ( _NUM ) ; int loc = glGetUniformLocation ( computeProgram , _STR ) ; glGetUniformiv ( computeProgram , loc , params ) ; framebufferImageBinding = params . get ( _NUM ) ; loc = glGetUniformLocation ( computeProgram , _STR ) ; glGetUniformiv ( computeProgram , loc , params ) ; worldPositionImageBinding = params . get ( _NUM ) ; loc = glGetUniformLocation ( computeProgram , _STR ) ; glGetUniformiv ( computeProgram , loc , params ) ; worldNormalImageBinding = params . get ( _NUM ) ; glUseProgram ( _NUM ) ; }
41051	public void sort ( ) { throwIfImmutable ( ) ; if ( ! sorted ) { Arrays . sort ( values , _NUM , size ) ; sorted = _BOOL ; } }
30457	public static Object objectFromByteBuffer ( byte [ ] buffer ) throws Exception { if ( buffer == null ) return null ; ByteArrayInputStream inStream = new ByteArrayInputStream ( buffer ) ; ObjectInputStream in = new ObjectInputStreamExt ( inStream ) ; Object retval = in . readObject ( ) ; in . close ( ) ; return retval ; }
21565	public String generateGroupName ( String policyName , Set < String > existingGroupNames , String parentGroupName ) { int count = _NUM ; String format = null ; while ( count <= existingGroupNames . size ( ) ) { if ( _NUM == count ) { format = String . format ( _STR , policyName ) ; } else { format = String . format ( _STR , policyName , count ) ; } String generatedGroupName = generate ( parentGroupName , format , SmisConstants . MASK_NAME_DELIMITER , SmisConstants . MAX_STORAGE_GROUP_NAME_LENGTH ) ; if ( ! existingGroupNames . contains ( generatedGroupName ) ) { return generatedGroupName ; } count ++ ; } return generate ( parentGroupName , String . format ( _STR , policyName ) , SmisConstants . MASK_NAME_DELIMITER , SmisConstants . MAX_STORAGE_GROUP_NAME_LENGTH ) ; }
19384	public static void assertColumnTypes ( ResultSet rs , int [ ] expectedTypes ) throws SQLException { ResultSetMetaData rsmd = rs . getMetaData ( ) ; int actualCols = rsmd . getColumnCount ( ) ; assertEquals ( _STR , expectedTypes . length , rsmd . getColumnCount ( ) ) ; for ( int i = _NUM ; i < actualCols ; i ++ ) { assertEquals ( _STR + ( i + _NUM ) , expectedTypes [ i ] , rsmd . getColumnType ( i + _NUM ) ) ; } }
60395	public DefaultActionGroup ( @ NotNull AnAction ... actions ) { this ( Arrays . asList ( actions ) ) ; }
6552	public int add ( T dl , int row ) { _list . add ( row , dl ) ; fireTableRowsInserted ( row , row ) ; return row ; }
76987	private void pushTerm ( BytesRef text ) throws IOException { int limit = Math . min ( lastTerm . length ( ) , text . length ) ; int pos = _NUM ; while ( pos < limit && lastTerm . byteAt ( pos ) == text . bytes [ text . offset + pos ] ) { pos ++ ; } for ( int i = lastTerm . length ( ) - _NUM ; i >= pos ; i -- ) { int prefixTopSize = pending . size ( ) - prefixStarts [ i ] ; if ( prefixTopSize >= minItemsInBlock ) { writeBlocks ( i + _NUM , prefixTopSize ) ; prefixStarts [ i ] -= prefixTopSize - _NUM ; } } if ( prefixStarts . length < text . length ) { prefixStarts = ArrayUtil . grow ( prefixStarts , text . length ) ; } for ( int i = pos ; i < text . length ; i ++ ) { prefixStarts [ i ] = pending . size ( ) ; } lastTerm . copyBytes ( text ) ; }
63666	public NumericLiteral ( Object x ) { if ( x instanceof Number ) { m_number = ( Number ) x ; m_type = TypeLib . getPrimitiveType ( m_number . getClass ( ) ) ; } else { throw new IllegalArgumentException ( _STR ) ; } }
83967	private boolean isMineshafterPresent ( ) { try { Class . forName ( _STR ) ; return _BOOL ; } catch ( Exception e ) { return _BOOL ; } }
469	@ SuppressLint ( _STR ) @ Override protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { int widthMode = MeasureSpec . getMode ( widthMeasureSpec ) ; int heightMode = MeasureSpec . getMode ( heightMeasureSpec ) ; int maxWidth = MeasureSpec . getSize ( widthMeasureSpec ) ; int maxHeight = MeasureSpec . getSize ( heightMeasureSpec ) ; if ( widthMode == MeasureSpec . UNSPECIFIED ) maxWidth = Integer . MAX_VALUE ; if ( heightMode == MeasureSpec . UNSPECIFIED ) maxHeight = Integer . MAX_VALUE ; int paddingLeft = getPaddingLeft ( ) ; int paddingTop = getPaddingTop ( ) ; int paddingRight = getPaddingRight ( ) ; int paddingBottom = getPaddingBottom ( ) ; int maxRightBound = maxWidth - paddingRight ; int maxBottomBound = maxHeight - paddingBottom ; int left ; int top ; int right ; int bottom ; int rightBound = paddingLeft ; int maxRightNoPadding = rightBound ; int bottomBound ; int lastMaxBottom = paddingTop ; int maxBottom = lastMaxBottom ; int childWidth ; int childHeight ; int lineStartIndex = _NUM ; int lineEndIndex ; rectList . clear ( ) ; int childCount = getChildCount ( ) ; for ( int index = _NUM ; index < childCount ; index ++ ) { final View child = getChildAt ( index ) ; child . measure ( MeasureSpec . UNSPECIFIED , MeasureSpec . UNSPECIFIED ) ; if ( child . getVisibility ( ) == View . GONE ) continue ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; childWidth = child . getMeasuredWidth ( ) ; childHeight = child . getMeasuredHeight ( ) ; left = rightBound + lp . leftMargin ; right = left + childWidth ; rightBound = right + lp . rightMargin ; if ( rightBound > maxRightBound ) { lineEndIndex = index ; adjustBaseLine ( maxBottom - lastMaxBottom , lineStartIndex , lineEndIndex ) ; if ( maxBottom >= maxBottomBound ) break ; if ( lineEndIndex == lineStartIndex ) { child . measure ( MeasureSpec . makeMeasureSpec ( maxWidth - paddingLeft - paddingRight - lp . leftMargin - lp . rightMargin , MeasureSpec . AT_MOST ) , MeasureSpec . UNSPECIFIED ) ; childWidth = child . getMeasuredWidth ( ) ; childHeight = child . getMeasuredHeight ( ) ; } left = paddingLeft + lp . leftMargin ; right = left + childWidth ; rightBound = right + lp . rightMargin ; lastMaxBottom = maxBottom ; top = lastMaxBottom + lp . topMargin ; bottom = top + childHeight ; bottomBound = bottom + lp . bottomMargin ; lineStartIndex = index ; } else { top = lastMaxBottom + lp . topMargin ; bottom = top + childHeight ; bottomBound = bottom + lp . bottomMargin ; } if ( rightBound > maxRightNoPadding ) maxRightNoPadding = rightBound ; if ( bottomBound > maxBottom ) maxBottom = bottomBound ; Rect rect = new Rect ( ) ; rect . left = left ; rect . top = top ; rect . right = right ; rect . bottom = bottom ; rectList . add ( rect ) ; } adjustBaseLine ( maxBottom - lastMaxBottom , lineStartIndex , rectList . size ( ) ) ; int measuredWidth ; int measuredHeight ; if ( widthMode == MeasureSpec . EXACTLY ) measuredWidth = maxWidth ; else measuredWidth = maxRightNoPadding + paddingRight ; if ( heightMode == MeasureSpec . EXACTLY ) measuredHeight = maxHeight ; else { measuredHeight = maxBottom + paddingBottom ; if ( heightMode == MeasureSpec . AT_MOST ) measuredHeight = measuredHeight > maxHeight ? maxHeight : measuredHeight ; } setMeasuredDimension ( measuredWidth , measuredHeight ) ; }
57578	private final boolean compareAndSetHead ( Node update ) { return unsafe . compareAndSwapObject ( this , headOffset , null , update ) ; }
971	private void ensureBufferCapacity ( int desiredCapacity ) { int capacity = pixelBuffer . length ; while ( capacity < desiredCapacity ) { capacity *= _NUM ; } if ( capacity > pixelBuffer . length ) { pixelBuffer = new byte [ capacity ] ; } }
84416	protected Set < DependencyKind > removeDependency ( Node n ) { Set < DependencyKind > removedKinds = new HashSet < > ( ) ; for ( DependencyKind dk : DependencyKind . values ( ) ) { Set < Node > depsByKind = deps . get ( dk ) ; if ( depsByKind == null ) continue ; if ( depsByKind . remove ( n ) ) { removedKinds . add ( dk ) ; } } return removedKinds ; }
56214	public static < K , V > ConcurrentMap < K , V > newConcurrentMapWithAggressiveConcurrency ( ) { return new ConcurrentHashMap < > ( _NUM , _NUM , aggressiveConcurrencyLevel ) ; }
38842	@ Override public boolean connectionAllowed ( String eventName ) { if ( m_listenee != null || ! eventName . equals ( _STR ) ) { return _BOOL ; } return _BOOL ; }
55632	protected char skipAllWhitespace ( Reader r ) throws IOException { char c ; do { c = ( char ) r . read ( ) ; } while ( Character . isWhitespace ( c ) && c != ( char ) - _NUM ) ; return c ; }
57940	public Iterator enumerateLiteralResultAttributes ( ) { return ( null == m_avts ) ? null : m_avts . iterator ( ) ; }
85904	public Map < String , String > parse ( final String str , char separator ) { if ( str == null ) { return new HashMap < > ( ) ; } return parse ( str . toCharArray ( ) , separator ) ; }
81631	public PriorityQueue ( Collection < ? extends E > c ) { if ( c instanceof PriorityQueue ) { getFromPriorityQueue ( ( PriorityQueue < ? extends E > ) c ) ; } else if ( c instanceof SortedSet ) { getFromSortedSet ( ( SortedSet < ? extends E > ) c ) ; } else { initSize ( c ) ; addAll ( c ) ; } }
15391	private String resourceId ( ) { return subSchemaPath . isEmpty ( ) ? null : lastSchemaNodeName ( ) ; }
47155	private long acquireWrite ( boolean interruptible , long deadline ) { WNode node = null , p ; for ( int spins = - _NUM ; ; ) { long m , s , ns ; if ( ( m = ( s = state ) & ABITS ) == _NUM ) { if ( U . compareAndSwapLong ( this , STATE , s , ns = s + WBIT ) ) return ns ; } else if ( spins < _NUM ) spins = ( m == WBIT && wtail == whead ) ? SPINS : _NUM ; else if ( spins > _NUM ) { if ( LockSupport . nextSecondarySeed ( ) >= _NUM ) -- spins ; } else if ( ( p = wtail ) == null ) { WNode hd = new WNode ( WMODE , null ) ; if ( U . compareAndSwapObject ( this , WHEAD , null , hd ) ) wtail = hd ; } else if ( node == null ) node = new WNode ( WMODE , p ) ; else if ( node . prev != p ) node . prev = p ; else if ( U . compareAndSwapObject ( this , WTAIL , p , node ) ) { p . next = node ; break ; } } for ( int spins = - _NUM ; ; ) { WNode h , np , pp ; int ps ; if ( ( h = whead ) == p ) { if ( spins < _NUM ) spins = HEAD_SPINS ; else if ( spins < MAX_HEAD_SPINS ) spins <<= _NUM ; for ( int k = spins ; ; ) { long s , ns ; if ( ( ( s = state ) & ABITS ) == _NUM ) { if ( U . compareAndSwapLong ( this , STATE , s , ns = s + WBIT ) ) { whead = node ; node . prev = null ; return ns ; } } else if ( LockSupport . nextSecondarySeed ( ) >= _NUM && -- k <= _NUM ) break ; } } else if ( h != null ) { WNode c ; Thread w ; while ( ( c = h . cowait ) != null ) { if ( U . compareAndSwapObject ( h , WCOWAIT , c , c . cowait ) && ( w = c . thread ) != null ) U . unpark ( w ) ; } } if ( whead == h ) { if ( ( np = node . prev ) != p ) { if ( np != null ) ( p = np ) . next = node ; } else if ( ( ps = p . status ) == _NUM ) U . compareAndSwapInt ( p , WSTATUS , _NUM , WAITING ) ; else if ( ps == CANCELLED ) { if ( ( pp = p . prev ) != null ) { node . prev = pp ; pp . next = node ; } } else { long time ; if ( deadline == _NUM ) time = _NUM ; else if ( ( time = deadline - System . nanoTime ( ) ) <= _NUM ) return cancelWaiter ( node , node , _BOOL ) ; Thread wt = Thread . currentThread ( ) ; U . putObject ( wt , PARKBLOCKER , this ) ; node . thread = wt ; if ( p . status < _NUM && ( p != h || ( state & ABITS ) != _NUM ) && whead == h && node . prev == p ) U . park ( _BOOL , time ) ; node . thread = null ; U . putObject ( wt , PARKBLOCKER , null ) ; if ( interruptible && Thread . interrupted ( ) ) return cancelWaiter ( node , node , _BOOL ) ; } } } }
48100	@ Override public boolean isInitial ( ) { return init ; }
8127	public static String denormalize ( final CharSequence self ) { if ( lineSeparator == null ) { final StringWriter sw = new StringWriter ( _NUM ) ; try { final BufferedWriter bw = new BufferedWriter ( sw ) ; bw . newLine ( ) ; bw . flush ( ) ; lineSeparator = sw . toString ( ) ; } catch ( IOException ioe ) { lineSeparator = _STR ; } } final int len = self . length ( ) ; if ( len < _NUM ) { return self . toString ( ) ; } final StringBuilder sb = new StringBuilder ( ( _NUM * len ) / _NUM ) ; int i = _NUM ; CharSequence cs = ( self instanceof GString ) ? self . toString ( ) : self ; while ( i < len ) { final char ch = cs . charAt ( i ++ ) ; switch ( ch ) { case _STR : sb . append ( lineSeparator ) ; if ( ( i < len ) && ( cs . charAt ( i ) == _STR ) ) { ++ i ; } break ; case _STR : sb . append ( lineSeparator ) ; break ; default : sb . append ( ch ) ; break ; } } return sb . toString ( ) ; }
30547	public static void performSaveAs ( String schemaPrefixFileName , String selFilePath , ContainerConfig containerConfig ) { try { File fileWithDefaultConfiguration = createContainerSchemaFile ( schemaPrefixFileName , selFilePath ) ; updateFile ( containerConfig , fileWithDefaultConfiguration . getPath ( ) , schemaPrefixFileName ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
48427	public boolean isAborted ( ) { return isAborted . get ( ) ; }
81603	public void append ( int key , E value ) { if ( mSize != _NUM && key <= mKeys [ mSize - _NUM ] ) { put ( key , value ) ; return ; } if ( mGarbage && mSize >= mKeys . length ) { gc ( ) ; } int pos = mSize ; if ( pos >= mKeys . length ) { int n = idealIntArraySize ( pos + _NUM ) ; int [ ] nkeys = new int [ n ] ; Object [ ] nvalues = new Object [ n ] ; System . arraycopy ( mKeys , _NUM , nkeys , _NUM , mKeys . length ) ; System . arraycopy ( mValues , _NUM , nvalues , _NUM , mValues . length ) ; mKeys = nkeys ; mValues = nvalues ; } mKeys [ pos ] = key ; mValues [ pos ] = value ; mSize = pos + _NUM ; }
59055	public void testSkip ( ) throws IOException { byte [ ] data = new byte [ _NUM * _NUM ] ; byte [ ] gzipped = GZIPOutputStreamTest . gzip ( data ) ; GZIPInputStream in = new GZIPInputStream ( new ByteArrayInputStream ( gzipped ) ) ; long totalSkipped = _NUM ; long count ; do { count = in . skip ( Long . MAX_VALUE ) ; totalSkipped += count ; } while ( count > _NUM ) ; assertEquals ( data . length , totalSkipped ) ; in . close ( ) ; }
19416	private Support_TestWebData ( String path , String type ) { File file = new File ( path ) ; testLength = file . length ( ) ; testLastModified = file . lastModified ( ) ; testName = file . getName ( ) ; testType = type ; testDir = file . isDirectory ( ) ; ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; FileInputStream in = null ; try { in = new FileInputStream ( file ) ; while ( in . available ( ) > _NUM ) { out . write ( in . read ( ) ) ; } in . close ( ) ; out . flush ( ) ; test0Data = out . toByteArray ( ) ; out . close ( ) ; test0DataAvailable = _BOOL ; return ; } catch ( Exception e ) { e . printStackTrace ( ) ; } finally { try { if ( in != null ) { in . close ( ) ; } if ( out != null ) { out . close ( ) ; } } catch ( IOException e ) { } } }
32850	public static void print ( boolean x ) { out . print ( x ) ; out . flush ( ) ; }
31893	public IpcSharedMemorySpace ( String tokFileName , int writerPid , int readerPid , int size , boolean reader , IgniteLogger parent ) throws IgniteCheckedException { assert size > _NUM : _STR ; log = parent . getLogger ( IpcSharedMemorySpace . class ) ; opSize = size ; shmemPtr = IpcSharedMemoryUtils . allocateSystemResources ( tokFileName , size , DEBUG && log . isDebugEnabled ( ) ) ; shmemId = IpcSharedMemoryUtils . sharedMemoryId ( shmemPtr ) ; semId = IpcSharedMemoryUtils . semaphoreId ( shmemPtr ) ; isReader = reader ; this . tokFileName = tokFileName ; this . readerPid = readerPid ; this . writerPid = writerPid ; if ( DEBUG && log . isDebugEnabled ( ) ) log . debug ( _STR + this ) ; }
70652	@ Override public void close ( ) { try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
71282	public Version addQualifier ( String qualifier ) { List < String > newQualifiers = new ArrayList < > ( this . qualifiers ) ; newQualifiers . add ( qualifier ) ; return new Version ( major , minor , patch , newQualifiers . toArray ( new String [ newQualifiers . size ( ) ] ) ) ; }
62984	public int loadSigned16 ( int addr ) { return loadSigned16 ( addr , AccessSource . CODE ) ; }
49511	public static String arrayToHexString ( byte [ ] array ) { return arrayToHexString ( array , _NUM , array . length ) ; }
67956	public static void unregisterBaggageHandler ( BaggageHandler handler ) { handlers . remove ( handler ) ; }
7936	public DefaultHeatMapDataset ( int xSamples , int ySamples , double minX , double maxX , double minY , double maxY ) { if ( xSamples < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } if ( ySamples < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } if ( Double . isInfinite ( minX ) || Double . isNaN ( minX ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( Double . isInfinite ( maxX ) || Double . isNaN ( maxX ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( Double . isInfinite ( minY ) || Double . isNaN ( minY ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( Double . isInfinite ( maxY ) || Double . isNaN ( maxY ) ) { throw new IllegalArgumentException ( _STR ) ; } this . xSamples = xSamples ; this . ySamples = ySamples ; this . minX = minX ; this . maxX = maxX ; this . minY = minY ; this . maxY = maxY ; this . zValues = new double [ xSamples ] [ ] ; for ( int x = _NUM ; x < xSamples ; x ++ ) { this . zValues [ x ] = new double [ ySamples ] ; } }
7207	public static void assertEqualsAnyOrder ( EventBean [ ] [ ] expected , EventBean [ ] [ ] actual ) { if ( compareArraySize ( expected , actual ) ) { return ; } int numMatches = _NUM ; boolean [ ] foundReceived = new boolean [ actual . length ] ; for ( EventBean [ ] expectedObject : expected ) { boolean found = _BOOL ; for ( int i = _NUM ; i < actual . length ; i ++ ) { if ( foundReceived [ i ] ) { continue ; } boolean match = compareEqualsExactOrder ( actual [ i ] , expectedObject ) ; if ( match ) { found = _BOOL ; numMatches ++ ; foundReceived [ i ] = _BOOL ; break ; } } if ( ! found ) { log . error ( _STR + Arrays . toString ( expectedObject ) ) ; log . error ( _STR + Arrays . toString ( actual ) ) ; } ScopeTestHelper . assertTrue ( found ) ; } ScopeTestHelper . assertEquals ( numMatches , expected . length ) ; }
44318	private void collectText ( ) { if ( textNodeCount > _NUM ) { firstTextNode . setText ( textBuffer . toString ( ) ) ; } textNodeCount = _NUM ; }
86192	@ SuppressWarnings ( { _STR , _STR } ) public static < T extends Annotation > T unproxy ( T annotation ) { Function unproxyFunction = getUnproxyFunction ( annotation . annotationType ( ) ) ; return ( T ) unproxyFunction . apply ( annotation ) ; }
55115	public static List < Node > parseExpression ( Context context , HashSet < String > configNamespaces , String text ) { return parseExpression ( context , configNamespaces , text , _NUM , _BOOL ) ; }
29956	public void addTickMarkSection ( final Section SECTION ) { if ( null == SECTION ) return ; tickMarkSections . add ( SECTION ) ; Collections . sort ( tickMarkSections , new SectionComparator ( ) ) ; fireUpdateEvent ( REDRAW_EVENT ) ; }
52961	protected static double calcQ_i ( double f , double lambda ) { return lambda * Math . exp ( - lambda * f ) ; }
5921	void flush ( ) { printStream . flush ( ) ; }
3481	public CharBuffer delete ( int start , int end ) { int length = length ( ) ; if ( start < _NUM || end < start || length < start ) throw new StringIndexOutOfBoundsException ( ) ; end = Math . min ( length , end ) ; int tail = length - end ; char [ ] buffer = buffer ( ) ; for ( int i = _NUM ; i < tail ; i ++ ) { buffer [ start + i ] = buffer [ end + i ] ; } length ( length - ( end - start ) ) ; return this ; }
31599	public void addPlotter ( final Plotter plotter ) { plotters . add ( plotter ) ; }
51254	Node < K , V > findNear ( K kkey , int rel ) { Comparable < ? super K > key = comparable ( kkey ) ; for ( ; ; ) { Node < K , V > b = findPredecessor ( key ) ; Node < K , V > n = b . next ; for ( ; ; ) { if ( n == null ) return ( ( rel & LT ) == _NUM || b . isBaseHeader ( ) ) ? null : b ; Node < K , V > f = n . next ; if ( n != b . next ) break ; Object v = n . value ; if ( v == null ) { n . helpDelete ( b , f ) ; break ; } if ( v == n || b . value == null ) break ; int c = key . compareTo ( n . key ) ; if ( ( c == _NUM && ( rel & EQ ) != _NUM ) || ( c < _NUM && ( rel & LT ) == _NUM ) ) return n ; if ( c <= _NUM && ( rel & LT ) != _NUM ) return b . isBaseHeader ( ) ? null : b ; b = n ; n = f ; } } }
55316	public void addListener ( SpeedrunsLiveListener listener ) { listeners . add ( listener ) ; }
75260	public void writeExif ( Bitmap bmap , OutputStream exifOutStream ) throws IOException { if ( bmap == null || exifOutStream == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = getExifWriterStream ( exifOutStream ) ; bmap . compress ( Bitmap . CompressFormat . JPEG , _NUM , s ) ; s . flush ( ) ; }
60880	public boolean find ( int start ) { if ( start < _NUM || start > input . length ( ) ) { throw new IndexOutOfBoundsException ( _STR + start + _STR + input . length ( ) ) ; } synchronized ( this ) { matchFound = findImpl ( address , input , start , matchOffsets ) ; } return matchFound ; }
54795	public int action ( String fault , String action ) { Integer current = get ( fault ) ; if ( current == null ) throw new IllegalArgumentException ( fault ) ; boolean no = action . startsWith ( _STR ) ; if ( no ) action = action . substring ( _NUM ) ; Integer bit = getAction ( action ) ; if ( bit == null ) throw new IllegalArgumentException ( action ) ; int old = current . intValue ( ) ; int mask = bit . intValue ( ) ; int n = ( old & ( ~ mask ) ) ; n = ( no ) ? n : ( n | mask ) ; put ( fault , new Integer ( n ) ) ; return n ; }
56248	public static boolean containsWhitespace ( CharSequence str ) { if ( ! hasLength ( str ) ) { return _BOOL ; } int strLen = str . length ( ) ; for ( int i = _NUM ; i < strLen ; i ++ ) { if ( Character . isWhitespace ( str . charAt ( i ) ) ) { return _BOOL ; } } return _BOOL ; }
57875	public boolean hasUnsupportedCriticalExtension ( ) { Set extns = getCriticalExtensionOIDs ( ) ; if ( extns == null ) { return _BOOL ; } extns . remove ( RFC3280CertPathUtilities . ISSUING_DISTRIBUTION_POINT ) ; extns . remove ( RFC3280CertPathUtilities . DELTA_CRL_INDICATOR ) ; return ! extns . isEmpty ( ) ; }
39637	public static < T > T decodeFromBase64 ( Coder < T > coder , String encodedValue ) throws CoderException { return decodeFromSafeStream ( coder , new ByteArrayInputStream ( Base64 . decodeBase64 ( encodedValue ) ) , Coder . Context . OUTER ) ; }
15247	public void validate ( Set setData ) throws ValidationException { for ( Iterator iter = setData . iterator ( ) ; iter . hasNext ( ) ; ) { performValidation ( ( String ) iter . next ( ) ) ; } }
44942	public String add ( Object ... values ) { double result = _NUM ; for ( int i = _NUM ; i < values . length ; i ++ ) { result += FunctionHandler . getDouble ( values [ i ] ) ; } return Double . toString ( result ) ; }
75869	public List < String > listMyDBs ( String owner , boolean restricted ) { Connection conn = null ; try { conn = getConnection ( ) ; return listMyDBs ( conn , owner , restricted ) ; } catch ( Exception ex ) { logger . log ( Level . SEVERE , _STR , ex ) ; } finally { DBUtils . close ( conn ) ; } return null ; }
68800	protected void doFunction ( float [ ] inputs , int inputOffset , float [ ] outputs , int outputOffset ) { float input = inputs [ inputOffset ] ; for ( int i = _NUM ; i < getNumOutputs ( ) ; i ++ ) { outputs [ i + outputOffset ] = getC0 ( i ) + ( float ) ( Math . pow ( input , getN ( ) ) * ( getC1 ( i ) - getC0 ( i ) ) ) ; } }
20351	public void put ( String key , long value ) { if ( key != null ) { urlParams . put ( key , String . valueOf ( value ) ) ; } }
81141	public int compare ( Object o1 , Object o2 ) { return comparator . compare ( o1 , o2 ) ; }
38302	public void addCheckBoxActionListener ( ActionListener al ) { m_enableDistributedExperiment . addActionListener ( al ) ; }
28582	private Rect calcBounds ( int index , Paint paint ) { Rect bounds = new Rect ( ) ; CharSequence title = getTitle ( index ) ; bounds . right = ( int ) paint . measureText ( title , _NUM , title . length ( ) ) ; bounds . bottom = ( int ) ( paint . descent ( ) - paint . ascent ( ) ) ; return bounds ; }
85291	GF256Poly addOrSubtract ( GF256Poly other ) { if ( ! field . equals ( other . field ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( isZero ( ) ) { return other ; } if ( other . isZero ( ) ) { return this ; } int [ ] smallerCoefficients = this . coefficients ; int [ ] largerCoefficients = other . coefficients ; if ( smallerCoefficients . length > largerCoefficients . length ) { int [ ] temp = smallerCoefficients ; smallerCoefficients = largerCoefficients ; largerCoefficients = temp ; } int [ ] sumDiff = new int [ largerCoefficients . length ] ; int lengthDiff = largerCoefficients . length - smallerCoefficients . length ; System . arraycopy ( largerCoefficients , _NUM , sumDiff , _NUM , lengthDiff ) ; for ( int i = lengthDiff ; i < largerCoefficients . length ; i ++ ) { sumDiff [ i ] = GF256 . addOrSubtract ( smallerCoefficients [ i - lengthDiff ] , largerCoefficients [ i ] ) ; } return new GF256Poly ( field , sumDiff ) ; }
67747	@ Override public String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; sb . append ( type ) ; sb . append ( _STR ) ; sb . append ( subType ) ; for ( String name : attributes . keySet ( ) ) { if ( inferredCharset && ATTR_CHARSET . equals ( name ) ) { continue ; } sb . append ( _STR ) ; sb . append ( name ) ; sb . append ( _STR ) ; String value = attributes . get ( name ) ; Matcher tokenMatcher = TOKEN_PATTERN . matcher ( value ) ; if ( tokenMatcher . matches ( ) ) { sb . append ( value ) ; } else { sb . append ( _STR + value + _STR ) ; } } return sb . toString ( ) ; }
54391	public static long firstFieldOffset ( Class clazz ) { long minSize = roundUpTo8 ( headerSize ( clazz ) ) ; while ( clazz != Object . class ) { for ( Field f : clazz . getDeclaredFields ( ) ) { if ( ( f . getModifiers ( ) & Modifier . STATIC ) == _NUM ) { long offset = unsafe . objectFieldOffset ( f ) ; if ( offset < minSize ) { minSize = offset ; } } } clazz = clazz . getSuperclass ( ) ; } return minSize ; }
69669	private void fitImageToView ( ) { Drawable drawable = getDrawable ( ) ; if ( drawable == null || drawable . getIntrinsicWidth ( ) == _NUM || drawable . getIntrinsicHeight ( ) == _NUM ) { return ; } if ( matrix == null || prevMatrix == null ) { return ; } int drawableWidth = drawable . getIntrinsicWidth ( ) ; int drawableHeight = drawable . getIntrinsicHeight ( ) ; float scaleX = ( float ) viewWidth / drawableWidth ; float scaleY = ( float ) viewHeight / drawableHeight ; switch ( mScaleType ) { case CENTER : scaleX = scaleY = _NUM ; break ; case CENTER_CROP : scaleX = scaleY = Math . max ( scaleX , scaleY ) ; break ; case CENTER_INSIDE : scaleX = scaleY = Math . min ( _NUM , Math . min ( scaleX , scaleY ) ) ; case FIT_CENTER : scaleX = scaleY = Math . min ( scaleX , scaleY ) ; break ; case FIT_XY : break ; default : throw new UnsupportedOperationException ( _STR ) ; } float redundantXSpace = viewWidth - ( scaleX * drawableWidth ) ; float redundantYSpace = viewHeight - ( scaleY * drawableHeight ) ; matchViewWidth = viewWidth - redundantXSpace ; matchViewHeight = viewHeight - redundantYSpace ; if ( ! isZoomed ( ) && ! imageRenderedAtLeastOnce ) { matrix . setScale ( scaleX , scaleY ) ; matrix . postTranslate ( redundantXSpace / _NUM , redundantYSpace / _NUM ) ; normalizedScale = _NUM ; } else { if ( prevMatchViewWidth == _NUM || prevMatchViewHeight == _NUM ) { savePreviousImageValues ( ) ; } prevMatrix . getValues ( m ) ; m [ Matrix . MSCALE_X ] = matchViewWidth / drawableWidth * normalizedScale ; m [ Matrix . MSCALE_Y ] = matchViewHeight / drawableHeight * normalizedScale ; float transX = m [ Matrix . MTRANS_X ] ; float transY = m [ Matrix . MTRANS_Y ] ; float prevActualWidth = prevMatchViewWidth * normalizedScale ; float actualWidth = getImageWidth ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_X , transX , prevActualWidth , actualWidth , prevViewWidth , viewWidth , drawableWidth ) ; float prevActualHeight = prevMatchViewHeight * normalizedScale ; float actualHeight = getImageHeight ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_Y , transY , prevActualHeight , actualHeight , prevViewHeight , viewHeight , drawableHeight ) ; matrix . setValues ( m ) ; } fixTrans ( ) ; setImageMatrix ( matrix ) ; }
42611	public static void w ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_WARNING ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . w ( tag , msg ) ; }
17762	private int processPollFds ( ) throws IOException { if ( pollFds . get ( _NUM ) . revents == POLLIN ) { byte [ ] buffer = new byte [ _NUM ] ; while ( IoBridge . read ( wakeupIn , buffer , _NUM , _NUM ) > _NUM ) { } } int readyKeyCount = _NUM ; for ( int i = _NUM ; i < pollFds . size ( ) ; ++ i ) { StructPollfd pollFd = pollFds . get ( i ) ; if ( pollFd . revents == _NUM ) { continue ; } if ( pollFd . fd == null ) { break ; } SelectionKeyImpl key = ( SelectionKeyImpl ) pollFd . userData ; pollFd . fd = null ; pollFd . userData = null ; int ops = key . interestOpsNoCheck ( ) ; int selectedOps = _NUM ; if ( ( pollFd . revents & POLLHUP ) != _NUM ) { selectedOps |= ops ; } if ( ( pollFd . revents & POLLIN ) != _NUM ) { selectedOps |= ops & ( OP_ACCEPT | OP_READ ) ; } if ( ( pollFd . revents & POLLOUT ) != _NUM ) { if ( key . isConnected ( ) ) { selectedOps |= ops & OP_WRITE ; } else { selectedOps |= ops & OP_CONNECT ; } } if ( selectedOps != _NUM ) { boolean wasSelected = mutableSelectedKeys . contains ( key ) ; if ( wasSelected && key . readyOps ( ) != selectedOps ) { key . setReadyOps ( key . readyOps ( ) | selectedOps ) ; ++ readyKeyCount ; } else if ( ! wasSelected ) { key . setReadyOps ( selectedOps ) ; mutableSelectedKeys . add ( key ) ; ++ readyKeyCount ; } } } return readyKeyCount ; }
15669	public final V extractFirst ( ) { if ( size ( ) > _NUM ) { if ( GWT . isScript ( ) ) { V ret = jsArray . get ( _NUM ) ; jsArray . remove ( _NUM ) ; return ret ; } else { return javaArray . remove ( _NUM ) ; } } return null ; }
7401	@ Override public void actionPerformed ( ActionEvent event ) { String command = event . getActionCommand ( ) ; if ( command . equals ( _STR ) ) { attemptLabelFontSelection ( ) ; } else if ( command . equals ( _STR ) ) { attemptModifyLabelPaint ( ) ; } else if ( command . equals ( _STR ) ) { attemptTickLabelFontSelection ( ) ; } }
19235	@ AndroidOnly ( _STR ) public void test_unwrap_ByteBuffer$ByteBuffer_04 ( ) { String host = _STR ; int port = _NUM ; ByteBuffer bbs = ByteBuffer . allocate ( _NUM ) ; ByteBuffer [ ] bbd = { ByteBuffer . allocate ( _NUM ) , ByteBuffer . allocate ( _NUM ) , ByteBuffer . allocate ( _NUM ) } ; SSLEngine sse = getEngine ( host , port ) ; try { sse . unwrap ( bbs , bbd ) ; fail ( _STR ) ; } catch ( IllegalStateException iobe ) { } catch ( Exception e ) { fail ( e + _STR ) ; } }
14402	public static void upgradeServerInstance ( SSOToken ssoToken , String instanceName , String instanceId , Map < String , String > upgradedValues ) throws SMSException , SSOException , ConfigurationException , IOException { ServiceConfig sc = getServerConfig ( ssoToken , instanceName ) ; if ( sc != null ) { Map map = sc . getAttributes ( ) ; map . remove ( ATTR_PARENT_SITE_ID ) ; Set newSet = getPropertiesSet ( upgradedValues ) ; map . put ( ATTR_SERVER_CONFIG , newSet ) ; sc . setAttributes ( map ) ; } else { throw new ConfigurationException ( _STR + _STR ) ; } }
15493	public static < T > T instance ( Class < T > clazz ) { try { return clazz . newInstance ( ) ; } catch ( InstantiationException | IllegalAccessException e ) { throw new IllegalStateException ( e ) ; } }
24598	private void pop ( final String desc ) { char c = desc . charAt ( _NUM ) ; if ( c == _STR ) { pop ( ( Type . getArgumentsAndReturnSizes ( desc ) > > _NUM ) - _NUM ) ; } else if ( c == _STR || c == _STR ) { pop ( _NUM ) ; } else { pop ( _NUM ) ; } }
23288	public GenericSipMsrpSession createMsrpSession ( ContactId contact , String featureTag , String [ ] acceptTypes , String [ ] acceptWrappedTypes ) { if ( sLogger . isActivated ( ) ) { sLogger . info ( _STR + contact ) ; } return new OriginatingSipMsrpSession ( this , contact , featureTag , mRcsSettings , System . currentTimeMillis ( ) , mContactManager , acceptTypes , acceptWrappedTypes ) ; }
77712	public ForumPostConfig create ( ForumPostConfig config ) { config . addCredentials ( this ) ; String xml = POST ( this . url + _STR , config . toXML ( ) ) ; Element root = parse ( xml ) ; if ( root == null ) { return null ; } try { ForumPostConfig post = new ForumPostConfig ( ) ; post . parseXML ( root ) ; return post ; } catch ( Exception exception ) { this . exception = SDKException . parseFailure ( exception ) ; throw this . exception ; } }
84705	protected void drawMark ( Graphics2D g2 , float x , float y , Color color ) { Rectangle2D bounds = mark . getBounds2D ( ) ; float w = ( float ) bounds . getWidth ( ) ; float h = ( float ) bounds . getHeight ( ) ; x = x - ( w / _NUM ) ; y = y - ( h / _NUM ) ; g2 . translate ( x , y ) ; if ( color == null ) { if ( markFillPaint != null ) { g2 . setPaint ( markFillPaint ) ; g2 . fill ( mark ) ; } } else { g2 . setPaint ( color ) ; g2 . fill ( mark ) ; } g2 . setPaint ( markPaint ) ; g2 . setStroke ( markStroke ) ; g2 . draw ( mark ) ; g2 . translate ( - x , - y ) ; Rectangle2D rect = new Rectangle2D . Float ( x , y , w , h ) ; markBounds . add ( rect ) ; }
11471	public void componentResized ( ComponentEvent e ) { if ( logger . isLoggable ( Level . FINE ) ) { logger . fine ( _STR + getWidth ( ) + _STR + getHeight ( ) ) ; } projection . setWidth ( getWidth ( ) ) ; projection . setHeight ( getHeight ( ) ) ; fireProjectionChanged ( ) ; }
58038	public String toString ( ) { StringBuffer buf = new StringBuffer ( ) ; for ( StepPattern pat = this ; pat != null ; pat = pat . m_relativePathPattern ) { if ( pat != this ) buf . append ( _STR ) ; buf . append ( Axis . getNames ( pat . m_axis ) ) ; buf . append ( _STR ) ; if ( _NUM == pat . m_whatToShow ) { buf . append ( _STR ) ; } else if ( DTMFilter . SHOW_BYFUNCTION == pat . m_whatToShow ) { buf . append ( _STR ) ; } else if ( DTMFilter . SHOW_ALL == pat . m_whatToShow ) { buf . append ( _STR ) ; } else if ( DTMFilter . SHOW_TEXT == pat . m_whatToShow ) { buf . append ( _STR ) ; } else if ( DTMFilter . SHOW_PROCESSING_INSTRUCTION == pat . m_whatToShow ) { buf . append ( _STR ) ; if ( null != pat . m_name ) { buf . append ( pat . m_name ) ; } buf . append ( _STR ) ; } else if ( DTMFilter . SHOW_COMMENT == pat . m_whatToShow ) { buf . append ( _STR ) ; } else if ( null != pat . m_name ) { if ( DTMFilter . SHOW_ATTRIBUTE == pat . m_whatToShow ) { buf . append ( _STR ) ; } if ( null != pat . m_namespace ) { buf . append ( _STR ) ; buf . append ( pat . m_namespace ) ; buf . append ( _STR ) ; } buf . append ( pat . m_name ) ; } else if ( DTMFilter . SHOW_ATTRIBUTE == pat . m_whatToShow ) { buf . append ( _STR ) ; } else if ( ( DTMFilter . SHOW_DOCUMENT | DTMFilter . SHOW_DOCUMENT_FRAGMENT ) == pat . m_whatToShow ) { buf . append ( _STR ) ; } else { buf . append ( _STR + Integer . toHexString ( pat . m_whatToShow ) ) ; } if ( null != pat . m_predicates ) { for ( int i = _NUM ; i < pat . m_predicates . length ; i ++ ) { buf . append ( _STR ) ; buf . append ( pat . m_predicates [ i ] ) ; buf . append ( _STR ) ; } } } return buf . toString ( ) ; }
85653	public static String byteArrayToHexString ( byte [ ] block , int offset , int length ) { StringBuffer buf = new StringBuffer ( ) ; int len = block . length ; length = length + offset ; if ( ( len < length ) ) { length = len ; } for ( int i = _NUM + offset ; i < length ; i ++ ) { byte2hex ( block [ i ] , buf ) ; if ( i < length - _NUM ) { buf . append ( _STR ) ; } } return buf . toString ( ) ; }
24964	private void changeValue ( AbstractStorageLabel < Object > label , Object newValue ) { if ( ! Objects . equals ( label . getValue ( ) , newValue ) ) { synchronized ( labelEditListeners ) { for ( LabelEditListener listener : labelEditListeners ) { listener . preLabelValueChange ( label ) ; } } label . setValue ( newValue ) ; synchronized ( labelEditListeners ) { for ( LabelEditListener listener : labelEditListeners ) { listener . postLabelValueChange ( label ) ; } } } }
55041	public void write ( byte [ ] b , int offset , int length ) throws IOException { if ( entry . getMethod ( ) == DEFLATED ) { if ( length > _NUM ) { if ( ! def . finished ( ) ) { def . setInput ( b , offset , length ) ; while ( ! def . needsInput ( ) ) { deflate ( ) ; } } } } else { writeOut ( b , offset , length ) ; written += length ; } crc . update ( b , offset , length ) ; }
40851	public void updatePoint ( float x , float y ) { if ( Math . sqrt ( x * x + y * y ) > _NUM ) if ( listener != null ) { listener . onAngleChangedListener ( getAngle ( x , - y ) ) ; } }
47123	public final void quietlyJoin ( ) { doJoin ( ) ; }
51661	@ Override public int clampViewPositionHorizontal ( View child , int left , int dx ) { if ( mDraggedView == null ) { return _NUM ; } final int leftBound = _NUM - MAX_OVERFLOW - ( mColumnSizeSide / _NUM ) ; final int rightBound = getWidth ( ) + MAX_OVERFLOW + ( mColumnSizeSide / _NUM ) ; return Math . min ( Math . max ( left , leftBound ) , rightBound ) ; }
62215	HttpRequestWrapper ( HttpServletRequest request ) { super ( request ) ; }
38477	private int convertToPanelX ( double xval ) { double temp = ( xval - m_minX ) / m_rangeX ; temp = temp * m_panelWidth ; return ( int ) temp ; }
68905	public void forward ( HttpServerRequest request ) { forward ( request , null ) ; }
31771	private Set < String > primaryKeys ( PreparedStatement stmt , String owner , String tbl ) throws SQLException { Set < String > pkCols = new HashSet < > ( ) ; stmt . setString ( _NUM , owner ) ; stmt . setString ( _NUM , tbl ) ; try ( ResultSet pkRs = stmt . executeQuery ( ) ) { while ( pkRs . next ( ) ) pkCols . add ( pkRs . getString ( _NUM ) ) ; } return pkCols ; }
62462	public static long readUINT32 ( InputStream stream ) throws IOException { long result = _NUM ; for ( int i = _NUM ; i <= _NUM ; i += _NUM ) { result |= ( long ) stream . read ( ) << i ; } return result ; }
35343	private Token toPrefixToken ( ILeafNode leaf ) { Lexer lexer = new InternalN4JSLexer ( ) ; String text = leaf . getText ( ) ; String prefix = text . substring ( _NUM , endOffset - leaf . getTotalOffset ( ) ) ; ANTLRStringStream stream = new ANTLRStringStream ( prefix ) ; lexer . setCharStream ( stream ) ; Token nextToken = lexer . nextToken ( ) ; return new CommonToken ( nextToken . getType ( ) , nextToken . getText ( ) ) ; }
35268	protected void add ( CSVRecord record ) { records . add ( Objects . requireNonNull ( record ) ) ; }
20500	private void scheduledEnqueueSend ( ) { schedulerQueueSize . decrementAndGet ( ) ; scheduled . set ( _BOOL ) ; enqueueSendWithErrorLogging ( ) ; }
60790	private E awaitMatch ( Node s , Node pred , E e , boolean timed , long nanos ) { final long deadline = timed ? System . nanoTime ( ) + nanos : _NUM ; Thread w = Thread . currentThread ( ) ; int spins = - _NUM ; ThreadLocalRandom randomYields = null ; for ( ; ; ) { Object item = s . item ; if ( item != e ) { s . forgetContents ( ) ; return LinkedTransferQueue . < E > cast ( item ) ; } if ( ( w . isInterrupted ( ) || ( timed && nanos <= _NUM ) ) && s . casItem ( e , s ) ) { unsplice ( pred , s ) ; return e ; } if ( spins < _NUM ) { if ( ( spins = spinsFor ( pred , s . isData ) ) > _NUM ) randomYields = ThreadLocalRandom . current ( ) ; } else if ( spins > _NUM ) { -- spins ; if ( randomYields . nextInt ( CHAINED_SPINS ) == _NUM ) Thread . yield ( ) ; } else if ( s . waiter == null ) { s . waiter = w ; } else if ( timed ) { nanos = deadline - System . nanoTime ( ) ; if ( nanos > _NUM ) LockSupport . parkNanos ( this , nanos ) ; } else { LockSupport . park ( this ) ; } } }
8184	public static String join ( char [ ] self , String separator ) { StringBuilder buffer = new StringBuilder ( ) ; boolean first = _BOOL ; if ( separator == null ) separator = _STR ; for ( char next : self ) { if ( first ) { first = _BOOL ; } else { buffer . append ( separator ) ; } buffer . append ( next ) ; } return buffer . toString ( ) ; }
4053	private < T > BindingAmp < T > findObjectBinding ( Key < T > key ) { Objects . requireNonNull ( key ) ; if ( key . qualifiers ( ) . length != _NUM ) { throw new IllegalArgumentException ( ) ; } return ( BindingAmp ) findBinding ( Key . of ( Object . class , key . qualifiers ( ) [ _NUM ] ) ) ; }
40031	private void initComputeProgram ( ) { glUseProgram ( computeProgram ) ; IntBuffer workGroupSize = BufferUtils . createIntBuffer ( _NUM ) ; glGetProgramiv ( computeProgram , GL_COMPUTE_WORK_GROUP_SIZE , workGroupSize ) ; workGroupSizeX = workGroupSize . get ( _NUM ) ; workGroupSizeY = workGroupSize . get ( _NUM ) ; timeUniform = glGetUniformLocation ( computeProgram , _STR ) ; blendFactorUniform = glGetUniformLocation ( computeProgram , _STR ) ; lightRadiusUniform = glGetUniformLocation ( computeProgram , _STR ) ; IntBuffer props = BufferUtils . createIntBuffer ( _NUM ) ; IntBuffer params = BufferUtils . createIntBuffer ( _NUM ) ; props . put ( _NUM , GL_BUFFER_BINDING ) ; int objectsResourceIndex = glGetProgramResourceIndex ( computeProgram , GL_SHADER_STORAGE_BLOCK , _STR ) ; glGetProgramResourceiv ( computeProgram , GL_SHADER_STORAGE_BLOCK , objectsResourceIndex , props , null , params ) ; objectsSsboBinding = params . get ( _NUM ) ; int trianglesResourceIndex = glGetProgramResourceIndex ( computeProgram , GL_SHADER_STORAGE_BLOCK , _STR ) ; glGetProgramResourceiv ( computeProgram , GL_SHADER_STORAGE_BLOCK , trianglesResourceIndex , props , null , params ) ; trianglesSsboBinding = params . get ( _NUM ) ; int loc = glGetUniformLocation ( computeProgram , _STR ) ; glGetUniformiv ( computeProgram , loc , params ) ; framebufferImageBinding = params . get ( _NUM ) ; loc = glGetUniformLocation ( computeProgram , _STR ) ; glGetUniformiv ( computeProgram , loc , params ) ; worldPositionImageBinding = params . get ( _NUM ) ; loc = glGetUniformLocation ( computeProgram , _STR ) ; glGetUniformiv ( computeProgram , loc , params ) ; worldNormalImageBinding = params . get ( _NUM ) ; glUseProgram ( _NUM ) ; }
24438	public boolean ifTaskCompletedSuccessOrFailureFromResponse ( ResponseOnSingeRequest myResponse ) { boolean isCompleted = _BOOL ; try { if ( myResponse == null || myResponse . isFailObtainResponse ( ) ) { return isCompleted ; } String responseBody = myResponse . getResponseBody ( ) ; if ( responseBody . matches ( successRegex ) || responseBody . matches ( failureRegex ) ) { isCompleted = _BOOL ; } } catch ( Exception t ) { logger . error ( _STR + t ) ; } return isCompleted ; }
37670	public void centerHorizontal ( ArrayList < Integer > nodes ) { if ( m_bNeedsUndoAction ) { addUndoAction ( new centerHorizontalAction ( nodes ) ) ; } int nMinY = - _NUM ; int nMaxY = - _NUM ; for ( int iNode = _NUM ; iNode < nodes . size ( ) ; iNode ++ ) { int nY = getPositionY ( nodes . get ( iNode ) ) ; if ( nY < nMinY || iNode == _NUM ) { nMinY = nY ; } if ( nY > nMaxY || iNode == _NUM ) { nMaxY = nY ; } } for ( int iNode = _NUM ; iNode < nodes . size ( ) ; iNode ++ ) { int nNode = nodes . get ( iNode ) ; m_nPositionY . set ( nNode , ( nMinY + nMaxY ) / _NUM ) ; } }
67260	protected void appendText ( final String text ) { if ( text != null ) { textBody . append ( text ) ; } }
30037	public void onRestoreInstanceState ( Bundle savedInstanceState ) { mSelectedPositions . addAll ( savedInstanceState . getIntegerArrayList ( TAG ) ) ; Log . d ( TAG , _STR + mSelectedPositions ) ; }
7863	public Hour ( int hour , Day day ) { ParamChecks . nullNotPermitted ( day , _STR ) ; this . hour = ( byte ) hour ; this . day = day ; peg ( Calendar . getInstance ( ) ) ; }
38551	public void undo ( ) { if ( -- m_tempUndoIndex < _NUM ) { m_tempUndoIndex = m_tempUndoFiles . length - _NUM ; } if ( m_tempUndoFiles [ m_tempUndoIndex ] != null ) { AbstractFileLoader loader = ConverterUtils . getLoaderForFile ( m_tempUndoFiles [ m_tempUndoIndex ] ) ; try { loader . setFile ( m_tempUndoFiles [ m_tempUndoIndex ] ) ; setInstancesFromFile ( loader ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; m_Log . logMessage ( e . toString ( ) ) ; JOptionPane . showMessageDialog ( PreprocessPanel . this , _STR + e . toString ( ) , _STR , JOptionPane . ERROR_MESSAGE ) ; } m_tempUndoFiles [ m_tempUndoIndex ] = null ; } int temp = m_tempUndoIndex - _NUM ; if ( temp < _NUM ) { temp = m_tempUndoFiles . length - _NUM ; } m_UndoBut . setEnabled ( m_tempUndoFiles [ temp ] != null ) ; }
54565	public static boolean isConnectedUsingWifi ( ) { Context context = FeApp . getAppContext ( ) ; ConnectivityManager cm = ( ConnectivityManager ) context . getSystemService ( Context . CONNECTIVITY_SERVICE ) ; NetworkInfo ni = cm . getActiveNetworkInfo ( ) ; return ni != null && ni . isConnected ( ) == _BOOL && ni . getType ( ) == ConnectivityManager . TYPE_WIFI ; }
77481	public void close ( ) throws IOException { if ( writer != null ) writer . flushBuffer ( ) ; }
17900	public boolean isEmpty ( ) { return extOrdering . isEmpty ( ) ; }
36203	public Process ( final File file , final ProgressListener progressListener ) throws IOException , XMLException { this . processLocation = new FileProcessLocation ( file ) ; initContext ( ) ; Reader in = null ; try { in = new InputStreamReader ( new FileInputStream ( file ) , _STR ) ; readProcess ( in , progressListener ) ; } catch ( IOException e ) { throw e ; } finally { if ( in != null ) { in . close ( ) ; } } }
70959	public static String extractMusicIDFromMediaID ( @ NonNull String mediaID ) { int pos = mediaID . indexOf ( LEAF_SEPARATOR ) ; if ( pos >= _NUM ) { return mediaID . substring ( pos + _NUM ) ; } return null ; }
19342	public void testGetScope ( ) throws Exception { Identity i = new IdentityStub ( _STR ) ; assertNull ( i . getScope ( ) ) ; IdentityScope s = IdentityScope . getSystemScope ( ) ; Identity i2 = new IdentityStub ( _STR , s ) ; assertSame ( s , i2 . getScope ( ) ) ; }
45730	public Object [ ] buildParameters ( Object [ ] firstParameters , Method method , Class < ? extends Annotation > annotationType ) { int parametersLength = method . getParameterTypes ( ) . length ; if ( firstParameters . length > _NUM && parametersLength < _NUM ) { throw new RepositoryMethodException ( String . format ( _STR , annotationType ) ) ; } int parametersToResolve = parametersLength - firstParameters . length ; Object [ ] additionalParameters = new Object [ parametersToResolve ] ; for ( int i = firstParameters . length ; i < parametersLength ; i ++ ) { additionalParameters [ i - firstParameters . length ] = parameterProvider . provide ( method , i ) ; } return concatenate ( firstParameters , additionalParameters ) ; }
64717	@ Override public boolean contains ( S2Cell cell ) { return contains ( cell . id ( ) ) ; }
9276	public SimplexNoiseGenerator ( Random rand ) { super ( rand ) ; offsetW = rand . nextDouble ( ) * _NUM ; }
10149	public static long [ ] values ( Long [ ] array ) { long [ ] dest = new long [ array . length ] ; for ( int i = _NUM ; i < array . length ; i ++ ) { Long v = array [ i ] ; if ( v != null ) { dest [ i ] = v . longValue ( ) ; } } return dest ; }
51000	@ Override public void processNewLines ( String [ ] lines ) { for ( String line : lines ) { if ( line . startsWith ( _STR ) ) { continue ; } if ( line . contains ( _STR ) ) { myIsFileMissing = _BOOL ; return ; } String [ ] values = line . split ( LINE_SPLIT_REGEX ) ; if ( values . length < INDEX_OF_TX_BYTES ) { continue ; } try { int lineUid = Integer . parseInt ( values [ INDEX_OF_UID ] ) ; if ( myUid == lineUid ) { int tempRxBytes = Integer . parseInt ( values [ INDEX_OF_RX_BYTES ] ) ; int tempTxBytes = Integer . parseInt ( values [ INDEX_OF_TX_BYTES ] ) ; if ( tempRxBytes < _NUM || tempTxBytes < _NUM ) { LOG . warning ( String . format ( _STR , tempRxBytes , tempTxBytes , line ) ) ; continue ; } myRxBytes += tempRxBytes ; myTxBytes += tempTxBytes ; } } catch ( NumberFormatException e ) { LOG . warning ( String . format ( _STR , values [ INDEX_OF_UID ] , values [ INDEX_OF_RX_BYTES ] , values [ INDEX_OF_TX_BYTES ] , line ) ) ; } } }
598	protected void initLookup ( ) { m_lookup = new HashMap ( ) ; for ( int i = _NUM ; i < m_names . length ; ++ i ) { m_lookup . put ( m_names [ i ] , new Integer ( i ) ) ; } }
82166	public String toString ( ) { String str = _STR ; String followedBy = _STR ; int lastType = - _NUM ; String lastString = _STR ; int singlesCount = _NUM ; for ( Enumeration e = formatConstraints . elements ( ) ; e . hasMoreElements ( ) ; ) { FormatConstraint constraint = ( FormatConstraint ) e . nextElement ( ) ; if ( constraint . count == FormatConstraint . COUNT_EXACTLY_ONE ) { if ( lastType != - _NUM ) { if ( lastType != constraint . type ) { str += followedBy + singlesCount + lastString ; followedBy = _STR ; singlesCount = _NUM ; lastType = constraint . type ; lastString = constraint . toString ( ) ; } else { singlesCount ++ ; } } else { lastType = constraint . type ; lastString = constraint . toString ( ) ; singlesCount = _NUM ; } } else { if ( lastType != - _NUM ) { str += followedBy + singlesCount + lastString ; followedBy = _STR ; lastType = - _NUM ; singlesCount = _NUM ; lastString = _STR ; } str += followedBy + constraint . toString ( ) ; followedBy = _STR ; } } if ( lastType != - _NUM ) { str += followedBy + singlesCount + lastString ; } return str ; }
83743	public void readData ( DataInput din ) throws IOException { din . readShort ( ) ; count = din . readUnsignedShort ( ) ; registers = new InputRegister [ count ] ; for ( int i = _NUM ; i < count ; i ++ ) { registers [ i ] = new SimpleInputRegister ( din . readShort ( ) ) ; } }
24490	public void adjustIndentation ( int delta ) { if ( delta < _NUM ) { indentationLevel = Math . max ( _NUM , indentationLevel + delta ) ; } else { indentationLevel += delta ; } }
53747	public int capacity ( ) { return capacity . get ( ) ; }
69506	protected static token do_code_string ( ) throws java . io . IOException { StringBuffer result = new StringBuffer ( ) ; advance ( ) ; advance ( ) ; while ( ! ( next_char == _STR && next_char2 == _STR ) ) { if ( next_char == EOF_CHAR ) { emit_error ( _STR ) ; break ; } result . append ( new Character ( ( char ) next_char ) ) ; advance ( ) ; } advance ( ) ; advance ( ) ; return new str_token ( sym . CODE_STRING , result . toString ( ) ) ; }
44944	public String random ( Object omin , Object omax ) { int min = FunctionHandler . getInt ( omin ) ; int max = FunctionHandler . getInt ( omax ) ; if ( max > min ) { return Integer . toString ( rnd . nextInt ( max - min ) + min ) ; } return _STR ; }
27669	public void test_reopen01 ( ) { final IRawStore store = new SimpleMemoryRawStore ( ) ; final BTree btree ; { IndexMetadata md = new IndexMetadata ( UUID . randomUUID ( ) ) ; md . setBranchingFactor ( _NUM ) ; btree = BTree . create ( store , md ) ; } assertTrue ( btree . isOpen ( ) ) ; btree . close ( ) ; assertFalse ( btree . isOpen ( ) ) ; try { btree . close ( ) ; fail ( _STR + IllegalStateException . class ) ; } catch ( IllegalStateException ex ) { if ( log . isInfoEnabled ( ) ) log . info ( _STR + ex ) ; } assertNotNull ( btree . getRoot ( ) ) ; assertTrue ( btree . isOpen ( ) ) ; }
85378	public static File searchPaths ( Iterable < ? extends File > paths , String relFile ) { for ( File path : paths ) { File f = new File ( path , relFile ) ; if ( f . exists ( ) ) { return path ; } } return null ; }
17946	public boolean hasUnsupportedCriticalExtension ( ) { Set extns = getCriticalExtensionOIDs ( ) ; return extns != null && ! extns . isEmpty ( ) ; }
69439	private static String doNormalize ( String filename , char separator , boolean keepSeparator ) { if ( filename == null ) { return null ; } int size = filename . length ( ) ; if ( size == _NUM ) { return filename ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < _NUM ) { return null ; } char [ ] array = new char [ size + _NUM ] ; filename . getChars ( _NUM , filename . length ( ) , array , _NUM ) ; char otherSeparator = separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR ; for ( int i = _NUM ; i < array . length ; i ++ ) { if ( array [ i ] == otherSeparator ) { array [ i ] = separator ; } } boolean lastIsDirectory = _BOOL ; if ( array [ size - _NUM ] != separator ) { array [ size ++ ] = separator ; lastIsDirectory = _BOOL ; } for ( int i = prefix + _NUM ; i < size ; i ++ ) { if ( array [ i ] == separator && array [ i - _NUM ] == separator ) { System . arraycopy ( array , i , array , i - _NUM , size - i ) ; size -- ; i -- ; } } for ( int i = prefix + _NUM ; i < size ; i ++ ) { if ( array [ i ] == separator && array [ i - _NUM ] == _STR && ( i == prefix + _NUM || array [ i - _NUM ] == separator ) ) { if ( i == size - _NUM ) { lastIsDirectory = _BOOL ; } System . arraycopy ( array , i + _NUM , array , i - _NUM , size - i ) ; size -= _NUM ; i -- ; } } outer : for ( int i = prefix + _NUM ; i < size ; i ++ ) { if ( array [ i ] == separator && array [ i - _NUM ] == _STR && array [ i - _NUM ] == _STR && ( i == prefix + _NUM || array [ i - _NUM ] == separator ) ) { if ( i == prefix + _NUM ) { return null ; } if ( i == size - _NUM ) { lastIsDirectory = _BOOL ; } int j ; for ( j = i - _NUM ; j >= prefix ; j -- ) { if ( array [ j ] == separator ) { System . arraycopy ( array , i + _NUM , array , j + _NUM , size - i ) ; size -= i - j ; i = j + _NUM ; continue outer ; } } System . arraycopy ( array , i + _NUM , array , prefix , size - i ) ; size -= i + _NUM - prefix ; i = prefix + _NUM ; } } if ( size <= _NUM ) { return _STR ; } if ( size <= prefix ) { return new String ( array , _NUM , size ) ; } if ( lastIsDirectory && keepSeparator ) { return new String ( array , _NUM , size ) ; } return new String ( array , _NUM , size - _NUM ) ; }
57666	@ Override public StringBuffer format ( double value , StringBuffer buffer , FieldPosition field ) { for ( int i = choiceLimits . length - _NUM ; i >= _NUM ; i -- ) { if ( choiceLimits [ i ] <= value ) { return buffer . append ( choiceFormats [ i ] ) ; } } return choiceFormats . length == _NUM ? buffer : buffer . append ( choiceFormats [ _NUM ] ) ; }
25030	private void loadConfigurationFromJvmParameters ( ) { String repositoryProperty = System . getProperty ( REPOSITORY_PROPERTY ) ; if ( null != repositoryProperty ) { String [ ] repositoryIpHost = repositoryProperty . split ( _STR ) ; if ( repositoryIpHost . length == _NUM ) { String repositoryIp = repositoryIpHost [ _NUM ] ; String repositoryPort = repositoryIpHost [ _NUM ] ; if ( StringUtils . isNotBlank ( repositoryIp ) && StringUtils . isNotBlank ( repositoryPort ) ) { log . info ( _STR + repositoryIp + _STR + repositoryPort ) ; try { int port = Integer . parseInt ( repositoryPort ) ; setRepository ( repositoryIp , port ) ; } catch ( Exception e ) { log . warn ( _STR , e ) ; } } } } String agentName = System . getProperty ( AGENT_NAME_PROPERTY ) ; if ( StringUtils . isNotBlank ( agentName ) ) { try { log . info ( _STR + agentName ) ; setAgentName ( agentName ) ; } catch ( Exception e ) { log . warn ( _STR , e ) ; } } else { try { setAgentName ( DEFAULT_AGENT_NAME ) ; } catch ( StorageException e ) { log . warn ( _STR , e ) ; } } }
29076	public boolean softSignin ( ) throws IOException { if ( url == null ) { throw new IllegalStateException ( _STR ) ; } checkResolveHost ( ) ; if ( sessionId != null ) { if ( checkAuthorized ( getAuthCheckUrl ( sessionId ) ) ) { LOGGER . fine ( _STR + sessionId ) ; return _BOOL ; } else { sessionId = null ; } } long id = loadSessionId ( ) ; if ( id == _NUM ) { return _BOOL ; } boolean authorized = checkAuthorized ( getAuthCheckUrl ( id ) ) ; if ( authorized ) { LOGGER . info ( _STR + id ) ; this . sessionId = id ; } return authorized ; }
63514	private void testViewAlterAndCommandCache ( ) throws SQLException { deleteDb ( _STR ) ; Connection conn = getConnection ( _STR ) ; Statement stat = conn . createStatement ( ) ; stat . execute ( _STR ) ; stat . execute ( _STR ) ; stat . execute ( _STR ) ; stat . execute ( _STR ) ; stat . execute ( _STR ) ; ResultSet rs = stat . executeQuery ( _STR ) ; assertTrue ( rs . next ( ) ) ; assertEquals ( _NUM , rs . getInt ( _NUM ) ) ; stat . execute ( _STR ) ; rs = stat . executeQuery ( _STR ) ; assertTrue ( rs . next ( ) ) ; assertEquals ( _NUM , rs . getInt ( _NUM ) ) ; conn . close ( ) ; deleteDb ( _STR ) ; }
80379	protected static boolean approxUnit ( final StringBuilder sbuf , final int amount , final int size , final String name ) { int count = amount / size ; int remainder ; if ( count == _NUM ) { return _BOOL ; } remainder = amount - ( count * size ) ; if ( remainder >= ( size * _NUM / _NUM ) ) { count ++ ; sbuf . append ( count ) ; } else if ( remainder >= ( size * _NUM / _NUM ) ) { count ++ ; sbuf . append ( _STR ) ; sbuf . append ( count ) ; } else if ( remainder >= ( size * _NUM / _NUM ) ) { sbuf . append ( _STR ) ; sbuf . append ( count ) ; sbuf . append ( _STR ) ; count = _NUM ; } else if ( remainder >= ( size * _NUM / _NUM ) ) { sbuf . append ( _STR ) ; sbuf . append ( count ) ; } else { sbuf . append ( count ) ; } sbuf . append ( _STR ) ; sbuf . append ( Grammar . plnoun ( count , name ) ) ; return _BOOL ; }
45872	public static Element createElement ( Document doc , String tag , String nsURI , String prefix ) { String qName = ( prefix == null || prefix . length ( ) == _NUM ) ? tag : prefix + _STR + tag ; return doc . createElementNS ( nsURI , qName ) ; }
350	public static void modifyFile ( File file , Function < String , String > modifier ) throws IOException { String content = new String ( Files . toByteArray ( file ) , StandardCharsets . UTF_8 ) ; String result = modifier . apply ( content ) ; Files . write ( result . getBytes ( StandardCharsets . UTF_8 ) , file ) ; }
43018	private void state2 ( ) throws IOException { int [ ] selectionIds = readList ( new File ( filePrefix + _STR ) ) ; int [ ] archivedIds = readList ( new File ( filePrefix + _STR ) ) ; int [ ] variationIds = new int [ lambda ] ; if ( selectionIds . length != mu ) { throw new IOException ( _STR ) ; } updatePopulation ( archivedIds ) ; clearFile ( new File ( filePrefix + _STR ) ) ; clearFile ( new File ( filePrefix + _STR ) ) ; List < Solution > offspring = new ArrayList < Solution > ( ) ; for ( int i = _NUM ; i < mu ; i += variation . getArity ( ) ) { Solution [ ] parents = new Solution [ variation . getArity ( ) ] ; for ( int j = _NUM ; j < variation . getArity ( ) ; j ++ ) { parents [ j ] = solutions . get ( selectionIds [ i + j ] ) ; } offspring . addAll ( Arrays . asList ( variation . evolve ( parents ) ) ) ; } if ( offspring . size ( ) != lambda ) { throw new IOException ( _STR ) ; } evaluateAll ( offspring ) ; for ( int i = _NUM ; i < lambda ; i ++ ) { variationIds [ i ] = addToPopulation ( offspring . get ( i ) ) ; } writePopulation ( new File ( filePrefix + _STR ) , variationIds ) ; }
39420	public void testListOptions ( ) { if ( m_OptionTester . getOptionHandler ( ) != null ) { if ( ! m_OptionTester . checkListOptions ( ) ) fail ( _STR ) ; } }
11440	protected double LLToWorldReturningLon ( double lat , double lon , Point2D lp ) { double phi_deg = lat ; double phi = ProjMath . degToRad ( phi_deg ) ; double lamba_deg = lon ; double lamba = ProjMath . degToRad ( lamba_deg ) ; double dlamda = lamba - lamdaf ; if ( dlamda > Math . PI ) { dlamda -= MoreMath . TWO_PI_D ; } else if ( dlamda < - Math . PI ) { dlamda += MoreMath . TWO_PI_D ; } double e = ellps . ecc ; double r = _NUM ; if ( ! MoreMath . approximately_equal ( Math . abs ( phi ) , MoreMath . HALF_PI , EPS10 ) ) { double t = lambTsfn ( phi , Math . sin ( phi ) , e ) ; r = ellps . radius * F * Math . pow ( t , n ) ; } double theta = n * dlamda ; double easting = falseEasting + r * Math . sin ( theta - alpha ) ; double northing = falseNorthing + rf - r * Math . cos ( theta - alpha ) ; lp . setLocation ( easting , northing ) ; return dlamda ; }
34647	protected void notifySizeChanged ( float width , float height , int orientation ) { }
74405	protected boolean removeTurntable ( LayoutTurntable o ) { if ( ! noWarnTurntable ) { int selectedValue = JOptionPane . showOptionDialog ( this , rb . getString ( _STR ) , Bundle . getMessage ( _STR ) , JOptionPane . YES_NO_CANCEL_OPTION , JOptionPane . QUESTION_MESSAGE , null , new Object [ ] { Bundle . getMessage ( _STR ) , Bundle . getMessage ( _STR ) , rb . getString ( _STR ) } , Bundle . getMessage ( _STR ) ) ; if ( selectedValue == _NUM ) { return ( _BOOL ) ; } if ( selectedValue == _NUM ) { noWarnTurntable = _BOOL ; } } if ( selectedObject == o ) { selectedObject = null ; } if ( prevSelectedObject == o ) { prevSelectedObject = null ; } for ( int j = _NUM ; j < o . getNumberRays ( ) ; j ++ ) { TrackSegment t = o . getRayConnectOrdered ( j ) ; if ( t != null ) { substituteAnchor ( o . getRayCoordsIndexed ( j ) , o , t ) ; } } for ( int i = _NUM ; i < turntableList . size ( ) ; i ++ ) { LayoutTurntable lx = turntableList . get ( i ) ; if ( lx == o ) { turntableList . remove ( i ) ; o . remove ( ) ; setDirty ( _BOOL ) ; repaint ( ) ; return ( _BOOL ) ; } } return ( _BOOL ) ; }
54256	@ Override public final void endElement ( final String ns , final String lName , final String qName ) throws SAXException { String name = lName == null || lName . length ( ) == _NUM ? qName : lName ; Rule r = ( Rule ) RULES . match ( match ) ; if ( r != null ) { r . end ( name ) ; } int slash = match . lastIndexOf ( _STR ) ; if ( slash >= _NUM ) { match = match . substring ( _NUM , slash ) ; } else { match = _STR ; } }
62568	public INDArray asMatrix ( BufferedImage image ) { if ( channels == _NUM ) { return toBgr ( image ) ; } else { image = scalingIfNeed ( image , _BOOL ) ; int w = image . getWidth ( ) ; int h = image . getHeight ( ) ; INDArray ret = Nd4j . create ( h , w ) ; for ( int i = _NUM ; i < h ; i ++ ) { for ( int j = _NUM ; j < w ; j ++ ) { ret . putScalar ( new int [ ] { i , j } , image . getRGB ( i , j ) ) ; } } return ret ; } }
64152	public FileSystemUtils ( ) { super ( ) ; }
20496	public int scheduledQueueSize ( ) { return schedulerQueueSize . get ( ) ; }
9678	public DGeneralNameChooser ( JFrame parent , String title , GeneralName generalName ) { super ( parent , title , ModalityType . DOCUMENT_MODAL ) ; initComponents ( generalName ) ; }
1543	public void destroyScene ( ) { clearAnimations ( ) ; clearCameras ( ) ; clearLights ( ) ; clearPlugins ( ) ; clearChildren ( ) ; clearFrameCallbacks ( ) ; }
26039	private static Platform findPlatform ( ) { try { try { Class . forName ( _STR ) ; } catch ( ClassNotFoundException e ) { Class . forName ( _STR ) ; } OptionalMethod < Socket > setUseSessionTickets = new OptionalMethod < > ( null , _STR , boolean . class ) ; OptionalMethod < Socket > setHostname = new OptionalMethod < > ( null , _STR , String . class ) ; Method trafficStatsTagSocket = null ; Method trafficStatsUntagSocket = null ; OptionalMethod < Socket > getAlpnSelectedProtocol = null ; OptionalMethod < Socket > setAlpnProtocols = null ; try { Class < ? > trafficStats = Class . forName ( _STR ) ; trafficStatsTagSocket = trafficStats . getMethod ( _STR , Socket . class ) ; trafficStatsUntagSocket = trafficStats . getMethod ( _STR , Socket . class ) ; try { Class . forName ( _STR ) ; getAlpnSelectedProtocol = new OptionalMethod < > ( byte [ ] . class , _STR ) ; setAlpnProtocols = new OptionalMethod < > ( null , _STR , byte [ ] . class ) ; } catch ( ClassNotFoundException ignored ) { } } catch ( ClassNotFoundException | NoSuchMethodException ignored ) { } return new Android ( setUseSessionTickets , setHostname , trafficStatsTagSocket , trafficStatsUntagSocket , getAlpnSelectedProtocol , setAlpnProtocols ) ; } catch ( ClassNotFoundException ignored ) { } try { String negoClassName = _STR ; Class < ? > negoClass = Class . forName ( negoClassName ) ; Class < ? > providerClass = Class . forName ( negoClassName + _STR ) ; Class < ? > clientProviderClass = Class . forName ( negoClassName + _STR ) ; Class < ? > serverProviderClass = Class . forName ( negoClassName + _STR ) ; Method putMethod = negoClass . getMethod ( _STR , SSLSocket . class , providerClass ) ; Method getMethod = negoClass . getMethod ( _STR , SSLSocket . class ) ; Method removeMethod = negoClass . getMethod ( _STR , SSLSocket . class ) ; return new JdkWithJettyBootPlatform ( putMethod , getMethod , removeMethod , clientProviderClass , serverProviderClass ) ; } catch ( ClassNotFoundException | NoSuchMethodException ignored ) { } return new Platform ( ) ; }
71217	private void addLimitedMitreJoin ( LineSegment offset0 , LineSegment offset1 , double distance , double mitreLimit ) { Coordinate basePt = seg0 . p1 ; double ang0 = Angle . angle ( basePt , seg0 . p0 ) ; double ang1 = Angle . angle ( basePt , seg1 . p1 ) ; double angDiff = Angle . angleBetweenOriented ( seg0 . p0 , basePt , seg1 . p1 ) ; double angDiffHalf = angDiff / _NUM ; double midAng = Angle . normalize ( ang0 + angDiffHalf ) ; double mitreMidAng = Angle . normalize ( midAng + Math . PI ) ; double mitreDist = mitreLimit * distance ; double bevelDelta = mitreDist * Math . abs ( Math . sin ( angDiffHalf ) ) ; double bevelHalfLen = distance - bevelDelta ; double bevelMidX = basePt . x + mitreDist * Math . cos ( mitreMidAng ) ; double bevelMidY = basePt . y + mitreDist * Math . sin ( mitreMidAng ) ; Coordinate bevelMidPt = new Coordinate ( bevelMidX , bevelMidY ) ; LineSegment mitreMidLine = new LineSegment ( basePt , bevelMidPt ) ; Coordinate bevelEndLeft = mitreMidLine . pointAlongOffset ( _NUM , bevelHalfLen ) ; Coordinate bevelEndRight = mitreMidLine . pointAlongOffset ( _NUM , - bevelHalfLen ) ; if ( side == Position . LEFT ) { segList . addPt ( bevelEndLeft ) ; segList . addPt ( bevelEndRight ) ; } else { segList . addPt ( bevelEndRight ) ; segList . addPt ( bevelEndLeft ) ; } }
18419	static byte [ ] discardNonBase64 ( byte [ ] data ) { byte groomedData [ ] = new byte [ data . length ] ; int bytesCopied = _NUM ; for ( int i = _NUM ; i < data . length ; i ++ ) { if ( isBase64 ( data [ i ] ) ) { groomedData [ bytesCopied ++ ] = data [ i ] ; } } byte packedData [ ] = new byte [ bytesCopied ] ; System . arraycopy ( groomedData , _NUM , packedData , _NUM , bytesCopied ) ; return packedData ; }
58637	public void testMultiplyDiffScalePosNeg ( ) { String a = _STR ; int aScale = _NUM ; String b = _STR ; int bScale = - _NUM ; String c = _STR ; int cScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal result = aNumber . multiply ( bNumber ) ; assertEquals ( _STR , c , result . toString ( ) ) ; assertEquals ( _STR , cScale , result . scale ( ) ) ; }
30787	private static long limitDuration ( long leaseDuration , long limit ) { if ( leaseDuration == Lease . ANY || leaseDuration > limit ) leaseDuration = limit ; else if ( leaseDuration < _NUM ) throw new IllegalArgumentException ( _STR ) ; return leaseDuration ; }
57713	static String pathToCookiePath ( String path ) { if ( path == null ) { return _STR ; } int lastSlash = path . lastIndexOf ( _STR ) ; return path . substring ( _NUM , lastSlash + _NUM ) ; }
86184	public static String formatSimpleDecimal ( double d ) { return simpleFormat . format ( d ) ; }
7541	protected AbstractCategoryItemLabelGenerator ( String labelFormat , DateFormat formatter ) { ParamChecks . nullNotPermitted ( labelFormat , _STR ) ; ParamChecks . nullNotPermitted ( formatter , _STR ) ; this . labelFormat = labelFormat ; this . numberFormat = null ; this . percentFormat = NumberFormat . getPercentInstance ( ) ; this . dateFormat = formatter ; this . nullValueString = _STR ; }
49160	public void delItems ( int s , int e ) { boolean hsbWasVisible = hsbVis ; boolean vsbWasVisible = vsbVis ; int oldLastDisplayed = lastItemDisplayed ( ) ; if ( log . isLoggable ( PlatformLogger . Level . FINE ) ) { log . fine ( _STR + s + _STR + e ) ; } if ( log . isLoggable ( PlatformLogger . Level . FINEST ) ) { log . finest ( _STR + oldLastDisplayed + _STR + itemsInWindow ( ) + _STR + items . size ( ) ) ; } if ( items . size ( ) == _NUM ) { return ; } if ( s > e ) { int tmp = s ; s = e ; e = tmp ; } if ( s < _NUM ) { s = _NUM ; } if ( e >= items . size ( ) ) { e = items . size ( ) - _NUM ; } boolean repaintNeeded = ( s >= getFirstVisibleItem ( ) && s <= getLastVisibleItem ( ) ) ; for ( int i = s ; i <= e ; i ++ ) { items . removeElementAt ( s ) ; int j = posInSel ( i ) ; if ( j != - _NUM ) { int newsel [ ] = new int [ selected . length - _NUM ] ; System . arraycopy ( selected , _NUM , newsel , _NUM , j ) ; System . arraycopy ( selected , j + _NUM , newsel , j , selected . length - ( j + _NUM ) ) ; selected = newsel ; } } int diff = ( e - s ) + _NUM ; for ( int i = _NUM ; i < selected . length ; i ++ ) { if ( selected [ i ] > e ) { selected [ i ] -= diff ; } } int options = PAINT_VSCROLL ; if ( getFocusIndex ( ) > e ) { setFocusIndex ( getFocusIndex ( ) - ( e - s + _NUM ) ) ; options |= PAINT_FOCUS ; } else if ( getFocusIndex ( ) >= s && getFocusIndex ( ) <= e ) { int focusBound = ( items . size ( ) > _NUM ) ? _NUM : - _NUM ; setFocusIndex ( Math . max ( s - _NUM , focusBound ) ) ; options |= PAINT_FOCUS ; } if ( log . isLoggable ( PlatformLogger . Level . FINEST ) ) { log . finest ( _STR + multipleSelections ) ; } if ( vsb . getValue ( ) >= s ) { if ( vsb . getValue ( ) <= e ) { vsb . setValue ( e + _NUM - diff ) ; } else { vsb . setValue ( vsb . getValue ( ) - diff ) ; } } int oldMaxLength = maxLength ; maxLength = maxLength ( ) ; if ( maxLength != oldMaxLength ) { options |= PAINT_HSCROLL ; } layout ( ) ; repaintNeeded |= ( vsbWasVisible ^ vsbVis ) || ( hsbWasVisible ^ hsbVis ) ; if ( repaintNeeded ) { options |= PAINT_ALL ; } repaint ( s , oldLastDisplayed , options ) ; }
48910	static long makeId ( SnmpOid oid ) { long id = _NUM ; long [ ] arcs = oid . longValue ( _BOOL ) ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] << _NUM ; id |= arcs [ _NUM ] ; return id ; }
48118	private void cacheAttribute ( String attrId , byte [ ] [ ] values ) { String cacheKey = name + _STR + attrId ; valueCache . put ( cacheKey , values ) ; }
46752	void read ( Reader policy ) throws ParsingException , IOException { if ( ! ( policy instanceof BufferedReader ) ) { policy = new BufferedReader ( policy ) ; } st = new StreamTokenizer ( policy ) ; st . resetSyntax ( ) ; st . wordChars ( _STR , _STR ) ; st . wordChars ( _STR , _STR ) ; st . wordChars ( _STR , _STR ) ; st . wordChars ( _STR , _STR ) ; st . wordChars ( _STR , _STR ) ; st . wordChars ( _STR , _STR ) ; st . wordChars ( _NUM + _NUM , _NUM ) ; st . whitespaceChars ( _NUM , _STR ) ; st . commentChar ( _STR ) ; st . quoteChar ( _STR ) ; st . quoteChar ( _STR ) ; st . lowerCaseMode ( _BOOL ) ; st . ordinaryChar ( _STR ) ; st . slashSlashComments ( _BOOL ) ; st . slashStarComments ( _BOOL ) ; st . parseNumbers ( ) ; Hashtable < String , Vector < String > > processedPermissions = null ; lookahead = st . nextToken ( ) ; while ( lookahead != StreamTokenizer . TT_EOF ) { if ( peek ( _STR ) ) { GrantEntry ge = parseGrantEntry ( processedPermissions ) ; if ( ge != null ) grantEntries . addElement ( ge ) ; } else { throw new ParsingException ( st . lineno ( ) , _STR + _STR ) ; } match ( _STR ) ; } }
21499	protected void injectIntoVolumeInformationContainer ( Map < String , StringSet > volumeInformation , String infoKey , String altKey , CIMInstance volumeInstance ) { Object value = getCIMPropertyValue ( volumeInstance , infoKey ) ; if ( null == value ) { value = getCIMPropertyValue ( volumeInstance , altKey ) ; } String charactersticName = SupportedVolumeInformation . getVolumeInformation ( infoKey ) ; if ( null != value && null != charactersticName ) { StringSet valueSet = new StringSet ( ) ; if ( value instanceof String ) { valueSet . add ( value . toString ( ) ) ; } else if ( value instanceof String [ ] ) { valueSet . addAll ( Arrays . asList ( ( String [ ] ) value ) ) ; } volumeInformation . put ( charactersticName , valueSet ) ; } }
31521	@ Override public void onDetachedFromRecyclerView ( RecyclerView recyclerView ) { super . onDetachedFromRecyclerView ( recyclerView ) ; mAttachedRecyclerViewPool . remove ( recyclerView ) ; }
38597	private void loadFile ( String filename , AbstractFileLoader ... loaders ) { ArffSortedTableModel model ; this . m_Filename = filename ; createTitle ( ) ; if ( filename . equals ( _STR ) ) { model = null ; } else { model = new ArffSortedTableModel ( filename , loaders ) ; model . setShowAttributeIndex ( getShowAttributeIndex ( ) ) ; } m_TableArff . setModel ( model ) ; setChanged ( _BOOL ) ; createName ( ) ; }
38312	private void destinationTypeChanged ( ) { if ( m_Exp == null ) return ; String str = _STR ; if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_DATABASE_TEXT ) { m_ResultsDestinationPathLabel . setText ( _STR ) ; str = m_destinationDatabaseURL ; m_BrowseDestinationButton . setEnabled ( _BOOL ) ; m_BrowseDestinationButton . setText ( _STR ) ; } else { m_ResultsDestinationPathLabel . setText ( _STR ) ; if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_ARFF_TEXT ) { int ind = m_destinationFilename . lastIndexOf ( _STR ) ; if ( ind > - _NUM ) { m_destinationFilename = m_destinationFilename . substring ( _NUM , ind ) + _STR ; } } if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_CSV_TEXT ) { int ind = m_destinationFilename . lastIndexOf ( _STR ) ; if ( ind > - _NUM ) { m_destinationFilename = m_destinationFilename . substring ( _NUM , ind ) + _STR ; } } str = m_destinationFilename ; if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_ARFF_TEXT ) { int ind = str . lastIndexOf ( _STR ) ; if ( ind > - _NUM ) { str = str . substring ( _NUM , ind ) + _STR ; } } if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_CSV_TEXT ) { int ind = str . lastIndexOf ( _STR ) ; if ( ind > - _NUM ) { str = str . substring ( _NUM , ind ) + _STR ; } } m_BrowseDestinationButton . setEnabled ( _BOOL ) ; m_BrowseDestinationButton . setText ( _STR ) ; } if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_DATABASE_TEXT ) { DatabaseResultListener drl = null ; try { drl = new DatabaseResultListener ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } drl . setDatabaseURL ( m_destinationDatabaseURL ) ; m_Exp . setResultListener ( drl ) ; } else { if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_ARFF_TEXT ) { InstancesResultListener irl = new InstancesResultListener ( ) ; if ( ! m_destinationFilename . equals ( _STR ) ) { irl . setOutputFile ( new File ( m_destinationFilename ) ) ; } m_Exp . setResultListener ( irl ) ; } else if ( m_ResultsDestinationCBox . getSelectedItem ( ) == DEST_CSV_TEXT ) { CSVResultListener crl = new CSVResultListener ( ) ; if ( ! m_destinationFilename . equals ( _STR ) ) { crl . setOutputFile ( new File ( m_destinationFilename ) ) ; } m_Exp . setResultListener ( crl ) ; } } m_ResultsDestinationPathTField . setText ( str ) ; m_Support . firePropertyChange ( _STR , null , null ) ; }
53384	public static InputStream tryGzipInput ( InputStream in ) throws IOException { if ( ! in . markSupported ( ) ) { PushbackInputStream pb = new PushbackInputStream ( in , _NUM ) ; in = pb ; byte [ ] magic = { _NUM , _NUM } ; pb . read ( magic ) ; pb . unread ( magic ) ; if ( magic [ _NUM ] == _NUM && magic [ _NUM ] == - _NUM ) { return new GZIPInputStream ( pb ) ; } return in ; } in . mark ( _NUM ) ; boolean isgzip = ( in . read ( ) == _NUM && in . read ( ) == - _NUM ) ; in . reset ( ) ; if ( isgzip ) { in = new GZIPInputStream ( in ) ; } return in ; }
47026	@ Override public int hashCode ( ) { if ( location != null ) return location . hashCode ( ) ; else return _NUM ; }
76685	public static Query newPrefixQuery ( String field , InetAddress value , int prefixLength ) { if ( value == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( prefixLength < _NUM || prefixLength > _NUM * value . getAddress ( ) . length ) { throw new IllegalArgumentException ( _STR + prefixLength + _STR ) ; } byte lower [ ] = value . getAddress ( ) ; byte upper [ ] = value . getAddress ( ) ; for ( int i = prefixLength ; i < _NUM * lower . length ; i ++ ) { int m = _NUM << ( _NUM - ( i & _NUM ) ) ; lower [ i > > _NUM ] &= ~ m ; upper [ i > > _NUM ] |= m ; } try { return newRangeQuery ( field , InetAddress . getByAddress ( lower ) , InetAddress . getByAddress ( upper ) ) ; } catch ( UnknownHostException e ) { throw new AssertionError ( e ) ; } }
14245	public static Subject createAMIdentitySubject ( PolicyManager pm , AMIdentity user ) throws PolicyException { SubjectTypeManager mgr = pm . getSubjectTypeManager ( ) ; Subject subject = mgr . getSubject ( _STR ) ; Set < String > set = new HashSet < String > ( ) ; set . add ( user . getUniversalId ( ) ) ; subject . setValues ( set ) ; return subject ; }
4856	protected void expandFor ( int index , double d ) { if ( index < size ) return ; int oldSize = size , capacity = vector . length ; size = index + _NUM ; if ( capacity >= size ) return ; while ( capacity < size ) capacity *= _NUM ; double [ ] t = new double [ capacity ] ; System . arraycopy ( vector , _NUM , t , _NUM , oldSize ) ; if ( d != _NUM ) Arrays . fill ( t , oldSize , size , d ) ; vector = t ; }
8466	private void doNormalCommandLineList ( List < String > commandLineList , List < String > jointOptions , Path classpath ) { commandLineList . add ( _STR ) ; commandLineList . add ( classpath . toString ( ) ) ; if ( jointCompilation ) { commandLineList . add ( _STR ) ; commandLineList . addAll ( jointOptions ) ; } if ( destDir != null ) { commandLineList . add ( _STR ) ; commandLineList . add ( destDir . getPath ( ) ) ; } if ( encoding != null ) { commandLineList . add ( _STR ) ; commandLineList . add ( encoding ) ; } if ( stacktrace ) { commandLineList . add ( _STR ) ; } if ( parameters ) { commandLineList . add ( _STR ) ; } if ( useIndy ) { commandLineList . add ( _STR ) ; } if ( scriptBaseClass != null ) { commandLineList . add ( _STR ) ; commandLineList . add ( scriptBaseClass ) ; } if ( configscript != null ) { commandLineList . add ( _STR ) ; commandLineList . add ( configscript ) ; } }
70356	private synchronized void loadHexImage ( IHex hex ) { hexTileset . assignMatch ( hex , boardview ) ; hexTileset . trackHexImages ( hex , tracker ) ; }
40351	public void triangulate ( PointSet ps ) { _triangulations . clear ( ) ; _triangulations . add ( ps ) ; start ( ) ; }
24699	public String base64UrlEncode ( byte [ ] data ) { String encodedData = new String ( Base64 . encode ( data , Base64 . URL_SAFE ) ) ; encodedData = encodedData . replace ( _STR , _STR ) ; encodedData = encodedData . replace ( _STR , _STR ) ; return encodedData ; }
66938	private void writeJavaFieldSpec ( JavaFieldSpec spec , Document document , Element parentElement ) { Element parameter = document . createElement ( _STR ) ; parameter . appendChild ( parentElement ) ; parameter . setAttribute ( _STR , spec . getPackageName ( ) ) ; parameter . setAttribute ( _STR , spec . getClassName ( ) ) ; parameter . setAttribute ( _STR , spec . getFieldName ( ) ) ; }
47671	private void readObject ( ObjectInputStream s ) throws IOException , ClassNotFoundException { s . defaultReadObject ( ) ; init ( getMask ( actions ) ) ; }
43989	@ Override public synchronized void parse ( Reader reader , String baseURI ) throws IOException , RDFParseException , RDFHandlerException { if ( reader == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( baseURI == null ) { throw new IllegalArgumentException ( _STR ) ; } InputSource inputSource = new InputSource ( reader ) ; inputSource . setSystemId ( baseURI ) ; parse ( inputSource ) ; }
75585	private String excludeDestinationStatement ( String text ) { int idx = - _NUM ; if ( ( idx = text . indexOf ( _STR ) ) != - _NUM ) { text = text . substring ( _NUM , idx ) ; } return text ; }
61582	static byte [ ] discardNonBase64 ( byte [ ] data ) { byte groomedData [ ] = new byte [ data . length ] ; int bytesCopied = _NUM ; for ( int i = _NUM ; i < data . length ; i ++ ) { if ( isBase64 ( data [ i ] ) ) { groomedData [ bytesCopied ++ ] = data [ i ] ; } } byte packedData [ ] = new byte [ bytesCopied ] ; System . arraycopy ( groomedData , _NUM , packedData , _NUM , bytesCopied ) ; return packedData ; }
77409	protected static final String addEscapes ( String str ) { StringBuilder retval = new StringBuilder ( ) ; char ch ; for ( int i = _NUM ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case _NUM : continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < _NUM || ch > _NUM ) { String s = _STR + Integer . toString ( ch , _NUM ) ; retval . append ( _STR + s . substring ( s . length ( ) - _NUM , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; }
11077	public static void addFile ( String s ) throws IOException { File f = new File ( s ) ; addFile ( f ) ; }
2307	@ SafeVarargs public final void insert ( int rowIndex , T ... newItems ) { insert ( rowIndex , Arrays . asList ( newItems ) ) ; }
53257	@ Deprecated public void put ( Collection < Integer > data ) { for ( Integer value : data ) { final int val = value . intValue ( ) ; min = val < min ? val : min ; max = val > max ? val : max ; } }
48603	public IntBuffer majorVersionBuffer ( ) { int [ ] holder = new int [ _NUM ] ; holder [ _NUM ] = getMajorVersion ( ) ; IntBuffer ib = IntBuffer . wrap ( holder ) ; ib . limit ( _NUM ) ; return ib ; }
56339	public CreateIndexRequest source ( XContentBuilder source ) { return source ( source . bytes ( ) ) ; }
29627	public static byte [ ] createDataToSign ( byte [ ] digest ) { byte [ ] prefix = getDigestInfoPrefix ( digest ) ; byte [ ] digestInfo = new byte [ prefix . length + digest . length ] ; System . arraycopy ( prefix , _NUM , digestInfo , _NUM , prefix . length ) ; System . arraycopy ( digest , _NUM , digestInfo , prefix . length , digest . length ) ; return digestInfo ; }
6021	public HttpRequest ifModifiedSince ( final long value ) { connection . setIfModifiedSince ( value ) ; return this ; }
69908	public static String tmpJournal ( ) { final File file = Code . wrapThrow ( null ) ; file . deleteOnExit ( ) ; return file . getAbsolutePath ( ) ; }
40474	public void push ( final float value ) { int bits = Float . floatToIntBits ( value ) ; if ( bits == _NUM || bits == _NUM || bits == _NUM ) { mv . visitInsn ( Opcodes . FCONST_0 + ( int ) value ) ; } else { mv . visitLdcInsn ( value ) ; } }
25654	public static Object newInstance ( Class < ? > cl , int [ ] dims ) { if ( dims . length == _NUM ) { dims = new int [ ] { _NUM } ; } return Array . newInstance ( cl , dims ) ; }
28253	private static void decodeAnsiX12Segment ( BitSource bits , StringBuilder result ) throws FormatException { int [ ] cValues = new int [ _NUM ] ; do { if ( bits . available ( ) == _NUM ) { return ; } int firstByte = bits . readBits ( _NUM ) ; if ( firstByte == _NUM ) { return ; } parseTwoBytes ( firstByte , bits . readBits ( _NUM ) , cValues ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { int cValue = cValues [ i ] ; if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue == _NUM ) { result . append ( _STR ) ; } else if ( cValue < _NUM ) { result . append ( ( char ) ( cValue + _NUM ) ) ; } else if ( cValue < _NUM ) { result . append ( ( char ) ( cValue + _NUM ) ) ; } else { throw FormatException . getFormatInstance ( ) ; } } } while ( bits . available ( ) > _NUM ) ; }
54572	public void playTogether ( Collection < Animator > items ) { if ( items != null && items . size ( ) > _NUM ) { mNeedsSort = _BOOL ; Builder builder = null ; for ( Animator anim : items ) { if ( builder == null ) { builder = play ( anim ) ; } else { builder . with ( anim ) ; } } } }
52965	protected static void printErrorMessage ( Exception e ) { if ( e instanceof AbortException ) { LoggingConfiguration . setVerbose ( Level . VERBOSE ) ; LOG . verbose ( e . getMessage ( ) ) ; } else if ( e instanceof UnspecifiedParameterException ) { LOG . error ( e . getMessage ( ) ) ; } else if ( e instanceof ParameterException ) { LOG . error ( e . getMessage ( ) ) ; } else { LOG . exception ( e ) ; } }
75239	public String requestStatistics ( ) { sb . setLength ( _NUM ) ; makeStringBuffer ( sb ) ; return sb . toString ( ) ; }
9354	private void applyL1Reg ( final double eta_t , Vec x ) { if ( lambda1 > _NUM ) { l1U += eta_t * lambda1 ; for ( int k = _NUM ; k < ws . length ; k ++ ) { final Vec w_k = ws [ k ] ; final double [ ] l1Q_k = l1Q [ k ] ; for ( IndexValue iv : x ) { final int i = iv . getIndex ( ) ; final double z = w_k . get ( i ) ; double newW_i = _NUM ; if ( z > _NUM ) newW_i = Math . max ( _NUM , z - ( l1U + l1Q_k [ i ] ) ) ; else if ( z < _NUM ) newW_i = Math . min ( _NUM , z + ( l1U - l1Q_k [ i ] ) ) ; l1Q_k [ i ] += ( newW_i - z ) ; w_k . set ( i , newW_i ) ; } } } }
74567	@ Override public void keyPressed ( KeyEvent e ) { synchronized ( keyLock ) { keysDown . add ( e . getKeyCode ( ) ) ; } }
62630	public static String slurpURLNoExceptions ( URL u , String encoding ) { try { return slurpURL ( u , encoding ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; return null ; } }
33152	public static MoveParticipant [ ] loadMoveParticipants ( RefactoringStatus status , RefactoringProcessor processor , Object element , MoveArguments arguments , IParticipantDescriptorFilter filter , String [ ] affectedNatures , SharableParticipants shared ) { RefactoringParticipant [ ] participants = fgMoveExtensions . getParticipants ( status , processor , element , arguments , filter , affectedNatures , shared ) ; MoveParticipant [ ] result = new MoveParticipant [ participants . length ] ; System . arraycopy ( participants , _NUM , result , _NUM , participants . length ) ; return result ; }
52932	private long [ ] determinePreferenceVector ( Relation < V > relation , ModifiableDBIDs [ ] neighborIDs , StringBuilder msg ) { if ( strategy . equals ( Strategy . APRIORI ) ) { return determinePreferenceVectorByApriori ( relation , neighborIDs , msg ) ; } else if ( strategy . equals ( Strategy . MAX_INTERSECTION ) ) { return determinePreferenceVectorByMaxIntersection ( neighborIDs , msg ) ; } else { throw new IllegalStateException ( _STR ) ; } }
82761	private void paintForegroundDisabled ( Graphics2D g , int width , int height ) { Shape s = decodeArrowPath ( width , height ) ; g . setPaint ( disabledColor ) ; g . fill ( s ) ; }
58783	public void testFlipBitNegativeInside1 ( ) { byte aBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = - _NUM ; int number = _NUM ; byte rBytes [ ] = { - _NUM , _NUM , - _NUM , - _NUM , _NUM , _NUM , - _NUM , - _NUM , - _NUM , - _NUM , _NUM , _NUM , - _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . flipBit ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , result . signum ( ) ) ; }
3178	private void onUser ( @ NotNull TLAbsUser absUser ) { User currentUser = null ; User user = null ; if ( absUser instanceof TLUser ) { final TLUser tlUser = ( TLUser ) absUser ; if ( tlUser . isMutualContact ( ) ) { currentUser = ( User ) databaseManager . getUserById ( tlUser . getId ( ) ) ; user = onUserContact ( currentUser , tlUser ) ; } else if ( tlUser . isDeleted ( ) ) { currentUser = ( User ) databaseManager . getUserById ( tlUser . getId ( ) ) ; user = onUserDelete ( currentUser , tlUser ) ; } else if ( tlUser . isContact ( ) ) { currentUser = ( User ) databaseManager . getUserById ( tlUser . getId ( ) ) ; user = onUserRequest ( currentUser , tlUser ) ; } else if ( tlUser . isSelf ( ) || ! tlUser . isBot ( ) ) { currentUser = ( User ) databaseManager . getUserById ( tlUser . getId ( ) ) ; user = onUserForeign ( currentUser , tlUser ) ; } else { BotLogger . info ( LOGTAG , _STR ) ; } } if ( ( currentUser == null ) && ( user != null ) ) { databaseManager . addUser ( user ) ; } else if ( user != null ) { databaseManager . updateUser ( user ) ; } }
68033	@ Override public boolean hasNext ( ) { log . log ( Level . FINE , _STR ) ; boolean result = ( nextEvent != null ) ; log . log ( Level . FINE , _STR , result ) ; return result ; }
70655	@ Override public void close ( ) { try { if ( connection != null ) { connection . close ( ) ; } } catch ( SQLException e ) { e . printStackTrace ( ) ; } }
2051	public static XMPMeta extractXMPMeta ( InputStream is ) { List < Section > sections = parse ( is , _BOOL ) ; if ( sections == null ) { return null ; } for ( Section section : sections ) { if ( hasXMPHeader ( section . data ) ) { int end = getXMPContentEnd ( section . data ) ; byte [ ] buffer = new byte [ end - XMP_HEADER_SIZE ] ; System . arraycopy ( section . data , XMP_HEADER_SIZE , buffer , _NUM , buffer . length ) ; try { XMPMeta result = XMPMetaFactory . parseFromBuffer ( buffer ) ; return result ; } catch ( XMPException e ) { Log . d ( TAG , _STR , e ) ; return null ; } } } return null ; }
66007	private void initialize ( ModelValidator validator , MClient client ) { if ( client == null ) m_globalValidators . add ( validator ) ; m_validators . add ( validator ) ; validator . initialize ( this , client ) ; }
37712	void crossOver ( BayesNetRepresentation other ) { boolean [ ] bits = new boolean [ m_bits . length ] ; for ( int i = _NUM ; i < m_bits . length ; i ++ ) { bits [ i ] = m_bits [ i ] ; } int iCrossOverPoint = m_bits . length ; do { for ( int i = iCrossOverPoint ; i < m_bits . length ; i ++ ) { m_bits [ i ] = bits [ i ] ; } iCrossOverPoint = m_random . nextInt ( m_bits . length ) ; for ( int i = iCrossOverPoint ; i < m_bits . length ; i ++ ) { m_bits [ i ] = other . m_bits [ i ] ; } } while ( hasCycles ( ) ) ; calcGlobalScore ( ) ; }
34892	public void reset ( ) { engineReset ( ) ; state = INITIAL ; }
36602	public Perspective createUserPerspective ( final String name , final boolean show ) { Perspective perspective = model . addPerspective ( name , _BOOL ) ; perspective . store ( context ) ; if ( show ) { showPerspective ( name ) ; } return perspective ; }
86640	public static double phred ( double error ) { return - _NUM * Math . log10 ( error ) ; }
17248	public static String of ( CtClass type ) { StringBuffer sbuf = new StringBuffer ( ) ; toDescriptor ( sbuf , type ) ; return sbuf . toString ( ) ; }
23172	public abstract String encode ( ) ;
35395	@ SafeVarargs public final Token < TokenType > expect ( TokenType ... expected ) throws SimpleParserException { if ( hasType ( expected ) ) return this ; throw new SimpleParserException ( line , column , _STR + Arrays . toString ( expected ) + _STR + toString ( ) ) ; }
59292	public void testUpdate3 ( ) { int newValue1 = - _NUM ; int newValue2 = - _NUM ; String updateQuery = _STR + DatabaseCreator . TEST_TABLE1 + _STR + newValue1 + _STR + newValue2 ; try { int num = statement . executeUpdate ( updateQuery ) ; assertEquals ( _STR , numberOfRecords , num ) ; String selectQuery = _STR + DatabaseCreator . TEST_TABLE1 ; ResultSet result = statement . executeQuery ( selectQuery ) ; while ( result . next ( ) ) { } result . close ( ) ; } catch ( SQLException e ) { fail ( _STR + e . getMessage ( ) ) ; } }
51802	public void testSetNull ( ) throws Exception { PreparedStatement stmt = connection . prepareStatement ( _STR ) ; try { stmt . setInt ( _NUM , _NUM ) ; stmt . setBytes ( _NUM , null ) ; stmt . executeUpdate ( ) ; stmt . setInt ( _NUM , _NUM ) ; stmt . setBinaryStream ( _NUM , null , _NUM ) ; stmt . executeUpdate ( ) ; stmt . setInt ( _NUM , _NUM ) ; stmt . setString ( _NUM , null ) ; stmt . executeUpdate ( ) ; } finally { stmt . close ( ) ; } }
28572	@ Deprecated public boolean isAssignableFrom ( Type from ) { if ( from == null ) { return _BOOL ; } if ( type . equals ( from ) ) { return _BOOL ; } if ( type instanceof Class < ? > ) { return rawType . isAssignableFrom ( $Gson$Types . getRawType ( from ) ) ; } else if ( type instanceof ParameterizedType ) { return isAssignableFrom ( from , ( ParameterizedType ) type , new HashMap < String , Type > ( ) ) ; } else if ( type instanceof GenericArrayType ) { return rawType . isAssignableFrom ( $Gson$Types . getRawType ( from ) ) && isAssignableFrom ( from , ( GenericArrayType ) type ) ; } else { throw buildUnexpectedTypeError ( type , Class . class , ParameterizedType . class , GenericArrayType . class ) ; } }
30291	EgDemandDetails insertPenalty ( final BigDecimal chqBouncePenalty , final Module module ) { EgDemandDetails demandDetail = null ; if ( chqBouncePenalty != null && chqBouncePenalty . compareTo ( BigDecimal . ZERO ) > _NUM ) { final Installment currInstallment = getCurrentInstallment ( module ) ; final EgDemandReasonMaster egDemandReasonMaster = demandGenericDao . getDemandReasonMasterByCode ( DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY , module ) ; if ( egDemandReasonMaster == null ) throw new ApplicationRuntimeException ( _STR ) ; final EgDemandReason egDemandReason = demandGenericDao . getDmdReasonByDmdReasonMsterInstallAndMod ( egDemandReasonMaster , currInstallment , module ) ; if ( egDemandReason == null ) throw new ApplicationRuntimeException ( _STR ) ; demandDetail = EgDemandDetails . fromReasonAndAmounts ( chqBouncePenalty , egDemandReason , BigDecimal . ZERO ) ; } return demandDetail ; }
12557	public SampleInfo ( ByteBuffer bb ) throws IOException { numberOfChannels = bb . getInt ( ) ; sampleRate = bb . getInt ( ) ; coeffMin = bb . getFloat ( ) ; coeffRange = bb . getFloat ( ) ; postEmphasis = bb . getFloat ( ) ; residualFold = bb . getInt ( ) ; }
50178	public void handleMaintenance ( Operation maintOp ) { performPendingRequestMaintenance ( ) ; checkAndScheduleSynchronization ( this . cachedGroupState . membershipUpdateTimeMicros ) ; maintOp . complete ( ) ; }
86008	public void clear ( ) { oredCriteria . clear ( ) ; orderByClause = null ; distinct = _BOOL ; }
7370	public < T > T time ( Callable < T > event ) throws Exception { final long startTime = clock . tick ( ) ; try { return event . call ( ) ; } finally { update ( clock . tick ( ) - startTime ) ; } }
8104	public static boolean isPostJDK7 ( String bytecodeVersion ) { return JDK7 . equals ( bytecodeVersion ) || JDK8 . equals ( bytecodeVersion ) ; }
56330	public PutIndexTemplateRequest mapping ( String type , Object ... source ) { mapping ( type , PutMappingRequest . buildFromSimplifiedDef ( type , source ) ) ; return this ; }
45032	private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
54936	private InputStream findTemplate ( String path , String template ) { try { File file = new File ( path , template ) ; if ( file . canRead ( ) ) { return new BufferedInputStream ( new FileInputStream ( file . getAbsolutePath ( ) ) ) ; } else { return null ; } } catch ( FileNotFoundException fnfe ) { return null ; } }
75061	@ Override public synchronized void initialize ( ) { if ( ! mRootDirectory . exists ( ) ) { if ( ! mRootDirectory . mkdirs ( ) ) { VolleyLog . e ( _STR , mRootDirectory . getAbsolutePath ( ) ) ; } return ; } File [ ] files = mRootDirectory . listFiles ( ) ; if ( files == null ) { return ; } for ( File file : files ) { BufferedInputStream fis = null ; try { fis = new BufferedInputStream ( new FileInputStream ( file ) ) ; CacheHeader entry = CacheHeader . readHeader ( fis ) ; entry . size = file . length ( ) ; putEntry ( entry . key , entry ) ; } catch ( IOException e ) { if ( file != null ) { file . delete ( ) ; } } finally { try { if ( fis != null ) { fis . close ( ) ; } } catch ( IOException ignored ) { } } } }
83535	public void addListener ( CircularProgressViewListener listener ) { if ( listener != null ) listeners . add ( listener ) ; }
14960	public SiteStatusCheckThreadImpl ( ) { super ( ) ; urlCheckers = new HashMap ( ) ; }
74716	@ Override public void render ( final int type , final Graphics2D g2 , final float scaling , final boolean isFormGlyph ) { glyphDisplay . setScalingValues ( _NUM , _NUM , scaling ) ; final float OLDglyphScale = glyphScale ; if ( isFormGlyph ) { glyphScale = scaling * glyphScale ; } AffineTransform aff = null ; if ( glyphScale != _NUM ) { aff = g2 . getTransform ( ) ; g2 . scale ( glyphScale , glyphScale ) ; } glyphDisplay . setG2 ( g2 ) ; glyphDisplay . paint ( null , null , null ) ; if ( aff != null ) { g2 . setTransform ( aff ) ; } glyphScale = OLDglyphScale ; }
11653	public void removeVetoableChangeListener ( String propertyName , VetoableChangeListener in_vcl ) { beanContextChildSupport . removeVetoableChangeListener ( propertyName , in_vcl ) ; }
22383	private void writeAttribute ( java . lang . String prefix , java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( xmlWriter . getPrefix ( namespace ) == null ) { xmlWriter . writeNamespace ( prefix , namespace ) ; xmlWriter . setPrefix ( prefix , namespace ) ; } xmlWriter . writeAttribute ( namespace , attName , attValue ) ; }
85402	public List < String > reset ( List < String > replace ) { ArrayList < String > copy = new ArrayList < String > ( retainedVars . size ( ) ) ; copy . addAll ( retainedVars ) ; retainedVars . clear ( ) ; if ( replace != null ) { retainedVars . addAll ( replace ) ; } return copy ; }
48883	protected void release ( ) { AppContext tempAppContext = null ; synchronized ( grabReleaseSynchronizer ) { if ( usageCount > _NUM ) { -- usageCount ; } else { synchronized ( threadGroupSynchronizer ) { tempAppContext = resetAppContext ( ) ; } } } if ( tempAppContext != null ) { try { tempAppContext . dispose ( ) ; } catch ( IllegalThreadStateException e ) { } } }
53706	public synchronized void deleteAllTables ( ) { List < String > tableNames = new ArrayList < String > ( tableLookup . keySet ( ) ) ; for ( String s : tableNames ) { deleteTable ( s ) ; } }
72250	public PetCategory findOne ( String id ) { log . debug ( _STR , id ) ; PetCategory petCategory = petCategoryRepository . findOne ( UUID . fromString ( id ) ) ; return petCategory ; }
79725	private void markRemovedDefaultSessionToken ( String site , String token ) { if ( removedDefaultTokens == null ) removedDefaultTokens = new HashMap < > ( _NUM ) ; HashSet < String > removedSet = removedDefaultTokens . get ( site ) ; if ( removedSet == null ) { removedSet = new HashSet < > ( _NUM ) ; removedDefaultTokens . put ( site , removedSet ) ; } removedSet . add ( token ) ; }
21622	private Map < URI , Map < URI , Map < String , List < URI > > > > createDeviceToCGMapFromDescriptors ( List < VolumeDescriptor > addDescriptors , List < VolumeDescriptor > removeDescriptors ) { Map < URI , Map < URI , Map < String , List < URI > > > > deviceToCGMap = new HashMap < URI , Map < URI , Map < String , List < URI > > > > ( ) ; for ( VolumeDescriptor descr : addDescriptors ) { URI deviceURI = descr . getDeviceURI ( ) ; Map < URI , Map < String , List < URI > > > volumesToUpdateByCG = deviceToCGMap . get ( deviceURI ) ; if ( volumesToUpdateByCG == null ) { volumesToUpdateByCG = new HashMap < URI , Map < String , List < URI > > > ( ) ; deviceToCGMap . put ( deviceURI , volumesToUpdateByCG ) ; } URI consistencyGroupURI = descr . getConsistencyGroupURI ( ) ; Map < String , List < URI > > volumesToUpdate = volumesToUpdateByCG . get ( consistencyGroupURI ) ; if ( volumesToUpdate == null ) { volumesToUpdate = new HashMap < String , List < URI > > ( ) ; volumesToUpdateByCG . put ( consistencyGroupURI , volumesToUpdate ) ; } List < URI > volumesToAdd = volumesToUpdate . get ( ADD_VOLUMES_TO_CG_KEY ) ; if ( volumesToAdd == null ) { volumesToAdd = new ArrayList < URI > ( ) ; volumesToUpdate . put ( ADD_VOLUMES_TO_CG_KEY , volumesToAdd ) ; } volumesToAdd . add ( descr . getVolumeURI ( ) ) ; } for ( VolumeDescriptor descr : removeDescriptors ) { URI deviceURI = descr . getDeviceURI ( ) ; Map < URI , Map < String , List < URI > > > volumesToUpdateByCG = deviceToCGMap . get ( deviceURI ) ; if ( volumesToUpdateByCG == null ) { volumesToUpdateByCG = new HashMap < URI , Map < String , List < URI > > > ( ) ; deviceToCGMap . put ( deviceURI , volumesToUpdateByCG ) ; } URI consistencyGroupURI = descr . getConsistencyGroupURI ( ) ; Map < String , List < URI > > volumesToUpdate = volumesToUpdateByCG . get ( consistencyGroupURI ) ; if ( volumesToUpdate == null ) { volumesToUpdate = new HashMap < String , List < URI > > ( ) ; volumesToUpdateByCG . put ( consistencyGroupURI , volumesToUpdate ) ; } List < URI > volumesToRemove = volumesToUpdate . get ( REMOVE_VOLUMES_FROM_CG_KEY ) ; if ( volumesToRemove == null ) { volumesToRemove = new ArrayList < URI > ( ) ; volumesToUpdate . put ( REMOVE_VOLUMES_FROM_CG_KEY , volumesToRemove ) ; } volumesToRemove . add ( descr . getVolumeURI ( ) ) ; } return deviceToCGMap ; }
25381	public Exchange ( final Request request , final Origin origin ) { this . currentRequest = request ; this . origin = origin ; this . timestamp = System . currentTimeMillis ( ) ; }
56034	public static float computeDiscardAlpha ( float amount , float range ) { if ( Math . abs ( amount ) < _NUM ) return _NUM ; float t = amount / range ; t = MathUtils . clamp ( t , - _NUM , _NUM ) ; return _NUM - Math . abs ( t ) ; }
47298	public static final FileTime unixTimeToFileTime ( long utime ) { return FileTime . from ( utime , TimeUnit . SECONDS ) ; }
42712	public static CipherTextIvMac encrypt ( String plaintext , SecretKeys secretKeys , String encoding ) throws UnsupportedEncodingException , GeneralSecurityException { return encrypt ( plaintext . getBytes ( encoding ) , secretKeys ) ; }
40915	public void removeAddress ( AddressEntity address ) { addresses . remove ( address ) ; }
16584	@ Override protected void onMeasure ( int widthMeasureSpec , int heightMeasureSpec ) { int widthSpecMode = MeasureSpec . getMode ( widthMeasureSpec ) ; int heightSpecMode = MeasureSpec . getMode ( heightMeasureSpec ) ; int parentWidth = MeasureSpec . getSize ( widthMeasureSpec ) ; int parentHeight = MeasureSpec . getSize ( heightMeasureSpec ) ; boolean resizeWidth = widthSpecMode != MeasureSpec . EXACTLY ; boolean resizeHeight = heightSpecMode != MeasureSpec . EXACTLY ; int width = parentWidth ; int height = parentHeight ; if ( sWidth > _NUM && sHeight > _NUM ) { if ( resizeWidth && resizeHeight ) { width = sWidth ( ) ; height = sHeight ( ) ; } else if ( resizeHeight ) { height = ( int ) ( ( ( ( double ) sHeight ( ) / ( double ) sWidth ( ) ) * width ) ) ; } else if ( resizeWidth ) { width = ( int ) ( ( ( ( double ) sWidth ( ) / ( double ) sHeight ( ) ) * height ) ) ; } } width = Math . max ( width , getSuggestedMinimumWidth ( ) ) ; height = Math . max ( height , getSuggestedMinimumHeight ( ) ) ; setMeasuredDimension ( width , height ) ; }
61368	protected void fireEndElem ( String name ) throws org . xml . sax . SAXException { if ( m_tracer != null ) { flushMyWriter ( ) ; m_tracer . fireGenerateEvent ( SerializerTrace . EVENTTYPE_ENDELEMENT , name , ( Attributes ) null ) ; } }
15426	private boolean verifyMigrateFromProductHome ( String migrateFromProductHome ) throws InstallException { if ( migrateFromProductHome == null || migrateFromProductHome . length ( ) == _NUM ) { Debug . log ( _STR + _STR ) ; Console . println ( LocalizedMessage . get ( LOC_HR_MSG_MIGRATE_NONE_FOUND ) ) ; return _BOOL ; } if ( ! migrateFromProductHome . equals ( ConfigUtil . getHomePath ( ) ) ) { Debug . log ( _STR + _STR + migrateFromProductHome + _STR + ConfigUtil . getHomePath ( ) ) ; String translateFile = migrateFromProductHome + MigrateFromInstFinderStore . getRelativeTranslateFile ( ) ; if ( ! FileUtils . isFileValid ( translateFile ) ) { Console . println ( LocalizedMessage . get ( LOC_HR_MSG_MIGRATE_NONE_FOUND ) ) ; return _BOOL ; } } else { Debug . log ( _STR + _STR ) ; throw new InstallException ( LocalizedMessage . get ( LOC_DR_ERR_PRODUCT_ALREADY_MIGRATED ) ) ; } return _BOOL ; }
33478	public Spanned [ ] history ( ) { int i = _NUM ; Spanned [ ] array = new Spanned [ history . size ( ) ] ; for ( String s : history ) { if ( s != null ) { array [ i ] = Html . fromHtml ( s ) ; i ++ ; } } return array ; }
33134	public static String format ( String message , Object [ ] arguments ) { return MessageFormat . format ( message , arguments ) ; }
12906	private void insertProsodySettings ( Utterance utterance , Element element ) { Element prosody = ( Element ) DomUtils . getAncestor ( element , MaryXML . PROSODY ) ; if ( prosody == null ) { return ; } Element voice = ( Element ) DomUtils . getAncestor ( element , MaryXML . VOICE ) ; if ( voice != null && DomUtils . isAncestor ( prosody , voice ) ) { return ; } Element paragraph = ( Element ) DomUtils . getAncestor ( element , MaryXML . PARAGRAPH ) ; if ( paragraph != null && DomUtils . isAncestor ( prosody , paragraph ) ) { return ; } for ( String att : PROSODY_ATTRIBUTES ) { String val = prosody . getAttribute ( att ) ; if ( ! val . equals ( _STR ) ) { utterance . setString ( att , val ) ; } } }
33695	public static boolean createFolder ( @ SuppressWarnings ( _STR ) Context mContext , String path , String folderName ) { File SDCardRoot = new File ( path , folderName ) ; if ( ! SDCardRoot . exists ( ) ) { return SDCardRoot . mkdir ( ) ; } return _BOOL ; }
4129	private void translateMatrixAfterRotate ( int axis , float trans , float prevImageSize , float imageSize , int prevViewSize , int viewSize , int drawableSize ) { if ( imageSize < viewSize ) { m [ axis ] = ( viewSize - ( drawableSize * m [ Matrix . MSCALE_X ] ) ) * _NUM ; } else if ( trans > _NUM ) { m [ axis ] = - ( ( imageSize - viewSize ) * _NUM ) ; } else { float percentage = ( Math . abs ( trans ) + ( _NUM * prevViewSize ) ) / prevImageSize ; m [ axis ] = - ( ( percentage * imageSize ) - ( viewSize * _NUM ) ) ; } }
56007	private CharSequence createTickerText ( String title , String body ) { SpannableStringBuilder spannableStringBuilder = new SpannableStringBuilder ( ) ; spannableStringBuilder . append ( title ) ; spannableStringBuilder . append ( _STR ) ; spannableStringBuilder . append ( body ) ; spannableStringBuilder . setSpan ( new StyleSpan ( android . graphics . Typeface . BOLD ) , _NUM , title . length ( ) , Spannable . SPAN_INCLUSIVE_INCLUSIVE ) ; return spannableStringBuilder ; }
21515	private void addProtocolIfNotExists ( Set < String > protocols , String protocolType ) { if ( ! protocols . contains ( protocolType ) ) { protocols . add ( protocolType ) ; } }
60691	public String toString ( ) { StringBuilder result = new StringBuilder ( ) ; result . append ( _STR ) ; result . append ( klazz . getName ( ) ) ; result . append ( _STR ) ; for ( int i = _NUM ; i < elements . length ; ++ i ) { if ( i != _NUM ) { result . append ( _STR ) ; } result . append ( elements [ i ] ) ; } result . append ( _STR ) ; return result . toString ( ) ; }
29235	void add ( Object key ) { table . put ( key , key ) ; }
52576	public Configuration loadConfigFromResource ( Resource resource ) { PropertiesConfiguration result = new PropertiesConfiguration ( ) ; try { result . load ( resource . getInputStream ( ) ) ; return result ; } catch ( ConfigurationException | IOException e ) { LOG . error ( CONFIGURATION_LOAD_ERROR . format ( resource . getFilename ( ) ) , e ) ; throw new SystemConfigException ( CONFIGURATION_LOAD_ERROR . format ( resource . getFilename ( ) ) , e ) ; } }
55835	public final void log ( String filename , int lineNumber , String method , String tag , int level , String message ) { final LogMessage lm = new LogMessage ( LogMessage . LOGMSG_TYPE_LOG , nextSequenceNumber . getAndIncrement ( ) ) ; lm . addInt16 ( level , LogMessage . PART_KEY_LEVEL ) ; if ( filename != null ) { lm . addString ( filename , LogMessage . PART_KEY_FILENAME ) ; if ( lineNumber != _NUM ) lm . addInt32 ( lineNumber , LogMessage . PART_KEY_LINENUMBER ) ; } if ( method != null ) lm . addString ( method , LogMessage . PART_KEY_FUNCTIONNAME ) ; if ( tag != null && ! tag . isEmpty ( ) ) lm . addString ( tag , LogMessage . PART_KEY_TAG ) ; lm . addString ( message , LogMessage . PART_KEY_MESSAGE ) ; log ( lm ) ; }
7411	protected Size2D drawVertical ( Graphics2D g2 , Rectangle2D chartArea ) { double startX ; double topSpace = _NUM ; double bottomSpace = _NUM ; double leftSpace = _NUM ; double rightSpace = _NUM ; double w = getWidth ( ) ; double h = getHeight ( ) ; RectangleInsets padding = getPadding ( ) ; if ( padding != null ) { topSpace = padding . calculateTopOutset ( h ) ; bottomSpace = padding . calculateBottomOutset ( h ) ; leftSpace = padding . calculateLeftOutset ( w ) ; rightSpace = padding . calculateRightOutset ( w ) ; } if ( getPosition ( ) == RectangleEdge . LEFT ) { startX = chartArea . getX ( ) + leftSpace ; } else { startX = chartArea . getMaxX ( ) - rightSpace - w ; } VerticalAlignment alignment = getVerticalAlignment ( ) ; double startY = _NUM ; if ( alignment == VerticalAlignment . CENTER ) { startY = chartArea . getMinY ( ) + topSpace + chartArea . getHeight ( ) / _NUM - h / _NUM ; } else if ( alignment == VerticalAlignment . TOP ) { startY = chartArea . getMinY ( ) + topSpace ; } else if ( alignment == VerticalAlignment . BOTTOM ) { startY = chartArea . getMaxY ( ) - bottomSpace - h ; } g2 . drawImage ( this . image , ( int ) startX , ( int ) startY , ( int ) w , ( int ) h , null ) ; return new Size2D ( chartArea . getWidth ( ) + leftSpace + rightSpace , h + topSpace + bottomSpace ) ; }
46127	private static final PublicKey constructPublicKey ( byte [ ] encodedKey , String encodedKeyAlgorithm ) throws InvalidKeyException , NoSuchAlgorithmException { PublicKey key = null ; try { KeyFactory keyFactory = KeyFactory . getInstance ( encodedKeyAlgorithm , SunJCE . getInstance ( ) ) ; X509EncodedKeySpec keySpec = new X509EncodedKeySpec ( encodedKey ) ; key = keyFactory . generatePublic ( keySpec ) ; } catch ( NoSuchAlgorithmException nsae ) { try { KeyFactory keyFactory = KeyFactory . getInstance ( encodedKeyAlgorithm ) ; X509EncodedKeySpec keySpec = new X509EncodedKeySpec ( encodedKey ) ; key = keyFactory . generatePublic ( keySpec ) ; } catch ( NoSuchAlgorithmException nsae2 ) { throw new NoSuchAlgorithmException ( _STR + _STR + encodedKeyAlgorithm + _STR ) ; } catch ( InvalidKeySpecException ikse2 ) { InvalidKeyException ike = new InvalidKeyException ( _STR ) ; ike . initCause ( ikse2 ) ; throw ike ; } } catch ( InvalidKeySpecException ikse ) { InvalidKeyException ike = new InvalidKeyException ( _STR ) ; ike . initCause ( ikse ) ; throw ike ; } return key ; }
601	public int numHits ( String query ) throws ParseException , IOException { Integer count ; if ( ( count = ( Integer ) m_hitCountCache . get ( query ) ) == null ) { Hits hits = search ( query ) ; count = new Integer ( hits . length ( ) ) ; m_hitCountCache . put ( query , count ) ; } return count . intValue ( ) ; }
4287	public static boolean expressionIsTrue ( double leftSide , Operator operator , double rightSide ) { final String expression = leftSide + operator . getMathematicalOperator ( ) + rightSide ; return expressionIsTrue ( expression ) ; }
19425	public MockResponse addHeader ( String name , Object value ) { return addHeader ( name + _STR + String . valueOf ( value ) ) ; }
56565	@ Override public CompletableFuture < Optional < T > > max ( final Comparator < ? super T > comparator ) { return CompletableFuture . supplyAsync ( null , exec ) ; }
3657	final public void println ( char v ) { Writer out = this . out ; if ( out == null ) return ; try { out . write ( v ) ; out . write ( _newline , _NUM , _newline . length ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } }
27784	public void test_write_correctRejection_emptyRecord ( ) { final IRawStore store = getStore ( ) ; try { try { store . write ( ByteBuffer . wrap ( new byte [ ] { } ) ) ; fail ( _STR + IllegalArgumentException . class ) ; } catch ( IllegalArgumentException ex ) { if ( log . isInfoEnabled ( ) ) log . info ( _STR + ex ) ; } try { final ByteBuffer buf = ByteBuffer . wrap ( new byte [ _NUM ] ) ; buf . position ( buf . limit ( ) ) ; store . write ( buf ) ; fail ( _STR + IllegalArgumentException . class ) ; } catch ( IllegalArgumentException ex ) { if ( log . isInfoEnabled ( ) ) log . info ( _STR + ex ) ; } } finally { store . destroy ( ) ; } }
52551	public synchronized void commit ( ) { synchronized ( mutex ) { Map < Column , Set < Interval > > temp = workingIntervals ; workingIntervals = Collections . synchronizedMap ( new LinkedHashMap < > ( ) ) ; availableIntervalsRef . set ( Collections . unmodifiableMap ( new LinkedHashMap < > ( temp ) ) ) ; super . columns = new LinkedHashSet < > ( temp . keySet ( ) ) ; } }
59296	public void testUpdate7 ( ) { String updateQuery = _STR + DatabaseCreator . TEST_TABLE1 + _STR + DatabaseCreator . TEST_TABLE2 + _STR ; try { int num = statement . executeUpdate ( updateQuery ) ; int expectedUpdated = _NUM ; assertEquals ( _STR , expectedUpdated , num ) ; String selectQuery = _STR + DatabaseCreator . TEST_TABLE1 ; ResultSet result = statement . executeQuery ( selectQuery ) ; while ( result . next ( ) ) { } result . close ( ) ; } catch ( SQLException e ) { fail ( _STR + e . getMessage ( ) ) ; } }
81460	public static String extractIndentString ( String line , int tabWidth , int indentWidth ) { if ( tabWidth < _NUM || indentWidth < _NUM || line == null ) { throw new IllegalArgumentException ( ) ; } int size = line . length ( ) ; int end = _NUM ; int spaceEquivs = _NUM ; int characters = _NUM ; for ( int i = _NUM ; i < size ; i ++ ) { char c = line . charAt ( i ) ; if ( c == _STR ) { spaceEquivs = calculateSpaceEquivalents ( tabWidth , spaceEquivs ) ; characters ++ ; } else if ( isIndentChar ( c ) ) { spaceEquivs ++ ; characters ++ ; } else { break ; } if ( spaceEquivs >= indentWidth ) { end += characters ; characters = _NUM ; if ( indentWidth == _NUM ) { spaceEquivs = _NUM ; } else { spaceEquivs = spaceEquivs % indentWidth ; } } } if ( end == _NUM ) { return Util . EMPTY_STRING ; } else if ( end == size ) { return line ; } else { return line . substring ( _NUM , end ) ; } }
64420	private static String doGetFullPath ( String filename , boolean includeSeparator ) { if ( filename == null ) { return null ; } int prefix = getPrefixLength ( filename ) ; if ( prefix < _NUM ) { return null ; } if ( prefix >= filename . length ( ) ) { if ( includeSeparator ) { return getPrefix ( filename ) ; } else { return filename ; } } int index = indexOfLastSeparator ( filename ) ; if ( index < _NUM ) { return filename . substring ( _NUM , prefix ) ; } int end = index + ( includeSeparator ? _NUM : _NUM ) ; if ( end == _NUM ) { end ++ ; } return filename . substring ( _NUM , end ) ; }
52921	private void preInsert ( MkMaxEntry q , MkMaxEntry nodeEntry , KNNHeap knns_q ) { if ( LOG . isDebugging ( ) ) { LOG . debugFine ( _STR + q + _STR + nodeEntry + _STR ) ; } double knnDist_q = knns_q . getKNNDistance ( ) ; MkMaxTreeNode < O > node = getNode ( nodeEntry ) ; double knnDist_node = _NUM ; if ( node . isLeaf ( ) ) { for ( int i = _NUM ; i < node . getNumEntries ( ) ; i ++ ) { MkMaxEntry p = node . getEntry ( i ) ; double dist_pq = distance ( p . getRoutingObjectID ( ) , q . getRoutingObjectID ( ) ) ; if ( dist_pq <= knnDist_q ) { knns_q . insert ( dist_pq , p . getRoutingObjectID ( ) ) ; if ( knns_q . size ( ) >= getKmax ( ) ) { knnDist_q = knns_q . getKNNDistance ( ) ; q . setKnnDistance ( knnDist_q ) ; } } if ( dist_pq <= p . getKnnDistance ( ) ) { KNNList knns_p = knnq . getKNNForDBID ( p . getRoutingObjectID ( ) , getKmax ( ) - _NUM ) ; if ( knns_p . size ( ) + _NUM < getKmax ( ) ) { p . setKnnDistance ( Double . NaN ) ; } else { double knnDist_p = Math . max ( dist_pq , knns_p . getKNNDistance ( ) ) ; p . setKnnDistance ( knnDist_p ) ; } } knnDist_node = Math . max ( knnDist_node , p . getKnnDistance ( ) ) ; } } else { List < DoubleIntPair > entries = getSortedEntries ( node , q . getRoutingObjectID ( ) ) ; for ( DoubleIntPair distEntry : entries ) { MkMaxEntry dirEntry = node . getEntry ( distEntry . second ) ; double entry_knnDist = dirEntry . getKnnDistance ( ) ; if ( distEntry . second < entry_knnDist || distEntry . second < knnDist_q ) { preInsert ( q , dirEntry , knns_q ) ; knnDist_q = knns_q . getKNNDistance ( ) ; } knnDist_node = Math . max ( knnDist_node , dirEntry . getKnnDistance ( ) ) ; } } if ( LOG . isDebugging ( ) ) { LOG . debugFine ( nodeEntry + _STR + knnDist_node ) ; } nodeEntry . setKnnDistance ( knnDist_node ) ; }
12197	private static boolean addIfMatches ( List < String > container , String statusLine , char x , char y ) { if ( matches ( statusLine , x , y ) ) { final String filename = statusLine . substring ( _NUM ) ; if ( ! container . contains ( filename ) ) { container . add ( filename ) ; } return _BOOL ; } return _BOOL ; }
58663	public void testDivideRoundHalfDownNeg2 ( ) { String a = _STR ; int aScale = _NUM ; String b = _STR ; int bScale = _NUM ; String c = _STR ; int resScale = - _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal result = aNumber . divide ( bNumber , resScale , BigDecimal . ROUND_HALF_DOWN ) ; assertEquals ( _STR , c , result . toString ( ) ) ; assertEquals ( _STR , resScale , result . scale ( ) ) ; }
1191	public static String encodeFromString ( String plain , String charset ) throws CoderException , UnsupportedEncodingException { return encode ( plain . getBytes ( charset ) ) ; }
86931	public void slide ( SLIDE slide ) { if ( slide == SLIDE . UP ) { if ( ! isPanelShown ( ) ) { int position = _NUM ; if ( items != null ) { position = items . size ( ) / _NUM ; } slideUp ( position ) ; } } else { hidePanelPickerUI ( ) ; } }
10639	public DrawerBuilder addStickyDrawerItems ( @ NonNull IDrawerItem ... stickyDrawerItems ) { if ( this . mStickyDrawerItems == null ) { this . mStickyDrawerItems = new ArrayList < > ( ) ; } Collections . addAll ( this . mStickyDrawerItems , IdDistributor . checkIds ( stickyDrawerItems ) ) ; return this ; }
53112	public boolean isDebuggingFinest ( ) { return logger . isLoggable ( Level . FINEST ) ; }
33870	private static void sort1 ( int [ ] x , int off , int len ) { if ( len < _NUM ) { for ( int i = off ; i < len + off ; i ++ ) for ( int j = i ; j > off && x [ j - _NUM ] > x [ j ] ; j -- ) swap ( x , j , j - _NUM ) ; return ; } int m = off + ( len > > _NUM ) ; if ( len > _NUM ) { int l = off ; int n = off + len - _NUM ; if ( len > _NUM ) { int s = len / _NUM ; l = med3 ( x , l , l + s , l + _NUM * s ) ; m = med3 ( x , m - s , m , m + s ) ; n = med3 ( x , n - _NUM * s , n - s , n ) ; } m = med3 ( x , l , m , n ) ; } int v = x [ m ] ; int a = off , b = a , c = off + len - _NUM , d = c ; while ( _BOOL ) { while ( b <= c && x [ b ] <= v ) { if ( x [ b ] == v ) swap ( x , a ++ , b ) ; b ++ ; } while ( c >= b && x [ c ] >= v ) { if ( x [ c ] == v ) swap ( x , c , d -- ) ; c -- ; } if ( b > c ) break ; swap ( x , b ++ , c -- ) ; } int s , n = off + len ; s = Math . min ( a - off , b - a ) ; vecswap ( x , off , b - s , s ) ; s = Math . min ( d - c , n - d - _NUM ) ; vecswap ( x , b , n - s , s ) ; if ( ( s = b - a ) > _NUM ) sort1 ( x , off , s ) ; if ( ( s = d - c ) > _NUM ) sort1 ( x , n - s , s ) ; }
85198	public void reset ( ) { ns . removeAllElements ( ) ; ks . setLength ( _NUM ) ; cur = tt . root ; run ( ) ; }
8781	@ LayoutlibDelegate static float sin ( float angle ) { return ( float ) Math . sin ( angle ) ; }
74901	public static void renderFlattenedAnnotation ( final PdfObject form , final DynamicVectorRenderer current , final int pageNumber , final int rotation ) { final BufferedImage image = AnnotationFactory . getIcon ( form ) ; if ( image != null ) { final GraphicsState gs = new GraphicsState ( ) ; final int iconHeight = image . getHeight ( ) ; final int iconWidth = image . getWidth ( ) ; final float [ ] rect = form . getFloatArray ( PdfDictionary . Rect ) ; if ( form . getParameterConstant ( PdfDictionary . Subtype ) == PdfDictionary . Text ) { rect [ _NUM ] = rect [ _NUM ] + iconWidth ; rect [ _NUM ] = rect [ _NUM ] - iconHeight ; form . setFloatArray ( PdfDictionary . Rect , rect ) ; } switch ( rotation % _NUM ) { case _NUM : gs . CTM = new float [ ] [ ] { { iconWidth , _NUM , _NUM } , { _NUM , iconHeight , _NUM } , { _NUM , _NUM , _NUM } } ; gs . x = rect [ _NUM ] ; gs . y = rect [ _NUM ] - iconHeight ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] - iconHeight ; break ; case _NUM : gs . CTM = new float [ ] [ ] { { _NUM , iconWidth , _NUM } , { - iconHeight , _NUM , _NUM } , { _NUM , _NUM , _NUM } } ; gs . x = rect [ _NUM ] + iconHeight ; gs . y = rect [ _NUM ] ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] + iconHeight ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] ; break ; case _NUM : gs . CTM = new float [ ] [ ] { { - iconWidth , _NUM , _NUM } , { _NUM , - iconHeight , _NUM } , { _NUM , _NUM , _NUM } } ; gs . x = rect [ _NUM ] ; gs . y = rect [ _NUM ] + iconHeight ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] + iconHeight ; break ; case _NUM : gs . CTM = new float [ ] [ ] { { _NUM , - iconWidth , _NUM } , { iconHeight , _NUM , _NUM } , { _NUM , _NUM , _NUM } } ; gs . x = rect [ _NUM ] - iconHeight ; gs . y = rect [ _NUM ] ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] - iconHeight ; gs . CTM [ _NUM ] [ _NUM ] = rect [ _NUM ] ; break ; } if ( form . getParameterConstant ( PdfDictionary . Subtype ) == PdfDictionary . Highlight ) { current . setGraphicsState ( GraphicsState . STROKE , gs . getAlpha ( GraphicsState . STROKE ) , PdfDictionary . Darken ) ; current . setGraphicsState ( GraphicsState . FILL , gs . getAlpha ( GraphicsState . FILL ) , PdfDictionary . Darken ) ; } current . drawImage ( pageNumber , image , gs , _BOOL , form . getObjectRefAsString ( ) , - _NUM ) ; if ( form . getParameterConstant ( PdfDictionary . Subtype ) == PdfDictionary . Highlight ) { current . setGraphicsState ( GraphicsState . STROKE , gs . getAlpha ( GraphicsState . STROKE ) , PdfDictionary . Normal ) ; current . setGraphicsState ( GraphicsState . FILL , gs . getAlpha ( GraphicsState . FILL ) , PdfDictionary . Normal ) ; } } }
78198	public byte [ ] extractData ( byte [ ] stegoData , String stegoFileName , byte [ ] origSigData ) throws OpenStegoException { return null ; }
14849	public static String makeRelatedSessionID ( String encryptedID , SessionID prototype ) throws SessionException { prototype . parseSessionString ( ) ; return makeSessionID ( encryptedID , prototype . getExtension ( ) , prototype . tail ) ; }
692	public static GeneralPath cardinalSpline ( float pts [ ] , int start , int npoints , float slack , boolean closed ) { GeneralPath path = new GeneralPath ( ) ; path . moveTo ( pts [ start ] , pts [ start + _NUM ] ) ; return cardinalSpline ( path , pts , start , npoints , slack , closed , _NUM , _NUM ) ; }
77072	public static Automaton determinize ( Automaton a , int maxDeterminizedStates ) { if ( a . isDeterministic ( ) ) { return a ; } if ( a . getNumStates ( ) <= _NUM ) { return a ; } Automaton . Builder b = new Automaton . Builder ( ) ; SortedIntSet . FrozenIntSet initialset = new SortedIntSet . FrozenIntSet ( _NUM , _NUM ) ; b . createState ( ) ; LinkedList < SortedIntSet . FrozenIntSet > worklist = new LinkedList < > ( ) ; Map < SortedIntSet . FrozenIntSet , Integer > newstate = new HashMap < > ( ) ; worklist . add ( initialset ) ; b . setAccept ( _NUM , a . isAccept ( _NUM ) ) ; newstate . put ( initialset , _NUM ) ; final PointTransitionSet points = new PointTransitionSet ( ) ; final SortedIntSet statesSet = new SortedIntSet ( _NUM ) ; Transition t = new Transition ( ) ; while ( worklist . size ( ) > _NUM ) { SortedIntSet . FrozenIntSet s = worklist . removeFirst ( ) ; for ( int i = _NUM ; i < s . values . length ; i ++ ) { final int s0 = s . values [ i ] ; int numTransitions = a . getNumTransitions ( s0 ) ; a . initTransition ( s0 , t ) ; for ( int j = _NUM ; j < numTransitions ; j ++ ) { a . getNextTransition ( t ) ; points . add ( t ) ; } } if ( points . count == _NUM ) { continue ; } points . sort ( ) ; int lastPoint = - _NUM ; int accCount = _NUM ; final int r = s . state ; for ( int i = _NUM ; i < points . count ; i ++ ) { final int point = points . points [ i ] . point ; if ( statesSet . upto > _NUM ) { assert lastPoint != - _NUM ; statesSet . computeHash ( ) ; Integer q = newstate . get ( statesSet ) ; if ( q == null ) { q = b . createState ( ) ; if ( q >= maxDeterminizedStates ) { throw new TooComplexToDeterminizeException ( a , maxDeterminizedStates ) ; } final SortedIntSet . FrozenIntSet p = statesSet . freeze ( q ) ; worklist . add ( p ) ; b . setAccept ( q , accCount > _NUM ) ; newstate . put ( p , q ) ; } else { assert ( accCount > _NUM ? _BOOL : _BOOL ) == b . isAccept ( q ) : _STR + accCount + _STR + b . isAccept ( q ) + _STR + statesSet ; } b . addTransition ( r , q , lastPoint , point - _NUM ) ; } int [ ] transitions = points . points [ i ] . ends . transitions ; int limit = points . points [ i ] . ends . next ; for ( int j = _NUM ; j < limit ; j += _NUM ) { int dest = transitions [ j ] ; statesSet . decr ( dest ) ; accCount -= a . isAccept ( dest ) ? _NUM : _NUM ; } points . points [ i ] . ends . next = _NUM ; transitions = points . points [ i ] . starts . transitions ; limit = points . points [ i ] . starts . next ; for ( int j = _NUM ; j < limit ; j += _NUM ) { int dest = transitions [ j ] ; statesSet . incr ( dest ) ; accCount += a . isAccept ( dest ) ? _NUM : _NUM ; } lastPoint = point ; points . points [ i ] . starts . next = _NUM ; } points . reset ( ) ; assert statesSet . upto == _NUM : _STR + statesSet . upto ; } Automaton result = b . finish ( ) ; assert result . isDeterministic ( ) ; return result ; }
60037	public boolean matches ( String seq ) { return queue . regionMatches ( _BOOL , pos , seq , _NUM , seq . length ( ) ) ; }
72522	private boolean findRoot ( final ODEStateInterpolator interpolator , final double ta , final double ga , final double tb , final double gb ) { check ( ga == _NUM || gb == _NUM || ( ga > _NUM && gb < _NUM ) || ( ga < _NUM && gb > _NUM ) ) ; final UnivariateFunction f = null ; double beforeRootT = Double . NaN , beforeRootG = Double . NaN ; double afterRootT = ta , afterRootG = _NUM ; if ( ta == tb ) { beforeRootT = ta ; beforeRootG = ga ; afterRootT = shiftedBy ( beforeRootT , convergence ) ; afterRootG = f . value ( afterRootT ) ; } else if ( ga != _NUM && gb == _NUM ) { beforeRootT = tb ; beforeRootG = gb ; afterRootT = shiftedBy ( beforeRootT , convergence ) ; afterRootG = f . value ( afterRootT ) ; } else if ( ga != _NUM ) { final double newGa = f . value ( ta ) ; if ( ga > _NUM != newGa > _NUM ) { beforeRootT = ta ; beforeRootG = newGa ; afterRootT = minTime ( shiftedBy ( beforeRootT , convergence ) , tb ) ; afterRootG = f . value ( afterRootT ) ; } } double loopT = ta , loopG = ga ; while ( ( afterRootG == _NUM || afterRootG > _NUM == g0Positive ) && strictlyAfter ( afterRootT , tb ) ) { if ( loopG == _NUM ) { beforeRootT = loopT ; beforeRootG = loopG ; afterRootT = minTime ( shiftedBy ( beforeRootT , convergence ) , tb ) ; afterRootG = f . value ( afterRootT ) ; } else { if ( forward ) { final Interval interval = solver . solveInterval ( maxIterationCount , f , loopT , tb ) ; beforeRootT = interval . getLeftAbscissa ( ) ; beforeRootG = interval . getLeftValue ( ) ; afterRootT = interval . getRightAbscissa ( ) ; afterRootG = interval . getRightValue ( ) ; } else { final Interval interval = solver . solveInterval ( maxIterationCount , f , tb , loopT ) ; beforeRootT = interval . getRightAbscissa ( ) ; beforeRootG = interval . getRightValue ( ) ; afterRootT = interval . getLeftAbscissa ( ) ; afterRootG = interval . getLeftValue ( ) ; } } if ( beforeRootT == afterRootT ) { afterRootT = nextAfter ( afterRootT ) ; afterRootG = f . value ( afterRootT ) ; } check ( ( forward && afterRootT > beforeRootT ) || ( ! forward && afterRootT < beforeRootT ) ) ; loopT = afterRootT ; loopG = afterRootG ; } if ( afterRootG == _NUM || afterRootG > _NUM == g0Positive ) { return _BOOL ; } else { check ( ! Double . isNaN ( beforeRootT ) && ! Double . isNaN ( beforeRootG ) ) ; increasing = ! g0Positive ; pendingEventTime = beforeRootT ; stopTime = beforeRootG == _NUM ? beforeRootT : afterRootT ; pendingEvent = _BOOL ; afterEvent = afterRootT ; afterG = afterRootG ; check ( afterG > _NUM == increasing ) ; check ( increasing == gb >= ga ) ; return _BOOL ; } }
84127	public static int compare ( Comparable c1 , Comparable c2 , boolean nullGreater ) { if ( c1 == c2 ) { return _NUM ; } else if ( c1 == null ) { return ( nullGreater ? _NUM : - _NUM ) ; } else if ( c2 == null ) { return ( nullGreater ? - _NUM : _NUM ) ; } return c1 . compareTo ( c2 ) ; }
41329	public boolean checkRootBySuperUserApk ( ) { File suApk = new File ( SU_APK ) ; if ( suApk != null && suApk . exists ( ) ) { return _BOOL ; } return _BOOL ; }
4392	int addExpression ( Expression expression ) ;
6045	boolean trackMotionScroll ( int deltaY , int incrementalDeltaY ) { final int childCount = getChildCount ( ) ; if ( childCount == _NUM ) { return _BOOL ; } final int firstTop = getScrollChildTop ( ) ; final int lastBottom = getScrollChildBottom ( ) ; final Rect listPadding = mListPadding ; final int end = getHeight ( ) - listPadding . bottom ; final int spaceAbove = listPadding . top - getFillChildTop ( ) ; final int spaceBelow = getFillChildBottom ( ) - end ; final int height = getHeight ( ) - getPaddingBottom ( ) - getPaddingTop ( ) ; if ( deltaY < _NUM ) { deltaY = Math . max ( - ( height - _NUM ) , deltaY ) ; } else { deltaY = Math . min ( height - _NUM , deltaY ) ; } if ( incrementalDeltaY < _NUM ) { incrementalDeltaY = Math . max ( - ( height - _NUM ) , incrementalDeltaY ) ; } else { incrementalDeltaY = Math . min ( height - _NUM , incrementalDeltaY ) ; } final int firstPosition = mFirstPosition ; if ( firstPosition == _NUM && firstTop >= listPadding . top && deltaY >= _NUM ) { return _BOOL ; } if ( firstPosition + childCount == mItemCount && lastBottom <= end && deltaY <= _NUM ) { return _BOOL ; } final boolean down = incrementalDeltaY < _NUM ; final int headerViewsCount = getHeaderViewsCount ( ) ; final int footerViewsStart = mItemCount - getFooterViewsCount ( ) ; int start = _NUM ; int count = _NUM ; if ( down ) { final int top = listPadding . top - incrementalDeltaY ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; if ( child . getBottom ( ) >= top ) { break ; } else { count ++ ; int position = firstPosition + i ; if ( position >= headerViewsCount && position < footerViewsStart ) { mRecycler . addScrapView ( child ) ; if ( ViewDebug . TRACE_RECYCLER ) { ViewDebug . trace ( child , ViewDebug . RecyclerTraceType . MOVE_TO_SCRAP_HEAP , firstPosition + i , - _NUM ) ; } } } } } else { final int bottom = getHeight ( ) - listPadding . bottom - incrementalDeltaY ; for ( int i = childCount - _NUM ; i >= _NUM ; i -- ) { final View child = getChildAt ( i ) ; if ( child . getTop ( ) <= bottom ) { break ; } else { start = i ; count ++ ; int position = firstPosition + i ; if ( position >= headerViewsCount && position < footerViewsStart ) { mRecycler . addScrapView ( child ) ; if ( ViewDebug . TRACE_RECYCLER ) { ViewDebug . trace ( child , ViewDebug . RecyclerTraceType . MOVE_TO_SCRAP_HEAP , firstPosition + i , - _NUM ) ; } } } } } mMotionViewNewTop = mMotionViewOriginalTop + deltaY ; mBlockLayoutRequests = _BOOL ; if ( count > _NUM ) { detachViewsFromParent ( start , count ) ; } tryOffsetChildrenTopAndBottom ( incrementalDeltaY ) ; if ( down ) { mFirstPosition += count ; } invalidate ( ) ; final int absIncrementalDeltaY = Math . abs ( incrementalDeltaY ) ; if ( spaceAbove < absIncrementalDeltaY || spaceBelow < absIncrementalDeltaY ) { fillGap ( down ) ; } mBlockLayoutRequests = _BOOL ; invokeOnItemScrollListener ( ) ; awakenScrollBars ( ) ; return _BOOL ; }
73531	public static < E > E syncRest ( final Iterator < ? extends Object > iterator , final Callable < E > task ) throws Exception { if ( iterator . hasNext ( ) ) { synchronized ( iterator . next ( ) ) { return syncRest ( iterator , task ) ; } } else { return task . call ( ) ; } }
81999	private static Component findByName ( Container root , String componentName ) { if ( verbose ) { log ( _STR + root + _STR + componentName + _STR ) ; } int count = root . getComponentCount ( ) ; for ( int iter = _NUM ; iter < count ; iter ++ ) { Component c = root . getComponentAt ( iter ) ; String n = c . getName ( ) ; if ( n != null && n . equals ( componentName ) ) { return c ; } if ( c instanceof Container ) { c = findByName ( ( Container ) c , componentName ) ; if ( c != null ) { return c ; } } } return null ; }
63640	public boolean isFingerprint ( ClassTemplate classTemplate ) { return fingerprintClass . equals ( classTemplate . getImplementingClass ( ) ) ; }
32588	public void writeField ( final String name , final float value ) throws java . io . IOException { writeField ( name , Float . toString ( value ) ) ; }
7933	private List extractColumnKeys ( String line ) { List keys = new java . util . ArrayList ( ) ; int fieldIndex = _NUM ; int start = _NUM ; for ( int i = _NUM ; i < line . length ( ) ; i ++ ) { if ( line . charAt ( i ) == this . fieldDelimiter ) { if ( fieldIndex > _NUM ) { String key = line . substring ( start , i ) ; keys . add ( removeStringDelimiters ( key ) ) ; } start = i + _NUM ; fieldIndex ++ ; } } String key = line . substring ( start , line . length ( ) ) ; keys . add ( removeStringDelimiters ( key ) ) ; return keys ; }
36710	protected void drawRhombus ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean shadow ) { int halfWidth = w / _NUM ; int halfHeight = h / _NUM ; Polygon rhombus = new Polygon ( ) ; rhombus . addPoint ( x + halfWidth , y ) ; rhombus . addPoint ( x + w , y + halfHeight ) ; rhombus . addPoint ( x + halfWidth , y + h ) ; rhombus . addPoint ( x , y + halfHeight ) ; drawPolygon ( rhombus , fillColor , fillPaint , penColor , shadow ) ; }
25932	private void convertAndFillByteBufferListToByteArrayList ( List < byte [ ] > dictionaryValues , List < ByteBuffer > dictionaryValueBufferList ) { for ( ByteBuffer buffer : dictionaryValueBufferList ) { int length = buffer . limit ( ) ; byte [ ] value = new byte [ length ] ; buffer . get ( value , _NUM , value . length ) ; dictionaryValues . add ( value ) ; } }
47884	static Object instantiate ( Class < ? > sibling , String className ) throws InstantiationException , IllegalAccessException , ClassNotFoundException { ClassLoader cl = sibling . getClassLoader ( ) ; Class < ? > cls = ClassFinder . findClass ( className , cl ) ; return cls . newInstance ( ) ; }
17966	private byte [ ] generateDerivedKey ( int bytesNeeded ) { byte [ ] buf = new byte [ digest . getDigestSize ( ) ] ; byte [ ] key = new byte [ bytesNeeded ] ; int offset = _NUM ; for ( ; ; ) { digest . update ( password , _NUM , password . length ) ; digest . update ( salt , _NUM , salt . length ) ; digest . doFinal ( buf , _NUM ) ; int len = ( bytesNeeded > buf . length ) ? buf . length : bytesNeeded ; System . arraycopy ( buf , _NUM , key , offset , len ) ; offset += len ; bytesNeeded -= len ; if ( bytesNeeded == _NUM ) { break ; } digest . reset ( ) ; digest . update ( buf , _NUM , buf . length ) ; } return key ; }
59093	public void testSystemRunFinalizationReturnsEvenIfQueueIsNonEmpty ( ) throws Exception { AtomicInteger count = new AtomicInteger ( ) ; AtomicBoolean keepGoing = new AtomicBoolean ( _BOOL ) ; createChainedFinalizer ( count , keepGoing ) ; while ( count . get ( ) == _NUM ) { Thread . sleep ( _NUM ) ; FinalizationTester . induceFinalization ( ) ; } keepGoing . set ( _BOOL ) ; assertTrue ( count . get ( ) > _NUM ) ; }
8848	public synchronized void show ( Bundle options ) { if ( DEBUG ) Log . d ( TAG , _STR + mKeyguardView ) ; boolean enableScreenRotation = shouldEnableScreenRotation ( ) ; maybeCreateKeyguardLocked ( enableScreenRotation , _BOOL , options ) ; maybeEnableScreenRotation ( enableScreenRotation ) ; final int visFlags = View . STATUS_BAR_DISABLE_HOME ; if ( DEBUG ) Log . v ( TAG , _STR + Integer . toHexString ( visFlags ) + _STR ) ; mKeyguardHost . setSystemUiVisibility ( visFlags ) ; mViewManager . updateViewLayout ( mKeyguardHost , mWindowLayoutParams ) ; mKeyguardHost . setVisibility ( View . VISIBLE ) ; mKeyguardView . show ( ) ; mKeyguardView . requestFocus ( ) ; }
46717	public static int computeStringWidth ( FontMetrics fm , String str ) { return SwingUtilities2 . stringWidth ( null , fm , str ) ; }
86414	private boolean passesSanityCheck ( AccessibilityEvent event ) { final CharSequence afterText = getEventText ( event ) ; final CharSequence beforeText = event . getBeforeText ( ) ; if ( ( event . getAddedCount ( ) == _NUM ) && ( event . getRemovedCount ( ) == beforeText . length ( ) ) ) { return _BOOL ; } if ( afterText == null || beforeText == null ) { return _BOOL ; } final int diff = ( event . getAddedCount ( ) - event . getRemovedCount ( ) ) ; return ( ( beforeText . length ( ) + diff ) == afterText . length ( ) ) ; }
11275	public void actionPerformed ( ActionEvent ae ) { String command = ae . getActionCommand ( ) ; if ( command == DisplayPaletteCmd ) { if ( Debug . debugging ( _STR ) ) { Debug . output ( getName ( ) + _STR ) ; } showPalette ( ) ; } else if ( command == HidePaletteCmd ) { if ( Debug . debugging ( _STR ) ) { Debug . output ( getName ( ) + _STR ) ; } hidePalette ( ) ; } else if ( command == DisplayPropertiesCmd ) { Inspector inspector = new Inspector ( ) ; inspector . inspectPropertyConsumer ( this ) ; } }
43716	public static String toString ( LocalDate data ) { return data == null ? _STR : data . format ( formatter ( _STR ) ) ; }
52507	@ JsonCreator public DataSourceMetadata ( @ JsonProperty ( _STR ) String name , @ JsonProperty ( _STR ) Map < String , String > properties , @ JsonProperty ( _STR ) List < DataSegment > segments ) { this . name = name ; this . properties = Collections . unmodifiableMap ( properties ) ; this . segments = Collections . unmodifiableList ( segments ) ; }
86966	public EMail createEMail ( String value ) { EmailField emailImpl = new EmailField ( ) ; try { emailImpl . setValue ( value ) ; } catch ( SdpException s ) { s . printStackTrace ( ) ; } return emailImpl ; }
66442	public AddressLookup ( String serverUrl , String serialNo , String password ) { this . serverUrl = serverUrl . trim ( ) ; this . clientID = serialNo . trim ( ) ; this . accessCode = password . trim ( ) ; }
38601	public void addChangeListener ( ChangeListener l ) { m_ChangeListeners . add ( l ) ; }
72243	public Node ( String permission , boolean value , boolean override , long expireAt , String server , String world , ContextSet contexts ) { if ( permission == null || permission . equals ( _STR ) ) { throw new IllegalArgumentException ( _STR ) ; } if ( server != null && ( server . equalsIgnoreCase ( _STR ) || server . equals ( _STR ) ) ) { server = null ; } if ( world != null && world . equals ( _STR ) ) { world = null ; } if ( world != null && server == null ) { server = _STR ; } this . permission = permission ; this . value = value ; this . override = override ; this . expireAt = expireAt ; this . server = server ; this . world = world ; this . contexts = contexts == null ? ContextSet . empty ( ) : contexts . makeImmutable ( ) ; }
85209	public Cell ( int rowspan , int colspan ) { this . rowspan = Math . max ( rowspan , _NUM ) ; this . colspan = Math . max ( colspan , _NUM ) ; }
21141	private void initializeLocalAndTargetInfo ( ) throws Exception { targetSiteInfo = coordinator . getTargetInfo ( SiteInfo . class ) ; if ( targetSiteInfo == null ) { targetSiteInfo = new SiteInfo ( ) ; try { coordinator . setTargetInfo ( targetSiteInfo , _BOOL ) ; log . info ( _STR , targetSiteInfo ) ; } catch ( CoordinatorClientException e ) { log . info ( _STR ) ; retrySleep ( ) ; throw e ; } } localVdcPropInfo = localRepository . getVdcPropertyInfo ( ) ; String localConfigVersion = localVdcPropInfo . getProperty ( VdcConfigUtil . VDC_CONFIG_VERSION ) ; coordinator . setNodeSessionScopeInfo ( new VdcConfigVersion ( localConfigVersion ) ) ; targetVdcPropInfo = loadVdcConfig ( ) ; if ( isGeoUpgradeFromPreYoda ( ) ) { log . info ( _STR ) ; localVdcPropInfo . addProperty ( VdcConfigUtil . VDC_CONFIG_VERSION , String . valueOf ( targetSiteInfo . getVdcConfigVersion ( ) ) ) ; localRepository . setVdcPropertyInfo ( localVdcPropInfo ) ; } else { if ( localVdcPropInfo . getProperty ( VdcConfigUtil . VDC_CONFIG_VERSION ) == null ) { localVdcPropInfo = new PropertyInfoExt ( targetVdcPropInfo . getAllProperties ( ) ) ; localVdcPropInfo . addProperty ( VdcConfigUtil . VDC_CONFIG_VERSION , String . valueOf ( targetSiteInfo . getVdcConfigVersion ( ) ) ) ; localRepository . setVdcPropertyInfo ( localVdcPropInfo ) ; String vdc_ids = targetVdcPropInfo . getProperty ( VdcConfigUtil . VDC_IDS ) ; String [ ] vdcIds = vdc_ids . split ( _STR ) ; if ( vdcIds . length > _NUM ) { log . info ( _STR ) ; reboot ( ) ; } } } targetPowerOffState = coordinator . getTargetInfo ( PowerOffState . class ) ; if ( targetPowerOffState == null ) { try { coordinator . setTargetInfo ( new PowerOffState ( PowerOffState . State . NONE ) ) ; targetPowerOffState = coordinator . getTargetInfo ( PowerOffState . class ) ; log . info ( _STR , PowerOffState . State . NONE ) ; } catch ( CoordinatorClientException e ) { log . info ( _STR ) ; retrySleep ( ) ; throw e ; } } }
39556	@ Override public void openElement ( String tagName ) { XMLElement newElement = new XMLElement ( ) ; newElement . setName ( tagName ) ; current . addChild ( newElement ) ; stack . push ( current ) ; current = newElement ; }
53910	public Format ( String pFormatString ) { String formatVars [ ] = pFormatString . split ( _STR ) ; mId = Integer . parseInt ( formatVars [ _NUM ] ) ; }
5535	public boolean equals ( Object interval ) { if ( intervals == null ) { return _BOOL ; } return intervals . contains ( interval ) ; }
81981	public static String relativeToAbsolute ( String baseURL , String relativeURL ) { if ( relativeURL . startsWith ( _STR ) ) { return getURLProtocol ( baseURL ) + _STR + getURLHost ( baseURL ) + relativeURL ; } else { return getURLProtocol ( baseURL ) + _STR + getURLHost ( baseURL ) + getURLBasePath ( baseURL ) + relativeURL ; } }
53945	public void start ( ) { if ( setState ( EnumSet . of ( TaskState . INITIAL , TaskState . QUEUED ) , TaskState . RUNNING ) ) { DHT . logDebug ( _STR + toString ( ) ) ; startTime = System . currentTimeMillis ( ) ; try { serializedUpdate . run ( ) ; } catch ( Exception e ) { DHT . log ( e , LogLevel . Error ) ; } } }
27586	public JournalIndex ( final IRawStore store , final Checkpoint checkpoint , final IndexMetadata metadata , final boolean readOnly ) { super ( store , checkpoint , metadata , readOnly ) ; }
50108	private void accesBreakpointInstruction ( ArrayList < Instruction > instructions , int lineNumber , int op , BPINSTRUCTION_STATUS status ) { for ( int i = _NUM ; i < instructions . size ( ) ; i ++ ) { Instruction currInst = instructions . get ( i ) ; if ( op == _NUM ) { if ( currInst instanceof MRJobInstruction ) { MRJobInstruction currMRInst = ( MRJobInstruction ) currInst ; if ( currMRInst . findMRInstructions ( lineNumber ) ) { BreakPointInstruction breakpoint = new BreakPointInstruction ( ) ; breakpoint . setLocation ( currInst ) ; breakpoint . setInstID ( instID ++ ) ; breakpoint . setBPInstructionLocation ( location ) ; instructions . add ( i , breakpoint ) ; DMLBreakpointManager . insertBreakpoint ( breakpoint , lineNumber ) ; return ; } } else if ( currInst instanceof CPInstruction || currInst instanceof SPInstruction ) { if ( currInst . getLineNum ( ) == lineNumber ) { BreakPointInstruction breakpoint = new BreakPointInstruction ( ) ; breakpoint . setLocation ( currInst ) ; breakpoint . setInstID ( instID ++ ) ; breakpoint . setBPInstructionLocation ( location ) ; instructions . add ( i , breakpoint ) ; DMLBreakpointManager . insertBreakpoint ( breakpoint , lineNumber ) ; return ; } } else if ( currInst instanceof BreakPointInstruction && currInst . getLineNum ( ) == lineNumber ) { BreakPointInstruction breakpoint = ( BreakPointInstruction ) currInst ; breakpoint . setBPInstructionStatus ( BPINSTRUCTION_STATUS . ENABLED ) ; breakpoint . setBPInstructionLocation ( location ) ; instructions . set ( i , breakpoint ) ; DMLBreakpointManager . updateBreakpoint ( lineNumber , status ) ; return ; } } else { if ( currInst instanceof BreakPointInstruction && currInst . getLineNum ( ) == lineNumber ) { if ( op == _NUM ) { BreakPointInstruction breakpoint = ( BreakPointInstruction ) currInst ; breakpoint . setLocation ( currInst ) ; breakpoint . setInstID ( currInst . getInstID ( ) ) ; breakpoint . setBPInstructionStatus ( status ) ; breakpoint . setBPInstructionLocation ( location ) ; instructions . set ( i , breakpoint ) ; DMLBreakpointManager . updateBreakpoint ( lineNumber , status ) ; } else { instructions . remove ( i ) ; DMLBreakpointManager . removeBreakpoint ( lineNumber , status ) ; } return ; } } } }
19718	private void closeFile ( ) { if ( plogStream != null ) { try { plogStream . close ( ) ; logger . info ( _STR + plogFilename + _STR ) ; } catch ( IOException e ) { logger . warn ( _STR + plogFilename ) ; } finally { plogStream = null ; } } }
16369	public void nextToken ( ) { previousLine = line ; previousColumn = column ; while ( pos < matcher . regionStart ( ) ) { if ( text . charAt ( pos ) == _STR ) { ++ line ; column = _NUM ; } else { ++ column ; } ++ pos ; } if ( matcher . regionStart ( ) == matcher . regionEnd ( ) ) { currentToken = _STR ; } else { matcher . usePattern ( TOKEN ) ; if ( matcher . lookingAt ( ) ) { currentToken = matcher . group ( ) ; matcher . region ( matcher . end ( ) , matcher . regionEnd ( ) ) ; } else { currentToken = String . valueOf ( text . charAt ( pos ) ) ; matcher . region ( pos + _NUM , matcher . regionEnd ( ) ) ; } skipWhitespace ( ) ; } }
41410	private void parseFirstConsonant ( ) { Iterator iter = alFirstConsonants . iterator ( ) ; while ( iter . hasNext ( ) ) { String strFirstCon = ( String ) iter . next ( ) ; if ( strSyllable . startsWith ( strFirstCon , iCurPos ) ) { strFirstConsonant = strFirstCon ; iCurPos += strFirstCon . length ( ) ; return ; } } strFirstConsonant = ZERO ; }
80158	private BuddyPanelController ( ) { buddyPanel = new JPanel ( ) ; buddyPanel . setLayout ( new SBoxLayout ( SBoxLayout . VERTICAL ) ) ; model = new BuddyListModel ( ) ; JList < Buddy > list = new BuddyPanel ( model ) ; buddyPanel . add ( list , SLayout . EXPAND_X ) ; }
38403	private void removeGapsWithEdgeConcentration ( int nodesLevel [ ] ) { final int temp = m_nodes . size ( ) , temp2 = graphMatrix [ _NUM ] . length ; int tempCnt = _NUM ; for ( int n = _NUM ; n < temp ; n ++ ) { for ( int i = _NUM ; i < temp2 ; i ++ ) { if ( graphMatrix [ n ] [ i ] > _NUM ) { if ( nodesLevel [ i ] > nodesLevel [ n ] + _NUM ) { int tempLevel = nodesLevel [ n ] ; boolean tempNodePresent = _BOOL ; int k = temp ; int tempnode = n ; while ( tempLevel < nodesLevel [ i ] - _NUM ) { tempNodePresent = _BOOL ; for ( ; k < graphMatrix . length ; k ++ ) { if ( graphMatrix [ tempnode ] [ k ] > _NUM ) { tempNodePresent = _BOOL ; break ; } } if ( tempNodePresent ) { tempnode = k ; k = k + _NUM ; tempLevel ++ ; } else { if ( tempnode != n ) { tempnode = k - _NUM ; } break ; } } if ( m_nodes . get ( tempnode ) . nodeType == SINGULAR_DUMMY ) { m_nodes . get ( tempnode ) . nodeType = PLURAL_DUMMY ; } if ( tempNodePresent ) { graphMatrix [ tempnode ] [ i ] = graphMatrix [ n ] [ i ] ; graphMatrix [ i ] [ tempnode ] = - graphMatrix [ n ] [ i ] ; graphMatrix [ n ] [ i ] = _NUM ; graphMatrix [ i ] [ n ] = _NUM ; continue ; } int len = graphMatrix . length ; int tempMatrix [ ] [ ] = new int [ graphMatrix . length + ( nodesLevel [ i ] - nodesLevel [ tempnode ] - _NUM ) ] [ graphMatrix . length + ( nodesLevel [ i ] - nodesLevel [ tempnode ] - _NUM ) ] ; int level = nodesLevel [ tempnode ] + _NUM ; copyMatrix ( graphMatrix , tempMatrix ) ; String s1 = new String ( _STR + tempCnt ++ ) ; m_nodes . add ( new GraphNode ( s1 , s1 , SINGULAR_DUMMY ) ) ; int temp3 [ ] = new int [ nodeLevels [ level ] . length + _NUM ] ; System . arraycopy ( nodeLevels [ level ] , _NUM , temp3 , _NUM , nodeLevels [ level ] . length ) ; temp3 [ temp3 . length - _NUM ] = m_nodes . size ( ) - _NUM ; nodeLevels [ level ] = temp3 ; temp3 = new int [ m_nodes . size ( ) + _NUM ] ; System . arraycopy ( nodesLevel , _NUM , temp3 , _NUM , nodesLevel . length ) ; temp3 [ m_nodes . size ( ) - _NUM ] = level ; nodesLevel = temp3 ; level ++ ; int m ; for ( m = len ; m < len + nodesLevel [ i ] - nodesLevel [ tempnode ] - _NUM - _NUM ; m ++ ) { String s2 = new String ( _STR + tempCnt ++ ) ; m_nodes . add ( new GraphNode ( s2 , s2 , SINGULAR_DUMMY ) ) ; temp3 = new int [ nodeLevels [ level ] . length + _NUM ] ; System . arraycopy ( nodeLevels [ level ] , _NUM , temp3 , _NUM , nodeLevels [ level ] . length ) ; temp3 [ temp3 . length - _NUM ] = m_nodes . size ( ) - _NUM ; nodeLevels [ level ] = temp3 ; temp3 = new int [ m_nodes . size ( ) + _NUM ] ; System . arraycopy ( nodesLevel , _NUM , temp3 , _NUM , nodesLevel . length ) ; temp3 [ m_nodes . size ( ) - _NUM ] = level ; nodesLevel = temp3 ; level ++ ; tempMatrix [ m ] [ m + _NUM ] = tempMatrix [ n ] [ i ] ; if ( m > len ) { tempMatrix [ m ] [ m - _NUM ] = - _NUM * tempMatrix [ n ] [ i ] ; } } tempMatrix [ m ] [ i ] = tempMatrix [ n ] [ i ] ; tempMatrix [ tempnode ] [ len ] = tempMatrix [ n ] [ i ] ; tempMatrix [ len ] [ tempnode ] = - _NUM * tempMatrix [ n ] [ i ] ; tempMatrix [ i ] [ m ] = - _NUM * tempMatrix [ n ] [ i ] ; if ( m > len ) { tempMatrix [ m ] [ m - _NUM ] = - _NUM * tempMatrix [ n ] [ i ] ; } tempMatrix [ n ] [ i ] = _NUM ; tempMatrix [ i ] [ n ] = _NUM ; graphMatrix = tempMatrix ; } else { graphMatrix [ i ] [ n ] = - _NUM * graphMatrix [ n ] [ i ] ; } } } } }
61084	public static byte [ ] asUnsignedByteArray ( BigInteger value ) { byte [ ] bytes = value . toByteArray ( ) ; if ( bytes [ _NUM ] == _NUM ) { byte [ ] tmp = new byte [ bytes . length - _NUM ] ; System . arraycopy ( bytes , _NUM , tmp , _NUM , tmp . length ) ; return tmp ; } return bytes ; }
55716	public static TestResult execJavac ( String toCompile , File dir , String jflexTestVersion ) { Project p = new Project ( ) ; Javac javac = new Javac ( ) ; Path path = new Path ( p , dir . toString ( ) ) ; javac . setProject ( p ) ; javac . setSrcdir ( path ) ; javac . setDestdir ( dir ) ; javac . setTarget ( javaVersion ) ; javac . setSource ( javaVersion ) ; javac . setSourcepath ( new Path ( p , _STR ) ) ; javac . setIncludes ( toCompile ) ; Path classPath = javac . createClasspath ( ) ; classPath . setPath ( System . getProperty ( _STR ) + _STR + jflexTestVersion + _STR + jflexTestVersion + _STR ) ; ByteArrayOutputStream out = new ByteArrayOutputStream ( ) ; PrintStream outSafe = System . err ; System . setErr ( new PrintStream ( out ) ) ; try { javac . execute ( ) ; return new TestResult ( out . toString ( ) , _BOOL ) ; } catch ( BuildException e ) { return new TestResult ( e + System . getProperty ( _STR ) + out . toString ( ) , _BOOL ) ; } finally { System . setErr ( outSafe ) ; } }
17634	private final boolean parkAndCheckInterrupt ( ) { LockSupport . park ( this ) ; return Thread . interrupted ( ) ; }
8592	public static CLPlatform [ ] listGPUPoweredPlatforms ( ) { CLPlatform [ ] platforms = listPlatforms ( ) ; List < CLPlatform > out = new ArrayList < CLPlatform > ( platforms . length ) ; for ( CLPlatform platform : platforms ) { if ( platform . listGPUDevices ( _BOOL ) . length > _NUM ) out . add ( platform ) ; } return out . toArray ( new CLPlatform [ out . size ( ) ] ) ; }
16920	public ActionRequestHelper dependsOn ( ActionRequestHelper dependency ) { mDependencies . add ( dependency ) ; return this ; }
63276	static boolean isDate ( Object obj ) { return obj instanceof Date && obj . getClass ( ) == Date . class ; }
6188	public static String toXml ( final Config toConvert , Boolean prettyXml ) throws JAXBException , IOException { String retVal = _STR ; try ( StringWriter writer = new StringWriter ( ) ) { toXml ( toConvert , writer , prettyXml ) ; retVal = writer . toString ( ) ; return retVal ; } }
72557	private static List < Vector2D > buildQuadrilateral ( final Vector2D ... points ) { List < Vector2D > quadrilateral = new ArrayList < Vector2D > ( ) ; for ( Vector2D p : points ) { if ( ! quadrilateral . contains ( p ) ) { quadrilateral . add ( p ) ; } } return quadrilateral ; }
53272	private void heapifyUp ( int twopos , Comparable < Object > cur ) { while ( twopos > _NUM ) { final int parent = ( twopos - _NUM ) > > > _NUM ; Comparable < Object > par = twoheap [ parent ] ; if ( cur . compareTo ( par ) <= _NUM ) { break ; } twoheap [ twopos ] = par ; twopos = parent ; } twoheap [ twopos ] = cur ; }
76769	public void insert ( String key , char val ) { int len = key . length ( ) + _NUM ; if ( freenode + len > eq . length ) { redimNodeArrays ( eq . length + BLOCK_SIZE ) ; } char strkey [ ] = new char [ len -- ] ; key . getChars ( _NUM , len , strkey , _NUM ) ; strkey [ len ] = _NUM ; root = insert ( root , strkey , _NUM , val ) ; }
27560	void fullyUnlock ( ) { takeLock . unlock ( ) ; putLock . unlock ( ) ; }
53920	private static boolean isSubFormat ( String filename ) { for ( String ext : SUB_EXTENSIONS ) { if ( filename . contains ( _STR + ext ) ) { return _BOOL ; } } return _BOOL ; }
48646	void write ( Environment env , DataOutputStream out , ConstantPool tab ) throws IOException { out . writeByte ( CONSTANT_NAMEANDTYPE ) ; out . writeShort ( tab . index ( name ) ) ; out . writeShort ( tab . index ( type ) ) ; }
14974	public static void initializeProperties ( Properties properties , boolean reset , boolean withDefaults ) { Properties defaultProp = null ; if ( withDefaults ) { SSOToken appToken = AccessController . doPrivileged ( AdminTokenAction . getInstance ( ) ) ; defaultProp = ServerConfiguration . getDefaults ( appToken ) ; } PropertiesHolder oldProps ; PropertiesHolder newProps ; do { oldProps = propertiesHolderRef . get ( ) ; final Properties combined = new Properties ( ) ; if ( defaultProp != null ) { combined . putAll ( defaultProp ) ; } if ( ! reset ) { combined . putAll ( oldProps . properties ) ; } combined . putAll ( properties ) ; newProps = new PropertiesHolder ( Maps . fromProperties ( combined ) ) ; } while ( ! propertiesHolderRef . compareAndSet ( oldProps , newProps ) ) ; }
73423	public void addNetworkListener ( final NetworkListener listener ) { networkListeners . add ( listener ) ; }
26329	public static void appendContentPrefix ( HttpServletRequest request , Appendable urlBuffer ) throws IOException { appendContentPrefix ( request , urlBuffer , null ) ; }
73271	public void addErrorListener ( final ErrorListener errorListener ) { if ( errorListeners == null ) { errorListeners = new ArrayList < ErrorListener > ( ) ; } errorListeners . add ( errorListener ) ; }
72016	private void validateClassName ( String className ) { String nvalue = className . trim ( ) ; if ( ! nvalue . matches ( CLASS_RE ) ) { throw PropertyException . illegalPropertyValueException ( this , className ) ; } }
36816	public static void importBaseTypes ( final CConnection connection , final int rawModuleId , final int moduleId ) throws SQLException { final String query = _STR + CTableNames . BASE_TYPES_TABLE + _STR + moduleId + _STR + _STR + String . format ( CTableNames . RAW_BASE_TYPES , rawModuleId ) ; connection . executeUpdate ( query , _BOOL ) ; final String updateSequence = String . format ( _STR + _STR , CTableNames . BASE_TYPES_TABLE , CTableNames . BASE_TYPES_TABLE ) ; connection . executeQuery ( updateSequence , _BOOL ) ; }
39386	@ SuppressWarnings ( _STR ) public Object readMatrixOld ( Element node ) throws Exception { weka . core . Matrix matrix ; weka . core . matrix . Matrix matrixNew ; if ( DEBUG ) { trace ( new Throwable ( ) , node . getAttribute ( ATT_NAME ) ) ; } m_CurrentNode = node ; matrixNew = ( weka . core . matrix . Matrix ) readMatrix ( node ) ; matrix = new weka . core . Matrix ( matrixNew . getArrayCopy ( ) ) ; return matrix ; }
21908	public void recordFileSystemOperation ( DbClient dbClient , OperationTypeEnum opType , Operation . Status status , Object ... extParam ) { try { boolean opStatus = ( Operation . Status . ready == status ) ? _BOOL : _BOOL ; String evType ; evType = opType . getEvType ( opStatus ) ; String evDesc = opType . getDescription ( ) ; String opStage = AuditLogManager . AUDITOP_END ; _logger . info ( _STR , opType . toString ( ) , evType . toString ( ) + _STR + evDesc ) ; URI uri = ( URI ) extParam [ _NUM ] ; recordBourneFileSystemEvent ( dbClient , evType , status , evDesc , uri ) ; auditFile ( dbClient , opType , opStatus , opStage , uri . toString ( ) ) ; } catch ( Exception e ) { _logger . error ( _STR , opType . toString ( ) , e ) ; } }
15439	public CoreTokenException ( int errorCode ) { this . errorCode = errorCode ; this . message = getLocalizedMessage ( Locale . getDefault ( ) ) ; }
9781	public DExamineSsl ( JFrame parent , KseFrame kseFrame ) { super ( parent , res . getString ( _STR ) , Dialog . ModalityType . DOCUMENT_MODAL ) ; this . kseFrame = kseFrame ; initComponents ( ) ; }
84940	private static List < String > computeDynamicVMArgs ( IJavaProject javaProject ) { ArrayList < String > out = new ArrayList < String > ( ) ; String devJarPath = maybeGetDevJarPath ( javaProject ) ; if ( devJarPath . length ( ) > _NUM ) { out . add ( _STR + devJarPath + _STR ) ; } return out ; }
10002	static void normalize ( StringBuilder number ) { String normalizedNumber = normalize ( number . toString ( ) ) ; number . replace ( _NUM , number . length ( ) , normalizedNumber ) ; }
72433	public double [ ] skipTo ( final int index ) throws MathIllegalArgumentException { if ( index == _NUM ) { Arrays . fill ( x , _NUM ) ; } else { final int i = index - _NUM ; final long grayCode = i ^ ( i > > _NUM ) ; for ( int j = _NUM ; j < dimension ; j ++ ) { long result = _NUM ; for ( int k = _NUM ; k <= BITS ; k ++ ) { final long shift = grayCode > > ( k - _NUM ) ; if ( shift == _NUM ) { break ; } final long ik = shift & _NUM ; result ^= ik * direction [ j ] [ k ] ; } x [ j ] = result ; } } count = index ; return nextVector ( ) ; }
14765	public void removeOrganizationConfiguration ( String orgName , String groupName , boolean checkLegacyMode ) throws SMSException , SSOException { if ( ( groupName == null ) || groupName . length ( ) == _NUM ) { groupName = SMSUtils . DEFAULT ; } String orgdn = DNMapper . orgNameToDN ( orgName ) ; validateSCM ( ) ; String odn = scm . constructServiceConfigDN ( groupName , CreateServiceConfig . ORG_CONFIG_NODE , orgdn ) ; CachedSMSEntry cEntry = CachedSMSEntry . getInstance ( token , odn ) ; if ( cEntry . isNewEntry ( ) ) { return ; } if ( checkLegacyMode && ServiceManager . isCoexistenceMode ( ) && groupName . equalsIgnoreCase ( SMSUtils . DEFAULT ) ) { OrgConfigViaAMSDK amsdk = new OrgConfigViaAMSDK ( token , DNMapper . realmNameToAMSDKName ( orgdn ) , orgdn ) ; amsdk . unassignService ( serviceName ) ; } if ( ! cEntry . isNewEntry ( ) ) { SMSEntry entry = cEntry . getClonedSMSEntry ( ) ; entry . delete ( token ) ; cEntry . refresh ( entry ) ; } }
73430	public void removeGroupListener ( final GroupListener listener ) { groupListeners . remove ( listener ) ; }
77969	public SetChangelogMapping ( String source , String taskName , int changelogPartitionNumber ) { super ( source ) ; setType ( TYPE ) ; setKey ( taskName ) ; putMessageValue ( CHANGELOG_VALUE_KEY , String . valueOf ( changelogPartitionNumber ) ) ; }
81487	@ Override protected String extractKey ( final String name ) { final String key = unescape ( name . substring ( _NUM , name . length ( ) - _NUM ) ) ; return key . equals ( _STR ) ? null : key ; }
902	private static float spacing ( MotionEvent event ) { float x = event . getX ( _NUM ) - event . getX ( _NUM ) ; float y = event . getY ( _NUM ) - event . getY ( _NUM ) ; return ( float ) Math . sqrt ( x * x + y * y ) ; }
24963	@ SuppressWarnings ( _STR ) public static < K , V > void transformStringMap ( Map < String , String > original , Map < K , V > map , Class < K > keyClass , Class < V > valueClass ) throws PreferenceException { Method parseKeyMethod = findParseMethod ( keyClass ) ; Method parseValueMethod = findParseMethod ( valueClass ) ; if ( ( null != parseKeyMethod ) && ( null != parseValueMethod ) ) { for ( Map . Entry < String , String > toTransformEntry : original . entrySet ( ) ) { try { Object transformedKey = parseKeyMethod . invoke ( null , toTransformEntry . getKey ( ) ) ; Object transformedValue = parseValueMethod . invoke ( null , toTransformEntry . getValue ( ) ) ; if ( keyClass . isAssignableFrom ( transformedKey . getClass ( ) ) && valueClass . isAssignableFrom ( transformedValue . getClass ( ) ) ) { map . put ( ( K ) transformedKey , ( V ) transformedValue ) ; } } catch ( Exception e ) { throw new PreferenceException ( _STR + keyClass . getName ( ) + _STR + valueClass . getName ( ) + _STR , e ) ; } } } else if ( null == parseKeyMethod ) { throw new PreferenceException ( _STR + keyClass . getName ( ) + _STR + valueClass . getName ( ) + _STR + _STR + keyClass . getName ( ) + _STR ) ; } else { throw new PreferenceException ( _STR + keyClass . getName ( ) + _STR + valueClass . getName ( ) + _STR + _STR + valueClass . getName ( ) + _STR ) ; } }
49174	public boolean grabInput ( ) { if ( grabLog . isLoggable ( PlatformLogger . Level . FINE ) ) { grabLog . fine ( _STR , this ) ; } XToolkit . awtLock ( ) ; try { if ( XAwtState . getGrabWindow ( ) == this && XAwtState . isManualGrab ( ) ) { grabLog . fine ( _STR ) ; return _BOOL ; } XBaseWindow prevGrabWindow = XAwtState . getGrabWindow ( ) ; final int eventMask = ( int ) ( XConstants . ButtonPressMask | XConstants . ButtonReleaseMask | XConstants . EnterWindowMask | XConstants . LeaveWindowMask | XConstants . PointerMotionMask | XConstants . ButtonMotionMask ) ; final int ownerEvents = _NUM ; if ( ! XToolkit . getSunAwtDisableGrab ( ) ) { int ptrGrab = XlibWrapper . XGrabPointer ( XToolkit . getDisplay ( ) , getContentWindow ( ) , ownerEvents , eventMask , XConstants . GrabModeAsync , XConstants . GrabModeAsync , XConstants . None , ( XWM . isMotif ( ) ? XToolkit . arrowCursor : XConstants . None ) , XConstants . CurrentTime ) ; if ( ptrGrab != XConstants . GrabSuccess ) { XlibWrapper . XUngrabPointer ( XToolkit . getDisplay ( ) , XConstants . CurrentTime ) ; XAwtState . setGrabWindow ( null ) ; grabLog . fine ( _STR ) ; return _BOOL ; } int keyGrab = XlibWrapper . XGrabKeyboard ( XToolkit . getDisplay ( ) , getContentWindow ( ) , ownerEvents , XConstants . GrabModeAsync , XConstants . GrabModeAsync , XConstants . CurrentTime ) ; if ( keyGrab != XConstants . GrabSuccess ) { XlibWrapper . XUngrabPointer ( XToolkit . getDisplay ( ) , XConstants . CurrentTime ) ; XlibWrapper . XUngrabKeyboard ( XToolkit . getDisplay ( ) , XConstants . CurrentTime ) ; XAwtState . setGrabWindow ( null ) ; grabLog . fine ( _STR ) ; return _BOOL ; } } if ( prevGrabWindow != null ) { prevGrabWindow . ungrabInputImpl ( ) ; } XAwtState . setGrabWindow ( this ) ; grabLog . fine ( _STR ) ; return _BOOL ; } finally { XToolkit . awtUnlock ( ) ; } }
33926	public ComponentManager ( Collection < Sequence > generalSeeds ) { Set < Sequence > seedSet = new LinkedHashSet < > ( generalSeeds . size ( ) ) ; seedSet . addAll ( generalSeeds ) ; this . gralSeeds = Collections . unmodifiableSet ( seedSet ) ; gralComponents = new SequenceCollection ( seedSet ) ; }
82316	public synchronized void deleteObservers ( ) { observers . clear ( ) ; }
62529	public static byte [ ] unsynchronize ( byte [ ] abySource ) { ByteArrayInputStream input = new ByteArrayInputStream ( abySource ) ; ByteArrayOutputStream output = new ByteArrayOutputStream ( abySource . length ) ; int count = _NUM ; while ( input . available ( ) > _NUM ) { int firstByte = input . read ( ) ; count ++ ; output . write ( firstByte ) ; if ( ( firstByte & MPEGFrameHeader . SYNC_BYTE1 ) == MPEGFrameHeader . SYNC_BYTE1 ) { if ( input . available ( ) > _NUM ) { input . mark ( _NUM ) ; int secondByte = input . read ( ) ; if ( ( secondByte & MPEGFrameHeader . SYNC_BYTE2 ) == MPEGFrameHeader . SYNC_BYTE2 ) { if ( logger . isLoggable ( Level . FINEST ) ) { logger . finest ( _STR + count ) ; } output . write ( _NUM ) ; } else if ( secondByte == _NUM ) { if ( logger . isLoggable ( Level . FINEST ) ) { logger . finest ( _STR + count ) ; } output . write ( _NUM ) ; } input . reset ( ) ; } } } if ( ( abySource [ abySource . length - _NUM ] & MPEGFrameHeader . SYNC_BYTE1 ) == MPEGFrameHeader . SYNC_BYTE1 ) { logger . finest ( _STR ) ; output . write ( _NUM ) ; } return output . toByteArray ( ) ; }
68796	private byte [ ] calculateGeneralEncryptionKey ( byte [ ] userPassword , byte [ ] firstDocIdValue , int keyBitLength , int revision , byte [ ] oValue , int pValue , boolean encryptMetadata ) throws GeneralSecurityException { final byte [ ] paddedPassword = padPassword ( userPassword ) ; MessageDigest md5 = createMD5Digest ( ) ; md5 . reset ( ) ; md5 . update ( paddedPassword ) ; md5 . update ( oValue ) ; md5 . update ( ( byte ) ( pValue & _NUM ) ) ; md5 . update ( ( byte ) ( ( pValue > > _NUM ) & _NUM ) ) ; md5 . update ( ( byte ) ( ( pValue > > _NUM ) & _NUM ) ) ; md5 . update ( ( byte ) ( pValue > > _NUM ) ) ; if ( firstDocIdValue != null ) { md5 . update ( firstDocIdValue ) ; } if ( revision >= _NUM && ! encryptMetadata ) { for ( int i = _NUM ; i < _NUM ; ++ i ) { md5 . update ( ( byte ) _NUM ) ; } } byte [ ] hash = md5 . digest ( ) ; final int keyLen = revision == _NUM ? _NUM : ( keyBitLength / _NUM ) ; final byte [ ] key = new byte [ keyLen ] ; if ( revision >= _NUM ) { for ( int i = _NUM ; i < _NUM ; ++ i ) { md5 . update ( hash , _NUM , key . length ) ; digestTo ( md5 , hash ) ; } } System . arraycopy ( hash , _NUM , key , _NUM , key . length ) ; return key ; }
44697	public MessageCapture ( final Logger logger , final boolean captureEntity ) { this ( logger , captureEntity , _BOOL ) ; }
69208	public static final byte [ ] unzip ( byte [ ] in ) throws IOException { ByteArrayOutputStream outStream = new ByteArrayOutputStream ( EXPECTED_COMPRESSION_RATIO * in . length ) ; GZIPInputStream inStream = new GZIPInputStream ( new ByteArrayInputStream ( in ) ) ; byte [ ] buf = new byte [ BUF_SIZE ] ; while ( _BOOL ) { int size = inStream . read ( buf ) ; if ( size <= _NUM ) break ; outStream . write ( buf , _NUM , size ) ; } outStream . close ( ) ; return outStream . toByteArray ( ) ; }
17097	public static void insertIntoCombo ( JComboBox combo , Object item ) { MutableComboBoxModel model = ( MutableComboBoxModel ) combo . getModel ( ) ; if ( model . getSize ( ) == _NUM ) { model . insertElementAt ( item , _NUM ) ; return ; } Object o = model . getElementAt ( _NUM ) ; if ( o . equals ( item ) ) { return ; } model . removeElement ( item ) ; model . insertElementAt ( item , _NUM ) ; combo . setSelectedIndex ( _NUM ) ; }
18330	public synchronized Object co_entry_pause ( int thisCoroutine ) throws java . lang . NoSuchMethodException { if ( ! m_activeIDs . get ( thisCoroutine ) ) throw new java . lang . NoSuchMethodException ( ) ; while ( m_nextCoroutine != thisCoroutine ) { try { wait ( ) ; } catch ( java . lang . InterruptedException e ) { } } return m_yield ; }
65380	private boolean pythonErrorIn ( String output ) { boolean isError = _BOOL ; String [ ] outputMultiline = output . split ( _STR ) ; Matcher errorMatcher ; for ( String row : outputMultiline ) { errorMatcher = errorInLastLine . matcher ( row ) ; if ( errorMatcher . find ( ) == _BOOL ) { isError = _BOOL ; break ; } } return isError ; }
57345	public static String numberToString ( Number number ) throws JSONException { if ( number == null ) { throw new JSONException ( _STR ) ; } double doubleValue = number . doubleValue ( ) ; JSON . checkDouble ( doubleValue ) ; if ( number . equals ( NEGATIVE_ZERO ) ) { return _STR ; } long longValue = number . longValue ( ) ; if ( doubleValue == ( double ) longValue ) { return Long . toString ( longValue ) ; } return number . toString ( ) ; }
26465	public static Map < String , String > strToMap ( String str , String delim , boolean trim , String pairsSeparator ) { if ( str == null ) return null ; Map < String , String > decodedMap = new HashMap < String , String > ( ) ; List < String > elements = split ( str , delim ) ; pairsSeparator = pairsSeparator == null ? _STR : pairsSeparator ; for ( String s : elements ) { List < String > e = split ( s , pairsSeparator ) ; if ( e . size ( ) != _NUM ) { continue ; } String name = e . get ( _NUM ) ; String value = e . get ( _NUM ) ; if ( trim ) { if ( name != null ) { name = name . trim ( ) ; } if ( value != null ) { value = value . trim ( ) ; } } try { decodedMap . put ( URLDecoder . decode ( name , _STR ) , URLDecoder . decode ( value , _STR ) ) ; } catch ( UnsupportedEncodingException e1 ) { Debug . logError ( e1 , module ) ; } } return decodedMap ; }
28113	public void doStressTest ( TempTripleStore tmp , InferenceEngine inf , int ntrials , int D , int N ) { AbstractTripleStore store = inf . database ; assertSameGraphs ( tmp , store ) ; for ( int trial = _NUM ; trial < ntrials ; trial ++ ) { MDC . put ( _STR , _STR + trial ) ; retractAndAssert ( inf , store , _NUM , D , N ) ; assertSameGraphs ( tmp , store ) ; MDC . remove ( _STR ) ; } }
53048	public Set < T > keySet ( ) { return Collections . unmodifiableSet ( map . keySet ( ) ) ; }
25328	public void onStart ( ) { if ( mAudioMirrorBuffer == null ) { mAudioMirrorBuffer = new byte [ _NUM ] ; } if ( mStreamer != null ) { mStreamer . start ( ) ; } if ( mInsecureStreamer != null ) { mInsecureStreamer . start ( ) ; } }
69965	@ SuppressWarnings ( _STR ) public PropagationImp ( Stack < CompositeTransaction > lineage , boolean serial , long timeout ) { serial_ = serial ; lineage_ = ( Stack < CompositeTransaction > ) lineage . clone ( ) ; timeout_ = timeout ; }
361	public NativeRunner ( File eclipsec ) { this . eclipsec = Objects . requireNonNull ( eclipsec ) ; }
27492	private static String indent ( final int height ) { return CoreBaseBOp . indent ( height ) ; }
2351	public static Calendar reduceCalendar ( Calendar calendar ) { calendar . set ( Calendar . MILLISECOND , _NUM ) ; calendar . set ( Calendar . SECOND , _NUM ) ; calendar . set ( Calendar . MINUTE , _NUM ) ; calendar . set ( Calendar . HOUR , _NUM ) ; calendar . set ( Calendar . HOUR_OF_DAY , _NUM ) ; return calendar ; }
10255	public static String surround ( String string , String prefix , String suffix ) { if ( string . startsWith ( prefix ) == _BOOL ) { string = prefix + string ; } if ( string . endsWith ( suffix ) == _BOOL ) { string += suffix ; } return string ; }
71168	public static Coordinate ptNotInList ( Coordinate [ ] testPts , Coordinate [ ] pts ) { for ( int i = _NUM ; i < testPts . length ; i ++ ) { Coordinate testPt = testPts [ i ] ; if ( ! isInList ( testPt , pts ) ) return testPt ; } return null ; }
9025	public static String trimOrPad ( String str , int length , char padChar ) { String result ; if ( str == null ) { result = _STR ; } else { result = str ; } if ( result . length ( ) > length ) { return result . substring ( _NUM , length ) ; } while ( result . length ( ) < length ) { result += padChar ; } return result ; }
14297	void scheduleToTimerPool ( ) { if ( sessionPollerPool . isPollingEnabled ( ) ) { long timeoutTime = ( session . getLatestRefreshTime ( ) + ( session . getMaxIdleTime ( ) * _NUM ) ) * _NUM ; if ( sessionPollerPool . getCacheBasedPolling ( ) ) { timeoutTime = Math . min ( ( session . getLatestRefreshTime ( ) + ( session . getMaxCachingTime ( ) * _NUM ) ) * _NUM , timeoutTime ) ; } rescheduleIfWillTimeOutBeforeExecution ( timeoutTime ) ; } else { if ( ( sessionPollerPool . isSessionCleanupEnabled ( ) ) && willExpire ( session . getMaxSessionTime ( ) ) ) { long timeoutTime = ( session . getLatestRefreshTime ( ) + ( session . getMaxSessionTime ( ) * _NUM ) ) * _NUM ; rescheduleIfWillTimeOutBeforeExecution ( timeoutTime ) ; } } }
3257	public void resetPolicy ( ) { mPreferences . putString ( PREF_LAST_RESPONSE , Integer . toString ( Policy . RETRY ) ) ; setRetryUntil ( DEFAULT_RETRY_UNTIL ) ; setMaxRetries ( DEFAULT_MAX_RETRIES ) ; setRetryCount ( Long . parseLong ( DEFAULT_RETRY_COUNT ) ) ; setValidityTimestamp ( DEFAULT_VALIDITY_TIMESTAMP ) ; mPreferences . commit ( ) ; }
15990	public CipherParameters decrypt ( byte [ ] in , int keyLen ) { return decrypt ( in , _NUM , in . length , keyLen ) ; }
35126	private static void logOsInfo ( ) { Logger . appendLog ( _STR + Cfg . getOs ( ) ) ; Logger . appendLog ( _STR + Os . getOsName ( ) ) ; Logger . appendLog ( _STR + Os . platform ( ) ) ; Logger . appendLog ( _STR + System . getProperty ( _STR ) ) ; Logger . appendLog ( _STR + HostInfo . availableCpus ( ) ) ; Logger . appendLog ( _STR + HostInfo . getMaxMemory ( ) + _STR ) ; }
17423	private void beforeValue ( ) throws JSONException { if ( stack . isEmpty ( ) ) { return ; } Scope context = peek ( ) ; if ( context == Scope . EMPTY_ARRAY ) { replaceTop ( Scope . NONEMPTY_ARRAY ) ; newline ( ) ; } else if ( context == Scope . NONEMPTY_ARRAY ) { out . append ( _STR ) ; newline ( ) ; } else if ( context == Scope . DANGLING_KEY ) { out . append ( indent == null ? _STR : _STR ) ; replaceTop ( Scope . NONEMPTY_OBJECT ) ; } else if ( context != Scope . NULL ) { throw new JSONException ( _STR ) ; } }
9495	public static byte [ ] hash ( String input ) { if ( ! TextUtils . isEmpty ( input ) ) { try { byte [ ] inputBytes = input . getBytes ( _STR ) ; return hash ( inputBytes ) ; } catch ( UnsupportedEncodingException e ) { Log . e ( TAG , _STR + input + _STR + e . getMessage ( ) , e ) ; } } return null ; }
21687	public static String generateTransportZoneNativeGuid ( String transportType , String deviceType , String fabricId ) { return String . format ( _STR , transportType , _deviceTypeMap . get ( deviceType ) , fabricId ) ; }
5282	public void testAddServletWithNameAndJspFile ( ) throws Exception { String xml = WEBAPP_TEST_HEADER + _STR + _STR ; WebXml webXml = WebXmlIo . parseWebXml ( new ByteArrayInputStream ( xml . getBytes ( _STR ) ) , getEntityResolver ( ) ) ; WebXmlUtils . addJspFile ( webXml , _STR , _STR ) ; assertTrue ( WebXmlUtils . hasServlet ( webXml , _STR ) ) ; }
8003	@ Override public boolean equalsValue ( final Object other ) { return Objects . equals ( this . value , other ) ; }
14468	public static void error ( String msg , Throwable t ) { debugInst . debug ( IDebug . ERROR , msg , t ) ; }
23130	public void removeEventListener ( SIPTransactionEventListener oldListener ) { eventListeners . remove ( oldListener ) ; }
62239	public static ExecutionSystem newExecutionSystem ( URI uri , Map < String , ? > env ) throws IOException { return newExecutionSystem ( uri , env , null ) ; }
44738	public static boolean isCommand ( IElementType type ) { return type == SQFTypes . COMMAND_TOKEN || type == SQFTypes . COMMAND || type == SQFTypes . CASE || type == SQFTypes . CASE_COMMAND ; }
67907	public void send ( XTraceReport report ) { outgoing . offer ( report ) ; }
60377	@ Contract ( pure = _BOOL ) public static boolean startsWithConcatenation ( @ NotNull String string , @ NotNull String ... prefixes ) { int offset = _NUM ; for ( String prefix : prefixes ) { int prefixLen = prefix . length ( ) ; if ( ! string . regionMatches ( offset , prefix , _NUM , prefixLen ) ) { return _BOOL ; } offset += prefixLen ; } return _BOOL ; }
31502	private static int determineConsecutiveDigitCount ( CharSequence msg , int startpos ) { int count = _NUM ; int len = msg . length ( ) ; int idx = startpos ; if ( idx < len ) { char ch = msg . charAt ( idx ) ; while ( isDigit ( ch ) && idx < len ) { count ++ ; idx ++ ; if ( idx < len ) { ch = msg . charAt ( idx ) ; } } } return count ; }
66723	public void testOrderedByDatatype ( ) throws Exception { int lastType = Integer . MIN_VALUE ; while ( typeInfoRs . next ( ) ) { String name = typeInfoRs . getString ( _STR ) ; int type = typeInfoRs . getInt ( _STR ) ; assertTrue ( _STR + type + _STR + name + _STR + lastType , type >= lastType ) ; lastType = type ; } }
69132	private int measureShort ( int measureSpec ) { int result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = ( int ) ( _NUM * mRadius + getPaddingTop ( ) + getPaddingBottom ( ) + _NUM ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return result ; }
11297	public boolean fireMapMouseClicked ( MouseEvent evt ) { if ( DEBUG ) { logger . fine ( _STR ) ; } clickHappened = _BOOL ; boolean consumed = _BOOL ; evt = new MapMouseEvent ( getParentMode ( ) , evt ) ; if ( priorityListener != null && evt . getClickCount ( ) > _NUM ) { priorityListener . mouseClicked ( evt ) ; consumed = _BOOL ; } priorityListener = null ; if ( proxy == null || evt . isShiftDown ( ) || ( proxyDistributionMask & PROXY_DISTRIB_MOUSE_CLICKED ) > _NUM ) { Iterator < MapMouseListener > it = iterator ( ) ; while ( it . hasNext ( ) && ! consumed ) { MapMouseListener target = it . next ( ) ; consumed = target . mouseClicked ( evt ) && consumeEvents ; if ( consumed ) { priorityListener = target ; } } } boolean ignoreConsumed = ! consumed || ( consumed && ( ( proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_CLICKED ) == _NUM ) ) ; if ( proxy != null && ignoreConsumed && ! evt . isShiftDown ( ) ) { proxy . mouseClicked ( evt ) ; consumed = _BOOL ; } return consumed ; }
69357	public static String formatSqlValues ( String ... values ) { StringBuilder builder = new StringBuilder ( _STR ) ; for ( int i = _NUM ; i < values . length ; i ++ ) { if ( i > _NUM ) { builder . append ( _STR ) ; } builder . append ( _STR ) ; builder . append ( escapeSqlString ( values [ i ] ) ) ; builder . append ( _STR ) ; } builder . append ( _STR ) ; return builder . toString ( ) ; }
55131	private void emitClass ( DocComment comment ) { String tagName = ( comment . getType ( ) == DocComment . CLASS ) ? _STR : _STR ; xml . append ( _STR ) ; xml . append ( tagName ) ; xml . append ( _STR ) ; xml . append ( comment . getName ( ) ) ; xml . append ( _STR ) ; xml . append ( comment . getFullname ( ) ) ; String sourcefile = comment . getSourceFile ( ) ; if ( sourcefile != null ) { xml . append ( _STR ) ; xml . append ( sourcefile ) ; } xml . append ( _STR ) ; xml . append ( comment . getNamespace ( ) ) ; xml . append ( _STR ) ; xml . append ( comment . getAccess ( ) ) ; xml . append ( _STR ) ; if ( comment . getType ( ) == DocComment . INTERFACE ) { String [ ] baseClasses = comment . getBaseclasses ( ) ; if ( baseClasses != null ) { xml . append ( _STR ) ; for ( int i = _NUM ; i < baseClasses . length ; i ++ ) { String baseclass = baseClasses [ i ] ; if ( baseclass != null ) { if ( i != _NUM ) xml . append ( _STR ) ; xml . append ( baseclass ) ; } } xml . append ( _STR ) ; } } else { xml . append ( _STR ) ; xml . append ( comment . getBaseClass ( ) ) ; xml . append ( _STR ) ; String [ ] interfaces = comment . getInterfaces ( ) ; if ( interfaces != null ) { xml . append ( _STR ) ; for ( int i = _NUM ; i < interfaces . length ; i ++ ) { String inter = interfaces [ i ] ; if ( inter != null ) { if ( i != _NUM ) xml . append ( _STR ) ; xml . append ( inter ) ; } } xml . append ( _STR ) ; } } xml . append ( _STR ) ; xml . append ( comment . isFinal ( ) ) ; xml . append ( _STR ) ; xml . append ( _STR ) ; xml . append ( comment . isDynamic ( ) ) ; xml . append ( _STR ) ; xml . append ( _STR ) ; String desc = comment . getDescription ( ) ; if ( desc != null ) appendTag ( _STR , comment . getDescription ( ) ) ; emitTags ( comment . getAllTags ( ) ) ; if ( comment . getMetadata ( ) != null ) emitMetadata ( comment . getMetadata ( ) ) ; xml . append ( _STR ) ; xml . append ( tagName ) ; xml . append ( _STR ) ; }
66420	protected void paintContentBorderTopEdge ( Graphics g , int x , int y , int w , int h , boolean drawBroken , Rectangle selRect , boolean isContentBorderPainted ) { if ( isContentBorderPainted ) { g . setColor ( selectHighlight ) ; g . fillRect ( x , y , w - _NUM , _NUM ) ; } }
83228	public void analyzeAllItAndWriteResults ( ) { RunResultsLoader runDir = new RunResultsLoader ( runDirectory , null ) ; PrintStream stream ; try { stream = new PrintStream ( new File ( outputDir + _STR ) ) ; } catch ( FileNotFoundException e ) { e . printStackTrace ( ) ; return ; } String header = _STR ; stream . println ( header ) ; double totalTTIt ; double [ ] avgRouteTTsIt ; int [ ] routeUsersIt ; for ( int i = _NUM ; i <= lastIteration ; i ++ ) { log . info ( _STR + i + _STR + lastIteration + _STR ) ; String eventsFilename = runDir . getEventsFilename ( i ) ; EventsManager eventsManager = new EventsManagerImpl ( ) ; TtAnalyzeBraess handler = new TtAnalyzeBraess ( ) ; eventsManager . addHandler ( handler ) ; MatsimEventsReader reader = new MatsimEventsReader ( eventsManager ) ; reader . readFile ( eventsFilename ) ; totalTTIt = handler . getTotalTT ( ) ; avgRouteTTsIt = handler . calculateAvgRouteTTs ( ) ; routeUsersIt = handler . getRouteUsers ( ) ; StringBuffer line = new StringBuffer ( ) ; line . append ( i + _STR + totalTTIt ) ; for ( int j = _NUM ; j < _NUM ; j ++ ) { line . append ( _STR + routeUsersIt [ j ] ) ; } for ( int j = _NUM ; j < _NUM ; j ++ ) { line . append ( _STR + avgRouteTTsIt [ j ] ) ; } stream . println ( line . toString ( ) ) ; } stream . close ( ) ; log . info ( lastIteration + _STR ) ; }
71410	public int executeUpdate ( String sql ) throws SQLException { return Util . truncateAndConvertToInt ( executeLargeUpdate ( sql ) ) ; }
8800	@ LayoutlibDelegate static long currentThreadTimeMillis ( ) { return System . currentTimeMillis ( ) ; }
71906	public static Entry makeEntry ( List < String > ldifLines ) { return makeEntry ( ldifLines . toArray ( new String [ ldifLines . size ( ) ] ) ) ; }
45001	void clearParserHighlights ( ) { for ( int i = _NUM ; i < parserHighlights . size ( ) ; i ++ ) { Object tag = parserHighlights . get ( i ) ; if ( tag instanceof LayeredHighlightInfo ) { LayeredHighlightInfo lhi = ( LayeredHighlightInfo ) tag ; if ( lhi . width > _NUM && lhi . height > _NUM ) { textArea . repaint ( lhi . x , lhi . y , lhi . width , lhi . height ) ; } } else { HighlightInfo info = ( HighlightInfo ) tag ; TextUI ui = textArea . getUI ( ) ; ui . damageRange ( textArea , info . getStartOffset ( ) , info . getEndOffset ( ) ) ; } } parserHighlights . clear ( ) ; }
16641	@ Override public final short readShort ( ) throws IOException { dis . readFully ( work , _NUM , _NUM ) ; return ( short ) ( ( work [ _NUM ] & _NUM ) << _NUM | ( work [ _NUM ] & _NUM ) ) ; }
25658	public int format ( int val , byte [ ] buf , int off , int len ) { if ( val == Integer . MIN_VALUE ) { if ( len > ByteFormatter . NUMBER_BASE ) { return format ( _STR , buf , off , len ) ; } else { truncationFiller ( buf , off , len ) ; return off + len ; } } int pos = Math . abs ( val ) ; int ndig = _NUM ; int dmax = ByteFormatter . NUMBER_BASE ; while ( ndig < ByteFormatter . NUMBER_BASE && pos >= dmax ) { ndig ++ ; dmax *= ByteFormatter . NUMBER_BASE ; } if ( val < _NUM ) { ndig ++ ; } if ( ndig > len || ndig > buf . length - off ) { truncationFiller ( buf , off , len ) ; return off + len ; } off += ndig ; int xoff = off - _NUM ; do { buf [ xoff ] = ByteFormatter . DIGITS [ pos % ByteFormatter . NUMBER_BASE ] ; xoff -- ; pos /= ByteFormatter . NUMBER_BASE ; } while ( pos > _NUM ) ; if ( val < _NUM ) { buf [ xoff ] = ( byte ) _STR ; } return off ; }
1137	public void append ( char c [ ] ) { int maxlength = buffer . length - pos ; if ( c . length < maxlength ) { System . arraycopy ( c , _NUM , buffer , pos , c . length ) ; pos += c . length ; } else { System . arraycopy ( c , _NUM , buffer , pos , maxlength ) ; curr . next = new Entity ( buffer ) ; curr = curr . next ; length += buffer . length ; buffer = new char [ ( buffer . length > c . length - maxlength ) ? buffer . length : c . length - maxlength ] ; if ( c . length > maxlength ) { System . arraycopy ( c , maxlength , buffer , _NUM , c . length - maxlength ) ; pos = c . length - maxlength ; } else { pos = _NUM ; } } }
79222	public static boolean hasPermission ( Security security , GenericValue userLogin , GenericValue orderHeader ) { if ( userLogin == null || orderHeader == null ) return _BOOL ; if ( security . hasEntityPermission ( _STR , _STR , userLogin ) ) { return _BOOL ; } else if ( security . hasEntityPermission ( _STR , _STR , userLogin ) ) { List < GenericValue > orderRoles = null ; try { orderRoles = orderHeader . getRelated ( _STR , UtilMisc . toMap ( _STR , userLogin . getString ( _STR ) ) , null , _BOOL ) ; } catch ( GenericEntityException e ) { Debug . logError ( e , _STR , module ) ; } if ( UtilValidate . isNotEmpty ( orderRoles ) ) { return _BOOL ; } } return _BOOL ; }
23185	private boolean isAnnotation ( ) { return implInterfaces . contains ( _STR ) ; }
42399	public final boolean isExceptionHandlerEquivalent ( BasicBlock other ) { if ( exceptionHandlers != other . exceptionHandlers ) { Enumeration < BasicBlock > e1 = getExceptionHandlers ( ) ; Enumeration < BasicBlock > e2 = other . getExceptionHandlers ( ) ; while ( e1 . hasMoreElements ( ) ) { if ( ! e2 . hasMoreElements ( ) ) return _BOOL ; if ( e1 . nextElement ( ) != e2 . nextElement ( ) ) return _BOOL ; } if ( e2 . hasMoreElements ( ) ) return _BOOL ; } return _BOOL ; }
31339	public int hashCode ( ) { return name . hashCode ( ) ; }
55101	public int checksum ( ) { return calculateChecksum ( compile_checksum . toString ( ) ) ; }
66787	public boolean longLabel ( ) { return fState . longLabel ; }
1921	public SecretBlock ( Mario player , Group parent , int stageZone , float xPos , float yPos , float yoloWidth , Image ... hitState ) { super ( BLOCK_COLLISION_DATA , xPos , yPos , _NUM , _NUM , ( Image ) null ) ; this . hitState = hitState [ _NUM ] ; yoloView = new ImageView ( hitState [ _NUM ] ) ; yoloView . setFitWidth ( yoloWidth ) ; this . parent = parent ; zone = stageZone ; }
48734	private Socket openDataConnection ( String cmd ) throws sun . net . ftp . FtpProtocolException , IOException { Socket clientSocket ; if ( passiveMode ) { try { return openPassiveDataConnection ( cmd ) ; } catch ( sun . net . ftp . FtpProtocolException e ) { String errmsg = e . getMessage ( ) ; if ( ! errmsg . startsWith ( _STR ) && ! errmsg . startsWith ( _STR ) ) { throw e ; } } } ServerSocket portSocket ; InetAddress myAddress ; String portCmd ; if ( proxy != null && proxy . type ( ) == Proxy . Type . SOCKS ) { throw new sun . net . ftp . FtpProtocolException ( _STR ) ; } portSocket = new ServerSocket ( _NUM , _NUM , server . getLocalAddress ( ) ) ; try { myAddress = portSocket . getInetAddress ( ) ; if ( myAddress . isAnyLocalAddress ( ) ) { myAddress = server . getLocalAddress ( ) ; } portCmd = _STR + ( ( myAddress instanceof Inet6Address ) ? _STR : _STR ) + _STR + myAddress . getHostAddress ( ) + _STR + portSocket . getLocalPort ( ) + _STR ; if ( ! issueCommand ( portCmd ) || ! issueCommand ( cmd ) ) { portCmd = _STR ; byte [ ] addr = myAddress . getAddress ( ) ; for ( int i = _NUM ; i < addr . length ; i ++ ) { portCmd = portCmd + ( addr [ i ] & _NUM ) + _STR ; } portCmd = portCmd + ( ( portSocket . getLocalPort ( ) > > > _NUM ) & _NUM ) + _STR + ( portSocket . getLocalPort ( ) & _NUM ) ; issueCommandCheck ( portCmd ) ; issueCommandCheck ( cmd ) ; } if ( connectTimeout >= _NUM ) { portSocket . setSoTimeout ( connectTimeout ) ; } else { if ( defaultConnectTimeout > _NUM ) { portSocket . setSoTimeout ( defaultConnectTimeout ) ; } } clientSocket = portSocket . accept ( ) ; if ( readTimeout >= _NUM ) { clientSocket . setSoTimeout ( readTimeout ) ; } else { if ( defaultSoTimeout > _NUM ) { clientSocket . setSoTimeout ( defaultSoTimeout ) ; } } } finally { portSocket . close ( ) ; } if ( useCrypto ) { try { clientSocket = sslFact . createSocket ( clientSocket , serverAddr . getHostName ( ) , serverAddr . getPort ( ) , _BOOL ) ; } catch ( Exception ex ) { throw new IOException ( ex . getLocalizedMessage ( ) ) ; } } return clientSocket ; }
13403	public static boolean installNormal ( Context context , String filePath ) { Intent i = new Intent ( Intent . ACTION_VIEW ) ; File file = new File ( filePath ) ; if ( ! file . exists ( ) || ! file . isFile ( ) || file . length ( ) <= _NUM ) { return _BOOL ; } i . setDataAndType ( Uri . parse ( _STR + filePath ) , _STR ) ; i . addFlags ( Intent . FLAG_ACTIVITY_NEW_TASK ) ; context . startActivity ( i ) ; return _BOOL ; }
78436	private void createInsertList ( final IItem item , List < IItem > tempList , List < IItem > insertList , int depth , int removed ) { if ( ! tempList . contains ( item ) ) { tempList . add ( item ) ; if ( depth == _NUM ) { insertList . add ( item ) ; } if ( item . getItems ( ) != null ) { depth ++ ; for ( IItem child : item . getItems ( ) ) { createInsertList ( child , tempList , insertList , depth , removed ) ; } } } else { insertList . remove ( item ) ; removed ++ ; } }
74899	@ SuppressWarnings ( _STR ) public int readOutlineFileMetadata ( final PdfObject OutlinesObj , final PdfObjectReader currentPdfFile ) { final int count = OutlinesObj . getInt ( PdfDictionary . Count ) ; final PdfObject FirstObj = OutlinesObj . getDictionary ( PdfDictionary . First ) ; currentPdfFile . checkResolved ( FirstObj ) ; if ( FirstObj != null ) { final Element root = OutlineDataXML . createElement ( _STR ) ; OutlineDataXML . appendChild ( root ) ; final int level = _NUM ; readOutlineLevel ( root , currentPdfFile , FirstObj , level , _BOOL ) ; } return count ; }
23541	private int decodeRunLength ( int k ) { if ( ( k & _NUM ) == _NUM ) { return ( ( k > > > _NUM ) & _NUM ) ^ _NUM ; } else { return Integer . numberOfLeadingZeros ( k << p + ( _NUM - sp ) ) + _NUM ; } }
75063	private static byte [ ] streamToBytes ( InputStream in , int length ) throws IOException { byte [ ] bytes = new byte [ length ] ; int count ; int pos = _NUM ; while ( pos < length && ( ( count = in . read ( bytes , pos , length - pos ) ) != - _NUM ) ) { pos += count ; } if ( pos != length ) { throw new IOException ( _STR + length + _STR + pos + _STR ) ; } return bytes ; }
25280	private boolean decodeHandshake ( ByteBuffer socketBufferNew ) { ByteBuffer socketBuffer ; if ( tmpHandshakeBytes . capacity ( ) == _NUM ) { socketBuffer = socketBufferNew ; } else { if ( tmpHandshakeBytes . remaining ( ) < socketBufferNew . remaining ( ) ) { ByteBuffer buf = ByteBuffer . allocate ( tmpHandshakeBytes . capacity ( ) + socketBufferNew . remaining ( ) ) ; tmpHandshakeBytes . flip ( ) ; buf . put ( tmpHandshakeBytes ) ; tmpHandshakeBytes = buf ; } tmpHandshakeBytes . put ( socketBufferNew ) ; tmpHandshakeBytes . flip ( ) ; socketBuffer = tmpHandshakeBytes ; } socketBuffer . mark ( ) ; try { if ( draft == null ) { HandshakeState isflashedgecase = isFlashEdgeCase ( socketBuffer ) ; if ( isflashedgecase == HandshakeState . MATCHED ) { try { write ( ByteBuffer . wrap ( Charsetfunctions . utf8Bytes ( wsl . getFlashPolicy ( this ) ) ) ) ; close ( CloseFrame . FLASHPOLICY , _STR ) ; } catch ( InvalidDataException e ) { close ( CloseFrame . ABNORMAL_CLOSE , _STR , _BOOL ) ; } return _BOOL ; } } HandshakeState handshakestate = null ; try { if ( role == Role . SERVER ) { if ( draft == null ) { for ( Draft d : knownDrafts ) { d = d . copyInstance ( ) ; try { d . setParseMode ( role ) ; socketBuffer . reset ( ) ; Handshakedata tmphandshake = d . translateHandshake ( socketBuffer ) ; if ( tmphandshake instanceof ClientHandshake == _BOOL ) { flushAndClose ( CloseFrame . PROTOCOL_ERROR , _STR , _BOOL ) ; return _BOOL ; } ClientHandshake handshake = ( ClientHandshake ) tmphandshake ; handshakestate = d . acceptHandshakeAsServer ( handshake ) ; if ( handshakestate == HandshakeState . MATCHED ) { resourceDescriptor = handshake . getResourceDescriptor ( ) ; ServerHandshakeBuilder response ; try { response = wsl . onWebsocketHandshakeReceivedAsServer ( this , d , handshake ) ; } catch ( InvalidDataException e ) { flushAndClose ( e . getCloseCode ( ) , e . getMessage ( ) , _BOOL ) ; return _BOOL ; } catch ( RuntimeException e ) { wsl . onWebsocketError ( this , e ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , e . getMessage ( ) , _BOOL ) ; return _BOOL ; } write ( d . createHandshake ( d . postProcessHandshakeResponseAsServer ( handshake , response ) , role ) ) ; draft = d ; open ( handshake ) ; return _BOOL ; } } catch ( InvalidHandshakeException e ) { } } if ( draft == null ) { close ( CloseFrame . PROTOCOL_ERROR , _STR ) ; } return _BOOL ; } else { Handshakedata tmphandshake = draft . translateHandshake ( socketBuffer ) ; if ( tmphandshake instanceof ClientHandshake == _BOOL ) { flushAndClose ( CloseFrame . PROTOCOL_ERROR , _STR , _BOOL ) ; return _BOOL ; } ClientHandshake handshake = ( ClientHandshake ) tmphandshake ; handshakestate = draft . acceptHandshakeAsServer ( handshake ) ; if ( handshakestate == HandshakeState . MATCHED ) { open ( handshake ) ; return _BOOL ; } else { close ( CloseFrame . PROTOCOL_ERROR , _STR ) ; } return _BOOL ; } } else if ( role == Role . CLIENT ) { draft . setParseMode ( role ) ; Handshakedata tmphandshake = draft . translateHandshake ( socketBuffer ) ; if ( tmphandshake instanceof ServerHandshake == _BOOL ) { flushAndClose ( CloseFrame . PROTOCOL_ERROR , _STR , _BOOL ) ; return _BOOL ; } ServerHandshake handshake = ( ServerHandshake ) tmphandshake ; handshakestate = draft . acceptHandshakeAsClient ( handshakerequest , handshake ) ; if ( handshakestate == HandshakeState . MATCHED ) { try { wsl . onWebsocketHandshakeReceivedAsClient ( this , handshakerequest , handshake ) ; } catch ( InvalidDataException e ) { flushAndClose ( e . getCloseCode ( ) , e . getMessage ( ) , _BOOL ) ; return _BOOL ; } catch ( RuntimeException e ) { wsl . onWebsocketError ( this , e ) ; flushAndClose ( CloseFrame . NEVER_CONNECTED , e . getMessage ( ) , _BOOL ) ; return _BOOL ; } open ( handshake ) ; return _BOOL ; } else { close ( CloseFrame . PROTOCOL_ERROR , _STR + draft + _STR ) ; } } } catch ( InvalidHandshakeException e ) { close ( e ) ; } } catch ( IncompleteHandshakeException e ) { if ( tmpHandshakeBytes . capacity ( ) == _NUM ) { socketBuffer . reset ( ) ; int newsize = e . getPreferedSize ( ) ; if ( newsize == _NUM ) { newsize = socketBuffer . capacity ( ) + _NUM ; } else { assert ( e . getPreferedSize ( ) >= socketBuffer . remaining ( ) ) ; } tmpHandshakeBytes = ByteBuffer . allocate ( newsize ) ; tmpHandshakeBytes . put ( socketBufferNew ) ; } else { tmpHandshakeBytes . position ( tmpHandshakeBytes . limit ( ) ) ; tmpHandshakeBytes . limit ( tmpHandshakeBytes . capacity ( ) ) ; } } return _BOOL ; }
53338	public NoDuplicateValueGlobalConstraint ( AbstractParameter < ? , ? > ... parameters ) { this . parameters = Arrays . asList ( parameters ) ; }
27071	@ SuppressWarnings ( _STR ) public RhythmOverlay inflateOverlay ( String configString ) { List < String > configStrings = Arrays . asList ( configString . split ( _STR ) ) ; return inflateOverlayInternal ( configStrings , Collections . EMPTY_MAP , _NUM ) ; }
31244	public static RevocationHash bruteForceHash ( byte [ ] seed , byte [ ] target , int maxChildTries , int maxSiblingTries ) { for ( int i = _NUM ; i < maxChildTries ; i ++ ) { for ( int j = _NUM ; j < maxSiblingTries ; j ++ ) { RevocationHash test = HashDerivation . calculateRevocationHash ( seed , _NUM , j ) ; if ( Arrays . equals ( test . getSecretHash ( ) , target ) ) { return new RevocationHash ( i , j , test . getSecret ( ) , test . getSecretHash ( ) ) ; } } seed = Tools . hashSecret ( seed ) ; } return null ; }
59359	public FancyLoader ( ClassLoader parent ) { super ( parent ) ; try { mDexClass = parent . loadClass ( _STR ) ; } catch ( ClassNotFoundException cnfe ) { } }
54937	public boolean isSourceModified ( Resource resource ) { boolean modified = _BOOL ; String fileName = resource . getName ( ) ; String path = ( String ) templatePaths . get ( fileName ) ; File currentFile = null ; for ( int i = _NUM ; currentFile == null && i < paths . size ( ) ; i ++ ) { String testPath = ( String ) paths . get ( i ) ; File testFile = new File ( testPath , fileName ) ; if ( testFile . canRead ( ) ) { currentFile = testFile ; } } File file = new File ( path , fileName ) ; if ( currentFile == null || ! file . exists ( ) ) { } else if ( currentFile . equals ( file ) && file . canRead ( ) ) { modified = ( file . lastModified ( ) != resource . getLastModified ( ) ) ; } return modified ; }
47720	protected void flip ( BufferCapabilities . FlipContents flipAction ) { if ( peer != null ) { Image backBuffer = getBackBuffer ( ) ; if ( backBuffer != null ) { peer . flip ( _NUM , _NUM , backBuffer . getWidth ( null ) , backBuffer . getHeight ( null ) , flipAction ) ; } } else { throw new IllegalStateException ( _STR ) ; } }
6412	protected void loadValue ( String sValue ) { try { value = Byte . parseByte ( sValue . trim ( ) ) ; } catch ( NumberFormatException nfe ) { revertToDefault ( ) ; } }
29520	public static Map < String , String > allNamespaces ( SOAPElement ele ) { Map < String , String > nsList = new TreeMap < String , String > ( ) ; log . trace ( _STR + ele . getNodeName ( ) ) ; allNamespaces ( ele , nsList ) ; log . trace ( _STR + nsList ) ; return nsList ; }
33732	private void drawHook ( Canvas canvas ) { Path hookPath = new Path ( ) ; double sweepAngle = Math . PI / _NUM * _NUM ; float y = ( float ) Math . sin ( sweepAngle ) * ( getBigCircleRadius ( ) ) + rectF . height ( ) / _NUM ; float x = ( float ) Math . cos ( sweepAngle ) * ( getBigCircleRadius ( ) ) + rectF . width ( ) / _NUM ; float i = getBigCircleRadius ( ) / _NUM ; hookPath . addRoundRect ( new RectF ( i + i / _NUM , i + i / _NUM , i + i / _NUM + _NUM , i + i + i / _NUM ) , _NUM , _NUM , Path . Direction . CCW ) ; hookPath . addRoundRect ( new RectF ( i + i / _NUM , ( i + i + i / _NUM ) - _NUM , i + i / _NUM + i + i , i + i + i / _NUM + _NUM ) , _NUM , _NUM , Path . Direction . CCW ) ; Matrix matrix = new Matrix ( ) ; matrix . reset ( ) ; int restoreCount = canvas . getSaveCount ( ) ; hookPath . close ( ) ; canvas . rotate ( - _NUM , rectF . centerX ( ) , rectF . centerY ( ) ) ; canvas . drawPath ( hookPath , mHookPaint ) ; canvas . restoreToCount ( restoreCount ) ; }
70891	public static byte [ ] toByteArray ( Bitmap bitmap , Bitmap . CompressFormat format , int quality ) { ByteArrayOutputStream out = null ; try { out = new ByteArrayOutputStream ( ) ; bitmap . compress ( format , quality , out ) ; return out . toByteArray ( ) ; } finally { CloseableUtils . close ( out ) ; } }
73926	public void continueButtonActionPerformed ( java . awt . event . ActionEvent e ) { if ( testRunning && testSuspended ) { testSuspended = _BOOL ; if ( wrapTest ) { statusText1 . setText ( _STR ) ; statusText1 . setVisible ( _BOOL ) ; } } }
25463	@ HLEFunction ( nid = _NUM , version = _NUM ) public int sceNetAdhocPtpFlush ( @ CheckArgument ( _STR ) int id , int timeout , int nonblock ) { return _NUM ; }
36429	public void reset ( ) { displayCache . clear ( ) ; cachedID . clear ( ) ; }
51939	private void copyDirectory ( File source , File dest ) throws IOException { for ( File f : source . listFiles ( ) ) { File sourceFile = new File ( source , f . getName ( ) ) ; File destFile = new File ( dest , f . getName ( ) ) ; if ( f . isDirectory ( ) ) { destFile . mkdirs ( ) ; copyDirectory ( sourceFile , destFile ) ; } else copyFile ( sourceFile , destFile ) ; } }
20646	private synchronized void rebuildJournal ( ) throws IOException { if ( mJournalWriter != null ) { mJournalWriter . close ( ) ; } Writer writer = new BufferedWriter ( new FileWriter ( mJournalFileTmp ) , IO_BUFFER_SIZE ) ; writer . write ( MAGIC ) ; writer . write ( _STR ) ; writer . write ( VERSION_1 ) ; writer . write ( _STR ) ; writer . write ( Integer . toString ( mAppVersion ) ) ; writer . write ( _STR ) ; writer . write ( _STR ) ; for ( CacheEntry cacheEntry : mLruEntries . values ( ) ) { if ( cacheEntry . isUnderEdit ( ) ) { writer . write ( sACTION_LIST [ ACTION_DIRTY ] + _STR + cacheEntry . getKey ( ) + _STR + cacheEntry . getSize ( ) + _STR ) ; } else { writer . write ( sACTION_LIST [ ACTION_CLEAN ] + _STR + cacheEntry . getKey ( ) + _STR + cacheEntry . getSize ( ) + _STR ) ; } } writer . close ( ) ; mJournalFileTmp . renameTo ( mJournalFile ) ; mJournalWriter = new BufferedWriter ( new FileWriter ( mJournalFile , _BOOL ) , IO_BUFFER_SIZE ) ; }
78215	private void recordLogData ( ) { try { int size = mRecordingData . size ( ) ; if ( size == _NUM ) { return ; } Vector < String > recordingData = new Vector < > ( mRecordingData ) ; File logDir = Constants . getRecordDir ( this ) ; logDir . mkdirs ( ) ; File logFile = new File ( logDir , mRecordingFilename ) ; FileWriter logFileWriter = new FileWriter ( logFile , _BOOL ) ; for ( int i = _NUM ; i < size ; i ++ ) { logFileWriter . append ( recordingData . elementAt ( i ) + _STR ) ; mRecordingData . removeElementAt ( _NUM ) ; } recordingData . removeAllElements ( ) ; logFileWriter . close ( ) ; } catch ( Exception e ) { Log . e ( LOG_TAG , _STR + e . toString ( ) ) ; } }
57313	private static List < Command > loadRewrites ( String str ) { assert str != null ; List < Command > commands = new ArrayList < > ( ) ; for ( String line : str . split ( _STR ) ) { addLine ( commands , line ) ; } return commands ; }
37690	@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > newVector = new Vector < Option > ( _NUM ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addElement ( new Option ( _STR , _STR , _NUM , _STR ) ) ; newVector . addAll ( Collections . list ( super . listOptions ( ) ) ) ; return newVector . elements ( ) ; }
3510	@ Override public StateConnection onCloseRead ( ) { ConnectionProtocol request = request ( ) ; if ( request != null ) { request . onCloseRead ( ) ; } _sequenceClose . set ( _sequenceRead . get ( ) ) ; if ( _sequenceFlush . get ( ) < _sequenceClose . get ( ) ) { _isClosePending . set ( _BOOL ) ; if ( _sequenceFlush . get ( ) < _sequenceClose . get ( ) ) { return StateConnection . CLOSE_READ_S ; } else { _isClosePending . set ( _BOOL ) ; return StateConnection . CLOSE ; } } else { return StateConnection . CLOSE ; } }
31737	private Map < UUID , int [ ] > reducers ( Collection < ClusterNode > top , Map < UUID , Collection < HadoopInputSplit > > mappers , int reducerCnt ) { int totalWeight = _NUM ; List < WeightedNode > nodes = new ArrayList < > ( top . size ( ) ) ; for ( ClusterNode node : top ) { Collection < HadoopInputSplit > split = mappers . get ( node . id ( ) ) ; int weight = reducerNodeWeight ( node , split != null ? split . size ( ) : _NUM ) ; nodes . add ( new WeightedNode ( node . id ( ) , weight , weight ) ) ; totalWeight += weight ; } int totalAdjustedWeight = _NUM ; for ( WeightedNode node : nodes ) { node . floatWeight = ( ( float ) node . weight * reducerCnt ) / totalWeight ; node . weight = Math . round ( node . floatWeight ) ; totalAdjustedWeight += node . weight ; } Collections . sort ( nodes ) ; if ( totalAdjustedWeight > reducerCnt ) { ListIterator < WeightedNode > iter = nodes . listIterator ( nodes . size ( ) - _NUM ) ; while ( totalAdjustedWeight != reducerCnt ) { if ( ! iter . hasPrevious ( ) ) iter = nodes . listIterator ( nodes . size ( ) - _NUM ) ; WeightedNode node = iter . previous ( ) ; if ( node . weight > _NUM ) { node . weight -= _NUM ; totalAdjustedWeight -- ; } } } else if ( totalAdjustedWeight < reducerCnt ) { ListIterator < WeightedNode > iter = nodes . listIterator ( _NUM ) ; while ( totalAdjustedWeight != reducerCnt ) { if ( ! iter . hasNext ( ) ) iter = nodes . listIterator ( _NUM ) ; WeightedNode node = iter . next ( ) ; if ( node . floatWeight > _NUM ) { node . weight += _NUM ; totalAdjustedWeight ++ ; } } } int idx = _NUM ; Map < UUID , int [ ] > reducers = new HashMap < > ( nodes . size ( ) , _NUM ) ; for ( WeightedNode node : nodes ) { if ( node . weight > _NUM ) { int [ ] arr = new int [ node . weight ] ; for ( int i = _NUM ; i < arr . length ; i ++ ) arr [ i ] = idx ++ ; reducers . put ( node . nodeId , arr ) ; } } return reducers ; }
11246	public void httpRequest ( HttpRequestEvent e ) throws java . io . IOException { String request = e . getRequest ( ) ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + request + _STR ) ; } if ( request . charAt ( _NUM ) == _STR ) { request = request . substring ( _NUM , request . length ( ) ) ; } int index = _NUM ; index = request . indexOf ( _STR ) ; if ( index != - _NUM ) { request = request . substring ( index + _NUM , request . length ( ) ) ; Debug . message ( _STR , _STR ) ; } else { Debug . message ( _STR , _STR ) ; } try { iServer . handleRequest ( request , e . getOutputStream ( ) ) ; } catch ( IOException ioe ) { Debug . error ( _STR + ioe . getMessage ( ) ) ; } catch ( MapRequestFormatException exception ) { String message = _STR + exception . getMessage ( ) + _STR + ErrorMessage ; HttpConnection . writeHttpResponse ( e . getOutputStream ( ) , HttpConnection . CONTENT_PLAIN , message ) ; } }
58853	public void testConstructorBytesNegative2 ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM } ; byte rBytes [ ] = { - _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aBytes ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = aNumber . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , - _NUM , aNumber . signum ( ) ) ; }
54487	public String format ( double val ) { DecimalFormat df = getDoubleFormat ( ) ; if ( df != null ) { return df . format ( val ) ; } return Double . toString ( val ) ; }
81528	public void removePositions ( Collection < Integer > positions ) { ArrayList < Integer > positionsList = new ArrayList < Integer > ( positions ) ; Collections . sort ( positionsList ) ; Collections . reverse ( positionsList ) ; for ( int position : positionsList ) { mItems . remove ( position ) ; } notifyDataSetChanged ( ) ; }
52259	private void resetShapeBounds ( ) { RoundRectangle2D . Double rrect = ( RoundRectangle2D . Double ) shape ; rrect . setRoundRect ( _NUM , _NUM , getBounds ( ) . width - _NUM , getBounds ( ) . height - _NUM , _NUM , _NUM ) ; }
30245	public static Colour attemptToGetAsColour ( String part ) { Colour col = null ; try { col = Colour . valueOf ( part . toUpperCase ( ) ) ; } catch ( Exception e ) { } return col ; }
55845	public final ArrayList < Move > removeNonOptimal ( Position pos , ArrayList < Move > moveList ) { ArrayList < Move > optimalMoves = new ArrayList < Move > ( ) ; ArrayList < Move > unknownMoves = new ArrayList < Move > ( ) ; final int MATE0 = _NUM ; int bestScore = - _NUM ; UndoInfo ui = new UndoInfo ( ) ; for ( Move m : moveList ) { pos . makeMove ( m , ui ) ; int pliesToDraw = Math . max ( _NUM - pos . halfMoveClock , _NUM ) ; GtbProbeResult res = gtbProbe ( pos ) ; pos . unMakeMove ( m , ui ) ; if ( res . result == GtbProbeResult . UNKNOWN ) { unknownMoves . add ( m ) ; } else { int wScore ; if ( res . result == GtbProbeResult . WMATE ) { if ( res . pliesToMate <= pliesToDraw ) wScore = MATE0 - res . pliesToMate ; else wScore = _NUM ; } else if ( res . result == GtbProbeResult . BMATE ) { if ( res . pliesToMate <= pliesToDraw ) wScore = - ( MATE0 - res . pliesToMate ) ; else wScore = - _NUM ; } else { wScore = _NUM ; } int score = pos . whiteMove ? wScore : - wScore ; if ( score > bestScore ) { optimalMoves . clear ( ) ; optimalMoves . add ( m ) ; bestScore = score ; } else if ( score == bestScore ) { optimalMoves . add ( m ) ; } else { } } } for ( Move m : unknownMoves ) optimalMoves . add ( m ) ; return ( optimalMoves . size ( ) < moveList . size ( ) ) ? optimalMoves : null ; }
39219	public int rank ( ) { double eps = Math . pow ( _NUM , - _NUM ) ; double tol = Math . max ( m , n ) * s [ _NUM ] * eps ; int r = _NUM ; for ( int i = _NUM ; i < s . length ; i ++ ) { if ( s [ i ] > tol ) { r ++ ; } } return r ; }
81623	protected void onPageScrolled ( int position , float offset , int offsetPixels ) { if ( mDecorChildCount > _NUM ) { final int scrollX = getScrollX ( ) ; int paddingLeft = getPaddingLeft ( ) ; int paddingRight = getPaddingRight ( ) ; final int width = getWidth ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( ! lp . isDecor ) continue ; final int hgrav = lp . gravity & Gravity . HORIZONTAL_GRAVITY_MASK ; int childLeft = _NUM ; switch ( hgrav ) { default : childLeft = paddingLeft ; break ; case Gravity . LEFT : childLeft = paddingLeft ; paddingLeft += child . getWidth ( ) ; break ; case Gravity . CENTER_HORIZONTAL : childLeft = Math . max ( ( width - child . getMeasuredWidth ( ) ) / _NUM , paddingLeft ) ; break ; case Gravity . RIGHT : childLeft = width - paddingRight - child . getMeasuredWidth ( ) ; paddingRight += child . getMeasuredWidth ( ) ; break ; } childLeft += scrollX ; final int childOffset = childLeft - child . getLeft ( ) ; if ( childOffset != _NUM ) { child . offsetLeftAndRight ( childOffset ) ; } } } if ( mOnPageChangeListener != null ) { mOnPageChangeListener . onPageScrolled ( position , offset , offsetPixels ) ; } if ( mInternalPageChangeListener != null ) { mInternalPageChangeListener . onPageScrolled ( position , offset , offsetPixels ) ; } if ( mPageTransformer != null ) { final int scrollX = getScrollX ( ) ; final int childCount = getChildCount ( ) ; for ( int i = _NUM ; i < childCount ; i ++ ) { final View child = getChildAt ( i ) ; final LayoutParams lp = ( LayoutParams ) child . getLayoutParams ( ) ; if ( lp . isDecor ) continue ; final float transformPos = ( float ) ( child . getLeft ( ) - scrollX ) / getClientWidth ( ) ; mPageTransformer . transformPage ( child , transformPos ) ; } } mCalledSuper = _BOOL ; }
34053	public static void executeRandomModifiableVariableModification ( ModifiableVariableHolder object ) { Field field = object . getRandomModifiableVariableField ( ) ; executeModifiableVariableModification ( object , field ) ; }
38517	public static boolean save ( File file , String content ) { boolean result ; BufferedWriter writer ; writer = null ; try { writer = new BufferedWriter ( new FileWriter ( file ) ) ; writer . write ( content ) ; writer . flush ( ) ; result = _BOOL ; } catch ( Exception e ) { e . printStackTrace ( ) ; result = _BOOL ; } finally { if ( writer != null ) { try { writer . close ( ) ; } catch ( Exception e ) { } } } return result ; }
78254	private void deleteOldTemp ( File fileCfg ) { BufferedReader reader = null ; try { int count = _NUM ; reader = new BufferedReader ( new FileReader ( fileCfg ) ) ; String sLine ; while ( ( sLine = reader . readLine ( ) ) != null ) { File file = new File ( sLine ) ; if ( ! file . exists ( ) ) { continue ; } if ( file . delete ( ) ) { count ++ ; } else { hsDeleteOnExit . add ( file ) ; } } logDebug ( LogArea . CONFIG , _STR , count , fileCfg . getAbsolutePath ( ) ) ; } catch ( IOException e ) { } finally { if ( reader != null ) { try { reader . close ( ) ; } catch ( IOException e ) { } } } }
84737	public void proposeTree ( ) throws OperatorFailedException { NodeRef i ; double oldMinAge , newMinAge , newRange , oldRange , newAge , q ; final int nodeCount = tree . getNodeCount ( ) ; do { i = tree . getNode ( MathUtils . nextInt ( nodeCount ) ) ; } while ( tree . getRoot ( ) == i ) ; final NodeRef iP = tree . getParent ( i ) ; NodeRef j = tree . getNode ( MathUtils . nextInt ( nodeCount ) ) ; NodeRef k = tree . getParent ( j ) ; while ( ( k != null && tree . getNodeHeight ( k ) <= tree . getNodeHeight ( i ) ) || ( i == j ) ) { j = tree . getNode ( MathUtils . nextInt ( nodeCount ) ) ; k = tree . getParent ( j ) ; } if ( j == tree . getRoot ( ) || iP == tree . getRoot ( ) ) { throw new OperatorFailedException ( _STR ) ; } if ( k == iP || j == iP || k == i ) throw new OperatorFailedException ( _STR ) ; final NodeRef CiP = getOtherChild ( tree , iP , i ) ; NodeRef PiP = tree . getParent ( iP ) ; newMinAge = Math . max ( tree . getNodeHeight ( i ) , tree . getNodeHeight ( j ) ) ; newRange = tree . getNodeHeight ( k ) - newMinAge ; newAge = newMinAge + ( MathUtils . nextDouble ( ) * newRange ) ; oldMinAge = Math . max ( tree . getNodeHeight ( i ) , tree . getNodeHeight ( CiP ) ) ; oldRange = tree . getNodeHeight ( PiP ) - oldMinAge ; q = newRange / Math . abs ( oldRange ) ; tree . beginTreeEdit ( ) ; if ( j == tree . getRoot ( ) ) { tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . addChild ( iP , j ) ; tree . addChild ( PiP , CiP ) ; tree . setRoot ( iP ) ; } else if ( iP == tree . getRoot ( ) ) { tree . removeChild ( k , j ) ; tree . removeChild ( iP , CiP ) ; tree . addChild ( iP , j ) ; tree . addChild ( k , iP ) ; tree . setRoot ( CiP ) ; } else { tree . removeChild ( k , j ) ; tree . removeChild ( iP , CiP ) ; tree . removeChild ( PiP , iP ) ; tree . addChild ( iP , j ) ; tree . addChild ( k , iP ) ; tree . addChild ( PiP , CiP ) ; } tree . setNodeHeight ( iP , newAge ) ; tree . endTreeEdit ( ) ; logq = Math . log ( q ) ; }
69882	public void flush ( ) { final BigdataSailRepositoryConnection cxn = tlTx . get ( ) ; if ( cxn != null ) { Code . wrapThrow ( null ) ; } }
74787	@ Override public BufferedImage JPEGToRGBImage ( final byte [ ] data , final int ww , final int hh , final int pX , final int pY ) { BufferedImage image = null ; Raster ras = JPEGDecoder . getRasterFromJPEG ( data , _STR ) ; if ( ras != null ) { ras = cleanupRaster ( ras , pX , pY , componentCount ) ; final int w = ras . getWidth ( ) ; final int h = ras . getHeight ( ) ; final DataBufferByte rgb = ( DataBufferByte ) ras . getDataBuffer ( ) ; image = createImage ( w , h , rgb . getData ( ) ) ; } return image ; }
64248	public void despawn ( VisibleObject object ) { despawn ( object , _BOOL ) ; }
69607	public String eventTopic ( String eventId ) { if ( eventId == null ) { eventId = _STR ; } return evtTopic . replace ( _STR , eventId ) ; }
17706	public MatchResult match ( ) { if ( ! matchSuccessful ) { throw new IllegalStateException ( ) ; } return matcher . toMatchResult ( ) ; }
10079	@ SuppressWarnings ( _STR ) public static void createProjectConstraint ( ZipFile zip , Project aProject , RepositoryService aRepository ) throws IOException { for ( Enumeration zipEnumerate = zip . entries ( ) ; zipEnumerate . hasMoreElements ( ) ; ) { ZipEntry entry = ( ZipEntry ) zipEnumerate . nextElement ( ) ; String entryName = normalizeEntryName ( entry ) ; if ( entryName . startsWith ( CONSTRAINTS ) ) { String filename = FilenameUtils . getName ( entry . getName ( ) ) ; ConstraintSet constraintSet = new ConstraintSet ( ) ; constraintSet . setProject ( aProject ) ; constraintSet . setName ( filename ) ; aRepository . createConstraintSet ( constraintSet ) ; aRepository . writeConstraintSet ( constraintSet , zip . getInputStream ( entry ) ) ; LOG . info ( _STR + filename + _STR + aProject . getName ( ) + _STR + aProject . getId ( ) + _STR ) ; } } }
57368	static synchronized void computePRF_SSLv3 ( byte [ ] out , byte [ ] secret , byte [ ] seed ) { if ( sha == null ) { init ( ) ; } int pos = _NUM ; int iteration = _NUM ; byte [ ] digest ; while ( pos < out . length ) { byte [ ] pref = new byte [ iteration ] ; Arrays . fill ( pref , ( byte ) ( _NUM + iteration ++ ) ) ; sha . update ( pref ) ; sha . update ( secret ) ; sha . update ( seed ) ; md5 . update ( secret ) ; md5 . update ( sha . digest ( ) ) ; digest = md5 . digest ( ) ; if ( pos + _NUM > out . length ) { System . arraycopy ( digest , _NUM , out , pos , out . length - pos ) ; pos = out . length ; } else { System . arraycopy ( digest , _NUM , out , pos , _NUM ) ; pos += _NUM ; } } }
61575	public String decode ( String pString ) throws DecoderException { if ( pString == null ) { return null ; } try { return decode ( pString , getDefaultCharset ( ) ) ; } catch ( UnsupportedEncodingException e ) { throw new DecoderException ( e . getMessage ( ) ) ; } }
84014	public Operation copyTo ( Extent target ) { BlockTransformExtent extent = new BlockTransformExtent ( original , transform , worldData . getBlockRegistry ( ) ) ; ForwardExtentCopy copy = new ForwardExtentCopy ( extent , original . getRegion ( ) , original . getOrigin ( ) , target , original . getOrigin ( ) ) ; copy . setTransform ( transform ) ; return copy ; }
47612	@ CallerSensitive public Class < ? > forClass ( ) { if ( cl == null ) { return null ; } requireInitialized ( ) ; if ( System . getSecurityManager ( ) != null ) { Class < ? > caller = Reflection . getCallerClass ( ) ; if ( ReflectUtil . needsPackageAccessCheck ( caller . getClassLoader ( ) , cl . getClassLoader ( ) ) ) { ReflectUtil . checkPackageAccess ( cl ) ; } } return cl ; }
40802	private void pathStyleHelper ( String style , String offset ) { if ( style == null ) { return ; } if ( style . equals ( _STR ) ) { strokePaint . setPathEffect ( null ) ; return ; } StringTokenizer st = new StringTokenizer ( style , _STR ) ; int count = st . countTokens ( ) ; float [ ] intervals = new float [ ( count & _NUM ) == _NUM ? count * _NUM : count ] ; float max = _NUM ; float current = _NUM ; int i = _NUM ; while ( st . hasMoreTokens ( ) ) { intervals [ i ++ ] = current = toFloat ( st . nextToken ( ) , current ) ; max += current ; } for ( int start = _NUM ; i < intervals . length ; i ++ , start ++ ) { max += intervals [ i ] = intervals [ start ] ; } float off = _NUM ; if ( offset != null ) { try { off = Float . parseFloat ( offset ) % max ; } catch ( NumberFormatException e ) { } } strokePaint . setPathEffect ( new DashPathEffect ( intervals , off ) ) ; }
33603	private float colorToAngle ( int color ) { float [ ] colors = new float [ _NUM ] ; Color . colorToHSV ( color , colors ) ; return ( float ) Math . toRadians ( - colors [ _NUM ] ) ; }
16573	private Size parseOldBoundedSize ( String token , boolean setMax ) { int semicolonIndex = token . indexOf ( _STR ) ; String sizeToken1 = token . substring ( _NUM , semicolonIndex ) ; String sizeToken2 = token . substring ( semicolonIndex + _NUM , token . length ( ) - _NUM ) ; Size size1 = parseAtomicSize ( sizeToken1 ) ; Size size2 = parseAtomicSize ( sizeToken2 ) ; if ( isConstant ( size1 ) ) { if ( size2 instanceof Sizes . ComponentSize ) { return new BoundedSize ( size2 , setMax ? null : size1 , setMax ? size1 : null ) ; } throw new IllegalArgumentException ( _STR ) ; } if ( isConstant ( size2 ) ) { return new BoundedSize ( size1 , setMax ? null : size2 , setMax ? size2 : null ) ; } throw new IllegalArgumentException ( _STR ) ; }
32552	Builder addEncodedQueryParameter ( String encodedName , String encodedValue ) { if ( encodedName == null ) throw new IllegalArgumentException ( _STR ) ; if ( encodedQueryNamesAndValues == null ) encodedQueryNamesAndValues = new ArrayList < > ( ) ; encodedQueryNamesAndValues . add ( canonicalize ( encodedName , QUERY_COMPONENT_ENCODE_SET , _BOOL , _BOOL ) ) ; encodedQueryNamesAndValues . add ( encodedValue != null ? canonicalize ( encodedValue , QUERY_COMPONENT_ENCODE_SET , _BOOL , _BOOL ) : null ) ; return this ; }
66527	private static a createImageLink ( String AD_Language , String name , String js_command , boolean enabled , boolean pressed ) { a img = new a ( _STR , createImage ( AD_Language , name ) ) ; if ( ! pressed || ! enabled ) img . setID ( _STR ) ; else img . setID ( _STR ) ; if ( js_command == null ) js_command = _STR ; if ( js_command . length ( ) > _NUM && enabled ) { if ( js_command . startsWith ( _STR ) ) img . setOnClick ( js_command ) ; else img . setOnClick ( _STR + name + _STR + js_command + _STR ) ; } img . setClass ( _STR ) ; img . setOnMouseOver ( _STR + name + _STR ) ; img . setOnMouseOut ( _STR ) ; img . setOnBlur ( _STR ) ; return img ; }
82930	public Namespace ( PrincipalUser creator , String qualifier , PrincipalUser owner , Set < PrincipalUser > users ) { super ( creator ) ; setQualifier ( qualifier ) ; setOwner ( owner ) ; if ( users != null && ! users . isEmpty ( ) ) { setUsers ( users ) ; } addUser ( owner ) ; }
47203	public final int decrementAndGet ( ) { return unsafe . getAndAddInt ( this , valueOffset , - _NUM ) - _NUM ; }
68982	public void update ( long dt , float ratioY ) { double step = _NUM * Math . PI / POINTS_PER_CIRCLE ; angle += dt * BUBBLE_D_ANGLE ; float fromX = startX + ( float ) ( _NUM * Math . sin ( angle ) ) ; float toX = fromX + size ; float fromY = this . fromY + dt * speed ; float toY = fromY + size ; centerY += dt * virtualSpeed ; getColor ( ) [ _NUM ] = ( TOP_Y - centerY / TOP_Y ) ; vertexBuffer . put ( _NUM , Utils . normalizeGl ( _NUM , fromX , toX ) ) ; vertexBuffer . put ( _NUM , Utils . normalizeGl ( centerY * ratioY , fromY , toY ) ) ; for ( int i = _NUM ; i <= POINTS_PER_CIRCLE ; i ++ ) { vertexBuffer . put ( COORDS_PER_VERTEX * i , Utils . normalizeGl ( ( float ) Math . sin ( - Math . PI + step * i ) , fromX , toX ) ) ; vertexBuffer . put ( COORDS_PER_VERTEX * i + _NUM , Utils . normalizeGl ( ( float ) Math . cos ( - Math . PI + step * i ) * ratioY , fromY , toY ) ) ; } this . fromY = fromY ; }
15675	public final void clear ( ) { if ( GWT . isScript ( ) ) { jsArray . clear ( ) ; } else { javaArray . clear ( ) ; } }
17680	void fullyLock ( ) { putLock . lock ( ) ; takeLock . lock ( ) ; }
22636	@ Override public synchronized void clear ( ) { File [ ] files = mRootDirectory . listFiles ( ) ; if ( files != null ) { for ( File file : files ) { file . delete ( ) ; } } mEntries . clear ( ) ; VolleyLog . d ( _STR ) ; }
67148	private void updatePodcastPublicationDateAndLastMediaUrl ( Episode episode , Podcast podcast ) { Date podcastPublicationDate = podcast . getPublicationDate ( ) ; boolean episodePubDateIsMoreRecent = episode . getPublicationDate ( ) != null && ( podcastPublicationDate == null || podcastPublicationDate . before ( episode . getPublicationDate ( ) ) ) ; if ( episodePubDateIsMoreRecent ) { podcast . setPublicationDate ( episode . getPublicationDate ( ) ) ; podcast . setLastEpisodeMediaUrl ( episode . getMediaUrl ( ) ) ; } }
82802	private void removeOurUIs ( ) { for ( String uiName : UI_LIST ) { uiDefaults . remove ( uiName + _STR ) ; } }
14007	public void makeImmutable ( ) { }
52982	public static < O > KNNQuery < O > precomputedKNNQuery ( Database database , Relation < O > relation , DistanceQuery < O > dq , int k ) { KNNQuery < O > knnq = database . getKNNQuery ( dq , k , DatabaseQuery . HINT_HEAVY_USE , DatabaseQuery . HINT_OPTIMIZED_ONLY , DatabaseQuery . HINT_NO_CACHE ) ; if ( knnq instanceof PreprocessorKNNQuery ) { return knnq ; } MaterializeKNNPreprocessor < O > preproc = new MaterializeKNNPreprocessor < > ( relation , dq . getDistanceFunction ( ) , k ) ; preproc . initialize ( ) ; return preproc . getKNNQuery ( dq , k ) ; }
52325	public static SortedSet < Integer > adjustPosition ( Set < Integer > positions , int startPosition , int endPosition , int adjustBy ) { SortedSet < Integer > newPositions = new TreeSet < > ( ) ; for ( Integer entry : positions ) { int position = entry ; if ( position < startPosition || position > endPosition ) { newPositions . add ( position ) ; } else if ( adjustBy > _NUM ) { newPositions . add ( position + adjustBy ) ; } else if ( adjustBy < _NUM ) { if ( position > startPosition + adjustBy && position <= startPosition ) { ; } else { newPositions . add ( position + adjustBy ) ; } } } return newPositions ; }
10392	private static void addId ( final StringBuilder buf , final byte [ ] id ) { buf . append ( _STR ) ; boolean backslash = _BOOL ; for ( final byte b : id ) { buf . append ( ( char ) ( b & _NUM ) ) ; if ( b == _STR && backslash ) { buf . append ( _STR ) ; } else { backslash = b == _STR ; } } buf . append ( _STR ) ; }
9049	private ResolvedMigration createAvailableMigration ( int version ) { ResolvedMigration migration = new ResolvedMigration ( ) ; migration . setVersion ( MigrationVersion . fromVersion ( Integer . toString ( version ) ) ) ; migration . setDescription ( _STR ) ; migration . setScript ( _STR ) ; migration . setType ( MigrationType . CQL ) ; return migration ; }
58134	public void comment ( String data ) throws SAXException { m_docIsEmpty = _BOOL ; final int length = data . length ( ) ; if ( length > m_charsBuff . length ) { m_charsBuff = new char [ length * _NUM + _NUM ] ; } data . getChars ( _NUM , length , m_charsBuff , _NUM ) ; comment ( m_charsBuff , _NUM , length ) ; }
48538	public boolean drawImage ( Image img , AffineTransform xform , ImageObserver observer ) { if ( img == null ) { return _BOOL ; } if ( xform == null || xform . isIdentity ( ) ) { return drawImage ( img , _NUM , _NUM , null , observer ) ; } if ( isHiDPIImage ( img ) ) { final int w = img . getWidth ( null ) ; final int h = img . getHeight ( null ) ; final AffineTransform tx = new AffineTransform ( transform ) ; transform ( xform ) ; boolean result = drawHiDPIImage ( img , _NUM , _NUM , w , h , _NUM , _NUM , w , h , null , observer ) ; transform . setTransform ( tx ) ; invalidateTransform ( ) ; return result ; } try { return imagepipe . transformImage ( this , img , xform , observer ) ; } catch ( InvalidPipeException e ) { try { revalidateAll ( ) ; return imagepipe . transformImage ( this , img , xform , observer ) ; } catch ( InvalidPipeException e2 ) { return _BOOL ; } } finally { surfaceData . markDirty ( ) ; } }
13771	public void beginDisplay ( DisplayEvent event ) throws ModelControlException { super . beginDisplay ( event , _BOOL ) ; resetButtonState ( TBL_BUTTON_DELETE ) ; AgentsModel model = ( AgentsModel ) getModel ( ) ; String agentType = getDisplayIDType ( ) ; Object [ ] param = { agentType } ; ptModel . setPageTitleText ( model . getLocalizedString ( _STR + agentType ) ) ; ptModel . setPageTitleHelpMessage ( model . getLocalizedString ( _STR + agentType + _STR ) ) ; tblModel . setTitle ( MessageFormat . format ( model . getLocalizedString ( _STR ) , param ) ) ; tblModel . setTitleLabel ( MessageFormat . format ( model . getLocalizedString ( _STR ) , param ) ) ; tblModel . setSummary ( MessageFormat . format ( model . getLocalizedString ( _STR ) , param ) ) ; tblGroupModel . setTitle ( MessageFormat . format ( model . getLocalizedString ( _STR ) , param ) ) ; tblGroupModel . setTitleLabel ( MessageFormat . format ( model . getLocalizedString ( _STR ) , param ) ) ; tblGroupModel . setSummary ( MessageFormat . format ( model . getLocalizedString ( _STR ) , param ) ) ; getAgentNames ( ) ; CCButton b = ( CCButton ) getChild ( TBL_BUTTON_DELETE ) ; b . setDisabled ( _BOOL ) ; b = ( CCButton ) getChild ( TBL_BUTTON_DELETE_GROUP ) ; b . setDisabled ( _BOOL ) ; }
4965	public void select_all ( ) { Arrays . fill ( sel_array , _BOOL ) ; }
39835	public NvpBuilder addRaw ( final String name , final String value ) { npv . put ( name , value ) ; return this ; }
61943	@ Override public int length ( ) { return set . size ( ) ; }
1514	public final long readUnsignedInt ( ) throws IOException { mPosition += _NUM ; d . readFully ( w , _NUM , _NUM ) ; return ( ( long ) ( w [ _NUM ] ) << _NUM | ( w [ _NUM ] & _NUM ) << _NUM | ( w [ _NUM ] & _NUM ) << _NUM | ( w [ _NUM ] & _NUM ) ) & _NUM ; }
39853	public List < CountryRO > viewAddressCountryOptions ( final ShoppingCart cart , final Shop shop , final String addressType ) { final List < Country > countries = addressBookFacade . getAllCountries ( shop . getCode ( ) , addressType ) ; return map ( countries , CountryRO . class , Country . class ) ; }
44025	public void addPauseListener ( AnimatorPauseListener listener ) { if ( mPauseListeners == null ) { mPauseListeners = new ArrayList < AnimatorPauseListener > ( ) ; } mPauseListeners . add ( listener ) ; }
14171	@ Override public void makeImmutable ( ) { if ( mutable ) { if ( attrs != null ) { Iterator iter = attrs . iterator ( ) ; while ( iter . hasNext ( ) ) { Attribute attr = ( Attribute ) iter . next ( ) ; attr . makeImmutable ( ) ; } attrs = Collections . unmodifiableList ( attrs ) ; } if ( encAttrs != null ) { encAttrs = Collections . unmodifiableList ( encAttrs ) ; } mutable = _BOOL ; } }
38236	@ Override public boolean batchFinished ( ) throws Exception { if ( getInputFormat ( ) == null ) { throw new IllegalStateException ( _STR ) ; } Instances toFilter = getInputFormat ( ) ; if ( ! isFirstBatchDone ( ) ) { Instances toFilterIgnoringAttributes = removeIgnored ( toFilter ) ; File file = getSerializedClustererFile ( ) ; if ( ! file . isDirectory ( ) ) { ObjectInputStream ois = new ObjectInputStream ( new FileInputStream ( file ) ) ; m_ActualClusterer = ( Clusterer ) ois . readObject ( ) ; Instances header = null ; try { header = ( Instances ) ois . readObject ( ) ; } catch ( Exception e ) { } ois . close ( ) ; if ( ( header != null ) && ( ! header . equalHeaders ( toFilterIgnoringAttributes ) ) ) { throw new WekaException ( _STR + header . equalHeadersMsg ( toFilterIgnoringAttributes ) ) ; } } else { m_ActualClusterer = AbstractClusterer . makeCopy ( m_Clusterer ) ; m_ActualClusterer . buildClusterer ( toFilterIgnoringAttributes ) ; } Instances filtered = new Instances ( toFilter , _NUM ) ; ArrayList < String > nominal_values = new ArrayList < String > ( m_ActualClusterer . numberOfClusters ( ) ) ; for ( int i = _NUM ; i < m_ActualClusterer . numberOfClusters ( ) ; i ++ ) { nominal_values . add ( _STR + ( i + _NUM ) ) ; } filtered . insertAttributeAt ( new Attribute ( _STR , nominal_values ) , filtered . numAttributes ( ) ) ; setOutputFormat ( filtered ) ; } for ( int i = _NUM ; i < toFilter . numInstances ( ) ; i ++ ) { convertInstance ( toFilter . instance ( i ) ) ; } flushInput ( ) ; m_NewBatch = _BOOL ; m_FirstBatchDone = _BOOL ; return ( numPendingOutput ( ) != _NUM ) ; }
83312	public void addComponent ( T component ) { components . add ( component ) ; }
67329	public static UiResult openUrl ( URI uri ) { return openUrl ( uri . toString ( ) ) ; }
36533	public final void invalidateLine ( int line ) { repaint ( _NUM , textArea . lineToY ( line ) + fm . getMaxDescent ( ) + fm . getLeading ( ) , getWidth ( ) , fm . getHeight ( ) ) ; }
48821	public ByteBandedRaster ( SampleModel sampleModel , Point origin ) { this ( sampleModel , sampleModel . createDataBuffer ( ) , new Rectangle ( origin . x , origin . y , sampleModel . getWidth ( ) , sampleModel . getHeight ( ) ) , origin , null ) ; }
58174	private void initialize ( URI p_other ) { m_scheme = p_other . getScheme ( ) ; m_userinfo = p_other . getUserinfo ( ) ; m_host = p_other . getHost ( ) ; m_port = p_other . getPort ( ) ; m_path = p_other . getPath ( ) ; m_queryString = p_other . getQueryString ( ) ; m_fragment = p_other . getFragment ( ) ; }
63990	public void playTogether ( Collection < Animator > items ) { if ( items != null && items . size ( ) > _NUM ) { mNeedsSort = _BOOL ; Builder builder = null ; for ( Animator anim : items ) { if ( builder == null ) { builder = play ( anim ) ; } else { builder . with ( anim ) ; } } } }
35454	private E unlinkLast ( ) { Node < E > l = last ; if ( l == null ) return null ; Node < E > p = l . prev ; E item = l . item ; l . item = null ; l . prev = l ; last = p ; if ( p == null ) first = null ; else p . next = null ; -- count ; notFull . signal ( ) ; return item ; }
24252	static boolean isRefreshNotificationRegistered ( NotificationListener client , RefreshNotificationType type ) { boolean isRegistered = _BOOL ; Map < RefreshNotificationType , Integer > notifications = null ; synchronized ( refreshClients ) { notifications = ( Map < RefreshNotificationType , Integer > ) refreshClients . get ( client ) ; } if ( notifications != null ) { Integer timerNotificationId = notifications . get ( type ) ; if ( timerNotificationId != null ) { isRegistered = _BOOL ; } } return isRegistered ; }
31709	private Collection < String > readProcessOutput ( Process proc ) throws IOException { BufferedReader rdr = new BufferedReader ( new InputStreamReader ( proc . getInputStream ( ) ) ) ; Collection < String > res = new ArrayList < > ( ) ; String s ; while ( ( s = rdr . readLine ( ) ) != null ) res . add ( s ) ; return res ; }
86864	public void fillHeaderAndFooter ( final HttpServletRequest request , final HttpServletResponse response , final Map < String , Object > dataModel ) throws Exception { fillHeader ( request , response , dataModel ) ; fillFooter ( dataModel ) ; }
30716	public void addOperand ( ISpacePredicate operand ) { if ( _operandsList == null ) _operandsList = new ArrayList < ISpacePredicate > ( ) ; _operandsList . add ( operand ) ; }
12301	public static String decode ( String s , Type t ) { if ( s == null ) { throw new IllegalArgumentException ( ) ; } final int n = s . length ( ) ; if ( n == _NUM ) { return s ; } if ( s . indexOf ( _STR ) < _NUM ) { if ( t == Type . QUERY_PARAM ) { if ( s . indexOf ( _STR ) < _NUM ) { return s ; } } else { return s ; } } else { if ( n < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } if ( s . charAt ( n - _NUM ) == _STR ) { throw new IllegalArgumentException ( _STR + ( n - _NUM ) ) ; } } if ( t == null ) { return decode ( s , n ) ; } switch ( t ) { case HOST : return decodeHost ( s , n ) ; case QUERY_PARAM : return decodeQueryParam ( s , n ) ; default : return decode ( s , n ) ; } }
30309	public BigDecimal calculateTotalCollectedAmt ( final BillReceiptInfo bri , final List < EgBillDetails > billDetList ) throws InvalidAccountHeadException { return bri . getTotalAmount ( ) ; }
29210	public void skip ( int count ) throws IOException { int skipCount = Math . min ( limit - position , count ) ; while ( _BOOL ) { position += skipCount ; count -= skipCount ; if ( count == _NUM ) break ; skipCount = Math . min ( count , capacity ) ; require ( skipCount ) ; } }
27680	public void test_concurrent_modification_insert ( ) { final BTree btree ; { IndexMetadata md = new IndexMetadata ( UUID . randomUUID ( ) ) ; md . setBranchingFactor ( _NUM ) ; btree = BTree . create ( new SimpleMemoryRawStore ( ) , md ) ; btree . insert ( _NUM , _STR ) ; btree . insert ( _NUM , _STR ) ; btree . insert ( _NUM , _STR ) ; } { ITupleCursor2 < String > cursor = newCursor ( btree ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . seek ( _NUM ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . tuple ( ) ) ; btree . insert ( _NUM , _STR ) ; assertEquals ( TestKeyBuilder . asSortKey ( _NUM ) , cursor . currentKey ( ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . tuple ( ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . prior ( ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . tuple ( ) ) ; btree . remove ( _NUM ) ; assertEquals ( null , cursor . tuple ( ) ) ; assertEquals ( TestKeyBuilder . asSortKey ( _NUM ) , cursor . currentKey ( ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . next ( ) ) ; btree . remove ( _NUM ) ; assertEquals ( null , cursor . tuple ( ) ) ; assertEquals ( TestKeyBuilder . asSortKey ( _NUM ) , cursor . currentKey ( ) ) ; btree . insert ( _NUM , _STR ) ; assertEquals ( TestKeyBuilder . asSortKey ( _NUM ) , cursor . currentKey ( ) ) ; assertEquals ( null , cursor . tuple ( ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . next ( ) ) ; assertEquals ( new TestTuple < String > ( _NUM , _STR ) , cursor . tuple ( ) ) ; } }
40910	public void removeAllIms ( ) { ims . clear ( ) ; }
35831	static String escapeStringForASCII ( String s ) { String out = _STR ; char [ ] cArray = s . toCharArray ( ) ; for ( int i = _NUM ; i < cArray . length ; i ++ ) { char c = cArray [ i ] ; if ( c > _NUM ) { out += _STR ; String hex = Integer . toHexString ( c ) ; while ( hex . length ( ) < _NUM ) hex = _STR + hex ; out += hex ; } else if ( c == _STR ) { out += _STR ; } else if ( c == _STR ) { out += _STR ; } else if ( c == _STR ) { out += _STR ; } else if ( c == _STR ) { out += _STR ; } else if ( c == _STR ) { out += _STR ; } else if ( c == _STR ) { out += _STR ; } else { out += c ; } } return out ; }
27519	public void copyReader ( String encoding , Reader r ) throws IOException { super . setContentEncoding ( encoding ) ; String s = readString ( r ) ; content = s . getBytes ( encoding ) ; }
78962	private void clearDictionaryCache ( ) { Map < String , Dictionary > dictionaryCaches = surrogateKeyGen . getDictionaryCaches ( ) ; List < Dictionary > reverseDictionaries = new ArrayList < > ( dictionaryCaches . values ( ) ) ; for ( int i = _NUM ; i < reverseDictionaries . size ( ) ; i ++ ) { Dictionary dictionary = reverseDictionaries . get ( i ) ; dictionary . clear ( ) ; } }
8122	public static String toTypeString ( Object [ ] arguments , int maxSize ) { if ( arguments == null ) { return _STR ; } StringBuilder argBuf = new StringBuilder ( ) ; for ( int i = _NUM ; i < arguments . length ; i ++ ) { if ( maxSize != - _NUM && argBuf . length ( ) > maxSize ) { argBuf . append ( _STR ) ; break ; } else { if ( i > _NUM ) { argBuf . append ( _STR ) ; } argBuf . append ( arguments [ i ] != null ? typeName ( arguments [ i ] ) : _STR ) ; } } return argBuf . toString ( ) ; }
46431	public boolean renameFile ( File oldFile , File newFile ) { synchronized ( fileCache ) { if ( oldFile . renameTo ( newFile ) ) { validateFileCache ( ) ; return _BOOL ; } return _BOOL ; } }
2009	public Future < ? > execute ( CameraCommand command ) { if ( mClosed ) { return Futures . immediateFuture ( null ) ; } synchronized ( mLock ) { if ( mExecutor == null ) { mExecutor = mExecutorProvider . get ( ) ; } checkNotNull ( mExecutor ) ; return mExecutor . submit ( new CommandRunnable ( command ) ) ; } }
85549	public static EnumSet < KindName > kindNames ( int kind ) { EnumSet < KindName > kinds = EnumSet . noneOf ( KindName . class ) ; if ( ( kind & VAL ) != _NUM ) kinds . add ( ( ( kind & VAL ) == VAR ) ? KindName . VAR : KindName . VAL ) ; if ( ( kind & MTH ) != _NUM ) kinds . add ( KindName . METHOD ) ; if ( ( kind & TYP ) != _NUM ) kinds . add ( KindName . CLASS ) ; if ( ( kind & PCK ) != _NUM ) kinds . add ( KindName . PACKAGE ) ; return kinds ; }
15738	public int length ( ) { return text . length ( ) ; }
71334	public static String serializeDigestResponse ( Map < String , String > paramMap ) { StringBuilder sb = new StringBuilder ( _STR ) ; boolean prefixComma = _BOOL ; for ( Map . Entry < String , String > entry : paramMap . entrySet ( ) ) { if ( ! prefixComma ) { prefixComma = _BOOL ; } else { sb . append ( _STR ) ; } sb . append ( entry . getKey ( ) ) ; sb . append ( _STR ) ; sb . append ( entry . getValue ( ) ) ; } return sb . toString ( ) ; }
57311	public void populateCombos ( Activity activity , final Listener listener ) { List < String > services = getServices ( activity . getPackageManager ( ) ) ; populateCombos ( activity , services , listener ) ; }
10491	protected JsonEncoding findEncoding ( MediaType mediaType , MultivaluedMap < String , Object > httpHeaders ) { return JsonEncoding . UTF8 ; }
51869	static BufferedImage convertImage ( BufferedImage image ) { switch ( image . getType ( ) ) { case BufferedImage . TYPE_INT_ARGB_PRE : return image ; case BufferedImage . TYPE_4BYTE_ABGR : image . coerceData ( _BOOL ) ; return image ; } BufferedImage convertedImage = new BufferedImage ( image . getWidth ( ) , image . getHeight ( ) , BufferedImage . TYPE_INT_ARGB_PRE ) ; Graphics2D g = convertedImage . createGraphics ( ) ; g . setColor ( new java . awt . Color ( _NUM , _NUM , _NUM , _NUM ) ) ; g . fillRect ( _NUM , _NUM , image . getWidth ( ) , image . getHeight ( ) ) ; g . drawImage ( image , _NUM , _NUM , null ) ; g . dispose ( ) ; return convertedImage ; }
45746	public long start ( ) { startTime = System . currentTimeMillis ( ) ; return startTime ; }
62754	public void next ( ) { if ( iterator . hasNext ( ) ) { View currentView = iterator . next ( ) ; if ( isUsingDefaultListener ( ) ) currentView . setOnClickListener ( null ) ; if ( iterator . nextIndex ( ) < mViews . size ( ) ) { View nextView = mViews . get ( iterator . nextIndex ( ) ) ; if ( isUsingDefaultListener ( ) ) nextView . setOnClickListener ( listener ) ; ControllerAnimator animator = getDefaultForwardAnimation ( ) ; animator . setOldView ( currentView ) ; animator . setNewView ( nextView ) ; currentView . startAnimation ( animator ) ; if ( iterator . nextIndex ( ) == mViews . size ( ) - _NUM ) if ( hasControllerListener ( ) ) mListener . onEndReached ( ) ; } else { if ( mLoop ) { iterator = mViews . listIterator ( ) ; View nextView = mViews . get ( _NUM ) ; if ( mUseDefaultListener ) nextView . setOnClickListener ( listener ) ; ControllerAnimator animator = getDefaultForwardAnimation ( ) ; animator . setOldView ( currentView ) ; animator . setNewView ( nextView ) ; currentView . startAnimation ( animator ) ; } } } }
18219	private boolean isHHSign ( String str ) { boolean sign = _BOOL ; try { char r = ( char ) Integer . parseInt ( str , _NUM ) ; } catch ( NumberFormatException e ) { sign = _BOOL ; } return sign ; }
61634	public void simulateMethod ( SootMethod method , ReferenceVariable thisVar , ReferenceVariable returnVar , ReferenceVariable params [ ] ) { String subSignature = method . getSubSignature ( ) ; if ( subSignature . equals ( _STR ) ) { sun_misc_Unsafe_allocateInstance ( method , thisVar , returnVar , params ) ; return ; } { defaultMethod ( method , thisVar , returnVar , params ) ; return ; } }
877	public void cacheResolvedMethod ( Class clas , Class [ ] types , Method method ) { if ( Interpreter . DEBUG ) Interpreter . debug ( _STR + clas + _STR + method ) ; SignatureKey sk = new SignatureKey ( clas , method . getName ( ) , types ) ; if ( Modifier . isStatic ( method . getModifiers ( ) ) ) resolvedStaticMethods . put ( sk , method ) ; else resolvedObjectMethods . put ( sk , method ) ; }
18875	public void testSetBitTopPositive ( ) { byte aBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; int aSign = _NUM ; int number = _NUM ; byte rBytes [ ] = { _NUM , - _NUM , _NUM , - _NUM , _NUM , _NUM , - _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger result = aNumber . setBit ( number ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
15521	private void destroyBeans ( Map < String , Object > viewMap , Map < String , ViewScopeContextObject > contextMap ) { ArrayList < String > removalNameList = new ArrayList < > ( ) ; if ( contextMap != null ) { for ( Map . Entry < String , ViewScopeContextObject > entry : contextMap . entrySet ( ) ) { String passivationCapableId = entry . getKey ( ) ; Contextual contextual = beanManager . getPassivationCapableBean ( passivationCapableId ) ; ViewScopeContextObject contextObject = entry . getValue ( ) ; CreationalContext creationalContext = beanManager . createCreationalContext ( contextual ) ; contextual . destroy ( viewMap . get ( contextObject . getName ( ) ) , creationalContext ) ; removalNameList . add ( contextObject . getName ( ) ) ; } Iterator < String > removalNames = removalNameList . iterator ( ) ; while ( removalNames . hasNext ( ) ) { String name = removalNames . next ( ) ; viewMap . remove ( name ) ; } contextMap . clear ( ) ; } }
29131	public static void close ( @ CheckForNull OutputStream outputStream ) { if ( outputStream == null ) { return ; } try { outputStream . close ( ) ; } catch ( IOException e ) { } }
13035	@ Override public Node item ( int index ) { return ( nodes != null && index < nodes . size ( ) ) ? ( Node ) ( nodes . get ( index ) ) : null ; }
60469	private int charToVisibleWidth ( char c , @ JdkConstants . FontStyle int fontType , int currentX ) { if ( c == _STR ) { return _NUM ; } if ( c == _STR ) { return EditorUtil . nextTabStop ( currentX , this ) - currentX ; } return EditorUtil . charWidth ( c , fontType , this ) ; }
9094	public static void createDir ( File target ) throws AdeUsageException { if ( ! target . exists ( ) && ! target . mkdir ( ) && ! target . exists ( ) ) { throw new AdeUsageException ( _STR + target . getPath ( ) ) ; } }
5748	public GTSEncoder ( long baseTimestamp ) { this . baseTimestamp = baseTimestamp ; this . stream = new ByteArrayOutputStream ( ) ; this . wrappingKey = null ; }
69738	public static String encode ( final Coordinate [ ] coords ) { long lastLat = _NUM ; long lastLng = _NUM ; final StringBuffer result = new StringBuffer ( ) ; for ( final Coordinate point : coords ) { long lat = Math . round ( point . y * _NUM ) ; long lng = Math . round ( point . x * _NUM ) ; long dLat = lat - lastLat ; long dLng = lng - lastLng ; encode ( dLat , result ) ; encode ( dLng , result ) ; lastLat = lat ; lastLng = lng ; } return result . toString ( ) ; }
73394	private void extractWeightValues ( List < Synapse > synapses ) { int exWeights = _NUM ; int inWeights = _NUM ; for ( Synapse s : synapses ) { double w = s . getStrength ( ) ; if ( w > _NUM ) { exWeights ++ ; } else { inWeights ++ ; } } weights [ _NUM ] = new double [ exWeights ] ; weights [ _NUM ] = new double [ inWeights ] ; exWeights = _NUM ; inWeights = _NUM ; if ( weights [ _NUM ] . length != _NUM ) { for ( Synapse s : synapses ) { double w = s . getStrength ( ) ; if ( w > _NUM ) { weights [ _NUM ] [ exWeights ++ ] = w ; } else { weights [ _NUM ] [ inWeights ++ ] = w ; } } } }
14424	@ Override public void close ( ) { try { flush ( ) ; } catch ( AMLogException ale ) { Debug . error ( tableName + _STR + ale . getMessage ( ) ) ; } if ( conn != null ) { try { conn . close ( ) ; } catch ( SQLException ce ) { Debug . error ( tableName + _STR , ce ) ; } } stopBufferTimer ( ) ; }
83785	public boolean contains ( List < Integer > hashes ) { Iterator < Integer > ni = hashes . iterator ( ) ; for ( int i = _NUM ; i < hashFunctions ; ++ i ) { if ( ! testBit ( ( int ) ( ( ni . next ( ) & _NUM ) % ( filter . length * _NUM ) ) ) ) { return _BOOL ; } } return _BOOL ; }
19996	private void ensureCapacity ( int additionalData ) { if ( ( this . position + additionalData ) > this . byteBuffer . length ) { int newLength = ( int ) ( this . byteBuffer . length * _NUM ) ; if ( newLength < ( this . byteBuffer . length + additionalData ) ) { newLength = this . byteBuffer . length + ( int ) ( additionalData * _NUM ) ; } if ( newLength < this . byteBuffer . length ) { newLength = this . byteBuffer . length + additionalData ; } byte [ ] newBytes = new byte [ newLength ] ; System . arraycopy ( this . byteBuffer , _NUM , newBytes , _NUM , this . byteBuffer . length ) ; this . byteBuffer = newBytes ; } }
10009	public boolean isValidNumber ( PhoneNumber number ) { String regionCode = getRegionCodeForNumber ( number ) ; return isValidNumberForRegion ( number , regionCode ) ; }
12074	private String trimUrl ( String uri ) { if ( uri == null ) return _STR ; if ( uri . endsWith ( _STR ) ) uri = uri . substring ( _NUM , uri . length ( ) - _NUM ) ; return uri ; }
20649	public Pair < Integer , List < Long > > next ( ) { try { classesProcessed ++ ; Integer key = iterator . next ( ) ; long pos = classificationBlockRMA2 . getPos ( key ) ; int count = classificationBlockRMA2 . getSum ( key ) ; classDumpReader . seek ( pos ) ; List < Long > list = new LinkedList < > ( ) ; for ( int i = _NUM ; i < count ; i ++ ) list . add ( classDumpReader . readLong ( ) ) ; return new Pair < > ( key , list ) ; } catch ( Exception e ) { Basic . caught ( e ) ; error = _BOOL ; return null ; } }
35101	public static String addAlpha ( String originalColor , double alpha ) { long alphaFixed = Math . round ( alpha * _NUM ) ; String alphaHex = Long . toHexString ( alphaFixed ) ; if ( alphaHex . length ( ) == _NUM ) { alphaHex = _STR + alphaHex ; } originalColor = originalColor . replace ( _STR , _STR + alphaHex ) ; return originalColor ; }
52970	public void stop ( ) { server . stop ( _NUM ) ; }
13182	protected DateTimeData parse ( String str , int durationType ) throws SchemaDateTimeException { int len = str . length ( ) ; DateTimeData date = new DateTimeData ( str , this ) ; int start = _NUM ; char c = str . charAt ( start ++ ) ; if ( c != _STR && c != _STR ) { throw new SchemaDateTimeException ( ) ; } else { date . utc = ( c == _STR ) ? _STR : _NUM ; if ( c == _STR && str . charAt ( start ++ ) != _STR ) { throw new SchemaDateTimeException ( ) ; } } int negate = _NUM ; if ( date . utc == _STR ) { negate = - _NUM ; } boolean designator = _BOOL ; int endDate = indexOf ( str , start , len , _STR ) ; if ( endDate == - _NUM ) { endDate = len ; } else if ( durationType == YEARMONTHDURATION_TYPE ) { throw new SchemaDateTimeException ( ) ; } int end = indexOf ( str , start , endDate , _STR ) ; if ( end != - _NUM ) { if ( durationType == DAYTIMEDURATION_TYPE ) { throw new SchemaDateTimeException ( ) ; } date . year = negate * parseInt ( str , start , end ) ; start = end + _NUM ; designator = _BOOL ; } end = indexOf ( str , start , endDate , _STR ) ; if ( end != - _NUM ) { if ( durationType == DAYTIMEDURATION_TYPE ) { throw new SchemaDateTimeException ( ) ; } date . month = negate * parseInt ( str , start , end ) ; start = end + _NUM ; designator = _BOOL ; } end = indexOf ( str , start , endDate , _STR ) ; if ( end != - _NUM ) { if ( durationType == YEARMONTHDURATION_TYPE ) { throw new SchemaDateTimeException ( ) ; } date . day = negate * parseInt ( str , start , end ) ; start = end + _NUM ; designator = _BOOL ; } if ( len == endDate && start != len ) { throw new SchemaDateTimeException ( ) ; } if ( len != endDate ) { end = indexOf ( str , ++ start , len , _STR ) ; if ( end != - _NUM ) { date . hour = negate * parseInt ( str , start , end ) ; start = end + _NUM ; designator = _BOOL ; } end = indexOf ( str , start , len , _STR ) ; if ( end != - _NUM ) { date . minute = negate * parseInt ( str , start , end ) ; start = end + _NUM ; designator = _BOOL ; } end = indexOf ( str , start , len , _STR ) ; if ( end != - _NUM ) { date . second = negate * parseSecond ( str , start , end ) ; start = end + _NUM ; designator = _BOOL ; } if ( start != len || str . charAt ( -- start ) == _STR ) { throw new SchemaDateTimeException ( ) ; } } if ( ! designator ) { throw new SchemaDateTimeException ( ) ; } return date ; }
42297	final void copyIntoLocalState ( Operand [ ] _localState ) { localState = new Operand [ _localState . length ] ; System . arraycopy ( _localState , _NUM , localState , _NUM , _localState . length ) ; setLocalKnown ( ) ; }
66585	@ SuppressWarnings ( _STR ) private HashMap < String , DBObject > loadDBObjects ( Class objectClass ) { HashMap < String , DBObject > objectMap = new HashMap < String , DBObject > ( ) ; DBObject dbObject = new DBObject ( this , objectClass ) ; String objectToLoad = s_logger . localizeMessage ( _STR ) ; String objectsToLoad = s_logger . localizeMessage ( _STR ) ; String sqlLoadHeaders = null ; String sqlLoadContents = null ; if ( dbObject != null ) { objectToLoad = dbObject . getObjectType ( ) ; objectsToLoad = dbObject . getObjectTypes ( ) ; sqlLoadHeaders = dbObject . getLoadHeaderSQL ( ) ; sqlLoadContents = dbObject . getLoadContentSQL ( ) ; } s_logger . log ( Level . FINE , _STR , new Object [ ] { objectsToLoad , getDirection ( ) } ) ; PreparedStatementWrapper stmtLoadHeaders = setPreparedStatement ( sqlLoadHeaders ) ; PreparedStatementWrapper stmtLoadContents = setPreparedStatement ( sqlLoadContents ) ; int counter = _NUM ; if ( dbObject != null ) { String sql = dbObject . getLoadObjectSQL ( ) ; Statement stmt = setStatement ( ) ; ResultSet rs = executeQuery ( stmt , sql ) ; while ( getResultSetNext ( rs ) ) { String s = getResultSetString ( rs , _STR ) ; if ( ! objectMap . containsKey ( s ) ) { DBObject obj = new DBObject ( this , objectClass , s ) ; obj . populate ( stmtLoadHeaders , stmtLoadContents ) ; if ( obj . isPopulated ( ) ) { objectMap . put ( s . toUpperCase ( ) , obj ) ; counter ++ ; } } } releaseResultSet ( rs ) ; releaseStatement ( stmt ) ; } releasePreparedStatement ( stmtLoadHeaders ) ; releasePreparedStatement ( stmtLoadContents ) ; if ( counter == _NUM ) s_logger . log ( Level . FINE , _STR , new Object [ ] { Integer . toString ( counter ) , objectToLoad } ) ; else s_logger . log ( Level . FINE , _STR , new Object [ ] { Integer . toString ( counter ) , objectsToLoad } ) ; s_logger . flush ( ) ; return objectMap ; }
23993	protected Object attemptReadResponse ( Connection cnx ) throws Exception { Message msg = createResponseMessage ( ) ; if ( msg != null ) { msg . setComms ( cnx . getSocket ( ) , cnx . getInputStream ( ) , cnx . getOutputStream ( ) , cnx . getCommBuffer ( ) , cnx . getStats ( ) ) ; if ( msg instanceof ChunkedMessage ) { try { return processResponse ( msg , cnx ) ; } finally { msg . unsetComms ( ) ; processSecureBytes ( cnx , msg ) ; } } else { try { msg . recv ( ) ; } finally { msg . unsetComms ( ) ; processSecureBytes ( cnx , msg ) ; } return processResponse ( msg , cnx ) ; } } else { return null ; } }
86779	public synchronized boolean add ( E e , boolean hasNext ) { while ( mInternalQueue . size ( ) >= mMaxSize && ! mClosed ) { notifyAll ( ) ; try { wait ( TIMEOUT ) ; } catch ( InterruptedException e1 ) { mClosed = _BOOL ; ProgramState . checkAbort ( ) ; throw new IllegalStateException ( _STR , e1 ) ; } ProgramState . checkAbort ( ) ; } if ( mClosed ) { return _BOOL ; } final boolean wasEmpty = mInternalQueue . isEmpty ( ) ; mHasNext = hasNext ; mInternalQueue . add ( e ) ; if ( wasEmpty ) { notifyAll ( ) ; } return _BOOL ; }
86163	public TranslatableComponent ( ) { }
67999	public void addPart ( int index , PduPart part ) { if ( null == part ) { throw new NullPointerException ( ) ; } putPartToMaps ( part ) ; mParts . add ( index , part ) ; }
84105	public StrBuilder insert ( int index , boolean value ) { validateIndex ( index ) ; if ( value ) { ensureCapacity ( size + _NUM ) ; System . arraycopy ( buffer , index , buffer , index + _NUM , size - index ) ; buffer [ index ++ ] = _STR ; buffer [ index ++ ] = _STR ; buffer [ index ++ ] = _STR ; buffer [ index ] = _STR ; size += _NUM ; } else { ensureCapacity ( size + _NUM ) ; System . arraycopy ( buffer , index , buffer , index + _NUM , size - index ) ; buffer [ index ++ ] = _STR ; buffer [ index ++ ] = _STR ; buffer [ index ++ ] = _STR ; buffer [ index ++ ] = _STR ; buffer [ index ] = _STR ; size += _NUM ; } return this ; }
80262	public boolean hasNatureAndWeapon ( Nature nature , String weapon ) { return this . nature == nature && ( ( weapon == null && this . weapon == null ) || ( weapon != null && weapon . equals ( this . weapon ) ) ) ; }
23788	public void dump ( String infoMsg ) { storage . getOnlineMembers ( ) ; storage . getOfflineMembers ( ) ; storage . getOfflineAndEqualMembers ( ) ; storage . getMyInitializingID ( ) ; storage . getMyPersistentID ( ) ; final StringBuilder buf = new StringBuilder ( _NUM ) ; if ( infoMsg != null ) { buf . append ( infoMsg ) ; buf . append ( _STR ) ; } buf . append ( _STR ) ; buf . append ( storage . getMyPersistentID ( ) ) ; buf . append ( _STR ) ; buf . append ( storage . getMyInitializingID ( ) ) ; buf . append ( _STR ) ; for ( PersistentMemberID id : storage . getOnlineMembers ( ) ) { buf . append ( _STR ) ; buf . append ( id ) ; buf . append ( _STR ) ; } buf . append ( _STR ) ; for ( PersistentMemberID id : storage . getOfflineMembers ( ) ) { buf . append ( _STR ) ; buf . append ( id ) ; buf . append ( _STR ) ; } buf . append ( _STR ) ; for ( PersistentMemberID id : storage . getOfflineAndEqualMembers ( ) ) { buf . append ( _STR ) ; buf . append ( id ) ; buf . append ( _STR ) ; } logger . debug ( buf . toString ( ) ) ; }
47058	private Node < K , V > findNode ( Object key ) { if ( key == null ) throw new NullPointerException ( ) ; Comparator < ? super K > cmp = comparator ; outer : for ( ; ; ) { for ( Node < K , V > b = findPredecessor ( key , cmp ) , n = b . next ; ; ) { Object v ; int c ; if ( n == null ) break outer ; Node < K , V > f = n . next ; if ( n != b . next ) break ; if ( ( v = n . value ) == null ) { n . helpDelete ( b , f ) ; break ; } if ( b . value == null || v == n ) break ; if ( ( c = cpr ( cmp , key , n . key ) ) == _NUM ) return n ; if ( c < _NUM ) break outer ; b = n ; n = f ; } } return null ; }
33964	static Sort parseSort ( long timestampSec , IndexState state , List < Object > fields , List < String > sortFieldNames , Map < String , FieldDef > dynamicFields ) { List < SortField > sortFields = new ArrayList < SortField > ( ) ; for ( Object _sub : fields ) { Request sub = ( Request ) _sub ; String fieldName = sub . getString ( _STR ) ; SortField sf ; if ( sortFieldNames != null ) { sortFieldNames . add ( fieldName ) ; } if ( fieldName . equals ( _STR ) ) { sf = SortField . FIELD_DOC ; } else if ( fieldName . equals ( _STR ) ) { sf = SortField . FIELD_SCORE ; } else { FieldDef fd ; if ( dynamicFields != null ) { fd = dynamicFields . get ( fieldName ) ; } else { fd = null ; } if ( fd == null ) { fd = state . getField ( fieldName ) ; } if ( fd == null ) { sub . fail ( _STR , _STR + fieldName + _STR ) ; fd = null ; } if ( fd . valueSource != null ) { sf = fd . valueSource . getSortField ( sub . getBoolean ( _STR ) ) ; } else if ( fd . valueType == FieldDef . FieldValueType . LAT_LON ) { if ( fd . fieldType . docValuesType ( ) == DocValuesType . NONE ) { sub . fail ( _STR , _STR + fieldName + _STR ) ; } Request sub2 = sub . getStruct ( _STR ) ; sf = LatLonDocValuesField . newDistanceSort ( fieldName , sub2 . getDouble ( _STR ) , sub2 . getDouble ( _STR ) ) ; } else { if ( ( fd . fieldType != null && fd . fieldType . docValuesType ( ) == DocValuesType . NONE ) || ( fd . fieldType == null && fd . valueSource == null ) ) { sub . fail ( _STR , _STR + fieldName + _STR ) ; } if ( fd . multiValued ) { String selectorString = sub . getEnum ( _STR ) ; if ( fd . valueType == FieldDef . FieldValueType . ATOM ) { SortedSetSelector . Type selector ; if ( selectorString . equals ( _STR ) ) { selector = SortedSetSelector . Type . MIN ; } else if ( selectorString . equals ( _STR ) ) { selector = SortedSetSelector . Type . MAX ; } else if ( selectorString . equals ( _STR ) ) { selector = SortedSetSelector . Type . MIDDLE_MIN ; } else if ( selectorString . equals ( _STR ) ) { selector = SortedSetSelector . Type . MIDDLE_MAX ; } else { assert _BOOL ; selector = null ; } sf = new SortedSetSortField ( fieldName , sub . getBoolean ( _STR ) , selector ) ; } else if ( fd . valueType == FieldDef . FieldValueType . INT ) { sf = new SortedNumericSortField ( fieldName , SortField . Type . INT , sub . getBoolean ( _STR ) , parseNumericSelector ( sub , selectorString ) ) ; } else if ( fd . valueType == FieldDef . FieldValueType . LONG ) { sf = new SortedNumericSortField ( fieldName , SortField . Type . LONG , sub . getBoolean ( _STR ) , parseNumericSelector ( sub , selectorString ) ) ; } else if ( fd . valueType == FieldDef . FieldValueType . FLOAT ) { sf = new SortedNumericSortField ( fieldName , SortField . Type . FLOAT , sub . getBoolean ( _STR ) , parseNumericSelector ( sub , selectorString ) ) ; } else if ( fd . valueType == FieldDef . FieldValueType . DOUBLE ) { sf = new SortedNumericSortField ( fieldName , SortField . Type . DOUBLE , sub . getBoolean ( _STR ) , parseNumericSelector ( sub , selectorString ) ) ; } else { sub . fail ( _STR , _STR + fieldName + _STR + fd . valueType ) ; assert _BOOL ; sf = null ; } } else { SortField . Type sortType ; if ( fd . valueType == FieldDef . FieldValueType . ATOM ) { sortType = SortField . Type . STRING ; } else if ( fd . valueType == FieldDef . FieldValueType . LONG || fd . valueType == FieldDef . FieldValueType . DATE_TIME ) { sortType = SortField . Type . LONG ; } else if ( fd . valueType == FieldDef . FieldValueType . INT ) { sortType = SortField . Type . INT ; } else if ( fd . valueType == FieldDef . FieldValueType . DOUBLE ) { sortType = SortField . Type . DOUBLE ; } else if ( fd . valueType == FieldDef . FieldValueType . FLOAT ) { sortType = SortField . Type . FLOAT ; } else { sub . fail ( _STR , _STR + fieldName + _STR + fd . valueType ) ; assert _BOOL ; sortType = null ; } sf = new SortField ( fieldName , sortType , sub . getBoolean ( _STR ) ) ; } } boolean hasMissingLast = sub . hasParam ( _STR ) ; boolean missingLast = sub . getBoolean ( _STR ) ; if ( fd . valueType == FieldDef . FieldValueType . ATOM ) { if ( missingLast ) { sf . setMissingValue ( SortField . STRING_LAST ) ; } else { sf . setMissingValue ( SortField . STRING_FIRST ) ; } } else if ( fd . valueType == FieldDef . FieldValueType . INT ) { sf . setMissingValue ( missingLast ? Integer . MAX_VALUE : Integer . MIN_VALUE ) ; } else if ( fd . valueType == FieldDef . FieldValueType . LONG ) { sf . setMissingValue ( missingLast ? Long . MAX_VALUE : Long . MIN_VALUE ) ; } else if ( fd . valueType == FieldDef . FieldValueType . FLOAT ) { sf . setMissingValue ( missingLast ? Float . POSITIVE_INFINITY : Float . NEGATIVE_INFINITY ) ; } else if ( fd . valueType == FieldDef . FieldValueType . DOUBLE ) { sf . setMissingValue ( missingLast ? Double . POSITIVE_INFINITY : Double . NEGATIVE_INFINITY ) ; } else if ( hasMissingLast ) { sub . fail ( _STR , _STR + fieldName + _STR + sf . getType ( ) ) ; } } sortFields . add ( sf ) ; } return new Sort ( sortFields . toArray ( new SortField [ sortFields . size ( ) ] ) ) ; }
48425	public synchronized void open ( ) { }
19570	@ NotNull private Optional < TypeConversion > findConversionFromDbValue ( @ NotNull Type source , @ NotNull Type target ) { if ( isAssignable ( target , source ) ) return Optional . of ( TypeConversion . identity ( ) ) ; Optional < TypeConversion > directConversion = typeConversionRegistry . findConversionFromDbValue ( source , target ) ; if ( directConversion . isPresent ( ) ) return directConversion ; Optional < TypeConversion > arrayConversion = findArrayConversion ( source , target ) ; if ( arrayConversion . isPresent ( ) ) return arrayConversion ; Optional < TypeConversion > optionalConversion = findOptionalConversion ( source , target ) ; if ( optionalConversion . isPresent ( ) ) return optionalConversion ; Optional < TypeConversion > enumConversion = findEnumConversion ( target ) ; if ( enumConversion . isPresent ( ) ) return enumConversion ; return Optional . empty ( ) ; }
16149	private boolean advanceApiUpTo ( TreeSet < AreaPanelInfo > sortedApiTree , AreaPanelInfo api , int time ) { AreaPanel ap = api . ap ( ) ; TimeTree rootTt = ap . getTimeTree ( ) ; TimeTree tt = rootTt . getEncompassigTimeTreeOrMaxTimeTreeBeforeTime ( time , _BOOL ) ; if ( tt == null || tt . id == api . currTtId ) return _BOOL ; sortedApiTree . remove ( api ) ; if ( api . setTt ( tt , Integer . MAX_VALUE ) ) sortedApiTree . add ( api ) ; return _BOOL ; }
45705	@ RequestMapping ( value = { _STR , _STR } , method = RequestMethod . POST ) @ ResponseBody public RestWrapper update ( @ ModelAttribute ( _STR ) @ Valid UserRoles userRoles , BindingResult bindingResult , Principal principal ) { RestWrapper restWrapper = null ; if ( bindingResult . hasErrors ( ) ) { BindingResultError bindingResultError = new BindingResultError ( ) ; return bindingResultError . errorMessage ( bindingResult ) ; } try { com . wipro . ats . bdre . md . dao . jpa . UserRoles jpaUserRoles = new com . wipro . ats . bdre . md . dao . jpa . UserRoles ( ) ; jpaUserRoles . setUserRoleId ( userRoles . getUserRoleId ( ) ) ; jpaUserRoles . setRole ( userRoles . getRole ( ) ) ; Users users = new Users ( ) ; users . setUsername ( userRoles . getUsername ( ) ) ; jpaUserRoles . setUsers ( users ) ; userRolesDAO . update ( jpaUserRoles ) ; restWrapper = new RestWrapper ( userRoles , RestWrapper . OK ) ; LOGGER . info ( _STR + userRoles . getUserRoleId ( ) + _STR + principal . getName ( ) + userRoles ) ; } catch ( Exception e ) { LOGGER . error ( e ) ; restWrapper = new RestWrapper ( e . getMessage ( ) , RestWrapper . ERROR ) ; } return restWrapper ; }
61799	private void sendRequestOption ( ) throws IOException { String request = _STR + mParameters . host + _STR + mParameters . port + mParameters . path + _STR + addHeaders ( ) ; Log . i ( TAG , request . substring ( _NUM , request . indexOf ( _STR ) ) ) ; mOutputStream . write ( request . getBytes ( _STR ) ) ; Response . parseResponse ( mBufferedReader ) ; }
27783	@ Override public Result doComparisonTest ( final Properties properties ) throws Exception { final long timeout = Long . parseLong ( properties . getProperty ( TestOptions . TIMEOUT ) ) ; final int nresources = Integer . parseInt ( properties . getProperty ( TestOptions . NRESOURCES ) ) ; final int minLocks = Integer . parseInt ( properties . getProperty ( TestOptions . MIN_LOCKS ) ) ; final int maxLocks = Integer . parseInt ( properties . getProperty ( TestOptions . MAX_LOCKS ) ) ; final int ntrials = Integer . parseInt ( properties . getProperty ( TestOptions . NTRIALS ) ) ; final int keyLen = Integer . parseInt ( properties . getProperty ( TestOptions . KEYLEN ) ) ; final int nops = Integer . parseInt ( properties . getProperty ( TestOptions . NOPS ) ) ; final double failureRate = Double . parseDouble ( properties . getProperty ( TestOptions . FAILURE_RATE ) ) ; Result result = doConcurrentClientTest ( journal , timeout , nresources , minLocks , maxLocks , ntrials , keyLen , nops , failureRate ) ; return result ; }
62694	public static void printThreadInfo ( PrintWriter stream , String title ) { final int STACK_DEPTH = _NUM ; boolean contention = threadBean . isThreadContentionMonitoringEnabled ( ) ; long [ ] threadIds = threadBean . getAllThreadIds ( ) ; stream . println ( _STR + title ) ; stream . println ( threadIds . length + _STR ) ; for ( long tid : threadIds ) { ThreadInfo info = threadBean . getThreadInfo ( tid , STACK_DEPTH ) ; if ( info == null ) { stream . println ( _STR ) ; continue ; } stream . println ( _STR + getTaskName ( info . getThreadId ( ) , info . getThreadName ( ) ) + _STR ) ; Thread . State state = info . getThreadState ( ) ; stream . println ( _STR + state ) ; stream . println ( _STR + info . getBlockedCount ( ) ) ; stream . println ( _STR + info . getWaitedCount ( ) ) ; if ( contention ) { stream . println ( _STR + info . getBlockedTime ( ) ) ; stream . println ( _STR + info . getWaitedTime ( ) ) ; } if ( state == Thread . State . WAITING ) { stream . println ( _STR + info . getLockName ( ) ) ; } else if ( state == Thread . State . BLOCKED ) { stream . println ( _STR + info . getLockName ( ) ) ; stream . println ( _STR + getTaskName ( info . getLockOwnerId ( ) , info . getLockOwnerName ( ) ) ) ; } stream . println ( _STR ) ; for ( StackTraceElement frame : info . getStackTrace ( ) ) { stream . println ( _STR + frame . toString ( ) ) ; } } stream . flush ( ) ; }
33035	public void addDelete ( IResource delete ) { if ( fDelete == null ) fDelete = new ArrayList < IResource > ( _NUM ) ; fDelete . add ( delete ) ; if ( fIgnoreCount == _NUM ) { internalAdd ( new DeleteDescription ( delete ) ) ; } }
72407	public static double max ( final double a , final double b ) { if ( a > b ) { return a ; } if ( a < b ) { return b ; } if ( a != b ) { return Double . NaN ; } long bits = Double . doubleToRawLongBits ( a ) ; if ( bits == _NUM ) { return b ; } return a ; }
68452	public void addContainer ( ImageContainer container ) { mContainers . add ( container ) ; }
52894	@ Override public void writeExternal ( ObjectOutput out ) throws IOException { super . writeExternal ( out ) ; out . writeObject ( approximation ) ; }
7275	public void add ( String methodName , List < Expression > parameters ) { chain . add ( new DotExpressionItem ( methodName , parameters , _BOOL ) ) ; }
84008	public static Request request ( ) { return threadLocal . get ( ) ; }
29747	public static String createHash ( String password ) throws NoSuchAlgorithmException , InvalidKeySpecException { return createHash ( password . toCharArray ( ) ) ; }
55462	private void scheduleCommercial ( int length ) { Long delay = commercialDelay . getSettingValue ( ) ; if ( delay == null ) { setCommercialResult ( _STR ) ; clearCommercialButtonsSelection ( ) ; } else { scheduledCommercialTime = System . currentTimeMillis ( ) + delay * _NUM ; scheduledCommercialLength = length ; update ( ) ; } }
47812	public int hashCode ( ) { long bits = Double . doubleToLongBits ( m00 ) ; bits = bits * _NUM + Double . doubleToLongBits ( m01 ) ; bits = bits * _NUM + Double . doubleToLongBits ( m02 ) ; bits = bits * _NUM + Double . doubleToLongBits ( m10 ) ; bits = bits * _NUM + Double . doubleToLongBits ( m11 ) ; bits = bits * _NUM + Double . doubleToLongBits ( m12 ) ; return ( ( ( int ) bits ) ^ ( ( int ) ( bits > > _NUM ) ) ) ; }
68665	public void unsubscribe ( AWSIotMessage message ) throws AWSIotException { try { unsubscribeTopic ( message ) ; } catch ( AwsIotRetryableException e ) { if ( client . getMaxOfflineQueueSize ( ) > _NUM && unsubscribeQueue . size ( ) < client . getMaxOfflineQueueSize ( ) ) { unsubscribeQueue . add ( message ) ; } else { LOGGER . info ( _STR + message . getTopic ( ) ) ; throw new AWSIotException ( e ) ; } } }
9586	public static boolean isDigitalUnix ( ) { return osName . indexOf ( _STR ) > - _NUM ; }
3515	public void clientDisconnect ( ) { try { OutHttpApp responseStream = _responseStream ; if ( responseStream != null ) { responseStream . close ( ) ; } } catch ( Exception e ) { log . log ( Level . FINER , e . toString ( ) , e ) ; } ConnectionTcp conn = connTcp ( ) ; if ( conn != null ) { conn . clientDisconnect ( ) ; } killKeepalive ( _STR ) ; }
46774	public boolean endsWith ( Name n ) { if ( n instanceof CompoundName ) { return ( impl . endsWith ( n . size ( ) , n . getAll ( ) ) ) ; } else { return _BOOL ; } }
13651	private int calculateTotalHeight ( float starSize , int numberOfStars , float starsSeparation , boolean padding ) { return Math . round ( starSize ) + ( padding ? getPaddingTop ( ) + getPaddingBottom ( ) : _NUM ) ; }
34848	@ SuppressWarnings ( _STR ) private static boolean isRegex ( String s ) { try { Pattern . compile ( s ) ; } catch ( PatternSyntaxException e ) { return _BOOL ; } return _BOOL ; }
316	private static boolean hasSpecializedHandlerIntents ( Context context , Intent intent ) { try { PackageManager pm = context . getPackageManager ( ) ; List < ResolveInfo > handlers = pm . queryIntentActivities ( intent , PackageManager . GET_RESOLVED_FILTER ) ; if ( handlers == null || handlers . size ( ) == _NUM ) { return _BOOL ; } for ( ResolveInfo resolveInfo : handlers ) { IntentFilter filter = resolveInfo . filter ; if ( filter == null ) continue ; if ( filter . countDataAuthorities ( ) == _NUM || filter . countDataPaths ( ) == _NUM ) continue ; if ( resolveInfo . activityInfo == null ) continue ; return _BOOL ; } } catch ( RuntimeException e ) { Log . e ( TAG , _STR ) ; } return _BOOL ; }
32745	public static void flush ( ) { clearBuffer ( ) ; try { out . flush ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } }
44392	private String attachFooterToText ( String content ) throws MessagingException , IOException { StringBuilder builder = new StringBuilder ( content ) ; ensureTrailingCarriageReturn ( content , builder ) ; builder . append ( getFooterText ( ) ) ; return builder . toString ( ) ; }
55566	public static Sentence make ( final Connective connective , final Sentence ... children2 ) { return make ( connective , Arrays . asList ( children2 ) ) ; }
19333	public final void testIsStatePreserved1 ( ) { byte [ ] encodedKey = new byte [ ] { ( byte ) _NUM , ( byte ) _NUM , ( byte ) _NUM , ( byte ) _NUM } ; EncodedKeySpec meks = new MyEncodedKeySpec ( encodedKey ) ; encodedKey [ _NUM ] = ( byte ) _NUM ; byte [ ] ek = meks . getEncoded ( ) ; assertTrue ( ek [ _NUM ] == ( byte ) _NUM ) ; }
63248	public synchronized void init ( ) { init = _BOOL ; for ( String mapName : store . getMapNames ( ) ) { if ( mapName . startsWith ( _STR ) ) { MVMap < Object , Integer > temp = openTempMap ( mapName ) ; store . removeMap ( temp ) ; } } synchronized ( undoLog ) { if ( undoLog . size ( ) > _NUM ) { for ( Long key : undoLog . keySet ( ) ) { int transactionId = getTransactionId ( key ) ; openTransactions . set ( transactionId ) ; } } } }
83319	public static TDoubleDoubleHashMap createCumulativeHistogram ( TDoubleDoubleHashMap histogram ) { double [ ] keys = histogram . keys ( ) ; Arrays . sort ( keys ) ; double sum = _NUM ; for ( double key : keys ) { double val = histogram . get ( key ) ; sum += val ; histogram . put ( key , sum ) ; } return histogram ; }
8693	public synchronized void updateIconsForPkg ( String packageName , UserHandleCompat user ) { removeIconsForPkg ( packageName , user ) ; try { PackageInfo info = mPackageManager . getPackageInfo ( packageName , PackageManager . GET_UNINSTALLED_PACKAGES ) ; long userSerial = mUserManager . getSerialNumberForUser ( user ) ; for ( LauncherActivityInfoCompat app : mLauncherApps . getActivityList ( packageName , user ) ) { addIconToDBAndMemCache ( app , info , userSerial ) ; } } catch ( NameNotFoundException e ) { Log . d ( TAG , _STR , e ) ; return ; } }
13194	protected DateTimeData parse ( String str ) throws SchemaDateTimeException { DateTimeData date = new DateTimeData ( str , this ) ; int len = str . length ( ) ; int end = indexOf ( str , _NUM , len , _STR ) ; int dateEnd = getDate ( str , _NUM , end , date ) ; getTime ( str , end + _NUM , len , date ) ; if ( dateEnd != end ) { throw new RuntimeException ( str + _STR + _STR ) ; } validateDateTime ( date ) ; saveUnnormalized ( date ) ; if ( date . utc != _NUM && date . utc != _STR ) { normalize ( date ) ; } return date ; }
14797	void addAttributeValues ( String attrName , Set values ) throws SMSException { if ( attrName != null && values != null && ! values . isEmpty ( ) ) { Map attrs = getAttributes ( ) ; Set origValues = ( Set ) attrs . get ( attrName ) ; Set newValues = new HashSet ( values ) ; if ( origValues != null && ! origValues . isEmpty ( ) ) { newValues . addAll ( origValues ) ; } Map newAttrs = new HashMap ( ) ; newAttrs . put ( attrName , newValues ) ; setAttributes ( newAttrs ) ; } }
59129	public void test_parkUntil_3 ( ) throws Exception { CyclicBarrier barrier = new CyclicBarrier ( _NUM ) ; Parker parker = new Parker ( barrier , _BOOL , _NUM ) ; Thread parkerThread = new Thread ( parker ) ; UNSAFE . unpark ( parkerThread ) ; parkerThread . start ( ) ; parker . assertDurationIsInRange ( _NUM ) ; parkerThread . join ( ) ; }
65315	SegmentManager commitIndex ( long commitIndex ) { this . commitIndex = Math . max ( this . commitIndex , commitIndex ) ; return this ; }
22689	public void finishFragments ( ) { for ( Fragment comment : closingFragments ) { finishFragment ( comment ) ; } closingFragments . clear ( ) ; }
10541	private final void _writeUTF8Segments ( byte [ ] utf8 , int offset , int totalLen ) throws IOException , JsonGenerationException { do { int len = Math . min ( _outputMaxContiguous , totalLen ) ; _writeUTF8Segment ( utf8 , offset , len ) ; offset += len ; totalLen -= len ; } while ( totalLen > _NUM ) ; }
41212	public static String hexToStringNoException ( final String data ) { try { return ConversionUtils . arrayToString ( Hex . decodeHex ( data . toCharArray ( ) ) ) ; } catch ( DecoderException e ) { return _STR ; } }
11874	public Collection < Node > matchingScenariosAndExamples ( final Feature feature ) { final List < ScenarioDefinition > allScenarios = feature . getScenarioDefinitions ( ) ; final List < Node > matchingScenariosAndExamples = new LinkedList < Node > ( ) ; for ( final ScenarioDefinition scenario : allScenarios ) { final Set < Tag > allTagsForScenario = new HashSet < Tag > ( scenario . getTags ( ) ) ; allTagsForScenario . addAll ( feature . getTags ( ) ) ; if ( scenario instanceof ScenarioOutline ) { matchingScenariosAndExamples . addAll ( matchingExamples ( ( ScenarioOutline ) scenario , allTagsForScenario ) ) ; } else { if ( matches ( allTagsForScenario ) ) { matchingScenariosAndExamples . add ( scenario ) ; } } } return matchingScenariosAndExamples ; }
84761	private boolean traverse ( Tree tree , NodeRef node , int [ ] operatorNumber , boolean flip ) { boolean update = _BOOL ; int nodeNum = node . getNumber ( ) ; NodeRef parent = tree . getParent ( node ) ; if ( operatorNumber != null ) { operatorNumber [ _NUM ] = - _NUM ; } if ( parent != null && updateNode [ nodeNum ] ) { final double branchRate = branchRateModel . getBranchRate ( tree , node ) ; final double branchTime = branchRate * ( tree . getNodeHeight ( parent ) - tree . getNodeHeight ( node ) ) ; if ( branchTime < _NUM ) { throw new RuntimeException ( _STR + branchTime ) ; } if ( flip ) { matrixBufferHelper . flipOffset ( nodeNum ) ; } final int eigenIndex = _NUM ; final int updateCount = branchUpdateCount [ eigenIndex ] ; matrixUpdateIndices [ eigenIndex ] [ updateCount ] = matrixBufferHelper . getOffsetIndex ( nodeNum ) ; branchLengths [ eigenIndex ] [ updateCount ] = branchTime ; branchUpdateCount [ eigenIndex ] ++ ; update = _BOOL ; } if ( ! tree . isExternal ( node ) ) { NodeRef child1 = tree . getChild ( node , _NUM ) ; final int [ ] op1 = { - _NUM } ; final boolean update1 = traverse ( tree , child1 , op1 , flip ) ; NodeRef child2 = tree . getChild ( node , _NUM ) ; final int [ ] op2 = { - _NUM } ; final boolean update2 = traverse ( tree , child2 , op2 , flip ) ; if ( update1 || update2 ) { int x = operationCount [ operationListCount ] * Beagle . OPERATION_TUPLE_SIZE ; if ( flip ) { partialBufferHelper . flipOffset ( nodeNum ) ; } final int [ ] operations = this . operations [ operationListCount ] ; operations [ x ] = partialBufferHelper . getOffsetIndex ( nodeNum ) ; if ( useScaleFactors ) { int n = nodeNum - tipCount ; if ( recomputeScaleFactors ) { scaleBufferHelper . flipOffset ( n ) ; scaleBufferIndices [ n ] = scaleBufferHelper . getOffsetIndex ( n ) ; operations [ x + _NUM ] = scaleBufferIndices [ n ] ; operations [ x + _NUM ] = Beagle . NONE ; } else { operations [ x + _NUM ] = Beagle . NONE ; operations [ x + _NUM ] = scaleBufferIndices [ n ] ; } } else { if ( useAutoScaling ) { scaleBufferIndices [ nodeNum - tipCount ] = partialBufferHelper . getOffsetIndex ( nodeNum ) ; } operations [ x + _NUM ] = Beagle . NONE ; operations [ x + _NUM ] = Beagle . NONE ; } operations [ x + _NUM ] = partialBufferHelper . getOffsetIndex ( child1 . getNumber ( ) ) ; operations [ x + _NUM ] = matrixBufferHelper . getOffsetIndex ( child1 . getNumber ( ) ) ; operations [ x + _NUM ] = partialBufferHelper . getOffsetIndex ( child2 . getNumber ( ) ) ; operations [ x + _NUM ] = matrixBufferHelper . getOffsetIndex ( child2 . getNumber ( ) ) ; operationCount [ operationListCount ] ++ ; update = _BOOL ; } } return update ; }
6682	public static String rate2speed ( double rate ) { return NUMBER_FORMAT0 . format ( rate ) + _STR + GENERAL_UNIT_KBPSEC ; }
80933	public long next ( ) { long result = - _NUM ; if ( cache < _NUM && bufferElements > _NUM ) { result = getNextFromBuffer ( ) ; bufferElements -- ; } else { result = cache ; cache = - _NUM ; } if ( ! cs . isEmpty ( ) ) { long first = cs . first ( ) ; if ( result > first || result == - _NUM ) { cs . remove ( first ) ; cache = result ; result = first ; } } if ( result == - _NUM ) { throw new NoSuchElementException ( ) ; } Assert . check ( previous < result , EC . GENERAL ) ; previous = result ; readElements ++ ; return result ; }
78277	public boolean isSetQueueSize ( ) { return __isset_bit_vector . get ( __QUEUESIZE_ISSET_ID ) ; }
23049	public void requestContactCapabilities ( Set < ContactId > contacts ) throws RcsServiceNotRegisteredException , RcsServiceNotAvailableException , RcsGenericException { if ( mApi == null ) { throw new RcsServiceNotAvailableException ( ) ; } if ( contacts == null || contacts . isEmpty ( ) ) { throw new RcsIllegalArgumentException ( _STR ) ; } try { mApi . requestContactCapabilities2 ( new ArrayList < > ( contacts ) ) ; } catch ( Exception e ) { RcsIllegalArgumentException . assertException ( e ) ; RcsServiceNotRegisteredException . assertException ( e ) ; throw new RcsGenericException ( e ) ; } }
72427	private static String toString ( double coeff ) { final String c = Double . toString ( coeff ) ; if ( c . endsWith ( _STR ) ) { return c . substring ( _NUM , c . length ( ) - _NUM ) ; } else { return c ; } }
64671	public static final IndexCreatedEvent createTestIndexCreationStatusWithBulkDataHit ( ) { IndexCreatedEvent toReturn = new IndexCreatedEvent ( UUID . randomUUID ( ) , new Date ( ) , new Date ( ) , createTestIndexWithBulkDataHit ( ) , _NUM , _NUM ) ; toReturn . calculateValues ( ) ; return toReturn ; }
14838	public boolean validate ( String value , String rule ) { return ( value . equalsIgnoreCase ( rule ) ) ; }
58055	public String findURIFromDoc ( int owner ) { int n = m_sourceTree . size ( ) ; for ( int i = _NUM ; i < n ; i ++ ) { SourceTree sTree = ( SourceTree ) m_sourceTree . elementAt ( i ) ; if ( owner == sTree . m_root ) return sTree . m_url ; } return null ; }
6972	static public final int random ( int start , int end ) { return start + random . nextInt ( end - start + _NUM ) ; }
78884	private void pop ( final String desc ) { char c = desc . charAt ( _NUM ) ; if ( c == _STR ) { pop ( ( Type . getArgumentsAndReturnSizes ( desc ) > > _NUM ) - _NUM ) ; } else if ( c == _STR || c == _STR ) { pop ( _NUM ) ; } else { pop ( _NUM ) ; } }
19730	public boolean offer ( E event , int taskId ) throws InterruptedException { assertNotDone ( ) ; if ( predicate . match ( event ) ) { this . matched [ taskId ] = _BOOL ; for ( boolean match : matched ) { if ( ! match ) return _BOOL ; } responseQueue . put ( new EventHolder ( event ) ) ; done = _BOOL ; return _BOOL ; } else return _BOOL ; }
53702	private void push ( final int type ) { if ( outputStack == null ) { outputStack = new int [ _NUM ] ; } int n = outputStack . length ; if ( outputStackTop >= n ) { int [ ] t = new int [ Math . max ( outputStackTop + _NUM , _NUM * n ) ] ; System . arraycopy ( outputStack , _NUM , t , _NUM , n ) ; outputStack = t ; } outputStack [ outputStackTop ++ ] = type ; int top = owner . inputStackTop + outputStackTop ; if ( top > owner . outputStackMax ) { owner . outputStackMax = top ; } }
44753	private static AlgorithmParameterSpec algorithmParameterSpec ( ) { final SecureRandom random = new SecureRandom ( ) ; final byte [ ] bytes = new byte [ CcAes . BLOCK ] ; random . nextBytes ( bytes ) ; return new IvParameterSpec ( bytes ) ; }
47478	static ZoneOffsetTransitionRule readExternal ( DataInput in ) throws IOException { int data = in . readInt ( ) ; Month month = Month . of ( data > > > _NUM ) ; int dom = ( ( data & ( _NUM << _NUM ) ) > > > _NUM ) - _NUM ; int dowByte = ( data & ( _NUM << _NUM ) ) > > > _NUM ; DayOfWeek dow = dowByte == _NUM ? null : DayOfWeek . of ( dowByte ) ; int timeByte = ( data & ( _NUM << _NUM ) ) > > > _NUM ; TimeDefinition defn = TimeDefinition . values ( ) [ ( data & ( _NUM << _NUM ) ) > > > _NUM ] ; int stdByte = ( data & ( _NUM << _NUM ) ) > > > _NUM ; int beforeByte = ( data & ( _NUM << _NUM ) ) > > > _NUM ; int afterByte = ( data & _NUM ) ; LocalTime time = ( timeByte == _NUM ? LocalTime . ofSecondOfDay ( in . readInt ( ) ) : LocalTime . of ( timeByte % _NUM , _NUM ) ) ; ZoneOffset std = ( stdByte == _NUM ? ZoneOffset . ofTotalSeconds ( in . readInt ( ) ) : ZoneOffset . ofTotalSeconds ( ( stdByte - _NUM ) * _NUM ) ) ; ZoneOffset before = ( beforeByte == _NUM ? ZoneOffset . ofTotalSeconds ( in . readInt ( ) ) : ZoneOffset . ofTotalSeconds ( std . getTotalSeconds ( ) + beforeByte * _NUM ) ) ; ZoneOffset after = ( afterByte == _NUM ? ZoneOffset . ofTotalSeconds ( in . readInt ( ) ) : ZoneOffset . ofTotalSeconds ( std . getTotalSeconds ( ) + afterByte * _NUM ) ) ; return ZoneOffsetTransitionRule . of ( month , dom , dow , time , timeByte == _NUM , defn , std , before , after ) ; }
61533	protected boolean isTokenChar ( char ch ) { if ( Character . isLetterOrDigit ( ch ) ) return _BOOL ; if ( Character . isISOControl ( ch ) ) return _BOOL ; if ( isHttpSeparator ( ch ) ) return _BOOL ; return _BOOL ; }
63624	public void drawLinesAndPoints ( Graphics2D g2d , ArrayList < ComparableLabel > orderedDateSet , HashMap < ComparableLabel , Integer > dataPoints , long yMaxMark ) { int sectionWidth = this . graphWidth / orderedDateSet . size ( ) ; int xOffset = sectionWidth / _NUM ; int yPrevValue ; int yCurrentValue ; float prevOffsetPerc ; float currentOffsetPerc ; g2d . setColor ( this . lineColor ) ; for ( int i = _NUM ; i < orderedDateSet . size ( ) ; i ++ ) { if ( i != _NUM ) { yPrevValue = dataPoints . get ( orderedDateSet . get ( i - _NUM ) ) ; yCurrentValue = dataPoints . get ( orderedDateSet . get ( i ) ) ; prevOffsetPerc = yPrevValue / ( float ) yMaxMark ; currentOffsetPerc = yCurrentValue / ( float ) yMaxMark ; g2d . drawLine ( this . graphLeft + ( i - _NUM ) * sectionWidth + xOffset , this . graphBottom - Math . round ( prevOffsetPerc * this . graphHeight ) , this . graphLeft + i * sectionWidth + xOffset , Math . round ( this . graphBottom - currentOffsetPerc * this . graphHeight ) ) ; } else { yCurrentValue = dataPoints . get ( orderedDateSet . get ( i ) ) ; currentOffsetPerc = yCurrentValue / ( float ) yMaxMark ; g2d . fillOval ( this . graphLeft + ( i ) * sectionWidth + xOffset - this . pointRadius , this . graphBottom - Math . round ( currentOffsetPerc * this . graphHeight ) - this . pointRadius , this . pointRadius * _NUM , this . pointRadius * _NUM ) ; } } }
49753	@ SuppressLint ( _STR ) public void elementType ( String name , int model , int memberOf , int flags ) { ElementType e = new ElementType ( name , model , memberOf , flags , this ) ; theElementTypes . put ( name . toLowerCase ( ) , e ) ; if ( memberOf == M_ROOT ) theRoot = e ; }
52436	public static String makeLogTag ( Class cls ) { return makeLogTag ( cls . getSimpleName ( ) ) ; }
3663	final public void println ( String s ) { Writer out = this . out ; if ( out == null ) return ; try { if ( s == null ) out . write ( _nullChars , _NUM , _nullChars . length ) ; else out . write ( s , _NUM , s . length ( ) ) ; out . write ( _newline , _NUM , _newline . length ) ; } catch ( IOException e ) { log . log ( Level . FINE , e . toString ( ) , e ) ; } }
27163	private static URI refragUri ( URI uri , String frag ) throws URISyntaxException { return new URI ( uri . getScheme ( ) , uri . getSchemeSpecificPart ( ) , frag ) ; }
73325	@ Override public void paint ( final PPaintContext ppc ) { final Paint paint = getPaint ( ) ; if ( paint != null ) { final Graphics2D g2 = ppc . getGraphics ( ) ; final PBounds bounds = getUnionOfChildrenBounds ( null ) ; if ( fillBackground ) { g2 . setPaint ( backgroundColor ) ; g2 . fillRect ( ( int ) bounds . getX ( ) - outlinePadding , ( int ) bounds . getY ( ) - outlinePadding , ( int ) bounds . getWidth ( ) + _NUM * outlinePadding , ( int ) bounds . getHeight ( ) + _NUM * outlinePadding ) ; } if ( drawOutline ) { g2 . setPaint ( lineColor ) ; g2 . drawRoundRect ( ( int ) bounds . getX ( ) - outlinePadding , ( int ) bounds . getY ( ) - outlinePadding , ( int ) bounds . getWidth ( ) + _NUM * outlinePadding , ( int ) bounds . getHeight ( ) + _NUM * outlinePadding , ROUNDING_WIDTH_HEIGHT , ROUNDING_WIDTH_HEIGHT ) ; } } }
55861	public final synchronized byte [ ] toByteArray ( ) { ByteArrayOutputStream baos = null ; DataOutputStream dos = null ; try { baos = new ByteArrayOutputStream ( _NUM ) ; dos = new DataOutputStream ( baos ) ; game . writeToStream ( dos ) ; dos . flush ( ) ; return baos . toByteArray ( ) ; } catch ( IOException e ) { return null ; } finally { if ( dos != null ) try { dos . close ( ) ; } catch ( IOException ex ) { } if ( baos != null ) try { baos . close ( ) ; } catch ( IOException ex ) { } } }
60153	public void addImport ( @ NotNull PsiElement importable , @ NotNull PsiFile file , @ Nullable PyImportElement importElement ) { myImports . add ( new ImportCandidateHolder ( importable , file , importElement , null ) ) ; }
22693	protected final void drawArrowHead ( Graphics2D g , int x , int y , int sgn ) { g . setStroke ( Strokes . getStroke ( StrokeType . SOLID , _NUM ) ) ; int size = diagram ( ) . arrowSize ; switch ( headType ) { case CLOSED : Polygon p = new Polygon ( new int [ ] { x , x + sgn * size , x + sgn * size , x } , new int [ ] { y , y - size , y + size , y } , _NUM ) ; g . fillPolygon ( p ) ; break ; case OPEN : g . drawLine ( x , y , x + sgn * size , y - size ) ; g . drawLine ( x , y , x + sgn * size , y + size ) ; break ; case ROUNDED : int left = sgn == - _NUM ? x - _NUM * size : x ; int top = y - size ; g . fillArc ( left , top , size * _NUM , size * _NUM , _NUM , sgn * _NUM ) ; } }
3830	public void classLoaderInit ( DynamicClassLoader loader ) { EnvLoaderListener listener = _listenerRef . get ( ) ; if ( listener != null ) listener . classLoaderInit ( loader ) ; }
49020	private Object [ ] unmarshalParametersChecked ( DeserializationChecker checker , Method method , MarshalInputStream in ) throws IOException , ClassNotFoundException { int callID = methodCallIDCount . getAndIncrement ( ) ; MyChecker myChecker = new MyChecker ( checker , method , callID ) ; in . setStreamChecker ( myChecker ) ; try { Class < ? > [ ] types = method . getParameterTypes ( ) ; Object [ ] values = new Object [ types . length ] ; for ( int i = _NUM ; i < types . length ; i ++ ) { myChecker . setIndex ( i ) ; values [ i ] = unmarshalValue ( types [ i ] , in ) ; } myChecker . end ( callID ) ; return values ; } finally { in . setStreamChecker ( null ) ; } }
24921	private void loadDataFromService ( ) { List < ExceptionSensorData > exData = null ; if ( ( null != fromDate ) && ( null != toDate ) ) { exData = dataAccessService . getUngroupedExceptionOverview ( template , limit , fromDate , toDate , resultComparator ) ; } else { exData = dataAccessService . getUngroupedExceptionOverview ( template , limit , resultComparator ) ; } exceptionSensorData . clear ( ) ; if ( null != exData ) { exceptionSensorData . addAll ( exData ) ; } }
79422	public static String createResourceName ( String resource , Locale locale , boolean removeExtension ) { String resourceName = resource ; if ( removeExtension ) { if ( resourceName . endsWith ( _STR ) ) { resourceName = resourceName . replace ( _STR , _STR ) ; } else if ( resourceName . endsWith ( _STR ) ) { resourceName = resourceName . replace ( _STR , _STR ) ; } } if ( locale != null ) { if ( UtilValidate . isNotEmpty ( locale . toString ( ) ) ) { resourceName = resourceName + _STR + locale ; } } return resourceName ; }
81469	public static String toString ( Object [ ] objects , Displayable renderer ) { if ( objects == null ) return _STR ; StringBuffer buffer = new StringBuffer ( _NUM ) ; for ( int i = _NUM ; i < objects . length ; i ++ ) { if ( i > _NUM ) buffer . append ( _STR ) ; buffer . append ( renderer . displayString ( objects [ i ] ) ) ; } return buffer . toString ( ) ; }
46523	void drawIcon ( Graphics g , int ax , int ay , int aw , int ah , float align , Component c ) { int gap = isLeftToRight ? - ( img . getIconWidth ( ) + bulletgap ) : ( aw + bulletgap ) ; int x = ax + gap ; int y = Math . max ( ay , ay + ( int ) ( align * ah ) - img . getIconHeight ( ) ) ; img . paintIcon ( c , g , x , y ) ; }
35571	public int syncQuery ( String query ) { long start = System . currentTimeMillis ( ) ; int modified = execute ( _STR , UPDATE_COUNT_RESPONSE , query ) ; log . debug ( _STR , System . currentTimeMillis ( ) - start , modified ) ; return modified ; }
76368	public static void fullReset ( ) { resetRuntime ( ) ; synchronized ( readProperties ) { readProperties . clear ( ) ; } }
73173	private BufferedImage toBufferedImage ( final Image image ) { if ( image instanceof BufferedImage ) { return ( BufferedImage ) image ; } if ( image instanceof VolatileImage ) { VolatileImage volatileImage = ( VolatileImage ) image ; return volatileImage . getSnapshot ( ) ; } GraphicsEnvironment graphicsEnvironment = GraphicsEnvironment . getLocalGraphicsEnvironment ( ) ; GraphicsDevice graphicsDevice = graphicsEnvironment . getDefaultScreenDevice ( ) ; GraphicsConfiguration graphicsConfiguration = graphicsDevice . getDefaultConfiguration ( ) ; BufferedImage bufferedImage = graphicsConfiguration . createCompatibleImage ( image . getWidth ( null ) , image . getHeight ( null ) ) ; Graphics2D g = bufferedImage . createGraphics ( ) ; g . drawImage ( image , _NUM , _NUM , null ) ; g . dispose ( ) ; return bufferedImage ; }
28475	public static void writeByteArrayToFile ( File file , byte [ ] data , boolean append ) throws IOException { OutputStream out = null ; try { out = openOutputStream ( file , append ) ; out . write ( data ) ; out . close ( ) ; } finally { IOUtils . closeQuietly ( out ) ; } }
70927	public final boolean isCancelled ( ) { if ( cancelled ) { pass ( _STR , cancelled ) ; } else { fail ( _STR ) ; } return cancelled ; }
71081	public void remove ( DirectedEdge de ) { outEdges . remove ( de ) ; }
38801	@ Override public boolean eventGeneratable ( String eventName ) { if ( m_listenee == null ) { return _BOOL ; } if ( ! eventName . equals ( _STR ) && ! eventName . equals ( _STR ) ) { return _BOOL ; } if ( m_listenee instanceof DataSource ) { if ( m_listenee instanceof EventConstraints ) { EventConstraints ec = ( EventConstraints ) m_listenee ; return ec . eventGeneratable ( eventName ) ; } } if ( m_listenee instanceof TrainingSetProducer ) { if ( m_listenee instanceof EventConstraints ) { EventConstraints ec = ( EventConstraints ) m_listenee ; if ( ! eventName . equals ( _STR ) ) { return _BOOL ; } if ( ! ec . eventGeneratable ( _STR ) ) { return _BOOL ; } } } if ( m_listenee instanceof TestSetProducer ) { if ( m_listenee instanceof EventConstraints ) { EventConstraints ec = ( EventConstraints ) m_listenee ; if ( ! eventName . equals ( _STR ) ) { return _BOOL ; } if ( ! ec . eventGeneratable ( _STR ) ) { return _BOOL ; } } } return _BOOL ; }
69262	@ Override protected void onMessageOnProducerThread ( T msg ) { _lock . lock ( ) ; try { if ( _pending . isEmpty ( ) ) { _queue . schedule ( _flushRunnable , _interval , _timeUnit ) ; } _pending . add ( msg ) ; } finally { _lock . unlock ( ) ; } }
10464	public Builder untilDate ( Date date ) { untilDate = QUERY_DATE . format ( date ) ; return this ; }
50224	private boolean isInThumbRange ( float touchX , double normalizedThumbValue ) { return Math . abs ( touchX - normalizedToScreen ( normalizedThumbValue ) ) <= mThumbHalfWidth ; }
49876	public static void cleanupAllFiles ( FileSystem fileSystem , String BaseUri ) throws IOException { try { if ( fileSystem != null ) { Path rootDir = new Path ( BaseUri ) ; FileStatus [ ] files = fileSystem . listStatus ( rootDir ) ; for ( FileStatus file : files ) { fileSystem . delete ( file . getPath ( ) , _BOOL ) ; } } } catch ( Exception e ) { LOG . error ( _STR ) ; } }
63605	@ Override public boolean canBeCollidedWith ( ) { return _BOOL ; }
7369	public void update ( long duration , TimeUnit unit ) { update ( unit . toNanos ( duration ) ) ; }
20410	public FileInputStream openRead ( ) throws FileNotFoundException { if ( mBackupName . exists ( ) ) { mBaseName . delete ( ) ; mBackupName . renameTo ( mBaseName ) ; } return new FileInputStream ( mBaseName ) ; }
67367	public void submit ( String queueName , DispatcherTask dispatcherTask ) { synchronized ( syncRoot ) { DispatcherTaskRunner currentTaskRunner = currentTasksMap . get ( queueName ) ; if ( currentTaskRunner == null ) { currentTaskRunner = new DispatcherTaskRunner ( queueName , dispatcherTask ) ; currentTasksMap . put ( queueName , currentTaskRunner ) ; executorService . execute ( currentTaskRunner ) ; } else { enqueueNextTask ( queueName , dispatcherTask ) ; } } }
52709	public static Executor createTaskDistributor ( ) { return Executors . newCachedThreadPool ( createThreadFactory ( Thread . NORM_PRIORITY , _STR ) ) ; }
12556	public void dump ( Writer writer ) { PrintWriter pw = new PrintWriter ( new BufferedWriter ( writer ) ) ; pw . println ( _STR ) ; pw . println ( _STR ) ; pw . println ( _STR + ( int ) audioFormat . getSampleRate ( ) ) ; pw . println ( _STR + samples . length / _NUM ) ; pw . println ( _STR + audioFormat . getChannels ( ) ) ; if ( samples != null ) { for ( int i = _NUM ; i < samples . length ; i += _NUM ) { pw . println ( WaveUtils . bytesToShort ( samples [ i ] , samples [ i + _NUM ] ) ) ; } } pw . flush ( ) ; }
65788	public void addFieldBuffered ( VEditor editor , GridField mField ) { wrap = mField != null ? ! mField . isSameLine ( ) : _BOOL ; if ( prevEditor != null && prevField != null ) addField ( prevEditor , prevField ) ; prevEditor = editor ; prevField = mField ; }
4900	public ExpandRoomFreespaceIncomplete add_incomplete_expansion_room ( ShapeTile p_shape , int p_layer , ShapeTile p_contained_shape ) { ExpandRoomFreespaceIncomplete new_room = new ExpandRoomFreespaceIncomplete ( p_shape , p_layer , p_contained_shape ) ; incomplete_expansion_rooms . add ( new_room ) ; return new_room ; }
76878	static double computeDesiredEllipsoidMagnitude ( final PlanetModel planetModel , final double x , final double y , final double z ) { return _NUM / Math . sqrt ( x * x * planetModel . inverseAbSquared + y * y * planetModel . inverseAbSquared + z * z * planetModel . inverseCSquared ) ; }
75340	public static String trim ( CharSequence s ) { if ( s == null ) { return null ; } Matcher m = sTrimPattern . matcher ( s ) ; return m . replaceAll ( _STR ) ; }
21970	private void validateVNXFileSMISProviderMandatoryDetails ( StorageSystemRequestParam param ) { ArgValidator . checkFieldValidIP ( param . getSmisProviderIP ( ) , _STR ) ; ArgValidator . checkFieldNotNull ( param . getSmisPortNumber ( ) , _STR ) ; ArgValidator . checkFieldRange ( param . getSmisPortNumber ( ) , _NUM , _NUM , _STR ) ; ArgValidator . checkFieldNotEmpty ( param . getSmisUserName ( ) , _STR ) ; ArgValidator . checkFieldNotEmpty ( param . getSmisPassword ( ) , _STR ) ; }
35785	private static NSObject parseObject ( Node n ) throws ParseException , IOException { String type = n . getNodeName ( ) ; if ( type . equals ( _STR ) ) { NSDictionary dict = new NSDictionary ( ) ; List < Node > children = filterElementNodes ( n . getChildNodes ( ) ) ; for ( int i = _NUM ; i < children . size ( ) ; i += _NUM ) { Node key = children . get ( i ) ; Node val = children . get ( i + _NUM ) ; String keyString = getNodeTextContents ( key ) ; dict . put ( keyString , parseObject ( val ) ) ; } return dict ; } else if ( type . equals ( _STR ) ) { List < Node > children = filterElementNodes ( n . getChildNodes ( ) ) ; NSArray array = new NSArray ( children . size ( ) ) ; for ( int i = _NUM ; i < children . size ( ) ; i ++ ) { array . setValue ( i , parseObject ( children . get ( i ) ) ) ; } return array ; } else if ( type . equals ( _STR ) ) { return new NSNumber ( _BOOL ) ; } else if ( type . equals ( _STR ) ) { return new NSNumber ( _BOOL ) ; } else if ( type . equals ( _STR ) ) { return new NSNumber ( getNodeTextContents ( n ) ) ; } else if ( type . equals ( _STR ) ) { return new NSNumber ( getNodeTextContents ( n ) ) ; } else if ( type . equals ( _STR ) ) { return new NSString ( getNodeTextContents ( n ) ) ; } else if ( type . equals ( _STR ) ) { return new NSData ( getNodeTextContents ( n ) ) ; } else if ( type . equals ( _STR ) ) { return new NSDate ( getNodeTextContents ( n ) ) ; } return null ; }
35881	public void createAccrualBasedJournalEntriesAndReversalsForLoanCharges ( final Office office , final String currencyCode , final Integer accountTypeToBeDebited , final Integer accountTypeToBeCredited , final Long loanProductId , final Long loanId , final String transactionId , final Date transactionDate , final BigDecimal totalAmount , final Boolean isReversal , final List < ChargePaymentDTO > chargePaymentDTOs ) { GLAccount receivableAccount = getLinkedGLAccountForLoanCharges ( loanProductId , accountTypeToBeDebited , null ) ; final Map < GLAccount , BigDecimal > creditDetailsMap = new LinkedHashMap < > ( ) ; for ( final ChargePaymentDTO chargePaymentDTO : chargePaymentDTOs ) { final Long chargeId = chargePaymentDTO . getChargeId ( ) ; final GLAccount chargeSpecificAccount = getLinkedGLAccountForLoanCharges ( loanProductId , accountTypeToBeCredited , chargeId ) ; BigDecimal chargeSpecificAmount = chargePaymentDTO . getAmount ( ) ; if ( creditDetailsMap . containsKey ( chargeSpecificAccount ) ) { final BigDecimal existingAmount = creditDetailsMap . get ( chargeSpecificAccount ) ; chargeSpecificAmount = chargeSpecificAmount . add ( existingAmount ) ; } creditDetailsMap . put ( chargeSpecificAccount , chargeSpecificAmount ) ; } BigDecimal totalCreditedAmount = BigDecimal . ZERO ; for ( final Map . Entry < GLAccount , BigDecimal > entry : creditDetailsMap . entrySet ( ) ) { final GLAccount account = entry . getKey ( ) ; final BigDecimal amount = entry . getValue ( ) ; totalCreditedAmount = totalCreditedAmount . add ( amount ) ; if ( isReversal ) { createDebitJournalEntryForLoan ( office , currencyCode , account , loanId , transactionId , transactionDate , amount ) ; createCreditJournalEntryForLoan ( office , currencyCode , receivableAccount , loanId , transactionId , transactionDate , amount ) ; } else { createDebitJournalEntryForLoan ( office , currencyCode , receivableAccount , loanId , transactionId , transactionDate , amount ) ; createCreditJournalEntryForLoan ( office , currencyCode , account , loanId , transactionId , transactionDate , amount ) ; } } if ( totalAmount . compareTo ( totalCreditedAmount ) != _NUM ) { throw new PlatformDataIntegrityException ( _STR , _STR , totalCreditedAmount , totalAmount ) ; } }
4898	private ArtLocateResult calculate_next_trace ( boolean p_layer_changed , boolean p_at_fanout_end ) { Collection < PlaPointFloat > corner_list = new LinkedList < PlaPointFloat > ( ) ; corner_list . add ( current_from_point ) ; if ( ! p_at_fanout_end ) { PlaPointFloat adjusted_start_corner = adjust_start_corner ( ) ; if ( adjusted_start_corner != current_from_point ) { PlaPointFloat add_corner = calculate_additional_corner ( current_from_point , adjusted_start_corner , _BOOL , angle_restriction ) ; corner_list . add ( add_corner ) ; corner_list . add ( adjusted_start_corner ) ; previous_from_point = current_from_point ; current_from_point = adjusted_start_corner ; } } PlaPointFloat prev_corner = current_from_point ; for ( int c_limit = _NUM ; c_limit < _NUM ; c_limit ++ ) { Collection < PlaPointFloat > next_corners = calculate_next_trace_corners ( ) ; if ( next_corners . isEmpty ( ) ) break ; for ( PlaPointFloat curr_next_corner : next_corners ) { if ( curr_next_corner == prev_corner ) continue ; corner_list . add ( curr_next_corner ) ; previous_from_point = current_from_point ; current_from_point = curr_next_corner ; prev_corner = curr_next_corner ; } } int next_layer = current_trace_layer ; if ( p_layer_changed ) { current_from_door_index = current_target_door_index + _NUM ; ExpandRoomComplete next_room = backtrack_array [ current_from_door_index ] . next_room ; if ( next_room != null ) { next_layer = next_room . get_layer ( ) ; } } PlaPointIntAlist rounded_corner_list = new PlaPointIntAlist ( corner_list . size ( ) ) ; PlaPointInt prev_point = null ; for ( PlaPointFloat a_float : corner_list ) { PlaPointInt curr_point = a_float . round ( ) ; if ( curr_point . equals ( prev_point ) ) continue ; rounded_corner_list . add ( curr_point ) ; prev_point = curr_point ; } ArtLocateResult result = new ArtLocateResult ( rounded_corner_list , current_trace_layer ) ; current_trace_layer = next_layer ; return result ; }
33804	public static < ValueT > ByteBuffer toByteBuffer ( ValueT obj ) throws IOException { byte [ ] bytes = null ; ByteArrayOutputStream bos = null ; ObjectOutputStream oos = null ; try { bos = new ByteArrayOutputStream ( ) ; oos = new ObjectOutputStream ( bos ) ; oos . writeObject ( obj ) ; oos . flush ( ) ; bytes = bos . toByteArray ( ) ; } finally { if ( oos != null ) { oos . close ( ) ; } if ( bos != null ) { bos . close ( ) ; } } return ByteBuffer . wrap ( bytes ) ; }
2396	void writeBytes ( ChannelHandlerContext ctx , ByteBuf bytes ) ;
73914	@ Override protected Sensor createNewSensor ( String systemName , String userName ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + systemName + _STR + userName ) ; } Sensor s ; String sName = SerialAddress . normalizeSystemName ( systemName ) ; if ( sName . equals ( _STR ) ) { log . error ( _STR + systemName ) ; return null ; } s = getBySystemName ( sName ) ; if ( s != null ) { log . error ( _STR + systemName ) ; return null ; } String altName = SerialAddress . convertSystemNameToAlternate ( sName ) ; s = getBySystemName ( altName ) ; if ( s != null ) { log . error ( _STR + systemName + _STR + altName + _STR ) ; return null ; } int bit = SerialAddress . getBitFromSystemName ( sName ) ; if ( ( bit <= _NUM ) || ( bit >= SENSORSPERNODE ) ) { log . error ( _STR + Integer . toString ( bit ) + _STR + Integer . toString ( SENSORSPERNODE - _NUM ) ) ; return null ; } if ( userName == null ) { s = new SerialSensor ( sName ) ; } else { s = new SerialSensor ( sName , userName ) ; } SerialNode node = SerialAddress . getNodeFromSystemName ( sName ) ; if ( node == null ) { log . warn ( _STR + sName + _STR ) ; return s ; } node . registerSensor ( s , bit ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + s . getSystemName ( ) + _STR + node ) ; } return s ; }
52911	private double [ ] max ( double [ ] distances1 , double [ ] distances2 ) { if ( distances1 . length != distances2 . length ) { throw new RuntimeException ( _STR ) ; } double [ ] result = new double [ distances1 . length ] ; for ( int i = _NUM ; i < distances1 . length ; i ++ ) { result [ i ] = Math . max ( distances1 [ i ] , distances2 [ i ] ) ; } return result ; }
5003	public void fill_shape ( PlaPointFloat [ ] p_points , Graphics p_g , Color p_color , double p_translucency_factor ) { if ( p_color == null ) return ; Graphics2D g2 = ( Graphics2D ) p_g ; Polygon draw_polygon = new Polygon ( ) ; for ( int index = _NUM ; index < p_points . length ; index ++ ) { Point2D curr_corner = coordinate_transform . board_to_screen ( p_points [ index ] ) ; draw_polygon . addPoint ( ( int ) Math . round ( curr_corner . getX ( ) ) , ( int ) Math . round ( curr_corner . getY ( ) ) ) ; } g2 . setColor ( p_color ) ; set_translucency ( g2 , p_translucency_factor ) ; g2 . setRenderingHint ( RenderingHints . KEY_ANTIALIASING , RenderingHints . VALUE_ANTIALIAS_ON ) ; g2 . fill ( draw_polygon ) ; }
72262	public void writeExif ( InputStream jpegStream , OutputStream exifOutStream ) throws IOException { if ( jpegStream == null || exifOutStream == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = getExifWriterStream ( exifOutStream ) ; doExifStreamIO ( jpegStream , s ) ; s . flush ( ) ; }
31495	private static void decodeBase256Segment ( BitSource bits , StringBuilder result , Collection < byte [ ] > byteSegments ) throws FormatException { int codewordPosition = _NUM + bits . getByteOffset ( ) ; int d1 = unrandomize255State ( bits . readBits ( _NUM ) , codewordPosition ++ ) ; int count ; if ( d1 == _NUM ) { count = bits . available ( ) / _NUM ; } else if ( d1 < _NUM ) { count = d1 ; } else { count = _NUM * ( d1 - _NUM ) + unrandomize255State ( bits . readBits ( _NUM ) , codewordPosition ++ ) ; } if ( count < _NUM ) { throw FormatException . getFormatInstance ( ) ; } byte [ ] bytes = new byte [ count ] ; for ( int i = _NUM ; i < count ; i ++ ) { if ( bits . available ( ) < _NUM ) { throw FormatException . getFormatInstance ( ) ; } bytes [ i ] = ( byte ) unrandomize255State ( bits . readBits ( _NUM ) , codewordPosition ++ ) ; } byteSegments . add ( bytes ) ; try { result . append ( new String ( bytes , _STR ) ) ; } catch ( UnsupportedEncodingException uee ) { throw new IllegalStateException ( _STR + uee ) ; } }
458	public void goToCurrentDay ( ) { int monthDifference = FlexibleCalendarHelper . getMonthDifference ( displayYear , displayMonth ) ; Calendar cal = Calendar . getInstance ( ) ; selectedDateItem . setDay ( cal . get ( Calendar . DAY_OF_MONTH ) ) ; selectedDateItem . setMonth ( cal . get ( Calendar . MONTH ) ) ; selectedDateItem . setYear ( cal . get ( Calendar . YEAR ) ) ; if ( disableAutoDateSelection ) { this . userSelectedItem = selectedDateItem . clone ( ) ; } if ( monthDifference != _NUM ) { resetAdapters = _BOOL ; if ( monthDifference < _NUM ) { monthInfPagerAdapter . setFakeCount ( lastPosition ) ; monthInfPagerAdapter . notifyDataSetChanged ( ) ; } shouldOverrideComputedDate = _BOOL ; moveToPosition ( monthDifference ) ; } else { FlexibleCalendarGridAdapter currentlyVisibleAdapter = monthViewPagerAdapter . getMonthAdapterAtPosition ( lastPosition % MonthViewPagerAdapter . VIEWS_IN_PAGER ) ; currentlyVisibleAdapter . notifyDataSetChanged ( ) ; } }
57167	public static byte [ ] toIPv4AddressBytes ( int ipAddress ) { return new byte [ ] { ( byte ) ( ipAddress > > > _NUM ) , ( byte ) ( ipAddress > > > _NUM ) , ( byte ) ( ipAddress > > > _NUM ) , ( byte ) ipAddress } ; }
60231	public boolean isValidTemplate ( ) { return isValidTemplate ( template ) ; }
23693	public Object take ( ) throws InterruptedException , ForceReattemptException { throw new UnsupportedOperationException ( ) ; }
52051	@ SuppressWarnings ( { _STR } ) public static double normalCdf ( double y ) { double f , h ; int j ; double dcphi , x , z , f1 , f2 , f3 , f4 , f5 ; x = y ; if ( Math . abs ( x ) > _NUM ) { dcphi = _NUM ; } else { j = ( int ) Math . floor ( Math . abs ( x ) * _NUM + _NUM ) ; z = j * _NUM ; h = Math . abs ( x ) - z ; f = r [ j ] ; f1 = f * z - _NUM ; f2 = f + z * f1 ; f3 = f1 * _NUM + z * f2 ; f4 = f2 * _NUM + z * f3 ; f5 = f3 * _NUM + z * f4 ; dcphi = f + h * ( f1 * _NUM + h * ( f2 * _NUM + h * ( f3 * _NUM + h * ( f4 * _NUM + h * f5 ) ) ) ) / _NUM ; dcphi = dcphi * _NUM * Math . exp ( x * - _NUM * x ) ; } if ( x < _NUM ) { return dcphi ; } else { return ( _NUM - dcphi ) ; } }
3469	private void destroy ( ) { if ( log . isLoggable ( Level . FINEST ) ) { log . finest ( this + _STR ) ; } try { _socket . forceShutdown ( ) ; } catch ( Throwable e ) { } try { closeConnection ( ) ; } catch ( Throwable e ) { log . log ( Level . FINER , e . toString ( ) , e ) ; } _port . removeConnection ( this ) ; }
81819	int atom ( ) throws RESyntaxException { int ret = node ( RE . OP_ATOM , _NUM ) ; int lenAtom = _NUM ; atomLoop : while ( idx < len ) { if ( ( idx + _NUM ) < len ) { char c = pattern . charAt ( idx + _NUM ) ; if ( pattern . charAt ( idx ) == _STR ) { int idxEscape = idx ; escape ( ) ; if ( idx < len ) { c = pattern . charAt ( idx ) ; } idx = idxEscape ; } switch ( c ) { case _STR : case _STR : case _STR : case _STR : if ( lenAtom != _NUM ) { break atomLoop ; } } } switch ( pattern . charAt ( idx ) ) { case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : case _STR : break atomLoop ; case _STR : case _STR : case _STR : case _STR : if ( lenAtom == _NUM ) { syntaxError ( _STR ) ; } break atomLoop ; case _STR : { int idxBeforeEscape = idx ; int c = escape ( ) ; if ( ( c & ESC_MASK ) == ESC_MASK ) { idx = idxBeforeEscape ; break atomLoop ; } emit ( ( char ) c ) ; lenAtom ++ ; } break ; default : emit ( pattern . charAt ( idx ++ ) ) ; lenAtom ++ ; break ; } } if ( lenAtom == _NUM ) { internalError ( ) ; } instruction [ ret + RE . offsetOpdata ] = ( char ) lenAtom ; return ret ; }
7662	@ Override public void drawItem ( Graphics2D g2 , CategoryItemRendererState state , Rectangle2D dataArea , CategoryPlot plot , CategoryAxis domainAxis , ValueAxis rangeAxis , CategoryDataset dataset , int row , int column , int pass ) { int visibleRow = state . getVisibleSeriesIndex ( row ) ; if ( visibleRow < _NUM ) { return ; } Number dataValue = dataset . getValue ( row , column ) ; if ( dataValue == null ) { return ; } double value = dataValue . doubleValue ( ) ; PlotOrientation orientation = plot . getOrientation ( ) ; double barW0 = calculateBarW0 ( plot , orientation , dataArea , domainAxis , state , visibleRow , column ) ; RectangleEdge edge = plot . getRangeAxisEdge ( ) ; double barL = rangeAxis . valueToJava2D ( value , dataArea , edge ) ; Line2D line ; double x , y ; if ( orientation . isHorizontal ( ) ) { x = barL ; y = barW0 + state . getBarWidth ( ) / _NUM ; line = new Line2D . Double ( barL , barW0 , barL , barW0 + state . getBarWidth ( ) ) ; } else { x = barW0 + state . getBarWidth ( ) / _NUM ; y = barL ; line = new Line2D . Double ( barW0 , barL , barW0 + state . getBarWidth ( ) , barL ) ; } if ( state . getElementHinting ( ) ) { beginElementGroup ( g2 , dataset . getRowKey ( row ) , dataset . getColumnKey ( column ) ) ; } Stroke itemStroke = getItemStroke ( row , column ) ; Paint itemPaint = getItemPaint ( row , column ) ; g2 . setStroke ( itemStroke ) ; g2 . setPaint ( itemPaint ) ; g2 . draw ( line ) ; if ( state . getElementHinting ( ) ) { endElementGroup ( g2 ) ; } CategoryItemLabelGenerator generator = getItemLabelGenerator ( row , column ) ; if ( generator != null && isItemLabelVisible ( row , column ) ) { drawItemLabel ( g2 , orientation , dataset , row , column , x , y , ( value < _NUM ) ) ; } int datasetIndex = plot . indexOf ( dataset ) ; updateCrosshairValues ( state . getCrosshairState ( ) , dataset . getRowKey ( row ) , dataset . getColumnKey ( column ) , value , datasetIndex , barW0 , barL , orientation ) ; EntityCollection entities = state . getEntityCollection ( ) ; if ( entities != null ) { addItemEntity ( entities , dataset , row , column , line . getBounds ( ) ) ; } }
61863	public static < T > UnaryOperator < List < T > > from ( Collection < String > commandLineUdids , Function < T , ICloud . MBSBackup > mbsBackup , Function < ICloud . MBSBackup , String > formatter , Printer out , InputStream in ) { return commandLineUdids . isEmpty ( ) ? new User ( mbsBackup , out , in , formatter ) : new Udid ( mbsBackup , out , in , new ArrayList < > ( commandLineUdids ) ) ; }
70569	public boolean isNetworkConnected ( ) { ConnectivityManager connectivityManager = ( ConnectivityManager ) getSystemService ( CONNECTIVITY_SERVICE ) ; NetworkInfo networkInfo = connectivityManager . getActiveNetworkInfo ( ) ; return networkInfo != null && networkInfo . isConnectedOrConnecting ( ) ; }
56039	@ Override public void onTabClosing ( long time , int id ) { reset ( ) ; forceAnimationToFinish ( ) ; TabModel model = mTabModelSelector . getModelForTabId ( id ) ; if ( model != null ) { mClosedTab = createLayoutTab ( id , model . isIncognito ( ) , NO_CLOSE_BUTTON , NO_TITLE ) ; mClosedTab . setBorderAlpha ( _NUM ) ; mLayoutTabs = new LayoutTab [ ] { mClosedTab } ; updateCacheVisibleIds ( new LinkedList < Integer > ( Arrays . asList ( id ) ) ) ; } else { mLayoutTabs = null ; mClosedTab = null ; } super . onTabClosing ( time , id ) ; }
13735	public void put ( String name , String supported , String authScheme , String level , boolean isDefault ) { SAMLv2AuthContext c = new SAMLv2AuthContext ( ) ; c . name = name ; c . supported = supported ; if ( authScheme . length ( ) != _NUM && authScheme != null ) { int index = authScheme . lastIndexOf ( _STR ) ; c . value = authScheme . substring ( index + _NUM ) ; c . key = authScheme . substring ( _NUM , index ) ; } else { c . value = _STR ; c . key = _STR ; } c . level = level ; c . isDefault = isDefault ; collections . put ( name , c ) ; }
64276	public final void close ( LsServerPacket closePacket , boolean forced ) { synchronized ( guard ) { if ( isWriteDisabled ( ) ) { return ; } log . debug ( _STR + closePacket + _STR ) ; pendingClose = _BOOL ; isForcedClosing = forced ; sendMsgQueue . clear ( ) ; sendMsgQueue . addLast ( closePacket ) ; enableWriteInterest ( ) ; } }
71190	private void replaceCollapsedEdges ( ) { List newEdges = new ArrayList ( ) ; for ( Iterator it = edgeList . iterator ( ) ; it . hasNext ( ) ; ) { Edge e = ( Edge ) it . next ( ) ; if ( e . isCollapsed ( ) ) { it . remove ( ) ; newEdges . add ( e . getCollapsedEdge ( ) ) ; } } edgeList . addAll ( newEdges ) ; }
40405	private int readAnnotationValue ( int v , final char [ ] buf , final String name , final AnnotationVisitor av ) { int i ; if ( av == null ) { switch ( b [ v ] & _NUM ) { case _STR : return v + _NUM ; case _STR : return readAnnotationValues ( v + _NUM , buf , _BOOL , null ) ; case _STR : return readAnnotationValues ( v + _NUM , buf , _BOOL , null ) ; default : return v + _NUM ; } } switch ( b [ v ++ ] & _NUM ) { case _STR : case _STR : case _STR : case _STR : av . visit ( name , readConst ( readUnsignedShort ( v ) , buf ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , readInt ( items [ readUnsignedShort ( v ) ] ) == _NUM ? Boolean . FALSE : Boolean . TRUE ) ; v += _NUM ; break ; case _STR : av . visit ( name , ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , readUTF8 ( v , buf ) ) ; v += _NUM ; break ; case _STR : av . visitEnum ( name , readUTF8 ( v , buf ) , readUTF8 ( v + _NUM , buf ) ) ; v += _NUM ; break ; case _STR : av . visit ( name , Type . getType ( readUTF8 ( v , buf ) ) ) ; v += _NUM ; break ; case _STR : v = readAnnotationValues ( v + _NUM , buf , _BOOL , av . visitAnnotation ( name , readUTF8 ( v , buf ) ) ) ; break ; case _STR : int size = readUnsignedShort ( v ) ; v += _NUM ; if ( size == _NUM ) { return readAnnotationValues ( v - _NUM , buf , _BOOL , av . visitArray ( name ) ) ; } switch ( this . b [ v ++ ] & _NUM ) { case _STR : byte [ ] bv = new byte [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { bv [ i ] = ( byte ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , bv ) ; -- v ; break ; case _STR : boolean [ ] zv = new boolean [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { zv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) != _NUM ; v += _NUM ; } av . visit ( name , zv ) ; -- v ; break ; case _STR : short [ ] sv = new short [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { sv [ i ] = ( short ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , sv ) ; -- v ; break ; case _STR : char [ ] cv = new char [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { cv [ i ] = ( char ) readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , cv ) ; -- v ; break ; case _STR : int [ ] iv = new int [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { iv [ i ] = readInt ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , iv ) ; -- v ; break ; case _STR : long [ ] lv = new long [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { lv [ i ] = readLong ( items [ readUnsignedShort ( v ) ] ) ; v += _NUM ; } av . visit ( name , lv ) ; -- v ; break ; case _STR : float [ ] fv = new float [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { fv [ i ] = Float . intBitsToFloat ( readInt ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; } av . visit ( name , fv ) ; -- v ; break ; case _STR : double [ ] dv = new double [ size ] ; for ( i = _NUM ; i < size ; i ++ ) { dv [ i ] = Double . longBitsToDouble ( readLong ( items [ readUnsignedShort ( v ) ] ) ) ; v += _NUM ; } av . visit ( name , dv ) ; -- v ; break ; default : v = readAnnotationValues ( v - _NUM , buf , _BOOL , av . visitArray ( name ) ) ; } } return v ; }
71768	public void timingEvent ( float fraction ) { current . x = ( int ) ( start . x + ( end . x - start . x ) * fraction ) ; current . y = ( int ) ( start . y + ( end . y - start . y ) * fraction ) ; track . setCarPosition ( current ) ; }
82716	public SeaGlassTitlePane ( JRootPane rootPane , SeaGlassRootPaneUI ui ) { this . rootPane = rootPane ; this . rootPaneUI = ui ; rootParent = ( RootPaneContainer ) rootPane . getParent ( ) ; installTitlePane ( ) ; }
32910	public String toString ( ) { StringBuilder s = new StringBuilder ( ) ; for ( Item item : this ) s . append ( item + _STR ) ; return s . toString ( ) ; }
51546	public void writeLong ( long value ) throws IOException { checkWritePrimitiveTypes ( ) ; primitiveTypes . writeLong ( value ) ; }
30512	static public URL findContainerXML ( String _containerName ) { URL _containerNameURL = null ; String _containerNameFilePath = Constants . Container . CONTAINER_CONFIG_DIRECTORY + _STR + _containerName + _STR ; _containerNameURL = getResourceURL ( _containerNameFilePath ) ; if ( _containerNameURL != null ) { if ( _logger . isLoggable ( Level . INFO ) ) { _logger . info ( _STR + _containerNameURL + _STR ) ; } } return _containerNameURL ; }
85424	public static List < String > expandWildcards ( Iterable < File > dirs , List < String > names , Backend forBackend ) { List < String > result = new ArrayList < String > ( names . size ( ) ) ; for ( String name : names ) { expandWildcard ( result , dirs , name , forBackend ) ; } return result ; }
67371	public static Charset forName ( String charsetName ) { return forName ( charsetName , null ) ; }
35793	public NSNumber ( int i ) { doubleValue = longValue = i ; type = INTEGER ; }
16207	public static void dump ( String message , StackTraceElement [ ] stackTrace ) { dump ( message , Arrays . asList ( stackTrace ) ) ; }
79513	public void execQuery ( String sql , ExecQueryCallbackFunctionIF aListener ) throws GenericEntityException { if ( _connection == null ) { getConnection ( ) ; } try { if ( Debug . verboseOn ( ) ) Debug . logVerbose ( _STR + sql , module ) ; executeQuery ( sql ) ; boolean keepGoing = _BOOL ; while ( keepGoing && _rs . next ( ) ) { keepGoing = aListener . processNextRow ( _rs ) ; } if ( _manualTX ) { _connection . commit ( ) ; } } catch ( SQLException sqle ) { Debug . logWarning ( _STR + sql + _STR , module ) ; Debug . logWarning ( sqle . getMessage ( ) , module ) ; throw new GenericEntityException ( _STR + _sql , sqle ) ; } finally { close ( ) ; } }
85574	private Name cacheName ( String sig ) { StringBuilder buf = new StringBuilder ( ) ; if ( sig . startsWith ( _STR ) ) { buf = buf . append ( _STR ) ; while ( sig . startsWith ( _STR ) ) { buf = buf . append ( target . syntheticNameChar ( ) ) ; sig = sig . substring ( _NUM ) ; } if ( sig . startsWith ( _STR ) ) { sig = sig . substring ( _NUM , sig . length ( ) - _NUM ) ; } } else { buf = buf . append ( _STR + target . syntheticNameChar ( ) ) ; } buf = buf . append ( sig . replace ( _STR , target . syntheticNameChar ( ) ) ) ; return names . fromString ( buf . toString ( ) ) ; }
68657	@ Override public boolean eIsSet ( int featureID ) { switch ( featureID ) { case EipPackage . CONDITIONAL_ROUTE__CONDITION : return CONDITION_EDEFAULT == null ? condition != null : ! CONDITION_EDEFAULT . equals ( condition ) ; case EipPackage . CONDITIONAL_ROUTE__CHANNEL : return channel != null ; } return super . eIsSet ( featureID ) ; }
47938	public static native String mapLibraryName ( String libname ) ;
44706	public Matcher next ( ) throws IOException { readahead ( ) ; if ( matches == null ) { throw new NoSuchElementException ( ) ; } Matcher matcher = matches . next ( ) ; if ( discard ) { Pattern pattern = matcher . pattern ( ) ; for ( int n = _NUM ; n < patterns . length ; n ++ ) { if ( patterns [ n ] == pattern ) { patterns [ n ] = null ; break ; } } } return matcher ; }
76491	@ CalledOnlyBy ( AmidstThread . FRAGMENT_LOADER ) public void processQueues ( ) { Dimension dimension = dimensionSetting . get ( ) ; updateLayerManager ( dimension ) ; processRecycleQueue ( ) ; Fragment fragment ; while ( ( fragment = loadingQueue . poll ( ) ) != null ) { loadFragment ( dimension , fragment ) ; dimension = dimensionSetting . get ( ) ; updateLayerManager ( dimension ) ; processRecycleQueue ( ) ; } layerManager . clearInvalidatedLayers ( ) ; }
50326	default FieldDeclaration addPrivateField ( Class < ? > typeClass , String name ) { return addField ( typeClass , name , Modifier . PRIVATE ) ; }
85272	void ReconstructPrivateSubrs ( int Font , IndexBaseItem [ ] fdPrivateBase , OffsetItem [ ] fdSubrs ) { for ( int i = _NUM ; i < fonts [ Font ] . fdprivateLengths . length ; i ++ ) { if ( fdSubrs [ i ] != null && fonts [ Font ] . PrivateSubrsOffset [ i ] >= _NUM ) { OutputList . addLast ( new SubrMarkerItem ( fdSubrs [ i ] , fdPrivateBase [ i ] ) ) ; if ( NewLSubrsIndex [ i ] != null ) OutputList . addLast ( new RangeItem ( new RandomAccessFileOrArray ( rasFactory . createSource ( NewLSubrsIndex [ i ] ) ) , _NUM , NewLSubrsIndex [ i ] . length ) ) ; } } }
24622	public boolean matchChomp ( String seq ) { if ( matches ( seq ) ) { pos += seq . length ( ) ; return _BOOL ; } else { return _BOOL ; } }
68736	public void initGL ( ) { mEglCore = new EglCore ( null , EglCore . FLAG_RECORDABLE | EglCore . FLAG_TRY_GLES3 ) ; mWindowSurface = new WindowSurface ( mEglCore , mSurfaceTexture ) ; mWindowSurface . makeCurrent ( ) ; mRecordSurface = new WindowSurface ( mEglCore , mMediaRecorder . getSurface ( ) , _BOOL ) ; initGLComponents ( ) ; }
64014	void clear ( ) { if ( mViewTypeCount == _NUM ) { final ArrayList < View > scrap = mCurrentScrap ; final int scrapCount = scrap . size ( ) ; for ( int i = _NUM ; i < scrapCount ; i ++ ) { removeDetachedView ( scrap . remove ( scrapCount - _NUM - i ) , _BOOL ) ; } } else { final int typeCount = mViewTypeCount ; for ( int i = _NUM ; i < typeCount ; i ++ ) { final ArrayList < View > scrap = mScrapViews [ i ] ; final int scrapCount = scrap . size ( ) ; for ( int j = _NUM ; j < scrapCount ; j ++ ) { removeDetachedView ( scrap . remove ( scrapCount - _NUM - j ) , _BOOL ) ; } } } if ( mTransientStateViews != null ) { mTransientStateViews . clear ( ) ; } }
75158	protected void contributeTokenRequestParameters ( final QueryString bodyParameters ) { }
45091	public int read ( char cbuf [ ] , int off , int len ) { int k ; if ( position >= document . getLength ( ) ) { return - _NUM ; } k = len ; if ( ( position + k ) >= document . getLength ( ) ) k = document . getLength ( ) - ( int ) position ; if ( off + k >= cbuf . length ) k = cbuf . length - off ; try { document . getText ( ( int ) position , k , segment ) ; position += k ; System . arraycopy ( segment . array , segment . offset , cbuf , off , k ) ; return k ; } catch ( BadLocationException ble ) { return - _NUM ; } }
45597	Builder addLenient ( String line ) { int index = line . indexOf ( _STR , _NUM ) ; if ( index != - _NUM ) { return addLenient ( line . substring ( _NUM , index ) , line . substring ( index + _NUM ) ) ; } else if ( line . startsWith ( _STR ) ) { return addLenient ( _STR , line . substring ( _NUM ) ) ; } else { return addLenient ( _STR , line ) ; } }
79737	public static void mergeNodeChildren ( TreeNode node ) { DefaultMutableTreeNode masterNode = ( DefaultMutableTreeNode ) node ; for ( int i = _NUM ; i < masterNode . getChildCount ( ) ; i ++ ) { DefaultMutableTreeNode child = ( DefaultMutableTreeNode ) masterNode . getChildAt ( i ) ; if ( ! child . isLeaf ( ) ) { MergeHelpUtilities . mergeNodeChildren ( DEFAULT_MERGE_TYPE , child ) ; } } }
58729	public void testNegateNegative ( ) { String a = _STR ; int aScale = _NUM ; String c = _STR ; int cScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal cNumber = new BigDecimal ( new BigInteger ( c ) , cScale ) ; assertEquals ( _STR , cNumber , aNumber . negate ( ) ) ; }
21240	private static Object createAndBindItem ( ParameterAccess parameters , Class < ? > itemType ) { try { Object value = itemType . newInstance ( ) ; bind ( value , parameters ) ; return value ; } catch ( InstantiationException | IllegalAccessException e ) { throw new BindingException ( _STR + itemType , e ) ; } }
38308	public SimpleSetupPanel ( Experiment exp ) { this ( ) ; setExperiment ( exp ) ; }
51980	public static void addListener ( Listener listener ) { listeners . addLast ( listener ) ; }
49352	private static void processArgs ( String [ ] args ) { for ( int i = _NUM ; i < args . length ; i ++ ) { String arg = args [ i ] ; if ( arg . equals ( _STR ) ) { outputDir = args [ ++ i ] ; } else if ( arg . equals ( _STR ) ) { unicodeData = args [ ++ i ] ; } else if ( arg . equals ( _STR ) ) { language = args [ ++ i ] ; } else if ( arg . equals ( _STR ) ) { country = args [ ++ i ] ; } else if ( arg . equals ( _STR ) ) { valiant = args [ ++ i ] ; } else { usage ( ) ; } } localeName = getLocaleName ( ) ; }
21414	public static boolean isZoningRequired ( DbClient dbClient , VirtualArray nh ) { if ( nh . getAutoSanZoning ( ) == _BOOL ) { _log . info ( _STR + nh . getLabel ( ) ) ; return _BOOL ; } return NetworkUtil . areNetworkSystemDiscovered ( dbClient ) ; }
15420	private void initXMLTree ( ) throws Exception { updateFilteredTokens ( ) ; ArrayList elements = getElements ( getFilteredTokens ( ) ) ; if ( elements . size ( ) > _NUM ) { throw new Exception ( _STR ) ; } setRootElement ( ( XMLElement ) elements . get ( _NUM ) ) ; }
23173	public boolean hasNameValue ( String name ) { return nameValueMap . containsKey ( name . toLowerCase ( ) ) ; }
49798	public boolean startsWith ( CharSeq prefix ) { return str . startsWith ( prefix . str ) ; }
38464	public boolean containsWindow ( Class < ? > windowClass ) { return ( getWindow ( windowClass ) != null ) ; }
16529	protected final void firePropertyChange ( String propertyName , long oldValue , long newValue ) { firePropertyChange ( propertyName , Long . valueOf ( oldValue ) , Long . valueOf ( newValue ) ) ; }
79852	public void fadeToLayer ( int index ) { mTransitionState = TRANSITION_STARTING ; Arrays . fill ( mIsLayerOn , _BOOL ) ; mIsLayerOn [ index ] = _BOOL ; invalidateSelf ( ) ; }
49457	private void fitImageToView ( ) { Drawable drawable = getDrawable ( ) ; if ( drawable == null || drawable . getIntrinsicWidth ( ) == _NUM || drawable . getIntrinsicHeight ( ) == _NUM ) { return ; } if ( matrix == null || prevMatrix == null ) { return ; } int drawableWidth = drawable . getIntrinsicWidth ( ) ; int drawableHeight = drawable . getIntrinsicHeight ( ) ; float scaleX = ( float ) viewWidth / drawableWidth ; float scaleY = ( float ) viewHeight / drawableHeight ; switch ( mScaleType ) { case CENTER : scaleX = scaleY = _NUM ; break ; case CENTER_CROP : scaleX = scaleY = Math . max ( scaleX , scaleY ) ; break ; case CENTER_INSIDE : scaleX = scaleY = Math . min ( _NUM , Math . min ( scaleX , scaleY ) ) ; case FIT_CENTER : scaleX = scaleY = Math . min ( scaleX , scaleY ) ; break ; case FIT_XY : break ; default : throw new UnsupportedOperationException ( _STR ) ; } float redundantXSpace = viewWidth - ( scaleX * drawableWidth ) ; float redundantYSpace = viewHeight - ( scaleY * drawableHeight ) ; matchViewWidth = viewWidth - redundantXSpace ; matchViewHeight = viewHeight - redundantYSpace ; if ( ! isZoomed ( ) && ! imageRenderedAtLeastOnce ) { matrix . setScale ( scaleX , scaleY ) ; matrix . postTranslate ( redundantXSpace / _NUM , redundantYSpace / _NUM ) ; normalizedScale = _NUM ; } else { if ( prevMatchViewWidth == _NUM || prevMatchViewHeight == _NUM ) { savePreviousImageValues ( ) ; } prevMatrix . getValues ( m ) ; m [ Matrix . MSCALE_X ] = matchViewWidth / drawableWidth * normalizedScale ; m [ Matrix . MSCALE_Y ] = matchViewHeight / drawableHeight * normalizedScale ; float transX = m [ Matrix . MTRANS_X ] ; float transY = m [ Matrix . MTRANS_Y ] ; float prevActualWidth = prevMatchViewWidth * normalizedScale ; float actualWidth = getImageWidth ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_X , transX , prevActualWidth , actualWidth , prevViewWidth , viewWidth , drawableWidth ) ; float prevActualHeight = prevMatchViewHeight * normalizedScale ; float actualHeight = getImageHeight ( ) ; translateMatrixAfterRotate ( Matrix . MTRANS_Y , transY , prevActualHeight , actualHeight , prevViewHeight , viewHeight , drawableHeight ) ; matrix . setValues ( m ) ; } fixTrans ( ) ; setImageMatrix ( matrix ) ; }
1496	public static int hashCode ( boolean [ ] field ) { return field == null || field . length == _NUM ? _NUM : Arrays . hashCode ( field ) ; }
27007	public AbstractSurfaceObject ( AbstractSurfaceObject source ) { super ( source ) ; this . visible = source . visible ; this . uniqueId = nextUniqueId ( ) ; this . lastModifiedTime = System . currentTimeMillis ( ) ; this . enableBatchPicking = source . enableBatchPicking ; }
66953	public SootMethodAndClass parseSootMethodString ( String parseString ) { if ( ! parseString . startsWith ( _STR ) || ! parseString . endsWith ( _STR ) ) { throw new IllegalArgumentException ( _STR + parseString + _STR ) ; } String name = _STR ; String className = _STR ; String returnType = _STR ; Pattern pattern = Pattern . compile ( _STR ) ; Matcher matcher = pattern . matcher ( parseString ) ; if ( matcher . find ( ) ) { className = matcher . group ( _NUM ) ; } pattern = Pattern . compile ( _STR ) ; matcher = pattern . matcher ( parseString ) ; if ( matcher . find ( ) ) { returnType = matcher . group ( _NUM ) ; parseString = parseString . substring ( matcher . end ( _NUM ) ) ; } pattern = Pattern . compile ( _STR ) ; matcher = pattern . matcher ( parseString ) ; if ( matcher . find ( ) ) { name = matcher . group ( _NUM ) ; } List < String > paramList = new ArrayList < String > ( ) ; pattern = Pattern . compile ( _STR ) ; matcher = pattern . matcher ( parseString ) ; if ( matcher . find ( ) ) { String params = matcher . group ( _NUM ) ; for ( String param : params . split ( _STR ) ) paramList . add ( param . trim ( ) ) ; } return new SootMethodAndClass ( name , className , returnType , paramList ) ; }
82877	private void createNewReviewTask ( TaskRepository repository , TaskData taskData ) throws CoreException { Repository repo = AppraisePluginUtils . getGitRepoForRepository ( repository ) ; AppraisePluginReviewClient client ; try { client = new AppraisePluginReviewClient ( repository ) ; } catch ( GitClientException e1 ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , _STR ) ) ; } String currentBranch ; try { currentBranch = repo . getFullBranch ( ) ; } catch ( IOException e ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , _STR , e ) ) ; } if ( MASTER_REF . equals ( currentBranch ) ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , _STR ) ) ; } setAttributeValue ( taskData , schema . REQUESTER , repository . getUserName ( ) ) ; setAttributeValue ( taskData , schema . TARGET_REF , MASTER_REF ) ; setAttributeValue ( taskData , schema . REVIEW_REF , currentBranch ) ; RevCommit reviewCommit ; try { reviewCommit = client . getReviewCommit ( currentBranch , MASTER_REF ) ; } catch ( GitClientException e ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , _STR , e ) ) ; } if ( reviewCommit == null ) { throw new CoreException ( new Status ( IStatus . INFO , AppraiseConnectorPlugin . PLUGIN_ID , _STR + currentBranch ) ) ; } setAttributeValue ( taskData , schema . DESCRIPTION , reviewCommit . getFullMessage ( ) ) ; setAttributeValue ( taskData , schema . REVIEW_COMMIT , reviewCommit . getName ( ) ) ; try { List < DiffEntry > diffs = client . getReviewDiffs ( currentBranch , MASTER_REF ) ; populateDiffs ( repository , diffs , taskData ) ; } catch ( Exception e ) { throw new CoreException ( new Status ( IStatus . ERROR , AppraiseConnectorPlugin . PLUGIN_ID , _STR , e ) ) ; } }
20660	public boolean isCritical ( ) { return _BOOL ; }
12962	@ Override public void startup ( ) throws Exception { Log . d ( Mary . LOG , _STR ) ; List < String > voiceNames = MaryProperties . getList ( _STR ) ; for ( String voiceName : voiceNames ) { long time = System . currentTimeMillis ( ) ; Voice unitSelVoice = new UnitSelectionVoice ( voiceName , this ) ; Log . d ( Mary . LOG , _STR + unitSelVoice + _STR ) ; Voice . registerVoice ( unitSelVoice ) ; long newtime = System . currentTimeMillis ( ) - time ; Log . i ( Mary . LOG , _STR + voiceName + _STR + newtime + _STR ) ; } Log . i ( Mary . LOG , _STR ) ; }
78169	public int findStartOfColumn ( int column ) { if ( column == mColumns ) return getSpaceUsed ( ) ; int currentColumn = _NUM ; int currentCharIndex = _NUM ; while ( _BOOL ) { int newCharIndex = currentCharIndex ; char c = mText [ newCharIndex ++ ] ; boolean isHigh = Character . isHighSurrogate ( c ) ; int codePoint = isHigh ? Character . toCodePoint ( c , mText [ newCharIndex ++ ] ) : c ; int wcwidth = WcWidth . width ( codePoint ) ; if ( wcwidth > _NUM ) { currentColumn += wcwidth ; if ( currentColumn == column ) { while ( newCharIndex < mSpaceUsed ) { if ( Character . isHighSurrogate ( mText [ newCharIndex ] ) ) { if ( WcWidth . width ( Character . toCodePoint ( mText [ newCharIndex ] , mText [ newCharIndex + _NUM ] ) ) <= _NUM ) { newCharIndex += _NUM ; } else { break ; } } else if ( WcWidth . width ( mText [ newCharIndex ] ) <= _NUM ) { newCharIndex ++ ; } else { break ; } } return newCharIndex ; } else if ( currentColumn > column ) { return currentCharIndex ; } } currentCharIndex = newCharIndex ; } }
69742	private TripSchedule rerouteTripSchedule ( TripSchedule originalSchedule ) { TripSchedule schedule = originalSchedule . clone ( ) ; schedule . arrivals = new int [ newPatternLength ] ; schedule . departures = new int [ newPatternLength ] ; int prevOutputDeparture = _NUM ; for ( int ss = _NUM , ts = _NUM ; ts < newPatternLength ; ss ++ , ts ++ ) { if ( ( ss == insertBeginIndex - _NUM ) || ( ss == _NUM && insertBeginIndex == _NUM ) ) { int hopTime = originalSchedule . arrivals [ ss ] ; if ( ss > _NUM ) hopTime -= originalSchedule . departures [ ss - _NUM ] ; schedule . arrivals [ ts ] = prevOutputDeparture + hopTime ; schedule . departures [ ts ] = schedule . arrivals [ ts ] + dwellTimes [ _NUM ] ; prevOutputDeparture = schedule . departures [ ts ] ; ts ++ ; for ( int hop = _NUM , dwell = _NUM ; dwell < dwellTimes . length ; hop ++ , dwell ++ ) { schedule . arrivals [ ts ] = prevOutputDeparture + hopTimes [ hop ] ; schedule . departures [ ts ] = schedule . arrivals [ ts ] + dwellTimes [ dwell ] ; prevOutputDeparture = schedule . departures [ ts ] ; ts ++ ; } ss = insertEndIndex + _NUM ; if ( ts == newPatternLength ) break ; } int hopTime = originalSchedule . arrivals [ ss ] ; if ( ss > _NUM ) hopTime -= originalSchedule . departures [ ss - _NUM ] ; schedule . arrivals [ ts ] = prevOutputDeparture + hopTime ; int dwellTime = originalSchedule . departures [ ss ] - originalSchedule . arrivals [ ss ] ; schedule . departures [ ts ] = schedule . arrivals [ ts ] + dwellTime ; prevOutputDeparture = schedule . departures [ ts ] ; } int timeShift = originalSchedule . arrivals [ originalFixedPointStopIndex ] - schedule . arrivals [ newFixedPointStopIndex ] ; for ( int i = _NUM ; i < newPatternLength ; i ++ ) { schedule . arrivals [ i ] += timeShift ; schedule . departures [ i ] += timeShift ; } if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( _STR , originalSchedule . arrivals ) ; LOG . debug ( _STR , originalSchedule . departures ) ; LOG . debug ( _STR , schedule . arrivals ) ; LOG . debug ( _STR , schedule . departures ) ; } return schedule ; }
55537	public static Color decode ( String color , Color defaultColor ) { if ( color == null ) { return defaultColor ; } Color c = getNamedColor ( color ) ; if ( c == null ) { try { c = Color . decode ( color ) ; } catch ( NumberFormatException ex ) { return defaultColor ; } } return c ; }
12891	public static LinkedList < MaryModule > modulesRequiredForProcessing ( MaryDataType sourceType , MaryDataType targetType , Locale locale , Voice voice ) { if ( ! registrationComplete ) throw new IllegalStateException ( _STR ) ; if ( sourceType == null ) throw new NullPointerException ( _STR ) ; if ( targetType == null ) throw new NullPointerException ( _STR ) ; LinkedList < MaryDataType > seenTypes = new LinkedList < MaryDataType > ( ) ; seenTypes . add ( sourceType ) ; return modulesRequiredForProcessing ( sourceType , targetType , locale , voice , seenTypes ) ; }
9278	public double distance ( Vector o ) { return Math . sqrt ( NumberConversions . square ( x - o . x ) + NumberConversions . square ( y - o . y ) + NumberConversions . square ( z - o . z ) ) ; }
67902	public static long calculateElapsedGC ( ) { long timeMillis = _NUM ; for ( GarbageCollectorMXBean gcbean : gcbeans ) { timeMillis += gcbean . getCollectionTime ( ) ; } return timeMillis ; }
58138	public void close ( ) { }
69814	public static < V > int addDistinctList ( List < V > sourceList , List < V > entryList ) { if ( sourceList == null || isEmpty ( entryList ) ) { return _NUM ; } int sourceCount = sourceList . size ( ) ; for ( V entry : entryList ) { if ( ! sourceList . contains ( entry ) ) { sourceList . add ( entry ) ; } } return sourceList . size ( ) - sourceCount ; }
450	public void startObject ( int numfields ) { notNested ( ) ; if ( vtable == null || vtable . length < numfields ) vtable = new int [ numfields ] ; vtable_in_use = numfields ; Arrays . fill ( vtable , _NUM , vtable_in_use , _NUM ) ; nested = _BOOL ; object_start = offset ( ) ; }
31688	private Map < String , String > produceStream ( String topic ) { List < ProducerRecord < String , String > > messages = new ArrayList < > ( EVENT_CNT ) ; Map < String , String > keyValMap = new HashMap < > ( ) ; for ( int evt = _NUM ; evt < EVENT_CNT ; evt ++ ) { long runtime = System . currentTimeMillis ( ) ; String key = topic + _STR + String . valueOf ( evt ) ; String msg = runtime + String . valueOf ( evt ) ; messages . add ( new ProducerRecord < > ( topic , key , msg ) ) ; keyValMap . put ( key , msg ) ; } kafkaBroker . sendMessages ( messages ) ; return keyValMap ; }
71020	public static String stringOfChar ( char ch , int count ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { buf . append ( ch ) ; } return buf . toString ( ) ; }
956	private void addConnectionView ( Connection connection ) { PlatformImpl . runAndWait ( null ) ; }
43293	public static void trim ( CharSequence aText , int [ ] aSpan ) { int begin = aSpan [ _NUM ] ; int end = aSpan [ _NUM ] - _NUM ; CharSequence data = aText ; while ( ( begin < ( data . length ( ) - _NUM ) ) && trimChar ( data . charAt ( begin ) ) ) { begin ++ ; } while ( ( end > _NUM ) && trimChar ( data . charAt ( end ) ) ) { end -- ; } end ++ ; aSpan [ _NUM ] = begin ; aSpan [ _NUM ] = end ; }
38513	public void addScriptFinishedListener ( ScriptExecutionListener l ) { m_FinishedListeners . add ( l ) ; }
35137	public void onConsumeFinished ( Purchase purchase , IabResult result ) ;
27859	public void test_getPutByteArray ( ) { final int size = _NUM ; final IDataRecord buf = new FixedByteArrayBuffer ( size ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( _NUM ) ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( size - _NUM ) ) ; final int pos = _NUM ; for ( int i = _NUM ; i < LIMIT ; i ++ ) { final byte [ ] expected = new byte [ r . nextInt ( size - _NUM ) ] ; r . nextBytes ( expected ) ; buf . put ( pos , expected ) ; assertEquals ( _NUM , BytesUtil . compareBytesWithLenAndOffset ( _NUM , expected . length , expected , pos , expected . length , buf . array ( ) ) ) ; final byte [ ] actual = new byte [ expected . length ] ; buf . get ( pos , actual ) ; assertTrue ( BytesUtil . bytesEqual ( expected , actual ) ) ; } assertEquals ( ( byte ) _NUM , buf . getByte ( _NUM ) ) ; assertEquals ( ( byte ) _NUM , buf . getByte ( pos + size - _NUM ) ) ; }
1508	public static double [ ] concatAllDouble ( double [ ] ... arrays ) { int totalLength = _NUM ; final int subArrayCount = arrays . length ; for ( int i = _NUM ; i < subArrayCount ; ++ i ) { totalLength += arrays [ i ] . length ; } double [ ] result = Arrays . copyOf ( arrays [ _NUM ] , totalLength ) ; int offset = arrays [ _NUM ] . length ; for ( int i = _NUM ; i < subArrayCount ; ++ i ) { System . arraycopy ( arrays [ i ] , _NUM , result , offset , arrays [ i ] . length ) ; offset += arrays [ i ] . length ; } return result ; }
6969	private T [ ] ensureCapacity ( int minCapacity ) { if ( tmp . length < minCapacity ) { int newSize = minCapacity ; newSize |= newSize > > _NUM ; newSize |= newSize > > _NUM ; newSize |= newSize > > _NUM ; newSize |= newSize > > _NUM ; newSize |= newSize > > _NUM ; newSize ++ ; if ( newSize < _NUM ) newSize = minCapacity ; else newSize = Math . min ( newSize , a . length > > > _NUM ) ; T [ ] newArray = ( T [ ] ) new Object [ newSize ] ; tmp = newArray ; } return tmp ; }
16285	public synchronized void add ( String category , double minValue , double maxValue ) { super . add ( category , minValue ) ; mMaxValues . add ( maxValue ) ; }
44405	public void CONT ( int sessionNumber ) throws Exception { this . maxSessionNumber = Math . max ( this . maxSessionNumber , sessionNumber ) ; testElements . add ( new ContinuationElement ( sessionNumber ) ) ; }
56157	public static double calcRotationAngleInDegrees ( PointF centerPt , PointF targetPt ) { double theta = Math . atan2 ( targetPt . y - centerPt . y , targetPt . x - centerPt . x ) ; double angle = Math . toDegrees ( theta ) ; if ( angle < _NUM ) { angle += _NUM ; } return angle ; }
67666	public int countIn ( CharSequence sequence ) { int count = _NUM ; for ( int i = _NUM ; i < sequence . length ( ) ; i ++ ) { if ( matches ( sequence . charAt ( i ) ) ) { count ++ ; } } return count ; }
48231	public DeltaCRLIndicatorExtension ( int crlNum ) throws IOException { super ( PKIXExtensions . DeltaCRLIndicator_Id , _BOOL , BigInteger . valueOf ( crlNum ) , NAME , LABEL ) ; }
68960	public static void v ( String tag , String s , Object ... args ) { if ( LOG . VERBOSE >= LOGLEVEL ) Log . v ( tag , String . format ( s , args ) ) ; }
9242	static private double calcLogProb ( int numAppear , double mu ) { final double sigma = calcSigmaFromMu ( mu ) ; final double logNumAppear = Math . log ( numAppear ) ; final double overMu = Math . max ( logNumAppear - mu , _NUM ) ; final double res = - ( _NUM / _NUM ) * ( overMu * overMu ) / ( sigma * sigma ) - s_logSqrtTwoPi - Math . log ( sigma ) ; assert ( res <= _NUM ) ; return res ; }
39699	@ Override public SoftwarePIDController withTolerance ( double tolerance ) { target = target . withTolerance ( Math . abs ( tolerance ) ) ; return this ; }
48785	protected final void dragDropFinished ( final boolean success , final int operations , final int x , final int y ) { DragSourceEvent event = new DragSourceDropEvent ( getDragSourceContext ( ) , operations & sourceActions , success , x , y ) ; EventDispatcher dispatcher = new EventDispatcher ( DISPATCH_FINISH , event ) ; SunToolkit . invokeLaterOnAppContext ( SunToolkit . targetToAppContext ( getComponent ( ) ) , dispatcher ) ; startSecondaryEventLoop ( ) ; setNativeContext ( _NUM ) ; dragImage = null ; dragImageOffset = null ; }
8965	@ Override public byte [ ] write ( InternalLog log ) throws IOException { final byte [ ] rowkey = RowkeyBuilder . buildRowkey ( log ) ; final Put p = new Put ( rowkey ) ; populateColumnValues ( p , log ) ; tbl . put ( p ) ; final List < byte [ ] > indexRowkeys = log . getIndexRowkeys ( ) ; if ( indexRowkeys != null ) { writeIndexes ( rowkey , indexRowkeys ) ; } return rowkey ; }
26029	private void insertIntoDynamicTable ( int index , Header entry ) { headerList . add ( entry ) ; int delta = entry . hpackSize ; if ( index != - _NUM ) { delta -= dynamicTable [ dynamicTableIndex ( index ) ] . hpackSize ; } if ( delta > maxDynamicTableByteCount ) { clearDynamicTable ( ) ; return ; } int bytesToRecover = ( dynamicTableByteCount + delta ) - maxDynamicTableByteCount ; int entriesEvicted = evictToRecoverBytes ( bytesToRecover ) ; if ( index == - _NUM ) { if ( headerCount + _NUM > dynamicTable . length ) { Header [ ] doubled = new Header [ dynamicTable . length * _NUM ] ; System . arraycopy ( dynamicTable , _NUM , doubled , dynamicTable . length , dynamicTable . length ) ; nextHeaderIndex = dynamicTable . length - _NUM ; dynamicTable = doubled ; } index = nextHeaderIndex -- ; dynamicTable [ index ] = entry ; headerCount ++ ; } else { index += dynamicTableIndex ( index ) + entriesEvicted ; dynamicTable [ index ] = entry ; } dynamicTableByteCount += delta ; }
54477	protected static String extractSecretAccessKey ( String s3uri ) { return s3uri . substring ( s3uri . indexOf ( _STR , s3uri . indexOf ( _STR ) + _NUM ) + _NUM , s3uri . indexOf ( _STR ) ) ; }
70701	private void dial ( String contactInformation , boolean makeTheCall , boolean usePhoneSpeaker ) { if ( contactInformation . equals ( _STR ) ) { String lastRecipient = RecipientCmd . getLastRecipientNumber ( ) ; String lastRecipientName = RecipientCmd . getLastRecipientName ( ) ; if ( lastRecipient != null ) { doDial ( lastRecipientName , lastRecipient , makeTheCall , usePhoneSpeaker ) ; } else { send ( _STR ) ; } } else { ResolvedContact resolvedContact = mContactsResolver . resolveContact ( contactInformation , ContactsResolver . TYPE_ALL ) ; if ( resolvedContact == null ) { send ( R . string . chat_no_match_for , contactInformation ) ; } else if ( resolvedContact . isDistinct ( ) ) { doDial ( resolvedContact . getName ( ) , resolvedContact . getNumber ( ) , makeTheCall , usePhoneSpeaker ) ; } else { askForMoreDetails ( resolvedContact . getCandidates ( ) ) ; } } }
66860	public void addSafeClass ( SootClass clz ) { safeClasses . add ( clz . getName ( ) ) ; }
64324	private boolean activeListHasRoom ( ) { int maxDownloads = _NUM ; return mActiveList . size ( ) < maxDownloads ; }
83086	public static final double parseTime ( final String time , final char separator ) { if ( time == null || time . length ( ) == _NUM || time . equals ( _STR ) ) { return Time . UNDEFINED_TIME ; } boolean isNegative = ( time . charAt ( _NUM ) == _STR ) ; String [ ] strings = ( isNegative ? StringUtils . explode ( time . substring ( _NUM ) , separator ) : StringUtils . explode ( time , separator ) ) ; double seconds = _NUM ; if ( strings . length == _NUM ) { seconds = Math . abs ( Double . parseDouble ( strings [ _NUM ] ) ) ; } else if ( strings . length == _NUM ) { int h = Integer . parseInt ( strings [ _NUM ] ) ; int m = Integer . parseInt ( strings [ _NUM ] ) ; if ( ( m < _NUM ) || ( m > _NUM ) ) { throw new IllegalArgumentException ( _STR + time ) ; } seconds = Math . abs ( h ) * _NUM + m * _NUM ; } else if ( strings . length == _NUM ) { int h = Integer . parseInt ( strings [ _NUM ] ) ; int m = Integer . parseInt ( strings [ _NUM ] ) ; double s = Double . parseDouble ( strings [ _NUM ] ) ; if ( ( m < _NUM ) || ( m > _NUM ) ) { throw new IllegalArgumentException ( _STR + time ) ; } if ( ( s < _NUM ) || ( s >= _NUM ) ) { throw new IllegalArgumentException ( _STR + time ) ; } seconds = Math . abs ( h ) * _NUM + m * _NUM + s ; } else { throw new IllegalArgumentException ( _STR + time ) ; } if ( isNegative ) { seconds = - seconds ; } return seconds ; }
56201	public boolean isRunning ( ) { return this . running ; }
76732	protected static Map < String , Step > parse ( Class < ? extends RSLPStemmerBase > clazz , String resource ) { try { InputStream is = clazz . getResourceAsStream ( resource ) ; LineNumberReader r = new LineNumberReader ( new InputStreamReader ( is , StandardCharsets . UTF_8 ) ) ; Map < String , Step > steps = new HashMap < > ( ) ; String step ; while ( ( step = readLine ( r ) ) != null ) { Step s = parseStep ( r , step ) ; steps . put ( s . name , s ) ; } r . close ( ) ; return steps ; } catch ( IOException e ) { throw new RuntimeException ( e ) ; } }
50667	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
80560	public String betToString ( ) { final StringBuilder sb = new StringBuilder ( ) ; sb . append ( amount ) ; sb . append ( _STR ) ; sb . append ( itemName ) ; sb . append ( _STR ) ; sb . append ( target ) ; return sb . toString ( ) ; }
27755	public void test_nonEmptyJournal ( ) throws IOException , InterruptedException , ExecutionException { final File out = File . createTempFile ( getName ( ) , Options . JNL ) ; try { final Journal src = getStore ( getProperties ( ) ) ; try { if ( ! ( src . getBufferStrategy ( ) instanceof IHABufferStrategy ) ) { return ; } src . write ( getRandomData ( _NUM ) ) ; src . commit ( ) ; try { final ISnapshotFactory snapshotFactory = new MySnapshotFactory ( getName ( ) , _BOOL ) ; final Future < ISnapshotResult > f = src . snapshot ( snapshotFactory ) ; final ISnapshotResult snapshotResult = f . get ( ) ; final File snapshotFile = snapshotResult . getFile ( ) ; try { final Journal tmp = openSnapshot ( snapshotResult ) ; assertEquals ( src . getRootBlockView ( ) , tmp . getRootBlockView ( ) ) ; tmp . destroy ( ) ; } finally { if ( snapshotFile . exists ( ) ) { snapshotFile . delete ( ) ; } } } catch ( IllegalArgumentException ex ) { log . info ( _STR + ex ) ; } } finally { src . destroy ( ) ; } } finally { out . delete ( ) ; } }
57162	private boolean checkMatchIp ( Map < String , Object > rows ) { boolean matchEther = _BOOL ; String val = ( String ) rows . get ( StaticFlowEntryPusher . COLUMN_DL_TYPE ) ; if ( val != null ) { int type = _NUM ; if ( val . startsWith ( _STR ) ) { type = Integer . parseInt ( val . substring ( _NUM ) , _NUM ) ; } else { try { type = Integer . parseInt ( val ) ; } catch ( NumberFormatException e ) { } } if ( type == _NUM ) matchEther = _BOOL ; } if ( ( rows . containsKey ( StaticFlowEntryPusher . COLUMN_NW_DST ) || rows . containsKey ( StaticFlowEntryPusher . COLUMN_NW_SRC ) || rows . containsKey ( StaticFlowEntryPusher . COLUMN_NW_PROTO ) || rows . containsKey ( StaticFlowEntryPusher . COLUMN_NW_TOS ) ) && ( matchEther == _BOOL ) ) return _BOOL ; return _BOOL ; }
9445	public static double powQuick ( double value , double power ) { if ( USE_JDK_MATH ) { return STRICT_MATH ? StrictMath . pow ( value , power ) : Math . pow ( value , power ) ; } return FastMath . exp ( power * FastMath . logQuick ( value ) ) ; }
8814	private String classToEntryPath ( Class < ? > clazz ) { String name = _STR ; Class < ? > parent ; while ( ( parent = clazz . getEnclosingClass ( ) ) != null ) { name = _STR + clazz . getSimpleName ( ) + name ; clazz = parent ; } return classNameToEntryPath ( clazz . getCanonicalName ( ) + name ) ; }
4807	public static String write ( POSMikheevCounter counter ) { return POSBaseLineCounter . write ( counter ) ; }
35016	private Map < String , AnnotationMirror > annosInPackage ( PackageElement packageElement ) { return createImportedAnnotationsMap ( ElementFilter . typesIn ( packageElement . getEnclosedElements ( ) ) ) ; }
22904	public OsmElement pasteFrom ( ) { List < Way > ways = storage . getWays ( ) ; List < Node > nodes = storage . getNodes ( ) ; if ( mode == Mode . CUT ) { reset ( ) ; if ( ways != null && ways . size ( ) == _NUM ) { Way w = ways . get ( _NUM ) ; w . setState ( savedState ) ; for ( Node nd : w . getNodes ( ) ) { Log . d ( _STR , _STR + nd . getOsmId ( ) ) ; nd . setState ( savedNdState . get ( nd ) ) ; } return w ; } else if ( nodes != null && nodes . size ( ) == _NUM ) { Node n = nodes . get ( _NUM ) ; n . setState ( savedState ) ; return n ; } } else { if ( ways != null && ways . size ( ) == _NUM ) { return ways . get ( _NUM ) ; } else if ( nodes != null && nodes . size ( ) == _NUM ) { return nodes . get ( _NUM ) ; } } return null ; }
45787	public final void updateCursor ( ) { updatePending . set ( _BOOL ) ; updateCursorImpl ( ) ; }
46715	public static boolean isMiddleMouseButton ( MouseEvent anEvent ) { return ( ( anEvent . getModifiersEx ( ) & InputEvent . BUTTON2_DOWN_MASK ) != _NUM || anEvent . getButton ( ) == MouseEvent . BUTTON2 ) ; }
43127	public void addSuccessMessage ( final String successMessage ) { successMessageList . add ( successMessage ) ; }
74474	private void startStoppedChanged ( ) { clock . setStartStopped ( startStoppedCheckBox . isSelected ( ) ) ; changed = _BOOL ; }
11500	public void close ( ) throws IOException { try { Debug . message ( _STR , _STR ) ; if ( Debug . debugging ( _STR ) ) { Thread . sleep ( _NUM ) ; } if ( inputStream != null ) inputStream . close ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } inputStream = null ; }
44795	public static Long nextLogSegmentSequenceNumber ( List < LogSegmentMetadata > segmentListDesc ) { int lastAssignedLogSegmentIdx = - _NUM ; Long lastAssignedLogSegmentSeqNo = null ; Long nextLogSegmentSeqNo = null ; for ( int i = _NUM ; i < segmentListDesc . size ( ) ; i ++ ) { LogSegmentMetadata metadata = segmentListDesc . get ( i ) ; if ( LogSegmentMetadata . supportsLogSegmentSequenceNo ( metadata . getVersion ( ) ) ) { lastAssignedLogSegmentSeqNo = metadata . getLogSegmentSequenceNumber ( ) ; lastAssignedLogSegmentIdx = i ; break ; } } if ( null != lastAssignedLogSegmentSeqNo ) { nextLogSegmentSeqNo = lastAssignedLogSegmentSeqNo + lastAssignedLogSegmentIdx + _NUM ; } return nextLogSegmentSeqNo ; }
1520	private void readBinary ( final LittleEndianDataInputStream dis ) throws IOException { RajLog . i ( _STR ) ; dis . skip ( _NUM ) ; int facetCount = dis . readInt ( ) ; float [ ] verticesArr = new float [ facetCount * _NUM ] ; float [ ] normalsArr = new float [ facetCount * _NUM ] ; int [ ] indicesArr = new int [ facetCount * _NUM ] ; float [ ] tempNorms = new float [ _NUM ] ; int vertPos = _NUM , normPos = _NUM ; for ( int i = _NUM ; i < indicesArr . length ; i ++ ) indicesArr [ i ] = i ; while ( dis . available ( ) > _NUM ) { for ( int j = _NUM ; j < _NUM ; j ++ ) { tempNorms [ j ] = dis . readFloat ( ) ; if ( Float . isNaN ( tempNorms [ j ] ) || Float . isInfinite ( tempNorms [ j ] ) ) { RajLog . w ( _STR ) ; tempNorms [ _NUM ] = _NUM ; tempNorms [ _NUM ] = _NUM ; tempNorms [ _NUM ] = _NUM ; break ; } } for ( int j = _NUM ; j < _NUM ; j ++ ) { normalsArr [ normPos ++ ] = tempNorms [ _NUM ] ; normalsArr [ normPos ++ ] = tempNorms [ _NUM ] ; normalsArr [ normPos ++ ] = tempNorms [ _NUM ] ; } for ( int j = _NUM ; j < _NUM ; j ++ ) verticesArr [ vertPos ++ ] = dis . readFloat ( ) ; dis . skip ( _NUM ) ; } mRootObject . setData ( verticesArr , normalsArr , null , null , indicesArr , _BOOL ) ; }
85108	public static void assertSpecificLang ( String specificLang ) throws XMPException { if ( specificLang == null || specificLang . length ( ) == _NUM ) { throw new XMPException ( _STR , XMPError . BADPARAM ) ; } }
63597	public int onBlockExploded ( ) { return ( int ) ( fuseTime / _NUM + Math . random ( ) * fuseTime / _NUM ) ; }
83489	@ Override public boolean hasQueuedReaderThreads ( ) { return readerLock . hasQueuedThreads ( ) ; }
36655	public long inactiveTimeMillis ( ) { return System . currentTimeMillis ( ) - lastTimeMillis ; }
84389	public static void check ( boolean cond , Object value ) { if ( ! cond ) error ( String . valueOf ( value ) ) ; }
14825	public void addDefinition ( ICOSDefinition cosDef ) throws UMSException { if ( ! ( cosDef instanceof DirectCOSDefinition ) ) { String msg = i18n . getString ( IUMSConstants . INVALID_COSDEFINITION ) ; throw new UMSException ( msg ) ; } String [ ] cosAttributes = cosDef . getCOSAttributes ( ) ; AbstractCollection aList = ( AbstractCollection ) Arrays . asList ( ICOSDefinition . qualifiers ) ; for ( int i = _NUM ; i < cosAttributes . length ; i ++ ) { String cosAttribute = null ; String qualifier = null ; StringTokenizer st = new StringTokenizer ( cosAttributes [ i ] ) ; if ( st . hasMoreTokens ( ) ) { cosAttribute = st . nextToken ( ) ; } if ( cosAttribute == null ) { String msg = i18n . getString ( IUMSConstants . INVALID_COS_ATTRIBUTE_QUALIFIER ) ; throw new UMSException ( msg ) ; } if ( st . hasMoreTokens ( ) ) qualifier = st . nextToken ( ) ; if ( qualifier == null ) { qualifier = ICOSDefinition . qualifiers [ ICOSDefinition . DEFAULT ] ; cosDef . removeCOSAttribute ( cosAttribute ) ; cosDef . addCOSAttribute ( cosAttribute , ICOSDefinition . DEFAULT ) ; } if ( ! aList . contains ( qualifier ) ) { String msg = i18n . getString ( IUMSConstants . INVALID_COS_ATTRIBUTE_QUALIFIER ) ; throw new UMSException ( msg ) ; } } PersistentObject po = ( PersistentObject ) cosDef ; _parentObject . addChild ( po ) ; }
68583	public static SourceDataQuality fromXML ( Element domElement ) { NodeList fields = domElement . getChildNodes ( ) ; int fieldsCount = fields . getLength ( ) ; String fieldName ; String fieldValueString ; Node fieldNode ; SourceDataQuality result = new SourceDataQuality ( ) ; for ( int i = _NUM ; i != fieldsCount ; i ++ ) { fieldNode = fields . item ( i ) ; if ( fieldNode . getNodeType ( ) == Node . ELEMENT_NODE ) { fieldName = fieldNode . getNodeName ( ) ; Node fieldValueNode = fieldNode . getFirstChild ( ) ; if ( fieldValueNode != null ) { fieldValueString = fieldValueNode . getNodeValue ( ) ; } else { fieldValueString = _STR ; } if ( fieldName . equals ( XML_ELEMENT_QUALITY_CODE ) ) { result . qualityCode = Short . parseShort ( fieldValueString ) ; } else if ( fieldName . equals ( XML_ELEMENT_QUALITY_DESC ) ) { result . description = fieldValueString ; } } } return result ; }
34301	QName toQName ( Class < ? > outputClass ) { String localPart ; String namespaceUri ; if ( outputClass . isAnnotationPresent ( XmlRootElement . class ) ) { XmlRootElement annotation = outputClass . getAnnotation ( XmlRootElement . class ) ; localPart = annotation . name ( ) ; namespaceUri = annotation . namespace ( ) ; } else if ( outputClass . isAnnotationPresent ( XmlType . class ) ) { XmlType annotation = outputClass . getAnnotation ( XmlType . class ) ; localPart = annotation . name ( ) ; namespaceUri = annotation . namespace ( ) ; } else { throw new IllegalArgumentException ( _STR + outputClass + _STR + _STR ) ; } if ( JAXB_DEFAULT_ANNOTATION_VALUE . equals ( localPart ) ) { localPart = ClassUtils . getShortNameAsProperty ( outputClass ) ; } if ( JAXB_DEFAULT_ANNOTATION_VALUE . equals ( namespaceUri ) ) { Package outputClassPackage = outputClass . getPackage ( ) ; if ( outputClassPackage != null && outputClassPackage . isAnnotationPresent ( XmlSchema . class ) ) { XmlSchema annotation = outputClassPackage . getAnnotation ( XmlSchema . class ) ; namespaceUri = annotation . namespace ( ) ; } else { namespaceUri = XMLConstants . NULL_NS_URI ; } } return new QName ( namespaceUri , localPart ) ; }
33833	private void adjustBottom ( RectF rect , float bottom , RectF bounds , int viewHeight , float snapMargin , float aspectRatio , boolean leftMoves , boolean rightMoves ) { float newBottom = bottom ; if ( newBottom > viewHeight ) { newBottom = viewHeight + ( newBottom - viewHeight ) / _NUM ; mTouchOffset . y -= ( newBottom - viewHeight ) / _NUM ; } if ( newBottom > bounds . bottom ) { mTouchOffset . y -= ( newBottom - bounds . bottom ) / _NUM ; } if ( bounds . bottom - newBottom < snapMargin ) { newBottom = bounds . bottom ; } if ( newBottom - rect . top < mMinCropHeight ) { newBottom = rect . top + mMinCropHeight ; } if ( newBottom - rect . top > mMaxCropHeight ) { newBottom = rect . top + mMaxCropHeight ; } if ( bounds . bottom - newBottom < snapMargin ) { newBottom = bounds . bottom ; } if ( aspectRatio > _NUM ) { float newWidth = ( newBottom - rect . top ) * aspectRatio ; if ( newWidth < mMinCropWidth ) { newBottom = Math . min ( bounds . bottom , rect . top + mMinCropWidth / aspectRatio ) ; newWidth = ( newBottom - rect . top ) * aspectRatio ; } if ( newWidth > mMaxCropWidth ) { newBottom = Math . min ( bounds . bottom , rect . top + mMaxCropWidth / aspectRatio ) ; newWidth = ( newBottom - rect . top ) * aspectRatio ; } if ( leftMoves && rightMoves ) { newBottom = Math . min ( newBottom , Math . min ( bounds . bottom , rect . top + bounds . width ( ) / aspectRatio ) ) ; } else { if ( leftMoves && rect . right - newWidth < bounds . left ) { newBottom = Math . min ( bounds . bottom , rect . top + ( rect . right - bounds . left ) / aspectRatio ) ; newWidth = ( newBottom - rect . top ) * aspectRatio ; } if ( rightMoves && rect . left + newWidth > bounds . right ) { newBottom = Math . min ( newBottom , Math . min ( bounds . bottom , rect . top + ( bounds . right - rect . left ) / aspectRatio ) ) ; } } } rect . bottom = newBottom ; }
476	private static String generateJWT ( String secret , String jwtID , String iss , Integer ttl , Map < String , String > claims ) throws HmacException { try { return signJWT ( secret , jwtID , ttl , iss , claims ) ; } catch ( JOSEException e ) { e . printStackTrace ( ) ; throw new HmacException ( _STR , e ) ; } }
41700	public void exportSymbols ( String [ ] exportNames , Symbol [ ] symbols ) { if ( exportedSymbols == null ) { exportedSymbols = new ArrayList ( ) ; } for ( int i = _NUM ; i < exportNames . length && i < symbols . length ; i ++ ) { exportedSymbols . add ( new ExportedSymbol ( symbols [ i ] , exportNames [ i ] ) ) ; } }
17653	static boolean isFulfilling ( int m ) { return ( m & FULFILLING ) != _NUM ; }
38663	@ Override public synchronized void addDataSourceListener ( DataSourceListener dsl ) { m_dataSourceListeners . addElement ( dsl ) ; if ( m_format != null ) { DataSetEvent e = new DataSetEvent ( this , m_format ) ; dsl . acceptDataSet ( e ) ; } }
34986	public static AnnotationMirror findEffectiveAnnotationInHierarchy ( final QualifierHierarchy qualifierHierarchy , final AnnotatedTypeMirror toSearch , final AnnotationMirror top ) { return findEffectiveAnnotationInHierarchy ( qualifierHierarchy , toSearch , top , _BOOL ) ; }
3945	public boolean toFail ( ) { LifecycleState state ; synchronized ( this ) { state = _state ; if ( state . isAfterDestroying ( ) ) { return _BOOL ; } _state = FAILED ; _lastChangeTime = CurrentTime . currentTime ( ) ; } if ( _log != null && _log . isLoggable ( _level ) ) _log . log ( _level , _STR + _name ) ; notifyListeners ( state , FAILED ) ; _failCount ++ ; return _BOOL ; }
45230	private static void read ( InputStream in , byte [ ] buf , int pos , int n ) throws IOException { int read = _NUM ; int res = _NUM ; while ( read < n ) { res = in . read ( buf , read + pos , n - read ) ; if ( res > _NUM ) { read += res ; } else { throw new IOException ( _STR + read + _STR + n ) ; } } }
37883	public double evaluate ( VectorInstance x , VectorInstance y ) throws Exception { VectorInstance diff = x . subtract ( y ) ; double result = - m_gamma * diff . dotProduct ( diff ) ; return Math . exp ( result ) ; }
49673	void parseFinish ( ) { mChildren = mCurrentGroup . getChildren ( ) ; }
74523	void cancelIncludedOnly ( ) { if ( ! _showAllInput ) { _inputAllButton . doClick ( ) ; } if ( ! _showAllOutput ) { _outputAllButton . doClick ( ) ; } if ( ! _showAllAlign ) { _alignAllButton . doClick ( ) ; } }
70661	List < Entry > killAll ( boolean rootIncluded ) { List < Entry > killed = new ArrayList < > ( rootIncluded ? entries . size ( ) : entries . size ( ) - _NUM ) ; Entry entry ; for ( int i = entries . size ( ) - _NUM ; i > ( rootIncluded ? - _NUM : _NUM ) ; i -- ) { entry = entries . get ( i ) ; if ( entry . dead ) continue ; entry . dead = _BOOL ; if ( i != _NUM ) { killed . add ( entry ) ; } } return killed ; }
41240	public static void createErrorDialog ( final String title , final String message ) { final Alert alert = new Alert ( AlertType . ERROR ) ; alert . setTitle ( title ) ; alert . setContentText ( message ) ; alert . setHeaderText ( null ) ; alert . showAndWait ( ) ; }
77168	public static String checkIndexHeaderSuffix ( DataInput in , String expectedSuffix ) throws IOException { int suffixLength = in . readByte ( ) & _NUM ; byte suffixBytes [ ] = new byte [ suffixLength ] ; in . readBytes ( suffixBytes , _NUM , suffixBytes . length ) ; String suffix = new String ( suffixBytes , _NUM , suffixBytes . length , StandardCharsets . UTF_8 ) ; if ( ! suffix . equals ( expectedSuffix ) ) { throw new CorruptIndexException ( _STR + expectedSuffix + _STR + suffix , in ) ; } return suffix ; }
739	protected void tag ( String tag , ArrayList names , ArrayList values , int nattr , boolean close ) { spacing ( ) ; m_out . print ( _STR ) ; m_out . print ( tag ) ; for ( int i = _NUM ; i < nattr ; ++ i ) { m_out . print ( _STR ) ; m_out . print ( ( String ) names . get ( i ) ) ; m_out . print ( _STR ) ; m_out . print ( _STR ) ; escapeString ( ( String ) values . get ( i ) ) ; m_out . print ( _STR ) ; } if ( close ) m_out . print ( _STR ) ; m_out . print ( _STR ) ; println ( ) ; if ( ! close ) { m_tagStack . add ( tag ) ; } }
21190	public static String parseDiskString ( String input ) { String delims = _STR ; String [ ] tokens = input . split ( delims ) ; return tokens [ _NUM ] ; }
36713	protected void drawCloud ( int x , int y , int w , int h , Color fillColor , Paint fillPaint , Color penColor , boolean shadow ) { GeneralPath path = new GeneralPath ( ) ; path . moveTo ( ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . curveTo ( ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) , ( float ) x , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . curveTo ( ( float ) x , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . curveTo ( ( float ) ( x + _NUM * w ) , ( float ) ( y + h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . curveTo ( ( float ) ( x + w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . curveTo ( ( float ) ( x + w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . curveTo ( ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) , ( float ) ( x + _NUM * w ) , ( float ) ( y + _NUM * h ) ) ; path . closePath ( ) ; drawPath ( path , fillColor , fillPaint , penColor , shadow ) ; }
31119	private static boolean isTrusted ( Object obj , TrustVerifier . Context ctx ) throws RemoteException { Object saved = state . get ( ) ; try { state . set ( obj ) ; return ctx . isTrustedObject ( obj ) ; } finally { state . set ( saved ) ; } }
71891	public static PersistentSearchRequestControl newControl ( final boolean isCritical , final boolean changesOnly , final boolean returnECs , final PersistentSearchChangeType ... changeTypes ) { Reject . ifNull ( ( Object ) changeTypes ) ; return newControl ( isCritical , changesOnly , returnECs , Arrays . asList ( changeTypes ) ) ; }
73248	private void connectEqualized ( SynapseGroup synapseGroup ) { currentOrderingIndices = new int [ sourceNeurons . length ] ; int numConnectsPerSrc ; int expectedNumSyns ; if ( synapseGroup . isRecurrent ( ) && ! selfConnectionAllowed ) { numConnectsPerSrc = ( int ) ( connectionDensity * ( sourceNeurons . length - _NUM ) ) ; } else { numConnectsPerSrc = ( int ) ( connectionDensity * targetNeurons . length ) ; } expectedNumSyns = numConnectsPerSrc * sourceNeurons . length ; synapseGroup . preAllocateSynapses ( expectedNumSyns ) ; for ( int i = _NUM , n = sourceNeurons . length ; i < n ; i ++ ) { currentOrderingIndices [ i ] = numConnectsPerSrc ; Neuron src = sourceNeurons [ i ] ; Neuron tar ; for ( int j = _NUM ; j < numConnectsPerSrc ; j ++ ) { tar = targetNeurons [ sparseOrdering [ i ] [ j ] ] ; Synapse s = new Synapse ( src , tar ) ; synapseGroup . addNewSynapse ( s ) ; } } }
8213	public static Number multiply ( Character left , Character right ) { return multiply ( Integer . valueOf ( left ) , right ) ; }
8143	public static String normalize ( final CharSequence self ) { final String s = self . toString ( ) ; int nx = s . indexOf ( _STR ) ; if ( nx < _NUM ) { return s ; } final int len = s . length ( ) ; final StringBuilder sb = new StringBuilder ( len ) ; int i = _NUM ; do { sb . append ( s , i , nx ) ; sb . append ( _STR ) ; if ( ( i = nx + _NUM ) >= len ) break ; if ( s . charAt ( i ) == _STR ) { if ( ++ i >= len ) break ; } nx = s . indexOf ( _STR , i ) ; } while ( nx > _NUM ) ; sb . append ( s , i , len ) ; return sb . toString ( ) ; }
80327	public void addZoneChangeListener ( ZoneChangeListener listener ) { zoneChangeListeners . add ( listener ) ; }
27426	public void write ( final int b ) throws IOException { if ( m_store == null ) { throw new IllegalStateException ( ERR_NO_STORE ) ; } if ( m_isSaved ) { throw new IllegalStateException ( ERR_ALREADY_SAVED ) ; } if ( m_count == m_blobThreshold && ! m_writingHdr ) { if ( m_blobHeader == null ) { m_blobHeader = new ArrayList < Integer > ( ) ; } final int curAddr = ( int ) m_store . alloc ( m_buf , m_count , m_context ) ; m_blobHeader . add ( curAddr ) ; m_count = _NUM ; } m_buf [ m_count ++ ] = ( byte ) b ; m_bytesWritten ++ ; }
3831	public StartListener ( Object resource ) { _resource = resource ; }
73507	public List < T > asFlatList ( ) { List < T > list = new ArrayList < T > ( ) ; for ( int i = _NUM ; i < getRowCount ( ) ; i ++ ) { for ( int j = _NUM ; j < getColumnCount ( ) ; j ++ ) { list . add ( getLogicalValueAt ( i , j ) ) ; } } return list ; }
25770	@ Beta public void reset ( ) { schedulersHook . set ( null ) ; }
35707	public static String hashKeyForDisk ( String key ) { String cacheKey ; try { final MessageDigest mDigest = MessageDigest . getInstance ( _STR ) ; mDigest . update ( key . getBytes ( ) ) ; cacheKey = bytesToHexString ( mDigest . digest ( ) ) ; } catch ( NoSuchAlgorithmException e ) { cacheKey = String . valueOf ( key . hashCode ( ) ) ; } return cacheKey ; }
68622	public void recordTimestamp ( ) { long curTimestamp = System . currentTimeMillis ( ) ; if ( usedFields > _NUM ) { long diff = curTimestamp - lastValue ; if ( usedFields == diffs . length ) { long removedValue = diffs [ curPosition ] ; diffs [ curPosition ] = diff ; calculateNewAverage ( removedValue , diff , _BOOL ) ; shiftEnd ( ) ; } else { calculateNewAverage ( _NUM , diff , _BOOL ) ; diffs [ curPosition ] = diff ; shiftEnd ( ) ; } } else if ( lastValue != - _NUM ) { long diff = curTimestamp - lastValue ; currentAverage = _NUM ; diffs [ curPosition ] = diff ; calculateNewAverage ( _NUM , diff , _BOOL ) ; shiftEnd ( ) ; } lastValue = curTimestamp ; }
2270	@ AfterMethod public void tearDown ( ) throws Exception { Throwable t = threadFailure . getAndSet ( null ) ; if ( t != null ) { if ( t instanceof Error ) throw ( Error ) t ; else if ( t instanceof RuntimeException ) throw ( RuntimeException ) t ; else if ( t instanceof Exception ) throw ( Exception ) t ; else { AssertionFailedError afe = new AssertionFailedError ( t . toString ( ) ) ; afe . initCause ( t ) ; throw afe ; } } if ( Thread . interrupted ( ) ) tearDownFail ( _STR ) ; checkForkJoinPoolThreadLeaks ( ) ; }
24616	public void parse ( String string ) { if ( string == null ) { throw new NullPointerException ( _STR ) ; } int bufferSize = Math . max ( MIN_BUFFER_SIZE , Math . min ( DEFAULT_BUFFER_SIZE , string . length ( ) ) ) ; try { parse ( new StringReader ( string ) , bufferSize ) ; } catch ( IOException exception ) { throw new RuntimeException ( exception ) ; } }
38963	protected double defaultMaxRadius ( ) { return Math . sqrt ( _NUM ) ; }
72657	public char [ ] toCharArray ( ) { char [ ] newValue = new char [ count ] ; System . arraycopy ( buf , _NUM , newValue , _NUM , count ) ; return newValue ; }
29756	@ Override protected int sizePendingWorkers ( ) { return _pendingWorkers . size ( ) ; }
46655	public void insert ( Component component , int index ) { if ( index < _NUM ) { throw new IllegalArgumentException ( _STR ) ; } int nitems = getComponentCount ( ) ; Vector < Component > tempItems = new Vector < Component > ( ) ; for ( int i = index ; i < nitems ; i ++ ) { tempItems . addElement ( getComponent ( index ) ) ; remove ( index ) ; } add ( component ) ; for ( Component tempItem : tempItems ) { add ( tempItem ) ; } }
36312	public static List < String > unescape ( String source , char escapeChar , char [ ] specialCharacters , char splitCharacter , int splitLimit ) { List < String > result = new LinkedList < > ( ) ; StringBuilder b = new StringBuilder ( ) ; boolean readEscape = _BOOL ; int indexCount = - _NUM ; for ( char c : source . toCharArray ( ) ) { indexCount ++ ; if ( readEscape ) { boolean found = _BOOL ; if ( c == splitCharacter ) { found = _BOOL ; b . append ( c ) ; } else if ( c == escapeChar ) { found = _BOOL ; b . append ( c ) ; } else { for ( char s : specialCharacters ) { if ( s == c ) { found = _BOOL ; b . append ( c ) ; break ; } } } if ( ! found ) { throw new IllegalArgumentException ( _STR + source + _STR + c + _STR ) ; } readEscape = _BOOL ; } else if ( c == escapeChar ) { readEscape = _BOOL ; } else if ( c == splitCharacter ) { readEscape = _BOOL ; result . add ( b . toString ( ) ) ; if ( splitLimit != - _NUM ) { if ( result . size ( ) == splitLimit - _NUM ) { result . add ( source . substring ( indexCount + _NUM ) ) ; return result ; } } b = new StringBuilder ( ) ; } else { readEscape = _BOOL ; b . append ( c ) ; } } result . add ( b . toString ( ) ) ; return result ; }
70489	protected int drawLegend ( Canvas canvas , DefaultRenderer renderer , String [ ] titles , int left , int right , int y , int width , int height , int legendSize , Paint paint , boolean calculate ) { float size = _NUM ; if ( renderer . isShowLegend ( ) ) { float currentX = left ; float currentY = y + height - legendSize + size ; paint . setTextAlign ( Align . LEFT ) ; paint . setTextSize ( renderer . getLegendTextSize ( ) ) ; int sLength = Math . min ( titles . length , renderer . getSeriesRendererCount ( ) ) ; for ( int i = _NUM ; i < sLength ; i ++ ) { SimpleSeriesRenderer r = renderer . getSeriesRendererAt ( i ) ; final float lineSize = getLegendShapeWidth ( i ) ; if ( r . isShowLegendItem ( ) ) { String text = titles [ i ] ; if ( titles . length == renderer . getSeriesRendererCount ( ) ) { paint . setColor ( r . getColor ( ) ) ; } else { paint . setColor ( Color . LTGRAY ) ; } float [ ] widths = new float [ text . length ( ) ] ; paint . getTextWidths ( text , widths ) ; float sum = _NUM ; for ( float value : widths ) { sum += value ; } float extraSize = lineSize + _NUM + sum ; float currentWidth = currentX + extraSize ; if ( i > _NUM && getExceed ( currentWidth , renderer , right , width ) ) { currentX = left ; currentY += renderer . getLegendTextSize ( ) ; size += renderer . getLegendTextSize ( ) ; currentWidth = currentX + extraSize ; } if ( getExceed ( currentWidth , renderer , right , width ) ) { float maxWidth = right - currentX - lineSize - _NUM ; if ( isVertical ( renderer ) ) { maxWidth = width - currentX - lineSize - _NUM ; } int nr = paint . breakText ( text , _BOOL , maxWidth , widths ) ; text = text . substring ( _NUM , nr ) + _STR ; } if ( ! calculate ) { drawLegendShape ( canvas , r , currentX , currentY , i , paint ) ; drawString ( canvas , text , currentX + lineSize + _NUM , currentY + _NUM , paint ) ; } currentX += extraSize ; } } } return Math . round ( size + renderer . getLegendTextSize ( ) ) ; }
25612	@ Override public String append ( String path , InputStream is ) throws MalformedURLException , IOException , AuthenticationException { String resp = null ; ensureValidToken ( ) ; String spec = MessageFormat . format ( _STR , URLUtil . encodePath ( path ) , this . principal ) ; String redirectUrl = null ; HttpURLConnection conn = authenticatedURL . openConnection ( new URL ( new URL ( httpfsUrl ) , spec ) , token ) ; conn . setRequestMethod ( _STR ) ; conn . setInstanceFollowRedirects ( _BOOL ) ; conn . connect ( ) ; logger . info ( _STR + conn . getHeaderField ( _STR ) ) ; resp = result ( conn , _BOOL ) ; if ( conn . getResponseCode ( ) == _NUM ) redirectUrl = conn . getHeaderField ( _STR ) ; conn . disconnect ( ) ; if ( redirectUrl != null ) { conn = authenticatedURL . openConnection ( new URL ( redirectUrl ) , token ) ; conn . setRequestMethod ( _STR ) ; conn . setDoOutput ( _BOOL ) ; conn . setDoInput ( _BOOL ) ; conn . setUseCaches ( _BOOL ) ; conn . setRequestProperty ( _STR , _STR ) ; final int _SIZE = is . available ( ) ; conn . setRequestProperty ( _STR , _STR + _SIZE ) ; conn . setFixedLengthStreamingMode ( _SIZE ) ; conn . connect ( ) ; OutputStream os = conn . getOutputStream ( ) ; copy ( is , os ) ; is . close ( ) ; os . close ( ) ; resp = result ( conn , _BOOL ) ; conn . disconnect ( ) ; } return resp ; }
30637	public EconomyConcurrentHashMap ( Map < ? extends K , ? extends V > m , IHashEntryHandler < K , V > handler ) { this ( Math . max ( ( int ) ( m . size ( ) / DEFAULT_LOAD_FACTOR ) + _NUM , DEFAULT_INITIAL_CAPACITY ) , DEFAULT_LOAD_FACTOR , DEFAULT_CONCURRENCY_LEVEL , handler ) ; putAll ( m ) ; }
46520	void addRule ( String [ ] selector , AttributeSet declaration , boolean isLinked ) { int n = selector . length ; StringBuilder sb = new StringBuilder ( ) ; sb . append ( selector [ _NUM ] ) ; for ( int counter = _NUM ; counter < n ; counter ++ ) { sb . append ( _STR ) ; sb . append ( selector [ counter ] ) ; } String selectorName = sb . toString ( ) ; Style rule = getStyle ( selectorName ) ; if ( rule == null ) { Style altRule = addStyle ( selectorName , null ) ; synchronized ( this ) { SelectorMapping mapping = getRootSelectorMapping ( ) ; for ( int i = n - _NUM ; i >= _NUM ; i -- ) { mapping = mapping . getChildSelectorMapping ( selector [ i ] , _BOOL ) ; } rule = mapping . getStyle ( ) ; if ( rule == null ) { rule = altRule ; mapping . setStyle ( rule ) ; refreshResolvedRules ( selectorName , selector , rule , mapping . getSpecificity ( ) ) ; } } } if ( isLinked ) { rule = getLinkedStyle ( rule ) ; } rule . addAttributes ( declaration ) ; }
29859	public Builder appendReadData ( byte [ ] data ) { Assertions . checkState ( data != null && data . length > _NUM ) ; segments . add ( new Segment ( data , null ) ) ; return this ; }
34210	private boolean isLatestDssKeystore ( TSLParserResult parseResult ) { List < String > englishSchemeInformationURIs = parseResult . getEnglishSchemeInformationURIs ( ) ; return englishSchemeInformationURIs . contains ( ojUrl ) ; }
17729	private synchronized void initResourceBundle ( String resourceBundleName ) { String current = this . resourceBundleName ; if ( current != null ) { if ( current . equals ( resourceBundleName ) ) { return ; } else { throw new IllegalArgumentException ( _STR + resourceBundleName + _STR + current + _STR ) ; } } if ( resourceBundleName != null ) { this . resourceBundle = loadResourceBundle ( resourceBundleName ) ; this . resourceBundleName = resourceBundleName ; } }
11788	public LayerGraphicWarehouseSupport ( ) { initDrawingAttributes ( ) ; graphics = new OMGraphicList ( ) ; graphics . setTraverseMode ( OMGraphicList . LAST_ADDED_ON_TOP ) ; }
41464	public boolean matchesNamingConvension ( ) { return packageName . matches ( JAVA_PACKAGE_CONVENSION ) ; }
49002	void rememberFactory ( String host , RMISocketFactory factory ) { synchronized ( successTable ) { while ( hostList . size ( ) >= MaxRememberedHosts ) { successTable . remove ( hostList . elementAt ( _NUM ) ) ; hostList . removeElementAt ( _NUM ) ; } hostList . addElement ( host ) ; successTable . put ( host , factory ) ; } }
77764	public void put ( String key , long value ) { if ( key != null ) { urlParams . put ( key , String . valueOf ( value ) ) ; } }
75192	public char next ( ) { return pos < in . length ( ) ? in . charAt ( pos ++ ) : _STR ; }
47063	private Map . Entry < K , V > doRemoveFirstEntry ( ) { for ( Node < K , V > b , n ; ; ) { if ( ( n = ( b = head . node ) . next ) == null ) return null ; Node < K , V > f = n . next ; if ( n != b . next ) continue ; Object v = n . value ; if ( v == null ) { n . helpDelete ( b , f ) ; continue ; } if ( ! n . casValue ( v , null ) ) continue ; if ( ! n . appendMarker ( f ) || ! b . casNext ( n , f ) ) findFirst ( ) ; clearIndexToFirst ( ) ; @ SuppressWarnings ( _STR ) V vv = ( V ) v ; return new AbstractMap . SimpleImmutableEntry < K , V > ( n . key , vv ) ; } }
32350	public ComputeTaskCancelledException ( Throwable cause ) { this ( cause . getMessage ( ) , cause ) ; }
48480	public static int normalize ( char [ ] src , int srcStart , int srcLimit , char [ ] dest , int destStart , int destLimit , Mode mode , int options ) { int length = mode . normalize ( src , srcStart , srcLimit , dest , destStart , destLimit , options ) ; if ( length <= ( destLimit - destStart ) ) { return length ; } else { throw new IndexOutOfBoundsException ( Integer . toString ( length ) ) ; } }
29937	private void removeObsoleteElements ( List < String > names , Map < String , View > sharedElements , List < String > elementsToRemove ) { if ( elementsToRemove . size ( ) > _NUM ) { names . removeAll ( elementsToRemove ) ; for ( String elementToRemove : elementsToRemove ) { sharedElements . remove ( elementToRemove ) ; } } }
784	public boolean isHighlightWithInvisibleEdge ( ) { return highlightWithInvisibleEdge ; }
73437	public void removeAction ( NetworkUpdateAction action ) { actionList . remove ( action ) ; for ( UpdateManagerListener listener : listeners ) { listener . actionRemoved ( action ) ; } }
71211	public static double bufferDistanceError ( int quadSegs ) { double alpha = Math . PI / _NUM / quadSegs ; return _NUM - Math . cos ( alpha / _NUM ) ; }
20838	public Pair < String , String > next ( ) { try { currentHeaderPosition = nextHeaderPosition ; String readHeader = nextLine ; nextHeaderPosition += readHeader . length ( ) + endOfLineBytes ; readHeader = _STR + readHeader . substring ( _NUM ) ; String readSequence = r . readLine ( ) ; nextHeaderPosition += readSequence . length ( ) + endOfLineBytes ; String comments = r . readLine ( ) ; nextHeaderPosition += comments . length ( ) + endOfLineBytes ; if ( comments . startsWith ( _STR ) ) { String qualityValues = r . readLine ( ) ; nextHeaderPosition += qualityValues . length ( ) + endOfLineBytes ; } nextLine = r . readLine ( ) ; return new Pair < > ( readHeader , readSequence ) ; } catch ( IOException e ) { Basic . caught ( e ) ; } return null ; }
28554	public void add ( Character character ) { elements . add ( character == null ? JsonNull . INSTANCE : new JsonPrimitive ( character ) ) ; }
2124	public static boolean isValidIfd ( int ifdId ) { return ifdId == IfdId . TYPE_IFD_0 || ifdId == IfdId . TYPE_IFD_1 || ifdId == IfdId . TYPE_IFD_EXIF || ifdId == IfdId . TYPE_IFD_INTEROPERABILITY || ifdId == IfdId . TYPE_IFD_GPS ; }
43945	public void removeChild ( Group theGroup ) { mChildren . remove ( theGroup ) ; }
21518	protected StoragePort checkPortExistsInDB ( String nativeGuid ) throws IOException { StoragePort port = null ; List < StoragePort > portInDB = CustomQueryUtility . getActiveStoragePortByNativeGuid ( _dbClient , nativeGuid ) ; if ( portInDB != null && ! portInDB . isEmpty ( ) ) { port = portInDB . get ( _NUM ) ; } return port ; }
43309	public void appendSplitElement ( Fragment aSplit ) { splits . add ( aSplit ) ; }
18012	public Iterator enumerateLiteralResultAttributes ( ) { return ( null == m_avts ) ? null : m_avts . iterator ( ) ; }
53622	public OsmHandler ( MapBuilder meConsumer ) { osmElementProcessor = new OsmElementProcessor ( null , meConsumer ) ; }
41619	public void close ( ) throws IOException { flushBits ( ) ; out . close ( ) ; }
40792	public RespokeDirectConnection directConnection ( ) { if ( null != directConnectionReference ) { return directConnectionReference . get ( ) ; } else { return null ; } }
10018	private String appendNationalNumber ( String nationalNumber ) { int prefixBeforeNationalNumberLength = prefixBeforeNationalNumber . length ( ) ; if ( shouldAddSpaceAfterNationalPrefix && prefixBeforeNationalNumberLength > _NUM && prefixBeforeNationalNumber . charAt ( prefixBeforeNationalNumberLength - _NUM ) != SEPARATOR_BEFORE_NATIONAL_NUMBER ) { return new String ( prefixBeforeNationalNumber ) + SEPARATOR_BEFORE_NATIONAL_NUMBER + nationalNumber ; } else { return prefixBeforeNationalNumber + nationalNumber ; } }
73310	public void cut ( ) { copy ( ) ; deleteSelectedObjects ( ) ; }
29969	public void stop ( ) { setLedOn ( _BOOL ) ; if ( null != blinkFuture ) { blinkFuture . cancel ( _BOOL ) ; } if ( null != blinkService ) { blinkService . shutdownNow ( ) ; } }
19833	public synchronized void release ( ) { index . clear ( ) ; }
19728	public void configure ( ) { if ( cmdPrefix != null ) { prefix = cmdPrefix . split ( _STR ) ; } }
44124	protected void writeTransform ( AffineTransform t ) throws IOException { pageStream . matrix ( t ) ; }
18803	public void testSignumPositive ( ) { String a = _STR ; int aScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; assertEquals ( _STR , _NUM , aNumber . signum ( ) ) ; }
82208	public PainterChain prependPainter ( Painter p ) { Painter [ ] newChain = new Painter [ chain . length + _NUM ] ; System . arraycopy ( chain , _NUM , newChain , _NUM , chain . length ) ; newChain [ _NUM ] = p ; return new PainterChain ( newChain ) ; }
67512	@ Nullable private Operator . Kind parseOperator ( TokenStream tokens ) { if ( tokens . has ( _STR ) ) { tokens . next ( ) ; tokens . expect ( _STR ) ; return Operator . Kind . EQUALS ; } if ( tokens . has ( _STR ) ) { tokens . next ( ) ; tokens . expect ( _STR ) ; return Operator . Kind . NOT_EQUALS ; } if ( tokens . has ( _STR ) ) { tokens . next ( ) ; if ( tokens . has ( _STR ) ) { tokens . next ( ) ; return Operator . Kind . LESS_EQUAL ; } return Operator . Kind . LESS ; } if ( tokens . has ( _STR ) ) { tokens . next ( ) ; if ( tokens . has ( _STR ) ) { tokens . next ( ) ; return Operator . Kind . GREATER_EQUAL ; } return Operator . Kind . GREATER ; } return null ; }
35224	@ Override public boolean dragTo ( Selector obj , Selector destObj , int steps ) throws UiObjectNotFoundException , NotImplementedException { return dragTo ( device . findObject ( obj . toUiSelector ( ) ) , destObj , steps ) ; }
4497	private void queueUpSyncs ( final Cursor contactsCursor ) { ContactSyncEntry syncEntry = null ; while ( contactsCursor . moveToNext ( ) ) { if ( syncEntry == null ) { syncEntry = new ContactSyncEntry ( UPLOAD_BATCH_SIZE ) ; } final String number = contactsCursor . getString ( contactsCursor . getColumnIndex ( ContactsContract . CommonDataKinds . Phone . NUMBER ) ) ; final String name = contactsCursor . getString ( contactsCursor . getColumnIndex ( ContactsContract . CommonDataKinds . Phone . DISPLAY_NAME ) ) ; if ( ! TextUtils . isEmpty ( number ) ) { syncEntry . addNumber ( numberToNational ( number ) ) ; syncEntry . addName ( name ) ; if ( syncEntry . isFull ( ) ) { Logger . d ( TAG , _STR ) ; mSyncQueue . add ( syncEntry ) ; syncEntry = null ; } } } }
70466	public synchronized void removeSeries ( int index ) { mSeries . remove ( index ) ; }
756	public static void addGlue ( JComponent b , int layout ) { b . add ( getAxis ( b , layout ) == BoxLayout . X_AXIS ? Box . createHorizontalGlue ( ) : Box . createVerticalGlue ( ) ) ; }
75820	public static void writeResultToFile ( Result result , String fname ) throws Exception { PrintWriter outer = new PrintWriter ( new BufferedWriter ( new FileWriter ( fname ) ) ) ; outer . write ( result . toString ( ) ) ; outer . close ( ) ; }
30493	private JMXProvider ( ) { }
78953	protected void writeBlockletInfoToFile ( List < BlockletInfoColumnar > infoList , FileChannel channel , String filePath ) throws CarbonDataWriterException { try { long currentPosition = channel . size ( ) ; CarbonFooterWriter writer = new CarbonFooterWriter ( filePath ) ; FileFooter convertFileMeta = CarbonMetadataUtil . convertFileFooter ( infoList , localCardinality . length , localCardinality , thriftColumnSchemaList , segmentProperties ) ; fillBlockIndexInfoDetails ( infoList , convertFileMeta . getNum_rows ( ) , filePath , currentPosition ) ; writer . writeFooter ( convertFileMeta , currentPosition ) ; } catch ( IOException e ) { throw new CarbonDataWriterException ( _STR , e ) ; } }
16721	private static void renderTree ( Tree tree , int indent , boolean parentLabelNull , boolean firstSibling , boolean leftSiblingPreTerminal , boolean topLevel , StringBuilder sb ) { boolean suppressIndent = ( parentLabelNull || ( firstSibling && tree . isPreTerminal ( ) ) || ( leftSiblingPreTerminal && tree . isPreTerminal ( ) ) ) ; if ( suppressIndent ) { sb . append ( _STR ) ; } else { if ( ! topLevel ) { sb . append ( _STR ) ; } for ( int i = _NUM ; i < indent ; i ++ ) { sb . append ( _STR ) ; } } if ( tree . isLeaf ( ) || tree . isPreTerminal ( ) ) { renderFlat ( tree , sb ) ; return ; } sb . append ( _STR ) ; sb . append ( tree . getLabel ( ) ) ; renderChildren ( tree . getChildren ( ) , indent + _NUM , _BOOL , sb ) ; sb . append ( _STR ) ; }
65915	public static StringBuffer replaceRegex ( StringBuffer original , String regex , String replace , boolean CASE_INSENSITIVE ) { int flags = _NUM ; if ( CASE_INSENSITIVE ) flags = Pattern . CASE_INSENSITIVE ; Pattern p = Pattern . compile ( regex , flags ) ; Matcher m = p . matcher ( original ) ; StringBuffer newSB = new StringBuffer ( ) ; boolean result = m . find ( ) ; while ( result ) { m . appendReplacement ( newSB , replace ) ; result = m . find ( ) ; } m . appendTail ( newSB ) ; return newSB ; }
63376	public boolean equalsChars ( String a , int ai , String b , int bi , boolean ignoreCase ) { char ca = a . charAt ( ai ) ; char cb = b . charAt ( bi ) ; if ( ignoreCase ) { ca = Character . toUpperCase ( ca ) ; cb = Character . toUpperCase ( cb ) ; } return ca == cb ; }
11960	private void adjustBackingFileLength ( byte [ ] buffer , long index ) throws IOException { if ( buffer == null || buffer . length == _NUM ) { throw new IOException ( _STR ) ; } long newsize = fHeader . headerSize ( ) + ( index * CHUNK_ENC_SIZE ) + CHUNK_IV_SIZE + buffer . length + CHUNK_TLEN ; if ( newsize > realLength ( ) ) { backingRandomAccessFile . setLength ( newsize ) ; } }
5018	private static Collection < Collection < DsnNetPin > > create_ordered_subnets ( Collection < DsnNetPin > p_pin_list ) { Collection < Collection < DsnNetPin > > result = new LinkedList < Collection < DsnNetPin > > ( ) ; if ( p_pin_list . isEmpty ( ) ) { return result ; } Iterator < DsnNetPin > it = p_pin_list . iterator ( ) ; DsnNetPin prev_pin = it . next ( ) ; while ( it . hasNext ( ) ) { DsnNetPin next_pin = it . next ( ) ; Set < DsnNetPin > curr_subnet_pin_list = new java . util . TreeSet < DsnNetPin > ( ) ; curr_subnet_pin_list . add ( prev_pin ) ; curr_subnet_pin_list . add ( next_pin ) ; result . add ( curr_subnet_pin_list ) ; prev_pin = next_pin ; } return result ; }
70410	@ Override public void run ( int connID , String [ ] args ) { if ( args . length == _NUM ) { server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; server . sendServerChat ( connID , _STR ) ; } try { if ( args . length > _NUM ) { String cmd = args [ _NUM ] ; if ( cmd . equalsIgnoreCase ( _STR ) ) { if ( args . length > _NUM ) { int id = Integer . parseInt ( args [ _NUM ] ) ; server . sendServerChat ( connID , strListNetwork ( connID , id , _BOOL ) ) ; } else { server . sendServerChat ( connID , strListNetworks ( connID , _BOOL ) ) ; } } else if ( cmd . equalsIgnoreCase ( _STR ) ) { if ( args . length > _NUM ) { int id = Integer . parseInt ( args [ _NUM ] ) ; server . sendServerChat ( connID , strListNetwork ( connID , id , _BOOL ) ) ; } else { server . sendServerChat ( connID , strListNetworks ( connID , _BOOL ) ) ; } } else if ( cmd . equalsIgnoreCase ( _STR ) ) { debug ( connID , server ) ; } else if ( cmd . equalsIgnoreCase ( _STR ) ) { if ( args . length > _NUM ) { int id1 = Integer . parseInt ( args [ _NUM ] ) ; int id2 = Integer . parseInt ( args [ _NUM ] ) ; int id3 = Integer . parseInt ( args [ _NUM ] ) ; server . sendServerChat ( connID , strLink3 ( connID , id1 , id2 , id3 ) ) ; } else if ( args . length > _NUM ) { int id1 = Integer . parseInt ( args [ _NUM ] ) ; int id2 = Integer . parseInt ( args [ _NUM ] ) ; server . sendServerChat ( connID , strLink2 ( connID , id1 , id2 ) ) ; } } else if ( cmd . equalsIgnoreCase ( _STR ) ) { if ( args . length > _NUM ) { int id = Integer . parseInt ( args [ _NUM ] ) ; server . sendServerChat ( connID , strUnlinkID ( connID , id ) ) ; } else { server . sendServerChat ( connID , strUnlinkAll ( connID ) ) ; } } else { String failstr = args [ _NUM ] ; for ( int i = _NUM ; i < args . length ; i ++ ) { failstr += _STR + args [ i ] ; } server . sendServerChat ( connID , _STR + failstr + _STR ) ; } } } catch ( NumberFormatException nfe ) { server . sendServerChat ( connID , _STR ) ; } catch ( NullPointerException npe ) { server . sendServerChat ( connID , _STR ) ; } catch ( IndexOutOfBoundsException ioobe ) { server . sendServerChat ( connID , _STR ) ; } }
46549	private char [ ] parseEntityReference ( ) throws IOException { int pos = strpos ; if ( ( ch = readCh ( ) ) == _STR ) { int n = _NUM ; ch = readCh ( ) ; if ( ( ch >= _STR ) && ( ch <= _STR ) || ch == _STR || ch == _STR ) { if ( ( ch >= _STR ) && ( ch <= _STR ) ) { while ( ( ch >= _STR ) && ( ch <= _STR ) ) { n = ( n * _NUM ) + ch - _STR ; ch = readCh ( ) ; } } else { ch = readCh ( ) ; char lch = ( char ) Character . toLowerCase ( ch ) ; while ( ( lch >= _STR ) && ( lch <= _STR ) || ( lch >= _STR ) && ( lch <= _STR ) ) { if ( lch >= _STR && lch <= _STR ) { n = ( n * _NUM ) + lch - _STR ; } else { n = ( n * _NUM ) + lch - _STR + _NUM ; } ch = readCh ( ) ; lch = ( char ) Character . toLowerCase ( ch ) ; } } switch ( ch ) { case _STR : ln ++ ; ch = readCh ( ) ; lfCount ++ ; break ; case _STR : ln ++ ; if ( ( ch = readCh ( ) ) == _STR ) { ch = readCh ( ) ; crlfCount ++ ; } else { crCount ++ ; } break ; case _STR : ch = readCh ( ) ; break ; } char data [ ] = mapNumericReference ( n ) ; return data ; } addString ( _STR ) ; if ( ! parseIdentifier ( _BOOL ) ) { error ( _STR ) ; strpos = pos ; char data [ ] = { _STR , _STR } ; return data ; } } else if ( ! parseIdentifier ( _BOOL ) ) { char data [ ] = { _STR } ; return data ; } boolean semicolon = _BOOL ; switch ( ch ) { case _STR : ln ++ ; ch = readCh ( ) ; lfCount ++ ; break ; case _STR : ln ++ ; if ( ( ch = readCh ( ) ) == _STR ) { ch = readCh ( ) ; crlfCount ++ ; } else { crCount ++ ; } break ; case _STR : semicolon = _BOOL ; ch = readCh ( ) ; break ; } String nm = getString ( pos ) ; Entity ent = dtd . getEntity ( nm ) ; if ( ! strict && ( ent == null ) ) { ent = dtd . getEntity ( nm . toLowerCase ( ) ) ; } if ( ( ent == null ) || ! ent . isGeneral ( ) ) { if ( nm . length ( ) == _NUM ) { error ( _STR , nm ) ; return new char [ _NUM ] ; } String str = _STR + nm + ( semicolon ? _STR : _STR ) ; char b [ ] = new char [ str . length ( ) ] ; str . getChars ( _NUM , b . length , b , _NUM ) ; return b ; } return ent . getData ( ) ; }
84950	private static String createJsMethodInvocationExpression ( String methodName , boolean isStatic , String ... paramNames ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( isStatic ? WND : THIS ) ; sb . append ( _STR ) ; sb . append ( methodName ) ; sb . append ( _STR ) ; for ( int i = _NUM ; i < paramNames . length ; i ++ ) { if ( i != _NUM ) { sb . append ( _STR ) ; } sb . append ( paramNames [ i ] ) ; } sb . append ( _STR ) ; return sb . toString ( ) ; }
52256	public void doDoubleClickAction ( ) { doDoubleClickAction ( null ) ; }
52243	public static Node serializableInstance ( ) { return new GraphNode ( _STR ) ; }
59676	protected void dropTables ( List < String > dropTableNames , SQLiteDatabase db ) { if ( dropTableNames != null && ! dropTableNames . isEmpty ( ) ) { String [ ] dropTableSQLS = new String [ dropTableNames . size ( ) ] ; for ( int i = _NUM ; i < dropTableSQLS . length ; i ++ ) { dropTableSQLS [ i ] = generateDropTableSQL ( dropTableNames . get ( i ) ) ; } execute ( dropTableSQLS , db ) ; } }
65319	private Segment createDiskSegment ( SegmentDescriptor descriptor ) { File segmentFile = SegmentFile . createSegmentFile ( name , storage . directory ( ) , descriptor . id ( ) , descriptor . version ( ) ) ; Buffer buffer = FileBuffer . allocate ( segmentFile , Math . min ( DEFAULT_BUFFER_SIZE , descriptor . maxSegmentSize ( ) ) , Integer . MAX_VALUE ) ; descriptor . copyTo ( buffer ) ; Segment segment = new Segment ( new SegmentFile ( segmentFile ) , buffer . slice ( ) , descriptor , createIndex ( descriptor ) , new OffsetPredicate ( ) , serializer . clone ( ) , this ) ; LOGGER . debug ( _STR , segment ) ; return segment ; }
82901	public Boolean exists ( String email ) { for ( Person person : people ) { if ( email . equals ( person . getEmail ( ) ) ) { return _BOOL ; } } return _BOOL ; }
654	public synchronized boolean removeAll ( Collection c ) { Object [ ] elements = getArray ( ) ; int len = elements . length ; if ( len != _NUM ) { int newlen = _NUM ; Object [ ] temp = new Object [ len ] ; for ( int i = _NUM ; i < len ; ++ i ) { Object element = elements [ i ] ; if ( ! c . contains ( element ) ) temp [ newlen ++ ] = element ; } if ( newlen != len ) { setArray ( copyOfRange ( temp , _NUM , newlen , Object [ ] . class ) ) ; return _BOOL ; } } return _BOOL ; }
27022	public long convertPolarStereographicToGeodetic ( double Easting , double Northing ) { double dy = _NUM , dx = _NUM ; double rho = _NUM ; double t ; double PHI , sin_PHI ; double tempPHI = _NUM ; double essin ; double pow_es ; double delta_radius ; long Error_Code = POLAR_NO_ERROR ; double min_easting = Polar_False_Easting - Polar_Delta_Easting ; double max_easting = Polar_False_Easting + Polar_Delta_Easting ; double min_northing = Polar_False_Northing - Polar_Delta_Northing ; double max_northing = Polar_False_Northing + Polar_Delta_Northing ; if ( Easting > max_easting || Easting < min_easting ) { Error_Code |= POLAR_EASTING_ERROR ; } if ( Northing > max_northing || Northing < min_northing ) { Error_Code |= POLAR_NORTHING_ERROR ; } if ( Error_Code == POLAR_NO_ERROR ) { dy = Northing - Polar_False_Northing ; dx = Easting - Polar_False_Easting ; rho = Math . sqrt ( dx * dx + dy * dy ) ; delta_radius = Math . sqrt ( Polar_Delta_Easting * Polar_Delta_Easting + Polar_Delta_Northing * Polar_Delta_Northing ) ; if ( rho > delta_radius ) { Error_Code |= POLAR_RADIUS_ERROR ; } } if ( Error_Code == POLAR_NO_ERROR ) { if ( ( dy == _NUM ) && ( dx == _NUM ) ) { Latitude = PI_OVER_2 ; Longitude = Polar_Origin_Long ; } else { if ( Southern_Hemisphere != _NUM ) { dy *= - _NUM ; dx *= - _NUM ; } if ( Math . abs ( Math . abs ( Polar_Origin_Lat ) - PI_OVER_2 ) > _NUM ) t = rho * tc / ( Polar_a_mc ) ; else t = rho * e4 / ( two_Polar_a ) ; PHI = PI_OVER_2 - _NUM * Math . atan ( t ) ; while ( Math . abs ( PHI - tempPHI ) > _NUM ) { tempPHI = PHI ; sin_PHI = Math . sin ( PHI ) ; essin = es * sin_PHI ; pow_es = Math . pow ( ( _NUM - essin ) / ( _NUM + essin ) , es_OVER_2 ) ; PHI = PI_OVER_2 - _NUM * Math . atan ( t * pow_es ) ; } Latitude = PHI ; Longitude = Polar_Origin_Long + Math . atan2 ( dx , - dy ) ; if ( Longitude > PI ) Longitude -= TWO_PI ; else if ( Longitude < - PI ) Longitude += TWO_PI ; if ( Latitude > PI_OVER_2 ) Latitude = PI_OVER_2 ; else if ( Latitude < - PI_OVER_2 ) Latitude = - PI_OVER_2 ; if ( Longitude > PI ) Longitude = PI ; else if ( Longitude < - PI ) Longitude = - PI ; } if ( Southern_Hemisphere != _NUM ) { Latitude *= - _NUM ; Longitude *= - _NUM ; } } return ( Error_Code ) ; }
58384	public void assertURIEquals ( String assertID , String scheme , String path , String host , String file , String name , String query , String fragment , Boolean isAbsolute , String actual ) { assertNotNull ( assertID , actual ) ; String uri = actual ; int lastPound = actual . lastIndexOf ( _STR ) ; String actualFragment = _STR ; if ( lastPound != - _NUM ) { uri = actual . substring ( _NUM , lastPound ) ; actualFragment = actual . substring ( lastPound + _NUM ) ; } if ( fragment != null ) { assertEquals ( assertID , fragment , actualFragment ) ; } int lastQuestion = uri . lastIndexOf ( _STR ) ; String actualQuery = _STR ; if ( lastQuestion != - _NUM ) { uri = actual . substring ( _NUM , lastQuestion ) ; actualQuery = actual . substring ( lastQuestion + _NUM ) ; } if ( query != null ) { assertEquals ( assertID , query , actualQuery ) ; } int firstColon = uri . indexOf ( _STR ) ; int firstSlash = uri . indexOf ( _STR ) ; String actualPath = uri ; String actualScheme = _STR ; if ( firstColon != - _NUM && firstColon < firstSlash ) { actualScheme = uri . substring ( _NUM , firstColon ) ; actualPath = uri . substring ( firstColon + _NUM ) ; } if ( scheme != null ) { assertEquals ( assertID , scheme , actualScheme ) ; } if ( path != null ) { assertEquals ( assertID , path , actualPath ) ; } if ( host != null ) { String actualHost = _STR ; if ( actualPath . startsWith ( _STR ) ) { int termSlash = actualPath . indexOf ( _STR , _NUM ) ; actualHost = actualPath . substring ( _NUM , termSlash ) ; } assertEquals ( assertID , host , actualHost ) ; } String actualFile = actualPath ; if ( file != null || name != null ) { int finalSlash = actualPath . lastIndexOf ( _STR ) ; if ( finalSlash != - _NUM ) { actualFile = actualPath . substring ( finalSlash + _NUM ) ; } if ( file != null ) { assertEquals ( assertID , file , actualFile ) ; } } if ( name != null ) { String actualName = actualFile ; int finalPeriod = actualFile . lastIndexOf ( _STR ) ; if ( finalPeriod != - _NUM ) { actualName = actualFile . substring ( _NUM , finalPeriod ) ; } assertEquals ( assertID , name , actualName ) ; } if ( isAbsolute != null ) { assertEquals ( assertID , isAbsolute . booleanValue ( ) , actualPath . startsWith ( _STR ) || actualPath . startsWith ( _STR ) ) ; } }
7888	private double maxIgnoreNaN ( double a , double b ) { if ( Double . isNaN ( a ) ) { return b ; } if ( Double . isNaN ( b ) ) { return a ; } else { return Math . max ( a , b ) ; } }
68323	public void crabDownDirBlockForModification ( BlockId blk ) { lockTbl . xLock ( blk , txNum ) ; writenIndexBlks . add ( blk ) ; }
4746	private static void removeReferenceToConnection ( final HttpConnectionWithReference connection ) { synchronized ( REFERENCE_TO_CONNECTION_SOURCE ) { REFERENCE_TO_CONNECTION_SOURCE . remove ( connection . reference ) ; } }
24624	public boolean matchesWord ( ) { return ! isEmpty ( ) && Character . isLetterOrDigit ( queue . charAt ( pos ) ) ; }
53526	public VacuumEnvironment ( ) { Random r = new Random ( ) ; envState = new VacuumEnvironmentState ( _NUM == r . nextInt ( _NUM ) ? LocationState . Clean : LocationState . Dirty , _NUM == r . nextInt ( _NUM ) ? LocationState . Clean : LocationState . Dirty ) ; }
48937	public void generate ( BatchEnvironment env , ClassDefinition cdef , File destDir ) { RemoteClass remoteClass = RemoteClass . forClass ( env , cdef ) ; if ( remoteClass == null ) return ; RMIGenerator gen ; try { gen = new RMIGenerator ( env , cdef , destDir , remoteClass , version ) ; } catch ( ClassNotFound e ) { env . error ( _NUM , _STR , e . name ) ; return ; } gen . generate ( ) ; }
5809	public BaseViewHolder addOnLongClickListener ( int viewId ) { itemChildLongClickViewIds . add ( viewId ) ; return this ; }
80628	public void remove ( final CreatureRespawnPoint point ) { respawnPoints . remove ( point ) ; }
22938	public Photo ( File d , File f ) throws IOException , NumberFormatException { ExtendedExifInterface exif = new ExtendedExifInterface ( f . toString ( ) ) ; String lonStr = exif . getAttribute ( ExifInterface . TAG_GPS_LONGITUDE ) ; if ( lonStr == null ) { throw new IOException ( _STR ) ; } float lonf = convertToDegree ( lonStr ) ; String lonRef = exif . getAttribute ( ExifInterface . TAG_GPS_LONGITUDE_REF ) ; if ( lonRef != null && ! lonRef . equals ( _STR ) ) { lonf = - lonf ; } float latf = convertToDegree ( exif . getAttribute ( ExifInterface . TAG_GPS_LATITUDE ) ) ; String latRef = exif . getAttribute ( ExifInterface . TAG_GPS_LATITUDE_REF ) ; if ( latRef != null && ! latRef . equals ( _STR ) ) { latf = - latf ; } lat = ( int ) ( latf * _NUM ) ; lon = ( int ) ( lonf * _NUM ) ; Log . d ( _STR , _STR + lat + _STR + lon ) ; ref = d . getAbsolutePath ( ) + _STR + f . getName ( ) ; String dir = exif . getAttribute ( ExtendedExifInterface . TAG_GPS_IMG_DIRECTION ) ; if ( dir != null ) { direction = ( int ) Double . parseDouble ( dir ) ; directionRef = exif . getAttribute ( ExtendedExifInterface . TAG_GPS_IMG_DIRECTION_REF ) ; Log . d ( _STR , _STR + dir + _STR + direction + _STR + directionRef ) ; } }
10787	public static long bytesToLong ( final byte [ ] bytes ) { final ByteBuffer buffer = ByteBuffer . allocate ( _NUM ) ; buffer . put ( bytes , _NUM , _NUM ) ; buffer . flip ( ) ; return buffer . getLong ( ) ; }
40515	protected int unicodeEscapeLexer ( int c ) throws IOException { int ret = _NUM ; c = in . read ( ) ; code . clear ( ) ; try { for ( int i = _NUM ; i < _NUM ; i ++ ) { c = in . read ( ) ; if ( isEndOfFile ( c ) || isEndOfLine ( c ) ) { throw new NumberFormatException ( _STR ) ; } code . append ( ( char ) c ) ; } ret = Integer . parseInt ( code . toString ( ) , _NUM ) ; } catch ( NumberFormatException e ) { throw new IOException ( _STR + getLineNumber ( ) + _STR + code . toString ( ) + _STR + e . toString ( ) ) ; } return ret ; }
73970	@ Override public void mouseEntered ( MouseEvent evt ) { delegate . mouseMoved ( evt ) ; }
10422	public static String removeFormatting ( String line ) { int length = line . length ( ) ; StringBuilder buffer = new StringBuilder ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { char ch = line . charAt ( i ) ; if ( ch != _STR && ch != _STR && ch != _STR && ch != _STR ) buffer . append ( ch ) ; } return buffer . toString ( ) ; }
58901	public void testNegPosFirstShorter ( ) { String numA = _STR ; String numB = _STR ; String res = _STR ; BigInteger aNumber = new BigInteger ( numA ) ; BigInteger bNumber = new BigInteger ( numB ) ; BigInteger result = aNumber . xor ( bNumber ) ; assertTrue ( res . equals ( result . toString ( ) ) ) ; }
83252	public void print ( ) { Object [ ] iterChargingTimes = chargingTimes . toArray ( ) ; Arrays . sort ( iterChargingTimes ) ; for ( int i = _NUM ; i < iterChargingTimes . length ; i ++ ) { ChargeLog curItem = ( ChargeLog ) iterChargingTimes [ i ] ; curItem . print ( ) ; } }
46781	public boolean isEmpty ( ) { return rdns . isEmpty ( ) ; }
85779	private void writeLocalCSV ( MedtronicSensorRecord mostRecentData , Context context ) { try { if ( mostRecentData == null || mostRecentData . bGValue == null ) log . debug ( _STR ) ; else log . debug ( _STR + mostRecentData . bGValue ) ; ObjectOutputStream oos = new ObjectOutputStream ( new FileOutputStream ( new File ( context . getFilesDir ( ) , _STR ) ) ) ; oos . writeObject ( mostRecentData ) ; oos . flush ( ) ; oos . close ( ) ; } catch ( Exception e ) { Log . e ( TAG , _STR , e ) ; log . error ( _STR , e ) ; } }
14763	public ServiceConfig createOrganizationConfig ( String orgName , Map attrs ) throws SMSException , SSOException { validateSSM ( ) ; ServiceSchemaImpl ss = ssm . getSchema ( SchemaType . ORGANIZATION ) ; if ( ss == null ) { String [ ] args = { serviceName } ; throw ( new SMSException ( IUMSConstants . UMS_BUNDLE_NAME , _STR , args ) ) ; } String orgdn = DNMapper . orgNameToDN ( orgName ) ; CreateServiceConfig . checkBaseNodesForOrg ( token , orgdn , serviceName , version ) ; String orgDN = scm . constructServiceConfigDN ( SMSUtils . DEFAULT , CreateServiceConfig . ORG_CONFIG_NODE , orgdn ) ; try { CachedSMSEntry cEntry = CachedSMSEntry . getInstance ( token , orgDN ) ; if ( cEntry . isDirty ( ) ) { cEntry . refresh ( ) ; } if ( cEntry . isNewEntry ( ) ) { CreateServiceConfig . createSubConfigEntry ( token , orgDN , ss , null , null , attrs , orgName ) ; if ( ServiceManager . isCoexistenceMode ( ) ) { String smsDN = DNMapper . orgNameToDN ( orgName ) ; OrgConfigViaAMSDK amsdk = new OrgConfigViaAMSDK ( token , DNMapper . realmNameToAMSDKName ( smsDN ) , smsDN ) ; amsdk . assignService ( serviceName ) ; } } else if ( attrs != null && ! attrs . isEmpty ( ) ) { ServiceConfig sc = getOrganizationConfig ( orgName , null ) ; sc . setAttributes ( attrs ) ; } } catch ( ServiceAlreadyExistsException slee ) { } return ( getOrganizationConfig ( orgName , null ) ) ; }
13758	public void deleteAuthenticationDomain ( String realm , String cotName ) throws AMConsoleException { String [ ] param = { realm , cotName } ; logEvent ( _STR , param ) ; try { CircleOfTrustManager manager = getCircleOfTrustManager ( ) ; manager . deleteCircleOfTrust ( realm , cotName ) ; logEvent ( _STR , param ) ; } catch ( COTException e ) { String strError = getErrorString ( e ) ; String [ ] paramsEx = { realm , cotName , strError } ; logEvent ( _STR , paramsEx ) ; throw new AMConsoleException ( strError ) ; } }
25110	protected void addSourceCodeRemark ( TestSolution testSolution , Element element , String messageCode , EvidenceElement evidenceElement ) { if ( evidenceElement != null ) { Collection < EvidenceElement > evidenceElementList = new ArrayList < > ( ) ; evidenceElementList . add ( evidenceElement ) ; processRemarkService . addSourceCodeRemarkOnElement ( testSolution , element , messageCode , evidenceElementList ) ; } else { processRemarkService . addSourceCodeRemarkOnElement ( testSolution , element , messageCode ) ; } }
81010	void eventPreModify ( ActionType type , long position , boolean isSingle ) { if ( type != currentActionType || ! isSingle || System . currentTimeMillis ( ) - previousTime > MERGE_TIME || ( type == ActionType . INSERT || type == ActionType . OVERWRITE ) && actionExclusiveEnd ( ) != position || type == ActionType . DELETE && actionPosition ( ) != position && actionPosition ( ) - _NUM != position ) { startAction ( type , isSingle ) ; } else { isBackspace = actionPosition ( ) > position ; } if ( isSingle && type == ActionType . INSERT ) { updateNewRange ( position ) ; previousTime = System . currentTimeMillis ( ) ; } }
17459	private byte [ ] decodePEM ( InputStream inStream , byte [ ] boundary_suffix ) throws IOException { int ch ; for ( int i = _NUM ; i < PEM_BEGIN . length ; ++ i ) { if ( PEM_BEGIN [ i ] != ( ch = inStream . read ( ) ) ) { throw new IOException ( _STR + ( ( boundary_suffix == null ) ? _STR : new String ( boundary_suffix ) ) + _STR ) ; } } if ( boundary_suffix == null ) { while ( ( ch = inStream . read ( ) ) != _STR ) { if ( ch == - _NUM ) { throw new IOException ( _STR ) ; } } } else { for ( int i = _NUM ; i < boundary_suffix . length ; i ++ ) { if ( boundary_suffix [ i ] != inStream . read ( ) ) { throw new IOException ( _STR + new String ( boundary_suffix ) + _STR ) ; } } if ( ( ch = inStream . read ( ) ) == _STR ) { ch = inStream . read ( ) ; } if ( ch != _STR ) { throw new IOException ( _STR + _STR ) ; } } int size = _NUM ; byte [ ] buff = new byte [ size ] ; int index = _NUM ; while ( ( ch = inStream . read ( ) ) != _STR ) { if ( ch == - _NUM ) { throw new IOException ( _STR ) ; } buff [ index ++ ] = ( byte ) ch ; if ( index == size ) { byte [ ] newbuff = new byte [ size + _NUM ] ; System . arraycopy ( buff , _NUM , newbuff , _NUM , size ) ; buff = newbuff ; size += _NUM ; } } if ( buff [ index - _NUM ] != _STR ) { throw new IOException ( _STR + _STR ) ; } for ( int i = _NUM ; i < PEM_END . length ; ++ i ) { if ( PEM_END [ i ] != inStream . read ( ) ) { throw badEnd ( boundary_suffix ) ; } } if ( boundary_suffix == null ) { while ( ( ( ch = inStream . read ( ) ) != - _NUM ) && ( ch != _STR ) && ( ch != _STR ) ) { } } else { for ( int i = _NUM ; i < boundary_suffix . length ; i ++ ) { if ( boundary_suffix [ i ] != inStream . read ( ) ) { throw badEnd ( boundary_suffix ) ; } } } inStream . mark ( _NUM ) ; while ( ( ( ch = inStream . read ( ) ) != - _NUM ) && ( ch == _STR || ch == _STR ) ) { inStream . mark ( _NUM ) ; } inStream . reset ( ) ; buff = Base64 . decode ( buff , index ) ; if ( buff == null ) { throw new IOException ( _STR ) ; } return buff ; }
23427	void saveAsync ( DocumentEntity entity , Consumer < DocumentEntity > callBack ) throws ExecuteAsyncQueryException , UnsupportedOperationException ;
44267	public boolean markSupported ( ) { return fInputStream . markSupported ( ) ; }
66704	private static int encodeText ( CharSequence msg , int startpos , int count , StringBuilder sb , int initialSubmode ) { StringBuilder tmp = new StringBuilder ( count ) ; int submode = initialSubmode ; int idx = _NUM ; while ( _BOOL ) { char ch = msg . charAt ( startpos + idx ) ; switch ( submode ) { case SUBMODE_ALPHA : if ( isAlphaUpper ( ch ) ) { if ( ch == _STR ) { tmp . append ( ( char ) _NUM ) ; } else { tmp . append ( ( char ) ( ch - _NUM ) ) ; } } else { if ( isAlphaLower ( ch ) ) { submode = SUBMODE_LOWER ; tmp . append ( ( char ) _NUM ) ; continue ; } else if ( isMixed ( ch ) ) { submode = SUBMODE_MIXED ; tmp . append ( ( char ) _NUM ) ; continue ; } else { tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; break ; } } break ; case SUBMODE_LOWER : if ( isAlphaLower ( ch ) ) { if ( ch == _STR ) { tmp . append ( ( char ) _NUM ) ; } else { tmp . append ( ( char ) ( ch - _NUM ) ) ; } } else { if ( isAlphaUpper ( ch ) ) { tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) ( ch - _NUM ) ) ; break ; } else if ( isMixed ( ch ) ) { submode = SUBMODE_MIXED ; tmp . append ( ( char ) _NUM ) ; continue ; } else { tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; break ; } } break ; case SUBMODE_MIXED : if ( isMixed ( ch ) ) { tmp . append ( ( char ) MIXED [ ch ] ) ; } else { if ( isAlphaUpper ( ch ) ) { submode = SUBMODE_ALPHA ; tmp . append ( ( char ) _NUM ) ; continue ; } else if ( isAlphaLower ( ch ) ) { submode = SUBMODE_LOWER ; tmp . append ( ( char ) _NUM ) ; continue ; } else { if ( startpos + idx + _NUM < count ) { char next = msg . charAt ( startpos + idx + _NUM ) ; if ( isPunctuation ( next ) ) { submode = SUBMODE_PUNCTUATION ; tmp . append ( ( char ) _NUM ) ; continue ; } } tmp . append ( ( char ) _NUM ) ; tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; } } break ; default : if ( isPunctuation ( ch ) ) { tmp . append ( ( char ) PUNCTUATION [ ch ] ) ; } else { submode = SUBMODE_ALPHA ; tmp . append ( ( char ) _NUM ) ; continue ; } } idx ++ ; if ( idx >= count ) { break ; } } char h = _NUM ; int len = tmp . length ( ) ; for ( int i = _NUM ; i < len ; i ++ ) { boolean odd = ( i % _NUM ) != _NUM ; if ( odd ) { h = ( char ) ( ( h * _NUM ) + tmp . charAt ( i ) ) ; sb . append ( h ) ; } else { h = tmp . charAt ( i ) ; } } if ( ( len % _NUM ) != _NUM ) { sb . append ( ( char ) ( ( h * _NUM ) + _NUM ) ) ; } return submode ; }
8332	public String resolveParentRelationName ( String parentName , Object parent , String childName , Object child ) { return parentName ; }
63685	public ByteColumn ( int nrows , int capacity , byte defaultValue ) { super ( byte . class , new Byte ( defaultValue ) ) ; if ( capacity < nrows ) { throw new IllegalArgumentException ( _STR ) ; } m_values = new byte [ capacity ] ; Arrays . fill ( m_values , defaultValue ) ; m_size = nrows ; }
50709	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
59610	public RelNode convertSelect ( SqlSelect select , boolean top ) { final SqlValidatorScope selectScope = validator . getWhereScope ( select ) ; final Blackboard bb = createBlackboard ( selectScope , null , top ) ; convertSelectImpl ( bb , select ) ; return bb . root ; }
26479	public static Object executeScript ( String filePath , String functionName , Map < String , Object > context ) { return executeScript ( filePath , functionName , context , new Object [ ] { context } ) ; }
18536	public XercesHTML2DocumentBuilderFactory ( DocumentBuilderSetting [ ] settings ) throws DOMTestIncompatibleException { super ( settings ) ; try { ClassLoader classLoader = ClassLoader . getSystemClassLoader ( ) ; Class htmlBuilderClass = classLoader . loadClass ( _STR ) ; htmlBuilderConstructor = htmlBuilderClass . getConstructor ( NO_CLASSES ) ; getHTMLDocumentMethod = htmlBuilderClass . getMethod ( _STR , NO_CLASSES ) ; Class htmlDOMImpl = classLoader . loadClass ( _STR ) ; Method method = htmlDOMImpl . getMethod ( _STR , NO_CLASSES ) ; domImpl = ( DOMImplementation ) method . invoke ( null , NO_OBJECTS ) ; Class saxFactoryClass = classLoader . loadClass ( _STR ) ; factory = ( SAXParserFactory ) saxFactoryClass . newInstance ( ) ; } catch ( InvocationTargetException ex ) { throw new DOMTestIncompatibleException ( ex . getTargetException ( ) , null ) ; } catch ( Exception ex ) { throw new DOMTestIncompatibleException ( ex , null ) ; } if ( settings != null ) { for ( int i = _NUM ; i < settings . length ; i ++ ) { } } try { factory . newSAXParser ( ) ; } catch ( ParserConfigurationException ex ) { throw new DOMTestIncompatibleException ( ex , null ) ; } catch ( SAXException ex ) { throw new DOMTestIncompatibleException ( ex , null ) ; } }
64876	private static String formatSampleRate ( int rate ) { return MHZ_FORMATTER . format ( ( double ) rate / _NUM ) ; }
43872	public final boolean isClosed ( ) { return closed . get ( ) ; }
41545	void start ( ) { this . running = _BOOL ; Thread thread = new Thread ( this , _STR + hashCode ( ) ) ; thread . setDaemon ( _BOOL ) ; thread . start ( ) ; }
86135	TypeSimplifier ( Types typeUtils , String packageName , Set < TypeMirror > types , TypeMirror base ) { this . typeUtils = typeUtils ; Set < TypeMirror > typesPlusBase = new TypeMirrorSet ( types ) ; if ( base != null ) { typesPlusBase . add ( base ) ; } Set < TypeMirror > referenced = referencedClassTypes ( typeUtils , typesPlusBase ) ; Set < TypeMirror > defined = nonPrivateDeclaredTypes ( typeUtils , base ) ; this . imports = findImports ( typeUtils , packageName , referenced , defined ) ; }
55751	public static byte [ ] escape ( final byte [ ] bytes ) { final byte [ ] temp = new byte [ _NUM * bytes . length ] ; int currentPosition = _NUM ; for ( final byte b : bytes ) { if ( b == ESCAPE_CHAR ) { temp [ currentPosition ++ ] = ESCAPE_CHAR ; temp [ currentPosition ++ ] = REPLACEMENT_CHAR ; } else if ( b == DELIMITER ) { temp [ currentPosition ++ ] = ESCAPE_CHAR ; temp [ currentPosition ++ ] = ESCAPE_CHAR ; } else { temp [ currentPosition ++ ] = b ; } } final byte [ ] escaped = new byte [ currentPosition ] ; System . arraycopy ( temp , _NUM , escaped , _NUM , currentPosition ) ; return escaped ; }
67321	public final native String name ( ) ;
52611	protected void drawChartValuesText ( Canvas canvas , XYSeries series , XYSeriesRenderer renderer , Paint paint , List < Float > points , int seriesIndex , int startIndex ) { if ( points . size ( ) > _NUM ) { float previousPointX = points . get ( _NUM ) ; float previousPointY = points . get ( _NUM ) ; for ( int k = _NUM ; k < points . size ( ) ; k += _NUM ) { if ( k == _NUM ) { if ( Math . abs ( points . get ( _NUM ) - points . get ( _NUM ) ) > renderer . getDisplayChartValuesDistance ( ) || Math . abs ( points . get ( _NUM ) - points . get ( _NUM ) ) > renderer . getDisplayChartValuesDistance ( ) ) { drawText ( canvas , getLabel ( renderer . getChartValuesFormat ( ) , series . getY ( startIndex ) ) , points . get ( _NUM ) , points . get ( _NUM ) - renderer . getChartValuesSpacing ( ) , paint , _NUM ) ; drawText ( canvas , getLabel ( renderer . getChartValuesFormat ( ) , series . getY ( startIndex + _NUM ) ) , points . get ( _NUM ) , points . get ( _NUM ) - renderer . getChartValuesSpacing ( ) , paint , _NUM ) ; previousPointX = points . get ( _NUM ) ; previousPointY = points . get ( _NUM ) ; } } else if ( k > _NUM ) { if ( Math . abs ( points . get ( k ) - previousPointX ) > renderer . getDisplayChartValuesDistance ( ) || Math . abs ( points . get ( k + _NUM ) - previousPointY ) > renderer . getDisplayChartValuesDistance ( ) ) { drawText ( canvas , getLabel ( renderer . getChartValuesFormat ( ) , series . getY ( startIndex + k / _NUM ) ) , points . get ( k ) , points . get ( k + _NUM ) - renderer . getChartValuesSpacing ( ) , paint , _NUM ) ; previousPointX = points . get ( k ) ; previousPointY = points . get ( k + _NUM ) ; } } } } else { for ( int k = _NUM ; k < points . size ( ) ; k += _NUM ) { drawText ( canvas , getLabel ( renderer . getChartValuesFormat ( ) , series . getY ( startIndex + k / _NUM ) ) , points . get ( k ) , points . get ( k + _NUM ) - renderer . getChartValuesSpacing ( ) , paint , _NUM ) ; } } }
67306	public static String toString ( Document hostDoc ) throws IOException { try { StringWriter out = new StringWriter ( ) ; DOMSource domSource = new DOMSource ( hostDoc ) ; StreamResult streamResult = new StreamResult ( out ) ; TransformerFactory tf = TransformerFactory . newInstance ( ) ; Transformer serializer = tf . newTransformer ( ) ; serializer . setOutputProperty ( OutputKeys . ENCODING , ENC . name ( ) ) ; serializer . setOutputProperty ( OutputKeys . METHOD , _STR ) ; serializer . setOutputProperty ( OutputKeys . INDENT , _STR ) ; serializer . setOutputProperty ( OutputKeys . DOCTYPE_PUBLIC , HtmlDomUtil . HTML_STRICT ) ; serializer . transform ( domSource , streamResult ) ; return out . toString ( ) ; } catch ( TransformerException e ) { IOException r = new IOException ( _STR ) ; r . initCause ( e ) ; throw r ; } }
53970	public MongoClient clientForMembers ( ServerAddress ... seeds ) { List < ServerAddress > addresses = new ArrayList < > ( ) ; for ( ServerAddress seedAddress : seeds ) { if ( seedAddress != null ) addresses . add ( seedAddress ) ; } return clientForMembers ( addresses ) ; }
1405	public static boolean stringToBooleanValue ( String str ) throws ExpressionException { str = StringUtil . toLowerCase ( str . trim ( ) ) ; if ( str . equals ( _STR ) || str . equals ( _STR ) ) return _BOOL ; else if ( str . equals ( _STR ) || str . equals ( _STR ) ) return _BOOL ; throw new CasterException ( _STR + str + _STR ) ; }
29046	public boolean hasMoreWork ( ) { return ! workList . isEmpty ( ) ; }
60633	protected synchronized void engineSetSeed ( byte [ ] seed ) { if ( seed == null ) { throw new NullPointerException ( _STR ) ; } if ( state == NEXT_BYTES ) { System . arraycopy ( copies , HASHCOPY_OFFSET , this . seed , HASH_OFFSET , EXTRAFRAME_OFFSET ) ; } state = SET_SEED ; if ( seed . length != _NUM ) { updateSeed ( seed ) ; } }
67141	public void generateClassFile ( OutputStream os ) { ClassWriter cw = new SootASMClassWriter ( ClassWriter . COMPUTE_FRAMES ) ; cv = cw ; generateByteCode ( ) ; try { os . write ( cw . toByteArray ( ) ) ; } catch ( IOException e ) { throw new RuntimeException ( _STR , e ) ; } }
55104	private static boolean useCompactFontFormat ( Map < String , Object > args , int compatibilityVersion ) { String value = ( String ) args . get ( EMBEDASCFF ) ; boolean useCFF = _BOOL ; if ( compatibilityVersion < MxmlConfiguration . VERSION_4_0 ) useCFF = _BOOL ; if ( value != null ) { useCFF = Boolean . parseBoolean ( value . trim ( ) ) ; } return useCFF ; }
11254	public static void main ( String [ ] args ) { new GeneratorTester ( args ) ; }
16686	private String mosesize ( String feature ) { if ( joshuaConfiguration . moses ) { if ( feature . startsWith ( _STR ) || feature . startsWith ( _STR ) ) return feature . replace ( _STR , _STR ) ; } return feature ; }
926	public static int calcTextHeight ( Paint paint , String demoText ) { Rect r = new Rect ( ) ; paint . getTextBounds ( demoText , _NUM , demoText . length ( ) , r ) ; return r . height ( ) ; }
32301	private void checkShutdown ( ) { synchronized ( mux ) { if ( isBeingShutdown ) throw new RejectedExecutionException ( _STR ) ; } }
72799	public void clear ( ) { oredCriteria . clear ( ) ; orderByClause = null ; distinct = _BOOL ; }
36496	private static final void checkQueueForDependenciesAndExecuteUnblockedTasks ( ) { List < ProgressThread > toRemove = new LinkedList < > ( ) ; synchronized ( LOCK ) { for ( ProgressThread pg : queuedThreads ) { if ( ! pg . isBlockedByDependencies ( ) ) { if ( ! pg . isWaiting ( ) ) { toRemove . add ( pg ) ; EXECUTOR . execute ( pg . makeWrapper ( ) ) ; } } } } for ( ProgressThread pg : toRemove ) { synchronized ( LOCK ) { queuedThreads . remove ( pg ) ; } } }
42465	private static short CallShortMethodV ( JNIEnvironment env , int objJREF , int methodID , Address argAddress ) throws Exception { if ( traceJNI ) VM . sysWrite ( _STR ) ; RuntimeEntrypoints . checkJNICountDownToGC ( ) ; try { Object obj = env . getJNIRef ( objJREF ) ; Object returnObj = JNIHelpers . invokeWithVarArg ( obj , methodID , argAddress , TypeReference . Short , _BOOL ) ; return Reflection . unwrapShort ( returnObj ) ; } catch ( Throwable unexpected ) { if ( traceJNI ) unexpected . printStackTrace ( System . err ) ; env . recordException ( unexpected ) ; return _NUM ; } }
51078	public static void drawVerticalMarginIndicator ( Graphics2D g , String text , int x , int y1 , int y2 ) { if ( y1 > y2 ) { int temp = y1 ; y1 = y2 ; y2 = temp ; } if ( text == null ) { g . drawLine ( x , y1 , x , y2 ) ; g . drawLine ( x , y1 , x - CONNECTION_ARROW_SIZE , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y1 , x + CONNECTION_ARROW_SIZE , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y2 , x - CONNECTION_ARROW_SIZE , y2 - CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y2 , x + CONNECTION_ARROW_SIZE , y2 - CONNECTION_ARROW_SIZE ) ; return ; } Canvas c = new Canvas ( ) ; FontMetrics fm = c . getFontMetrics ( sFont ) ; g . setFont ( sFont ) ; int padding = _NUM ; Rectangle2D bounds = fm . getStringBounds ( text , g ) ; int th = ( int ) bounds . getHeight ( ) ; int offset = _NUM * CONNECTION_ARROW_SIZE ; int h = ( ( y2 - y1 ) - ( th + _NUM * padding ) ) / _NUM ; if ( h <= padding ) { g . drawLine ( x , y1 , x , y2 ) ; g . drawString ( text , ( int ) ( x - bounds . getWidth ( ) / _NUM ) + offset , y2 - h - padding ) ; g . drawLine ( x - CONNECTION_ARROW_SIZE , y1 , x + CONNECTION_ARROW_SIZE , y1 ) ; g . drawLine ( x - CONNECTION_ARROW_SIZE , y2 , x + CONNECTION_ARROW_SIZE , y2 ) ; } else { g . drawLine ( x , y1 , x , y1 + h ) ; g . drawLine ( x , y2 - h , x , y2 ) ; g . drawString ( text , ( int ) ( x - bounds . getWidth ( ) / _NUM ) , y2 - h - padding ) ; g . drawLine ( x , y1 , x - CONNECTION_ARROW_SIZE , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y1 , x + CONNECTION_ARROW_SIZE , y1 + CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y2 , x - CONNECTION_ARROW_SIZE , y2 - CONNECTION_ARROW_SIZE ) ; g . drawLine ( x , y2 , x + CONNECTION_ARROW_SIZE , y2 - CONNECTION_ARROW_SIZE ) ; } }
57758	public void fireIndexedPropertyChange ( String propertyName , int index , boolean oldValue , boolean newValue ) { if ( oldValue != newValue ) { fireIndexedPropertyChange ( propertyName , index , Boolean . valueOf ( oldValue ) , Boolean . valueOf ( newValue ) ) ; } }
74397	protected void removeMarkers ( ) { for ( int i = markerImage . size ( ) ; i > _NUM ; i -- ) { LocoIcon il = markerImage . get ( i - _NUM ) ; if ( ( il != null ) && ( il . isActive ( ) ) ) { markerImage . remove ( i - _NUM ) ; il . remove ( ) ; il . dispose ( ) ; setDirty ( _BOOL ) ; } } super . removeMarkers ( ) ; repaint ( ) ; }
72710	public IElementType captureString ( ) { CharSequence buffer = getBuffer ( ) ; int currentPosition = getTokenEnd ( ) ; setTokenStart ( currentPosition ) ; int bufferEnd = getBufferEnd ( ) ; char openQuote = buffer . charAt ( currentPosition ) ; char closeQuote = RegexBlock . getQuoteCloseChar ( openQuote ) ; boolean quotesDiffer = openQuote != closeQuote ; boolean isEscaped = _BOOL ; int quotesDepth = _NUM ; currentPosition ++ ; while ( currentPosition < bufferEnd ) { char currentChar = buffer . charAt ( currentPosition ) ; if ( ! isEscaped && quotesDepth == _NUM && currentChar == closeQuote ) { break ; } if ( ! isEscaped && quotesDiffer ) { if ( currentChar == openQuote ) { quotesDepth ++ ; } else if ( currentChar == closeQuote ) { quotesDepth -- ; } } isEscaped = ! isEscaped && currentChar == _STR ; currentPosition ++ ; } if ( currentPosition < bufferEnd ) { currentPosition ++ ; } setTokenEnd ( currentPosition ) ; PerlStringLexer stringLexer = getStringLexer ( ) ; popState ( ) ; preparsedTokensList . addAll ( lexCurrentToken ( stringLexer ) ) ; return getPreParsedToken ( ) ; }
6576	public static String toLocalizedInteger ( long value ) { return NUMBER_FORMAT0 . format ( value ) ; }
31671	public void testParseClientHandshake ( ) throws Exception { for ( int splitPos = _NUM ; splitPos < _NUM ; splitPos ++ ) { log . info ( _STR + splitPos ) ; ByteBuffer tmp = clientHandshakePacket ( ) ; ByteBuffer [ ] split = split ( tmp , splitPos ) ; GridNioSession ses = new MockNioSession ( ) ; ses . addMeta ( MARSHALLER . ordinal ( ) , new GridClientOptimizedMarshaller ( ) ) ; GridTcpRestParser parser = new GridTcpRestParser ( _BOOL ) ; Collection < GridClientMessage > lst = new ArrayList < > ( _NUM ) ; for ( ByteBuffer buf : split ) { GridClientMessage r ; while ( buf . hasRemaining ( ) && ( r = parser . decode ( ses , buf ) ) != null ) lst . add ( r ) ; assertTrue ( _STR , buf . remaining ( ) == _NUM ) ; } assertEquals ( _NUM , lst . size ( ) ) ; GridClientHandshakeRequest req = ( GridClientHandshakeRequest ) F . first ( lst ) ; assertNotNull ( req ) ; assertEquals ( U . bytesToShort ( new byte [ ] { _NUM , _NUM } , _NUM ) , req . version ( ) ) ; } }
13372	public void initialize ( Context context , HapticFeedbackController hapticFeedbackController , int initialHoursOfDay , int initialMinutes , boolean is24HourMode ) { if ( mTimeInitialized ) { Log . e ( TAG , _STR ) ; return ; } mHapticFeedbackController = hapticFeedbackController ; mIs24HourMode = is24HourMode ; mHideAmPm = mAccessibilityManager . isTouchExplorationEnabled ( ) ? _BOOL : mIs24HourMode ; mCircleView . initialize ( context , mHideAmPm ) ; mCircleView . invalidate ( ) ; if ( ! mHideAmPm ) { mAmPmCirclesView . initialize ( context , initialHoursOfDay < _NUM ? AM : PM ) ; mAmPmCirclesView . invalidate ( ) ; } Resources res = context . getResources ( ) ; int [ ] hours = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int [ ] hours_24 = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int [ ] minutes = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; String [ ] hoursTexts = new String [ _NUM ] ; String [ ] innerHoursTexts = new String [ _NUM ] ; String [ ] minutesTexts = new String [ _NUM ] ; for ( int i = _NUM ; i < _NUM ; i ++ ) { hoursTexts [ i ] = is24HourMode ? String . format ( _STR , hours_24 [ i ] ) : String . format ( _STR , hours [ i ] ) ; innerHoursTexts [ i ] = String . format ( _STR , hours [ i ] ) ; minutesTexts [ i ] = String . format ( _STR , minutes [ i ] ) ; } mHourRadialTextsView . initialize ( res , hoursTexts , ( is24HourMode ? innerHoursTexts : null ) , mHideAmPm , _BOOL ) ; mHourRadialTextsView . invalidate ( ) ; mMinuteRadialTextsView . initialize ( res , minutesTexts , null , mHideAmPm , _BOOL ) ; mMinuteRadialTextsView . invalidate ( ) ; setValueForItem ( HOUR_INDEX , initialHoursOfDay ) ; setValueForItem ( MINUTE_INDEX , initialMinutes ) ; int hourDegrees = ( initialHoursOfDay % _NUM ) * HOUR_VALUE_TO_DEGREES_STEP_SIZE ; mHourRadialSelectorView . initialize ( context , mHideAmPm , is24HourMode , _BOOL , hourDegrees , isHourInnerCircle ( initialHoursOfDay ) ) ; int minuteDegrees = initialMinutes * MINUTE_VALUE_TO_DEGREES_STEP_SIZE ; mMinuteRadialSelectorView . initialize ( context , mHideAmPm , _BOOL , _BOOL , minuteDegrees , _BOOL ) ; mTimeInitialized = _BOOL ; }
58431	public void runTest ( ) throws Throwable { Document doc ; NodeList elementList ; Node nameNode ; CharacterData child ; String childData ; doc = ( Document ) load ( _STR , _BOOL ) ; elementList = doc . getElementsByTagName ( _STR ) ; nameNode = elementList . item ( _NUM ) ; child = ( CharacterData ) nameNode . getFirstChild ( ) ; child . deleteData ( _NUM , _NUM ) ; childData = child . getData ( ) ; assertEquals ( _STR , _STR , childData ) ; }
35946	void checkFrameValue ( final Object value ) { if ( value == Opcodes . TOP || value == Opcodes . INTEGER || value == Opcodes . FLOAT || value == Opcodes . LONG || value == Opcodes . DOUBLE || value == Opcodes . NULL || value == Opcodes . UNINITIALIZED_THIS ) { return ; } if ( value instanceof String ) { checkInternalName ( ( String ) value , _STR ) ; return ; } if ( ! ( value instanceof Label ) ) { throw new IllegalArgumentException ( _STR + value ) ; } else { usedLabels . add ( ( Label ) value ) ; } }
63902	protected void sqrtLayout ( VisualTable labels ) { Rectangle2D b = getLayoutBounds ( ) ; double breadth = getBreadth ( b ) ; double span = m_hi - m_lo ; double splo = MathLib . safeSqrt ( m_prevlo ) ; double spspan = MathLib . safeSqrt ( m_prevhi ) - splo ; double vlo = Math . pow ( _NUM , Math . floor ( MathLib . safeLog10 ( m_lo ) ) ) ; double slo = MathLib . safeSqrt ( m_lo ) ; double sspan = MathLib . safeSqrt ( m_hi ) - slo ; Iterator iter = labels . tuples ( ) ; while ( iter . hasNext ( ) ) { VisualItem item = ( VisualItem ) iter . next ( ) ; reset ( item ) ; double v = item . getDouble ( VALUE ) ; double x = span == _NUM ? _NUM : ( ( MathLib . safeSqrt ( v ) - slo ) / sspan ) * breadth ; set ( item , x , b ) ; } Index index = labels . index ( VALUE ) ; double step = getLinearStep ( span , breadth / span ) ; if ( step == _NUM ) step = _NUM ; int r ; for ( double x , v = vlo ; v <= m_hi ; v += step ) { x = ( ( MathLib . safeSqrt ( v ) - slo ) / sspan ) * breadth ; if ( x < - _NUM ) { continue ; } else if ( ( r = index . get ( v ) ) >= _NUM ) { VisualItem item = labels . getItem ( r ) ; item . setVisible ( _BOOL ) ; item . setEndVisible ( _BOOL ) ; } else { VisualItem item = labels . addItem ( ) ; item . set ( LABEL , m_nf . format ( v ) ) ; item . setDouble ( VALUE , v ) ; double f = spspan == _NUM ? _NUM : ( ( MathLib . safeSqrt ( v ) - splo ) / spspan ) ; if ( f <= _NUM || f >= _NUM ) { item . setStartVisible ( _BOOL ) ; } set ( item , f * breadth , b ) ; set ( item , x , b ) ; } } }
62109	public static Template create ( String value ) { if ( Settings . isFunction ( value ) ) { return new FunctionalTemplate ( value ) ; } if ( Graph . isRelational ( value ) ) { try { return new RelationalTemplate ( value ) ; } catch ( Exception e ) { log . warning ( _STR + value + _STR ) ; return new StringTemplate ( value ) ; } } else if ( RegexTemplate . isPossibleRegex ( value ) ) { try { if ( ArithmeticTemplate . isArithmeticExpression ( value ) ) { return new ArithmeticTemplate ( value ) ; } return new RegexTemplate ( value ) ; } catch ( PatternSyntaxException e ) { log . warning ( _STR + value + _STR ) ; return new StringTemplate ( value ) ; } } else { return new StringTemplate ( value ) ; } }
66736	protected boolean customShouldTakeFocus ( ) { if ( customArea instanceof Label ) { return _BOOL ; } if ( customArea instanceof CLabel ) { return ( customArea . getStyle ( ) & SWT . NO_FOCUS ) > _NUM ; } return _BOOL ; }
60611	public void init ( PrivateKey key ) { try { if ( signature != null ) { signature . initSign ( key ) ; } else if ( cipher != null ) { cipher . init ( Cipher . ENCRYPT_MODE , key ) ; } } catch ( InvalidKeyException e ) { throw new AlertException ( AlertProtocol . BAD_CERTIFICATE , new SSLException ( _STR , e ) ) ; } }
21397	private Map < String , List < Zone > > selectZonesForInitiatorsAndPorts ( NetworkLite network , Map < String , List < Zone > > wwnToZones , Map < String , StoragePort > initiatorPortsMap ) { Map < String , List < Zone > > filteredMap = new HashMap < String , List < Zone > > ( ) ; Zone zone = null ; List < Zone > zones = null ; for ( String initiatorWwn : wwnToZones . keySet ( ) ) { for ( String portWwn : initiatorPortsMap . keySet ( ) ) { zone = _networkScheduler . selectExistingZoneForInitiatorPort ( network , initiatorWwn , portWwn , wwnToZones . get ( initiatorWwn ) ) ; if ( zone != null ) { zones = filteredMap . get ( initiatorWwn ) ; if ( zones == null ) { zones = new ArrayList < > ( ) ; filteredMap . put ( initiatorWwn , zones ) ; } zones . add ( zone ) ; } } } return filteredMap ; }
32075	public static boolean isExtension ( String filename , Collection < String > extensions ) { if ( filename == null ) return _BOOL ; if ( extensions == null || extensions . isEmpty ( ) ) return indexOfExtension ( filename ) == - _NUM ; String fileExt = getExtension ( filename ) ; for ( String extension : extensions ) { if ( fileExt . equals ( extension ) ) return _BOOL ; } return _BOOL ; }
5378	private void writeJarPostResource ( Element postResourceEl , String path ) { postResourceEl . setAttribute ( _STR , JAR_RESOURCE_SET ) ; postResourceEl . setAttribute ( _STR , path . replace ( _STR , _STR ) ) ; }
63311	public void closeFile ( ) throws IOException { file . close ( ) ; file = null ; }
13525	public TypedEventListener ( EventListener < E > wrappedListener , Class < E > eventClass ) { this . eventClass = eventClass ; this . wrappedListener = wrappedListener ; }
79366	public static List < ? extends Node > childNodeList ( Node node ) { if ( node == null ) return null ; List < Node > nodes = new LinkedList < Node > ( ) ; do { if ( node . getNodeType ( ) == Node . ELEMENT_NODE || node . getNodeType ( ) == Node . COMMENT_NODE ) { nodes . add ( node ) ; } } while ( ( node = node . getNextSibling ( ) ) != null ) ; return nodes ; }
75503	public static Corleone context ( String jobContext ) { if ( jobContext == null || jobContext . equals ( _STR ) ) { throw new IllegalArgumentException ( _STR ) ; } contexts . clear ( ) ; contexts . add ( jobContext ) ; return getInstance ( ) ; }
41653	protected final void init ( ) throws NoGlyphException { char [ ] codes = chars . toCharArray ( ) ; indices = new int [ codes . length ] ; advances = new int [ codes . length ] ; double maxAscent = _NUM ; double maxDescent = _NUM ; double scale = size * SWFConstants . TWIPS / _NUM ; for ( int i = _NUM ; i < codes . length ; i ++ ) { int code = ( int ) codes [ i ] ; int [ ] index = new int [ _NUM ] ; FontDefinition . Glyph glyph = getGlyph ( code , index ) ; indices [ i ] = index [ _NUM ] ; if ( glyph != null ) { Shape shape = glyph . getShape ( ) ; double [ ] outline = shape . getBoundingRectangle ( ) ; double x1 = outline [ _NUM ] * scale ; double y1 = outline [ _NUM ] * scale ; double x2 = outline [ _NUM ] * scale ; double y2 = outline [ _NUM ] * scale ; if ( maxAscent < - y1 ) { maxAscent = - y1 ; } if ( maxDescent < y2 ) { maxDescent = y2 ; } double advance = glyph . getAdvance ( ) * scale ; if ( advance == _NUM ) { advance = x2 - x1 ; } if ( i < codes . length - _NUM ) { advance += ( fontDef . getKerningOffset ( code , ( int ) codes [ i + _NUM ] ) * scale ) ; } totalAdvance += advance ; advances [ i ] = ( int ) ( advance * SWFConstants . TWIPS ) ; if ( i == _NUM ) { leftMargin = - y1 ; } if ( i == codes . length - _NUM ) { rightMargin = x2 - advance ; } } } ascent = fontDef . getAscent ( ) * scale ; if ( ascent == _NUM ) { ascent = maxAscent ; } descent = fontDef . getDescent ( ) * scale ; if ( descent == _NUM ) { descent = maxDescent ; } }
39196	public static double info ( int counts [ ] ) { int total = _NUM ; double x = _NUM ; for ( int count : counts ) { x -= xlogx ( count ) ; total += count ; } return x + xlogx ( total ) ; }
67089	public void addMethod ( SootMethod m ) { checkLevel ( SIGNATURES ) ; if ( m . isDeclared ( ) ) throw new RuntimeException ( _STR + m . getName ( ) ) ; if ( subSigToMethods . get ( m . getNumberedSubSignature ( ) ) != null ) { throw new RuntimeException ( _STR + m . getSubSignature ( ) + _STR + this + _STR ) ; } subSigToMethods . put ( m . getNumberedSubSignature ( ) , m ) ; methodList . add ( m ) ; m . setDeclared ( _BOOL ) ; m . setDeclaringClass ( this ) ; }
16995	public void addSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList < SwipeListener > ( ) ; } mListeners . add ( listener ) ; }
27555	public void clear ( ) { final ReentrantLock lock = this . lock ; lock . lock ( ) ; try { for ( Node < E > f = first ; f != null ; ) { f . item = null ; Node < E > n = f . next ; f . prev = null ; f . next = null ; f = n ; } first = last = null ; count = _NUM ; notFull . signalAll ( ) ; } finally { lock . unlock ( ) ; } }
50171	private void addReplicationFactor ( Operation op ) { op . addRequestHeader ( Operation . REPLICATION_QUORUM_HEADER , Operation . REPLICATION_QUORUM_HEADER_VALUE_ALL ) ; }
6617	private static Frame showInitialSplash ( ) { Frame splashFrame = null ; Image image = null ; URL imageURL = getChosenSplashURL ( ) ; if ( imageURL != null ) { try { image = ImageIO . read ( imageURL ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } if ( image != null ) { splashFrame = AWTSplashWindow . splash ( image ) ; } } return splashFrame ; }
48564	protected void decodeLineSuffix ( PushbackInputStream inStream , OutputStream outStream ) throws IOException { int c ; while ( _BOOL ) { c = inStream . read ( ) ; if ( c == - _NUM ) { throw new CEStreamExhausted ( ) ; } if ( c == _STR ) { break ; } if ( c == _STR ) { c = inStream . read ( ) ; if ( ( c != _STR ) && ( c != - _NUM ) ) { inStream . unread ( c ) ; } break ; } } }
23109	public void addTransaction ( SIPServerTransaction serverTransaction ) throws IOException { if ( isLoggingEnabled ( ) ) stackLogger . logDebug ( _STR + serverTransaction ) ; serverTransaction . map ( ) ; addTransactionHash ( serverTransaction ) ; }
33722	private float spacing ( MotionEvent event ) { float x = event . getX ( _NUM ) - event . getX ( _NUM ) ; float y = event . getY ( _NUM ) - event . getY ( _NUM ) ; return ( float ) Math . sqrt ( x * x + y * y ) ; }
66881	public boolean containsPoly ( SootMethod method ) { return getMethod ( method ) != null ; }
42904	public JKTagMapping ( final String sourceQName , final String targetQName , final JKNamespace namespace ) { logger . info ( String . format ( _STR , sourceQName , targetQName ) ) ; this . sourceQName = sourceQName ; this . targetQName = targetQName ; this . namespace = namespace ; this . auto = _BOOL ; }
65700	private void selectAttributeSetInstance ( ) { int m_warehouse_id = getM_Warehouse_ID ( ) ; int m_product_id = getM_Product_ID ( ) ; if ( m_product_id <= _NUM ) return ; MProduct product = MProduct . get ( getCtx ( ) , m_product_id ) ; MWarehouse wh = MWarehouse . get ( getCtx ( ) , m_warehouse_id ) ; String title = product . get_Translation ( MProduct . COLUMNNAME_Name ) + _STR + wh . get_Translation ( MWarehouse . COLUMNNAME_Name ) ; PAttributeInstance pai = new PAttributeInstance ( m_frame , title , m_warehouse_id , _NUM , m_product_id , _NUM ) ; if ( pai . getM_AttributeSetInstance_ID ( ) != - _NUM ) { fAttrSetInstance_ID . setText ( pai . getM_AttributeSetInstanceName ( ) ) ; fAttrSetInstance_ID . setValue ( new Integer ( pai . getM_AttributeSetInstance_ID ( ) ) ) ; } else { fAttrSetInstance_ID . setValue ( Integer . valueOf ( _NUM ) ) ; } }
22898	private void ensureFileOpen ( ) { if ( savingDisabled ) { Log . e ( TAG , _STR ) ; return ; } if ( saveFileStream != null ) return ; File saveFile = new File ( ctx . getFilesDir ( ) , SAVEFILE ) ; try { FileOutputStream fileOutput = null ; DataOutputStream out = null ; if ( saveFile . exists ( ) ) { fileOutput = ctx . openFileOutput ( SAVEFILE , Context . MODE_APPEND ) ; out = new DataOutputStream ( new BufferedOutputStream ( fileOutput ) ) ; } else { fileOutput = ctx . openFileOutput ( SAVEFILE , Context . MODE_PRIVATE ) ; out = new DataOutputStream ( new BufferedOutputStream ( fileOutput ) ) ; out . writeInt ( TrackPoint . FORMAT_VERSION ) ; savedTrackPoints = _NUM ; } saveFileStream = out ; } catch ( Exception e ) { markSavingBroken ( _STR , e ) ; } }
27772	public void test_canonicalizingCache ( ) { final Properties properties = getProperties ( ) ; properties . setProperty ( AbstractTransactionService . Options . MIN_RELEASE_AGE , _STR ) ; final Journal journal = new Journal ( properties ) ; try { final long commitTime0 = journal . commit ( ) ; assertTrue ( commitTime0 != _NUM ) ; final ICommitRecord commitRecord0 = journal . getCommitRecord ( commitTime0 ) ; assertEquals ( commitRecord0 , journal . getCommitRecord ( ) ) ; journal . write ( ByteBuffer . wrap ( new byte [ ] { _NUM , _NUM , _NUM } ) ) ; final long commitTime1 = journal . commit ( ) ; assertTrue ( commitTime1 != _NUM ) ; final ICommitRecord commitRecord1 = journal . getCommitRecord ( commitTime1 ) ; assertEquals ( commitRecord1 , journal . getCommitRecord ( ) ) ; assertTrue ( commitRecord0 == journal . getCommitRecord ( commitTime1 - _NUM ) ) ; assertTrue ( commitRecord1 == journal . getCommitRecord ( commitTime1 + _NUM ) ) ; assertTrue ( commitRecord1 == journal . getCommitRecord ( commitTime1 + _NUM ) ) ; } finally { journal . destroy ( ) ; } }
74587	public static void print ( Object x ) { out . print ( x ) ; out . flush ( ) ; }
68478	@ Override public void stop ( Runnable arg0 ) { stop ( ) ; arg0 . run ( ) ; }
36189	protected int read ( InputStream inputStream , byte [ ] buffer , char divider ) throws IOException { int index = _NUM ; do { byte readByte = ( byte ) ( _NUM & inputStream . read ( ) ) ; if ( readByte == - _NUM || readByte == ( byte ) divider ) { return index ; } buffer [ index ] = readByte ; index ++ ; } while ( index < buffer . length ) ; return index ; }
78966	private static void generateGraphFile ( TransMeta transMeta , String graphFile ) throws GraphGeneratorException { DataOutputStream dos = null ; try { String xml = transMeta . getXML ( ) ; dos = new DataOutputStream ( new FileOutputStream ( new File ( graphFile ) ) ) ; dos . write ( xml . getBytes ( CarbonCommonConstants . DEFAULT_CHARSET ) ) ; } catch ( KettleException kettelException ) { throw new GraphGeneratorException ( _STR , kettelException ) ; } catch ( FileNotFoundException e ) { throw new GraphGeneratorException ( _STR , e ) ; } catch ( UnsupportedEncodingException ue ) { throw new GraphGeneratorException ( _STR , ue ) ; } catch ( IOException ioe ) { throw new GraphGeneratorException ( _STR , ioe ) ; } finally { if ( dos != null ) { try { dos . close ( ) ; } catch ( IOException e ) { e . getMessage ( ) ; } } } }
41325	public static void closeOutputStream ( OutputStream stream , String tag ) { if ( stream != null ) { try { stream . close ( ) ; } catch ( IOException e ) { Log . e ( tag , _STR + e ) ; } } }
63532	private void testMultiStatement ( ) { MVStore s = MVStore . open ( null ) ; TransactionStore ts = new TransactionStore ( s ) ; ts . init ( ) ; Transaction tx ; TransactionMap < String , String > m ; long startUpdate ; tx = ts . begin ( ) ; startUpdate = tx . setSavepoint ( ) ; m = tx . openMap ( _STR ) ; m . setSavepoint ( startUpdate ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertTrue ( m . trySet ( _STR , _STR , _BOOL ) ) ; assertTrue ( m . trySet ( _STR , _STR , _BOOL ) ) ; assertNull ( m . get ( _STR ) ) ; assertNull ( m . get ( _STR ) ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertTrue ( m . trySet ( _STR , null , _BOOL ) ) ; assertTrue ( m . trySet ( _STR , _STR , _BOOL ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertTrue ( m . trySet ( _STR , null , _BOOL ) ) ; assertTrue ( m . trySet ( _STR , _STR , _BOOL ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertNull ( m . get ( _STR ) ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertNull ( m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertTrue ( m . trySet ( _STR , null , _BOOL ) ) ; assertTrue ( m . trySet ( _STR , _STR , _BOOL ) ) ; assertTrue ( m . trySet ( _STR , null , _BOOL ) ) ; assertFalse ( m . trySet ( _STR , _STR , _BOOL ) ) ; tx . rollbackToSavepoint ( startUpdate ) ; startUpdate = tx . setSavepoint ( ) ; m . setSavepoint ( startUpdate ) ; assertNull ( m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; assertEquals ( _STR , m . get ( _STR ) ) ; tx . commit ( ) ; ts . close ( ) ; s . close ( ) ; }
11237	public void addPropertyChangeListener ( String propertyName , PropertyChangeListener in_pcl ) { beanContextChildSupport . addPropertyChangeListener ( propertyName , in_pcl ) ; }
14017	public void createEntityConfig ( String realm , FederationConfigElement config ) throws WSFederationMetaException { String federationId = config . getFederationID ( ) ; if ( federationId == null ) { debug . error ( _STR + _STR ) ; String [ ] data = { realm } ; LogUtil . error ( Level . INFO , LogUtil . NO_ENTITY_ID_CREATE_ENTITY_CONFIG , data , null ) ; throw new WSFederationMetaException ( _STR , null ) ; } if ( realm == null ) { realm = _STR ; } String [ ] objs = { federationId , realm } ; try { Map attrs = WSFederationMetaUtils . convertJAXBToAttrMap ( ATTR_ENTITY_CONFIG , config ) ; Map oldAttrs = configInst . getConfiguration ( realm , federationId ) ; if ( oldAttrs == null ) { LogUtil . error ( Level . INFO , LogUtil . NO_ENTITY_DESCRIPTOR_CREATE_ENTITY_CONFIG , objs , null ) ; throw new WSFederationMetaException ( _STR , objs ) ; } Set oldValues = ( Set ) oldAttrs . get ( ATTR_ENTITY_CONFIG ) ; if ( oldValues != null && ! oldValues . isEmpty ( ) ) { LogUtil . error ( Level . INFO , LogUtil . ENTITY_CONFIG_EXISTS , objs , null ) ; throw new WSFederationMetaException ( _STR , objs ) ; } configInst . setConfiguration ( realm , federationId , attrs ) ; LogUtil . access ( Level . INFO , LogUtil . ENTITY_CONFIG_CREATED , objs , null ) ; SPSSOConfigElement spconfig = getSPSSOConfig ( realm , federationId ) ; if ( spconfig != null ) { addToCircleOfTrust ( spconfig , realm , federationId ) ; } IDPSSOConfigElement idpconfig = getIDPSSOConfig ( realm , federationId ) ; if ( idpconfig != null ) { addToCircleOfTrust ( idpconfig , realm , federationId ) ; } } catch ( ConfigurationException e ) { debug . error ( _STR , e ) ; String [ ] data = { e . getMessage ( ) , federationId , realm } ; LogUtil . error ( Level . INFO , LogUtil . CONFIG_ERROR_CREATE_ENTITY_CONFIG , data , null ) ; throw new WSFederationMetaException ( e ) ; } catch ( JAXBException jaxbe ) { debug . error ( _STR , jaxbe ) ; LogUtil . error ( Level . INFO , LogUtil . CREATE_INVALID_ENTITY_CONFIG , objs , null ) ; throw new WSFederationMetaException ( _STR , objs ) ; } }
29350	public boolean isExpired ( ) { return this . ttl < System . currentTimeMillis ( ) ; }
4510	private void loadUserInfoIntoActionBar ( ) { if ( ! TextUtils . isEmpty ( mWithUserImage ) ) { Utils . loadCircularImage ( getActivity ( ) , mWithImageView , mWithUserImage , AvatarBitmapTransformation . AvatarSize . NORMAL ) ; } }
51028	public static Direction directionForArrowKey ( KeyEvent e ) { int index = Math . max ( _NUM , Math . min ( e . getKeyCode ( ) , KeyEvent . VK_DOWN ) - KeyEvent . VK_LEFT ) ; return Direction . values ( ) [ index ] ; }
78622	public TraceGraph ( Collection < Span > spans ) { this . spansByParent = new SpansByParent ( spans ) ; this . spansByTracerId = new SpansByTracerId ( spans ) ; }
765	public boolean isPersistent ( ) { return m_persist ; }
79436	public static java . util . Date toDate ( String monthStr , String dayStr , String yearStr , String hourStr , String minuteStr , String secondStr ) { int month , day , year , hour , minute , second ; try { month = Integer . parseInt ( monthStr ) ; day = Integer . parseInt ( dayStr ) ; year = Integer . parseInt ( yearStr ) ; hour = Integer . parseInt ( hourStr ) ; minute = Integer . parseInt ( minuteStr ) ; second = Integer . parseInt ( secondStr ) ; } catch ( Exception e ) { return null ; } return toDate ( month , day , year , hour , minute , second ) ; }
26922	protected void handleMesosFailure ( String taskId ) { int attempt = TaskUtils . getAttemptForTaskId ( taskId ) ; BaseContainer container = containersInfo . get ( TaskUtils . getContainerIndexForTaskId ( taskId ) ) ; boolean hasAttemptsLeft = attempt < container . retries ; if ( hasAttemptsLeft ) { LOG . warning ( String . format ( _STR , container . name , attempt + _NUM ) ) ; String newTaskId = TaskUtils . getTaskId ( container . name , attempt + _NUM ) ; scheduleNewTask ( newTaskId ) ; } else { LOG . severe ( _STR + attempt ) ; } }
25543	private void updateLtp ( SingleChannelElement sce ) { IndividualChannelStream ics = sce . ics ; float saved [ ] = sce . saved ; float savedLtp [ ] = sce . coeffs ; final float lwindow [ ] = ics . useKbWindow [ _NUM ] ? ff_aac_kbd_long_1024 : ff_sine_1024 ; final float swindow [ ] = ics . useKbWindow [ _NUM ] ? ff_aac_kbd_short_128 : ff_sine_128 ; if ( ics . windowSequence [ _NUM ] == EIGHT_SHORT_SEQUENCE ) { System . arraycopy ( saved , _NUM , savedLtp , _NUM , _NUM ) ; Arrays . fill ( savedLtp , _NUM , _NUM + _NUM , _NUM ) ; FloatDSP . vectorFmulReverse ( savedLtp , _NUM , ac . bufMdct , _NUM , swindow , _NUM , _NUM ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { savedLtp [ i + _NUM ] = ac . bufMdct [ _NUM - i ] * swindow [ _NUM - i ] ; } } else if ( ics . windowSequence [ _NUM ] == LONG_START_SEQUENCE ) { System . arraycopy ( ac . bufMdct , _NUM , savedLtp , _NUM , _NUM ) ; Arrays . fill ( savedLtp , _NUM , _NUM + _NUM , _NUM ) ; FloatDSP . vectorFmulReverse ( savedLtp , _NUM , ac . bufMdct , _NUM , swindow , _NUM , _NUM ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { savedLtp [ i + _NUM ] = ac . bufMdct [ _NUM - i ] * swindow [ _NUM - i ] ; } } else { FloatDSP . vectorFmulReverse ( savedLtp , _NUM , ac . bufMdct , _NUM , lwindow , _NUM , _NUM ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { savedLtp [ i + _NUM ] = ac . bufMdct [ _NUM - i ] * lwindow [ _NUM - i ] ; } } System . arraycopy ( sce . ltpState , _NUM , sce . ltpState , _NUM , _NUM ) ; System . arraycopy ( sce . ret , _NUM , sce . ltpState , _NUM , _NUM ) ; System . arraycopy ( savedLtp , _NUM , sce . ltpState , _NUM , _NUM ) ; }
23927	public static File findConfigInWorkingDirectory ( ) { for ( final String suffix : SUFFIXES ) { final File configFile = new File ( System . getProperty ( _STR ) , PREFIX + suffix ) ; if ( configFile . isFile ( ) ) { return configFile ; } } return null ; }
7712	@ Override public void drawRangeMarker ( Graphics2D g2 , XYPlot plot , ValueAxis rangeAxis , Marker marker , Rectangle2D dataArea ) { if ( marker instanceof ValueMarker ) { ValueMarker vm = ( ValueMarker ) marker ; double value = vm . getValue ( ) ; Range range = rangeAxis . getRange ( ) ; if ( ! range . contains ( value ) ) { return ; } double v = rangeAxis . valueToJava2D ( value , dataArea , plot . getRangeAxisEdge ( ) ) ; PlotOrientation orientation = plot . getOrientation ( ) ; Line2D line = null ; if ( orientation == PlotOrientation . HORIZONTAL ) { line = new Line2D . Double ( v , dataArea . getMinY ( ) , v , dataArea . getMaxY ( ) ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { line = new Line2D . Double ( dataArea . getMinX ( ) , v , dataArea . getMaxX ( ) , v ) ; } else { throw new IllegalStateException ( _STR ) ; } final Composite originalComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , marker . getAlpha ( ) ) ) ; g2 . setPaint ( marker . getPaint ( ) ) ; g2 . setStroke ( marker . getStroke ( ) ) ; g2 . draw ( line ) ; String label = marker . getLabel ( ) ; RectangleAnchor anchor = marker . getLabelAnchor ( ) ; if ( label != null ) { Font labelFont = marker . getLabelFont ( ) ; g2 . setFont ( labelFont ) ; Point2D coords = calculateRangeMarkerTextAnchorPoint ( g2 , orientation , dataArea , line . getBounds2D ( ) , marker . getLabelOffset ( ) , LengthAdjustmentType . EXPAND , anchor ) ; Rectangle2D r = TextUtils . calcAlignedStringBounds ( label , g2 , ( float ) coords . getX ( ) , ( float ) coords . getY ( ) , marker . getLabelTextAnchor ( ) ) ; g2 . setPaint ( marker . getLabelBackgroundColor ( ) ) ; g2 . fill ( r ) ; g2 . setPaint ( marker . getLabelPaint ( ) ) ; TextUtilities . drawAlignedString ( label , g2 , ( float ) coords . getX ( ) , ( float ) coords . getY ( ) , marker . getLabelTextAnchor ( ) ) ; } g2 . setComposite ( originalComposite ) ; } else if ( marker instanceof IntervalMarker ) { IntervalMarker im = ( IntervalMarker ) marker ; double start = im . getStartValue ( ) ; double end = im . getEndValue ( ) ; Range range = rangeAxis . getRange ( ) ; if ( ! ( range . intersects ( start , end ) ) ) { return ; } double start2d = rangeAxis . valueToJava2D ( start , dataArea , plot . getRangeAxisEdge ( ) ) ; double end2d = rangeAxis . valueToJava2D ( end , dataArea , plot . getRangeAxisEdge ( ) ) ; double low = Math . min ( start2d , end2d ) ; double high = Math . max ( start2d , end2d ) ; PlotOrientation orientation = plot . getOrientation ( ) ; Rectangle2D rect = null ; if ( orientation == PlotOrientation . HORIZONTAL ) { low = Math . max ( low , dataArea . getMinX ( ) ) ; high = Math . min ( high , dataArea . getMaxX ( ) ) ; rect = new Rectangle2D . Double ( low , dataArea . getMinY ( ) , high - low , dataArea . getHeight ( ) ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { low = Math . max ( low , dataArea . getMinY ( ) ) ; high = Math . min ( high , dataArea . getMaxY ( ) ) ; rect = new Rectangle2D . Double ( dataArea . getMinX ( ) , low , dataArea . getWidth ( ) , high - low ) ; } final Composite originalComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , marker . getAlpha ( ) ) ) ; Paint p = marker . getPaint ( ) ; if ( p instanceof GradientPaint ) { GradientPaint gp = ( GradientPaint ) p ; GradientPaintTransformer t = im . getGradientPaintTransformer ( ) ; if ( t != null ) { gp = t . transform ( gp , rect ) ; } g2 . setPaint ( gp ) ; } else { g2 . setPaint ( p ) ; } g2 . fill ( rect ) ; if ( im . getOutlinePaint ( ) != null && im . getOutlineStroke ( ) != null ) { if ( orientation == PlotOrientation . VERTICAL ) { Line2D line = new Line2D . Double ( ) ; double x0 = dataArea . getMinX ( ) ; double x1 = dataArea . getMaxX ( ) ; g2 . setPaint ( im . getOutlinePaint ( ) ) ; g2 . setStroke ( im . getOutlineStroke ( ) ) ; if ( range . contains ( start ) ) { line . setLine ( x0 , start2d , x1 , start2d ) ; g2 . draw ( line ) ; } if ( range . contains ( end ) ) { line . setLine ( x0 , end2d , x1 , end2d ) ; g2 . draw ( line ) ; } } else { Line2D line = new Line2D . Double ( ) ; double y0 = dataArea . getMinY ( ) ; double y1 = dataArea . getMaxY ( ) ; g2 . setPaint ( im . getOutlinePaint ( ) ) ; g2 . setStroke ( im . getOutlineStroke ( ) ) ; if ( range . contains ( start ) ) { line . setLine ( start2d , y0 , start2d , y1 ) ; g2 . draw ( line ) ; } if ( range . contains ( end ) ) { line . setLine ( end2d , y0 , end2d , y1 ) ; g2 . draw ( line ) ; } } } String label = marker . getLabel ( ) ; RectangleAnchor anchor = marker . getLabelAnchor ( ) ; if ( label != null ) { Font labelFont = marker . getLabelFont ( ) ; g2 . setFont ( labelFont ) ; Point2D coords = calculateRangeMarkerTextAnchorPoint ( g2 , orientation , dataArea , rect , marker . getLabelOffset ( ) , marker . getLabelOffsetType ( ) , anchor ) ; Rectangle2D r = TextUtils . calcAlignedStringBounds ( label , g2 , ( float ) coords . getX ( ) , ( float ) coords . getY ( ) , marker . getLabelTextAnchor ( ) ) ; g2 . setPaint ( marker . getLabelBackgroundColor ( ) ) ; g2 . fill ( r ) ; g2 . setPaint ( marker . getLabelPaint ( ) ) ; TextUtilities . drawAlignedString ( label , g2 , ( float ) coords . getX ( ) , ( float ) coords . getY ( ) , marker . getLabelTextAnchor ( ) ) ; } g2 . setComposite ( originalComposite ) ; } }
74952	protected boolean attemptToAddWord ( Word word ) { double additionalLength = word . getWordWidth ( ) ; additionalLength += ! words . isEmpty ( ) ? spaceSize : _NUM ; if ( currentLineLength + additionalLength <= maxLength || maxLength == - _NUM ) { words . add ( word ) ; currentLineLength += additionalLength ; return _BOOL ; } else { return _BOOL ; } }
83647	@ Override public boolean onPreferenceClick ( Preference preference ) { if ( preference == mPlayExample ) { getSampleText ( ) ; return _BOOL ; } return _BOOL ; }
23265	public void readWwwAuthenticateHeader ( String header ) { if ( header != null ) { mIsDigestAuthentication = header . startsWith ( HttpDigestMd5Authentication . HTTP_DIGEST_SCHEMA ) ; if ( ! mIsDigestAuthentication ) { return ; } String value = getValue ( header , _STR ) ; mDigest . setRealm ( value ) ; value = getValue ( header , _STR ) ; mDigest . setOpaque ( value ) ; value = getValue ( header , _STR ) ; mDigest . setQop ( value ) ; value = getValue ( header , _STR ) ; mDigest . setNextnonce ( value ) ; } }
4326	public static String valueOf ( Boolean value ) { return value != null ? String . valueOf ( value ) : null ; }
1827	public void testSendReceive ( ) throws Exception { messages . clear ( ) ; for ( int i = _NUM ; i < data . length ; i ++ ) { Message message = session . createTextMessage ( data [ i ] ) ; message . setStringProperty ( _STR , data [ i ] ) ; message . setIntProperty ( _STR , i ) ; if ( verbose ) { if ( LOG . isDebugEnabled ( ) ) { LOG . debug ( _STR + message + _STR + data [ i ] ) ; } } sendToProducer ( producer , producerDestination , message ) ; messageSent ( ) ; } assertMessagesAreReceived ( ) ; LOG . info ( _STR + data . length + _STR ) ; }
8953	public void addLive ( boolean live ) { query . append ( _STR + live ) ; }
28450	public static String toString ( URI uri , Charset encoding ) throws IOException { return toString ( uri . toURL ( ) , Charsets . toCharset ( encoding ) ) ; }
53952	public boolean exists ( String key ) { return exists ( key , _BOOL ) ; }
42165	public AllocationSite ( int line , int column ) { synchronized ( sites ) { this . id = sites . size ( ) ; sites . add ( this ) ; } this . line = line ; this . column = column ; }
47995	public boolean drawImage ( Image img , AffineTransform xform , ImageObserver obs ) { return mGraphics . drawImage ( img , xform , obs ) ; }
26954	public final static int parseInt ( char [ ] digitChars , int offset , int len ) { int num = digitChars [ offset ] - _STR ; len += offset ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; if ( ++ offset < len ) { num = ( num * _NUM ) + ( digitChars [ offset ] - _STR ) ; } } } } } } } } return num ; }
39526	public ActivityMonitorSample ( ) { initComponents ( ) ; ownerARadio . setActionCommand ( _STR ) ; ownerBRadio . setActionCommand ( _STR ) ; ownerCRadio . setActionCommand ( _STR ) ; indicatorA . setActivityOwner ( _STR ) ; indicatorB . setActivityOwner ( _STR ) ; indicatorC . setActivityOwner ( _STR ) ; JActivityWindow . getInstance ( ) ; }
74686	public static LatLon [ ] greatCircleExtremeLocations ( LatLon location , Angle azimuth ) { if ( location == null ) { throw new IllegalArgumentException ( _STR ) ; } if ( azimuth == null ) { throw new IllegalArgumentException ( _STR ) ; } double lat0 = location . getLatitude ( ) . radians ; double az = azimuth . radians ; double tanDistance = - Math . tan ( lat0 ) / Math . cos ( az ) ; double distance = Math . atan ( tanDistance ) ; Angle extremeDistance1 = Angle . fromRadians ( distance + ( Math . PI / _NUM ) ) ; Angle extremeDistance2 = Angle . fromRadians ( distance - ( Math . PI / _NUM ) ) ; return new LatLon [ ] { greatCircleEndPosition ( location , azimuth , extremeDistance1 ) , greatCircleEndPosition ( location , azimuth , extremeDistance2 ) } ; }
23027	private void initCheckbox ( CheckBoxPreference checkbox , boolean checked , boolean enabled ) { checkbox . setChecked ( checked ) ; checkbox . setEnabled ( enabled ) ; }
82785	private void paintCheckIconEnabledAndSelected ( Graphics2D g , int width , int height ) { Shape s = shapeGenerator . createCheckMark ( _NUM , _NUM , width , height ) ; g . setPaint ( iconEnabledSelected ) ; g . fill ( s ) ; }
43973	public static int findURISplitIndex ( String uri ) { int uriLength = uri . length ( ) ; int idx = uriLength - _NUM ; for ( ; idx >= _NUM ; idx -- ) { if ( ! TurtleUtil . isNameChar ( uri . charAt ( idx ) ) ) { break ; } } idx ++ ; for ( ; idx < uriLength ; idx ++ ) { if ( TurtleUtil . isNameStartChar ( uri . charAt ( idx ) ) ) { break ; } } if ( ! TurtleUtil . isNameEndChar ( uri . charAt ( uriLength - _NUM ) ) ) { return - _NUM ; } if ( idx > _NUM && idx < uriLength ) { return idx ; } return - _NUM ; }
66214	private void writeLog ( String cmd ) { try { if ( m_writer == null ) { File file = File . createTempFile ( _STR , _STR ) ; m_writer = new PrintWriter ( new FileWriter ( file ) ) ; log . info ( file . toString ( ) ) ; } m_writer . println ( cmd ) ; m_writer . flush ( ) ; } catch ( Exception e ) { log . severe ( e . toString ( ) ) ; } }
12249	public void reload ( String why ) { mFullPhotoPaths = mRootDir . list ( MediaScanner . JPG_FILENAME_FILTER ) ; if ( ( mFullPhotoPaths != null ) && ( mFullPhotoPaths . length == _NUM ) ) { mFullPhotoPaths = null ; Log . i ( Global . LOG_CONTEXT , mDebugPrefix + why + _STR + mRootDir + _STR + _NUM ) ; } else if ( mFullPhotoPaths != null ) { if ( Global . debugEnabled ) { Log . i ( Global . LOG_CONTEXT , mDebugPrefix + why + _STR + mRootDir + _STR + mFullPhotoPaths . length ) ; } String parentDirString = mRootDir . getAbsolutePath ( ) ; for ( int i = _NUM ; i < mFullPhotoPaths . length ; i ++ ) { mFullPhotoPaths [ i ] = parentDirString + _STR + mFullPhotoPaths [ i ] ; } } }
55827	DNSRecord ( String name , DNSRecordType type , DNSRecordClass recordClass , boolean unique , int ttl ) { super ( name , type , recordClass , unique ) ; this . _ttl = ttl ; this . _created = System . currentTimeMillis ( ) ; }
41381	public static String block ( Stream < String > rows ) { return block ( rows . collect ( joining ( nl ( ) ) ) ) ; }
13213	protected void addContentSpecToElement ( XMLElementDecl elementDecl ) { if ( ( fDepth == _NUM || ( fDepth == _NUM && elementDecl . type == XMLElementDecl . TYPE_MIXED ) ) && fNodeIndexStack != null ) { if ( elementDecl . type == XMLElementDecl . TYPE_MIXED ) { int pcdata = addUniqueLeafNode ( null ) ; if ( fNodeIndexStack [ _NUM ] == - _NUM ) { fNodeIndexStack [ _NUM ] = pcdata ; } else { fNodeIndexStack [ _NUM ] = addContentSpecNode ( XMLContentSpec . CONTENTSPECNODE_CHOICE , pcdata , fNodeIndexStack [ _NUM ] ) ; } } setContentSpecIndex ( fCurrentElementIndex , fNodeIndexStack [ fDepth ] ) ; } }
47665	private void growSpine ( ) { spine = new int [ ( spine . length << _NUM ) + _NUM ] ; threshold = ( int ) ( spine . length * loadFactor ) ; Arrays . fill ( spine , - _NUM ) ; for ( int i = _NUM ; i < size ; i ++ ) { insert ( objs [ i ] , i ) ; } }
73769	public void reconnect ( ) { if ( opened && ! allowConnectionRecovery ) { return ; } reconnectwait thread = new reconnectwait ( ) ; thread . start ( ) ; try { thread . join ( ) ; } catch ( InterruptedException e ) { log . error ( _STR + e . getMessage ( ) ) ; } if ( ! opened ) { log . error ( _STR ) ; } else { log . info ( _STR + getCurrentPortName ( ) ) ; resetupConnection ( ) ; } }
32111	public Collection < GridPortRecord > records ( ) { synchronized ( recs ) { return Collections . unmodifiableCollection ( new ArrayList < > ( recs ) ) ; } }
46967	@ Override public String toString ( ) { return buf . toString ( ) ; }
55095	public boolean hasChangeEvent ( String name ) { if ( var != null ) { List < MetaData > mdList = var . getMetaData ( StandardDefs . MD_CHANGEEVENT ) ; if ( mdList != null ) { for ( int i = _NUM , size = mdList . size ( ) ; i < size ; i ++ ) { MetaData md = mdList . get ( i ) ; if ( name . equals ( md . getValue ( _NUM ) ) ) { return _BOOL ; } } } } return _BOOL ; }
13263	protected void resetXML11 ( ) throws XNIException { int count = fXML11Components . size ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { XMLComponent c = ( XMLComponent ) fXML11Components . get ( i ) ; c . reset ( this ) ; } }
27066	public float distanceToOtherCircle ( Circle circle ) { return ( float ) Math . abs ( Math . sqrt ( Math . pow ( circle . center . x - center . x , _NUM ) + Math . pow ( circle . center . y - center . y , _NUM ) ) ) ; }
31008	public SimpleCommand ( String commandName , String ... args ) { this ( commandName , ( Argument ) null ) ; ArrayList < Argument > argList = new ArrayList < Argument > ( ) ; for ( String arg : args ) argList . add ( new Argument ( arg ) ) ; _arguments = argList . toArray ( new Argument [ _NUM ] ) ; }
18192	private void grow ( ) { m_allocatedSize *= _NUM ; boolean newVector [ ] = new boolean [ m_allocatedSize ] ; System . arraycopy ( m_values , _NUM , newVector , _NUM , m_index + _NUM ) ; m_values = newVector ; }
25961	public String convertToLowerCase ( String table ) { return table . toLowerCase ( ) ; }
65140	public PickingGraphMousePlugin ( int selectionModifiers , int addToSelectionModifiers ) { super ( selectionModifiers ) ; this . addToSelectionModifiers = addToSelectionModifiers ; this . lensPaintable = new LensPaintable ( ) ; this . cursor = Cursor . getPredefinedCursor ( Cursor . HAND_CURSOR ) ; }
83850	public int [ ] breadthFirstSearch ( int intialValue , IBFSTraversable < N > traversable , int firstValue , IIntegerBfsNextValueIterator < N > nextValueIterator , List < Integer > sourcesIndex ) { int [ ] results = new int [ nodes . length ] ; Arrays . fill ( results , intialValue ) ; boolean [ ] alreadyScanned = new boolean [ nodes . length ] ; Arrays . fill ( alreadyScanned , _BOOL ) ; Set < Integer > currentNodesIndex = new HashSet < > ( sourcesIndex ) ; iterativeIntegerBreadthFirstSearch ( results , alreadyScanned , currentNodesIndex , firstValue , _NUM , traversable , nextValueIterator ) ; return results ; }
3588	public ViewRefRender ( ViewRender < T > view , Class < T > type , int priority ) { Objects . requireNonNull ( view ) ; _view = view ; _type = type ; _priority = priority ; }
61325	public void checkNumberArgs ( int argNum ) throws WrongNumberArgsException { if ( argNum < _NUM ) reportWrongNumberArgs ( ) ; }
30830	private boolean announce ( String [ ] groups ) { if ( dataPackets == null || ! lastLocator . equals ( myLocator ) || ! Arrays . equals ( lastGroups , groups ) ) { List < DatagramPacket > packets = new ArrayList < DatagramPacket > ( ) ; Discovery disco ; try { disco = getDiscovery ( multicastAnnouncementConstraints . chooseProtocolVersion ( ) ) ; } catch ( DiscoveryProtocolException e ) { throw new AssertionError ( e ) ; } EncodeIterator ei = disco . encodeMulticastAnnouncement ( new MulticastAnnouncement ( announcementSeqNo ++ , myLocator . getHost ( ) , myLocator . getPort ( ) , groups , myServiceID ) , multicastAnnouncementConstraints . getMulticastMaxPacketSize ( DEFAULT_MAX_PACKET_SIZE ) , multicastAnnouncementConstraints . getUnfulfilledConstraints ( ) ) ; while ( ei . hasNext ( ) ) { try { packets . addAll ( Arrays . asList ( ei . next ( ) ) ) ; } catch ( Exception e ) { logger . log ( ( e instanceof UnsupportedConstraintException ) ? Levels . HANDLED : Level . INFO , _STR + _STR , e ) ; } } lastLocator = myLocator ; lastGroups = groups ; dataPackets = packets . toArray ( new DatagramPacket [ packets . size ( ) ] ) ; } try { send ( dataPackets ) ; } catch ( InterruptedIOException e ) { return _BOOL ; } return _BOOL ; }
11155	public DrawingAttributes ( ) { propertyChangeSupport = new PropertyChangeSupport ( this ) ; }
74605	public void close ( ) { scanner . close ( ) ; }
14666	static void createPolicyTree ( String configName , String configId , ServiceConfigManager scm , String org ) throws NoPermissionException , PolicyException , SSOException { try { ServiceConfig pConfig = scm . getOrganizationConfig ( org , null ) ; if ( pConfig == null ) { scm . createOrganizationConfig ( org , null ) ; pConfig = scm . getOrganizationConfig ( org , null ) ; } pConfig . addSubConfig ( configName , configId , _NUM , null ) ; } catch ( ServiceAlreadyExistsException se ) { if ( debug . messageEnabled ( ) ) { debug . message ( _STR + configName + _STR + configId + _STR + org ) ; } } catch ( SMSException e ) { String [ ] objs = { org } ; if ( e . getExceptionCode ( ) == SMSException . STATUS_NO_PERMISSION ) { throw ( new NoPermissionException ( ResBundleUtils . rbName , _STR , null ) ) ; } else { throw ( new PolicyException ( ResBundleUtils . rbName , _STR , objs , e ) ) ; } } }
21554	private void rollbackMethodForCreateSnapshot ( boolean isSnapshotCreated , boolean isDummyLunPathAdded , HDSApiClient hdsApiClient , StorageSystem storage , URI snapshot ) throws Exception { if ( isDummyLunPathAdded ) { log . info ( _STR ) ; hdsProtectionOperations . removeDummyLunPath ( storage , snapshot ) ; } if ( isSnapshotCreated ) { log . info ( _STR ) ; BlockSnapshot snapshotObj = dbClient . queryObject ( BlockSnapshot . class , snapshot ) ; String systemObjectID = HDSUtils . getSystemObjectID ( storage ) ; String logicalUnitObjId = HDSUtils . getLogicalUnitObjectId ( snapshotObj . getNativeId ( ) , storage ) ; hdsApiClient . deleteSnapshotVolume ( systemObjectID , logicalUnitObjId , storage . getModel ( ) ) ; } }
85664	public static int convertStringToTimeSeconds ( String time ) { int result = _NUM ; if ( time . endsWith ( _STR ) ) { int hoursToAdd = Integer . valueOf ( StringUtils . remove ( time , _STR ) ) ; result = ( _NUM * _NUM ) * hoursToAdd ; } else if ( time . endsWith ( _STR ) ) { int minsToAdd = Integer . valueOf ( StringUtils . remove ( time , _STR ) ) ; result = _NUM * minsToAdd ; } else if ( time . endsWith ( _STR ) ) { int secsToAdd = Integer . valueOf ( StringUtils . remove ( time , _STR ) ) ; result = secsToAdd ; } return result ; }
31229	public void detach ( AppCompatActivity activity ) { attrViewMaps . remove ( activity . hashCode ( ) ) ; }
55879	public void readPrefs ( SharedPreferences settings , ActionFactory factory ) { boolean visible = _BOOL ; String actionId = settings . getString ( _STR + name + _STR , _STR ) ; mainAction = factory . getAction ( actionId ) ; if ( mainAction != null ) visible = _BOOL ; menuActions . clear ( ) ; for ( int i = _NUM ; i < maxMenuActions ; i ++ ) { actionId = settings . getString ( _STR + name + _STR + ( i + _NUM ) , _STR ) ; UIAction a = factory . getAction ( actionId ) ; if ( a != null ) visible = _BOOL ; menuActions . add ( a ) ; } if ( button != null ) button . setVisibility ( visible ? View . VISIBLE : View . GONE ) ; }
64325	public boolean addToActiveList ( DownloadInfoRunnable downloadInfoRunnable ) { return activeListHasRoom ( ) && mActiveList . add ( downloadInfoRunnable ) ; }
80894	private void addExprToTLA ( TLAExpr expr ) { Vector sv = expr . toStringVector ( ) ; Vector exprMapping = expr . toMappingVector ( ) ; int indent = tlacodeNextLine . length ( ) ; int nextLine = _NUM ; if ( indent != _NUM ) { MappingObject . shiftMappingVector ( exprMapping , indent ) ; tlacodeNextLine = tlacodeNextLine + ( ( String ) sv . elementAt ( _NUM ) ) ; mappingVectorNextLine . addAll ( ( Vector ) exprMapping . elementAt ( _NUM ) ) ; nextLine = _NUM ; if ( sv . size ( ) > _NUM ) { endCurrentLineOfTLA ( ) ; } } if ( sv . size ( ) > _NUM ) { String spaces = NSpaces ( indent ) ; while ( nextLine < sv . size ( ) - _NUM ) { tlacode . addElement ( spaces + ( ( String ) sv . elementAt ( nextLine ) ) ) ; mappingVector . addElement ( ( Vector ) exprMapping . elementAt ( nextLine ) ) ; nextLine ++ ; } tlacodeNextLine = spaces + ( ( String ) sv . elementAt ( nextLine ) ) ; mappingVectorNextLine = ( Vector ) exprMapping . elementAt ( nextLine ) ; } else if ( indent == _NUM ) { tlacodeNextLine = tlacodeNextLine + ( ( String ) sv . elementAt ( _NUM ) ) ; mappingVectorNextLine . addAll ( ( Vector ) exprMapping . elementAt ( _NUM ) ) ; } }
33055	private boolean isUpperCaseCamelCaseHunk ( String hunk ) { if ( hunk . length ( ) < _NUM ) return _BOOL ; for ( int i = _NUM ; i < hunk . length ( ) ; i ++ ) { if ( ! isLegalChar ( hunk . charAt ( i ) ) ) return _BOOL ; } return _BOOL ; }
54592	void addFillComponents ( Container panel , int [ ] cols , int [ ] rows ) { Dimension filler = new Dimension ( _NUM , _NUM ) ; boolean filled_cell_11 = _BOOL ; CellConstraints cc = new CellConstraints ( ) ; if ( cols . length > _NUM && rows . length > _NUM ) { if ( cols [ _NUM ] == _NUM && rows [ _NUM ] == _NUM ) { panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , _NUM ) ) ; filled_cell_11 = _BOOL ; } } for ( int index = _NUM ; index < cols . length ; index ++ ) { if ( cols [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( cols [ index ] , _NUM ) ) ; } for ( int index = _NUM ; index < rows . length ; index ++ ) { if ( rows [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , rows [ index ] ) ) ; } }
62931	public void type ( String string ) { for ( int i = _NUM ; i < string . length ( ) ; i ++ ) { char c = string . charAt ( i ) ; type ( c ) ; } }
33409	public boolean providesIdentifier ( ) { return _BOOL ; }
28231	static void removeRedundantAffix ( TranslatorUtils . IContain iContain , List < String > strList ) { if ( strList . size ( ) <= _NUM ) { return ; } int w = _NUM ; for ( String str : strList ) { if ( w == _NUM || ! iContain . containFunc ( str , strList . get ( w - _NUM ) ) ) { strList . set ( w , str ) ; w ++ ; } } strList = strList . subList ( _NUM , w ) ; }
3975	public static int nextInt ( int n ) { Random random = getRandom ( ) ; int value = random . nextInt ( n ) ; if ( ! _isTest ) _freeRandomList . free ( random ) ; return value ; }
40743	protected void doResumeUpdates ( ) { Calendar cal = Calendar . getInstance ( Locale . getDefault ( ) ) ; mFirstDayOfWeek = cal . getFirstDayOfWeek ( ) - _NUM ; mShowWeekNumber = _BOOL ; updateHeader ( ) ; goTo ( mSelectedDay . toMillis ( _BOOL ) , _BOOL , _BOOL , _BOOL ) ; mAdapter . setSelectedDay ( mSelectedDay ) ; mTodayUpdater . run ( ) ; }
80387	private void storeLastUsed ( ) { put ( LAST_USE , ( int ) ( System . currentTimeMillis ( ) / _NUM ) ) ; }
76124	private boolean canContain ( ElementContainmentInfo child , ElementContainmentInfo top , int topIndex ) { int childTypes = child . types ; int contents = top . contents ; int transparencyAllowed = childTypes & ( top . transparentToContents & ~ contents ) ; for ( int containerIndex = topIndex - _NUM ; transparencyAllowed != _NUM ; -- containerIndex ) { if ( containerIndex < _NUM ) { contents |= transparencyAllowed ; break ; } ElementContainmentInfo container = openElements . get ( containerIndex ) ; contents |= transparencyAllowed & container . contents ; transparencyAllowed = transparencyAllowed & container . transparentToContents & ~ contents ; } return ( contents & childTypes ) != _NUM ; }
9551	public static int [ ] extractArcs ( ASN1ObjectIdentifier oid ) throws InvalidObjectIdException { String oidStr = oid . getId ( ) ; StringTokenizer strTokCnt = new StringTokenizer ( oidStr , _STR , _BOOL ) ; int arcCount = strTokCnt . countTokens ( ) ; StringTokenizer strTok = new StringTokenizer ( oidStr , _STR , _BOOL ) ; boolean expectDelimiter = _BOOL ; int [ ] arcs = new int [ arcCount ] ; int i = _NUM ; while ( strTok . hasMoreTokens ( ) ) { String token = strTok . nextToken ( ) ; if ( expectDelimiter && ( ! token . equals ( _STR ) || ! strTok . hasMoreTokens ( ) ) ) { throw new InvalidObjectIdException ( res . getString ( _STR ) ) ; } else if ( ! expectDelimiter ) { try { arcs [ i ] = Integer . parseInt ( token ) ; if ( arcs [ i ] < _NUM ) { throw new InvalidObjectIdException ( res . getString ( _STR ) ) ; } i ++ ; } catch ( NumberFormatException ex ) { throw new InvalidObjectIdException ( res . getString ( _STR ) ) ; } } expectDelimiter = ! expectDelimiter ; } return arcs ; }
1782	public void testIsDuplicateString ( ) { int count = _NUM ; ActiveMQMessageAudit audit = new ActiveMQMessageAudit ( ) ; IdGenerator idGen = new IdGenerator ( ) ; List < String > list = new ArrayList < > ( ) ; for ( int i = _NUM ; i < count ; i ++ ) { String id = idGen . generateId ( ) ; list . add ( id ) ; assertFalse ( audit . isDuplicate ( id ) ) ; } List < String > windowList = list . subList ( list . size ( ) - _NUM - audit . getAuditDepth ( ) , list . size ( ) - _NUM ) ; for ( String id : windowList ) { assertTrue ( _STR + id , audit . isDuplicate ( id ) ) ; } }
37744	protected void updateStatsForConditionalDensityEstimator ( ConditionalDensityEstimator classifier , Instance classMissing , double classValue ) throws Exception { if ( m_PriorEstimator == null ) { setNumericPriorsFromBuffer ( ) ; } m_SumSchemeEntropy -= classifier . logDensity ( classMissing , classValue ) * classMissing . weight ( ) / Utils . log2 ; m_SumPriorEntropy -= m_PriorEstimator . logDensity ( classValue ) * classMissing . weight ( ) / Utils . log2 ; }
46111	@ Override public boolean accept ( File f ) { if ( f != null ) { if ( f . isDirectory ( ) ) { return _BOOL ; } String extension = getExtension ( f ) ; if ( extension != null && filters . get ( getExtension ( f ) ) != null ) { return _BOOL ; } ; } return _BOOL ; }
58675	public void testCase3 ( ) { byte aBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte rBytes [ ] = { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = - _NUM ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . add ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
3455	@ Override public PollResult startPoll ( PollController conn ) { if ( ! _lifecycle . isActive ( ) ) { log . warning ( this + _STR ) ; return PollResult . CLOSED ; } SocketBar socket = conn . getSocket ( ) ; if ( socket == null ) { log . warning ( this + _STR + conn ) ; return PollResult . CLOSED ; } SelectableChannel selChannel = socket . selectableChannel ( ) ; if ( selChannel == null ) { log . warning ( this + _STR + socket ) ; return PollResult . CLOSED ; } _connectionCount . incrementAndGet ( ) ; _activeCount . incrementAndGet ( ) ; _registerQueue . offer ( conn ) ; return PollResult . START ; }
79061	@ Override public void incrementAccessCount ( ) { accessCount . incrementAndGet ( ) ; }
30596	public ClusterPolicy createClusterPolicy ( String clusterMemberName ) throws CreateException { long time1 = System . currentTimeMillis ( ) ; if ( _clusterPolicies == null ) { _clusterMemberNames = getClusterMemberNames ( ) ; if ( _clusterMemberNames != null && _clusterMemberNames . length > _NUM ) { _clusterPolicies = new HashMap < String , ClusterPolicy > ( ) ; ClusterPolicy [ ] tempPolicy = new ClusterPolicy [ _clusterMemberNames . length ] ; for ( int i = _NUM ; i < _clusterMemberNames . length ; i ++ ) tempPolicy [ i ] = createClusterPolicyInternal ( _clusterMemberNames [ i ] ) ; ArrayList < ReplicationPolicy > selectedReplPolicies = new ArrayList < ReplicationPolicy > ( _clusterMemberNames . length ) ; List < String > selectedReplGroupNames = new ArrayList < String > ( _clusterMemberNames . length ) ; for ( int i = _NUM ; i < tempPolicy . length ; i ++ ) if ( tempPolicy [ i ] . m_ReplicationPolicy != null && ! selectedReplGroupNames . contains ( tempPolicy [ i ] . m_ReplicationPolicy . m_ReplicationGroupName ) ) { selectedReplPolicies . add ( tempPolicy [ i ] . m_ReplicationPolicy ) ; selectedReplGroupNames . add ( tempPolicy [ i ] . m_ReplicationPolicy . m_ReplicationGroupName ) ; } if ( selectedReplPolicies . isEmpty ( ) ) selectedReplPolicies = null ; else selectedReplPolicies . trimToSize ( ) ; for ( int i = _NUM ; i < _clusterMemberNames . length ; i ++ ) { tempPolicy [ i ] . m_ReplicationGroups = selectedReplPolicies ; _clusterPolicies . put ( _clusterMemberNames [ i ] , tempPolicy [ i ] ) ; } } } ClusterPolicy result = _clusterPolicies . get ( clusterMemberName ) ; if ( result == null ) result = createClusterPolicyInternal ( clusterMemberName ) ; long time2 = System . currentTimeMillis ( ) ; if ( _logger . isLoggable ( Level . FINE ) ) { _logger . fine ( _STR + clusterMemberName + _STR + ( time2 - time1 ) + _STR ) ; } return result ; }
53505	public static boolean compareDoubles ( double a , double b ) { if ( Double . isNaN ( a ) && Double . isNaN ( b ) ) return _BOOL ; if ( ! Double . isInfinite ( a ) && ! Double . isInfinite ( b ) ) return Math . abs ( a - b ) <= EPSILON ; return a == b ; }
12411	public static byte [ ] bitmapToByte ( Bitmap b ) { ByteArrayOutputStream o = new ByteArrayOutputStream ( ) ; b . compress ( Bitmap . CompressFormat . PNG , _NUM , o ) ; return o . toByteArray ( ) ; }
29489	public ConfigureCoerceiveParsingDialog_NB ( CoerciveParsing coerciveParsing ) { this . coerciveParsing = coerciveParsing ; initComponents ( ) ; final IterateModel numberOfTagsIterator = coerciveParsing . getNumberOfTagsIterator ( ) ; configureIterateModel_NB2 . setStartAt ( String . valueOf ( numberOfTagsIterator . getStartAt ( ) ) ) ; configureIterateModel_NB2 . setStopAt ( String . valueOf ( numberOfTagsIterator . getStopAt ( ) ) ) ; configureIterateModel_NB2 . setIncrement ( String . valueOf ( numberOfTagsIterator . getIncrement ( ) ) ) ; configureIterateModel_NB2 . setIterateStrategie ( numberOfTagsIterator . getIterateStrategie ( ) ) ; List < String > tagNames = Arrays . asList ( coerciveParsing . getTagNames ( ) ) ; configureStringList_NB1 . setStringList ( tagNames ) ; }
30262	public static double logOfBase ( double number , int base ) { return Math . log ( number ) / Math . log ( base ) ; }
2970	public Entry editEntry ( User user , String id , String note , String quotation , boolean isPublic , Long modTime , boolean isAdmin , Errors errors ) { if ( modTime == null ) { Errors . add ( errors , errorMessages . errorModTimeIsNull ( ) ) ; return null ; } if ( user == null ) { Errors . add ( errors , errorMessages . errorUserIsNull ( ) ) ; return null ; } if ( id != null && ! idGenerator . isIdWellFormed ( id ) ) { Errors . add ( errors , errorMessages . errorIdIsInvalid ( ) ) ; return null ; } final Entry entry = getEntryById ( id ) ; if ( entry == null ) { Errors . add ( errors , errorMessages . errorTheEntryCouldNotBeFound ( ) ) ; return null ; } if ( ! canUserModifyEntry ( user , entry , isAdmin ) ) { Errors . add ( errors , errorMessages . errorTheUserIsNotEntitledToModifyTheEntry ( ) ) ; return null ; } if ( note != null ) { note = cleanUpText ( note ) ; } if ( entry . isNotebook ( ) ) { entry . setNotebookTitle ( note ) ; } else if ( entry . isSource ( ) ) { entry . setSourceTitle ( note ) ; } else { entry . setNote ( note ) ; } entry . setModTime ( modTime ) ; entry . setIsPublic ( isPublic ) ; if ( entry . getCreateTime ( ) > modTime . longValue ( ) ) { modTime = entry . getCreateTime ( ) ; } if ( entry . isQuotation ( ) ) { if ( quotation != null ) { quotation = cleanUpText ( quotation ) ; entry . setQuotation ( quotation ) ; } } return entry ; }
26788	public static void UF6 ( double [ ] x , double [ ] f , int nx ) { int count1 = _NUM ; int count2 = _NUM ; double sum1 = _NUM ; double sum2 = _NUM ; double prod1 = _NUM ; double prod2 = _NUM ; double yj ; double hj ; double pj ; double N = _NUM ; double E = _NUM ; for ( int j = _NUM ; j <= nx ; j ++ ) { yj = x [ j - _NUM ] - Math . sin ( _NUM * PI * x [ _NUM ] + j * PI / nx ) ; pj = Math . cos ( _NUM * yj * PI / Math . sqrt ( j + _NUM ) ) ; if ( j % _NUM == _NUM ) { sum2 += yj * yj ; prod2 *= pj ; count2 ++ ; } else { sum1 += yj * yj ; prod1 *= pj ; count1 ++ ; } } hj = _NUM * ( _NUM / N + E ) * Math . sin ( _NUM * N * PI * x [ _NUM ] ) ; if ( hj < _NUM ) { hj = _NUM ; } f [ _NUM ] = x [ _NUM ] + hj + _NUM * ( _NUM * sum1 - _NUM * prod1 + _NUM ) / ( double ) count1 ; f [ _NUM ] = _NUM - x [ _NUM ] + hj + _NUM * ( _NUM * sum2 - _NUM * prod2 + _NUM ) / ( double ) count2 ; }
60393	public FileSaverDescriptor ( @ NotNull String title , @ NotNull String description , String ... extensions ) { super ( _BOOL , _BOOL , _BOOL , _BOOL , _BOOL , _BOOL ) ; setTitle ( title ) ; setDescription ( description ) ; this . extensions = Arrays . asList ( extensions ) ; }
17006	protected int readBlock ( ) { blockSize = read ( ) ; int n = _NUM ; if ( blockSize > _NUM ) { try { int count ; while ( n < blockSize ) { count = blockSize - n ; rawData . get ( block , n , count ) ; n += count ; } } catch ( final Exception e ) { Log . w ( TAG , _STR , e ) ; status = STATUS_FORMAT_ERROR ; } } return n ; }
42096	public void addRun ( final Run run ) { runs . add ( run ) ; run . setId ( runIdCounter ++ ) ; }
16113	void copyInto ( Converter [ ] converters ) { System . arraycopy ( iConverters , _NUM , converters , _NUM , iConverters . length ) ; }
74049	@ Override public boolean addOutputSensor ( String sensorName , int state ) { OutputSensor outputSensor = new OutputSensor ( sensorName ) ; if ( ! outputSensor . setState ( state ) ) { return _BOOL ; } _outputSensorList . add ( outputSensor ) ; return _BOOL ; }
3733	public void init ( SocketChannel channel ) { _channel = channel ; _readBuffer . clear ( ) ; _readBuffer . flip ( ) ; _needsFlush = _BOOL ; }
49858	public void reset ( ) { Timber . i ( _STR ) ; mCurrentPlayer . reset ( ) ; mNextPlayer . reset ( ) ; mQueue = Collections . emptyList ( ) ; mQueueIndex = _NUM ; mRequestedSeekPosition = _NUM ; mPlayWhenPrepared = _BOOL ; }
8000	@ Override public Expected < T > ifPresent ( final Consumer < ? super T > consumer ) { if ( this . value != null ) consumer . accept ( this . value ) ; return this ; }
73659	protected void sendIntensity ( double intensity ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + intensity + _STR + _STR + lastOutputStep + _STR + maxDimStep ) ; } int newStep = ( int ) Math . round ( intensity * maxDimStep ) ; if ( ( newStep < _NUM ) || ( newStep > maxDimStep ) ) { log . error ( _STR + newStep + _STR + intensity ) ; } if ( newStep == _NUM ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + intensity + _STR ) ; } return ; } X10Sequence out = new X10Sequence ( ) ; out . addExtData ( housecode , devicecode , X10Sequence . EXTCMD_DIM , newStep ) ; tc . sendX10Sequence ( out , null ) ; lastOutputStep = newStep ; if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + intensity + _STR + X10Sequence . houseValueToText ( housecode ) + _STR + devicecode + _STR + newStep ) ; } }
50536	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
32831	public static float readFloat ( ) { return scanner . nextFloat ( ) ; }
79156	public GlowScheduler ( GlowServer server , WorldScheduler worlds ) { this . server = server ; this . worlds = worlds ; inTickTaskCondition = worlds . getAdvanceCondition ( ) ; tickEndRun = null ; primaryThread = Thread . currentThread ( ) ; }
59185	public void test_fill$IIII ( ) { int val = Integer . MAX_VALUE ; int d [ ] = new int [ _NUM ] ; Arrays . fill ( d , _NUM , d . length , val ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) assertTrue ( _STR , ! ( d [ i ] == val ) ) ; for ( int i = _NUM ; i < d . length ; i ++ ) assertTrue ( _STR , d [ i ] == val ) ; try { Arrays . fill ( d , _NUM , _NUM , val ) ; fail ( _STR ) ; } catch ( IllegalArgumentException e ) { } try { Arrays . fill ( d , - _NUM , _NUM , val ) ; fail ( _STR ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } try { Arrays . fill ( d , _NUM , d . length + _NUM , val ) ; fail ( _STR ) ; } catch ( ArrayIndexOutOfBoundsException e ) { } }
13415	private int calculateLayoutWidth ( int widthSize , int mode ) { initResourcesIfNecessary ( ) ; itemsLayout . setLayoutParams ( new LayoutParams ( LayoutParams . WRAP_CONTENT , LayoutParams . WRAP_CONTENT ) ) ; itemsLayout . measure ( MeasureSpec . makeMeasureSpec ( widthSize , MeasureSpec . UNSPECIFIED ) , MeasureSpec . makeMeasureSpec ( _NUM , MeasureSpec . UNSPECIFIED ) ) ; int width = itemsLayout . getMeasuredWidth ( ) ; if ( mode == MeasureSpec . EXACTLY ) { width = widthSize ; } else { width += _NUM * PADDING ; width = Math . max ( width , getSuggestedMinimumWidth ( ) ) ; if ( mode == MeasureSpec . AT_MOST && widthSize < width ) { width = widthSize ; } } itemsLayout . measure ( MeasureSpec . makeMeasureSpec ( width - _NUM * PADDING , MeasureSpec . EXACTLY ) , MeasureSpec . makeMeasureSpec ( _NUM , MeasureSpec . UNSPECIFIED ) ) ; return width ; }
22623	public void delete ( ) throws IOException { close ( ) ; Utils . deleteContents ( directory ) ; }
60555	@ Override public boolean execute ( @ NotNull PsiElement pe , @ NotNull ResolveState state ) { if ( pe instanceof PsiVariable ) { final PsiVariable pvar = ( PsiVariable ) pe ; if ( ! myStaticSensitiveFlag || ! myStaticScopeFlag || pvar . hasModifierProperty ( PsiModifier . STATIC ) ) { if ( check ( pvar , state ) ) { myResultList . add ( pvar ) ; } } } return _BOOL ; }
42580	public void characters ( char [ ] ch , int start , int length ) throws SAXException { try { stopTerminator ( ) ; if ( w == null ) return ; int end = start + length ; for ( int i = start ; i < end ; i ++ ) { char c = ch [ i ] ; switch ( c ) { case _STR : w . write ( _STR ) ; break ; case _STR : w . write ( _STR ) ; break ; case _STR : w . write ( _STR ) ; break ; case _STR : case _STR : case _STR : w . write ( c ) ; break ; default : if ( canEncode ( c ) ) { w . write ( c ) ; } else { w . write ( _STR ) ; w . write ( Integer . toString ( c ) ) ; w . write ( _STR ) ; } break ; } } } catch ( IOException e ) { throw new SAXException ( e ) ; } }
42685	public static String toHumanReadableString ( final String iso8601Duration ) { String str = _STR ; if ( iso8601Duration . matches ( _STR ) ) { str = _STR ; } else { String hours = getHours ( iso8601Duration ) , minutes = getMinutes ( iso8601Duration ) , seconds = getSeconds ( iso8601Duration ) ; if ( hours != null ) { str = hours ; if ( minutes != null && minutes . length ( ) == _NUM ) { minutes = _STR + minutes ; } } if ( str . isEmpty ( ) ) str = minutes ; else str += _STR + minutes ; if ( str . isEmpty ( ) ) str = seconds ; else str += _STR + seconds ; } return str ; }
23232	@ Override public IChatMessage sendMessage ( final String text ) throws RemoteException { if ( TextUtils . isEmpty ( text ) ) { throw new ServerApiIllegalArgumentException ( _STR ) ; } int messageLength = text . length ( ) ; int maxMessageLength = mRcsSettings . getMaxGroupChatMessageLength ( ) ; if ( messageLength > maxMessageLength ) { throw new ServerApiIllegalArgumentException ( _STR + messageLength + _STR + maxMessageLength + _STR ) ; } if ( ! isAllowedToSendMessage ( ) ) { throw new ServerApiPermissionDeniedException ( _STR ) ; } try { mImService . removeGroupChatComposingStatus ( mChatId ) ; long timestamp = System . currentTimeMillis ( ) ; final ChatMessage msg = ChatUtils . createTextMessage ( null , text , timestamp , timestamp ) ; ChatMessagePersistedStorageAccessor persistedStorage = new ChatMessagePersistedStorageAccessor ( mMessagingLog , msg . getMessageId ( ) , msg . getRemoteContact ( ) , text , msg . getMimeType ( ) , mChatId , Direction . OUTGOING ) ; addOutgoingGroupChatMessage ( msg , Content . Status . QUEUED , Content . ReasonCode . UNSPECIFIED ) ; if ( ! mChatService . isGroupChatActive ( mChatId ) ) { mChatService . setGroupChatStateAndReasonCode ( mChatId , GroupChat . State . STARTED , GroupChat . ReasonCode . UNSPECIFIED ) ; } mImService . tryToDequeueGroupChatMessagesAndGroupFileTransfers ( mChatId ) ; return new ChatMessageImpl ( persistedStorage ) ; } catch ( ServerApiBaseException e ) { if ( ! e . shouldNotBeLogged ( ) ) { sLogger . error ( ExceptionUtil . getFullStackTrace ( e ) ) ; } throw e ; } catch ( Exception e ) { sLogger . error ( ExceptionUtil . getFullStackTrace ( e ) ) ; throw new ServerApiGenericException ( e ) ; } }
82532	public java . lang . String toString ( ) { return toString ( value ) ; }
63423	void remove ( TcpServerThread t ) { running . remove ( t ) ; }
30017	public DockNodeEventHandler ( Node node ) { this . node = node ; }
56371	private int readSourceToLog ( Settings settings ) { String sourceToLog = settings . get ( INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG , _STR ) ; try { return Integer . parseInt ( sourceToLog , _NUM ) ; } catch ( NumberFormatException e ) { return Booleans . parseBoolean ( sourceToLog , _BOOL ) ? Integer . MAX_VALUE : _NUM ; } }
21107	private void deleteCurrentLicenseFileOnDisk ( ) { File licenseFile = new File ( LicenseConstants . LICENSE_FILE_PATH ) ; if ( licenseFile . exists ( ) ) { licenseFile . delete ( ) ; } }
209	@ Deprecated public static NetworkParameters testNet ( ) { return TestNet3Params . get ( ) ; }
61780	@ Override public void run ( ) { synchronized ( mSync ) { mRequestStop = _BOOL ; mRequestDrain = _NUM ; mSync . notify ( ) ; } final boolean isRunning = _BOOL ; boolean localRequestStop ; boolean localRequestDrain ; while ( isRunning ) { synchronized ( mSync ) { localRequestStop = mRequestStop ; localRequestDrain = ( mRequestDrain > _NUM ) ; if ( localRequestDrain ) mRequestDrain -- ; } if ( localRequestStop ) { drain ( ) ; signalEndOfInputStream ( ) ; drain ( ) ; release ( ) ; break ; } if ( localRequestDrain ) { drain ( ) ; } else { synchronized ( mSync ) { try { mSync . wait ( ) ; } catch ( final InterruptedException e ) { break ; } } } } if ( DEBUG ) Log . d ( TAG , _STR ) ; synchronized ( mSync ) { mRequestStop = _BOOL ; mIsCapturing = _BOOL ; } }
55865	public final void readFromStream ( DataInputStream dis , int version ) throws IOException , ChessParseError { event = dis . readUTF ( ) ; site = dis . readUTF ( ) ; date = dis . readUTF ( ) ; round = dis . readUTF ( ) ; white = dis . readUTF ( ) ; black = dis . readUTF ( ) ; startPos = TextIO . readFEN ( dis . readUTF ( ) ) ; currentPos = new Position ( startPos ) ; timeControl = dis . readUTF ( ) ; if ( version >= _NUM ) { whiteTimeControl = dis . readUTF ( ) ; blackTimeControl = dis . readUTF ( ) ; } else { whiteTimeControl = _STR ; blackTimeControl = _STR ; } int nTags = dis . readInt ( ) ; tagPairs . clear ( ) ; for ( int i = _NUM ; i < nTags ; i ++ ) { TagPair tp = new TagPair ( ) ; tp . tagName = dis . readUTF ( ) ; tp . tagValue = dis . readUTF ( ) ; tagPairs . add ( tp ) ; } rootNode = new Node ( ) ; Node . readFromStream ( dis , rootNode ) ; currentNode = rootNode ; int pathLen = dis . readInt ( ) ; for ( int i = _NUM ; i < pathLen ; i ++ ) goForward ( dis . readInt ( ) ) ; updateListener ( ) ; }
85826	public Rect updateFastScrollerBounds ( BaseRecyclerView rv , int lastTouchY ) { mInvalidateRect . set ( mBgBounds ) ; if ( isVisible ( ) ) { int edgePadding = rv . getMaxScrollbarWidth ( ) ; int bgPadding = ( mBgOriginalSize - mTextBounds . height ( ) ) / _NUM ; int bgHeight = mBgOriginalSize ; int bgWidth = Math . max ( mBgOriginalSize , mTextBounds . width ( ) + ( _NUM * bgPadding ) ) ; if ( Utilities . isRtl ( mRes ) ) { mBgBounds . left = rv . getBackgroundPadding ( ) . left + ( _NUM * rv . getMaxScrollbarWidth ( ) ) ; mBgBounds . right = mBgBounds . left + bgWidth ; } else { mBgBounds . right = rv . getWidth ( ) - rv . getBackgroundPadding ( ) . right - ( _NUM * rv . getMaxScrollbarWidth ( ) ) ; mBgBounds . left = mBgBounds . right - bgWidth ; } mBgBounds . top = lastTouchY - ( int ) ( FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight ) ; mBgBounds . top = Math . max ( edgePadding , Math . min ( mBgBounds . top , rv . getHeight ( ) - edgePadding - bgHeight ) ) ; mBgBounds . bottom = mBgBounds . top + bgHeight ; } else { mBgBounds . setEmpty ( ) ; } mInvalidateRect . union ( mBgBounds ) ; return mInvalidateRect ; }
9716	public DNetscapeCaPolicyUrl ( JDialog parent ) { super ( parent ) ; setTitle ( res . getString ( _STR ) ) ; initComponents ( ) ; }
70577	public boolean textboxKeyTyped ( char p_146201_1_ , int p_146201_2_ ) { if ( ! isFocused ) return _BOOL ; else if ( GuiScreen . func_175278_g ( p_146201_2_ ) ) { setCursorPositionEnd ( ) ; setSelectionPos ( _NUM ) ; return _BOOL ; } else if ( GuiScreen . func_175280_f ( p_146201_2_ ) ) { GuiScreen . setClipboardString ( getSelectedText ( ) ) ; return _BOOL ; } else if ( GuiScreen . func_175279_e ( p_146201_2_ ) ) { if ( isEnabled ) writeText ( GuiScreen . getClipboardString ( ) ) ; return _BOOL ; } else if ( GuiScreen . func_175277_d ( p_146201_2_ ) ) { GuiScreen . setClipboardString ( getSelectedText ( ) ) ; if ( isEnabled ) writeText ( _STR ) ; return _BOOL ; } else switch ( p_146201_2_ ) { case _NUM : if ( GuiScreen . isCtrlKeyDown ( ) ) { if ( isEnabled ) deleteWords ( - _NUM ) ; } else if ( isEnabled ) deleteFromCursor ( - _NUM ) ; return _BOOL ; case _NUM : if ( GuiScreen . isShiftKeyDown ( ) ) setSelectionPos ( _NUM ) ; else setCursorPositionZero ( ) ; return _BOOL ; case _NUM : if ( GuiScreen . isShiftKeyDown ( ) ) { if ( GuiScreen . isCtrlKeyDown ( ) ) setSelectionPos ( getNthWordFromPos ( - _NUM , getSelectionEnd ( ) ) ) ; else setSelectionPos ( getSelectionEnd ( ) - _NUM ) ; } else if ( GuiScreen . isCtrlKeyDown ( ) ) setCursorPosition ( getNthWordFromCursor ( - _NUM ) ) ; else moveCursorBy ( - _NUM ) ; return _BOOL ; case _NUM : if ( GuiScreen . isShiftKeyDown ( ) ) { if ( GuiScreen . isCtrlKeyDown ( ) ) setSelectionPos ( getNthWordFromPos ( _NUM , getSelectionEnd ( ) ) ) ; else setSelectionPos ( getSelectionEnd ( ) + _NUM ) ; } else if ( GuiScreen . isCtrlKeyDown ( ) ) setCursorPosition ( getNthWordFromCursor ( _NUM ) ) ; else moveCursorBy ( _NUM ) ; return _BOOL ; case _NUM : if ( GuiScreen . isShiftKeyDown ( ) ) setSelectionPos ( text . length ( ) ) ; else setCursorPositionEnd ( ) ; return _BOOL ; case _NUM : if ( GuiScreen . isCtrlKeyDown ( ) ) { if ( isEnabled ) deleteWords ( _NUM ) ; } else if ( isEnabled ) deleteFromCursor ( _NUM ) ; return _BOOL ; default : if ( EmailAllowedCharacters . isAllowedCharacter ( p_146201_1_ ) ) { if ( isEnabled ) writeText ( Character . toString ( p_146201_1_ ) ) ; return _BOOL ; } else return _BOOL ; } }
68874	protected int match_bitap ( String text , String pattern , int loc ) { assert ( Match_MaxBits == _NUM || pattern . length ( ) <= Match_MaxBits ) : _STR ; Map < Character , Integer > s = match_alphabet ( pattern ) ; double score_threshold = Match_Threshold ; int best_loc = text . indexOf ( pattern , loc ) ; if ( best_loc != - _NUM ) { score_threshold = Math . min ( match_bitapScore ( _NUM , best_loc , loc , pattern ) , score_threshold ) ; best_loc = text . lastIndexOf ( pattern , loc + pattern . length ( ) ) ; if ( best_loc != - _NUM ) { score_threshold = Math . min ( match_bitapScore ( _NUM , best_loc , loc , pattern ) , score_threshold ) ; } } int matchmask = _NUM << ( pattern . length ( ) - _NUM ) ; best_loc = - _NUM ; int bin_min , bin_mid ; int bin_max = pattern . length ( ) + text . length ( ) ; int [ ] last_rd = new int [ _NUM ] ; for ( int d = _NUM ; d < pattern . length ( ) ; d ++ ) { bin_min = _NUM ; bin_mid = bin_max ; while ( bin_min < bin_mid ) { if ( match_bitapScore ( d , loc + bin_mid , loc , pattern ) <= score_threshold ) { bin_min = bin_mid ; } else { bin_max = bin_mid ; } bin_mid = ( bin_max - bin_min ) / _NUM + bin_min ; } bin_max = bin_mid ; int start = Math . max ( _NUM , loc - bin_mid + _NUM ) ; int finish = Math . min ( loc + bin_mid , text . length ( ) ) + pattern . length ( ) ; int [ ] rd = new int [ finish + _NUM ] ; rd [ finish + _NUM ] = ( _NUM << d ) - _NUM ; for ( int j = finish ; j >= start ; j -- ) { int charMatch ; if ( text . length ( ) <= j - _NUM || ! s . containsKey ( text . charAt ( j - _NUM ) ) ) { charMatch = _NUM ; } else { charMatch = s . get ( text . charAt ( j - _NUM ) ) ; } if ( d == _NUM ) { rd [ j ] = ( ( rd [ j + _NUM ] << _NUM ) | _NUM ) & charMatch ; } else { rd [ j ] = ( ( ( rd [ j + _NUM ] << _NUM ) | _NUM ) & charMatch ) | ( ( ( last_rd [ j + _NUM ] | last_rd [ j ] ) << _NUM ) | _NUM ) | last_rd [ j + _NUM ] ; } if ( ( rd [ j ] & matchmask ) != _NUM ) { double score = match_bitapScore ( d , j - _NUM , loc , pattern ) ; if ( score <= score_threshold ) { score_threshold = score ; best_loc = j - _NUM ; if ( best_loc > loc ) { start = Math . max ( _NUM , _NUM * loc - best_loc ) ; } else { break ; } } } } if ( match_bitapScore ( d + _NUM , loc , loc , pattern ) > score_threshold ) { break ; } last_rd = rd ; } return best_loc ; }
35409	public static Path createDirectory ( final Path parent , final String folderName ) { final File file = new File ( parent . toFile ( ) , folderName ) ; if ( ! file . exists ( ) ) { if ( ! file . mkdir ( ) ) { throw new RuntimeException ( _STR + parent + _STR + folderName + _STR ) ; } } file . deleteOnExit ( ) ; return file . toPath ( ) ; }
9576	public static boolean isWindows8 ( ) { return osName . indexOf ( _STR ) > - _NUM && ( osVersion . equals ( _STR ) || osVersion . equals ( _STR ) ) ; }
34472	protected Set < FunctionInterface > findUnusedFunctions ( Set < UnitInterface > units ) { Set < FunctionInterface > allFunctions = new HashSet < FunctionInterface > ( ) ; Set < FunctionInterface > usedFunctions = new HashSet < FunctionInterface > ( ) ; for ( UnitInterface unit : units ) { List < FunctionInterface > unitFunctions = getUnitFunctions ( unit ) ; allFunctions . addAll ( unitFunctions ) ; for ( FunctionInterface unitFunction : unitFunctions ) { for ( FunctionInterface usedFunction : unitFunction . getCalledFunctions ( ) ) { usedFunctions . add ( usedFunction ) ; } } } allFunctions . removeAll ( usedFunctions ) ; return allFunctions ; }
14363	private static void addItemsToList ( int startIndex , int endIndex ) { for ( int i = startIndex ; i < endIndex ; i ++ ) { values . add ( new Integer ( i ) ) ; } }
42857	public static synchronized List < Proxy > noProxyList ( ) { if ( noProxyList == null ) { ArrayList < Proxy > list = new ArrayList < Proxy > ( _NUM ) ; list . add ( Proxy . NO_PROXY ) ; noProxyList = Collections . unmodifiableList ( list ) ; } return noProxyList ; }
55016	public void addIncludes ( String [ ] definitions ) { addStrings ( INCLUDES , definitions ) ; addStrings ( linker_more , INCLUDES , definitions ) ; newLinkerOptionsAfterCompile . add ( INCLUDES ) ; }
26691	protected void add ( double value , int group ) { if ( ( group < _NUM ) || ( group >= numberOfGroups ) ) { throw new IllegalArgumentException ( ) ; } data . add ( new RankedObservation ( value , group ) ) ; }
86781	public void tallyVariant ( VcfHeader header , VcfRecord rec ) { tallyVariant ( rec , header . getSampleNames ( ) ) ; }
41935	public int read ( byte [ ] b , int off , int len ) throws IOException { if ( closed ) { throw new IOException ( _STR ) ; } if ( eof ) { return - _NUM ; } if ( pos >= chunkSize ) { nextChunk ( ) ; if ( eof ) { return - _NUM ; } } len = Math . min ( len , chunkSize - pos ) ; int count = in . read ( b , off , len ) ; pos += count ; return count ; }
71923	public LDIFEntryReader ( final String ... ldifLines ) { super ( Arrays . asList ( ldifLines ) ) ; }
83238	public void updatePresonInfo ( ) { this . leftPerson = person2LeavingPersonInfo . get ( this . personId ) ; this . enteredPerson = person2EnteringPersonInfo . get ( this . personId ) ; }
3106	public MyMap remove ( int position ) { MyMap mm = null ; if ( position >= _NUM && position < getItemCount ( ) ) { mm = myMaps . remove ( position ) ; notifyItemRemoved ( position ) ; } return mm ; }
15405	public void presentLicenses ( boolean preAccept ) { LicenseSet licenses = licenseModule . getRequiredLicenses ( ) ; if ( preAccept ) { licenses . acceptAll ( ) ; } else { for ( License license : licenses ) { if ( license . isAccepted ( ) ) { continue ; } user . show ( _STR ) ; user . show ( license . getLicenseText ( ) ) ; String input = user . ask ( _STR ) ; if ( input != null && YES . startsWith ( input . toLowerCase ( ) ) ) { license . accept ( ) ; } else { license . reject ( ) ; } } } }
10877	public void addGeoKey ( XTIFFField geoKey ) { geoKeyIndex . put ( new Integer ( geoKey . getTag ( ) ) , geoKey ) ; hasGeoKeys = _BOOL ; }
5745	public static GeoTimeSerie detect ( GeoTimeSerie gts , int alphabetSize , int wordLen , int windowLen , Collection < String > patterns , boolean standardizePAA ) throws WarpScriptException { GeoTimeSerie gtsPatterns = GTSHelper . bSAX ( gts , alphabetSize , wordLen , windowLen , standardizePAA ) ; GTSHelper . sort ( gtsPatterns ) ; GeoTimeSerie detected = new GeoTimeSerie ( gts . lastbucket , gts . bucketcount , gts . bucketspan , _NUM ) ; detected . setMetadata ( gts . getMetadata ( ) ) ; int lastidx = - _NUM ; for ( int i = _NUM ; i < gtsPatterns . values ; i ++ ) { if ( ! patterns . contains ( gtsPatterns . stringValues [ i ] ) ) { continue ; } for ( int j = _NUM ; j < windowLen ; j ++ ) { if ( i + j > lastidx ) { lastidx = i + j ; GTSHelper . setValue ( detected , GTSHelper . tickAtIndex ( gts , lastidx ) , GTSHelper . locationAtIndex ( gts , lastidx ) , GTSHelper . elevationAtIndex ( gts , lastidx ) , GTSHelper . valueAtIndex ( gts , lastidx ) , _BOOL ) ; } } } return detected ; }
52801	private StringBuilder debugDumpCandidates ( StringBuilder msg , List < ? extends Itemset > candidates , VectorFieldTypeInformation < BitVector > meta ) { msg . append ( _STR ) ; for ( Itemset itemset : candidates ) { msg . append ( _STR ) ; itemset . appendTo ( msg , meta ) ; msg . append ( _STR ) ; } return msg ; }
73618	public static final void writeBooleanArrayXml ( boolean [ ] val , String name , XmlSerializer out ) throws XmlPullParserException , java . io . IOException { if ( val == null ) { out . startTag ( null , _STR ) ; out . endTag ( null , _STR ) ; return ; } out . startTag ( null , _STR ) ; if ( name != null ) { out . attribute ( null , _STR , name ) ; } final int N = val . length ; out . attribute ( null , _STR , Integer . toString ( N ) ) ; for ( int i = _NUM ; i < N ; i ++ ) { out . startTag ( null , _STR ) ; out . attribute ( null , _STR , Boolean . toString ( val [ i ] ) ) ; out . endTag ( null , _STR ) ; } out . endTag ( null , _STR ) ; }
42092	public void addOutboundRule ( final OutboundRule outboundRule ) { outboundRule . setId ( outboundRuleIdCounter ++ ) ; outboundRules . add ( outboundRule ) ; }
63970	public Skype ( String username , String password ) { this . username = username ; this . password = password ; }
12387	private void stopDrag ( MotionEvent ev ) { mTouchMode = TOUCH_MODE_IDLE ; final boolean commitChange = ev . getAction ( ) == MotionEvent . ACTION_UP && isEnabled ( ) ; final boolean oldState = isChecked ( ) ; final boolean newState ; if ( commitChange ) { mVelocityTracker . computeCurrentVelocity ( _NUM ) ; final float xvel = mVelocityTracker . getXVelocity ( ) ; if ( Math . abs ( xvel ) > mMinFlingVelocity ) { newState = ViewUtils . isLayoutRtl ( this ) ? ( xvel < _NUM ) : ( xvel > _NUM ) ; } else { newState = getTargetCheckedState ( ) ; } } else { newState = oldState ; } if ( newState != oldState ) { playSoundEffect ( SoundEffectConstants . CLICK ) ; } setChecked ( newState ) ; cancelSuperTouch ( ev ) ; }
49083	private void addFlags ( int newflags ) { flags = getLayoutFlags ( ) | newflags ; }
9615	public static String matchCertificate ( KeyStore keyStore , X509Certificate cert ) throws CryptoException { try { for ( Enumeration aliases = keyStore . aliases ( ) ; aliases . hasMoreElements ( ) ; ) { String alias = ( String ) aliases . nextElement ( ) ; if ( keyStore . isCertificateEntry ( alias ) ) { X509Certificate compCert = X509CertUtil . convertCertificate ( keyStore . getCertificate ( alias ) ) ; if ( cert . equals ( compCert ) ) { return alias ; } } } return null ; } catch ( KeyStoreException ex ) { throw new CryptoException ( res . getString ( _STR ) , ex ) ; } }
78110	void purgeLastArticles ( int amountToPurge ) { if ( ! isDBAvailable ( ) ) return ; long time = System . currentTimeMillis ( ) ; String query = _STR + TABLE_ARTICLES + _STR + ( Utils . ARTICLE_LIMIT - amountToPurge + _STR ) ; safelyDeleteArticles ( query , null ) ; Log . d ( TAG , _STR + ( System . currentTimeMillis ( ) - time ) + _STR ) ; }
41815	public void reclaimViews ( List < View > views ) { int childCount = getChildCount ( ) ; RecyclerListener listener = mRecycler . mRecyclerListener ; for ( int i = _NUM ; i < childCount ; i ++ ) { View child = getChildAt ( i ) ; TwoWayAbsListView . LayoutParams lp = ( TwoWayAbsListView . LayoutParams ) child . getLayoutParams ( ) ; if ( lp != null && mRecycler . shouldRecycleViewType ( lp . viewType ) ) { views . add ( child ) ; if ( listener != null ) { listener . onMovedToScrapHeap ( child ) ; } } } mRecycler . reclaimScrapViews ( views ) ; removeAllViewsInLayout ( ) ; }
30876	ProxyVerifier ( TxnManager serverProxy , Uuid proxyID ) { if ( ! ( serverProxy instanceof RemoteMethodControl ) ) { throw new UnsupportedOperationException ( _STR ) ; } else if ( ! ( serverProxy instanceof TrustEquivalence ) ) { throw new UnsupportedOperationException ( _STR + _STR ) ; } else if ( proxyID == null ) { throw new IllegalArgumentException ( _STR ) ; } this . serverProxy = ( RemoteMethodControl ) serverProxy ; this . proxyID = proxyID ; }
71796	public void paint ( Graphics g ) { g . translate ( _NUM , translateY ) ; super . paint ( g ) ; }
57350	private void beforeKey ( ) throws JSONException { Scope context = peek ( ) ; if ( context == Scope . NONEMPTY_OBJECT ) { out . append ( _STR ) ; } else if ( context != Scope . EMPTY_OBJECT ) { throw new JSONException ( _STR ) ; } newline ( ) ; replaceTop ( Scope . DANGLING_KEY ) ; }
39591	public static void transfer ( InputStream in , OutputStream out , int bufferSize ) throws IOException { byte [ ] buffer = new byte [ bufferSize ] ; int bytesRead ; while ( ( bytesRead = in . read ( buffer ) ) != - _NUM ) { out . write ( buffer , _NUM , bytesRead ) ; } }
5171	public void testFileDirectory ( ) throws Exception { Properties properties = loadProperties ( _STR ) ; assertEquals ( _STR , properties . getProperty ( _STR ) ) ; }
72368	private static long addAndCheck ( long a , long b , Localizable pattern ) throws MathRuntimeException { final long result = a + b ; if ( ! ( ( a ^ b ) < _NUM || ( a ^ result ) >= _NUM ) ) { throw new MathRuntimeException ( pattern , a , b ) ; } return result ; }
85097	private void serializeCompactRDFGeneralQualifier ( int indent , XMPNode node ) throws IOException , XMPException { write ( _STR ) ; writeNewline ( ) ; serializeCanonicalRDFProperty ( node , _BOOL , _BOOL , indent + _NUM ) ; for ( Iterator iq = node . iterateQualifier ( ) ; iq . hasNext ( ) ; ) { XMPNode qualifier = ( XMPNode ) iq . next ( ) ; serializeCanonicalRDFProperty ( qualifier , _BOOL , _BOOL , indent + _NUM ) ; } }
44852	private JCheckBox addCheckbox ( String text , Container container ) { JCheckBox checkbox = new JCheckBox ( text ) ; checkbox . setAlignmentX ( Component . LEFT_ALIGNMENT ) ; checkbox . setBorder ( BorderFactory . createEmptyBorder ( _NUM , _NUM , _NUM , _NUM ) ) ; container . add ( checkbox ) ; return checkbox ; }
7646	@ Override public void drawBackground ( Graphics2D g2 , CategoryPlot plot , Rectangle2D dataArea ) { float x0 = ( float ) dataArea . getX ( ) ; float x1 = x0 + ( float ) Math . abs ( this . xOffset ) ; float x3 = ( float ) dataArea . getMaxX ( ) ; float x2 = x3 - ( float ) Math . abs ( this . xOffset ) ; float y0 = ( float ) dataArea . getMaxY ( ) ; float y1 = y0 - ( float ) Math . abs ( this . yOffset ) ; float y3 = ( float ) dataArea . getMinY ( ) ; float y2 = y3 + ( float ) Math . abs ( this . yOffset ) ; GeneralPath clip = new GeneralPath ( ) ; clip . moveTo ( x0 , y0 ) ; clip . lineTo ( x0 , y2 ) ; clip . lineTo ( x1 , y3 ) ; clip . lineTo ( x3 , y3 ) ; clip . lineTo ( x3 , y1 ) ; clip . lineTo ( x2 , y0 ) ; clip . closePath ( ) ; Composite originalComposite = g2 . getComposite ( ) ; g2 . setComposite ( AlphaComposite . getInstance ( AlphaComposite . SRC_OVER , plot . getBackgroundAlpha ( ) ) ) ; Paint backgroundPaint = plot . getBackgroundPaint ( ) ; if ( backgroundPaint != null ) { g2 . setPaint ( backgroundPaint ) ; g2 . fill ( clip ) ; } GeneralPath leftWall = new GeneralPath ( ) ; leftWall . moveTo ( x0 , y0 ) ; leftWall . lineTo ( x0 , y2 ) ; leftWall . lineTo ( x1 , y3 ) ; leftWall . lineTo ( x1 , y1 ) ; leftWall . closePath ( ) ; g2 . setPaint ( getWallPaint ( ) ) ; g2 . fill ( leftWall ) ; GeneralPath bottomWall = new GeneralPath ( ) ; bottomWall . moveTo ( x0 , y0 ) ; bottomWall . lineTo ( x1 , y1 ) ; bottomWall . lineTo ( x3 , y1 ) ; bottomWall . lineTo ( x2 , y0 ) ; bottomWall . closePath ( ) ; g2 . setPaint ( getWallPaint ( ) ) ; g2 . fill ( bottomWall ) ; g2 . setPaint ( Color . lightGray ) ; Line2D corner = new Line2D . Double ( x0 , y0 , x1 , y1 ) ; g2 . draw ( corner ) ; corner . setLine ( x1 , y1 , x1 , y3 ) ; g2 . draw ( corner ) ; corner . setLine ( x1 , y1 , x3 , y1 ) ; g2 . draw ( corner ) ; Image backgroundImage = plot . getBackgroundImage ( ) ; if ( backgroundImage != null ) { Rectangle2D adjusted = new Rectangle2D . Double ( dataArea . getX ( ) + getXOffset ( ) , dataArea . getY ( ) , dataArea . getWidth ( ) - getXOffset ( ) , dataArea . getHeight ( ) - getYOffset ( ) ) ; plot . drawBackgroundImage ( g2 , adjusted ) ; } g2 . setComposite ( originalComposite ) ; }
68817	public void push ( ) { state . cliprgn = g . getClipBounds ( ) ; stack . push ( state ) ; state = ( GraphicsState ) state . clone ( ) ; }
63344	public static void dropIndex ( Connection conn , String schema , String table ) throws SQLException { init ( conn ) ; PreparedStatement prep = conn . prepareStatement ( _STR + SCHEMA + _STR ) ; prep . setString ( _NUM , schema ) ; prep . setString ( _NUM , table ) ; ResultSet rs = prep . executeQuery ( ) ; if ( ! rs . next ( ) ) { return ; } int indexId = rs . getInt ( _NUM ) ; prep = conn . prepareStatement ( _STR + SCHEMA + _STR ) ; prep . setInt ( _NUM , indexId ) ; prep . execute ( ) ; createOrDropTrigger ( conn , schema , table , _BOOL ) ; prep = conn . prepareStatement ( _STR + SCHEMA + _STR ) ; while ( _BOOL ) { prep . setInt ( _NUM , indexId ) ; int deleted = prep . executeUpdate ( ) ; if ( deleted == _NUM ) { break ; } } prep = conn . prepareStatement ( _STR + SCHEMA + _STR + _STR + SCHEMA + _STR ) ; while ( _BOOL ) { int deleted = prep . executeUpdate ( ) ; if ( deleted == _NUM ) { break ; } } }
82307	public E peek ( ) { if ( isEmpty ( ) ) { return null ; } return elements [ _NUM ] ; }
19628	public synchronized int add ( IAudioProcessor processor ) { processors . add ( processor ) ; buildFinalProcessor ( ) ; return processors . indexOf ( processor ) ; }
40177	public ScriptBuilder data ( int index , byte [ ] data ) { byte [ ] copy = Arrays . copyOf ( data , data . length ) ; int opcode ; if ( data . length == _NUM ) { opcode = OP_0 ; } else if ( data . length == _NUM ) { byte b = data [ _NUM ] ; if ( b >= _NUM && b <= _NUM ) opcode = Script . encodeToOpN ( b ) ; else opcode = _NUM ; } else if ( data . length < OP_PUSHDATA1 ) { opcode = data . length ; } else if ( data . length < _NUM ) { opcode = OP_PUSHDATA1 ; } else if ( data . length < _NUM ) { opcode = OP_PUSHDATA2 ; } else { throw new RuntimeException ( _STR ) ; } return addChunk ( index , new ScriptChunk ( opcode , copy ) ) ; }
14643	public void initialize ( Map configParams ) { String delimiterConfig = ( String ) configParams . get ( PolicyConfig . RESOURCE_COMPARATOR_DELIMITER ) ; if ( delimiterConfig != null ) { this . delimiter = delimiterConfig ; } String caseConfig = ( String ) configParams . get ( PolicyConfig . RESOURCE_COMPARATOR_CASE_SENSITIVE ) ; if ( caseConfig != null ) { if ( caseConfig . equals ( _STR ) ) { this . caseSensitive = _BOOL ; } else if ( caseConfig . equals ( _STR ) ) { this . caseSensitive = _BOOL ; } else { this . caseSensitive = _BOOL ; } } String wildcardConfig = ( String ) configParams . get ( PolicyConfig . RESOURCE_COMPARATOR_WILDCARD ) ; if ( wildcardConfig != null ) { this . wildcard = wildcardConfig ; } String oneLevelWildcardConfig = ( String ) configParams . get ( PolicyConfig . RESOURCE_COMPARATOR_ONE_LEVEL_WILDCARD ) ; if ( oneLevelWildcardConfig != null ) { this . oneLevelWildcard = oneLevelWildcardConfig ; } if ( debug . messageEnabled ( ) ) { debug . message ( _STR + _STR + delimiter + _STR + wildcard + _STR + oneLevelWildcard + _STR + caseConfig ) ; } oneLevelWildcardLength = oneLevelWildcard . length ( ) ; wildcardLength = wildcard . length ( ) ; if ( oneLevelWildcard . indexOf ( wildcard ) != - _NUM ) { wildcardEmbedded = _BOOL ; } else { wildcardEmbedded = _BOOL ; } if ( wildcard . indexOf ( oneLevelWildcard ) != - _NUM ) { oneLevelWildcardEmbedded = _BOOL ; } else { oneLevelWildcardEmbedded = _BOOL ; } if ( debug . messageEnabled ( ) ) { debug . message ( _STR + wildcardEmbedded + _STR + oneLevelWildcardEmbedded ) ; } return ; }
18392	protected void deleteLeastUsedEntry ( ) { try { poolLock . lock ( ) ; BasicPoolEntry entry = freeConnections . remove ( ) ; if ( entry != null ) { deleteEntry ( entry ) ; } else if ( log . isDebugEnabled ( ) ) { log . debug ( _STR ) ; } } finally { poolLock . unlock ( ) ; } }
66298	private String convertLessThanOneThousand ( int number ) { String soFar ; if ( number % _NUM < _NUM ) { soFar = numNames [ number % _NUM ] ; number /= _NUM ; } else { soFar = numNames [ number % _NUM ] ; number /= _NUM ; String s = Integer . toString ( number ) ; if ( s . endsWith ( _STR ) && ! soFar . equals ( _STR ) ) soFar = _STR + soFar . trim ( ) ; else if ( soFar . equals ( _STR ) ) soFar = tensNames [ number % _NUM ] + soFar ; else soFar = tensNames [ number % _NUM ] + _STR + soFar ; number /= _NUM ; } if ( number == _NUM ) return tensNames [ number % _NUM ] + soFar ; if ( number > _NUM ) soFar = _STR + soFar ; if ( number == _NUM && ! soFar . equals ( _STR ) ) number = _NUM ; return numNames [ number ] + _STR + soFar ; }
68399	public static boolean isEmbeddedBase64Image ( String uri ) { return ( uri != null && uri . startsWith ( _STR ) ) ; }
45984	void changeState ( int newState ) { int oldState ; synchronized ( stateLock ) { if ( state == newState ) return ; oldState = state ; state = newState ; stateLock . notifyAll ( ) ; } sendStateChangeNotification ( oldState , newState ) ; }
59706	private int parseLinkLabel ( ) { String m = match ( LINK_LABEL ) ; return m == null ? _NUM : m . length ( ) ; }
50322	private static void insertCommentsInNode ( Node node , List < Comment > commentsToAttribute ) { if ( commentsToAttribute . size ( ) == _NUM ) return ; List < Node > children = node . getChildrenNodes ( ) ; PositionUtils . sortByBeginPosition ( children ) ; for ( Node child : children ) { List < Comment > commentsInsideChild = new LinkedList < Comment > ( ) ; for ( Comment c : commentsToAttribute ) { if ( PositionUtils . nodeContains ( child , c , _doNotConsiderAnnotationsAsNodeStartForCodeAttribution ) ) { commentsInsideChild . add ( c ) ; } } commentsToAttribute . removeAll ( commentsInsideChild ) ; insertCommentsInNode ( child , commentsInsideChild ) ; } List < Comment > attributedComments = new LinkedList < Comment > ( ) ; for ( Comment comment : commentsToAttribute ) { if ( comment . isLineComment ( ) ) { for ( Node child : children ) { if ( child . getEndLine ( ) == comment . getBeginLine ( ) ) { if ( attributeLineCommentToNodeOrChild ( child , comment . asLineComment ( ) ) ) { attributedComments . add ( comment ) ; } } } } } Comment previousComment = null ; attributedComments = new LinkedList < Comment > ( ) ; List < Node > childrenAndComments = new LinkedList < Node > ( ) ; childrenAndComments . addAll ( children ) ; childrenAndComments . addAll ( commentsToAttribute ) ; PositionUtils . sortByBeginPosition ( childrenAndComments , _doNotConsiderAnnotationsAsNodeStartForCodeAttribution ) ; for ( Node thing : childrenAndComments ) { if ( thing instanceof Comment ) { previousComment = ( Comment ) thing ; if ( ! previousComment . isOrphan ( ) ) { previousComment = null ; } } else { if ( previousComment != null && ! thing . hasComment ( ) ) { if ( ! _doNotAssignCommentsPreceedingEmptyLines || ! thereAreLinesBetween ( previousComment , thing ) ) { thing . setComment ( previousComment ) ; attributedComments . add ( previousComment ) ; previousComment = null ; } } } } commentsToAttribute . removeAll ( attributedComments ) ; for ( Comment c : commentsToAttribute ) { if ( c . isOrphan ( ) ) { node . addOrphanComment ( c ) ; } } }
41810	public static String readFileAsString ( File file ) throws FileNotFoundException { return readFileAsString ( file . getAbsolutePath ( ) ) ; }
68091	protected void onException ( final WroRuntimeException e ) { throw e ; }
3261	public synchronized void checkAccess ( LicenseCheckerCallback callback ) { if ( mPolicy . allowAccess ( ) ) { Log . i ( TAG , _STR ) ; callback . allow ( Policy . LICENSED ) ; } else { LicenseValidator validator = new LicenseValidator ( mPolicy , new NullDeviceLimiter ( ) , callback , generateNonce ( ) , mPackageName , mVersionCode ) ; if ( mService == null ) { Log . i ( TAG , _STR ) ; try { boolean bindResult = mContext . bindService ( new Intent ( new String ( Base64 . decode ( _STR ) ) ) , this , Context . BIND_AUTO_CREATE ) ; if ( bindResult ) { mPendingChecks . offer ( validator ) ; } else { Log . e ( TAG , _STR ) ; handleServiceConnectionError ( validator ) ; } } catch ( SecurityException e ) { callback . applicationError ( LicenseCheckerCallback . ERROR_MISSING_PERMISSION ) ; } catch ( Base64DecoderException e ) { e . printStackTrace ( ) ; } } else { mPendingChecks . offer ( validator ) ; runChecks ( ) ; } } }
22900	public void close ( ) { if ( ! isOpen ) return ; Log . d ( TAG , _STR ) ; loadingLock . lock ( ) ; try { save ( ) ; if ( saveFileStream != null ) { SavingHelper . close ( saveFileStream ) ; saveFileStream = null ; } savingDisabled = _BOOL ; isOpen = _BOOL ; Log . i ( TAG , _STR ) ; } finally { loadingLock . unlock ( ) ; } }
43077	protected int selectOperator ( ) { lastUpdate ++ ; if ( ( lastUpdate >= UPDATE_WINDOW ) || ( probabilities == null ) ) { lastUpdate = _NUM ; probabilities = getOperatorProbabilities ( ) ; } double rand = PRNG . nextDouble ( ) ; double sum = _NUM ; for ( int i = _NUM ; i < operators . size ( ) ; i ++ ) { sum += probabilities [ i ] ; if ( sum > rand ) { return i ; } } throw new IllegalStateException ( ) ; }
72991	@ Override public List chunkString ( String sToChunk ) { Integer [ ] iRes = splitPointsByDelimiterList ( sToChunk , getDelimiters ( ) ) ; String [ ] sRes = splitStringByDelimiterPoints ( sToChunk , iRes ) ; return Arrays . asList ( sRes ) ; }
25782	public static String convertBooleanArrToString ( Boolean [ ] noDictionaryDimsMapping ) { StringBuilder builder = new StringBuilder ( ) ; int index = _NUM ; for ( ; index < noDictionaryDimsMapping . length ; index ++ ) { builder . append ( noDictionaryDimsMapping [ index ] ) ; builder . append ( CarbonCommonConstants . COMA_SPC_CHARACTER ) ; } int lastIndex = builder . lastIndexOf ( CarbonCommonConstants . COMA_SPC_CHARACTER ) ; String str = - _NUM != lastIndex ? builder . substring ( _NUM , lastIndex ) : builder . toString ( ) ; return str ; }
48589	public ByteBuffer decodeBufferToByteBuffer ( String inputString ) throws IOException { return ByteBuffer . wrap ( decodeBuffer ( inputString ) ) ; }
38329	public void clear ( ) { m_Model . clear ( ) ; setButtons ( null ) ; }
680	public static int brighter ( int c ) { int r = red ( c ) , g = green ( c ) , b = blue ( c ) ; int i = ( int ) ( _NUM / ( _NUM - scale ) ) ; if ( r == _NUM && g == _NUM && b == _NUM ) { return rgba ( i , i , i , alpha ( c ) ) ; } if ( r > _NUM && r < i ) r = i ; if ( g > _NUM && g < i ) g = i ; if ( b > _NUM && b < i ) b = i ; return rgba ( Math . min ( _NUM , ( int ) ( r / scale ) ) , Math . min ( _NUM , ( int ) ( g / scale ) ) , Math . min ( _NUM , ( int ) ( b / scale ) ) , alpha ( c ) ) ; }
81990	public void shutdown ( ) { running = _BOOL ; if ( networkThreads != null ) { for ( NetworkThread n : networkThreads ) { n . stopped = _BOOL ; } } networkThreads = null ; synchronized ( LOCK ) { LOCK . notifyAll ( ) ; } }
73911	public SerialMessage ( byte [ ] a ) { super ( String . valueOf ( a ) ) ; setBinary ( _BOOL ) ; }
49295	@ Override @ SuppressWarnings ( _STR ) public void completed ( int bytesTransferred , boolean canInvokeDirect ) { if ( bytesTransferred == _NUM ) { bytesTransferred = - _NUM ; } else { updateBuffers ( bytesTransferred ) ; } releaseBuffers ( ) ; synchronized ( result ) { if ( result . isDone ( ) ) return ; enableReading ( ) ; if ( scatteringRead ) { result . setResult ( ( V ) Long . valueOf ( bytesTransferred ) ) ; } else { result . setResult ( ( V ) Integer . valueOf ( bytesTransferred ) ) ; } } if ( canInvokeDirect ) { Invoker . invokeUnchecked ( result ) ; } else { Invoker . invoke ( result ) ; } }
63054	public void writeGolomb ( int divisor , int value ) { int q = value / divisor ; for ( int i = _NUM ; i < q ; i ++ ) { writeBit ( _NUM ) ; } writeBit ( _NUM ) ; int r = value - q * divisor ; int bit = _NUM - Integer . numberOfLeadingZeros ( divisor - _NUM ) ; if ( r < ( ( _NUM << bit ) - divisor ) ) { bit -- ; } else { r += ( _NUM << bit ) - divisor ; } for ( ; bit >= _NUM ; bit -- ) { writeBit ( ( r > > > bit ) & _NUM ) ; } }
667	public void addForce ( Force f ) { if ( f . isItemForce ( ) ) { if ( iforces . length == iflen ) { Force [ ] newf = new Force [ iflen + _NUM ] ; System . arraycopy ( iforces , _NUM , newf , _NUM , iforces . length ) ; iforces = newf ; } iforces [ iflen ++ ] = f ; } if ( f . isSpringForce ( ) ) { if ( sforces . length == sflen ) { Force [ ] newf = new Force [ sflen + _NUM ] ; System . arraycopy ( sforces , _NUM , newf , _NUM , sforces . length ) ; sforces = newf ; } sforces [ sflen ++ ] = f ; } }
83907	private static MetricValue number_to_metric_value_ ( Number elem ) { if ( elem == null ) return MetricValue . EMPTY ; final String num = elem . toString ( ) ; try { return MetricValue . fromIntValue ( Long . parseLong ( num ) ) ; } catch ( NumberFormatException ex ) { } try { return MetricValue . fromDblValue ( Double . parseDouble ( num ) ) ; } catch ( NumberFormatException ex ) { } return MetricValue . fromStrValue ( num ) ; }
86648	public boolean overlaps ( String sequence , int start , int end ) { if ( start == MISSING || end == MISSING || end < start ) { throw new IllegalArgumentException ( ) ; } if ( ! mSequence . equals ( sequence ) ) { return _BOOL ; } if ( ( mEnd != MISSING && start >= mEnd ) || ( end <= mStart ) ) { return _BOOL ; } return _BOOL ; }
9363	public OkapiBM25 ( double k1 , double b ) { if ( Double . isNaN ( k1 ) || Double . isInfinite ( k1 ) || k1 < _NUM ) throw new IllegalArgumentException ( _STR + k1 ) ; this . k1 = k1 ; if ( Double . isNaN ( b ) || b < _NUM || b > _NUM ) throw new IllegalArgumentException ( _STR + b ) ; this . b = b ; }
66371	protected void prepare ( ) { for ( ProcessInfoParameter para : getParameter ( ) ) { String name = para . getParameterName ( ) ; if ( para . getParameter ( ) == null ) ; else if ( name . equals ( PARAM_M_Warehouse_ID ) ) p_M_Warehouse_ID = para . getParameterAsInt ( ) ; else log . log ( Level . SEVERE , _STR + name ) ; } p_C_Invoice_ID = getRecord_ID ( ) ; }
4231	public boolean isConfigured ( ) { LOG . debug ( _STR + url ) ; return url != null && ! url . isEmpty ( ) ; }
56259	public static String [ ] commaDelimitedListToStringArray ( String str ) { return delimitedListToStringArray ( str , _STR ) ; }
25909	@ Override public byte [ ] readByteArray ( String filePath , long offset , int length ) { FileChannel fileChannel = updateCache ( filePath ) ; ByteBuffer byteBffer = read ( fileChannel , length , offset ) ; return byteBffer . array ( ) ; }
42459	private static void FatalError ( JNIEnvironment env , Address messageAddress ) { if ( traceJNI ) VM . sysWrite ( _STR ) ; RuntimeEntrypoints . checkJNICountDownToGC ( ) ; try { VM . sysWrite ( JNIGenericHelpers . createStringFromC ( messageAddress ) ) ; System . exit ( EXIT_STATUS_JNI_TROUBLE ) ; } catch ( Throwable unexpected ) { if ( traceJNI ) unexpected . printStackTrace ( System . err ) ; System . exit ( EXIT_STATUS_RECURSIVELY_SHUTTING_DOWN ) ; } }
74438	public boolean makeBackupFile ( String directory , File file ) { if ( file == null ) { log . info ( _STR ) ; } else if ( file . canWrite ( ) ) { String backupFullName = directory + File . separator + createFileNameWithDate ( file . getName ( ) ) ; if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + backupFullName ) ; } File backupFile = findFile ( backupFullName ) ; if ( backupFile != null ) { if ( backupFile . delete ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + backupFullName ) ; } } } else { backupFile = new File ( backupFullName ) ; } File parentDir = backupFile . getParentFile ( ) ; if ( ! parentDir . exists ( ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + parentDir . getName ( ) ) ; } if ( ! parentDir . mkdirs ( ) ) { log . error ( _STR ) ; return _BOOL ; } } if ( file . renameTo ( new File ( backupFullName ) ) ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + backupFullName ) ; } } else { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + backupFullName ) ; } return _BOOL ; } } return _BOOL ; }
18318	public final void pushPair ( int v1 , int v2 ) { if ( null == m_map ) { m_map = new int [ m_blocksize ] ; m_mapSize = m_blocksize ; } else { if ( ( m_firstFree + _NUM ) >= m_mapSize ) { m_mapSize += m_blocksize ; int newMap [ ] = new int [ m_mapSize ] ; System . arraycopy ( m_map , _NUM , newMap , _NUM , m_firstFree ) ; m_map = newMap ; } } m_map [ m_firstFree ] = v1 ; m_map [ m_firstFree + _NUM ] = v2 ; m_firstFree += _NUM ; }
19879	public void removeStorage ( ) throws BackupException { logger . debug ( _STR + dataDirSpec . getAbsolutePath ( ) ) ; processHelper . exec ( _STR , rmCmd ) ; }
54756	private void appendContainerConfig ( DockerSlaveTemplate slaveTemplate , CreateContainerCmd containerConfig ) { Map < String , String > labels = containerConfig . getLabels ( ) ; if ( labels == null ) { labels = new HashMap < > ( ) ; } labels . put ( DOCKER_CLOUD_LABEL , getDisplayName ( ) ) ; labels . put ( DOCKER_TEMPLATE_LABEL , slaveTemplate . getId ( ) ) ; containerConfig . withLabels ( labels ) ; }
79945	ReadOnlyGameSettings ( ) { }
15002	public void deleteUsers ( Set users ) throws AMException , SSOException { Iterator iter = users . iterator ( ) ; while ( iter . hasNext ( ) ) { String userDN = ( String ) iter . next ( ) ; AMUser user = new AMUserImpl ( super . token , userDN ) ; user . delete ( ) ; } }
45385	@ Override public boolean accept ( File file ) { String name = file . getName ( ) ; for ( String wildcard : wildcards ) { if ( FilenameUtils . wildcardMatch ( name , wildcard , caseSensitivity ) ) { return _BOOL ; } } return _BOOL ; }
73882	public void removeRegion ( Region r ) { regions . remove ( r ) ; }
77772	public static void silentCloseInputStream ( InputStream is ) { try { if ( is != null ) { is . close ( ) ; } } catch ( IOException e ) { log . w ( LOG_TAG , _STR , e ) ; } }
71977	@ Override public void startElement ( String uri , String localName , String qName , Attributes attributes ) throws SAXException { if ( requestID == null && localName . equals ( _STR ) ) { requestID = attributes . getValue ( _STR ) ; } super . startElement ( uri , localName , qName , attributes ) ; }
25281	public void stop ( int timeout ) throws InterruptedException { if ( ! isclosed . compareAndSet ( _BOOL , _BOOL ) ) { return ; } List < WebSocket > socketsToClose = null ; synchronized ( connections ) { socketsToClose = new ArrayList < WebSocket > ( connections ) ; } for ( WebSocket ws : socketsToClose ) { ws . close ( CloseFrame . GOING_AWAY ) ; } synchronized ( this ) { if ( selectorthread != null ) { if ( Thread . currentThread ( ) != selectorthread ) { } if ( selectorthread != Thread . currentThread ( ) ) { if ( socketsToClose . size ( ) > _NUM ) selectorthread . join ( timeout ) ; selectorthread . interrupt ( ) ; selectorthread . join ( ) ; } } } }
17048	public Storage ( ) { this ( new File ( getTemporaryStorageDirectoryString ( ) ) ) ; }
7660	protected void calculateItemWidth ( CategoryPlot plot , Rectangle2D dataArea , int rendererIndex , CategoryItemRendererState state ) { CategoryAxis domainAxis = getDomainAxis ( plot , rendererIndex ) ; CategoryDataset dataset = plot . getDataset ( rendererIndex ) ; if ( dataset != null ) { int columns = dataset . getColumnCount ( ) ; int rows = state . getVisibleSeriesCount ( ) >= _NUM ? state . getVisibleSeriesCount ( ) : dataset . getRowCount ( ) ; double space = _NUM ; PlotOrientation orientation = plot . getOrientation ( ) ; if ( orientation == PlotOrientation . HORIZONTAL ) { space = dataArea . getHeight ( ) ; } else if ( orientation == PlotOrientation . VERTICAL ) { space = dataArea . getWidth ( ) ; } double maxWidth = space * getMaximumItemWidth ( ) ; double categoryMargin = _NUM ; double currentItemMargin = _NUM ; if ( columns > _NUM ) { categoryMargin = domainAxis . getCategoryMargin ( ) ; } if ( rows > _NUM ) { currentItemMargin = getItemMargin ( ) ; } double used = space * ( _NUM - domainAxis . getLowerMargin ( ) - domainAxis . getUpperMargin ( ) - categoryMargin - currentItemMargin ) ; if ( ( rows * columns ) > _NUM ) { state . setBarWidth ( Math . min ( used / ( rows * columns ) , maxWidth ) ) ; } else { state . setBarWidth ( Math . min ( used , maxWidth ) ) ; } } }
10649	@ RequiresPermission ( Manifest . permission . CAMERA ) public CameraSource start ( ) throws IOException { synchronized ( mCameraLock ) { if ( mCamera != null ) { return this ; } mCamera = createCamera ( ) ; if ( Build . VERSION . SDK_INT >= Build . VERSION_CODES . HONEYCOMB ) { mDummySurfaceTexture = new SurfaceTexture ( DUMMY_TEXTURE_NAME ) ; mCamera . setPreviewTexture ( mDummySurfaceTexture ) ; } else { mDummySurfaceView = new SurfaceView ( mContext ) ; mCamera . setPreviewDisplay ( mDummySurfaceView . getHolder ( ) ) ; } mCamera . startPreview ( ) ; isSafeToTakePicture = _BOOL ; mProcessingThread = new Thread ( mFrameProcessor ) ; mFrameProcessor . setActive ( _BOOL ) ; mProcessingThread . start ( ) ; } return this ; }
36207	public void addBreakpointListener ( final BreakpointListener listener ) { breakpointListeners . add ( listener ) ; }
47738	public void update ( Graphics g ) { if ( isShowing ( ) ) { if ( ! ( peer instanceof LightweightPeer ) ) { g . clearRect ( _NUM , _NUM , width , height ) ; } paint ( g ) ; } }
47055	private void releaseWaiters ( int phase ) { QNode q ; Thread t ; AtomicReference < QNode > head = ( phase & _NUM ) == _NUM ? evenQ : oddQ ; while ( ( q = head . get ( ) ) != null && q . phase != ( int ) ( root . state > > > PHASE_SHIFT ) ) { if ( head . compareAndSet ( q , q . next ) && ( t = q . thread ) != null ) { q . thread = null ; LockSupport . unpark ( t ) ; } } }
79441	public static DateFormat toDateTimeFormat ( String dateTimeFormat , TimeZone tz , Locale locale ) { DateFormat df = null ; if ( UtilValidate . isEmpty ( dateTimeFormat ) ) { df = DateFormat . getDateTimeInstance ( DateFormat . SHORT , DateFormat . MEDIUM , locale ) ; } else { df = new SimpleDateFormat ( dateTimeFormat , locale == null ? Locale . getDefault ( ) : locale ) ; } df . setTimeZone ( tz ) ; return df ; }
6348	public static void printStackTrace ( Throwable e ) { try { Debug . printStackTrace ( e ) ; } catch ( Throwable f ) { e . printStackTrace ( ) ; } }
85466	@ Override public Void visitType ( TypeElement e , Void p ) { scan ( e . getTypeParameters ( ) , p ) ; checkCamelCase ( e , _BOOL ) ; super . visitType ( e , p ) ; return null ; }
80407	public Block ( boolean multiPush ) { this ( multiPush , _STR , null , Arrays . asList ( _STR , _STR ) ) ; }
38126	private double Poisson ( double x ) { return Math . exp ( - m_Lambda + ( x * Math . log ( m_Lambda ) ) - logFac ( x ) ) ; }
11778	protected Expression findExpression ( String source ) { if ( source != null && source . length ( ) > _NUM ) { source = source . trim ( ) ; if ( source . length ( ) == _NUM ) { return null ; } String leftSide = source ; String rightSide = null ; Connector op = findOp ( leftSide ) ; if ( op != null ) { rightSide = op . getRightSide ( leftSide ) ; leftSide = leftSide . substring ( _NUM , op . sourceLoc ) ; Expression leftExpression = findExpression ( leftSide ) ; Expression rightExpression = findExpression ( rightSide ) ; if ( leftExpression != null ) { op . addExpr ( leftExpression ) ; } if ( rightExpression != null ) { op . addExpr ( rightExpression ) ; } return op ; } op = findMiniOp ( leftSide ) ; if ( op != null ) { rightSide = op . getRightSide ( leftSide ) ; leftSide = leftSide . substring ( _NUM , op . sourceLoc ) ; Expression leftExpression = findExpression ( leftSide ) ; Expression rightExpression = findExpression ( rightSide ) ; if ( leftExpression != null ) { op . addExpr ( leftExpression ) ; } if ( rightExpression != null ) { op . addExpr ( rightExpression ) ; } return op ; } if ( logger . isLoggable ( Level . FINER ) ) { logger . finer ( _STR + source ) ; } return findMathOp ( source ) ; } return null ; }
190	void putChannel ( final StoredClientChannel channel ) { putChannel ( channel , _BOOL ) ; }
39883	private void deleteFilesInDir ( File dir ) { for ( File child : dir . listFiles ( ) ) { child . delete ( ) ; } }
83759	@ SuppressWarnings ( _STR ) public static void pipeInputToOutputStream ( InputStream in , File fileOut , boolean ignoreErrors ) throws IOException { if ( fileOut == null ) { logger . error ( _STR ) ; if ( ! ignoreErrors ) { throw new IOException ( _STR ) ; } } else { File parent = fileOut . getParentFile ( ) ; if ( parent != null && ! parent . exists ( ) ) { parent . mkdirs ( ) ; } OutputStream fileStream = null ; try { fileStream = new FileOutputStream ( fileOut ) ; pipeInputToOutputStream ( in , fileStream , _BOOL , ignoreErrors ) ; } catch ( IOException e ) { if ( fileStream != null ) { try { fileStream . close ( ) ; } catch ( IOException ex ) { logger . error ( _STR , ex . getMessage ( ) ) ; } } if ( ! ignoreErrors ) { throw e ; } } } }
71506	@ SuppressLint ( _STR ) void release ( ) { assert ( mProcessingThread . getState ( ) == State . TERMINATED ) ; mDetector . release ( ) ; mDetector = null ; }
56250	public static String trimLeadingCharacter ( String str , char leadingCharacter ) { if ( ! hasLength ( str ) ) { return str ; } StringBuilder sb = new StringBuilder ( str ) ; while ( sb . length ( ) > _NUM && sb . charAt ( _NUM ) == leadingCharacter ) { sb . deleteCharAt ( _NUM ) ; } return sb . toString ( ) ; }
67924	public E take ( ) throws InterruptedException { final ReentrantLock lock = this . lock ; lock . lockInterruptibly ( ) ; long t = now ( ) ; TenantQueue . Item item = null ; try { for ( ; ; ) { TenantQueue q = nextQueue ( t ) ; if ( q == null ) available . await ( ) ; else { long delay = q . next - t ; if ( delay <= _NUM ) { item = q . poll ( t ) ; return item == null ? null : item . element ; } else if ( leader != null ) available . await ( ) ; else { Thread thisThread = Thread . currentThread ( ) ; leader = thisThread ; try { available . awaitNanos ( delay ) ; } finally { if ( leader == thisThread ) leader = null ; } } } t = System . nanoTime ( ) ; } } finally { if ( leader == null && hasNext ( ) ) available . signal ( ) ; lock . unlock ( ) ; done ( item , t ) ; } }
70955	public boolean threadSafeTimeout ( long delayTime , TimeUnit unit , Action0 action ) { boolean scheduled = _BOOL ; Thread currentThread = Thread . currentThread ( ) ; if ( currentThread . equals ( dutyThread ) ) { timerWheel . newTimeout ( delayTime , unit , null ) ; } else { scheduled = actions . offer ( null ) ; } return scheduled ; }
3318	void submit ( ProcessAndDisplayImageTask task ) { initExecutorsIfNeed ( ) ; taskExecutorForCachedImages . execute ( task ) ; }
82169	void addAttributeSelection ( String exp ) { int index = exp . indexOf ( _STR ) ; String value = null ; int constraint = AttString . EQUALS ; if ( index != - _NUM ) { if ( index == _NUM ) { setTagId ( TAG_CSS_ILLEGAL_SELECTOR ) ; return ; } int opIndex = index ; char c = exp . charAt ( index - _NUM ) ; if ( c == _STR ) { constraint = AttString . CONTAINS_WORD ; opIndex -- ; } else if ( c == _STR ) { constraint = AttString . BEGINS_WITH ; opIndex -- ; } value = exp . substring ( index + _NUM ) ; if ( ( ( value . startsWith ( _STR ) ) && ( value . endsWith ( _STR ) ) ) || ( ( value . startsWith ( _STR ) ) && ( value . endsWith ( _STR ) ) ) ) { value = value . substring ( _NUM , value . length ( ) - _NUM ) ; } exp = exp . substring ( _NUM , opIndex ) ; } if ( attributeSelections == null ) { attributeSelections = new Vector ( ) ; } attributeSelections . addElement ( new AttString ( exp , constraint , value ) ) ; }
45459	private void createLeftOver ( ) { int lineLengthBytes = currentLastBytePos + _NUM ; if ( lineLengthBytes > _NUM ) { leftOver = new byte [ lineLengthBytes ] ; System . arraycopy ( data , _NUM , leftOver , _NUM , lineLengthBytes ) ; } else { leftOver = null ; } currentLastBytePos = - _NUM ; }
61981	public Value sample ( ) { int index = sampler . nextInt ( actionValues . size ( ) ) ; if ( actionValuesAsArray == null ) { actionValuesAsArray = actionValues . toArray ( new Value [ actionValues . size ( ) ] ) ; } return actionValuesAsArray [ index ] ; }
30973	@ Override public void channelClosed ( ChannelHandlerContext channelHandlerContext , ChannelStateEvent channelStateEvent ) throws Exception { curr_conns . decrementAndGet ( ) ; channelGroup . remove ( channelHandlerContext . getChannel ( ) ) ; }
74950	private static void configureHeadLessSimulation ( ) { System . setProperty ( _STR , _STR ) ; GAMA . setHeadLessMode ( ) ; }
22190	public static boolean isNextWindow ( URI id ) { return id == null || NEXT . equals ( id ) ; }
50403	public static boolean isVisible ( Class < ? > clazz , ClassLoader classLoader ) { if ( classLoader == null ) { return _BOOL ; } try { Class < ? > actualClass = classLoader . loadClass ( clazz . getName ( ) ) ; return ( clazz == actualClass ) ; } catch ( ClassNotFoundException ex ) { return _BOOL ; } }
40614	public byte [ ] remove ( QueueEvent event ) throws KeeperException , InterruptedException { TimerContext time = stats . time ( dir + _STR ) ; try { String path = event . getId ( ) ; String responsePath = dir + _STR + response_prefix + path . substring ( path . lastIndexOf ( _STR ) + _NUM ) ; if ( zookeeper . exists ( responsePath , _BOOL ) ) { zookeeper . setData ( responsePath , event . getBytes ( ) , _BOOL ) ; } byte [ ] data = zookeeper . getData ( path , null , null , _BOOL ) ; zookeeper . delete ( path , - _NUM , _BOOL ) ; return data ; } finally { time . stop ( ) ; } }
13709	public PropertyXMLBuilder ( ServiceSchema serviceSchema , AMModel model , Set attributeSchemas ) throws SMSException , SSOException { this . model = model ; this . serviceName = serviceSchema . getServiceName ( ) ; getServiceResourceBundle ( serviceSchema ) ; if ( serviceBundle != null ) { mapTypeToAttributeSchema = new HashMap ( attributeSchemas . size ( ) * _NUM ) ; mapTypeToAttributeSchema . put ( NULL_TYPE , attributeSchemas ) ; } }
11045	public boolean is ( String arg , boolean allowAbbr ) { if ( name . equalsIgnoreCase ( arg ) ) { return _BOOL ; } if ( allowAbbr && arg . length ( ) == _NUM ) { if ( arg . charAt ( _NUM ) == c ) { return _BOOL ; } } return _BOOL ; }
63000	static public void addAll ( List < String > list , String [ ] array ) { for ( String item : array ) list . add ( item ) ; }
23480	void remove ( SuperCardToast superCardToast ) { mList . remove ( superCardToast ) ; }
27817	public void test_vmstat_header_and_data_parse ( ) { final Pattern pattern = VMStatCollector . pattern ; final String header = _STR ; final String data = _STR ; { final String [ ] fields = pattern . split ( header . trim ( ) , _NUM ) ; for ( int i = _NUM ; i < fields . length ; i ++ ) { if ( log . isInfoEnabled ( ) ) log . info ( _STR + i + _STR + fields [ i ] + _STR ) ; } assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; assertField ( header , fields , _NUM , _STR ) ; } { final String [ ] fields = pattern . split ( data . trim ( ) , _NUM ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; assertField ( data , fields , _NUM , _STR ) ; } }
35115	public static SecretKeys generateKeyFromPassword ( String password , String salt ) throws GeneralSecurityException { return generateKeyFromPassword ( password , Base64 . decode ( salt , BASE64_FLAGS ) ) ; }
14253	private String partiallyEscapeAssertionValue ( String assertionValue ) { StringBuilder sb = new StringBuilder ( assertionValue . length ( ) ) ; for ( int j = _NUM ; j < assertionValue . length ( ) ; j ++ ) { char c = assertionValue . charAt ( j ) ; if ( c == _STR ) { sb . append ( c ) ; } else { sb . append ( Filter . escapeAssertionValue ( String . valueOf ( c ) ) ) ; } } return sb . toString ( ) ; }
54584	protected boolean filterLeftoverView ( ViewGroup parent , int childIndex ) { parent . removeViewAt ( childIndex ) ; return _BOOL ; }
18338	protected boolean declAlreadyDeclared ( String prefix ) { int startDecls = m_contextIndexes . peek ( ) ; java . util . Vector prefixMappings = m_prefixMappings ; int nDecls = prefixMappings . size ( ) ; for ( int i = startDecls ; i < nDecls ; i += _NUM ) { String prefixDecl = ( String ) prefixMappings . elementAt ( i ) ; if ( prefixDecl == null ) continue ; if ( prefixDecl . equals ( prefix ) ) return _BOOL ; } return _BOOL ; }
53644	@ Override public void step ( MessageLogger logger ) { try { addAgent ( ) ; env . step ( ) ; } catch ( Exception e ) { e . printStackTrace ( ) ; } }
64279	public static AttackStatus calculatePhysicalStatus ( Creature attacker , Creature attacked , boolean isMainHand ) { return calculatePhysicalStatus ( attacker , attacked , isMainHand , _NUM , _NUM , _BOOL , _BOOL ) ; }
72203	public T vertexProcessor ( final BiConsumer < Vertex , Map < String , Object > > vertexProcessor ) { this . vertexProcessor = Optional . ofNullable ( vertexProcessor ) ; return extendingClass . cast ( this ) ; }
46212	synchronized boolean release ( ) { d ( _STR ) ; if ( state == BUSY ) { state = IDLE ; idleSince = System . currentTimeMillis ( ) ; return _BOOL ; } else { return _BOOL ; } }
77467	private void validateReplicaAvailability ( Slice slice , String shard , String collectionName , int count ) { if ( slice != null ) { Collection < Replica > allReplicasForShard = slice . getReplicas ( ) ; if ( allReplicasForShard == null ) { throw new SolrException ( SolrException . ErrorCode . BAD_REQUEST , _STR + shard + _STR + collectionName ) ; } if ( allReplicasForShard . size ( ) == _NUM ) { throw new SolrException ( SolrException . ErrorCode . BAD_REQUEST , _STR + shard + _STR + collectionName + _STR ) ; } if ( allReplicasForShard . size ( ) <= count ) { throw new SolrException ( SolrException . ErrorCode . BAD_REQUEST , _STR + shard + _STR + collectionName + _STR + count + _STR + allReplicasForShard . size ( ) + _STR ) ; } } }
50310	default ClassDeclaration asClass ( ) { throw new UnsupportedOperationException ( String . format ( _STR , this ) ) ; }
69424	private static String partitionSpecToName ( Map < String , String > spec ) { StringBuilder sb = new StringBuilder ( ) ; for ( Map . Entry < String , String > entry : spec . entrySet ( ) ) { if ( sb . length ( ) != _NUM ) { sb . append ( _STR ) ; } sb . append ( entry . getKey ( ) + _STR + entry . getValue ( ) ) ; } return sb . toString ( ) ; }
2748	public static InputStream toInputStream ( CharSequence input , Charset encoding ) { return toInputStream ( input . toString ( ) , encoding ) ; }
50816	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
18550	public void testHitEndAfterFind ( ) { hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; String floatRegex = getHexFloatRegex ( ) ; hitEndTest ( _BOOL , _STR , floatRegex , Double . toHexString ( - _NUM ) , _BOOL ) ; hitEndTest ( _BOOL , _STR , floatRegex , _STR + Double . toHexString ( Double . NaN ) + _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , floatRegex , Double . toHexString ( - _NUM ) + _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , floatRegex , _STR + Double . toHexString ( Double . MIN_VALUE ) + _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; hitEndTest ( _BOOL , _STR , _STR , _STR , _BOOL ) ; }
25755	@ Modifying @ Transactional public void deleteCheque ( @ PathVariable Long chequeID ) { chequeRepository . delete ( chequeID ) ; photoRepository . deleteByChequeId ( chequeID . toString ( ) ) ; }
52066	public static synchronized double partialCorrelation ( TetradMatrix submatrix ) { try { TetradMatrix inverse = submatrix . inverse ( ) ; double a = - _NUM * inverse . get ( _NUM , _NUM ) ; double v0 = inverse . get ( _NUM , _NUM ) ; double v1 = inverse . get ( _NUM , _NUM ) ; double b = Math . sqrt ( v0 * v1 ) ; return a / b ; } catch ( Exception e ) { e . printStackTrace ( ) ; return Double . NaN ; } }
63697	public void addColumn ( String name , String expr ) { Expression ex = ExpressionParser . parse ( expr ) ; Throwable t = ExpressionParser . getError ( ) ; if ( t != null ) { throw new RuntimeException ( t ) ; } else { addColumn ( name , ex ) ; } }
32180	public void addPutAndGetTimeNanos ( long duration ) { putTimeNanos . addAndGet ( duration ) ; getTimeNanos . addAndGet ( duration ) ; if ( delegate != null ) delegate . addPutAndGetTimeNanos ( duration ) ; }
73328	private float checkSaturationValid ( final float val ) { float tempval = val ; if ( val > _NUM ) { tempval = _NUM ; } if ( val < _NUM ) { tempval = _NUM ; } return tempval ; }
55198	String parse ( String cellStr , int layoutConstant ) { return cellStr . split ( LayoutConstants . CELL_PTRN ) [ layoutConstant ] ; }
74139	public void pseudoPropertyChange ( String propName , Object old , Object n ) { if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + getSystemName ( ) + _STR + propName + _STR + n . toString ( ) ) ; } firePropertyChange ( propName , old , n ) ; }
70681	public static String runCmd ( File directory , List < String > cmd , String errorMessage ) throws Exception { ProcessBuilder pb = new ProcessBuilder ( cmd ) ; pb . directory ( directory ) ; pb . redirectErrorStream ( _BOOL ) ; Process p = pb . start ( ) ; String s ; StringBuilder sb = new StringBuilder ( ) ; BufferedReader stdout = new BufferedReader ( new InputStreamReader ( p . getInputStream ( ) ) ) ; while ( ( s = stdout . readLine ( ) ) != null ) { logger . info ( s ) ; sb . append ( s ) ; sb . append ( _STR ) ; } String sbs = sb . toString ( ) ; int exitValue = p . waitFor ( ) ; if ( exitValue != _NUM ) throw new Exception ( errorMessage + _STR + exitValue + _STR + sbs ) ; return sbs ; }
59892	@ Override public SelectableChannel selectableChannel ( ) { return socketChannel ; }
59177	public void test_ConstructorIIIIII ( ) { Date d1 = new Date ( _NUM , _NUM , _NUM , _NUM , _NUM , _NUM ) ; Date d2 = new Date ( _NUM + d1 . getTimezoneOffset ( ) * _NUM * _NUM + _NUM * _NUM * _NUM + _NUM * _NUM + _NUM ) ; assertTrue ( _STR , d1 . equals ( d2 ) ) ; }
79176	public static String fromTag ( ByteArrayTag tag ) { StringBuilder builder = new StringBuilder ( ) ; builder . append ( ARRAY_START ) ; boolean start = _BOOL ; for ( byte value : tag . getValue ( ) ) { ByteTag b = new ByteTag ( value ) ; if ( start ) { start = _BOOL ; } else { builder . append ( ELEMENT_SEPERATOR ) ; } builder . append ( fromTag ( b ) ) ; } builder . append ( ARRAY_END ) ; return builder . toString ( ) ; }
73807	@ Override protected void addChooserFilters ( JFileChooser chooser ) { javax . swing . filechooser . FileNameExtensionFilter filter = new javax . swing . filechooser . FileNameExtensionFilter ( Bundle . getMessage ( _STR , _STR ) , _STR , _STR ) ; chooser . addChoosableFileFilter ( new javax . swing . filechooser . FileNameExtensionFilter ( _STR , _STR ) ) ; chooser . addChoosableFileFilter ( new javax . swing . filechooser . FileNameExtensionFilter ( _STR , _STR ) ) ; chooser . addChoosableFileFilter ( filter ) ; chooser . setFileFilter ( filter ) ; }
49241	private static byte [ ] WindowsRegEnumValue1 ( int hKey , int valueIndex , int maxValueNameLength ) { byte [ ] result = WindowsRegEnumValue ( hKey , valueIndex , maxValueNameLength ) ; if ( result != null ) { return result ; } else { long sleepTime = INIT_SLEEP_TIME ; for ( int i = _NUM ; i < MAX_ATTEMPTS ; i ++ ) { try { Thread . sleep ( sleepTime ) ; } catch ( InterruptedException e ) { return result ; } sleepTime *= _NUM ; result = WindowsRegEnumValue ( hKey , valueIndex , maxValueNameLength ) ; if ( result != null ) { return result ; } } } return result ; }
67649	public static DateTime parseRfc822 ( String str ) throws ParseException { Date date ; synchronized ( dateTimeFormat822 ) { try { date = dateTimeFormat822 . parse ( str ) ; } catch ( java . text . ParseException e ) { throw new ParseException ( e ) ; } } return new DateTime ( date ) ; }
77568	public void testEmptyIndex ( ) throws Exception { IndexSearcher empty = newSearcher ( new MultiReader ( ) ) ; Query query = new TermQuery ( new Term ( _STR , _STR ) ) ; Sort sort = new Sort ( ) ; TopDocs td = empty . search ( query , _NUM , sort , _BOOL , _BOOL ) ; assertEquals ( _NUM , td . totalHits ) ; sort . setSort ( SortField . FIELD_DOC ) ; td = empty . search ( query , _NUM , sort , _BOOL , _BOOL ) ; assertEquals ( _NUM , td . totalHits ) ; sort . setSort ( new SortField ( _STR , SortField . Type . INT ) , SortField . FIELD_DOC ) ; td = empty . search ( query , _NUM , sort , _BOOL , _BOOL ) ; assertEquals ( _NUM , td . totalHits ) ; sort . setSort ( new SortField ( _STR , SortField . Type . STRING , _BOOL ) , SortField . FIELD_DOC ) ; td = empty . search ( query , _NUM , sort , _BOOL , _BOOL ) ; assertEquals ( _NUM , td . totalHits ) ; sort . setSort ( new SortField ( _STR , SortField . Type . STRING_VAL , _BOOL ) , SortField . FIELD_DOC ) ; td = empty . search ( query , _NUM , sort , _BOOL , _BOOL ) ; assertEquals ( _NUM , td . totalHits ) ; sort . setSort ( new SortField ( _STR , SortField . Type . FLOAT ) , new SortField ( _STR , SortField . Type . STRING ) ) ; td = empty . search ( query , _NUM , sort , _BOOL , _BOOL ) ; assertEquals ( _NUM , td . totalHits ) ; }
44561	public Model validateModel ( Dataset dataset , URI shapesGraphURI , Resource minSeverity , boolean validateShapes , Function < RDFNode , String > labelFunction , ProgressMonitor monitor ) throws InterruptedException { if ( dataset . getDefaultModel ( ) == null ) { throw new IllegalArgumentException ( _STR ) ; } Model shapesModel = dataset . getNamedModel ( shapesGraphURI . toString ( ) ) ; if ( monitor != null ) { monitor . subTask ( _STR ) ; } List < Property > constraintProperties = SHACLUtil . getAllConstraintProperties ( validateShapes ) ; Map < Resource , List < SHConstraint > > map = buildShape2ConstraintsMap ( shapesModel , dataset . getDefaultModel ( ) , constraintProperties , validateShapes ) ; if ( monitor != null ) { monitor . subTask ( _STR ) ; } if ( monitor != null ) { monitor . beginTask ( _STR + map . size ( ) + _STR , map . size ( ) ) ; } Model results = JenaUtil . createMemoryModel ( ) ; results . setNsPrefixes ( dataset . getDefaultModel ( ) ) ; for ( Resource shape : map . keySet ( ) ) { for ( SHConstraint constraint : map . get ( shape ) ) { validateConstraintForShape ( dataset , shapesGraphURI , minSeverity , constraint , shape , results , labelFunction , monitor ) ; if ( monitor != null ) { monitor . worked ( _NUM ) ; if ( monitor . isCanceled ( ) ) { throw new InterruptedException ( ) ; } } } } return results ; }
85129	public PdfPage addAnnotation ( PdfAnnotation annotation ) { return addAnnotation ( - _NUM , annotation , _BOOL ) ; }
14039	public static String findPreferredIDP ( String realm , HttpServletRequest request ) { if ( request == null ) { return null ; } String succinctID = request . getParameter ( IFSConstants . PROVIDER_ID_KEY ) ; if ( ( succinctID == null ) || succinctID . length ( ) == _NUM ) { debug . message ( _STR ) ; return null ; } succinctID = succinctID . trim ( ) ; String preferredSuccinctId = null ; StringTokenizer st = new StringTokenizer ( succinctID , _STR ) ; while ( st . hasMoreTokens ( ) ) { preferredSuccinctId = st . nextToken ( ) ; if ( ( preferredSuccinctId . length ( ) < _NUM ) && st . hasMoreTokens ( ) ) { preferredSuccinctId = preferredSuccinctId + _STR + st . nextToken ( ) ; } } preferredSuccinctId = SAMLUtils . byteArrayToString ( Base64 . decode ( preferredSuccinctId ) ) ; return getProviderIDFromSuccinctID ( realm , preferredSuccinctId ) ; }
21548	private void checkAndCreateDirectory ( final String directoryName ) { try { final File dir = new File ( directoryName ) ; if ( ! dir . exists ( ) && dir . mkdirs ( ) ) { _logger . debug ( _STR ) ; } } catch ( Exception ex ) { _logger . error ( _STR , ex . getMessage ( ) ) ; } }
86586	@ SafeVarargs public final AssertSubscriber < T > assertValuesWith ( Consumer < T > ... expectations ) { if ( ! valuesStorage ) { throw new IllegalStateException ( _STR ) ; } final int expectedValueCount = expectations . length ; if ( expectedValueCount != values . size ( ) ) { throw new AssertionError ( _STR + expectedValueCount + _STR + valueCount , null ) ; } for ( int i = _NUM ; i < expectedValueCount ; i ++ ) { Consumer < T > consumer = expectations [ i ] ; T actualValue = values . get ( i ) ; consumer . accept ( actualValue ) ; } return this ; }
83680	private boolean journalRebuildRequired ( ) { final int REDUNDANT_OP_COMPACT_THRESHOLD = _NUM ; return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries . size ( ) ; }
40727	public int findEventPositionNearestTime ( Time time , long id ) { if ( mRowInfo == null ) { return _NUM ; } long millis = time . toMillis ( _BOOL ) ; long minDistance = Integer . MAX_VALUE ; long idFoundMinDistance = Integer . MAX_VALUE ; int minIndex = _NUM ; int idFoundMinIndex = _NUM ; int eventInTimeIndex = - _NUM ; int allDayEventInTimeIndex = - _NUM ; int allDayEventDay = _NUM ; int minDay = _NUM ; boolean idFound = _BOOL ; int len = mRowInfo . size ( ) ; for ( int index = _NUM ; index < len ; index ++ ) { RowInfo row = mRowInfo . get ( index ) ; if ( row . mType == TYPE_DAY ) { continue ; } if ( row . mEventId == id ) { if ( row . mEventStartTimeMilli == millis ) { return index ; } long distance = Math . abs ( millis - row . mEventStartTimeMilli ) ; if ( distance < idFoundMinDistance ) { idFoundMinDistance = distance ; idFoundMinIndex = index ; } idFound = _BOOL ; } if ( ! idFound ) { if ( millis >= row . mEventStartTimeMilli && millis <= row . mEventEndTimeMilli ) { if ( row . mAllDay ) { if ( allDayEventInTimeIndex == - _NUM ) { allDayEventInTimeIndex = index ; allDayEventDay = row . mDay ; } } else if ( eventInTimeIndex == - _NUM ) { eventInTimeIndex = index ; } } else if ( eventInTimeIndex == - _NUM ) { long distance = Math . abs ( millis - row . mEventStartTimeMilli ) ; if ( distance < minDistance ) { minDistance = distance ; minIndex = index ; minDay = row . mDay ; } } } } if ( idFound ) { return idFoundMinIndex ; } if ( eventInTimeIndex != - _NUM ) { return eventInTimeIndex ; } else if ( allDayEventInTimeIndex != - _NUM && minDay != allDayEventDay ) { return allDayEventInTimeIndex ; } return minIndex ; }
3696	final public void println ( float v ) { String s = String . valueOf ( v ) ; write ( s , _NUM , s . length ( ) ) ; println ( ) ; }
37334	private static TranslationResult extractRegister ( final ITranslationEnvironment environment , final long offset , final String subRegister ) throws InternalTranslationException { final ArrayList < ReilInstruction > instructions = new ArrayList < ReilInstruction > ( ) ; final String parentRegister = getParentRegister ( subRegister ) ; final OperandSize archSize = environment . getArchitectureSize ( ) ; if ( isHigher8BitRegister ( subRegister ) ) { final String maskResult = environment . getNextVariableString ( ) ; final String shiftResult = environment . getNextVariableString ( ) ; instructions . add ( ReilHelpers . createAnd ( offset , archSize , parentRegister , OperandSize . WORD , _STR , OperandSize . WORD , maskResult ) ) ; instructions . add ( ReilHelpers . createBsh ( offset + _NUM , OperandSize . WORD , maskResult , OperandSize . WORD , _STR , OperandSize . BYTE , shiftResult ) ) ; return new TranslationResult ( shiftResult , OperandSize . BYTE , TranslationResultType . REGISTER , null , instructions , offset ) ; } else { final OperandSize subRegisterSize = getRegisterSize ( subRegister ) ; final String mask = String . valueOf ( TranslationHelpers . getAllBitsMask ( subRegisterSize ) ) ; final String result = environment . getNextVariableString ( ) ; instructions . add ( ReilHelpers . createAnd ( offset , archSize , parentRegister , subRegisterSize , mask , subRegisterSize , result ) ) ; return new TranslationResult ( result , subRegisterSize , TranslationResultType . REGISTER , null , instructions , offset ) ; } }
14544	public void onLoginFailure ( Map requestParamsMap , HttpServletRequest req , HttpServletResponse res ) throws AuthenticationException { debug . message ( _STR ) ; }
41943	public Interceptor [ ] buildMethodInterceptors ( Method method ) { Interceptors before = method . getAnnotation ( Interceptors . class ) ; return before != null ? createInterceptors ( before ) : NULL_INTERCEPTOR_ARRAY ; }
8971	protected String buildQualifierRegex ( String qualifierValue ) { StringBuilder sb = new StringBuilder ( ) ; sb . append ( _STR ) ; sb . append ( qualifierValue ) ; sb . append ( _STR ) ; return sb . toString ( ) ; }
22007	private static void lookForChanges ( DataObject left , DataObject right , HashMap < String , Change > changes , Set < String > included , Set < String > excluded , Set < String > contained ) { Class refClass = left . getClass ( ) ; Method [ ] methods = refClass . getMethods ( ) ; for ( Method method : methods ) { boolean contain = _BOOL ; Name nameAnn = method . getAnnotation ( Name . class ) ; if ( nameAnn == null ) { continue ; } String key = nameAnn . value ( ) ; if ( contained != null && contained . contains ( key ) ) { contain = _BOOL ; } else if ( included != null && ! included . contains ( key ) ) { continue ; } if ( excluded . contains ( key ) ) { continue ; } Class type = method . getReturnType ( ) ; try { Object obja = method . invoke ( left ) ; Object objb = method . invoke ( right ) ; if ( type == StringSet . class ) { if ( contain ) { analyzeNewStringSetContainsOldStringSetValues ( ( StringSet ) obja , ( StringSet ) objb , key , changes ) ; } else { analyzeStringSets ( ( StringSet ) obja , ( StringSet ) objb , key , changes ) ; } } else if ( type == StringMap . class ) { analyzeStringMaps ( ( StringMap ) obja , ( StringMap ) objb , key , changes ) ; } else if ( type == StringSetMap . class ) { analyzeStringSetMaps ( ( StringSetMap ) obja , ( StringSetMap ) objb , key , changes ) ; } else { if ( ! isEqual ( obja , objb ) ) { Change change = new Change ( key , obja , objb , nameAnn . value ( ) ) ; changes . put ( key , change ) ; } } } catch ( IllegalAccessException ex ) { throw new ServiceCodeException ( ServiceCode . UNFORSEEN_ERROR , ex , ex . getMessage ( ) , new String [ ] { } ) ; } catch ( InvocationTargetException ex ) { throw new ServiceCodeException ( ServiceCode . UNFORSEEN_ERROR , ex , ex . getMessage ( ) , new String [ ] { } ) ; } } }
42349	static void removeAllPhis ( IR ir ) { for ( Instruction s = ir . firstInstructionInCodeOrder ( ) , sentinel = ir . lastInstructionInCodeOrder ( ) , nextInstr = null ; s != sentinel ; s = nextInstr ) { nextInstr = s . nextInstructionInCodeOrder ( ) ; if ( Phi . conforms ( s ) ) s . remove ( ) ; } }
49784	protected int countToken ( String token , String target ) { int tokenIndex = _NUM ; int count = _NUM ; while ( tokenIndex != - _NUM ) { tokenIndex = target . indexOf ( token , tokenIndex ) ; if ( tokenIndex > - _NUM ) { tokenIndex ++ ; count ++ ; } } return count ; }
76217	private Map < TestCase , Set < TestFitnessFunction > > initializeCoverageMapFromTests ( List < TestCase > tests ) { Map < TestCase , Set < TestFitnessFunction > > testToGoals = new LinkedHashMap < > ( ) ; for ( TestCase test : tests ) { testToGoals . put ( test , filterSupportedGoals ( new LinkedHashSet < > ( test . getCoveredGoals ( ) ) ) ) ; } return testToGoals ; }
41944	public Interceptor [ ] buildRouteInterceptors ( Interceptor [ ] defaultInters , Interceptor [ ] resourceInters , Class < ? extends Resource > resourceClass , Interceptor [ ] methodInters , Method method ) { List < Interceptor > allInters = new ArrayList < Interceptor > ( ) ; for ( Interceptor defaultInter : defaultInters ) { allInters . add ( defaultInter ) ; } for ( Interceptor resourceInter : resourceInters ) { allInters . add ( resourceInter ) ; } for ( Interceptor methodInter : methodInters ) { allInters . add ( methodInter ) ; } Class < ? extends Interceptor > [ ] resourceClears = getResourceClears ( resourceClass ) ; Class < ? extends Interceptor > [ ] methodClears = getMethodClears ( method ) ; if ( ( resourceClears != null && resourceClears . length > _NUM ) || ( methodClears != null && methodClears . length > _NUM ) ) { for ( int i = _NUM ; i < allInters . size ( ) ; i ++ ) { i = clearInterceptor ( allInters , resourceClears , i ) ; i = clearInterceptor ( allInters , methodClears , i ) ; } } return allInters . toArray ( new Interceptor [ allInters . size ( ) ] ) ; }
74632	public static boolean checkGMLFootprint ( String footprint ) { try { Configuration configuration = new GMLConfiguration ( ) ; Parser parser = new Parser ( configuration ) ; Geometry geom = ( Geometry ) parser . parse ( new InputSource ( new StringReader ( footprint ) ) ) ; if ( ! geom . isEmpty ( ) && ! geom . isValid ( ) ) { logger . error ( _STR ) ; return _BOOL ; } } catch ( Exception e ) { logger . error ( _STR + e . getMessage ( ) ) ; return _BOOL ; } return _BOOL ; }
83184	public static void main ( String [ ] args ) { double preBuffer = Double . parseDouble ( args [ _NUM ] ) ; double postBuffer = Double . parseDouble ( args [ _NUM ] ) ; run ( args [ _NUM ] , args [ _NUM ] , args [ _NUM ] , args [ _NUM ] , preBuffer , postBuffer ) ; }
53147	public static double quantile ( double p , double k , double theta , double shift ) { return Math . exp ( GammaDistribution . quantile ( p , k , theta ) ) + shift ; }
61079	public static CipherParameters makePBEMacParameters ( BCPBEKey pbeKey , AlgorithmParameterSpec spec ) { if ( ( spec == null ) || ! ( spec instanceof PBEParameterSpec ) ) { throw new IllegalArgumentException ( _STR ) ; } PBEParameterSpec pbeParam = ( PBEParameterSpec ) spec ; PBEParametersGenerator generator = makePBEGenerator ( pbeKey . getType ( ) , pbeKey . getDigest ( ) ) ; byte [ ] key = pbeKey . getEncoded ( ) ; CipherParameters param ; if ( pbeKey . shouldTryWrongPKCS12 ( ) ) { key = new byte [ _NUM ] ; } generator . init ( key , pbeParam . getSalt ( ) , pbeParam . getIterationCount ( ) ) ; param = generator . generateDerivedMacParameters ( pbeKey . getKeySize ( ) ) ; for ( int i = _NUM ; i != key . length ; i ++ ) { key [ i ] = _NUM ; } return param ; }
32979	public OrionEditorInit ( final TextEditorConfiguration configuration , final CodeAssistantFactory codeAssistantFactory , final QuickAssistAssistant quickAssist , final OrionEditorPresenter textEditor ) { this . configuration = configuration ; this . codeAssistantFactory = codeAssistantFactory ; this . quickAssist = quickAssist ; this . textEditor = textEditor ; }
48719	final void putByte ( int offset , byte value ) { unsafe . putByte ( offset + address , value ) ; }
56263	public final void addValidationError ( String error ) { validationErrors . add ( error ) ; }
24484	public static void parseOptionSettingTo ( String optionSetting , Map < String , String > dst ) { int eqIndex = optionSetting . indexOf ( _STR ) ; if ( eqIndex == - _NUM ) { throw new InternalError ( _STR + optionSetting ) ; } dst . put ( optionSetting . substring ( _NUM , eqIndex ) , optionSetting . substring ( eqIndex + _NUM ) ) ; }
16023	public BigInteger generateClientCredentials ( byte [ ] salt , byte [ ] identity , byte [ ] password ) { this . x = SRP6Util . calculateX ( digest , N , salt , identity , password ) ; this . a = selectPrivateValue ( ) ; this . A = g . modPow ( a , N ) ; return A ; }
77464	public void build ( SolrCore core , SolrIndexSearcher searcher ) throws IOException { LOG . info ( _STR + name + _STR ) ; dictionary = dictionaryFactory . create ( core , searcher ) ; lookup . build ( dictionary ) ; if ( storeDir != null ) { File target = getStoreFile ( ) ; if ( ! lookup . store ( new FileOutputStream ( target ) ) ) { LOG . error ( _STR ) ; } else { LOG . info ( _STR + target . getAbsolutePath ( ) ) ; } } }
81237	public void start ( String json ) { guidedTourSteps . clear ( ) ; GuidedTourConfiguration configuration = dtoFactory . createDtoFromJson ( json , GuidedTourConfiguration . class ) ; log . setDebugMode ( configuration . getDebugMode ( ) ) ; this . guidedTourSteps = configuration . getSteps ( ) ; this . tourName = configuration . getName ( ) ; if ( this . tourName == null || tourName . isEmpty ( ) ) { tourName = _STR ; } this . hasWelcomeStep = configuration . getHasWelcomeStep ( ) ; startTour ( ) ; }
56185	private void connect ( ) throws IOException { JMXServiceURL jmxUrl = new JMXServiceURL ( String . format ( fmtUrl , host , port ) ) ; Map < String , Object > env = new HashMap < String , Object > ( ) ; if ( username != null ) { String [ ] creds = { username , password } ; env . put ( JMXConnector . CREDENTIALS , creds ) ; } env . put ( _STR , getRMIClientSocketFactory ( ) ) ; jmxc = JMXConnectorFactory . connect ( jmxUrl , env ) ; mbeanServerConn = jmxc . getMBeanServerConnection ( ) ; try { ObjectName name = new ObjectName ( ssObjName ) ; ssProxy = JMX . newMBeanProxy ( mbeanServerConn , name , StorageServiceMBean . class ) ; name = new ObjectName ( MessagingService . MBEAN_NAME ) ; msProxy = JMX . newMBeanProxy ( mbeanServerConn , name , MessagingServiceMBean . class ) ; name = new ObjectName ( StreamManagerMBean . OBJECT_NAME ) ; streamProxy = JMX . newMBeanProxy ( mbeanServerConn , name , StreamManagerMBean . class ) ; name = new ObjectName ( CompactionManager . MBEAN_OBJECT_NAME ) ; compactionProxy = JMX . newMBeanProxy ( mbeanServerConn , name , CompactionManagerMBean . class ) ; name = new ObjectName ( FailureDetector . MBEAN_NAME ) ; fdProxy = JMX . newMBeanProxy ( mbeanServerConn , name , FailureDetectorMBean . class ) ; name = new ObjectName ( CacheService . MBEAN_NAME ) ; cacheService = JMX . newMBeanProxy ( mbeanServerConn , name , CacheServiceMBean . class ) ; name = new ObjectName ( StorageProxy . MBEAN_NAME ) ; spProxy = JMX . newMBeanProxy ( mbeanServerConn , name , StorageProxyMBean . class ) ; name = new ObjectName ( HintedHandOffManager . MBEAN_NAME ) ; hhProxy = JMX . newMBeanProxy ( mbeanServerConn , name , HintedHandOffManagerMBean . class ) ; name = new ObjectName ( GCInspector . MBEAN_NAME ) ; gcProxy = JMX . newMBeanProxy ( mbeanServerConn , name , GCInspectorMXBean . class ) ; name = new ObjectName ( Gossiper . MBEAN_NAME ) ; gossProxy = JMX . newMBeanProxy ( mbeanServerConn , name , GossiperMBean . class ) ; } catch ( MalformedObjectNameException e ) { throw new RuntimeException ( _STR , e ) ; } memProxy = ManagementFactory . newPlatformMXBeanProxy ( mbeanServerConn , ManagementFactory . MEMORY_MXBEAN_NAME , MemoryMXBean . class ) ; runtimeProxy = ManagementFactory . newPlatformMXBeanProxy ( mbeanServerConn , ManagementFactory . RUNTIME_MXBEAN_NAME , RuntimeMXBean . class ) ; }
77587	private static void runRandomTest ( final int wordLength , final int bytePadding , final int wordCount ) { final long seed = randomLong ( ) ; final Random random = new Random ( seed ) ; final Random verificationRandom = new Random ( seed ) ; final long wordMask ; if ( wordLength == _NUM ) { wordMask = ~ _NUM ; } else { wordMask = ( _NUM << wordLength ) - _NUM ; } final BigEndianAscendingWordSerializer serializer = new BigEndianAscendingWordSerializer ( wordLength , wordCount , bytePadding ) ; for ( int i = _NUM ; i < wordCount ; i ++ ) { final long value = random . nextLong ( ) & wordMask ; serializer . writeWord ( value ) ; } final byte [ ] bytes = serializer . getBytes ( ) ; final BigEndianAscendingWordDeserializer deserializer = new BigEndianAscendingWordDeserializer ( wordLength , bytePadding , bytes ) ; assertEquals ( deserializer . totalWordCount ( ) , wordCount ) ; for ( int i = _NUM ; i < wordCount ; i ++ ) { assertEquals ( deserializer . readWord ( ) , ( verificationRandom . nextLong ( ) & wordMask ) ) ; } }
20381	public void addListener ( T listener ) { if ( listener == null ) { throw new NullPointerException ( ) ; } listeners . add ( listener ) ; }
44436	public static MaildirMessageName createUniqueName ( MaildirFolder parentFolder , long size ) { String timestamp = String . valueOf ( System . currentTimeMillis ( ) ) ; timestamp = timestamp . substring ( _NUM , timestamp . length ( ) - _NUM ) ; StringBuilder uniquePart = new StringBuilder ( ) ; uniquePart . append ( Integer . toHexString ( random . nextInt ( ) ) ) ; uniquePart . append ( timestamp . substring ( timestamp . length ( ) - _NUM ) ) ; uniquePart . append ( processName ) ; uniquePart . append ( getNextDeliveryNumber ( ) ) ; String sizeString = _STR + String . valueOf ( size ) ; String fullName = timestamp + _STR + uniquePart . toString ( ) + _STR + currentHostname + sizeString ; MaildirMessageName uniqueName = new MaildirMessageName ( parentFolder , fullName ) ; uniqueName . timestamp = timestamp ; uniqueName . uniqueString = uniquePart . toString ( ) ; uniqueName . hostname = currentHostname ; uniqueName . sizeString = sizeString ; uniqueName . isSplit = _BOOL ; uniqueName . size = size ; return uniqueName ; }
5787	private float clampMag ( float value , float absMin , float absMax ) { final float absValue = Math . abs ( value ) ; if ( absValue < absMin ) return _NUM ; if ( absValue > absMax ) return value > _NUM ? absMax : - absMax ; return value ; }
7455	@ Override public void handleClick ( int x , int y , PlotRenderingInfo info ) { }
42296	private void adjustBCIndex ( Instruction barrier ) { NormalMethod source = barrier . position ( ) . method ; if ( source . isForOsrSpecialization ( ) ) { barrier . adjustBytecodeIndex ( - source . getOsrPrologueLength ( ) ) ; } }
5109	@ Override public String toString ( ) { StringBuilder risul = new StringBuilder ( _NUM ) ; risul . append ( _STR ) ; risul . append ( _STR ) ; return risul . toString ( ) ; }
86911	public static long [ ] interpose ( long [ ] vector , int vectorLen , int offset , int len ) { long [ ] updated = create ( vectorLen + len ) ; int idx = offset > > _NUM ; System . arraycopy ( vector , _NUM , updated , _NUM , idx ) ; if ( idx < vector . length ) { int delta = offset & _NUM ; updated [ idx ] |= vector [ idx ] & maskBelow ( delta ) ; } copy ( vector , offset , updated , offset + len , vectorLen - offset ) ; return updated ; }
57450	public static File createTemporaryDirectory ( String prefix ) { while ( _BOOL ) { String candidateName = prefix + TEMPORARY_DIRECTORY_PRNG . nextInt ( ) ; File result = new File ( System . getProperty ( _STR ) , candidateName ) ; if ( result . mkdir ( ) ) { return result ; } } }
26007	Task < Void > synchronizeAllAuthDataAsync ( ) { Map < String , Map < String , String > > authData ; synchronized ( mutex ) { if ( ! isCurrentUser ( ) ) { return Task . forResult ( null ) ; } authData = getAuthData ( ) ; } List < Task < Void > > tasks = new ArrayList < > ( authData . size ( ) ) ; for ( String authType : authData . keySet ( ) ) { tasks . add ( synchronizeAuthDataAsync ( authType ) ) ; } return Task . whenAll ( tasks ) ; }
45902	public static Element createElementInEncryptionSpace ( Document doc , String elementName ) { if ( doc == null ) { throw new RuntimeException ( _STR ) ; } if ( ( xencPrefix == null ) || ( xencPrefix . length ( ) == _NUM ) ) { return doc . createElementNS ( EncryptionConstants . EncryptionSpecNS , elementName ) ; } return doc . createElementNS ( EncryptionConstants . EncryptionSpecNS , xencPrefix + _STR + elementName ) ; }
35541	void scrapActiveViews ( ) { final View [ ] activeViews = mActiveViews ; final boolean multipleScraps = mViewTypeCount > _NUM ; ArrayList < View > scrapViews = mCurrentScrap ; final int count = activeViews . length ; for ( int i = count - _NUM ; i >= _NUM ; i -- ) { final View victim = activeViews [ i ] ; if ( victim != null ) { final LayoutParams lp = ( LayoutParams ) victim . getLayoutParams ( ) ; activeViews [ i ] = null ; final boolean scrapHasTransientState = ViewCompat . hasTransientState ( victim ) ; int viewType = lp . viewType ; if ( ! shouldRecycleViewType ( viewType ) || scrapHasTransientState ) { if ( viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER || scrapHasTransientState ) { removeDetachedView ( victim , _BOOL ) ; } if ( scrapHasTransientState ) { if ( mTransientStateViews == null ) { mTransientStateViews = new SparseArrayCompat < View > ( ) ; } mTransientStateViews . put ( mFirstActivePosition + i , victim ) ; } continue ; } if ( multipleScraps ) { scrapViews = mScrapViews [ viewType ] ; } lp . position = mFirstActivePosition + i ; scrapViews . add ( victim ) ; } } pruneScrapViews ( ) ; }
70743	private void drawWind ( Canvas canvas , float y , float xOffset ) { float cof = ( mScreenWidth + xOffset ) / ( LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT ) ; float time = mLoadingAnimationTime ; if ( mLastAnimationTime - mLoadingAnimationTime > _NUM ) { mInverseDirection = _BOOL ; time = ( LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT ) - mLoadingAnimationTime ; } else { mNewWindSet = _BOOL ; mInverseDirection = _BOOL ; } float x = ( mScreenWidth - ( time * cof ) ) + xOffset - mWindLineWidth ; float xEnd = x + mWindLineWidth ; canvas . drawLine ( x , y , xEnd , y , mWindPaint ) ; }
42894	private boolean hasProxySettings ( Properties settings ) { String proxyHost = settings . getProperty ( _STR , null ) ; return proxyHost != null && proxyHost . length ( ) > _NUM ; }
48633	public boolean equalsDefault ( ) { return ( Double . doubleToLongBits ( value ) == _NUM ) ; }
51659	public static Map < String , String > parseKeyAndValueToMap ( String source , boolean ignoreSpace ) { return parseKeyAndValueToMap ( source , DEFAULT_KEY_AND_VALUE_SEPARATOR , DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR , ignoreSpace ) ; }
78100	@ Override protected void onSizeChanged ( int w , int h , int oldw , int oldh ) { super . onSizeChanged ( w , h , oldw , oldh ) ; setupBounds ( w , h ) ; setupPaints ( ) ; invalidate ( ) ; }
64430	private void needNewBuffer ( int newcount ) { if ( currentBufferIndex < buffers . size ( ) - _NUM ) { filledBufferSum += currentBuffer . length ; currentBufferIndex ++ ; currentBuffer = buffers . get ( currentBufferIndex ) ; } else { int newBufferSize ; if ( currentBuffer == null ) { newBufferSize = newcount ; filledBufferSum = _NUM ; } else { newBufferSize = Math . max ( currentBuffer . length << _NUM , newcount - filledBufferSum ) ; filledBufferSum += currentBuffer . length ; } currentBufferIndex ++ ; currentBuffer = new byte [ newBufferSize ] ; buffers . add ( currentBuffer ) ; } }
34720	@ Nullable public static WebsiteAddress create ( String originOrHostOrPattern ) { if ( originOrHostOrPattern == null || originOrHostOrPattern . isEmpty ( ) ) { return null ; } if ( originOrHostOrPattern . startsWith ( ANY_SUBDOMAIN_PATTERN ) ) { String origin = null ; String scheme = null ; String host = originOrHostOrPattern . substring ( ANY_SUBDOMAIN_PATTERN . length ( ) ) ; boolean omitProtocolAndPort = _BOOL ; return new WebsiteAddress ( originOrHostOrPattern , origin , scheme , host , omitProtocolAndPort ) ; } if ( originOrHostOrPattern . indexOf ( SCHEME_SUFFIX ) != - _NUM ) { Uri uri = Uri . parse ( originOrHostOrPattern ) ; String origin = trimTrailingBackslash ( originOrHostOrPattern ) ; boolean omitProtocolAndPort = HTTP_SCHEME . equals ( uri . getScheme ( ) ) && ( uri . getPort ( ) == - _NUM || uri . getPort ( ) == _NUM ) ; return new WebsiteAddress ( originOrHostOrPattern , origin , uri . getScheme ( ) , uri . getHost ( ) , omitProtocolAndPort ) ; } String origin = null ; String scheme = null ; boolean omitProtocolAndPort = _BOOL ; return new WebsiteAddress ( originOrHostOrPattern , origin , scheme , originOrHostOrPattern , omitProtocolAndPort ) ; }
27847	public void test_filter_001 ( ) throws IOException { final File basefile = File . createTempFile ( getName ( ) , _STR ) ; try { final String basename = basefile . toString ( ) ; final NameAndExtensionFilter logFilter = new NameAndExtensionFilter ( basename , _STR ) ; assertSameFiles ( new File [ ] { } , logFilter . getFiles ( ) ) ; } finally { basefile . delete ( ) ; } }
70254	public void resetTeleMissileAttacks ( ) { pendingTeleMissileAttacks . removeAllElements ( ) ; }
61116	public int addPadding ( byte [ ] in , int inOff ) { byte code = ( byte ) ( in . length - inOff ) ; while ( inOff < ( in . length - _NUM ) ) { in [ inOff ] = ( byte ) random . nextInt ( ) ; inOff ++ ; } in [ inOff ] = code ; return code ; }
68787	public void addCommands ( PDFPage page , Matrix extra ) { synchronized ( commands ) { addPush ( ) ; if ( extra != null ) { addXform ( extra ) ; } commands . addAll ( page . getCommands ( ) ) ; addPop ( ) ; } updateImages ( ) ; }
84817	public String toString ( ) { StringBuffer sb = new StringBuffer ( ) ; char [ ] separator = { _STR , _STR } ; int n = rows . length ; for ( int i = _NUM ; i < n ; i ++ ) { separator [ _NUM ] = _STR ; for ( int j = _NUM ; j <= i ; j ++ ) { sb . append ( separator ) ; sb . append ( rows [ i ] [ j ] ) ; separator [ _NUM ] = _STR ; } sb . append ( _STR ) ; sb . append ( _STR ) ; } return sb . toString ( ) ; }
50483	public void addLast ( StatementSequence statements ) { if ( statements != null ) { sequence . addAll ( statements . sequence ) ; } }
41006	private void notifyActivityStateChanged ( Bundle bundle ) { if ( ! mRecords . isEmpty ( ) ) { Log . d ( TAG , _STR + mRecords . size ( ) ) ; synchronized ( mRecords ) { Iterator < Record > iterator = mRecords . iterator ( ) ; while ( iterator . hasNext ( ) ) { Record record = ( Record ) iterator . next ( ) ; FmRadioListener listener = record . mCallback ; if ( listener == null ) { iterator . remove ( ) ; return ; } listener . onCallBack ( bundle ) ; } } } }
68686	public double elasticity ( final double spot ) { final double val = value ( ) ; final double del = delta ( spot ) ; if ( val > Constants . QL_EPSILON ) return del / val * spot ; else if ( Math . abs ( del ) < Constants . QL_EPSILON ) return _NUM ; else if ( del > _NUM ) return Double . MAX_VALUE ; else return Double . MIN_VALUE ; }
70617	private byte [ ] entityToBytes ( HttpEntity entity , Request request ) throws IOException , ServerError { PoolingByteArrayOutputStream bytes = new PoolingByteArrayOutputStream ( mPool , ( int ) entity . getContentLength ( ) ) ; byte [ ] buffer = null ; try { InputStream in = entity . getContent ( ) ; if ( in == null ) { throw new ServerError ( ) ; } buffer = mPool . getBuf ( _NUM ) ; int progress = _NUM ; int count ; while ( ( count = in . read ( buffer ) ) != - _NUM ) { bytes . write ( buffer , _NUM , count ) ; progress += count ; request . progressUpdate ( progress ) ; } return bytes . toByteArray ( ) ; } finally { try { entity . consumeContent ( ) ; } catch ( IOException e ) { VinciLog . d ( _STR ) ; } mPool . returnBuf ( buffer ) ; bytes . close ( ) ; } }
11919	@ Override public Foo fetchByUuid_First ( String uuid , OrderByComparator < Foo > orderByComparator ) { List < Foo > list = findByUuid ( uuid , _NUM , _NUM , orderByComparator ) ; if ( ! list . isEmpty ( ) ) { return list . get ( _NUM ) ; } return null ; }
74063	public static float roundDecimal ( float value ) { return roundDecimal ( value , Math . log10 ( INT_PRECISION ) ) ; }
81227	@ AssistedInject public RunnerImpl ( @ NotNull RunnerLocalizationConstant locale , @ NotNull RunnerCounter runnerCounter , @ NotNull GetEnvironmentsUtil util , @ NotNull @ Assisted RunOptions runOptions , @ NotNull @ Assisted Scope environmentScope , @ Nullable @ Assisted String environmentName ) { this . runOptions = runOptions ; this . ram = runOptions . getMemorySize ( ) ; this . title = RUNNER_NAME + runnerCounter . getRunnerNumber ( ) + ( environmentName == null ? _STR : _STR + getCorrectName ( environmentName ) ) ; this . activeTab = locale . runnerTabConsole ( ) ; this . status = IN_QUEUE ; this . scope = environmentScope ; creationTime = System . currentTimeMillis ( ) ; String environmentId = runOptions . getEnvironmentId ( ) ; if ( environmentId == null || environmentId . startsWith ( _STR ) ) { this . type = util . getType ( ) ; } else { this . type = util . getCorrectCategoryName ( runOptions . getEnvironmentId ( ) ) ; } if ( environmentId != null ) { runOptions . setEnvironmentId ( environmentId ) ; } }
37560	public String globalInfo ( ) { return _STR + _STR ; }
9571	public static boolean isWindowsMe ( ) { return osName . indexOf ( _STR ) > - _NUM && osVersion . equals ( _STR ) ; }
36272	private String dateToString ( Date input ) { if ( input == null ) { return null ; } else { return input . toString ( ) ; } }
16560	private static int componentSize ( Component component , FormSpec formSpec , int cellSize , FormLayout . Measure minMeasure , FormLayout . Measure prefMeasure ) { if ( formSpec == null ) { return prefMeasure . sizeOf ( component ) ; } else if ( formSpec . getSize ( ) == Sizes . MINIMUM ) { return minMeasure . sizeOf ( component ) ; } else if ( formSpec . getSize ( ) == Sizes . PREFERRED ) { return prefMeasure . sizeOf ( component ) ; } else { return Math . min ( cellSize , prefMeasure . sizeOf ( component ) ) ; } }
76915	protected synchronized void start ( long curPrimaryGen ) throws IOException { if ( state . equals ( _STR ) == _BOOL ) { throw new IllegalStateException ( _STR ) ; } message ( _STR ) ; try { String segmentsFileName = SegmentInfos . getLastCommitSegmentsFileName ( dir ) ; long maxPendingGen = - _NUM ; for ( String fileName : dir . listAll ( ) ) { if ( fileName . startsWith ( IndexFileNames . PENDING_SEGMENTS ) ) { long gen = Long . parseLong ( fileName . substring ( IndexFileNames . PENDING_SEGMENTS . length ( ) + _NUM ) , Character . MAX_RADIX ) ; if ( gen > maxPendingGen ) { maxPendingGen = gen ; } } } SegmentInfos infos ; if ( segmentsFileName == null ) { infos = new SegmentInfos ( ) ; message ( _STR ) ; } else { message ( _STR + segmentsFileName ) ; infos = SegmentInfos . readCommit ( dir , segmentsFileName ) ; message ( _STR + infos . toString ( ) + _STR + infos . getVersion ( ) ) ; Collection < String > indexFiles = infos . files ( _BOOL ) ; lastCommitFiles . add ( segmentsFileName ) ; lastCommitFiles . addAll ( indexFiles ) ; deleter . incRef ( lastCommitFiles ) ; lastNRTFiles . addAll ( indexFiles ) ; deleter . incRef ( lastNRTFiles ) ; message ( _STR + lastCommitFiles ) ; message ( _STR + lastNRTFiles ) ; } message ( _STR + Arrays . toString ( dir . listAll ( ) ) ) ; deleter . deleteUnknownFiles ( segmentsFileName ) ; message ( _STR + Arrays . toString ( dir . listAll ( ) ) ) ; String s = infos . getUserData ( ) . get ( PRIMARY_GEN_KEY ) ; long myPrimaryGen ; if ( s == null ) { assert infos . size ( ) == _NUM ; myPrimaryGen = - _NUM ; } else { myPrimaryGen = Long . parseLong ( s ) ; } message ( _STR + myPrimaryGen ) ; boolean doCommit ; if ( infos . size ( ) > _NUM && myPrimaryGen != - _NUM && myPrimaryGen != curPrimaryGen ) { assert myPrimaryGen < curPrimaryGen ; final long initSyncStartNS = System . nanoTime ( ) ; message ( _STR + myPrimaryGen + _STR + curPrimaryGen + _STR ) ; CopyJob job = null ; message ( _STR + segmentsFileName ) ; assert deleter . getRefCount ( segmentsFileName ) == _NUM ; deleter . decRef ( Collections . singleton ( segmentsFileName ) ) ; if ( dir instanceof FSDirectory && ( ( FSDirectory ) dir ) . checkPendingDeletions ( ) ) { throw new RuntimeException ( _STR + segmentsFileName + _STR ) ; } boolean didRemove = lastCommitFiles . remove ( segmentsFileName ) ; assert didRemove ; while ( _BOOL ) { job = newCopyJob ( _STR + name ( ) + _STR + infos . getVersion ( ) , null , null , _BOOL , null ) ; job . start ( ) ; message ( _STR + job . getCopyState ( ) . version ) ; try { job . runBlocking ( ) ; job . finish ( ) ; break ; } catch ( IOException ioe ) { job . cancel ( _STR , ioe ) ; if ( ioe . getMessage ( ) . contains ( _STR ) ) { message ( _STR + ioe + _STR ) ; } else { throw ioe ; } } } lastPrimaryGen = job . getCopyState ( ) . primaryGen ; byte [ ] infosBytes = job . getCopyState ( ) . infosBytes ; SegmentInfos syncInfos = SegmentInfos . readCommit ( dir , new BufferedChecksumIndexInput ( new ByteArrayIndexInput ( _STR , job . getCopyState ( ) . infosBytes ) ) , job . getCopyState ( ) . gen ) ; syncInfos . updateGeneration ( infos ) ; infos = syncInfos ; assert infos . getVersion ( ) == job . getCopyState ( ) . version ; message ( _STR + infos . getVersion ( ) + _STR + infos . toString ( ) ) ; message ( _STR + job . getFileNames ( ) ) ; deleter . incRef ( job . getFileNames ( ) ) ; message ( _STR + lastNRTFiles ) ; deleter . decRef ( lastNRTFiles ) ; lastNRTFiles . clear ( ) ; lastNRTFiles . addAll ( job . getFileNames ( ) ) ; message ( _STR + lastNRTFiles ) ; lastFileMetaData = job . getCopyState ( ) . files ; message ( String . format ( Locale . ROOT , _STR , id , ( System . nanoTime ( ) - initSyncStartNS ) / _NUM , bytesToString ( job . getTotalBytesCopied ( ) ) , job . getCopyState ( ) . version ) ) ; doCommit = _BOOL ; } else { doCommit = _BOOL ; lastPrimaryGen = curPrimaryGen ; message ( _STR ) ; } if ( infos . getGeneration ( ) < maxPendingGen ) { message ( _STR + infos . getGeneration ( ) + _STR + maxPendingGen ) ; infos . setNextWriteGeneration ( maxPendingGen ) ; } sendNewReplica ( ) ; mgr = new SegmentInfosSearcherManager ( dir , this , infos , searcherFactory ) ; IndexSearcher searcher = mgr . acquire ( ) ; try { int hitCount = searcher . count ( new TermQuery ( new Term ( _STR , _STR ) ) ) ; message ( _STR + hitCount + _STR + ( ( DirectoryReader ) searcher . getIndexReader ( ) ) . getVersion ( ) ) ; } finally { mgr . release ( searcher ) ; } if ( doCommit ) { commit ( ) ; } message ( _STR ) ; state = _STR ; } catch ( Throwable t ) { if ( t . getMessage ( ) . startsWith ( _STR ) == _BOOL ) { message ( _STR ) ; t . printStackTrace ( printStream ) ; } else { dir . close ( ) ; } IOUtils . reThrow ( t ) ; } }
44735	public static boolean isSameElementType ( ASTNode node1 , ASTNode node2 ) { return node1 != null && node2 != null && node1 . getElementType ( ) == node1 . getElementType ( ) ; }
21153	@ Override public LogMessage readNextLogMessage ( ) { try { if ( reader == null ) { return null ; } while ( _BOOL ) { String line = reader . readLine ( ) ; if ( line == null ) { close ( ) ; if ( currentLog != null && matchRegex ( currentLog ) ) { incrementLogCount ( currentLog ) ; return currentLog ; } return null ; } fileLineNumber ++ ; LogMessage nextLog = null ; if ( parser != null ) { nextLog = parser . parseLine ( line , request ) ; } else { for ( LogParser parser : parserTable ) { nextLog = parser . parseLine ( line , request ) ; if ( ! nextLog . isContinuation ( ) ) { this . parser = parser ; break ; } } if ( nextLog == null || nextLog . isContinuation ( ) ) { status . appendInfo ( this . filePath , fileLineNumber ) ; continue ; } } if ( nextLog . isContinuation ( ) ) { if ( currentLog != null ) { currentLog . appendMessage ( LogUtil . stringToBytes ( line ) ) ; } } else if ( nextLog . isRejected ( ) ) { if ( currentLog != null ) { LogMessage returnedLog = currentLog ; currentLog = null ; if ( matchRegex ( returnedLog ) ) { incrementLogCount ( returnedLog ) ; return returnedLog ; } } } else if ( nextLog . isRejectedLast ( ) ) { if ( currentLog != null ) { LogMessage returnedLog = currentLog ; currentLog = null ; if ( matchRegex ( returnedLog ) ) { incrementLogCount ( returnedLog ) ; return returnedLog ; } } break ; } else { if ( currentLog != null ) { LogMessage returnedLog = currentLog ; currentLog = nextLog ; if ( returnedLog . isHeader ( ) && currentLog . isHeader ( ) ) { continue ; } if ( matchRegex ( returnedLog ) ) { incrementLogCount ( returnedLog ) ; return returnedLog ; } } else { currentLog = nextLog ; } } } } catch ( IOException e ) { status . appendErrFileName ( filePath ) ; } return null ; }
17487	public void appendDataTo ( StringBuilder stringBuilder ) { stringBuilder . append ( buffer ) ; }
28740	private static boolean hasResponseBody ( int requestMethod , int responseCode ) { return requestMethod != Request . Method . HEAD && ! ( HttpStatus . SC_CONTINUE <= responseCode && responseCode < HttpStatus . SC_OK ) && responseCode != HttpStatus . SC_NO_CONTENT && responseCode != HttpStatus . SC_NOT_MODIFIED ; }
12615	private void loadBinary ( DataInputStream is ) throws IOException { if ( is . readInt ( ) != MAGIC ) { throw new Error ( _STR ) ; } if ( is . readInt ( ) != VERSION ) { throw new Error ( _STR ) ; } continuityWeight = is . readInt ( ) ; optimalCoupling = is . readInt ( ) ; extendSelections = is . readInt ( ) ; joinMethod = is . readInt ( ) ; joinWeightShift = is . readInt ( ) ; int weightLength = is . readInt ( ) ; joinWeights = new int [ weightLength ] ; for ( int i = _NUM ; i < joinWeights . length ; i ++ ) { joinWeights [ i ] = is . readInt ( ) ; } int unitsLength = is . readInt ( ) ; units = new DatabaseClusterUnit [ unitsLength ] ; for ( int i = _NUM ; i < units . length ; i ++ ) { units [ i ] = new DatabaseClusterUnit ( is ) ; } int unitTypesLength = is . readInt ( ) ; unitTypes = new UnitType [ unitTypesLength ] ; for ( int i = _NUM ; i < unitTypes . length ; i ++ ) { unitTypes [ i ] = new UnitType ( is ) ; } sts = new SampleSet ( is ) ; mcep = new SampleSet ( is ) ; int numCarts = is . readInt ( ) ; cartMap = new HashMap ( ) ; for ( int i = _NUM ; i < numCarts ; i ++ ) { String name = Utilities . getString ( is ) ; CART cart = CARTImpl . loadBinary ( is ) ; cartMap . put ( name , cart ) ; if ( defaultCart == null ) { defaultCart = cart ; } } }
1407	public static String toString ( long l ) { if ( l < NUMBERS_MIN || l > NUMBERS_MAX ) { return Long . toString ( l , _NUM ) ; } return NUMBERS [ ( int ) l ] ; }
60976	@ Override public synchronized void reset ( ) { pos = _NUM ; }
17117	private static char [ ] zzUnpackCMap ( String packed ) { char [ ] map = new char [ _NUM ] ; int i = _NUM ; int j = _NUM ; while ( i < _NUM ) { int count = packed . charAt ( i ++ ) ; char value = packed . charAt ( i ++ ) ; do map [ j ++ ] = value ; while ( -- count > _NUM ) ; } return map ; }
78013	public static int readSingleByte ( InputStream in ) throws IOException { byte [ ] buffer = new byte [ _NUM ] ; int result = in . read ( buffer , _NUM , _NUM ) ; return ( result != - _NUM ) ? buffer [ _NUM ] & _NUM : - _NUM ; }
64137	public static void write ( File file , CharSequence data ) throws IOException { write ( file , data , Charset . defaultCharset ( ) , _BOOL ) ; }
14057	protected boolean isIDPProxyEnabled ( FSAuthnRequest authnRequest ) throws FSException { if ( authnRequest . getMinorVersion ( ) != IFSConstants . FF_12_PROTOCOL_MINOR_VERSION ) { return _BOOL ; } FSScoping scoping = authnRequest . getScoping ( ) ; if ( scoping != null && scoping . getProxyCount ( ) == _NUM ) { return _BOOL ; } String enabledString = IDFFMetaUtils . getFirstAttributeValueFromConfig ( spConfig , IFSConstants . ENABLE_IDP_PROXY ) ; if ( enabledString != null && enabledString . equalsIgnoreCase ( _STR ) ) { return _BOOL ; } else { return _BOOL ; } }
67326	private void compileProlog ( ObjectId prolog , File tempDir ) throws IOException , CompileException { File tempRules = copyToTempFile ( prolog , tempDir ) ; try { Compiler comp = new Compiler ( ) ; comp . prologToJavaSource ( tempRules . getPath ( ) , tempDir . getPath ( ) ) ; } finally { tempRules . delete ( ) ; } }
70973	public Spring removeAllListeners ( ) { mListeners . clear ( ) ; return this ; }
36548	public SelectionInputDialog ( Window owner , String key , boolean editable , T [ ] selectionValues , T initialSelectionValue , InputValidator < T > inputValidator , Object ... keyArguments ) { this ( owner , key , selectionValues , initialSelectionValue , inputValidator , keyArguments ) ; comboBox . setEditable ( editable ) ; }
40606	public void build ( SolrCore core , SolrIndexSearcher searcher ) throws IOException { LOG . info ( _STR ) ; dictionary = dictionaryFactory . create ( core , searcher ) ; lookup . build ( dictionary ) ; if ( storeDir != null ) { File target = new File ( storeDir , factory . storeFileName ( ) ) ; if ( ! lookup . store ( new FileOutputStream ( target ) ) ) { LOG . error ( _STR ) ; } else { LOG . info ( _STR + target . getAbsolutePath ( ) ) ; } } }
25607	public static String convertClassNameToResourcePath ( String className ) { Assert . notNull ( className , _STR ) ; return className . replace ( _STR , _STR ) ; }
57697	public URI ( String scheme , String schemeSpecificPart , String fragment ) throws URISyntaxException { StringBuilder uri = new StringBuilder ( ) ; if ( scheme != null ) { uri . append ( scheme ) ; uri . append ( _STR ) ; } if ( schemeSpecificPart != null ) { ALL_LEGAL_ENCODER . appendEncoded ( uri , schemeSpecificPart ) ; } if ( fragment != null ) { uri . append ( _STR ) ; ALL_LEGAL_ENCODER . appendEncoded ( uri , fragment ) ; } parseURI ( uri . toString ( ) , _BOOL ) ; }
43016	private int addToPopulation ( Solution solution ) { int id = nextFreeId ( ) ; solutions . put ( id , solution ) ; return id ; }
32063	public byte [ ] toByteArray ( ) { return Arrays . copyOf ( buf , cnt ) ; }
59912	public void createDiskAsync ( final String projectId , final DiskCreateSpec diskCreateSpec , final FutureCallback < Task > responseCallback ) throws IOException { final String path = String . format ( _STR , getBasePath ( ) , projectId ) ; createObjectAsync ( path , serializeObjectAsJson ( diskCreateSpec ) , responseCallback ) ; }
4715	@ Override public boolean domainMatch ( final String host , final String domain ) { return host . endsWith ( domain ) ; }
46826	public synchronized void disableAttribute ( String name ) { enabledAttributes . removeElement ( name ) ; }
86011	public Criteria createCriteria ( ) { Criteria criteria = createCriteriaInternal ( ) ; if ( oredCriteria . size ( ) == _NUM ) { oredCriteria . add ( criteria ) ; } return criteria ; }
46920	public void push ( final Handle handle ) { mv . visitLdcInsn ( handle ) ; }
23360	@ Deprecated public static String encodePostBody ( Bundle parameters , String boundary ) { if ( parameters == null ) return _STR ; StringBuilder sb = new StringBuilder ( ) ; for ( String key : parameters . keySet ( ) ) { Object parameter = parameters . get ( key ) ; if ( ! ( parameter instanceof String ) ) { continue ; } sb . append ( _STR + key + _STR + ( String ) parameter ) ; sb . append ( _STR + _STR + boundary + _STR ) ; } return sb . toString ( ) ; }
25730	public static IFitsHeader lookup ( String key ) { int keyLength = key . length ( ) ; if ( keyLength > _NUM && Character . isDigit ( key . charAt ( keyLength - _NUM ) ) ) { StringBuilder builder = new StringBuilder ( ) ; for ( int index = _NUM ; index < keyLength ; index ++ ) { char character = key . charAt ( index ) ; if ( Character . isDigit ( character ) ) { if ( builder . charAt ( builder . length ( ) - _NUM ) != _STR ) { builder . append ( _STR ) ; } } else { builder . append ( character ) ; } } return STANDARD_KEYS . get ( builder . toString ( ) ) ; } return STANDARD_KEYS . get ( key ) ; }
57196	private static void assertChangeEvents ( Collection < PortChangeEvent > earlyEvents , Collection < PortChangeEvent > lateEvents , Collection < PortChangeEvent > anytimeEvents , Collection < PortChangeEvent > actualEvents ) { String inputDesc = String . format ( _STR + _STR , earlyEvents , lateEvents , anytimeEvents , actualEvents ) ; Collection < PortChangeEvent > early = new ArrayList < PortChangeEvent > ( earlyEvents ) ; Collection < PortChangeEvent > late = new ArrayList < PortChangeEvent > ( lateEvents ) ; Collection < PortChangeEvent > any = new ArrayList < PortChangeEvent > ( anytimeEvents ) ; for ( PortChangeEvent ev : early ) { assertFalse ( _STR , late . contains ( ev ) ) ; assertFalse ( _STR , any . contains ( ev ) ) ; } for ( PortChangeEvent ev : late ) { assertFalse ( _STR , early . contains ( ev ) ) ; assertFalse ( _STR , any . contains ( ev ) ) ; } for ( PortChangeEvent ev : any ) { assertFalse ( _STR , early . contains ( ev ) ) ; assertFalse ( _STR , late . contains ( ev ) ) ; } for ( PortChangeEvent a : actualEvents ) { if ( early . remove ( a ) ) { continue ; } if ( any . remove ( a ) ) { continue ; } if ( late . remove ( a ) ) { if ( ! early . isEmpty ( ) ) { fail ( a + _STR + _STR + inputDesc ) ; } else { continue ; } } fail ( a + _STR + inputDesc ) ; } if ( ! early . isEmpty ( ) ) fail ( _STR + early + _STR + inputDesc ) ; if ( ! late . isEmpty ( ) ) fail ( _STR + late + _STR + inputDesc ) ; if ( ! any . isEmpty ( ) ) fail ( _STR + any + _STR + inputDesc ) ; }
43625	@ Override public void write ( Kryo kryo , Output output ) { int size = index . size ( ) ; output . writeInt ( size + _NUM , _BOOL ) ; for ( int i = _NUM ; i < size ; ++ i ) { String s = index . get ( i ) ; if ( s == null ) { throw new RuntimeException ( _STR + Integer . toString ( i ) ) ; } output . writeString ( s ) ; } }
8598	public final ObjectProperty < Control > toggleNodeProperty ( ) { return this . toggleNode ; }
12306	private static int decodeOctets ( int i , ByteBuffer bb , StringBuilder sb ) { if ( bb . limit ( ) == _NUM && ( bb . get ( _NUM ) & _NUM ) < _NUM ) { sb . append ( ( char ) bb . get ( _NUM ) ) ; return i + _NUM ; } else { CharBuffer cb = UTF_8_CHARSET . decode ( bb ) ; sb . append ( cb . toString ( ) ) ; return i + bb . limit ( ) * _NUM - _NUM ; } }
72448	public ArrayFieldVector ( FieldVector < T > v1 , T [ ] v2 ) throws NullArgumentException { MathUtils . checkNotNull ( v1 ) ; MathUtils . checkNotNull ( v2 ) ; field = v1 . getField ( ) ; final T [ ] v1Data = ( v1 instanceof ArrayFieldVector ) ? ( ( ArrayFieldVector < T > ) v1 ) . data : v1 . toArray ( ) ; data = MathArrays . buildArray ( field , v1Data . length + v2 . length ) ; System . arraycopy ( v1Data , _NUM , data , _NUM , v1Data . length ) ; System . arraycopy ( v2 , _NUM , data , v1Data . length , v2 . length ) ; }
29364	public void reverse ( ) { final ArrayList < Animator > animators = mAnimatedVectorState . mAnimators ; final int size = animators . size ( ) ; for ( int i = _NUM ; i < size ; i ++ ) { final Animator animator = animators . get ( i ) ; if ( canReverse ( animator ) ) { reverse ( animator ) ; } else { Log . w ( LOG_TAG , _STR ) ; } } }
23238	public void start ( ) { if ( sLogger . isActivated ( ) ) { sLogger . info ( _STR ) ; } mCleanupExecutor = Executors . newSingleThreadExecutor ( ) ; if ( ! mObserverIsRegistered ) { mContactsContractObserver = new ContactsContractObserver ( new Handler ( ) ) ; mContactsContractCursor = mContentResolver . query ( Phone . CONTENT_URI , null , null , null , null ) ; CursorUtil . assertCursorIsNotNull ( mContactsContractCursor , Phone . CONTENT_URI ) ; mContactsContractCursor . registerContentObserver ( mContactsContractObserver ) ; mObserverIsRegistered = _BOOL ; } }
16534	protected final void fireVetoableChange ( String propertyName , double oldValue , double newValue ) throws PropertyVetoException { fireVetoableChange ( propertyName , Double . valueOf ( oldValue ) , Double . valueOf ( newValue ) ) ; }
77251	public void testLMDirichlet ( ) throws IOException { float p = ( FREQ + _NUM * ( TOTAL_TERM_FREQ + _NUM ) / ( NUMBER_OF_FIELD_TOKENS + _NUM ) ) / ( DOC_LEN + _NUM ) ; float a = _NUM / ( DOC_LEN + _NUM ) ; float gold = ( float ) ( Math . log ( p / ( a * ( TOTAL_TERM_FREQ + _NUM ) / ( NUMBER_OF_FIELD_TOKENS + _NUM ) ) ) + Math . log ( a ) ) ; correctnessTestCore ( new LMDirichletSimilarity ( ) , gold ) ; }
56112	public void onSinksReceived ( String sourceUrn , List < MediaSink > sinks ) { mSinks . put ( sourceUrn , sinks ) ; nativeOnSinksReceived ( mNativeMediaRouterAndroid , sourceUrn , sinks . size ( ) ) ; }
8623	public User toEntity ( UserDTO dto ) { return toEntity ( dto , _NUM ) ; }
71629	protected void writeExternalForeignKeyDropStmt ( Table table , ForeignKey foreignKey , StringBuilder ddl ) { writeTableAlterStmt ( table , ddl ) ; ddl . append ( _STR ) ; printIdentifier ( getForeignKeyName ( table , foreignKey ) , ddl ) ; printEndOfStatement ( ddl ) ; }
74622	public void obtain ( long timeout_ms ) throws IOException , InterruptedException , TimeoutException { Long quit_time = System . currentTimeMillis ( ) + timeout_ms ; if ( fileLock != null && fileLock . isValid ( ) ) { return ; } do { try { fileLock = fileToLock . tryLock ( ) ; return ; } catch ( OverlappingFileLockException e ) { Thread . sleep ( _NUM ) ; } } while ( System . currentTimeMillis ( ) < quit_time ) ; throw new TimeoutException ( ) ; }
25717	@ Deprecated public void pointToData ( Data o ) throws FitsException { o . fillHeader ( this ) ; }
60270	@ NotNull protected VirtualFile [ ] collectAffectedFiles ( @ NotNull Project project , @ NotNull VirtualFile [ ] files ) { List < VirtualFile > affectedFiles = new ArrayList < VirtualFile > ( files . length ) ; ProjectLevelVcsManager projectLevelVcsManager = ProjectLevelVcsManager . getInstance ( project ) ; for ( VirtualFile file : files ) { if ( ! file . isDirectory ( ) && projectLevelVcsManager . getVcsFor ( file ) instanceof GitVcs ) { affectedFiles . add ( file ) ; } else if ( file . isDirectory ( ) && isRecursive ( ) ) { addChildren ( project , affectedFiles , file ) ; } } return VfsUtilCore . toVirtualFileArray ( affectedFiles ) ; }
6214	public void updatePosition ( Particle particle , long elapsedTime ) { Vector3f speed = particle . getSpeed ( ) ; float delta = elapsedTime / _NUM ; float dx = speed . x * delta ; float dy = speed . y * delta ; float dz = speed . z * delta ; Vector3f pos = particle . getPosition ( ) ; particle . setPosition ( pos . x + dx , pos . y + dy , pos . z + dz ) ; }
54198	protected void update ( int length ) { tickLabelValues . clear ( ) ; tickLabels . clear ( ) ; tickLabelPositions . clear ( ) ; if ( scale . isLogScaleEnabled ( ) ) { updateTickLabelForLogScale ( length ) ; } else { updateTickLabelForLinearScale ( length ) ; } updateTickVisibility ( ) ; updateTickLabelMaxLengthAndHeight ( ) ; }
60444	private static boolean isWithinBounds ( VisualPosition targetPosition , VisualPosition startPosition , VisualPosition endPosition ) { return targetPosition . line >= startPosition . line && targetPosition . line <= endPosition . line && targetPosition . column >= startPosition . column && targetPosition . column <= endPosition . column ; }
28112	static public void assertStatementIndicesConsistent ( final AbstractTripleStore db , final int maxerrors ) { if ( log . isInfoEnabled ( ) ) log . info ( _STR ) ; final AtomicInteger nerrs = new AtomicInteger ( _NUM ) ; final int from , to ; if ( db . getSPOKeyArity ( ) == _NUM ) { from = SPOKeyOrder . FIRST_TRIPLE_INDEX ; to = SPOKeyOrder . LAST_TRIPLE_INDEX ; } else { from = SPOKeyOrder . FIRST_QUAD_INDEX ; to = SPOKeyOrder . LAST_QUAD_INDEX ; } for ( int i = from ; i <= to ; i ++ ) { for ( int j = from ; j <= to ; j ++ ) { if ( i <= j ) { continue ; } assertSameStatements ( db , SPOKeyOrder . valueOf ( i ) , SPOKeyOrder . valueOf ( j ) , nerrs , maxerrors ) ; } } assertEquals ( _NUM , nerrs . get ( ) ) ; }
82678	public void show ( @ IdRes final int itemId ) { map . add ( itemId ) ; navigation . invalidateBadge ( itemId ) ; }
75492	public Options put ( String option , Integer value ) { if ( value == null ) { return remove ( option ) ; } options . put ( option , value . toString ( ) ) ; return this ; }
24768	private int determineTargetPage ( int currentPage , float pageOffset , int velocity , int deltaX ) { int targetPage ; if ( Math . abs ( deltaX ) > flingDistance && Math . abs ( velocity ) > minimumVelocity ) { if ( virtualPos < _NUM ) { targetPage = velocity > _NUM ? currentPage : currentPage + _NUM ; } else { targetPage = velocity > _NUM ? currentPage + _NUM : currentPage ; } } else { final float truncator = currentPage >= currentItem ? _NUM : _NUM ; targetPage = ( int ) ( currentPage + pageOffset + truncator ) ; } if ( items . size ( ) > _NUM ) { final ItemInfo firstItem = items . get ( _NUM ) ; final ItemInfo lastItem = items . get ( items . size ( ) - _NUM ) ; targetPage = Math . max ( firstItem . position , Math . min ( targetPage , lastItem . position ) ) ; } if ( targetPage > currentPage && onCardChangeListener != null ) { onCardChangeListener . onCardDismissed ( currentPage , virtualPos > _NUM ) ; } return targetPage ; }
28025	protected String form ( ObjectMatrix1D matrix , int index , Former formatter ) { Object value = matrix . get ( index ) ; if ( value == null ) return _STR ; return String . valueOf ( value ) ; }
62363	public void clone ( Vector3f source ) { System . arraycopy ( source . points , _NUM , points , _NUM , _NUM ) ; }
8888	public void disable ( BluetoothAdapter adapter ) { int mask = ( BluetoothReceiver . STATE_TURNING_OFF_FLAG | BluetoothReceiver . STATE_OFF_FLAG | BluetoothReceiver . SCAN_MODE_NONE_FLAG ) ; long start = - _NUM ; BluetoothReceiver receiver = getBluetoothReceiver ( mask ) ; int state = adapter . getState ( ) ; switch ( state ) { case BluetoothAdapter . STATE_OFF : assertFalse ( adapter . isEnabled ( ) ) ; removeReceiver ( receiver ) ; return ; case BluetoothAdapter . STATE_TURNING_ON : assertFalse ( adapter . isEnabled ( ) ) ; start = System . currentTimeMillis ( ) ; break ; case BluetoothAdapter . STATE_ON : assertTrue ( adapter . isEnabled ( ) ) ; start = System . currentTimeMillis ( ) ; assertTrue ( adapter . disable ( ) ) ; break ; case BluetoothAdapter . STATE_TURNING_OFF : assertFalse ( adapter . isEnabled ( ) ) ; mask = _NUM ; break ; default : removeReceiver ( receiver ) ; fail ( String . format ( _STR , state ) ) ; } long s = System . currentTimeMillis ( ) ; while ( System . currentTimeMillis ( ) - s < ENABLE_DISABLE_TIMEOUT ) { state = adapter . getState ( ) ; if ( state == BluetoothAdapter . STATE_OFF && ( receiver . getFiredFlags ( ) & mask ) == mask ) { assertFalse ( adapter . isEnabled ( ) ) ; long finish = receiver . getCompletedTime ( ) ; if ( start != - _NUM && finish != - _NUM ) { writeOutput ( String . format ( _STR , ( finish - start ) ) ) ; } else { writeOutput ( _STR ) ; } removeReceiver ( receiver ) ; return ; } sleep ( POLL_TIME ) ; } int firedFlags = receiver . getFiredFlags ( ) ; removeReceiver ( receiver ) ; fail ( String . format ( _STR , state , BluetoothAdapter . STATE_OFF , firedFlags , mask ) ) ; }
62233	public static String toRegex ( String glob , String separator ) { checkNotNull ( separator , _STR ) ; checkArgument ( separator . length ( ) == _NUM , _STR , separator ) ; return toRegex ( glob , separator . charAt ( _NUM ) ) ; }
25666	protected void forceNoLoss ( boolean value ) { }
16330	public static String [ ] splitWithoutEscaped ( String str , char separatorChar , boolean retainEmpty ) { int len = str . length ( ) ; if ( len == _NUM ) { return new String [ _NUM ] ; } List < String > list = new ArrayList < String > ( ) ; int i = _NUM ; int start = _NUM ; boolean match = _BOOL ; while ( i < len ) { if ( str . charAt ( i ) == _STR ) { match = _BOOL ; i += _NUM ; } else if ( str . charAt ( i ) == separatorChar ) { if ( retainEmpty || match ) { list . add ( str . substring ( start , i ) ) ; match = _BOOL ; } start = ++ i ; } else { match = _BOOL ; i ++ ; } } if ( retainEmpty || match ) { list . add ( str . substring ( start , i ) ) ; } return list . toArray ( new String [ list . size ( ) ] ) ; }
42376	private static HashMap < BasicBlockPair , HashSet < Register > > findSplitPoints ( IR ir , LiveAnalysis live , LSTGraph lst ) { HashMap < BasicBlockPair , HashSet < Register > > result = new HashMap < BasicBlockPair , HashSet < Register > > ( _NUM ) ; for ( Enumeration < GraphNode > e = lst . enumerateNodes ( ) ; e . hasMoreElements ( ) ; ) { LSTNode node = ( LSTNode ) e . nextElement ( ) ; BasicBlock header = node . getHeader ( ) ; BitVector loop = node . getLoop ( ) ; if ( loop == null ) continue ; for ( Enumeration < BasicBlock > in = header . getIn ( ) ; in . hasMoreElements ( ) ; ) { BasicBlock bb = in . nextElement ( ) ; if ( loop . get ( bb . getNumber ( ) ) ) continue ; HashSet < Register > liveRegisters = live . getLiveRegistersOnEdge ( bb , header ) ; for ( Register r : liveRegisters ) { if ( r . isSymbolic ( ) ) { HashSet < Register > s = findOrCreateSplitSet ( result , bb , header ) ; s . add ( r ) ; } } } for ( int i = _NUM ; i < loop . length ( ) ; i ++ ) { if ( loop . get ( i ) ) { BasicBlock bb = ir . getBasicBlock ( i ) ; for ( Enumeration < BasicBlock > out = bb . getNormalOut ( ) ; out . hasMoreElements ( ) ; ) { BasicBlock dest = out . nextElement ( ) ; if ( loop . get ( dest . getNumber ( ) ) ) continue ; HashSet < Register > liveRegisters = live . getLiveRegistersOnEdge ( bb , dest ) ; for ( Register r : liveRegisters ) { if ( r . isSymbolic ( ) ) { HashSet < Register > s = findOrCreateSplitSet ( result , bb , dest ) ; s . add ( r ) ; } } } } } } addEntriesForInfrequentBlocks ( ir , live , result ) ; return result ; }
5317	public void testSplitEscapedSemicolons ( ) { Properties inner = PropertyUtils . splitPropertiesOnSemicolon ( PropertyUtils . escapeBackSlashesIfNotNull ( _STR ) ) ; assertEquals ( _NUM , inner . size ( ) ) ; assertEquals ( _STR , inner . getProperty ( _STR ) ) ; assertEquals ( _STR , inner . getProperty ( _STR ) ) ; assertEquals ( _STR , inner . getProperty ( _STR ) ) ; assertEquals ( _STR , inner . getProperty ( _STR ) ) ; }
81986	public static void removeObjectAtOffset ( Object [ ] sourceArray , Object [ ] destinationArray , int offset ) { System . arraycopy ( sourceArray , _NUM , destinationArray , _NUM , offset ) ; System . arraycopy ( sourceArray , offset + _NUM , destinationArray , offset , sourceArray . length - offset - _NUM ) ; }
52674	@ SuppressWarnings ( _STR ) public DictionaryAdapter ( Context context , File dbPath , String dbName , String defaultTable ) { mContext = context ; mDbName = dbName ; mDefaultTable = defaultTable ; mDbPath = dbPath ; mDbFile = new File ( dbPath , mDbName ) ; if ( mDbFile . exists ( ) ) { open ( ) ; } }
34724	public boolean isTabAssociatedWithNonDestroyedActivity ( boolean isIncognito , int tabId ) { List < WeakReference < Activity > > activities = ApplicationStatus . getRunningActivities ( ) ; for ( WeakReference < Activity > ref : activities ) { Activity activity = ref . get ( ) ; if ( activity != null && isValidActivity ( isIncognito , activity . getIntent ( ) ) && getTabIdFromIntent ( activity . getIntent ( ) ) == tabId && ! isActivityDestroyed ( activity ) ) { return _BOOL ; } } return _BOOL ; }
3645	HttpStreamWrapper ( HttpStream stream ) throws IOException { _stream = stream ; }
10938	public boolean handleFile ( File file ) { if ( DEBUG ) { logger . fine ( _STR + file . getAbsolutePath ( ) ) ; } filenames . add ( file ) ; return _BOOL ; }
83406	public boolean looksLikeNumberComing ( ) { if ( n >= s . length ( ) ) return _BOOL ; return Character . isDigit ( s . charAt ( n ) ) ; }
5487	public PartialHull ( IPoint first , IPoint second ) { points . add ( first ) ; points . add ( second ) ; }
10628	public void addSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList < SwipeListener > ( ) ; } mListeners . add ( listener ) ; }
51528	public short readShort ( ) throws IOException { return primitiveTypes . readShort ( ) ; }
51491	public void print ( int inum ) { print ( String . valueOf ( inum ) ) ; }
37419	public static < NodeType extends IViewNode < ? > > ZyProximityNode < ? > createProximityNode ( final Graph2D graph , final ZyGraphNode < ? > attachedNode , final int degree , final boolean isIncoming ) { Preconditions . checkNotNull ( graph , _STR ) ; Preconditions . checkNotNull ( attachedNode , _STR ) ; final ZyLabelContent labelcontent = new ZyLabelContent ( null ) ; labelcontent . addLineContent ( new ZyLineContent ( String . valueOf ( degree ) , new Font ( _STR , Font . PLAIN , _NUM ) , null ) ) ; final ZyProximityNodeRealizer < NodeType > r = new ZyProximityNodeRealizer < NodeType > ( labelcontent ) ; final Node node = graph . createNode ( r ) ; @ SuppressWarnings ( _STR ) final ZyProximityNode < NodeType > infoNode = new ZyProximityNode < NodeType > ( node , r , ( ZyGraphNode < NodeType > ) attachedNode , isIncoming ) ; final ZyNodeData < ZyProximityNode < NodeType > > data = new ZyNodeData < ZyProximityNode < NodeType > > ( infoNode ) ; r . setUserData ( data ) ; return infoNode ; }
21413	public static boolean isZoningRequired ( DbClient dbClient , URI varrayUri ) { if ( varrayUri != null ) { VirtualArray nh = dbClient . queryObject ( VirtualArray . class , varrayUri ) ; if ( nh != null ) { return isZoningRequired ( dbClient , nh ) ; } } return _BOOL ; }
6133	public void reply ( List < String > responseHeaders , boolean out ) throws IOException { assert ( ! Thread . holdsLock ( SpdyStream . this ) ) ; boolean outFinished = _BOOL ; synchronized ( this ) { if ( responseHeaders == null ) { throw new NullPointerException ( _STR ) ; } if ( isLocallyInitiated ( ) ) { throw new IllegalStateException ( _STR ) ; } if ( this . responseHeaders != null ) { throw new IllegalStateException ( _STR ) ; } this . responseHeaders = responseHeaders ; if ( ! out ) { this . out . finished = _BOOL ; outFinished = _BOOL ; } } connection . writeSynReply ( id , outFinished , responseHeaders ) ; }
6919	protected CCAnimation ( String name , float delay , ArrayList < CCSpriteFrame > frames ) { delay_ = delay ; name_ = name ; frames_ = new ArrayList < CCSpriteFrame > ( ) ; if ( frames != null ) frames_ . addAll ( frames ) ; }
10593	private void navigateToDump ( ) { TreePath currentPath = tree . getSelectionPath ( ) ; tree . setSelectionPath ( currentPath . getParentPath ( ) ) ; tree . scrollPathToVisible ( currentPath . getParentPath ( ) ) ; }
33466	public synchronized void addMessages ( ArrayList < SmsMmsMessage > newMessages ) { if ( newMessages != null ) { messages . addAll ( _NUM , newMessages ) ; UpdateMessageCount ( ) ; } }
81556	public static Cache . Entry makeRandomCacheEntry ( byte [ ] data , boolean isExpired , boolean needsRefresh ) { Random random = new Random ( ) ; Cache . Entry entry = new Cache . Entry ( ) ; if ( data != null ) { entry . data = data ; } else { entry . data = new byte [ random . nextInt ( _NUM ) ] ; } entry . etag = String . valueOf ( random . nextLong ( ) ) ; entry . serverDate = random . nextLong ( ) ; entry . ttl = isExpired ? _NUM : Long . MAX_VALUE ; entry . softTtl = needsRefresh ? _NUM : Long . MAX_VALUE ; return entry ; }
39989	public int swap ( ) { if ( ! egl . eglSwapBuffers ( eglDisplay , eglSurface ) ) { return egl . eglGetError ( ) ; } return EGL10 . EGL_SUCCESS ; }
62578	public static List < Window > windows ( String words , int windowSize ) { StringTokenizer tokenizer = new StringTokenizer ( words ) ; List < String > list = new ArrayList < String > ( ) ; while ( tokenizer . hasMoreTokens ( ) ) list . add ( tokenizer . nextToken ( ) ) ; return windows ( list , windowSize ) ; }
55811	protected void drawCenterText ( Canvas c ) { CharSequence centerText = mChart . getCenterText ( ) ; if ( mChart . isDrawCenterTextEnabled ( ) && centerText != null ) { MPPointF center = mChart . getCenterCircleBox ( ) ; MPPointF offset = mChart . getCenterTextOffset ( ) ; float x = center . x + offset . x ; float y = center . y + offset . y ; float innerRadius = mChart . isDrawHoleEnabled ( ) && ! mChart . isDrawSlicesUnderHoleEnabled ( ) ? mChart . getRadius ( ) * ( mChart . getHoleRadius ( ) / _NUM ) : mChart . getRadius ( ) ; RectF holeRect = mRectBuffer [ _NUM ] ; holeRect . left = x - innerRadius ; holeRect . top = y - innerRadius ; holeRect . right = x + innerRadius ; holeRect . bottom = y + innerRadius ; RectF boundingRect = mRectBuffer [ _NUM ] ; boundingRect . set ( holeRect ) ; float radiusPercent = mChart . getCenterTextRadiusPercent ( ) / _NUM ; if ( radiusPercent > _NUM ) { boundingRect . inset ( ( boundingRect . width ( ) - boundingRect . width ( ) * radiusPercent ) / _NUM , ( boundingRect . height ( ) - boundingRect . height ( ) * radiusPercent ) / _NUM ) ; } if ( ! centerText . equals ( mCenterTextLastValue ) || ! boundingRect . equals ( mCenterTextLastBounds ) ) { mCenterTextLastBounds . set ( boundingRect ) ; mCenterTextLastValue = centerText ; float width = mCenterTextLastBounds . width ( ) ; mCenterTextLayout = new StaticLayout ( centerText , _NUM , centerText . length ( ) , mCenterTextPaint , ( int ) Math . max ( Math . ceil ( width ) , _NUM ) , Layout . Alignment . ALIGN_CENTER , _NUM , _NUM , _BOOL ) ; } float layoutHeight = mCenterTextLayout . getHeight ( ) ; c . save ( ) ; if ( Build . VERSION . SDK_INT >= _NUM ) { Path path = mDrawCenterTextPathBuffer ; path . reset ( ) ; path . addOval ( holeRect , Path . Direction . CW ) ; c . clipPath ( path ) ; } c . translate ( boundingRect . left , boundingRect . top + ( boundingRect . height ( ) - layoutHeight ) / _NUM ) ; mCenterTextLayout . draw ( c ) ; c . restore ( ) ; MPPointF . recycleInstance ( center ) ; MPPointF . recycleInstance ( offset ) ; } }
45731	public static String buildPath ( JsonPath jsonPath ) { List < String > urlParts = new LinkedList < > ( ) ; JsonPath currentJsonPath = jsonPath ; String pathPart ; do { if ( currentJsonPath instanceof RelationshipsPath ) { pathPart = RELATIONSHIP_MARK + SEPARATOR + currentJsonPath . getElementName ( ) ; } else if ( currentJsonPath instanceof FieldPath ) { pathPart = currentJsonPath . getElementName ( ) ; } else { pathPart = currentJsonPath . getElementName ( ) ; if ( currentJsonPath . getIds ( ) != null ) { pathPart += SEPARATOR + mergeIds ( currentJsonPath . getIds ( ) ) ; } } urlParts . add ( pathPart ) ; currentJsonPath = currentJsonPath . getParentResource ( ) ; } while ( currentJsonPath != null ) ; Collections . reverse ( urlParts ) ; return SEPARATOR + StringUtils . join ( SEPARATOR , urlParts ) + SEPARATOR ; }
11675	protected void groupFrames ( Vector < Frame > frames , Vector < Group > groups , boolean isDchum ) throws MakeTocException { Frame frame ; Group group ; int groupCount ; int nFrames = frames . size ( ) ; Debug . message ( _STR , _STR ) ; for ( int i = _NUM ; i < nFrames ; i ++ ) { Debug . message ( _STR , _STR ) ; frame = ( Frame ) frames . elementAt ( i ) ; if ( ! frame . marked ) { groupCount = groups . size ( ) ; group = new Group ( ) ; group . left = maxSide / _NUM ; group . right = group . left + _NUM ; group . top = maxSide / _NUM ; group . bottom = group . top + _NUM ; group . horiz_pos [ group . top ] = frame . top ; group . horiz_pos [ group . bottom ] = frame . bottom ; group . vert_pos [ group . left ] = frame . left ; group . vert_pos [ group . right ] = frame . right ; group . h_interval = frame . h_interval ; group . v_interval = frame . v_interval ; group . h_resolution = frame . h_resolution ; group . v_resolution = frame . v_resolution ; group . scale = frame . scale ; group . zone = frame . zone ; group . cib = frame . cib ; group . cdted = frame . cdted ; frame . x = group . left ; frame . y = group . top ; frame . group = groupCount ; frame . marked = _BOOL ; Debug . message ( _STR , _STR + groupCount + _STR + i + _STR + frame . filename + _STR ) ; if ( ! isDchum ) { for ( int j = _NUM ; j < nFrames ; j ++ ) { if ( i == j ) { Debug . message ( _STR , _STR + i + _STR ) ; continue ; } Frame f = ( Frame ) frames . elementAt ( j ) ; if ( addFrameToGroup ( group , f , groupCount ) ) { Debug . message ( _STR , _STR + j + _STR + groupCount ) ; continue ; } } } Debug . message ( _STR , _STR + groupCount + _STR ) ; groups . add ( group ) ; } fireProgressUpdate ( ProgressEvent . UPDATE , _STR , i , nFrames ) ; } if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + groups . size ( ) ) ; } }
25205	private static Object add ( final Object array , final int index , final Object element , final Class < ? > clss ) { if ( array == null ) { if ( index != _NUM ) { throw new IndexOutOfBoundsException ( _STR + index + _STR ) ; } Object joinedArray = Array . newInstance ( clss , _NUM ) ; Array . set ( joinedArray , _NUM , element ) ; return joinedArray ; } int length = Array . getLength ( array ) ; if ( index > length || index < _NUM ) { throw new IndexOutOfBoundsException ( _STR + index + _STR + length ) ; } Object result = Array . newInstance ( clss , length + _NUM ) ; System . arraycopy ( array , _NUM , result , _NUM , index ) ; Array . set ( result , index , element ) ; if ( index < length ) { System . arraycopy ( array , index , result , index + _NUM , length - index ) ; } return result ; }
72364	public double doubleValue ( ) { return d . doubleValue ( ) ; }
39243	public String toMatlab ( ) { StringBuffer result ; int i ; int n ; result = new StringBuffer ( ) ; result . append ( _STR ) ; for ( i = _NUM ; i < getRowDimension ( ) ; i ++ ) { if ( i > _NUM ) { result . append ( _STR ) ; } for ( n = _NUM ; n < getColumnDimension ( ) ; n ++ ) { if ( n > _NUM ) { result . append ( _STR ) ; } result . append ( Double . toString ( get ( i , n ) ) ) ; } } result . append ( _STR ) ; return result . toString ( ) ; }
11491	public FileInputReader ( File f ) throws IOException { if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + f . getAbsolutePath ( ) ) ; } name = f . getName ( ) ; absolutePath = f . getAbsolutePath ( ) ; inputFile = init ( f ) ; }
8388	public static ObjectOutputStream newObjectOutputStream ( Path self ) throws IOException { return new ObjectOutputStream ( Files . newOutputStream ( self ) ) ; }
63080	@ Override public Set < K > keySet ( ) { HashSet < K > set = new HashSet < K > ( ) ; for ( Segment < K , V > s : segments ) { set . addAll ( s . keySet ( ) ) ; } return set ; }
9064	private void updateBaseMatrix ( Drawable d ) { ImageView imageView = getImageView ( ) ; if ( null == imageView || null == d ) { return ; } final float viewWidth = imageView . getWidth ( ) ; final float viewHeight = imageView . getHeight ( ) ; final int drawableWidth = d . getIntrinsicWidth ( ) ; final int drawableHeight = d . getIntrinsicHeight ( ) ; mBaseMatrix . reset ( ) ; final float widthScale = viewWidth / drawableWidth ; final float heightScale = viewHeight / drawableHeight ; if ( mScaleType == ScaleType . CENTER ) { mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth ) / _NUM , ( viewHeight - drawableHeight ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_CROP ) { float scale = Math . max ( widthScale , heightScale ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_INSIDE ) { float scale = Math . min ( _NUM , Math . min ( widthScale , heightScale ) ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else { RectF mTempSrc = new RectF ( _NUM , _NUM , drawableWidth , drawableHeight ) ; RectF mTempDst = new RectF ( _NUM , _NUM , viewWidth , viewHeight ) ; switch ( mScaleType ) { case FIT_CENTER : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . CENTER ) ; break ; case FIT_START : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . START ) ; break ; case FIT_END : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . END ) ; break ; case FIT_XY : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . FILL ) ; break ; default : break ; } } resetMatrix ( ) ; }
34204	public void add ( final CertificateValidity certificateValidity ) { certificateValidityList . add ( certificateValidity ) ; }
14694	public void addPolicyListener ( PolicyListener policyListener ) { policyCache . addPolicyListener ( policyListener ) ; }
44882	public static Result verify ( String sid , String code ) { String id = _STR + sid ; Code c = ( Code ) Cache . get ( id ) ; if ( c == null ) { log . warn ( _STR + sid ) ; return Result . badcode ; } else if ( ! X . isSame ( code , c . code ) ) { log . warn ( _STR + c . code + _STR + code ) ; return Result . badcode ; } else if ( c . expired < System . currentTimeMillis ( ) ) { log . warn ( _STR + c . expired ) ; return Result . expired ; } return Result . ok ; }
26808	private ScriptEngine newScriptEngine ( File file ) throws ScriptException { String filename = file . getName ( ) ; int index = filename . lastIndexOf ( _STR ) ; if ( ( index < _NUM ) || ( index >= filename . length ( ) - _NUM ) ) { throw new ScriptException ( _STR ) ; } String extension = filename . substring ( index + _NUM ) ; ScriptEngineManager manager = new ScriptEngineManager ( ) ; ScriptEngine engine = manager . getEngineByExtension ( extension ) ; if ( engine == null ) { throw new ScriptException ( _STR + extension ) ; } return engine ; }
36839	protected static INaviRawModule findRawModule ( final int rawModuleId , final List < INaviRawModule > rawModules ) { Preconditions . checkArgument ( rawModuleId > _NUM , _STR , rawModuleId ) ; Preconditions . checkNotNull ( rawModules , _STR ) ; for ( final INaviRawModule rawModule : rawModules ) { if ( rawModule . getId ( ) == rawModuleId ) { return rawModule ; } } throw new IllegalStateException ( _STR ) ; }
68200	public static Object extractTypeChecked ( List < Object > args , int i , Class clazz , Function < List < Object > , Object > extractFunc ) { if ( args . size ( ) < i + _NUM ) { return null ; } else if ( clazz . isInstance ( args . get ( i ) ) ) { return extractFunc . apply ( args ) ; } else { return null ; } }
47517	@ Override public JapaneseDate dateYearDay ( int prolepticYear , int dayOfYear ) { return new JapaneseDate ( LocalDate . ofYearDay ( prolepticYear , dayOfYear ) ) ; }
48367	private Pair < Entry , char [ ] > recoverEntry ( KeyStore ks , String alias , char [ ] pstore , char [ ] pkey ) throws Exception { if ( ks . containsAlias ( alias ) == _BOOL ) { MessageFormat form = new MessageFormat ( rb . getString ( _STR ) ) ; Object [ ] source = { alias } ; throw new Exception ( form . format ( source ) ) ; } PasswordProtection pp = null ; Entry entry ; try { entry = ks . getEntry ( alias , pp ) ; pkey = null ; } catch ( UnrecoverableEntryException une ) { if ( P11KEYSTORE . equalsIgnoreCase ( ks . getType ( ) ) || KeyStoreUtil . isWindowsKeyStore ( ks . getType ( ) ) ) { throw une ; } if ( pkey != null ) { pp = new PasswordProtection ( pkey ) ; entry = ks . getEntry ( alias , pp ) ; } else { try { pp = new PasswordProtection ( pstore ) ; entry = ks . getEntry ( alias , pp ) ; pkey = pstore ; } catch ( UnrecoverableEntryException une2 ) { if ( P12KEYSTORE . equalsIgnoreCase ( ks . getType ( ) ) ) { throw une2 ; } else { pkey = getKeyPasswd ( alias , null , null ) ; pp = new PasswordProtection ( pkey ) ; entry = ks . getEntry ( alias , pp ) ; } } } } return Pair . of ( entry , pkey ) ; }
34885	URLClassLoader newLoader ( URL base ) { return new URLClassLoader ( new URL [ ] { base } ) ; }
18793	public void testMinUnequal1 ( ) { String a = _STR ; int aScale = _NUM ; String b = _STR ; int bScale = _NUM ; String c = _STR ; int cScale = _NUM ; BigDecimal aNumber = new BigDecimal ( new BigInteger ( a ) , aScale ) ; BigDecimal bNumber = new BigDecimal ( new BigInteger ( b ) , bScale ) ; BigDecimal cNumber = new BigDecimal ( new BigInteger ( c ) , cScale ) ; assertEquals ( _STR , cNumber , aNumber . min ( bNumber ) ) ; }
40262	public Wiser ( ) { this . server = new SMTPServer ( new SimpleMessageListenerAdapter ( this ) ) ; }
32516	protected static int [ ] concat ( @ Nullable int [ ] arr , int ... obj ) { int [ ] newArr ; if ( arr == null || arr . length == _NUM ) newArr = obj ; else { newArr = Arrays . copyOf ( arr , arr . length + obj . length ) ; System . arraycopy ( obj , _NUM , newArr , arr . length , obj . length ) ; } return newArr ; }
17354	public void truckCamera ( float size ) { moveToPosition ( - ( float ) ( targetXoff + ( size * Math . sin ( Math . toRadians ( zrot - _NUM ) ) ) ) , - ( float ) ( targetYoff + ( size * Math . cos ( Math . toRadians ( zrot - _NUM ) ) ) ) ) ; }
62252	public static byte [ ] decode2 ( String encoded ) { if ( encoded == null ) { return null ; } char [ ] base64Data = encoded . toCharArray ( ) ; int len = removeWhiteSpace ( base64Data ) ; if ( len % FOURBYTE != _NUM ) { return null ; } int numberQuadruple = ( len / FOURBYTE ) ; if ( numberQuadruple == _NUM ) { return new byte [ _NUM ] ; } byte decodedData [ ] = null ; byte b1 = _NUM , b2 = _NUM , b3 = _NUM , b4 = _NUM ; char d1 = _NUM , d2 = _NUM , d3 = _NUM , d4 = _NUM ; int i = _NUM ; int encodedIndex = _NUM ; int dataIndex = _NUM ; decodedData = new byte [ ( numberQuadruple ) * _NUM ] ; for ( ; i < numberQuadruple - _NUM ; i ++ ) { if ( ! isData ( ( d1 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d2 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d3 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d4 = base64Data [ dataIndex ++ ] ) ) ) { return null ; } b1 = base64Alphabet [ d1 ] ; b2 = base64Alphabet [ d2 ] ; b3 = base64Alphabet [ d3 ] ; b4 = base64Alphabet [ d4 ] ; decodedData [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( b3 << _NUM | b4 ) ; } if ( ! isData ( ( d1 = base64Data [ dataIndex ++ ] ) ) || ! isData ( ( d2 = base64Data [ dataIndex ++ ] ) ) ) { return null ; } b1 = base64Alphabet [ d1 ] ; b2 = base64Alphabet [ d2 ] ; d3 = base64Data [ dataIndex ++ ] ; d4 = base64Data [ dataIndex ++ ] ; if ( ! isData ( ( d3 ) ) || ! isData ( ( d4 ) ) ) { if ( isPad ( d3 ) && isPad ( d4 ) ) { if ( ( b2 & _NUM ) != _NUM ) { return null ; } byte [ ] tmp = new byte [ i * _NUM + _NUM ] ; System . arraycopy ( decodedData , _NUM , tmp , _NUM , i * _NUM ) ; tmp [ encodedIndex ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; return tmp ; } else if ( ! isPad ( d3 ) && isPad ( d4 ) ) { b3 = base64Alphabet [ d3 ] ; if ( ( b3 & _NUM ) != _NUM ) { return null ; } byte [ ] tmp = new byte [ i * _NUM + _NUM ] ; System . arraycopy ( decodedData , _NUM , tmp , _NUM , i * _NUM ) ; tmp [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; tmp [ encodedIndex ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; return tmp ; } else { return null ; } } else { b3 = base64Alphabet [ d3 ] ; b4 = base64Alphabet [ d4 ] ; decodedData [ encodedIndex ++ ] = ( byte ) ( b1 << _NUM | b2 > > _NUM ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( ( ( b2 & _NUM ) << _NUM ) | ( ( b3 > > _NUM ) & _NUM ) ) ; decodedData [ encodedIndex ++ ] = ( byte ) ( b3 << _NUM | b4 ) ; } return decodedData ; }
30069	public void shutdown ( ) { scheduledExecutorService . shutdownNow ( ) ; }
34931	public Builder clear ( ) { localeBuilder . clear ( ) ; return this ; }
20677	public static String deflate ( String previous , String current ) { if ( previous == null ) return current ; StringBuilder buf = new StringBuilder ( ) ; int start1 = _NUM ; int start2 = _NUM ; while ( start1 < previous . length ( ) && start2 < current . length ( ) ) { int end1 = start1 ; int end2 = start2 ; while ( end1 <= previous . length ( ) && end2 <= current . length ( ) ) { int c1 = ( end1 < previous . length ( ) ? previous . charAt ( end1 ) : _STR ) ; int c2 = ( end2 < current . length ( ) ? current . charAt ( end2 ) : _STR ) ; if ( c1 == c2 ) { if ( c1 == _STR ) { buf . append ( _STR ) ; break ; } else { end1 ++ ; end2 ++ ; } } else { while ( end1 < previous . length ( ) && previous . charAt ( end1 ) != _STR ) { end1 ++ ; } while ( end2 < current . length ( ) && current . charAt ( end2 ) != _STR ) { end2 ++ ; } for ( int i = start2 ; i < end2 ; i ++ ) buf . append ( current . charAt ( i ) ) ; break ; } } start1 = end1 + _NUM ; start2 = end2 + _NUM ; if ( start2 < current . length ( ) ) buf . append ( _STR ) ; } return buf . toString ( ) ; }
9383	protected int splitListIndex ( List < Pair < Double , Integer > > S ) { return S . size ( ) / _NUM ; }
42612	public static void e ( String tag , String msg , Object ... args ) { if ( sLevel > LEVEL_ERROR ) { return ; } if ( args . length > _NUM ) { msg = String . format ( msg , args ) ; } Log . e ( tag , msg ) ; }
73937	public static synchronized void addPropertyChangeListener ( PropertyChangeListener l ) { if ( ! listeners . contains ( l ) ) { listeners . add ( l ) ; } }
13644	private static void cleanDirectory ( File path ) { if ( path == null ) return ; if ( path . exists ( ) ) { for ( File f : path . listFiles ( ) ) { if ( f . isDirectory ( ) ) cleanDirectory ( f ) ; f . delete ( ) ; } } }
32200	private GridCacheVersion minVersion ( Iterable < IgniteTxEntry > entries , GridCacheVersion min , IgniteInternalTx tx ) { for ( IgniteTxEntry txEntry : entries ) { GridCacheEntryEx cached = txEntry . cached ( ) ; assert txEntry . isRead ( ) || ! cached . obsolete ( tx . xidVersion ( ) ) : _STR + cached + _STR + tx + _STR ; for ( GridCacheMvccCandidate cand : cached . remoteMvccSnapshot ( ) ) if ( min == null || cand . version ( ) . isLess ( min ) ) min = cand . version ( ) ; } return min ; }
4458	public DimensionedScalar ( String fieldValue ) throws IllegalArgumentException { super ( _STR , _STR ) ; Matcher matcher = PATTERN . matcher ( fieldValue ) ; if ( matcher . find ( ) ) { String name = matcher . group ( _NUM ) ; String dimensions = matcher . group ( _NUM ) ; String value = matcher . group ( _NUM ) ; setName ( name ) ; setValue ( value ) ; this . dimensions = new Dimensions ( dimensions ) ; } else { throw new DictionaryException ( _STR + fieldValue + _STR ) ; } }
66397	public void characters ( char ch [ ] , int start , int length ) throws SAXException { m_valueBuffer . append ( ch , start , length ) ; }
37984	protected double computeStdDev ( Instance inst , Matrix k ) throws Exception { double kappa = m_kernel . eval ( - _NUM , - _NUM , inst ) + m_deltaSquared ; double s = _NUM ; int n = m_L . length ; for ( int i = _NUM ; i < n ; i ++ ) { double t = _NUM ; for ( int j = _NUM ; j < n ; j ++ ) { t -= k . get ( j , _NUM ) * ( i > j ? m_L [ i ] [ j ] : m_L [ j ] [ i ] ) ; } s += t * k . get ( i , _NUM ) ; } double sigma = m_delta ; if ( kappa > s ) { sigma = Math . sqrt ( kappa - s ) ; } return sigma ; }
64643	protected void initialize ( Properties p ) { }
10187	public void add ( int index , int element ) { checkRangeIncludingEndpoint ( index ) ; ensureCapacity ( size + _NUM ) ; int numtomove = size - index ; System . arraycopy ( array , index , array , index + _NUM , numtomove ) ; array [ index ] = element ; size ++ ; }
62868	public MultiplexManager ( DataStore ... dataStores ) { this . dataStores = Arrays . asList ( dataStores ) ; }
80951	public boolean matchesRawNamePattern ( Object item ) { String prefix = patternMatcher . getPattern ( ) ; String text = getElementName ( item ) ; if ( text == null ) return _BOOL ; int textLength = text . length ( ) ; int prefixLength = prefix . length ( ) ; if ( textLength < prefixLength ) { return _BOOL ; } for ( int i = prefixLength - _NUM ; i >= _NUM ; i -- ) { if ( Character . toLowerCase ( prefix . charAt ( i ) ) != Character . toLowerCase ( text . charAt ( i ) ) ) return _BOOL ; } return _BOOL ; }
49625	public static @ Nonnull < T > T valueOrDefault ( @ Nullable T value , @ Nonnull T defaultValue ) { return value == null ? defaultValue : value ; }
54523	protected abstract int compareToLastMsg ( Pair < K , V > tupleKeyValue , Pair < byte [ ] , byte [ ] > lastReceivedKeyValue ) ;
71792	public void paintComponent ( Graphics g ) { g . drawImage ( track , _NUM , _NUM , null ) ; Graphics2D g2d = ( Graphics2D ) g . create ( ) ; g2d . translate ( carPosition . x , carPosition . y ) ; g2d . rotate ( Math . toRadians ( carRotation ) ) ; g2d . translate ( - ( carPosition . x ) , - ( carPosition . y ) ) ; g2d . drawImage ( car , carPosition . x - carWHalf , carPosition . y - carHHalf , null ) ; }
26432	public static java . sql . Time toSqlTime ( String time ) { java . util . Date newDate = toDate ( _STR , time ) ; if ( newDate != null ) { return new java . sql . Time ( newDate . getTime ( ) ) ; } else { return null ; } }
78101	private void parseMenu ( XmlPullParser parser , AttributeSet attrs , SublimeMenu menu ) throws XmlPullParserException , IOException { MenuState menuState = new MenuState ( menu ) ; int eventType = parser . getEventType ( ) ; String tagName ; boolean lookingForEndOfUnknownTag = _BOOL ; String unknownTagName = null ; do { if ( eventType == XmlPullParser . START_TAG ) { tagName = parser . getName ( ) ; if ( tagName . equals ( XML_MENU ) ) { eventType = parser . next ( ) ; break ; } throw new RuntimeException ( _STR + tagName ) ; } eventType = parser . next ( ) ; } while ( eventType != XmlPullParser . END_DOCUMENT ) ; boolean reachedEndOfMenu = _BOOL ; while ( ! reachedEndOfMenu ) { switch ( eventType ) { case XmlPullParser . START_TAG : if ( lookingForEndOfUnknownTag ) { break ; } tagName = parser . getName ( ) ; if ( tagName . equals ( XML_GROUP ) ) { if ( menuState . groupId != MenuState . defaultGroupId ) { throw new RuntimeException ( _STR + _STR ) ; } menuState . readGroup ( attrs ) ; menuState . addGroup ( ) ; } else if ( tagName . equals ( XML_TEXT ) || tagName . equals ( XML_TEXT_WITH_BADGE ) || tagName . equals ( XML_CHECKBOX ) || tagName . equals ( XML_SWITCH ) ) { menuState . readMenuItem ( attrs , tagName ) ; } else if ( tagName . equals ( XML_SEPARATOR ) ) { menuState . readMenuItem ( attrs , tagName ) ; } else if ( tagName . equals ( XML_GROUP_HEADER ) ) { if ( menuState . groupId == MenuState . defaultGroupId ) { throw new RuntimeException ( _STR + _STR ) ; } menuState . readMenuItem ( attrs , tagName ) ; } else if ( tagName . equals ( XML_MENU ) ) { throw new RuntimeException ( _STR + _STR + _STR ) ; } else { lookingForEndOfUnknownTag = _BOOL ; unknownTagName = tagName ; } break ; case XmlPullParser . END_TAG : tagName = parser . getName ( ) ; if ( lookingForEndOfUnknownTag && tagName . equals ( unknownTagName ) ) { lookingForEndOfUnknownTag = _BOOL ; unknownTagName = null ; } else if ( tagName . equals ( XML_GROUP ) ) { if ( menuState . isGroupCollapsible ( ) && menuState . groupHeadersAdded != _NUM ) { if ( menuState . groupHeadersAdded < _NUM ) { throw new RuntimeException ( _STR + _STR ) ; } else { throw new RuntimeException ( _STR + _STR + menuState . groupHeadersAdded + _STR ) ; } } menuState . resetGroup ( ) ; } else if ( tagName . equals ( XML_TEXT ) || tagName . equals ( XML_TEXT_WITH_BADGE ) || tagName . equals ( XML_CHECKBOX ) || tagName . equals ( XML_SWITCH ) || tagName . equals ( XML_GROUP_HEADER ) || tagName . equals ( XML_SEPARATOR ) ) { if ( ! menuState . hasAddedItem ( ) ) { menuState . addItem ( ) ; } } else if ( tagName . equals ( XML_MENU ) ) { reachedEndOfMenu = _BOOL ; } break ; case XmlPullParser . END_DOCUMENT : throw new RuntimeException ( _STR ) ; } eventType = parser . next ( ) ; } }
53263	public static double crossTrackDistanceRad ( double lat1 , double lon1 , double lat2 , double lon2 , double latQ , double lonQ ) { final double dlon12 = lon2 - lon1 ; final double dlon1Q = lonQ - lon1 ; final double dlat1Q = latQ - lat1 ; final double clat1 = Math . cos ( lat1 ) , slat1 = MathUtil . cosToSin ( lat1 , clat1 ) ; final double clatQ = Math . cos ( latQ ) , slatQ = MathUtil . cosToSin ( latQ , clatQ ) ; final double clat2 = Math . cos ( lat2 ) , slat2 = MathUtil . cosToSin ( lat2 , clat2 ) ; final double slat = Math . sin ( dlat1Q * _NUM ) ; final double slon = Math . sin ( dlon1Q * _NUM ) ; final double a = slat * slat + slon * slon * clat1 * clatQ ; final double angDist1Q = _NUM * Math . atan2 ( Math . sqrt ( a ) , Math . sqrt ( _NUM - a ) ) ; final double sdlon12 = Math . sin ( dlon12 ) , cdlon12 = MathUtil . sinToCos ( dlon12 , sdlon12 ) ; final double sdlon1Q = Math . sin ( dlon1Q ) , cdlon1Q = MathUtil . sinToCos ( dlon1Q , sdlon1Q ) ; final double yE = sdlon12 * clat2 ; final double yQ = sdlon1Q * clatQ ; final double xE = clat1 * slat2 - slat1 * clat2 * cdlon12 ; final double xQ = clat1 * slatQ - slat1 * clatQ * cdlon1Q ; final double crs12 = Math . atan2 ( yE , xE ) ; final double crs1Q = Math . atan2 ( yQ , xQ ) ; return Math . asin ( Math . sin ( angDist1Q ) * Math . sin ( crs1Q - crs12 ) ) ; }
14091	public String chooseServerAlias ( String keyType , Principal [ ] issuers , Socket socket ) { return defaultX509KM . chooseServerAlias ( keyType , issuers , socket ) ; }
84784	public static double pdf ( double x , double shape , double scale , double factor ) { if ( x <= _NUM ) return _NUM ; final double a = Math . exp ( shape * Math . log ( scale ) - ( shape + _NUM ) * Math . log ( x ) - ( scale / x ) - GammaFunction . lnGamma ( shape ) ) ; return factor * a ; }
66030	public String charge ( Properties ctx , int WindowNo , GridTab mTab , GridField mField , Object value ) { Integer C_Charge_ID = ( Integer ) value ; if ( C_Charge_ID == null || C_Charge_ID . intValue ( ) == _NUM ) return _STR ; String sql = _STR ; PreparedStatement pstmt = null ; ResultSet rs = null ; try { pstmt = DB . prepareStatement ( sql , null ) ; pstmt . setInt ( _NUM , C_Charge_ID . intValue ( ) ) ; rs = pstmt . executeQuery ( ) ; if ( rs . next ( ) ) { mTab . setValue ( _STR , rs . getBigDecimal ( _NUM ) ) ; } } catch ( SQLException e ) { log . log ( Level . SEVERE , sql , e ) ; return e . getLocalizedMessage ( ) ; } finally { DB . close ( rs , pstmt ) ; rs = null ; pstmt = null ; } return tax ( ctx , WindowNo , mTab , mField , value ) ; }
35247	protected Array < Actor > parse ( ) { actors = GdxArrays . newArray ( Actor . class ) ; invokePreListeners ( actors ) ; final StringBuilder builder = new StringBuilder ( ) ; while ( templateReader . hasNextCharacter ( ) ) { final char character = templateReader . nextCharacter ( ) ; if ( character == syntax . getArgumentOpening ( ) ) { processArgument ( ) ; } else if ( character == syntax . getTagOpening ( ) ) { if ( isNextCharacterCommentOpening ( ) ) { processComment ( ) ; continue ; } if ( currentParentTag != null ) { currentParentTag . handleDataBetweenTags ( builder ) ; } Strings . clearBuilder ( builder ) ; processTag ( builder ) ; } else { builder . append ( character ) ; } } if ( currentParentTag != null ) { throwError ( _STR + currentParentTag . getTagName ( ) + _STR ) ; } invokePortListeners ( actors ) ; return actors ; }
1795	public void testABandCBbrokerNetwork ( ) throws Exception { bridgeBrokers ( _STR , _STR ) ; bridgeBrokers ( _STR , _STR ) ; startAllBrokers ( ) ; Destination dest = createDestination ( _STR , _BOOL ) ; MessageConsumer clientA = createConsumer ( _STR , dest ) ; MessageConsumer clientB = createConsumer ( _STR , dest ) ; MessageConsumer clientC = createConsumer ( _STR , dest ) ; Thread . sleep ( _NUM ) ; sendMessages ( _STR , dest , MESSAGE_COUNT ) ; sendMessages ( _STR , dest , MESSAGE_COUNT ) ; sendMessages ( _STR , dest , MESSAGE_COUNT ) ; MessageIdList msgsA = getConsumerMessages ( _STR , clientA ) ; MessageIdList msgsB = getConsumerMessages ( _STR , clientB ) ; MessageIdList msgsC = getConsumerMessages ( _STR , clientC ) ; msgsA . waitForMessagesToArrive ( MESSAGE_COUNT ) ; msgsB . waitForMessagesToArrive ( MESSAGE_COUNT * _NUM ) ; msgsC . waitForMessagesToArrive ( MESSAGE_COUNT ) ; assertEquals ( MESSAGE_COUNT , msgsA . getMessageCount ( ) ) ; assertEquals ( MESSAGE_COUNT * _NUM , msgsB . getMessageCount ( ) ) ; assertEquals ( MESSAGE_COUNT , msgsC . getMessageCount ( ) ) ; }
67972	public void flush ( ) throws IOException { WspUtil . writeUint8 ( os_ , _NUM ) ; writePublicIdentifier ( os_ , publicID_ ) ; WspUtil . writeUintvar ( os_ , WapConstants . MIB_ENUM_UTF_8 ) ; writeStringTable ( os_ ) ; wbxmlBody_ . close ( ) ; wbxmlBody_ . writeTo ( os_ ) ; os_ . flush ( ) ; }
67949	public static void discard ( ) { current . remove ( ) ; }
35342	private Token toASIToken ( ILeafNode leaf ) { if ( leaf . isHidden ( ) ) { return newSemicolonToken ( leaf ) ; } else { if ( ! leafNodes . hasNext ( ) ) { int tokenType = tokenTypeMapper . getInternalTokenType ( leaf ) ; int semicolonTokenType = tokenTypeMapper . getInternalTokenType ( semicolon ) ; if ( tokenType == semicolonTokenType ) { return new CommonToken ( semicolonTokenType , leaf . getText ( ) ) ; } if ( leaf . getTotalEndOffset ( ) == endOffset ) { leafNodes = Iterators . emptyIterator ( ) ; return new CommonToken ( tokenType , leaf . getText ( ) ) ; } next = new CommonToken ( semicolonTokenType , leaf . getText ( ) ) ; return new CommonToken ( tokenType , leaf . getText ( ) ) ; } else if ( leaf . getGrammarElement ( ) == rightCurlyInBlock || leaf . getGrammarElement ( ) == rightCurlyInArrowExpression ) { int tokenType = tokenTypeMapper . getInternalTokenType ( leaf ) ; next = new CommonToken ( tokenType ) ; return new CommonToken ( tokenTypeMapper . getInternalTokenType ( semicolon ) , leaf . getText ( ) ) ; } else { return newSemicolonToken ( leaf ) ; } } }
59570	@ Override public PacketBuffer write ( PacketBuffer buf ) { values . forEach ( null ) ; return buf ; }
60394	public final void registerFileType ( @ NotNull FileType type , @ NonNls @ Nullable String ... defaultAssociatedExtensions ) { List < FileNameMatcher > matchers = new ArrayList < FileNameMatcher > ( ) ; if ( defaultAssociatedExtensions != null ) { for ( String extension : defaultAssociatedExtensions ) { matchers . add ( new ExtensionFileNameMatcher ( extension ) ) ; } } registerFileType ( type , matchers ) ; }
81771	public int parseInt ( String localeFormattedInteger ) { return Integer . parseInt ( localeFormattedInteger ) ; }
14015	public static RequestSecurityTokenResponse parseXML ( String xml ) throws WSFederationException { Document doc = XMLUtils . toDOMDocument ( xml , debug ) ; Element root = doc . getDocumentElement ( ) ; return new RequestSecurityTokenResponse ( root ) ; }
77948	@ Override public void requestResources ( SamzaResourceRequest resourceRequest ) { final int DEFAULT_PRIORITY = _NUM ; log . info ( _STR + resourceRequest . getPreferredHost ( ) + _STR + resourceRequest . getContainerID ( ) ) ; int memoryMb = resourceRequest . getMemoryMB ( ) ; int cpuCores = resourceRequest . getNumCores ( ) ; String containerLabel = yarnConfig . getContainerLabel ( ) ; String preferredHost = resourceRequest . getPreferredHost ( ) ; Resource capability = Resource . newInstance ( memoryMb , cpuCores ) ; Priority priority = Priority . newInstance ( DEFAULT_PRIORITY ) ; AMRMClient . ContainerRequest issuedRequest ; if ( preferredHost . equals ( _STR ) ) { log . info ( _STR + preferredHost ) ; issuedRequest = new AMRMClient . ContainerRequest ( capability , null , null , priority , _BOOL , containerLabel ) ; } else { log . info ( _STR + preferredHost ) ; issuedRequest = new AMRMClient . ContainerRequest ( capability , new String [ ] { preferredHost } , null , priority , _BOOL , containerLabel ) ; } synchronized ( lock ) { requestsMap . put ( resourceRequest , issuedRequest ) ; amClient . addContainerRequest ( issuedRequest ) ; } }
64245	private Collection < ExtractedItemsCollection > filterItemsByLevel ( Player player , List < ExtractedItemsCollection > itemsCollections ) { int playerLevel = player . getLevel ( ) ; Collection < ExtractedItemsCollection > result = new ArrayList < ExtractedItemsCollection > ( ) ; for ( ExtractedItemsCollection collection : itemsCollections ) { if ( collection . getMinLevel ( ) > playerLevel ) { continue ; } if ( collection . getMaxLevel ( ) > _NUM && collection . getMaxLevel ( ) < playerLevel ) { continue ; } result . add ( collection ) ; } return result ; }
74866	private String printDFormat ( String sx ) { int nLeadingZeros = _NUM ; int nBlanks = _NUM , n = _NUM ; int i = _NUM ; final int jFirst ; final boolean neg = sx . charAt ( _NUM ) == _STR ; if ( sx . equals ( _STR ) && precisionSet && precision == _NUM ) { sx = _STR ; } if ( ! neg ) { if ( precisionSet && sx . length ( ) < precision ) { nLeadingZeros = precision - sx . length ( ) ; } } else { if ( precisionSet && ( sx . length ( ) - _NUM ) < precision ) { nLeadingZeros = precision - sx . length ( ) + _NUM ; } } if ( nLeadingZeros < _NUM ) { nLeadingZeros = _NUM ; } if ( fieldWidthSet ) { nBlanks = fieldWidth - nLeadingZeros - sx . length ( ) ; if ( ! neg && ( leadingSign || leadingSpace ) ) { nBlanks -- ; } } if ( nBlanks < _NUM ) { nBlanks = _NUM ; } if ( leadingSign ) { n ++ ; } else if ( leadingSpace ) { n ++ ; } n += nBlanks ; n += nLeadingZeros ; n += sx . length ( ) ; final char [ ] ca = new char [ n ] ; if ( leftJustify ) { if ( neg ) { ca [ i ++ ] = _STR ; } else if ( leadingSign ) { ca [ i ++ ] = _STR ; } else if ( leadingSpace ) { ca [ i ++ ] = _STR ; } final char [ ] csx = sx . toCharArray ( ) ; jFirst = neg ? _NUM : _NUM ; for ( int j = _NUM ; j < nLeadingZeros ; i ++ , j ++ ) { ca [ i ] = _STR ; } for ( int j = jFirst ; j < csx . length ; j ++ , i ++ ) { ca [ i ] = csx [ j ] ; } for ( int j = _NUM ; j < nBlanks ; i ++ , j ++ ) { ca [ i ] = _STR ; } } else { if ( ! leadingZeros ) { for ( i = _NUM ; i < nBlanks ; i ++ ) { ca [ i ] = _STR ; } if ( neg ) { ca [ i ++ ] = _STR ; } else if ( leadingSign ) { ca [ i ++ ] = _STR ; } else if ( leadingSpace ) { ca [ i ++ ] = _STR ; } } else { if ( neg ) { ca [ i ++ ] = _STR ; } else if ( leadingSign ) { ca [ i ++ ] = _STR ; } else if ( leadingSpace ) { ca [ i ++ ] = _STR ; } for ( int j = _NUM ; j < nBlanks ; j ++ , i ++ ) { ca [ i ] = _STR ; } } for ( int j = _NUM ; j < nLeadingZeros ; j ++ , i ++ ) { ca [ i ] = _STR ; } final char [ ] csx = sx . toCharArray ( ) ; jFirst = neg ? _NUM : _NUM ; for ( int j = jFirst ; j < csx . length ; j ++ , i ++ ) { ca [ i ] = csx [ j ] ; } } return new String ( ca ) ; }
55613	private void drawHost ( Graphics2D g2 ) { Coord loc = node . getLocation ( ) ; if ( drawCoverage && node . isRadioActive ( ) ) { ArrayList < NetworkInterface > interfaces = new ArrayList < NetworkInterface > ( ) ; interfaces . addAll ( node . getInterfaces ( ) ) ; for ( NetworkInterface ni : interfaces ) { double range = ni . getTransmitRange ( ) ; Ellipse2D . Double coverage ; coverage = new Ellipse2D . Double ( scale ( loc . getX ( ) - range ) , scale ( loc . getY ( ) - range ) , scale ( range * _NUM ) , scale ( range * _NUM ) ) ; g2 . setColor ( rangeColor ) ; g2 . draw ( coverage ) ; } } if ( drawConnections ) { g2 . setColor ( conColor ) ; Coord c1 = node . getLocation ( ) ; ArrayList < Connection > conList = new ArrayList < Connection > ( ) ; conList . addAll ( node . getConnections ( ) ) ; for ( Connection c : conList ) { DTNHost otherNode = c . getOtherNode ( node ) ; Coord c2 ; if ( otherNode == null ) { continue ; } c2 = otherNode . getLocation ( ) ; g2 . drawLine ( scale ( c1 . getX ( ) ) , scale ( c1 . getY ( ) ) , scale ( c2 . getX ( ) ) , scale ( c2 . getY ( ) ) ) ; } } g2 . setColor ( hostColor ) ; g2 . drawRect ( scale ( loc . getX ( ) - _NUM ) , scale ( loc . getY ( ) - _NUM ) , scale ( _NUM ) , scale ( _NUM ) ) ; if ( isHighlighted ( ) ) { g2 . setColor ( highlightedNodeColor ) ; g2 . fillRect ( scale ( loc . getX ( ) ) - _NUM , scale ( loc . getY ( ) ) - _NUM , _NUM , _NUM ) ; } if ( drawNodeName ) { g2 . setColor ( hostNameColor ) ; g2 . drawString ( node . toString ( ) , scale ( loc . getX ( ) ) , scale ( loc . getY ( ) ) ) ; } }
70541	public static int binarySearchFloor ( long [ ] a , long key , boolean inclusive , boolean stayInBounds ) { int index = Arrays . binarySearch ( a , key ) ; index = index < _NUM ? - ( index + _NUM ) : ( inclusive ? index : ( index - _NUM ) ) ; return stayInBounds ? Math . max ( _NUM , index ) : index ; }
69526	public boolean add ( symbol sym ) throws internal_error { Object previous ; not_null ( sym ) ; previous = _all . put ( sym . name ( ) , sym ) ; return previous == null ; }
13605	protected static final String addEscapes ( String str ) { StringBuffer retval = new StringBuffer ( ) ; char ch ; for ( int i = _NUM ; i < str . length ( ) ; i ++ ) { switch ( str . charAt ( i ) ) { case _NUM : continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; case _STR : retval . append ( _STR ) ; continue ; default : if ( ( ch = str . charAt ( i ) ) < _NUM || ch > _NUM ) { String s = _STR + Integer . toString ( ch , _NUM ) ; retval . append ( _STR + s . substring ( s . length ( ) - _NUM , s . length ( ) ) ) ; } else { retval . append ( ch ) ; } continue ; } } return retval . toString ( ) ; }
15674	public final int size ( ) { if ( GWT . isScript ( ) ) { return jsArray . size ( ) ; } else { return javaArray . size ( ) ; } }
76896	public boolean intersects ( final PlanetModel planetModel , final Plane q , final GeoPoint [ ] notablePoints , final GeoPoint [ ] moreNotablePoints , final Membership [ ] bounds , final Membership ... moreBounds ) { if ( isNumericallyIdentical ( q ) ) { for ( GeoPoint p : notablePoints ) { if ( meetsAllBounds ( p , bounds , moreBounds ) ) { return _BOOL ; } } for ( GeoPoint p : moreNotablePoints ) { if ( meetsAllBounds ( p , bounds , moreBounds ) ) { return _BOOL ; } } return _BOOL ; } final double lineVectorX = y * q . z - z * q . y ; final double lineVectorY = z * q . x - x * q . z ; final double lineVectorZ = x * q . y - y * q . x ; if ( Math . abs ( lineVectorX ) < MINIMUM_RESOLUTION && Math . abs ( lineVectorY ) < MINIMUM_RESOLUTION && Math . abs ( lineVectorZ ) < MINIMUM_RESOLUTION ) { return _BOOL ; } double x0 ; double y0 ; double z0 ; final double denomYZ = this . y * q . z - this . z * q . y ; final double denomXZ = this . x * q . z - this . z * q . x ; final double denomXY = this . x * q . y - this . y * q . x ; if ( Math . abs ( denomYZ ) >= Math . abs ( denomXZ ) && Math . abs ( denomYZ ) >= Math . abs ( denomXY ) ) { if ( Math . abs ( denomYZ ) < MINIMUM_RESOLUTION_SQUARED ) { return _BOOL ; } final double denom = _NUM / denomYZ ; x0 = _NUM ; y0 = ( - this . D * q . z - this . z * - q . D ) * denom ; z0 = ( this . y * - q . D + this . D * q . y ) * denom ; } else if ( Math . abs ( denomXZ ) >= Math . abs ( denomXY ) && Math . abs ( denomXZ ) >= Math . abs ( denomYZ ) ) { if ( Math . abs ( denomXZ ) < MINIMUM_RESOLUTION_SQUARED ) { return _BOOL ; } final double denom = _NUM / denomXZ ; x0 = ( - this . D * q . z - this . z * - q . D ) * denom ; y0 = _NUM ; z0 = ( this . x * - q . D + this . D * q . x ) * denom ; } else { if ( Math . abs ( denomXY ) < MINIMUM_RESOLUTION_SQUARED ) { return _BOOL ; } final double denom = _NUM / denomXY ; x0 = ( - this . D * q . y - this . y * - q . D ) * denom ; y0 = ( this . x * - q . D + this . D * q . x ) * denom ; z0 = _NUM ; } final double A = lineVectorX * lineVectorX * planetModel . inverseAbSquared + lineVectorY * lineVectorY * planetModel . inverseAbSquared + lineVectorZ * lineVectorZ * planetModel . inverseCSquared ; final double B = _NUM * ( lineVectorX * x0 * planetModel . inverseAbSquared + lineVectorY * y0 * planetModel . inverseAbSquared + lineVectorZ * z0 * planetModel . inverseCSquared ) ; final double C = x0 * x0 * planetModel . inverseAbSquared + y0 * y0 * planetModel . inverseAbSquared + z0 * z0 * planetModel . inverseCSquared - _NUM ; final double BsquaredMinus = B * B - _NUM * A * C ; if ( Math . abs ( BsquaredMinus ) < MINIMUM_RESOLUTION_SQUARED ) { final double inverse2A = _NUM / ( _NUM * A ) ; final double t = - B * inverse2A ; final double pointX = lineVectorX * t + x0 ; final double pointY = lineVectorY * t + y0 ; final double pointZ = lineVectorZ * t + z0 ; for ( final Membership bound : bounds ) { if ( ! bound . isWithin ( pointX , pointY , pointZ ) ) { return _BOOL ; } } for ( final Membership bound : moreBounds ) { if ( ! bound . isWithin ( pointX , pointY , pointZ ) ) { return _BOOL ; } } return _BOOL ; } else if ( BsquaredMinus > _NUM ) { final double inverse2A = _NUM / ( _NUM * A ) ; final double sqrtTerm = Math . sqrt ( BsquaredMinus ) ; final double t1 = ( - B + sqrtTerm ) * inverse2A ; final double t2 = ( - B - sqrtTerm ) * inverse2A ; final double point1X = lineVectorX * t1 + x0 ; final double point1Y = lineVectorY * t1 + y0 ; final double point1Z = lineVectorZ * t1 + z0 ; boolean point1Valid = _BOOL ; for ( final Membership bound : bounds ) { if ( ! bound . isWithin ( point1X , point1Y , point1Z ) ) { point1Valid = _BOOL ; break ; } } if ( point1Valid ) { for ( final Membership bound : moreBounds ) { if ( ! bound . isWithin ( point1X , point1Y , point1Z ) ) { point1Valid = _BOOL ; break ; } } } if ( point1Valid ) { return _BOOL ; } final double point2X = lineVectorX * t2 + x0 ; final double point2Y = lineVectorY * t2 + y0 ; final double point2Z = lineVectorZ * t2 + z0 ; for ( final Membership bound : bounds ) { if ( ! bound . isWithin ( point2X , point2Y , point2Z ) ) { return _BOOL ; } } for ( final Membership bound : moreBounds ) { if ( ! bound . isWithin ( point2X , point2Y , point2Z ) ) { return _BOOL ; } } return _BOOL ; } else { return _BOOL ; } }
34164	public static long longFromBase64 ( String value ) { int pos = _NUM ; long longVal = base64Values [ value . charAt ( pos ++ ) ] ; int len = value . length ( ) ; while ( pos < len ) { longVal <<= _NUM ; longVal |= base64Values [ value . charAt ( pos ++ ) ] ; } return longVal ; }
62594	public List < LocalTime > bottom ( int n ) { List < LocalTime > bottom = new ArrayList < > ( ) ; int [ ] values = data . toIntArray ( ) ; IntArrays . parallelQuickSort ( values ) ; for ( int i = _NUM ; i < n && i < values . length ; i ++ ) { bottom . add ( PackedLocalTime . asLocalTime ( values [ i ] ) ) ; } return bottom ; }
53536	public double SumOutlinkAuthorityScore ( Page page ) { List < String > outLinks = page . getOutlinks ( ) ; double authScore = _NUM ; for ( int i = _NUM ; i < outLinks . size ( ) ; i ++ ) { Page outLink = pTable . get ( outLinks . get ( i ) ) ; if ( outLink != null ) { authScore += outLink . authority ; } } return authScore ; }
47990	public synchronized void end ( ) { graphicsToBeDrawn . close ( ) ; if ( currentGraphics != null ) { graphicsDrawn . append ( currentGraphics ) ; } graphicsDrawn . closeWhenEmpty ( ) ; if ( printerJobThread != null && printerJobThread . isAlive ( ) ) { try { printerJobThread . join ( ) ; } catch ( InterruptedException e ) { } } }
8984	public List < FileStatus > browse ( String filePath ) throws Exception { LOG . info ( _STR + filePath + _STR + hdfsEndPoint ) ; FileSystem hdfsFileSystem = null ; FileStatus [ ] listStatus ; try { Configuration config = createConfig ( ) ; hdfsFileSystem = getFileSystem ( config ) ; Path path = new Path ( filePath ) ; listStatus = hdfsFileSystem . listStatus ( path ) ; } catch ( Exception ex ) { LOG . error ( _STR + filePath , ex . getMessage ( ) ) ; throw new Exception ( _STR + ex . getMessage ( ) ) ; } finally { if ( hdfsFileSystem != null ) hdfsFileSystem . close ( ) ; } return Arrays . asList ( listStatus ) ; }
42741	public void append ( CharSequence s ) { text . append ( s ) ; }
68638	public EipModelWizardInitialObjectCreationPage ( String pageId ) { super ( pageId ) ; }
31989	private void unwrapData ( ) throws IgniteCheckedException , SSLException { if ( log . isDebugEnabled ( ) ) log . debug ( _STR ) ; inNetBuf . flip ( ) ; SSLEngineResult res = unwrap0 ( ) ; inNetBuf . compact ( ) ; checkStatus ( res ) ; renegotiateIfNeeded ( res ) ; }
58284	public boolean isAttributeSpecified ( int attributeHandle ) { int type = getNodeType ( attributeHandle ) ; if ( DTM . ATTRIBUTE_NODE == type ) { Attr attr = ( Attr ) getNode ( attributeHandle ) ; return attr . getSpecified ( ) ; } return _BOOL ; }
16068	private static void checkPermission ( ) throws SecurityException { SecurityManager sm = System . getSecurityManager ( ) ; if ( sm != null ) { sm . checkPermission ( new JodaTimePermission ( _STR ) ) ; } }
14556	private void storePassword ( String password ) { if ( isStore && sharedState != null ) { sharedState . put ( getPwdKey ( ) , password ) ; } }
86045	public void or ( Criteria criteria ) { oredCriteria . add ( criteria ) ; }
48099	void deleteChild ( PolicyNode childNode ) { if ( isImmutable ) { throw new IllegalStateException ( _STR ) ; } mChildren . remove ( childNode ) ; }
84563	void addFillComponents ( Container panel , int [ ] cols , int [ ] rows ) { Dimension filler = new Dimension ( _NUM , _NUM ) ; boolean filled_cell_11 = _BOOL ; CellConstraints cc = new CellConstraints ( ) ; if ( cols . length > _NUM && rows . length > _NUM ) { if ( cols [ _NUM ] == _NUM && rows [ _NUM ] == _NUM ) { panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , _NUM ) ) ; filled_cell_11 = _BOOL ; } } for ( int index = _NUM ; index < cols . length ; index ++ ) { if ( cols [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( cols [ index ] , _NUM ) ) ; } for ( int index = _NUM ; index < rows . length ; index ++ ) { if ( rows [ index ] == _NUM && filled_cell_11 ) { continue ; } panel . add ( Box . createRigidArea ( filler ) , cc . xy ( _NUM , rows [ index ] ) ) ; } }
58575	public void testFloatValuePlusZero ( ) { String a = _STR ; BigDecimal aNumber = new BigDecimal ( a ) ; int zero = _NUM ; float result = aNumber . floatValue ( ) ; assertTrue ( _STR , Float . floatToIntBits ( result ) == zero ) ; }
43519	public ExternalProcessResult awaitTerminationAndResult ( int timeoutMs , boolean destroyOnError ) throws InterruptedException , TimeoutException , OperationCancellation , IOException { awaitTermination ( timeoutMs , destroyOnError ) ; return new ExternalProcessResult ( process . exitValue ( ) , getStdOutBytes ( ) , getStdErrBytes ( ) ) ; }
8363	public void refreshInheritedMethods ( Set modifiedSuperExpandos ) { for ( Iterator i = modifiedSuperExpandos . iterator ( ) ; i . hasNext ( ) ; ) { ExpandoMetaClass superExpando = ( ExpandoMetaClass ) i . next ( ) ; if ( superExpando != this ) { refreshInheritedMethods ( superExpando ) ; } } }
7199	public static List < Fragment > parsePlaceholder ( String parseString ) throws PlaceholderParseException { List < Fragment > result = new ArrayList < Fragment > ( ) ; int currOutputIndex = _NUM ; int currSearchIndex = _NUM ; while ( _BOOL ) { if ( currSearchIndex == parseString . length ( ) ) { break ; } int startIndex = parseString . indexOf ( _STR , currSearchIndex ) ; if ( startIndex == - _NUM ) { if ( currOutputIndex < parseString . length ( ) ) { String endString = parseString . substring ( currOutputIndex , parseString . length ( ) ) ; TextFragment textFragment = new TextFragment ( endString ) ; result . add ( textFragment ) ; } break ; } if ( startIndex > _NUM ) { String textSoFar = parseString . substring ( currOutputIndex , startIndex ) ; if ( textSoFar . length ( ) != _NUM ) { result . add ( new TextFragment ( textSoFar ) ) ; } } if ( ( startIndex > _NUM ) && ( parseString . charAt ( startIndex - _NUM ) == _STR ) ) { currOutputIndex = startIndex + _NUM ; currSearchIndex = startIndex + _NUM ; continue ; } int endIndex = parseString . indexOf ( _STR , startIndex ) ; if ( endIndex == - _NUM ) { throw new PlaceholderParseException ( _STR + parseString . substring ( startIndex , parseString . length ( ) ) + _STR ) ; } String between = parseString . substring ( startIndex + _NUM , endIndex ) ; ParameterFragment parameterFragment = new ParameterFragment ( between ) ; result . add ( parameterFragment ) ; currOutputIndex = endIndex + _NUM ; currSearchIndex = endIndex ; } LinkedList < Fragment > fragments = new LinkedList < Fragment > ( ) ; fragments . add ( result . get ( _NUM ) ) ; for ( int i = _NUM ; i < result . size ( ) ; i ++ ) { Fragment fragment = result . get ( i ) ; if ( ! ( result . get ( i ) instanceof TextFragment ) ) { fragments . add ( fragment ) ; continue ; } if ( ! ( fragments . getLast ( ) instanceof TextFragment ) ) { fragments . add ( fragment ) ; continue ; } TextFragment textFragment = ( TextFragment ) fragments . getLast ( ) ; fragments . removeLast ( ) ; fragments . add ( new TextFragment ( textFragment . getValue ( ) + fragment . getValue ( ) ) ) ; } return fragments ; }
25404	@ Override protected void failed ( ) { relation . setCanceled ( _BOOL ) ; super . failed ( ) ; }
2975	private void routeSingleGetRequest ( RequestAndResponse requestAndResponse , String uri ) throws IOException , ServletException { if ( uri . startsWith ( _STR ) ) { handleHtmlShowNotebooks ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlShowQuotations ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlShowSources ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlShowSource ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlShowNotebook ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlSearch ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlBasicHelp ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlAdvancedHelp ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlHelp ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlUserBackupForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlUserRestoreForm ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlShowAccount ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlShowAccounts ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlShutdownForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlClearForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlOnlineBackupForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlCheckForErrorsForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlShowDBBackups ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlOfflineDbBackupForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleJsonShowEntry ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleJsonShowEntryParent ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleJsonShowEntryChildren ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleJsonSearchNotes ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlNewNotebookForm ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlNothing ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlCouldNotCreateNote ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlShowRestoreDbBackupCommand ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlShowSignedOut ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlChangePassword ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlChangeAccount ( requestAndResponse ) ; } else if ( uri . startsWith ( _STR ) ) { handleHtmlCloseAccount ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleJsonIsSignedIn ( requestAndResponse ) ; } else if ( uri . equals ( _STR ) ) { handleHtmlUserRestoreFrame ( requestAndResponse ) ; } else { returnHtml404 ( requestAndResponse ) ; } }
10081	private void changeAnnotationDocumentState ( SourceDocument aSourceDocument , User aUser , AnnotationDocumentStateTransition aAnnotationDocumentStateTransition ) { AnnotationDocument annotationDocument = repository . getAnnotationDocument ( aSourceDocument , aUser ) ; annotationDocument . setState ( AnnotationDocumentStateTransition . transition ( aAnnotationDocumentStateTransition ) ) ; try { repository . createAnnotationDocument ( annotationDocument ) ; } catch ( IOException e ) { LOG . info ( _STR ) ; } }
83326	boolean removeEdge ( SparseEdge e ) { boolean removedEdge = edges . remove ( e ) ; boolean removedNeighbour = neighbours . remove ( e . getOpposite ( this ) ) ; if ( removedEdge && removedNeighbour ) return _BOOL ; else if ( ! removedEdge && ! removedNeighbour ) return _BOOL ; else throw new RuntimeException ( _STR ) ; }
82034	protected void longKeyPress ( int keyCode ) { }
61971	public boolean hasDescendant ( Pattern pattern ) { Queue < BNode > nodesToProcess = new LinkedList < BNode > ( ) ; nodesToProcess . add ( this ) ; while ( ! nodesToProcess . isEmpty ( ) ) { BNode currentNode = nodesToProcess . poll ( ) ; for ( BNode descendantNode : currentNode . getOutputNodes ( ) ) { Matcher matcher = pattern . matcher ( descendantNode . getId ( ) ) ; if ( matcher . matches ( ) ) { return _BOOL ; } if ( ! nodesToProcess . contains ( descendantNode ) ) { nodesToProcess . add ( descendantNode ) ; } } } return _BOOL ; }
57335	public int fileWrite ( long handle , byte [ ] buffer , int offset , int count ) { if ( ( offset | count ) < _NUM || offset > buffer . length || buffer . length - offset < count ) { throw new ArrayIndexOutOfBoundsException ( _STR + buffer . length + _STR + offset + _STR + count ) ; } if ( count == _NUM ) { return _NUM ; } byte [ ] data = buffer ; if ( offset > _NUM ) { data = new byte [ count ] ; System . arraycopy ( buffer , offset , data , _NUM , count ) ; } IntOut bytesWrittenOut = new IntOut ( ) ; try { checkResult ( LibIMobileDevice . afc_file_write ( getRef ( ) , handle , data , count , bytesWrittenOut ) ) ; int bytesWritten = bytesWrittenOut . getValue ( ) ; return bytesWritten ; } finally { bytesWrittenOut . delete ( ) ; } }
49350	private static void generateFiles ( ) { String [ ] classNames ; ResourceBundle rules , info ; info = ResourceBundle . getBundle ( _STR , new Locale ( language , country , valiant ) , BreakIteratorRBControl . INSTANCE ) ; classNames = info . getStringArray ( _STR ) ; rules = ResourceBundle . getBundle ( _STR , new Locale ( language , country , valiant ) , BreakIteratorRBControl . INSTANCE ) ; if ( info . containsKey ( _STR ) ) { generateDataFile ( info . getString ( _STR ) , rules . getString ( _STR ) , classNames [ _NUM ] ) ; } if ( info . containsKey ( _STR ) ) { generateDataFile ( info . getString ( _STR ) , rules . getString ( _STR ) , classNames [ _NUM ] ) ; } if ( info . containsKey ( _STR ) ) { generateDataFile ( info . getString ( _STR ) , rules . getString ( _STR ) , classNames [ _NUM ] ) ; } if ( info . containsKey ( _STR ) ) { generateDataFile ( info . getString ( _STR ) , rules . getString ( _STR ) , classNames [ _NUM ] ) ; } }
50404	public static boolean isCglibProxy ( Object object ) { return ClassUtils . isCglibProxyClass ( object . getClass ( ) ) ; }
70740	private float [ ] calculateImageIndents ( ) { mTempMatrix . reset ( ) ; mTempMatrix . setRotate ( - getCurrentAngle ( ) ) ; float [ ] unrotatedImageCorners = Arrays . copyOf ( mCurrentImageCorners , mCurrentImageCorners . length ) ; float [ ] unrotatedCropBoundsCorners = RectUtils . getCornersFromRect ( mCropRect ) ; mTempMatrix . mapPoints ( unrotatedImageCorners ) ; mTempMatrix . mapPoints ( unrotatedCropBoundsCorners ) ; RectF unrotatedImageRect = RectUtils . trapToRect ( unrotatedImageCorners ) ; RectF unrotatedCropRect = RectUtils . trapToRect ( unrotatedCropBoundsCorners ) ; float deltaLeft = unrotatedImageRect . left - unrotatedCropRect . left ; float deltaTop = unrotatedImageRect . top - unrotatedCropRect . top ; float deltaRight = unrotatedImageRect . right - unrotatedCropRect . right ; float deltaBottom = unrotatedImageRect . bottom - unrotatedCropRect . bottom ; float indents [ ] = new float [ _NUM ] ; indents [ _NUM ] = ( deltaLeft > _NUM ) ? deltaLeft : _NUM ; indents [ _NUM ] = ( deltaTop > _NUM ) ? deltaTop : _NUM ; indents [ _NUM ] = ( deltaRight < _NUM ) ? deltaRight : _NUM ; indents [ _NUM ] = ( deltaBottom < _NUM ) ? deltaBottom : _NUM ; mTempMatrix . reset ( ) ; mTempMatrix . setRotate ( getCurrentAngle ( ) ) ; mTempMatrix . mapPoints ( indents ) ; return indents ; }
71452	public void testBug10630 ( ) throws Exception { Connection conn2 = null ; Statement stmt2 = null ; try { conn2 = getConnectionWithProps ( ( Properties ) null ) ; stmt2 = conn2 . createStatement ( ) ; conn2 . close ( ) ; stmt2 . getWarnings ( ) ; fail ( _STR ) ; } catch ( SQLException sqlEx ) { assertEquals ( SQLError . SQL_STATE_ILLEGAL_ARGUMENT , sqlEx . getSQLState ( ) ) ; } finally { if ( stmt2 != null ) { stmt2 . close ( ) ; } if ( conn2 != null ) { conn2 . close ( ) ; } } }
77787	public static boolean equals ( boolean [ ] field1 , boolean [ ] field2 ) { if ( field1 == null || field1 . length == _NUM ) { return field2 == null || field2 . length == _NUM ; } else { return Arrays . equals ( field1 , field2 ) ; } }
36424	public void toFront ( final WorkflowAnnotation anno ) { if ( anno == null ) { throw new IllegalArgumentException ( _STR ) ; } synchronized ( lock ) { if ( annotationsDrawOrder . remove ( anno ) ) { annotationsDrawOrder . add ( anno ) ; } if ( annotationsEventOrder . remove ( anno ) ) { annotationsEventOrder . add ( _NUM , anno ) ; } } }
73227	public synchronized void addFrame ( final Image image , final long frameDuration ) { totalDuration += frameDuration ; frames . add ( new AnimFrame ( image , totalDuration ) ) ; }
52338	public static String printCodePointAsString ( int codePoint ) { StringBuilder builder = new StringBuilder ( _NUM ) ; builder . append ( _STR ) ; try { printStringCodePoint ( builder , codePoint ) ; } catch ( IOException e ) { throw new Error ( e ) ; } builder . append ( _STR ) ; return builder . toString ( ) ; }
56073	private void cleanupMinidumpFile ( ) { if ( ! CrashFileManager . tryMarkAsUploaded ( mFileToUpload ) ) { Log . w ( TAG , _STR + mFileToUpload + _STR ) ; if ( ! mFileToUpload . delete ( ) ) { Log . w ( TAG , _STR + mFileToUpload ) ; } } }
2875	boolean closeOutbound ( ) throws SSLException { if ( sslEngine == null || sslEngine . isOutboundDone ( ) ) { return _BOOL ; } sslEngine . closeOutbound ( ) ; createOutNetBuffer ( _NUM ) ; SSLEngineResult result ; for ( ; ; ) { result = sslEngine . wrap ( emptyBuffer . buf ( ) , outNetBuffer . buf ( ) ) ; if ( result . getStatus ( ) == SSLEngineResult . Status . BUFFER_OVERFLOW ) { outNetBuffer . capacity ( outNetBuffer . capacity ( ) << _NUM ) ; outNetBuffer . limit ( outNetBuffer . capacity ( ) ) ; } else { break ; } } if ( result . getStatus ( ) != SSLEngineResult . Status . CLOSED ) { throw new SSLException ( _STR + result ) ; } outNetBuffer . flip ( ) ; return _BOOL ; }
82899	@ Nullable private static Bitmap extractThumbnail ( Bitmap source , int width , int height ) { return extractThumbnail ( source , width , height , OPTIONS_NONE ) ; }
28790	private void writePkgInfo ( ) throws BuildException { File pkgInfo = new File ( mContentsDir , _STR ) ; PrintWriter writer = null ; try { writer = new PrintWriter ( new BufferedWriter ( new FileWriter ( pkgInfo ) ) ) ; writer . print ( bundleProperties . getCFBundlePackageType ( ) ) ; writer . println ( bundleProperties . getCFBundleSignature ( ) ) ; writer . flush ( ) ; } catch ( IOException ex ) { throw new BuildException ( _STR + ex ) ; } finally { mFileUtils . close ( writer ) ; } }
7322	public EventBean [ ] toArray ( ) { if ( firstEvent == null ) { return new EventBean [ _NUM ] ; } if ( additionalEvents == null ) { return new EventBean [ ] { firstEvent } ; } EventBean [ ] events = new EventBean [ _NUM + additionalEvents . size ( ) ] ; events [ _NUM ] = firstEvent ; int count = _NUM ; for ( EventBean theEvent : additionalEvents ) { events [ count ] = theEvent ; count ++ ; } return events ; }
48190	private byte [ ] decode ( DerInputStream in ) throws IOException { DerValue val = in . getDerValue ( ) ; byte [ ] derEncoding = val . toByteArray ( ) ; derEncoding [ _NUM ] = DerValue . tag_SetOf ; DerInputStream derIn = new DerInputStream ( derEncoding ) ; DerValue [ ] derVals = derIn . getSet ( _NUM , _BOOL ) ; PKCS9Attribute attrib ; ObjectIdentifier oid ; boolean reuseEncoding = _BOOL ; for ( int i = _NUM ; i < derVals . length ; i ++ ) { try { attrib = new PKCS9Attribute ( derVals [ i ] ) ; } catch ( ParsingException e ) { if ( ignoreUnsupportedAttributes ) { reuseEncoding = _BOOL ; continue ; } else { throw e ; } } oid = attrib . getOID ( ) ; if ( attributes . get ( oid ) != null ) throw new IOException ( _STR + oid ) ; if ( permittedAttributes != null && ! permittedAttributes . containsKey ( oid ) ) throw new IOException ( _STR + oid + _STR ) ; attributes . put ( oid , attrib ) ; } return reuseEncoding ? derEncoding : generateDerEncoding ( ) ; }
61231	StringVector processPREFIX_LIST ( StylesheetHandler handler , String uri , String name , String rawName , String value ) throws org . xml . sax . SAXException { StringTokenizer tokenizer = new StringTokenizer ( value , _STR ) ; int nStrings = tokenizer . countTokens ( ) ; StringVector strings = new StringVector ( nStrings ) ; for ( int i = _NUM ; i < nStrings ; i ++ ) { String prefix = tokenizer . nextToken ( ) ; String url = handler . getNamespaceForPrefix ( prefix ) ; if ( prefix . equals ( Constants . ATTRVAL_DEFAULT_PREFIX ) || url != null ) strings . addElement ( prefix ) ; else throw new org . xml . sax . SAXException ( XSLMessages . createMessage ( XSLTErrorResources . ER_CANT_RESOLVE_NSPREFIX , new Object [ ] { prefix } ) ) ; } return strings ; }
9356	@ Override public CategoricalResults clone ( ) { CategoricalResults copy = new CategoricalResults ( n ) ; copy . probabilities = Arrays . copyOf ( probabilities , probabilities . length ) ; return copy ; }
45402	private static StringBuilder dump ( StringBuilder _lbuffer , long value ) { for ( int j = _NUM ; j < _NUM ; j ++ ) { _lbuffer . append ( _hexcodes [ ( int ) ( value > > _shifts [ j ] ) & _NUM ] ) ; } return _lbuffer ; }
62932	private boolean typeSpecialChar ( char c ) { switch ( c ) { case _STR : controller . keyPress ( KeyEvent . VK_TAB ) ; controller . keyRelease ( KeyEvent . VK_TAB ) ; return _BOOL ; case _STR : controller . keyPress ( KeyEvent . VK_ENTER ) ; controller . keyRelease ( KeyEvent . VK_ENTER ) ; return _BOOL ; default : return _BOOL ; } }
67627	protected static boolean eq ( Object o1 , Object o2 ) { return o1 == null ? o2 == null : o1 . equals ( o2 ) ; }
17504	public static boolean hasMimeType ( String mimeType ) { if ( mimeType == null || mimeType . isEmpty ( ) ) { return _BOOL ; } return mimeTypeToExtensionMap . containsKey ( mimeType ) ; }
55209	public Iterable < Notification > skip ( @ Nonnull final Iterable < Notification > notifications , final long startId , final boolean inclusive , final int limitSize ) { Objects . requireNonNull ( notifications ) ; final int position = indexOf ( notifications , startId ) ; if ( position == - _NUM ) { return Iterables . limit ( notifications , limitSize ) ; } if ( inclusive ) { return Iterables . limit ( Iterables . skip ( notifications , position ) , limitSize ) ; } return Iterables . limit ( Iterables . skip ( notifications , position + _NUM ) , limitSize ) ; }
23984	public boolean writeData ( PdxWriter writer , Object obj ) { if ( isRelevant ( obj . getClass ( ) ) ) { writeData ( writer , obj , getClassInfo ( obj . getClass ( ) ) ) ; return _BOOL ; } return _BOOL ; }
64261	protected final void writeC ( ByteBuffer buf , int value ) { buf . put ( ( byte ) value ) ; }
6149	public static void overScrollBy ( final PullToRefreshBase < ? > view , final int deltaX , final int scrollX , final int deltaY , final int scrollY , final int scrollRange , final int fuzzyThreshold , final float scaleFactor , final boolean isTouchEvent ) { final int deltaValue , currentScrollValue , scrollValue ; switch ( view . getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : deltaValue = deltaX ; scrollValue = scrollX ; currentScrollValue = view . getScrollX ( ) ; break ; case VERTICAL : default : deltaValue = deltaY ; scrollValue = scrollY ; currentScrollValue = view . getScrollY ( ) ; break ; } if ( view . isPullToRefreshOverScrollEnabled ( ) && ! view . isRefreshing ( ) ) { final Mode mode = view . getMode ( ) ; if ( mode . permitsPullToRefresh ( ) && ! isTouchEvent && deltaValue != _NUM ) { final int newScrollValue = ( deltaValue + scrollValue ) ; if ( PullToRefreshBase . DEBUG ) { Log . d ( LOG_TAG , _STR + deltaX + _STR + scrollX + _STR + deltaY + _STR + scrollY + _STR + newScrollValue + _STR + scrollRange + _STR + currentScrollValue ) ; } if ( newScrollValue < ( _NUM - fuzzyThreshold ) ) { if ( mode . showHeaderLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue ) ) ) ; } } else if ( newScrollValue > ( scrollRange + fuzzyThreshold ) ) { if ( mode . showFooterLoadingLayout ( ) ) { if ( currentScrollValue == _NUM ) { view . setState ( State . OVERSCROLLING ) ; } view . setHeaderScroll ( ( int ) ( scaleFactor * ( currentScrollValue + newScrollValue - scrollRange ) ) ) ; } } else if ( Math . abs ( newScrollValue ) <= fuzzyThreshold || Math . abs ( newScrollValue - scrollRange ) <= fuzzyThreshold ) { view . setState ( State . RESET ) ; } } else if ( isTouchEvent && State . OVERSCROLLING == view . getState ( ) ) { view . setState ( State . RESET ) ; } } }
25802	public boolean isEmpty ( ) { return priorityQueue . isEmpty ( ) ; }
12610	public ViterbiPoint ( Item item ) { this . item = item ; }
66421	protected void paintContentBorderBottomEdge ( Graphics g , int x , int y , int w , int h , boolean drawBroken , Rectangle selRect , boolean isContentBorderPainted ) { if ( isContentBorderPainted ) { g . setColor ( darkShadow ) ; g . fillRect ( x , y + h - _NUM , w - _NUM , _NUM ) ; } }
33344	private void emitListAdd ( Method method , String fieldName , StringBuilder builder ) { builder . append ( _STR ) ; builder . append ( getListAdderName ( fieldName ) ) ; builder . append ( _STR ) ; builder . append ( getTypeArgumentImplName ( ( ParameterizedType ) method . getGenericReturnType ( ) , _NUM ) ) ; builder . append ( _STR ) ; builder . append ( getEnsureName ( fieldName ) ) ; builder . append ( _STR ) ; builder . append ( fieldName ) ; builder . append ( _STR ) ; builder . append ( _STR ) ; }
40123	public RSAPublicKey parsePEMPublicKey ( String pem ) throws GeneralSecurityException { try { byte [ ] bs = decodeAsciiArmoredPEM ( pem ) ; ByteBuffer data = ByteBuffer . wrap ( bs ) ; final ASN1Object ob = asn1Parser . parseASN1 ( data ) ; final List < ASN1Object > seq = asn1ObjectToSequence ( ob , _NUM ) ; final BigInteger modulus = asn1ObjectToBigInt ( seq . get ( _NUM ) ) ; final BigInteger exponent = asn1ObjectToBigInt ( seq . get ( _NUM ) ) ; return createKeyFromModulusAndExponent ( modulus , exponent ) ; } catch ( IllegalArgumentException e ) { throw new InvalidKeyException ( ) ; } }
64944	public static < T > ParallelPublisher < T > from ( Publisher < ? extends T > source , boolean ordered , int parallelism ) { return from ( source , ordered , parallelism , Px . bufferSize ( ) , Px . defaultQueueSupplier ( Px . bufferSize ( ) ) ) ; }
26533	public long next ( long startTime , long fromTime , long currentCount ) { if ( startTime == _NUM ) startTime = RecurrenceUtil . now ( ) ; if ( fromTime == _NUM ) fromTime = startTime ; if ( getEndTime ( ) != _NUM && getEndTime ( ) <= RecurrenceUtil . now ( ) ) return _NUM ; Debug . logVerbose ( _STR , module ) ; if ( getCount ( ) != - _NUM && currentCount >= getCount ( ) ) return _NUM ; Debug . logVerbose ( _STR , module ) ; boolean isSeeking = _BOOL ; long nextRuntime = _NUM ; long seekTime = fromTime ; int loopProtection = _NUM ; int maxLoop = ( _NUM * _NUM * _NUM * _NUM * _NUM ) ; while ( isSeeking && loopProtection < maxLoop ) { Date nextRun = getNextFreq ( startTime , seekTime ) ; seekTime = nextRun . getTime ( ) ; if ( validByRule ( nextRun ) ) { isSeeking = _BOOL ; nextRuntime = nextRun . getTime ( ) ; } loopProtection ++ ; } return nextRuntime ; }
70638	public void addToQueue ( Var var ) { addToQueue ( Collections . singleton ( var ) ) ; }
48778	public String canonicalize ( String simpleURL ) { String resultURL = simpleURL ; if ( simpleURL . startsWith ( _STR ) ) { resultURL = _STR + simpleURL ; } else if ( simpleURL . startsWith ( _STR ) ) { resultURL = _STR + simpleURL ; } else if ( simpleURL . startsWith ( _STR ) ) { resultURL = _STR + simpleURL ; } else if ( ! hasProtocolName ( simpleURL ) ) { if ( isSimpleHostName ( simpleURL ) ) { simpleURL = _STR + simpleURL + _STR ; } resultURL = _STR + simpleURL ; } return resultURL ; }
28685	public String read ( String filename ) throws IOException { return ProcFile . readFile ( String . format ( _STR , pid , filename ) ) ; }
56045	private long calculateAnimationDuration ( float initialVelocity , float displacement ) { return MathUtils . clamp ( Math . round ( Math . abs ( _NUM * displacement / initialVelocity ) ) , MINIMUM_ANIMATION_DURATION_MS , MAXIMUM_ANIMATION_DURATION_MS ) ; }
86891	@ RequestProcessing ( value = _STR , method = HTTPRequestMethod . GET ) @ Before ( adviceClass = { StopwatchStartAdvice . class , AnonymousViewCheck . class , UserBlockCheck . class } ) @ After ( adviceClass = StopwatchEndAdvice . class ) public void showHomePoints ( final HTTPRequestContext context , final HttpServletRequest request , final HttpServletResponse response , final String userName ) throws Exception { final JSONObject user = ( JSONObject ) request . getAttribute ( User . USER ) ; request . setAttribute ( Keys . TEMAPLTE_DIR_NAME , Symphonys . get ( _STR ) ) ; final AbstractFreeMarkerRenderer renderer = new SkinRenderer ( ) ; context . setRenderer ( renderer ) ; renderer . setTemplateName ( _STR ) ; final Map < String , Object > dataModel = renderer . getDataModel ( ) ; filler . fillHeaderAndFooter ( request , response , dataModel ) ; String pageNumStr = request . getParameter ( _STR ) ; if ( Strings . isEmptyOrNull ( pageNumStr ) || ! Strings . isNumeric ( pageNumStr ) ) { pageNumStr = _STR ; } final int pageNum = Integer . valueOf ( pageNumStr ) ; final int pageSize = Symphonys . getInt ( _STR ) ; final int windowSize = Symphonys . getInt ( _STR ) ; fillHomeUser ( dataModel , user ) ; avatarQueryService . fillUserAvatarURL ( user ) ; final String followingId = user . optString ( Keys . OBJECT_ID ) ; dataModel . put ( Follow . FOLLOWING_ID , followingId ) ; final JSONObject userPointsResult = pointtransferQueryService . getUserPoints ( user . optString ( Keys . OBJECT_ID ) , pageNum , pageSize ) ; final List < JSONObject > userPoints = CollectionUtils . < JSONObject > jsonArrayToList ( userPointsResult . optJSONArray ( Keys . RESULTS ) ) ; dataModel . put ( Common . USER_HOME_POINTS , userPoints ) ; final boolean isLoggedIn = ( Boolean ) dataModel . get ( Common . IS_LOGGED_IN ) ; if ( isLoggedIn ) { final JSONObject currentUser = ( JSONObject ) dataModel . get ( Common . CURRENT_USER ) ; final String followerId = currentUser . optString ( Keys . OBJECT_ID ) ; final boolean isFollowing = followQueryService . isFollowing ( followerId , user . optString ( Keys . OBJECT_ID ) ) ; dataModel . put ( Common . IS_FOLLOWING , isFollowing ) ; } user . put ( UserExt . USER_T_CREATE_TIME , new Date ( user . getLong ( Keys . OBJECT_ID ) ) ) ; final int pointsCnt = userPointsResult . optInt ( Pagination . PAGINATION_RECORD_COUNT ) ; final int pageCount = ( int ) Math . ceil ( ( double ) pointsCnt / ( double ) pageSize ) ; final List < Integer > pageNums = Paginator . paginate ( pageNum , pageSize , pageCount , windowSize ) ; if ( ! pageNums . isEmpty ( ) ) { dataModel . put ( Pagination . PAGINATION_FIRST_PAGE_NUM , pageNums . get ( _NUM ) ) ; dataModel . put ( Pagination . PAGINATION_LAST_PAGE_NUM , pageNums . get ( pageNums . size ( ) - _NUM ) ) ; } dataModel . put ( Pagination . PAGINATION_CURRENT_PAGE_NUM , pageNum ) ; dataModel . put ( Pagination . PAGINATION_PAGE_COUNT , pageCount ) ; dataModel . put ( Pagination . PAGINATION_PAGE_NUMS , pageNums ) ; }
45644	private static double norm ( final double [ ] v ) { double agg = _NUM ; for ( int i = _NUM ; i < v . length ; i ++ ) { agg += ( v [ i ] * v [ i ] ) ; } return Math . sqrt ( agg ) ; }
70081	private int measureHeight ( int measureSpec ) { float result ; int specMode = MeasureSpec . getMode ( measureSpec ) ; int specSize = MeasureSpec . getSize ( measureSpec ) ; if ( specMode == MeasureSpec . EXACTLY ) { result = specSize ; } else { result = mPaintSelected . getStrokeWidth ( ) + getPaddingTop ( ) + getPaddingBottom ( ) ; if ( specMode == MeasureSpec . AT_MOST ) { result = Math . min ( result , specSize ) ; } } return ( int ) ( ( float ) Math . ceil ( result ) ) ; }
28373	public void layout ( Container container ) { Map < Location , Drawable > comps = getComponentsByLocation ( container ) ; Drawable north = comps . get ( Location . NORTH ) ; Drawable northEast = comps . get ( Location . NORTH_EAST ) ; Drawable east = comps . get ( Location . EAST ) ; Drawable southEast = comps . get ( Location . SOUTH_EAST ) ; Drawable south = comps . get ( Location . SOUTH ) ; Drawable southWest = comps . get ( Location . SOUTH_WEST ) ; Drawable west = comps . get ( Location . WEST ) ; Drawable northWest = comps . get ( Location . NORTH_WEST ) ; Drawable center = comps . get ( Location . CENTER ) ; double widthWest = getMaxWidth ( northWest , west , southWest ) ; double widthEast = getMaxWidth ( northEast , east , southEast ) ; double heightNorth = getMaxHeight ( northWest , north , northEast ) ; double heightSouth = getMaxHeight ( southWest , south , southEast ) ; double gapEast = ( widthEast > _NUM ) ? getGapX ( ) : _NUM ; double gapWest = ( widthWest > _NUM ) ? getGapX ( ) : _NUM ; double gapNorth = ( heightNorth > _NUM ) ? getGapY ( ) : _NUM ; double gapSouth = ( heightSouth > _NUM ) ? getGapY ( ) : _NUM ; Rectangle2D bounds = container . getBounds ( ) ; Insets2D insets = container . getInsets ( ) ; if ( insets == null ) { insets = new Insets2D . Double ( ) ; } double xWest = bounds . getMinX ( ) + insets . getLeft ( ) - gapWest - widthWest ; double xCenter = bounds . getMinX ( ) + insets . getLeft ( ) ; double xEast = bounds . getMaxX ( ) - insets . getRight ( ) + gapEast ; double yNorth = bounds . getMinY ( ) + insets . getTop ( ) - gapNorth - heightNorth ; double yCenter = bounds . getMinY ( ) + insets . getTop ( ) ; double ySouth = bounds . getMaxY ( ) - insets . getBottom ( ) + gapSouth ; layoutComponent ( northWest , xWest , yNorth , widthWest , heightNorth ) ; layoutComponent ( north , xCenter , yNorth , bounds . getWidth ( ) - insets . getHorizontal ( ) , heightNorth ) ; layoutComponent ( northEast , xEast , yNorth , widthEast , heightNorth ) ; layoutComponent ( east , xEast , yCenter , widthEast , bounds . getHeight ( ) - insets . getVertical ( ) ) ; layoutComponent ( southEast , xEast , ySouth , widthEast , heightSouth ) ; layoutComponent ( south , xCenter , ySouth , bounds . getWidth ( ) - insets . getHorizontal ( ) , heightSouth ) ; layoutComponent ( southWest , xWest , ySouth , widthWest , heightSouth ) ; layoutComponent ( west , xWest , yCenter , widthWest , bounds . getHeight ( ) - insets . getVertical ( ) ) ; layoutComponent ( center , xCenter + getGapX ( ) , yCenter + getGapY ( ) , bounds . getWidth ( ) - insets . getHorizontal ( ) - _NUM * getGapX ( ) , bounds . getHeight ( ) - insets . getVertical ( ) - _NUM * getGapY ( ) ) ; }
60845	void fullyUnlock ( ) { takeLock . unlock ( ) ; putLock . unlock ( ) ; }
3970	public void add ( int i , int data ) { if ( _length + _NUM > _capacity ) ensureCapacity ( _length + _NUM ) ; System . arraycopy ( _buffer , i , _buffer , i + _NUM , _length - i ) ; _buffer [ i ] = ( byte ) data ; _length += _NUM ; }
12509	private double mean ( double [ ] vec ) { double result = _NUM ; for ( int i = _NUM ; i < vec . length ; i ++ ) result += vec [ i ] ; return result / vec . length ; }
1922	private Sprite ( float xPos , float yPos , float xVel , float yVel , Image ... sprites ) { if ( sprites != null ) spriteFrame = new ImageView ( sprites [ _NUM ] ) ; playerStates . addAll ( Arrays . asList ( sprites ) ) ; spriteFrame . setTranslateX ( xPos ) ; spriteFrame . setTranslateY ( yPos ) ; this . xPos = xPos ; this . yPos = yPos ; this . xVel = xVel ; this . yVel = yVel ; }
32774	public void close ( ) { out . close ( ) ; }
39955	protected static SyncToken createSyncToken ( String dateString , @ Nullable String uuid ) { try { return new SyncToken ( DB_DATE_FORMAT . parse ( dateString ) , uuid ) ; } catch ( ParseException e ) { throw new RuntimeException ( e ) ; } }
41090	private static boolean equalsHandlesNulls ( Object a , Object b ) { return a == b || ( a != null && a . equals ( b ) ) ; }
28294	public void init ( String flagzDirectory ) throws FlagException , EtcdFlagFieldUpdaterException { this . directoryPrefix = MoreObjects . firstNonNull ( flagzDirectory , directoryFlag . get ( ) ) ; client = new EtcdClient ( uris . toArray ( new URI [ uris . size ( ) ] ) ) ; client . setRetryHandler ( retryPolicy ) ; initialSetAllFlagz ( ) ; }
1106	public static void closeEL ( InputStream is ) { try { if ( is != null ) is . close ( ) ; } catch ( Throwable t ) { } }
69287	public void testRandom ( ) { ExtremityMonitor monitor = new ExtremityMonitor ( ) ; Random random = new Random ( _NUM ) ; for ( int i = _NUM ; i < _NUM ; i ++ ) { monitor . update ( random . nextDouble ( ) ) ; } assertTrue ( monitor . getMin ( ) < _NUM ) ; assertTrue ( monitor . getMax ( ) < _NUM ) ; assertTrue ( monitor . getMin ( ) >= _NUM ) ; assertTrue ( monitor . getMax ( ) > _NUM ) ; }
71019	public static String replace ( String str , char oldChar , String newStr ) { StringBuffer buf = new StringBuffer ( ) ; for ( int i = _NUM ; i < str . length ( ) ; i ++ ) { char ch = str . charAt ( i ) ; if ( ch == oldChar ) { buf . append ( newStr ) ; } else { buf . append ( ch ) ; } } return buf . toString ( ) ; }
30282	@ Action ( value = _STR ) @ ValidationErrorPage ( value = ERROR ) @ SkipValidation public String newform ( ) { setLoginDept ( ) ; SimpleDateFormat sdf = new SimpleDateFormat ( _STR ) ; try { cutOffDate = sdf . parse ( collectionsUtil . getAppConfigValue ( CollectionConstants . MODULE_NAME_COLLECTIONS_CONFIG , CollectionConstants . APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE ) ) ; } catch ( ParseException e ) { LOGGER . error ( getText ( _STR ) + e . getMessage ( ) ) ; } return NEW ; }
85360	public TypeDeclaration canonicalize ( ) { List < Type > sts = getSatisfiedTypes ( ) ; if ( sts . isEmpty ( ) ) { return unit . getAnythingDeclaration ( ) ; } else if ( sts . size ( ) == _NUM ) { Type st = sts . get ( _NUM ) ; if ( st . isExactlyNothing ( ) ) { return unit . getNothingDeclaration ( ) ; } } for ( Type st : sts ) { if ( st . isUnion ( ) ) { List < Type > caseTypes = st . getCaseTypes ( ) ; List < Type > ulist = new ArrayList < Type > ( caseTypes . size ( ) ) ; for ( Type ct : caseTypes ) { List < Type > ilist = new ArrayList < Type > ( sts . size ( ) ) ; for ( Type pt : sts ) { if ( pt == st ) { addToIntersection ( ilist , ct , unit ) ; } else { addToIntersection ( ilist , pt , unit ) ; } } Type it = canonicalIntersection ( ilist , unit ) ; addToUnion ( ulist , it ) ; } TypeDeclaration result = new UnionType ( unit ) ; result . setCaseTypes ( ulist ) ; return result ; } } return this ; }
70667	public static void openOtherUri ( final String url , final Activity activity ) { Intent intent = new Intent ( Intent . ACTION_VIEW , Uri . parse ( url ) ) ; activity . startActivity ( intent ) ; }
77280	public static boolean waitForAllActiveAndLiveReplicas ( ZkStateReader zkStateReader , int timeoutInMs ) { return waitForAllActiveAndLiveReplicas ( zkStateReader , null , timeoutInMs ) ; }
51346	public synchronized void addElement ( E object ) { if ( elementCount == elementData . length ) { growByOne ( ) ; } elementData [ elementCount ++ ] = object ; modCount ++ ; }
75500	private void updateBaseMatrix ( Drawable d ) { ImageView imageView = getImageView ( ) ; if ( null == imageView || null == d ) { return ; } final float viewWidth = getImageViewWidth ( imageView ) ; final float viewHeight = getImageViewHeight ( imageView ) ; final int drawableWidth = d . getIntrinsicWidth ( ) ; final int drawableHeight = d . getIntrinsicHeight ( ) ; mBaseMatrix . reset ( ) ; final float widthScale = viewWidth / drawableWidth ; final float heightScale = viewHeight / drawableHeight ; if ( mScaleType == ScaleType . CENTER ) { mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth ) / _NUM , ( viewHeight - drawableHeight ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_CROP ) { float scale = Math . max ( widthScale , heightScale ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else if ( mScaleType == ScaleType . CENTER_INSIDE ) { float scale = Math . min ( _NUM , Math . min ( widthScale , heightScale ) ) ; mBaseMatrix . postScale ( scale , scale ) ; mBaseMatrix . postTranslate ( ( viewWidth - drawableWidth * scale ) / _NUM , ( viewHeight - drawableHeight * scale ) / _NUM ) ; } else { RectF mTempSrc = new RectF ( _NUM , _NUM , drawableWidth , drawableHeight ) ; RectF mTempDst = new RectF ( _NUM , _NUM , viewWidth , viewHeight ) ; if ( ( int ) mBaseRotation % _NUM != _NUM ) { mTempSrc = new RectF ( _NUM , _NUM , drawableHeight , drawableWidth ) ; } switch ( mScaleType ) { case FIT_CENTER : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . CENTER ) ; break ; case FIT_START : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . START ) ; break ; case FIT_END : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . END ) ; break ; case FIT_XY : mBaseMatrix . setRectToRect ( mTempSrc , mTempDst , ScaleToFit . FILL ) ; break ; default : break ; } } resetMatrix ( ) ; }
21014	public boolean checkForRp ( ) { return NullColumnValueGetter . isNotNullValue ( getRpCopyName ( ) ) ; }
26810	ExternalProblem ( Process process ) { this ( process . getInputStream ( ) , process . getOutputStream ( ) ) ; RedirectStream . redirect ( process . getErrorStream ( ) , System . err ) ; }
62903	public static List < String > splitPath ( File file ) { List < String > output = new ArrayList < > ( ) ; File current = file ; while ( current != null ) { output . add ( current . getName ( ) ) ; current = current . getParentFile ( ) ; } Collections . reverse ( output ) ; return output ; }
29875	private static StsdData parseStsd ( ParsableByteArray stsd , int trackId , long durationUs , int rotationDegrees , String language , boolean isQuickTime ) { stsd . setPosition ( Atom . FULL_HEADER_SIZE ) ; int numberOfEntries = stsd . readInt ( ) ; StsdData out = new StsdData ( numberOfEntries ) ; for ( int i = _NUM ; i < numberOfEntries ; i ++ ) { int childStartPosition = stsd . getPosition ( ) ; int childAtomSize = stsd . readInt ( ) ; Assertions . checkArgument ( childAtomSize > _NUM , _STR ) ; int childAtomType = stsd . readInt ( ) ; if ( childAtomType == Atom . TYPE_avc1 || childAtomType == Atom . TYPE_avc3 || childAtomType == Atom . TYPE_encv || childAtomType == Atom . TYPE_mp4v || childAtomType == Atom . TYPE_hvc1 || childAtomType == Atom . TYPE_hev1 || childAtomType == Atom . TYPE_s263 || childAtomType == Atom . TYPE_vp08 || childAtomType == Atom . TYPE_vp09 ) { parseVideoSampleEntry ( stsd , childAtomType , childStartPosition , childAtomSize , trackId , durationUs , rotationDegrees , out , i ) ; } else if ( childAtomType == Atom . TYPE_mp4a || childAtomType == Atom . TYPE_enca || childAtomType == Atom . TYPE_ac_3 || childAtomType == Atom . TYPE_ec_3 || childAtomType == Atom . TYPE_dtsc || childAtomType == Atom . TYPE_dtse || childAtomType == Atom . TYPE_dtsh || childAtomType == Atom . TYPE_dtsl || childAtomType == Atom . TYPE_samr || childAtomType == Atom . TYPE_sawb || childAtomType == Atom . TYPE_lpcm || childAtomType == Atom . TYPE_sowt ) { parseAudioSampleEntry ( stsd , childAtomType , childStartPosition , childAtomSize , trackId , durationUs , language , isQuickTime , out , i ) ; } else if ( childAtomType == Atom . TYPE_TTML ) { out . mediaFormat = MediaFormat . createTextFormat ( Integer . toString ( trackId ) , MimeTypes . APPLICATION_TTML , MediaFormat . NO_VALUE , durationUs , language ) ; } else if ( childAtomType == Atom . TYPE_tx3g ) { out . mediaFormat = MediaFormat . createTextFormat ( Integer . toString ( trackId ) , MimeTypes . APPLICATION_TX3G , MediaFormat . NO_VALUE , durationUs , language ) ; } else if ( childAtomType == Atom . TYPE_wvtt ) { out . mediaFormat = MediaFormat . createTextFormat ( Integer . toString ( trackId ) , MimeTypes . APPLICATION_MP4VTT , MediaFormat . NO_VALUE , durationUs , language ) ; } else if ( childAtomType == Atom . TYPE_stpp ) { out . mediaFormat = MediaFormat . createTextFormat ( Integer . toString ( trackId ) , MimeTypes . APPLICATION_TTML , MediaFormat . NO_VALUE , durationUs , language , _NUM ) ; } stsd . setPosition ( childStartPosition + childAtomSize ) ; } return out ; }
84675	protected boolean isCompatible ( Taxa taxa , List < Taxon > availableTaxa ) { for ( int i = _NUM ; i < taxa . getTaxonCount ( ) ; i ++ ) { Taxon taxon = taxa . getTaxon ( i ) ; if ( ! availableTaxa . contains ( taxon ) ) { return _BOOL ; } } return _BOOL ; }
81871	protected int drawLabelText ( Object nativeGraphics , int textDecoration , boolean rtl , boolean isTickerRunning , boolean endsWith3Points , Object nativeFont , int txtW , int textSpaceW , int shiftText , String text , int x , int y , int fontHeight ) { if ( ( ! isTickerRunning ) || rtl ) { if ( txtW > textSpaceW && textSpaceW > _NUM ) { if ( rtl ) { if ( ( ! isTickerRunning ) && endsWith3Points ) { String points = _STR ; int pointsW = stringWidth ( nativeFont , points ) ; drawString ( nativeGraphics , nativeFont , points , shiftText + x , y , textDecoration , fontHeight ) ; clipRect ( nativeGraphics , pointsW + shiftText + x , y , textSpaceW - pointsW , fontHeight ) ; } x = x - txtW + textSpaceW ; } else if ( endsWith3Points ) { String points = _STR ; int index = _NUM ; int widest = charWidth ( nativeFont , _STR ) ; int pointsW = stringWidth ( nativeFont , points ) ; int textLen = text . length ( ) ; while ( fastCharWidthCheck ( text , index , textSpaceW - pointsW , widest , nativeFont ) && index < textLen ) { index ++ ; } text = text . substring ( _NUM , Math . min ( textLen , Math . max ( _NUM , index - _NUM ) ) ) + points ; txtW = stringWidth ( nativeFont , text ) ; } } } drawString ( nativeGraphics , nativeFont , text , shiftText + x , y , textDecoration , fontHeight ) ; return Math . min ( txtW , textSpaceW ) ; }
4360	public boolean hasMapObjects ( ) { return mapObjects != null && ! mapObjects . isEmpty ( ) ; }
398	public void performActions ( ) throws Throwable { for ( Throwing . Runnable action : actions ) { action . run ( ) ; } }
42148	public java . util . Collection < ObjectReference > dumpThreadRoots ( int width ) { return Collections . emptyList ( ) ; }
3134	protected void addFieldNameTranslation ( EmbeddableMapping embeddableMapping , String overrideName , DatabaseField overrideField , MappingAccessor aggregatesAccessor ) { DatabaseMapping aggregatesMapping = aggregatesAccessor . getMapping ( ) ; DatabaseField aggregatesMappingField = aggregatesMapping . getField ( ) ; if ( aggregatesAccessor . isId ( ) ) { updatePrimaryKeyField ( aggregatesAccessor , overrideField ) ; } if ( overrideName . contains ( _STR ) ) { embeddableMapping . addNestedFieldTranslation ( overrideName , overrideField , aggregatesMappingField . getName ( ) ) ; } else { embeddableMapping . addFieldTranslation ( overrideField , aggregatesMappingField . getName ( ) ) ; } }
84703	public Dimension minimumLayoutSize ( Container target ) { synchronized ( target . getTreeLock ( ) ) { Dimension dim = new Dimension ( _NUM , _NUM ) ; if ( ( chart != null ) && chart . isVisible ( ) ) { Dimension d = chart . getMinimumSize ( ) ; dim . width = d . width ; dim . height = d . height ; } if ( ( xLabel != null ) && xLabel . isVisible ( ) ) { Dimension d = xLabel . getMinimumSize ( ) ; dim . width = Math . max ( d . width , dim . width ) ; dim . height += d . height + vgap ; } if ( ( yLabel != null ) && yLabel . isVisible ( ) ) { Dimension d = yLabel . getMinimumSize ( ) ; dim . width += d . width + hgap ; dim . height = Math . max ( d . height , dim . height ) ; } if ( ( title != null ) && title . isVisible ( ) ) { Dimension d = title . getMinimumSize ( ) ; dim . width = Math . max ( d . width , dim . width ) ; dim . height += d . height + vgap ; } Insets insets = target . getInsets ( ) ; dim . width += insets . left + insets . right ; dim . height += insets . top + insets . bottom ; return dim ; } }
68115	private void checkResourceChange ( final Resource resource , final Group group , final Callback callback , final AtomicBoolean isChanged ) throws Exception { if ( isChanged ( resource , group . getName ( ) ) ) { isChanged . compareAndSet ( _BOOL , _BOOL ) ; callback . onResourceChanged ( resource ) ; lifecycleCallback . onResourceChanged ( resource ) ; } }
23094	public javax2 . sip . address . TelURL createTelURL ( String uri ) throws ParseException { if ( uri == null ) throw new NullPointerException ( _STR ) ; String telUrl = _STR + uri ; try { StringMsgParser smp = new StringMsgParser ( ) ; TelURLImpl timp = ( TelURLImpl ) smp . parseUrl ( telUrl ) ; return ( TelURL ) timp ; } catch ( ParseException ex ) { throw new ParseException ( ex . getMessage ( ) , _NUM ) ; } }
36172	public EvoSVMModel ( ExampleSet exampleSet , List < SupportVector > supportVectors , Kernel kernel , double bias ) { super ( exampleSet , ExampleSetUtilities . SetsCompareOption . ALLOW_SUPERSET , ExampleSetUtilities . TypesCompareOption . ALLOW_SAME_PARENTS ) ; this . supportVectors = supportVectors ; if ( supportVectors == null || supportVectors . size ( ) == _NUM ) { throw new IllegalArgumentException ( _STR ) ; } this . kernel = kernel ; this . bias = bias ; if ( this . kernel instanceof DotKernel ) { this . weights = new double [ getNumberOfAttributes ( ) ] ; for ( int i = _NUM ; i < getNumberOfSupportVectors ( ) ; i ++ ) { SupportVector sv = getSupportVector ( i ) ; if ( sv != null ) { double [ ] x = sv . getX ( ) ; double alpha = sv . getAlpha ( ) ; double y = sv . getY ( ) ; for ( int j = _NUM ; j < weights . length ; j ++ ) { weights [ j ] += y * alpha * x [ j ] ; } } else { this . weights = null ; break ; } } } }
1055	private synchronized boolean _restart ( ) throws ServletException { if ( singelton != null ) singelton . reset ( ) ; initEngine ( ) ; System . gc ( ) ; return _BOOL ; }
38800	public Sorter ( ) { useDefaultVisual ( ) ; setLayout ( new BorderLayout ( ) ) ; add ( m_visual , BorderLayout . CENTER ) ; m_env = Environment . getSystemWide ( ) ; m_stopRequested = new AtomicBoolean ( _BOOL ) ; }
54329	public String toString ( ) { return Character . toString ( getValue ( ) ) ; }
53155	public static double logpdf ( double x , double mu , double shape ) { if ( ! ( x > _NUM ) || x == Double . POSITIVE_INFINITY ) { return Double . NEGATIVE_INFINITY ; } final double v = ( x - mu ) / mu ; return v < Double . MAX_VALUE ? _NUM * Math . log ( shape / ( MathUtil . TWOPI * x * x * x ) ) - shape * v * v / ( _NUM * x ) : Double . NEGATIVE_INFINITY ; }
12782	@ Override public final short readShort ( ) throws IOException { dis . readFully ( work , _NUM , _NUM ) ; return ( short ) ( ( work [ _NUM ] & _NUM ) << _NUM | ( work [ _NUM ] & _NUM ) ) ; }
23007	public static Format generateFormat ( String codec ) { return ( Format ) SUPPORTED_CODECS . get ( codec . toLowerCase ( ) ) ; }
18187	public void comment ( char ch [ ] , int start , int length ) throws org . xml . sax . SAXException { int start_old = start ; if ( m_inEntityRef ) return ; if ( m_elemContext . m_startTagOpen ) { closeStartTag ( ) ; m_elemContext . m_startTagOpen = _BOOL ; } else if ( m_needToCallStartDocument ) { startDocumentInternal ( ) ; m_needToCallStartDocument = _BOOL ; } try { final int limit = start + length ; boolean wasDash = _BOOL ; if ( m_cdataTagOpen ) closeCDATA ( ) ; if ( shouldIndent ( ) ) indent ( ) ; final java . io . Writer writer = m_writer ; writer . write ( COMMENT_BEGIN ) ; for ( int i = start ; i < limit ; i ++ ) { if ( wasDash && ch [ i ] == _STR ) { writer . write ( ch , start , i - start ) ; writer . write ( _STR ) ; start = i + _NUM ; } wasDash = ( ch [ i ] == _STR ) ; } if ( length > _NUM ) { final int remainingChars = ( limit - start ) ; if ( remainingChars > _NUM ) writer . write ( ch , start , remainingChars ) ; if ( ch [ limit - _NUM ] == _STR ) writer . write ( _STR ) ; } writer . write ( COMMENT_END ) ; } catch ( IOException e ) { throw new SAXException ( e ) ; } m_startNewLine = _BOOL ; if ( m_tracer != null ) super . fireCommentEvent ( ch , start_old , length ) ; }
43348	public OptionalInt maxByInt ( IntUnaryOperator keyExtractor ) { int [ ] result = collect ( null , null , null ) ; return result [ _NUM ] == _NUM ? OptionalInt . of ( result [ _NUM ] ) : OptionalInt . empty ( ) ; }
27546	public T findByCommitCounter ( final long commitCounter ) { if ( commitCounter < _NUM ) throw new IllegalArgumentException ( ) ; final Lock lock = readLock ( ) ; lock . lock ( ) ; try { @ SuppressWarnings ( _STR ) final ITupleIterator < T > itr = rangeIterator ( null , null , _NUM , IRangeQuery . DEFAULT | IRangeQuery . REVERSE , null ) ; while ( itr . hasNext ( ) ) { final ITuple < T > t = itr . next ( ) ; final T r = t . getObject ( ) ; final IRootBlockView rb = r . getRootBlock ( ) ; if ( rb . getCommitCounter ( ) <= commitCounter ) { return r ; } } return null ; } finally { lock . unlock ( ) ; } }
44030	private void startAnimation ( ) { ValueAnimator animator = ValueAnimator . ofFloat ( _NUM ) ; ArrayList < NameValuesHolder > nameValueList = ( ArrayList < NameValuesHolder > ) mPendingAnimations . clone ( ) ; mPendingAnimations . clear ( ) ; int propertyMask = _NUM ; int propertyCount = nameValueList . size ( ) ; for ( int i = _NUM ; i < propertyCount ; ++ i ) { NameValuesHolder nameValuesHolder = nameValueList . get ( i ) ; propertyMask |= nameValuesHolder . mNameConstant ; } mAnimatorMap . put ( animator , new PropertyBundle ( propertyMask , nameValueList ) ) ; animator . addUpdateListener ( mAnimatorEventListener ) ; animator . addListener ( mAnimatorEventListener ) ; if ( mStartDelaySet ) { animator . setStartDelay ( mStartDelay ) ; } if ( mDurationSet ) { animator . setDuration ( mDuration ) ; } if ( mInterpolatorSet ) { animator . setInterpolator ( mInterpolator ) ; } animator . start ( ) ; }
44007	public static String traceExcetion ( Throwable ex ) { final Writer result = new StringWriter ( ) ; final PrintWriter printWriter = new PrintWriter ( result ) ; ex . printStackTrace ( printWriter ) ; String stacktrace = result . toString ( ) ; Log . e ( TAG , _STR + stacktrace ) ; return stacktrace ; }
67900	public static Pair < String , String > split ( String varName ) { int splitIndex = varName . indexOf ( _STR ) ; if ( splitIndex < _NUM ) { return null ; } String left = varName . substring ( _NUM , splitIndex ) ; String right = varName . substring ( splitIndex + _NUM ) ; if ( left == null || left . length ( ) == _NUM || right == null || right . length ( ) == _NUM ) { return null ; } return Pair . of ( left , right ) ; }
4017	public void onChildThreadResumeEnd ( ) { _threadCount . getAndDecrement ( ) ; wake ( ) ; }
30495	public static void registerTransportMBean ( String containerName ) { MBeanServer mBeanServer = getMBeanServer ( containerName ) ; if ( mBeanServer == null ) return ; TransportProtocolMonitorMBean transportConnectionsInfoMBean = new TransportProtocolMonitor ( ) ; ObjectName objName = TransportConstants . createTransportMBeanObjectName ( containerName ) ; if ( ! mBeanServer . isRegistered ( objName ) ) { try { mBeanServer . registerMBean ( transportConnectionsInfoMBean , objName ) ; } catch ( InstanceAlreadyExistsException e ) { if ( _logger . isLoggable ( Level . CONFIG ) ) { _logger . config ( alreadyRegistredTransportMBeanMessage + containerName + _STR ) ; } } catch ( NotCompliantMBeanException e ) { if ( _logger . isLoggable ( Level . WARNING ) ) { _logger . log ( Level . SEVERE , failedTransportMBeanRegistrationMessagePrefix + containerName + _STR , e ) ; } } catch ( MBeanRegistrationException e ) { if ( _logger . isLoggable ( Level . SEVERE ) ) { _logger . log ( Level . SEVERE , failedTransportMBeanRegistrationMessagePrefix + containerName + _STR , e ) ; } } if ( _logger . isLoggable ( Level . CONFIG ) ) { _logger . config ( successfulTransportMBeanRegistrationMessage + containerName + _STR ) ; } } else { if ( _logger . isLoggable ( Level . CONFIG ) ) { _logger . config ( alreadyRegistredTransportMBeanMessage ) ; } } }
44900	public static int update ( String where , Object [ ] args , V sets , Class < ? extends Bean > t ) { Table mapping = ( Table ) t . getAnnotation ( Table . class ) ; if ( mapping == null ) { if ( log . isErrorEnabled ( ) ) log . error ( _STR + t + _STR ) ; return - _NUM ; } if ( ! X . isEmpty ( mapping . name ( ) ) ) { return updateTable ( mapping . name ( ) , where , args , sets ) ; } return - _NUM ; }
7021	private void stopVideoFadingEdgesScreenTimer ( ) { if ( null != mVideoFadingEdgesTimer ) { mVideoFadingEdgesTimer . cancel ( ) ; mVideoFadingEdgesTimer = null ; mVideoFadingEdgesTimerTask = null ; } }
71862	public void removeListener ( final TimeoutEventListener listener ) { listeners . remove ( listener ) ; }
39095	protected static void processGenericPropertiesCreatorProps ( File propsFile ) { try { Properties expProps = new Properties ( ) ; BufferedInputStream bi = new BufferedInputStream ( new FileInputStream ( propsFile ) ) ; expProps . load ( bi ) ; bi . close ( ) ; bi = null ; Properties GPCInputProps = GenericPropertiesCreator . getGlobalInputProperties ( ) ; Set < Object > keys = expProps . keySet ( ) ; Iterator < Object > keysI = keys . iterator ( ) ; while ( keysI . hasNext ( ) ) { String key = ( String ) keysI . next ( ) ; String existingVal = GPCInputProps . getProperty ( key , _STR ) ; if ( existingVal . length ( ) > _NUM ) { String newVal = expProps . getProperty ( key ) ; if ( existingVal . indexOf ( newVal ) < _NUM ) { newVal = existingVal + _STR + newVal ; GPCInputProps . put ( key , newVal ) ; } } else { String newVal = expProps . getProperty ( key ) ; GPCInputProps . put ( key , newVal ) ; } } } catch ( Exception ex ) { } }
79076	private synchronized void addTableLockObject ( AbsoluteTableIdentifier absoluteTableIdentifier ) { if ( null == tableLockMap . get ( absoluteTableIdentifier ) ) { tableLockMap . put ( absoluteTableIdentifier , new Object ( ) ) ; } }
39614	private static String randomElement ( ArrayList < String > list ) { int index = random . nextInt ( list . size ( ) ) ; return list . get ( index ) ; }
34803	public static < T > void updateMappingToImmutableSet ( Map < T , Set < AnnotationMirror > > map , T key , Set < AnnotationMirror > newQual ) { Set < AnnotationMirror > result = AnnotationUtils . createAnnotationSet ( ) ; if ( ! map . containsKey ( key ) ) { result . addAll ( newQual ) ; } else { result . addAll ( map . get ( key ) ) ; result . addAll ( newQual ) ; } map . put ( key , Collections . unmodifiableSet ( result ) ) ; }
24390	public static void join ( final AsyncInvocation < ? > async , final long timeoutMilliseconds ) { join ( async . getThread ( ) , timeoutMilliseconds ) ; }
48641	void define ( MemberDefinition field , int slot , int from , int to ) { if ( from >= to ) { return ; } for ( int i = _NUM ; i < len ; i ++ ) { if ( ( locals [ i ] . field == field ) && ( locals [ i ] . slot == slot ) && ( from <= locals [ i ] . to ) && ( to >= locals [ i ] . from ) ) { locals [ i ] . from = Math . min ( locals [ i ] . from , from ) ; locals [ i ] . to = Math . max ( locals [ i ] . to , to ) ; return ; } } if ( len == locals . length ) { LocalVariable newlocals [ ] = new LocalVariable [ len * _NUM ] ; System . arraycopy ( locals , _NUM , newlocals , _NUM , len ) ; locals = newlocals ; } locals [ len ++ ] = new LocalVariable ( field , slot , from , to ) ; }
32370	protected Connection openConnection ( boolean autocommit ) throws SQLException { Connection conn = dataSrc . getConnection ( ) ; conn . setAutoCommit ( autocommit ) ; return conn ; }
58043	public void error ( XPathContext xctxt , String msg , Object [ ] args ) throws javax . xml . transform . TransformerException { java . lang . String fmsg = XSLMessages . createXPATHMessage ( msg , args ) ; if ( null != xctxt ) { ErrorListener eh = xctxt . getErrorListener ( ) ; TransformerException te = new TransformerException ( fmsg , this ) ; eh . fatalError ( te ) ; } }
46465	public void mousePressed ( MouseEvent e ) { int nclicks = SwingUtilities2 . getAdjustedClickCount ( getComponent ( ) , e ) ; if ( SwingUtilities . isLeftMouseButton ( e ) ) { if ( e . isConsumed ( ) ) { shouldHandleRelease = _BOOL ; } else { shouldHandleRelease = _BOOL ; adjustCaretAndFocus ( e ) ; if ( nclicks == _NUM && SwingUtilities2 . canEventAccessSystemClipboard ( e ) ) { selectWord ( e ) ; } } } }
4553	public static byte [ ] decode ( String str , int flags ) { return decode ( str . getBytes ( ) , flags ) ; }
8471	public Object apply ( String source , int lineNo , int columnNo , Object funcBody , Vector paramNames , Vector arguments ) throws BSFException { Object object = eval ( source , lineNo , columnNo , funcBody ) ; if ( object instanceof Closure ) { Closure closure = ( Closure ) object ; return closure . call ( arguments . toArray ( ) ) ; } return object ; }
871	public Set keySet ( ) { return totalKeySet ( ) ; }
60218	public void output ( List list , Writer out ) throws IOException { printContentRange ( out , list , _NUM , list . size ( ) , _NUM , createNamespaceStack ( ) ) ; out . flush ( ) ; }
30292	public boolean consumeEncumbranceBudget ( final Map < String , Object > detailsMap ) { if ( detailsMap == null ) throw new ValidationException ( Arrays . asList ( new ValidationError ( _STR , _STR ) ) ) ; detailsMap . put ( Constants . CONSUMEORRELEASE , _BOOL ) ; final BigDecimal bd = getDetails ( detailsMap ) ; return bd . intValue ( ) == _NUM ; }
15904	private int [ ] mod ( int [ ] a , int [ ] f ) { int df = computeDegree ( f ) ; if ( df == - _NUM ) { throw new ArithmeticException ( _STR ) ; } int [ ] result = new int [ a . length ] ; int hc = headCoefficient ( f ) ; hc = field . inverse ( hc ) ; System . arraycopy ( a , _NUM , result , _NUM , result . length ) ; while ( df <= computeDegree ( result ) ) { int [ ] q ; int coeff = field . mult ( headCoefficient ( result ) , hc ) ; q = multWithMonomial ( f , computeDegree ( result ) - df ) ; q = multWithElement ( q , coeff ) ; result = add ( q , result ) ; } return result ; }
38962	@ Override public Enumeration < Option > listOptions ( ) { Vector < Option > result = enumToVector ( super . listOptions ( ) ) ; result . addElement ( new Option ( _STR + defaultNumClusters ( ) + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + defaultMinInstNum ( ) + _STR + defaultMaxInstNum ( ) + _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + defaultMinRadius ( ) + _STR + defaultMaxRadius ( ) + _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + defaultDistMult ( ) + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + defaultNumCycles ( ) + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; result . addElement ( new Option ( _STR + defaultNoiseRate ( ) + _STR + _STR + _STR , _STR , _NUM , _STR ) ) ; return result . elements ( ) ; }
67696	public static void appendHexJavaScriptRepresentation ( StringBuilder sb , char c ) { sb . append ( _STR ) ; String val = Integer . toHexString ( c ) ; for ( int j = val . length ( ) ; j < _NUM ; j ++ ) { sb . append ( _STR ) ; } sb . append ( val ) ; }
83117	private void printBootstrapMap ( ) { LOG . info ( _STR ) ; for ( Integer i : chainMap . keySet ( ) ) { LOG . info ( String . format ( _STR , i , chainMap . get ( i ) ) ) ; } }
38916	public Vector < Option > enumToVector ( Enumeration < Option > enu ) { Vector < Option > options = new Vector < Option > ( ) ; options . addAll ( Collections . list ( enu ) ) ; return options ; }
13302	private void addToken ( int token ) { try { fTokens [ fTokenCount ] = token ; } catch ( ArrayIndexOutOfBoundsException ex ) { int [ ] oldList = fTokens ; fTokens = new int [ fTokenCount << _NUM ] ; System . arraycopy ( oldList , _NUM , fTokens , _NUM , fTokenCount ) ; fTokens [ fTokenCount ] = token ; } fTokenCount ++ ; }
45721	private P filterLargeValueSets ( FilterSpec fs , MetaDataObject rootMeta , F root , boolean forceEntityBased , JoinType defaultPredicateJoinType ) { ArrayList < FilterSpec > specs = new ArrayList < > ( ) ; List < ? > list = new ArrayList < > ( ( Collection < ? > ) fs . getValue ( ) ) ; for ( int i = _NUM ; i < list . size ( ) ; i += ORACLE_PARAM_LIMIT ) { int nextOffset = i + Math . min ( list . size ( ) - i , ORACLE_PARAM_LIMIT ) ; List < ? > batchList = list . subList ( i , nextOffset ) ; specs . add ( new FilterSpec ( fs . getAttributePath ( ) , fs . getOperator ( ) , batchList ) ) ; } FilterSpec orSpec = FilterSpec . or ( specs ) ; return filterSpecListToPredicate ( rootMeta , root , orSpec , forceEntityBased , defaultPredicateJoinType ) ; }
24885	protected void addTags ( E data , Builder builder ) { PlatformIdent platformIdent = cachedDataService . getPlatformIdentForId ( data . getPlatformIdent ( ) ) ; builder . tag ( Series . TAG_AGENT_ID , String . valueOf ( data . getPlatformIdent ( ) ) ) ; if ( null != platformIdent ) { builder . tag ( Series . TAG_AGENT_NAME , platformIdent . getAgentName ( ) ) ; } }
4261	public int compare ( String s1 , String s2 ) { final Matcher match1 = MATCH_ID_PATTERN . matcher ( s1 ) ; final Matcher match2 = MATCH_ID_PATTERN . matcher ( s2 ) ; final boolean match1matches = match1 . matches ( ) ; final boolean match2matches = match2 . matches ( ) ; if ( match1matches ^ match2matches ) { return ( match1matches ) ? _NUM : - _NUM ; } else if ( match1matches && match2matches ) { int signature1 = Integer . parseInt ( match1 . group ( _NUM ) ) ; int signature2 = Integer . parseInt ( match2 . group ( _NUM ) ) ; int comparison = ( signature1 < signature2 ) ? - _NUM : ( signature1 > signature2 ) ? _NUM : _NUM ; if ( comparison == _NUM ) { int start1 = Integer . parseInt ( match1 . group ( _NUM ) ) ; int start2 = Integer . parseInt ( match2 . group ( _NUM ) ) ; comparison = ( start1 < start2 ) ? - _NUM : ( start1 > start2 ) ? _NUM : _NUM ; } if ( comparison == _NUM ) { int end1 = Integer . parseInt ( match1 . group ( _NUM ) ) ; int end2 = Integer . parseInt ( match2 . group ( _NUM ) ) ; comparison = ( end1 < end2 ) ? - _NUM : ( end1 > end2 ) ? _NUM : _NUM ; } return comparison ; } else { int seqLength1 = s1 . length ( ) , n2 = s2 . length ( ) ; for ( int i1 = _NUM , i2 = _NUM ; i1 < seqLength1 && i2 < n2 ; i1 ++ , i2 ++ ) { char c1 = s1 . charAt ( i1 ) ; char c2 = s2 . charAt ( i2 ) ; if ( c1 != c2 ) { c1 = Character . toUpperCase ( c1 ) ; c2 = Character . toUpperCase ( c2 ) ; if ( c1 != c2 ) { c1 = Character . toLowerCase ( c1 ) ; c2 = Character . toLowerCase ( c2 ) ; if ( c1 != c2 ) { return c1 - c2 ; } } } } return seqLength1 - n2 ; } }
75892	private static int loadBuildNumber ( Context context , PackageManager packageManager ) { try { ApplicationInfo appInfo = packageManager . getApplicationInfo ( context . getPackageName ( ) , PackageManager . GET_META_DATA ) ; Bundle metaData = appInfo . metaData ; if ( metaData != null ) { return metaData . getInt ( BUNDLE_BUILD_NUMBER , _NUM ) ; } } catch ( PackageManager . NameNotFoundException e ) { L . e ( _STR ) ; e . printStackTrace ( ) ; } return _NUM ; }
65506	public static LeftRegularBipartiteGraphSegment buildRandomLeftRegularBipartiteGraph ( int leftSize , int rightSize , int leftDegree , Random random ) { LeftRegularBipartiteGraphSegment leftRegularBipartiteGraphSegment = new LeftRegularBipartiteGraphSegment ( leftSize / _NUM , leftDegree , rightSize / _NUM , leftSize / _NUM , _NUM , Integer . MAX_VALUE , new IdentityEdgeTypeMask ( ) , new NullStatsReceiver ( ) ) ; LongSet addedIds = new LongOpenHashSet ( leftDegree ) ; for ( int i = _NUM ; i < leftSize ; i ++ ) { addedIds . clear ( ) ; for ( int j = _NUM ; j < leftDegree ; j ++ ) { long idToAdd ; do { idToAdd = random . nextInt ( rightSize ) ; } while ( addedIds . contains ( idToAdd ) ) ; addedIds . add ( idToAdd ) ; leftRegularBipartiteGraphSegment . addEdge ( i , idToAdd , ( byte ) _NUM ) ; } } return leftRegularBipartiteGraphSegment ; }
25556	@ Override public void addFocusables ( ArrayList < View > views , int direction , int focusableMode ) { final int focusableCount = views . size ( ) ; final int descendantFocusability = getDescendantFocusability ( ) ; if ( descendantFocusability != FOCUS_BLOCK_DESCENDANTS ) { for ( int i = _NUM ; i < getChildCount ( ) ; i ++ ) { final View child = getChildAt ( i ) ; if ( child . getVisibility ( ) == VISIBLE ) { ItemInfo ii = infoForChild ( child ) ; if ( ii != null && ii . position == mCurItem ) { child . addFocusables ( views , direction , focusableMode ) ; } } } } if ( descendantFocusability != FOCUS_AFTER_DESCENDANTS || ( focusableCount == views . size ( ) ) ) { if ( ! isFocusable ( ) ) { return ; } if ( ( focusableMode & FOCUSABLES_TOUCH_MODE ) == FOCUSABLES_TOUCH_MODE && isInTouchMode ( ) && ! isFocusableInTouchMode ( ) ) { return ; } if ( views != null ) { views . add ( this ) ; } } }
75882	protected HttpURLConnection configureRequest ( final HttpURLConnection request ) { if ( credentials != null ) request . setRequestProperty ( HEADER_AUTHORIZATION , credentials ) ; request . setRequestProperty ( HEADER_USER_AGENT , userAgent ) ; request . setRequestProperty ( HEADER_ACCEPT , getHeaderAccept ( ) ) ; return request ; }
29277	public static String convertToTitle ( int n ) { if ( n <= _NUM ) return _STR ; StringBuilder title = new StringBuilder ( ) ; while ( n > _NUM ) { n -- ; int r = n % _NUM ; title . insert ( _NUM , ( char ) ( _STR + r ) ) ; n = n / _NUM ; } return title . toString ( ) ; }
57340	private char readEscapeCharacter ( ) throws JSONException { char escaped = in . charAt ( pos ++ ) ; switch ( escaped ) { case _STR : if ( pos + _NUM > in . length ( ) ) { throw syntaxError ( _STR ) ; } String hex = in . substring ( pos , pos + _NUM ) ; pos += _NUM ; return ( char ) Integer . parseInt ( hex , _NUM ) ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : return _STR ; case _STR : case _STR : case _STR : default : return escaped ; } }
67805	static public void process ( String input , String output , String packFileName ) { process ( new Settings ( ) , input , output , packFileName ) ; }
19768	private ReplicatorRuntimeConf ( String serviceName ) { replicatorHomeDir = locateReplicatorHomeDir ( ) ; replicatorLogDir = locateReplicatorLogDir ( ) ; replicatorConfDir = locateReplicatorConfDir ( ) ; replicatorProperties = new File ( locateReplicatorConfDir ( ) , _STR + serviceName + _STR ) ; if ( ! replicatorProperties . isFile ( ) || ! replicatorProperties . canRead ( ) ) { throw new ServerRuntimeException ( _STR + replicatorProperties ) ; } replicatorDynamicProperties = new File ( replicatorConfDir , _STR + serviceName + _STR ) ; replicatorDynamicRole = new File ( replicatorConfDir , _STR + serviceName + _STR ) ; this . clearDynamicProperties = Boolean . parseBoolean ( System . getProperty ( CLEAR_DYNAMIC_PROPERTIES ) ) ; }
59827	private String toLocalNumber ( double n ) { return mDecimalFormat . format ( n ) ; }
61631	public void simulateMethod ( SootMethod method , ReferenceVariable thisVar , ReferenceVariable returnVar , ReferenceVariable params [ ] ) { String subSignature = method . getSubSignature ( ) ; if ( subSignature . equals ( _STR ) ) { java_security_AccessController_doPrivileged ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( _STR ) ) { java_security_AccessController_doPrivileged ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( _STR ) ) { java_security_AccessController_doPrivileged ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( _STR ) ) { java_security_AccessController_doPrivileged ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( _STR ) ) { java_security_AccessController_getStackAccessControlContext ( method , thisVar , returnVar , params ) ; return ; } else if ( subSignature . equals ( _STR ) ) { java_security_AccessController_getInheritedAccessControlContext ( method , thisVar , returnVar , params ) ; return ; } else { defaultMethod ( method , thisVar , returnVar , params ) ; return ; } }
25070	protected final void refreshLoadingViewsSize ( ) { final int maximumPullScroll = ( int ) ( getMaximumPullScroll ( ) * _NUM ) ; int pLeft = getPaddingLeft ( ) ; int pTop = getPaddingTop ( ) ; int pRight = getPaddingRight ( ) ; int pBottom = getPaddingBottom ( ) ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setWidth ( maximumPullScroll ) ; pLeft = - maximumPullScroll ; } else { pLeft = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setWidth ( maximumPullScroll ) ; pRight = - maximumPullScroll ; } else { pRight = _NUM ; } break ; case VERTICAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setHeight ( maximumPullScroll ) ; pTop = - maximumPullScroll ; } else { pTop = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setHeight ( maximumPullScroll ) ; pBottom = - maximumPullScroll ; } else { pBottom = _NUM ; } break ; } if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR , pLeft , pTop , pRight , pBottom ) ) ; } setPadding ( pLeft , pTop , pRight , pBottom ) ; }
86739	public static long [ ] asLongArray ( final List < Long > l ) { final long [ ] a = new long [ l . size ( ) ] ; for ( int i = _NUM ; i < a . length ; i ++ ) { a [ i ] = l . get ( i ) ; } return a ; }
37272	private void updateMenuState ( ) { m_appendAnd . setEnabled ( m_criteriumNode . allowAppend ( CAndCriterium . class ) ) ; m_appendOr . setEnabled ( m_criteriumNode . allowAppend ( COrCriterium . class ) ) ; m_appendNot . setEnabled ( m_criteriumNode . allowAppend ( CNotCriterium . class ) ) ; m_insertAnd . setEnabled ( m_criteriumNode . allowInsert ( CAndCriterium . class ) ) ; m_insertOr . setEnabled ( m_criteriumNode . allowInsert ( COrCriterium . class ) ) ; m_insertNot . setEnabled ( m_criteriumNode . allowInsert ( CNotCriterium . class ) ) ; m_conditionSubmenu . setEnabled ( m_criteriumNode . allowAppend ( CConditionCriterium . class ) ) ; m_remove . setEnabled ( ! m_criteriumNode . isRoot ( ) ) ; m_removeAll . setEnabled ( m_criteriumNode . getChildCount ( ) != _NUM ) ; }
32470	public void testPutGetRemove ( ) throws Exception { initStore ( _NUM ) ; Set < Integer > exp ; try { exp = runPutGetRemoveMultithreaded ( _NUM , _NUM ) ; } finally { shutdownStore ( ) ; } Map < Integer , String > map = delegate . getMap ( ) ; Collection < Integer > extra = new HashSet < > ( map . keySet ( ) ) ; extra . removeAll ( exp ) ; assertTrue ( _STR + extra , extra . isEmpty ( ) ) ; Collection < Integer > missing = new HashSet < > ( exp ) ; missing . removeAll ( map . keySet ( ) ) ; assertTrue ( _STR + missing , missing . isEmpty ( ) ) ; for ( Integer key : exp ) assertEquals ( _STR + key , _STR + key , map . get ( key ) ) ; }
31610	public static String formatListToString ( List < String > list ) { String result = _STR ; for ( String s : list ) result += s + _STR ; result = result . trim ( ) ; return result . toUpperCase ( ) ; }
45987	@ Override public void removeNotificationListener ( NotificationListener listener ) throws ListenerNotFoundException { if ( SNMP_ADAPTOR_LOGGER . isLoggable ( Level . FINEST ) ) { SNMP_ADAPTOR_LOGGER . logp ( Level . FINEST , dbgTag , _STR , _STR + listener ) ; } notifBroadcaster . removeNotificationListener ( listener ) ; }
35670	public static boolean isNewer ( long ts1 , long size1 , long ts2 , long size2 ) { return ts1 > ts2 || ( ts1 == ts2 && size1 < size2 ) ; }
50088	private static void d_ucumm ( double [ ] a , double [ ] agg , double [ ] c , int m , int n , int rl , int ru ) { double [ ] cprods = ( agg != null ) ? agg : new double [ n ] ; if ( agg == null ) Arrays . fill ( cprods , _NUM ) ; for ( int i = rl , aix = rl * n ; i < ru ; i ++ , aix += n ) { productAgg ( a , cprods , aix , _NUM , n ) ; System . arraycopy ( cprods , _NUM , c , aix , n ) ; } }
85421	public static List < ModuleSpec > expandSpecWildcards ( File dir , List < ModuleSpec > modules , Backend forBackend ) { List < File > dirs = new ArrayList < File > ( ) ; dirs . add ( dir ) ; return expandSpecWildcards ( dirs , modules , forBackend ) ; }
26566	private void $$$setupUI$$$ ( ) { myContentPanel = new JPanel ( ) ; myContentPanel . setLayout ( new GridLayoutManager ( _NUM , _NUM , new Insets ( _NUM , _NUM , _NUM , _NUM ) , - _NUM , - _NUM ) ) ; myYoursRadioButton = new JRadioButton ( ) ; myYoursRadioButton . setSelected ( _BOOL ) ; myYoursRadioButton . setText ( _STR ) ; myYoursRadioButton . setMnemonic ( _STR ) ; myYoursRadioButton . setDisplayedMnemonicIndex ( _NUM ) ; myContentPanel . add ( myYoursRadioButton , new GridConstraints ( _NUM , _NUM , _NUM , _NUM , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_NONE , GridConstraints . SIZEPOLICY_CAN_SHRINK | GridConstraints . SIZEPOLICY_CAN_GROW , GridConstraints . SIZEPOLICY_FIXED , null , null , null , _NUM , _BOOL ) ) ; myTheirsRadioButton = new JRadioButton ( ) ; myTheirsRadioButton . setText ( _STR ) ; myTheirsRadioButton . setMnemonic ( _STR ) ; myTheirsRadioButton . setDisplayedMnemonicIndex ( _NUM ) ; myContentPanel . add ( myTheirsRadioButton , new GridConstraints ( _NUM , _NUM , _NUM , _NUM , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_NONE , GridConstraints . SIZEPOLICY_CAN_SHRINK | GridConstraints . SIZEPOLICY_CAN_GROW , GridConstraints . SIZEPOLICY_FIXED , null , null , null , _NUM , _BOOL ) ) ; myUseCustomRadioButton = new JRadioButton ( ) ; myUseCustomRadioButton . setText ( _STR ) ; myUseCustomRadioButton . setMnemonic ( _STR ) ; myUseCustomRadioButton . setDisplayedMnemonicIndex ( _NUM ) ; myContentPanel . add ( myUseCustomRadioButton , new GridConstraints ( _NUM , _NUM , _NUM , _NUM , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_NONE , GridConstraints . SIZEPOLICY_CAN_SHRINK | GridConstraints . SIZEPOLICY_CAN_GROW , GridConstraints . SIZEPOLICY_FIXED , null , null , null , _NUM , _BOOL ) ) ; myCustomPathTextField = new JTextField ( ) ; myCustomPathTextField . setEnabled ( _BOOL ) ; myContentPanel . add ( myCustomPathTextField , new GridConstraints ( _NUM , _NUM , _NUM , _NUM , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_BOTH , GridConstraints . SIZEPOLICY_WANT_GROW , GridConstraints . SIZEPOLICY_FIXED , null , new Dimension ( _NUM , - _NUM ) , null , _NUM , _BOOL ) ) ; final Spacer spacer1 = new Spacer ( ) ; myContentPanel . add ( spacer1 , new GridConstraints ( _NUM , _NUM , _NUM , _NUM , GridConstraints . ANCHOR_CENTER , GridConstraints . FILL_VERTICAL , _NUM , GridConstraints . SIZEPOLICY_WANT_GROW , null , null , null , _NUM , _BOOL ) ) ; myErrorLabel = new JLabel ( ) ; myErrorLabel . setForeground ( new Color ( - _NUM ) ) ; myErrorLabel . setText ( _STR ) ; myContentPanel . add ( myErrorLabel , new GridConstraints ( _NUM , _NUM , _NUM , _NUM , GridConstraints . ANCHOR_WEST , GridConstraints . FILL_NONE , GridConstraints . SIZEPOLICY_CAN_GROW , GridConstraints . SIZEPOLICY_FIXED , null , null , null , _NUM , _BOOL ) ) ; ButtonGroup buttonGroup ; buttonGroup = new ButtonGroup ( ) ; buttonGroup . add ( myYoursRadioButton ) ; buttonGroup . add ( myTheirsRadioButton ) ; buttonGroup . add ( myUseCustomRadioButton ) ; }
8878	private static String reportListContents ( Collection < ProcessErrorStateInfo > errList ) { if ( errList == null ) return null ; StringBuilder builder = new StringBuilder ( ) ; Iterator < ProcessErrorStateInfo > iter = errList . iterator ( ) ; while ( iter . hasNext ( ) ) { ProcessErrorStateInfo entry = iter . next ( ) ; String condition ; switch ( entry . condition ) { case ActivityManager . ProcessErrorStateInfo . CRASHED : condition = _STR ; break ; case ActivityManager . ProcessErrorStateInfo . NOT_RESPONDING : condition = _STR ; break ; default : condition = _STR ; break ; } builder . append ( String . format ( _STR , entry . processName , condition , entry . shortMsg ) ) ; if ( entry . condition == ActivityManager . ProcessErrorStateInfo . CRASHED ) { builder . append ( String . format ( _STR , entry . stackTrace ) ) ; } builder . append ( _STR ) ; } return builder . toString ( ) ; }
72123	public void parseArguments ( final String [ ] rawArguments , Properties argumentProperties ) throws ArgumentException { boolean inTrailingArgs = _BOOL ; final int numArguments = rawArguments . length ; for ( int i = _NUM ; i < numArguments ; i ++ ) { final String arg = rawArguments [ i ] ; if ( inTrailingArgs ) { trailingArguments . add ( arg ) ; if ( maxTrailingArguments > _NUM && trailingArguments . size ( ) > maxTrailingArguments ) { final LocalizableMessage message = ERR_ARGPARSER_TOO_MANY_TRAILING_ARGS . get ( maxTrailingArguments ) ; throw new ArgumentException ( message ) ; } continue ; } if ( arg . equals ( _STR ) ) { inTrailingArgs = _BOOL ; } else if ( arg . startsWith ( _STR ) ) { String argName = arg . substring ( _NUM ) ; String argValue = null ; final int equalPos = argName . indexOf ( _STR ) ; if ( equalPos == _NUM ) { throw new ArgumentException ( ERR_ARGPARSER_LONG_ARG_WITHOUT_NAME . get ( arg ) ) ; } else if ( equalPos > _NUM ) { argValue = argName . substring ( equalPos + _NUM ) ; argName = argName . substring ( _NUM , equalPos ) ; } final String origArgName = argName ; argName = formatLongIdentifier ( argName ) ; final Argument a = longIDMap . get ( argName ) ; if ( a == null ) { if ( OPTION_LONG_HELP . equals ( argName ) ) { writeToUsageOutputStream ( getUsage ( ) ) ; return ; } else if ( OPTION_LONG_PRODUCT_VERSION . equals ( argName ) ) { printVersion ( ) ; return ; } else { throw new ArgumentException ( ERR_ARGPARSER_NO_ARGUMENT_WITH_LONG_ID . get ( origArgName ) ) ; } } else { a . setPresent ( _BOOL ) ; if ( isUsageArgument ( a ) ) { writeToUsageOutputStream ( getUsage ( ) ) ; return ; } } if ( a . needsValue ( ) ) { if ( argValue == null ) { if ( ( i + _NUM ) == numArguments ) { throw new ArgumentException ( ERR_ARGPARSER_NO_VALUE_FOR_ARGUMENT_WITH_LONG_ID . get ( origArgName ) ) ; } argValue = rawArguments [ ++ i ] ; } final LocalizableMessageBuilder invalidReason = new LocalizableMessageBuilder ( ) ; if ( ! a . valueIsAcceptable ( argValue , invalidReason ) ) { throw new ArgumentException ( ERR_ARGPARSER_VALUE_UNACCEPTABLE_FOR_LONG_ID . get ( argValue , origArgName , invalidReason ) ) ; } if ( a . hasValue ( ) && ! a . isMultiValued ( ) ) { throw new ArgumentException ( ERR_ARGPARSER_NOT_MULTIVALUED_FOR_LONG_ID . get ( origArgName ) ) ; } a . addValue ( argValue ) ; } else if ( argValue != null ) { throw new ArgumentException ( ERR_ARGPARSER_ARG_FOR_LONG_ID_DOESNT_TAKE_VALUE . get ( origArgName ) ) ; } } else if ( arg . startsWith ( _STR ) ) { if ( arg . equals ( _STR ) ) { throw new ArgumentException ( ERR_ARGPARSER_INVALID_DASH_AS_ARGUMENT . get ( ) ) ; } final char argCharacter = arg . charAt ( _NUM ) ; String argValue ; if ( arg . length ( ) > _NUM ) { argValue = arg . substring ( _NUM ) ; } else { argValue = null ; } final Argument a = shortIDMap . get ( argCharacter ) ; if ( a == null ) { if ( argCharacter == _STR ) { writeToUsageOutputStream ( getUsage ( ) ) ; return ; } else if ( versionHandler != null && argCharacter == OPTION_SHORT_PRODUCT_VERSION && ! shortIDMap . containsKey ( OPTION_SHORT_PRODUCT_VERSION ) ) { printVersion ( ) ; return ; } else { throw new ArgumentException ( ERR_ARGPARSER_NO_ARGUMENT_WITH_SHORT_ID . get ( argCharacter ) ) ; } } else { a . setPresent ( _BOOL ) ; if ( isUsageArgument ( a ) ) { writeToUsageOutputStream ( getUsage ( ) ) ; return ; } } if ( a . needsValue ( ) ) { if ( argValue == null ) { if ( ( i + _NUM ) == numArguments ) { throw new ArgumentException ( ERR_ARGPARSER_NO_VALUE_FOR_ARGUMENT_WITH_SHORT_ID . get ( argCharacter ) ) ; } argValue = rawArguments [ ++ i ] ; } final LocalizableMessageBuilder invalidReason = new LocalizableMessageBuilder ( ) ; if ( ! a . valueIsAcceptable ( argValue , invalidReason ) ) { throw new ArgumentException ( ERR_ARGPARSER_VALUE_UNACCEPTABLE_FOR_SHORT_ID . get ( argValue , argCharacter , invalidReason ) ) ; } if ( a . hasValue ( ) && ! a . isMultiValued ( ) ) { throw new ArgumentException ( ERR_ARGPARSER_NOT_MULTIVALUED_FOR_SHORT_ID . get ( argCharacter ) ) ; } a . addValue ( argValue ) ; } else if ( argValue != null ) { final int valueLength = argValue . length ( ) ; for ( int j = _NUM ; j < valueLength ; j ++ ) { final char c = argValue . charAt ( j ) ; final Argument b = shortIDMap . get ( c ) ; if ( b == null ) { throw new ArgumentException ( ERR_ARGPARSER_NO_ARGUMENT_WITH_SHORT_ID . get ( argCharacter ) ) ; } else if ( b . needsValue ( ) ) { throw new ArgumentException ( ERR_ARGPARSER_CANT_MIX_ARGS_WITH_VALUES . get ( argCharacter , argValue , c ) ) ; } else { b . setPresent ( _BOOL ) ; if ( isUsageArgument ( b ) ) { writeToUsageOutputStream ( getUsage ( ) ) ; return ; } } } } } else if ( allowsTrailingArguments ) { inTrailingArgs = _BOOL ; trailingArguments . add ( arg ) ; } else { throw new ArgumentException ( ERR_ARGPARSER_DISALLOWED_TRAILING_ARGUMENT . get ( arg ) ) ; } } if ( allowsTrailingArguments && minTrailingArguments > _NUM && trailingArguments . size ( ) < minTrailingArguments ) { throw new ArgumentException ( ERR_ARGPARSER_TOO_FEW_TRAILING_ARGUMENTS . get ( minTrailingArguments ) ) ; } if ( argumentProperties == null ) { argumentProperties = checkExternalProperties ( ) ; } normalizeArguments ( argumentProperties , argumentList ) ; }
59246	public void testGetIssuerNames ( ) { X509CRLSelector selector = new X509CRLSelector ( ) ; byte [ ] iss1 = new byte [ ] { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; byte [ ] iss2 = new byte [ ] { _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM , _NUM } ; assertNull ( _STR , selector . getIssuerNames ( ) ) ; try { selector . addIssuerName ( iss1 ) ; selector . addIssuerName ( iss2 ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; fail ( _STR ) ; } Collection < Object > result = selector . getIssuerNames ( ) ; assertEquals ( _STR , _NUM , result . size ( ) ) ; }
39622	@ Override public boolean start ( ) throws IOException { LOG . info ( _STR , initialCheckpointGenerator ) ; try { KinesisReaderCheckpoint initialCheckpoint = initialCheckpointGenerator . generate ( kinesis ) ; List < ShardRecordsIterator > iterators = newArrayList ( ) ; for ( ShardCheckpoint checkpoint : initialCheckpoint ) { iterators . add ( checkpoint . getShardRecordsIterator ( kinesis ) ) ; } shardIterators = new RoundRobin < > ( iterators ) ; } catch ( TransientKinesisException e ) { throw new IOException ( e ) ; } return advance ( ) ; }
63205	@ Override public XADataSource createXADataSource ( Properties properties ) throws SQLException { Properties propertiesCopy = new Properties ( ) ; if ( properties != null ) { propertiesCopy . putAll ( properties ) ; } rejectUnsupportedOptions ( propertiesCopy ) ; rejectPoolingOptions ( propertiesCopy ) ; JdbcDataSource dataSource = new JdbcDataSource ( ) ; setupH2DataSource ( dataSource , propertiesCopy ) ; return dataSource ; }
72395	public static double toDegrees ( double x ) { if ( Double . isInfinite ( x ) || x == _NUM ) { return x ; } final double facta = _NUM ; final double factb = _NUM ; double xa = doubleHighPart ( x ) ; double xb = x - xa ; return xb * factb + xb * facta + xa * factb + xa * facta ; }
54670	public void addHeaderView ( View v ) { addHeaderView ( v , null , _BOOL ) ; }
61456	public static boolean isAbsolutePath ( String systemId ) { if ( systemId == null ) return _BOOL ; final File file = new File ( systemId ) ; return file . isAbsolute ( ) ; }
30311	void initDemandAndCollectionMap ( final List < String > prepareFieldNames , final Map < String , BigDecimal > demand , final Map < String , BigDecimal > collection , final Map < String , BigDecimal > rebates ) { if ( prepareFieldNames != null && ! prepareFieldNames . isEmpty ( ) ) for ( final String fieldName : prepareFieldNames ) { demand . put ( fieldName , BigDecimal . ZERO ) ; collection . put ( fieldName , BigDecimal . ZERO ) ; rebates . put ( fieldName , BigDecimal . ZERO ) ; } }
37570	protected Instance specifier ( int i ) { return m_Specifiers . get ( i ) ; }
13528	public ShapedCraftingRecipe ( Item nominalOutput , RecipeFunction recipeFunction , String format , boolean mirrored , ItemIngredient ... ingredients ) { this . nominalOutput = nominalOutput ; String [ ] formatLines = format . split ( _STR ) ; int numIngredients = _NUM ; int width = _NUM ; for ( String formatLine : formatLines ) { width = Math . max ( width , formatLine . length ( ) ) ; for ( char c : formatLine . toCharArray ( ) ) { if ( c == _STR ) { continue ; } else if ( c >= _STR && c <= _STR ) { numIngredients ++ ; } else { throw new IllegalArgumentException ( _STR + format + _STR + c ) ; } } } this . width = width ; this . height = formatLines . length ; this . posx = new int [ numIngredients ] ; this . posy = new int [ numIngredients ] ; this . ingredients = new ItemIngredient [ numIngredients ] ; this . mirrored = mirrored ; int ingredientIndex = _NUM ; for ( int y = _NUM ; y < this . height ; y ++ ) { String formatLine = formatLines [ y ] ; for ( int x = _NUM ; x < formatLine . length ( ) ; x ++ ) { char c = formatLine . charAt ( x ) ; if ( c == _STR ) { continue ; } this . posx [ ingredientIndex ] = x ; this . posy [ ingredientIndex ] = y ; this . ingredients [ ingredientIndex ] = ingredients [ c - _STR ] ; ingredientIndex ++ ; } } this . recipeFunction = recipeFunction ; this . lastIngredientIndexOnFirstLine = getLastIngredientIndexOnFirstLine ( ) ; }
67864	public void writeTag ( String tag , Font value ) { startTag ( tag ) ; writeTag ( _STR , value . getName ( ) ) ; int style = value . getStyle ( ) ; if ( ( style & Font . BOLD ) != _NUM && ( style & Font . ITALIC ) != _NUM ) { writeTag ( STYLE , _STR ) ; } else if ( ( style & Font . BOLD ) != _NUM ) { writeTag ( STYLE , _STR ) ; } else if ( ( style & Font . ITALIC ) != _NUM ) { writeTag ( STYLE , _STR ) ; } else { writeTag ( STYLE , _STR ) ; } writeTag ( _STR , value . getSize ( ) ) ; closeTag ( ) ; }
77767	private void internalWrite ( byte [ ] b , int off , int len , boolean finish ) throws IOException { coder . output = embiggen ( coder . output , coder . maxOutputSize ( len ) ) ; if ( ! coder . process ( b , off , len , finish ) ) { throw new Base64DataException ( _STR ) ; } out . write ( coder . output , _NUM , coder . op ) ; }
11091	private Socket connect ( String host , String portString ) throws IOException { int port = _NUM ; Socket sock = null ; boolean DEBUG = Debug . debugging ( _STR ) ; try { port = Integer . parseInt ( portString , _NUM ) ; } catch ( NumberFormatException e ) { if ( DEBUG ) Debug . output ( _STR + host + _STR + portString ) ; throw new IOException ( _STR + portString ) ; } if ( DEBUG ) Debug . output ( _STR + host + _STR + port ) ; try { sock = new Socket ( host , port ) ; } catch ( IOException e ) { if ( sock != null ) sock . close ( ) ; if ( DEBUG ) { Debug . output ( _STR + host + _STR + port + _STR + e ) ; } throw e ; } return sock ; }
38205	@ Override public boolean batchFinished ( ) { if ( getInputFormat ( ) == null ) { throw new IllegalStateException ( _STR ) ; } Instances toFilter = getInputFormat ( ) ; int cutOff = ( int ) Math . round ( toFilter . numInstances ( ) * m_Percentage / _NUM ) ; if ( m_Inverse ) { for ( int i = _NUM ; i < cutOff ; i ++ ) { push ( toFilter . instance ( i ) ) ; } } else { for ( int i = cutOff ; i < toFilter . numInstances ( ) ; i ++ ) { push ( toFilter . instance ( i ) ) ; } } flushInput ( ) ; m_NewBatch = _BOOL ; m_FirstBatchDone = _BOOL ; return ( numPendingOutput ( ) != _NUM ) ; }
11439	public void computeParameters ( ) { if ( ellps == null ) { ellps = Ellipsoid . WGS_84 ; } if ( mode == MODE_BELGIUM ) { alpha = _NUM ; } else { alpha = _NUM ; } double phi1 = ProjMath . degToRad ( lambert_sp_one ) ; double phi2 = ProjMath . degToRad ( lambert_sp_two ) ; double phif = ProjMath . degToRad ( referenceLatitude ) ; double e = ellps . ecc ; double sinphi ; sinphi = Math . sin ( phi1 ) ; double m1 = lambMsfn ( sinphi , Math . cos ( phi1 ) , e ) ; double t1 = lambTsfn ( phi1 , sinphi , e ) ; if ( MoreMath . approximately_equal ( phi1 , phi2 , EPS10 ) ) { n = sinphi ; } else { sinphi = Math . sin ( phi2 ) ; double m2 = lambMsfn ( sinphi , Math . cos ( phi2 ) , e ) ; double t2 = lambTsfn ( phi2 , sinphi , e ) ; n = Math . log ( m1 / m2 ) / Math . log ( t1 / t2 ) ; } F = m1 / ( n * Math . pow ( t1 , n ) ) ; if ( MoreMath . approximately_equal ( phi1 , phi2 , EPS10 ) ) { rf = _NUM ; } else { rf = ellps . radius * F * Math . pow ( lambTsfn ( phif , Math . sin ( phif ) , e ) , n ) ; } lamdaf = ProjMath . degToRad ( centralMeridian ) ; locationCenterXPixel = ( ( double ) getWidth ( ) / _NUM ) ; locationCenterYPixel = ( ( double ) getHeight ( ) / _NUM ) ; locationPixelsPerLambert = ( double ) getPPM ( ) / getScale ( ) ; LatLonPoint origin = new LatLonPoint . Double ( referenceLatitude , centralMeridian ) ; Point2D lp = LLToWorld ( origin . getY ( ) , origin . getX ( ) , new Point2D . Double ( ) ) ; locationOriginX = lp . getX ( ) ; locationOriginY = lp . getY ( ) ; LatLonPoint center = getCenter ( ) ; lp = LLToWorld ( center . getY ( ) , center . getX ( ) , lp ) ; locationCenterXLambert = lp . getX ( ) ; locationCenterYLambert = lp . getY ( ) ; locationOriginXfPixel = locationCenterXPixel + ( locationOriginX - locationCenterXLambert ) * locationPixelsPerLambert ; locationOriginYfPixel = locationCenterYPixel - ( locationOriginY - locationCenterYLambert ) * locationPixelsPerLambert ; if ( Debug . debugging ( _STR ) ) { Debug . output ( _STR + locationCenterXLambert + _STR + locationCenterYLambert ) ; Debug . output ( _STR + locationOriginX + _STR + locationOriginY ) ; } }
7132	protected OkHttpClient configureHttpClient ( ) { final OkHttpClient . Builder builder = new OkHttpClient . Builder ( ) ; final CookieManager cookieManager = new CookieManager ( ) ; cookieManager . setCookiePolicy ( CookiePolicy . ACCEPT_ALL ) ; builder . cookieJar ( new JavaNetCookieJar ( cookieManager ) ) ; builder . connectTimeout ( _NUM , TimeUnit . SECONDS ) ; builder . writeTimeout ( _NUM , TimeUnit . SECONDS ) ; builder . readTimeout ( _NUM , TimeUnit . SECONDS ) ; return builder . build ( ) ; }
66054	public String parseFile ( File file ) { log . config ( file . getAbsolutePath ( ) ) ; String line = null ; try { BufferedReader in = new BufferedReader ( new InputStreamReader ( new FileInputStream ( file ) , Ini . getCharset ( ) ) , _NUM ) ; String errMsg = _STR ; int lineNo = _NUM ; while ( ( line = in . readLine ( ) ) != null && errMsg . length ( ) == _NUM ) { errMsg = parseLine ( line , lineNo ) ; lineNo ++ ; } line = null ; in . close ( ) ; if ( errMsg . length ( ) != _NUM ) return errMsg ; } catch ( Exception ioe ) { String s = ioe . getLocalizedMessage ( ) ; if ( s == null || s . length ( ) == _NUM ) s = ioe . toString ( ) ; return _STR + line + _STR + s ; } return _STR ; }
28177	public static Test suite ( ) throws Exception { return suite ( _BOOL ) ; }
74468	public void load ( Element element , Object o ) { log . error ( _STR ) ; }
11233	public OMRaster ( double lt , double ln , int offset_x1 , int offset_y1 , ImageIcon ii ) { this ( lt , ln , offset_x1 , offset_y1 , ii . getImage ( ) ) ; }
82196	private synchronized boolean startDequeue ( ) { int threads = Math . min ( queue . size ( ) , maxThreads ) ; for ( int i = _NUM ; i < threads ; i ++ ) { ResourceThread t = ( ResourceThread ) queue . firstElement ( ) ; queue . removeElementAt ( _NUM ) ; running . addElement ( t ) ; threadCount ++ ; } for ( Enumeration e = running . elements ( ) ; e . hasMoreElements ( ) ; ) { ResourceThread t = ( ResourceThread ) e . nextElement ( ) ; t . go ( ) ; } return ( threads > _NUM ) ; }
46710	public void propertyChange ( PropertyChangeEvent evt ) { String name = evt . getPropertyName ( ) ; if ( name == _STR || name == _STR ) { invalidateWidthCache ( ) ; fireColumnMarginChanged ( ) ; } }
57501	static WorkQueue commonSubmitterQueue ( ) { ForkJoinPool p ; WorkQueue [ ] ws ; int m ; Submitter z ; return ( ( z = submitters . get ( ) ) != null && ( p = commonPool ) != null && ( ws = p . workQueues ) != null && ( m = ws . length - _NUM ) >= _NUM ) ? ws [ m & z . seed & SQMASK ] : null ; }
43521	public static void assertEquals ( Object object1 , Object object2 ) { checkAssertion ( object1 . equals ( object2 ) , null ) ; }
13456	protected final void refreshLoadingViewsSize ( ) { final int maximumPullScroll = ( int ) ( getMaximumPullScroll ( ) * _NUM ) ; int pLeft = getPaddingLeft ( ) ; int pTop = getPaddingTop ( ) ; int pRight = getPaddingRight ( ) ; int pBottom = getPaddingBottom ( ) ; switch ( getPullToRefreshScrollDirection ( ) ) { case HORIZONTAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setWidth ( maximumPullScroll ) ; pLeft = - maximumPullScroll ; } else { pLeft = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setWidth ( maximumPullScroll ) ; pRight = - maximumPullScroll ; } else { pRight = _NUM ; } break ; case VERTICAL : if ( mMode . showHeaderLoadingLayout ( ) ) { mHeaderLayout . setHeight ( maximumPullScroll ) ; pTop = - maximumPullScroll ; } else { pTop = _NUM ; } if ( mMode . showFooterLoadingLayout ( ) ) { mFooterLayout . setHeight ( maximumPullScroll ) ; pBottom = - maximumPullScroll ; } else { pBottom = _NUM ; } break ; } if ( DEBUG ) { Log . d ( LOG_TAG , String . format ( _STR , pLeft , pTop , pRight , pBottom ) ) ; } setPadding ( pLeft , pTop , pRight , pBottom ) ; }
84326	public static String flagNames ( long flags ) { StringBuilder sbuf = new StringBuilder ( ) ; int i = _NUM ; long f = flags & StandardFlags ; while ( f != _NUM ) { if ( ( f & _NUM ) != _NUM ) { sbuf . append ( _STR ) ; sbuf . append ( flagName [ i ] ) ; } f = f > > _NUM ; i ++ ; } return sbuf . toString ( ) ; }
72	public String formatSQL ( Object obj , Object expr ) { String sql = null ; if ( expr instanceof String ) { sql = ( String ) expr ; if ( log . isLoggable ( Level . FINEST ) ) { log . finest ( _STR + sql ) ; } } else if ( obj != null ) { sql = toString ( obj ) ; if ( sql != null ) { if ( sql . startsWith ( _STR ) ) { sql = sql . replaceFirst ( _STR , _STR ) ; } sql = sql . replaceAll ( _STR , BINARY_SQL_MARKER ) ; } if ( log . isLoggable ( Level . FINEST ) ) { log . finest ( _STR + sql ) ; } } return sql ; }
5976	public void indent ( ) { indent . append ( _STR ) ; }
71804	public void addFakeView ( View childView ) { childView . layout ( _NUM , _NUM , getWidth ( ) , childView . getMeasuredHeight ( ) ) ; views . add ( childView ) ; }
35374	public void compileProjects ( List < File > projects , IssueAcceptor issueAcceptor ) throws N4JSCompileException { compileProjects ( Arrays . asList ( new File ( _STR ) ) , projects , Collections . emptyList ( ) , issueAcceptor ) ; }
4953	protected final void print_contact_info ( ObjectInfoPanel p_window , java . util . Locale p_locale ) { Collection < BrdItem > contacts = get_normal_contacts ( ) ; if ( contacts . isEmpty ( ) ) return ; GuiResources resources = r_board . newGuiResources ( _STR ) ; p_window . append ( _STR + resources . getString ( _STR ) + _STR ) ; Integer contact_count = contacts . size ( ) ; p_window . append_items ( contact_count . toString ( ) , resources . getString ( _STR ) , contacts ) ; }
50828	private void updateProgress ( String progressLabel , int progress ) { if ( myHost != null && ( ( progress != previousProgress ) || ( ! progressLabel . equals ( previousProgressLabel ) ) ) ) { myHost . updateProgress ( progressLabel , progress ) ; } previousProgress = progress ; previousProgressLabel = progressLabel ; }
85720	@ SuppressWarnings ( _STR ) public Promise < Result , Progress > resolve ( Result result ) { List < DoneCallback < Result > > doneCallbacks ; List < AlwaysCallback > alwaysCallbacks ; synchronized ( this ) { validateInPendingState ( ) ; mState = STATE_RESOLVED ; printStateChanged ( _STR ) ; mResult = result ; doneCallbacks = mCallbacks . cloneDoneCallbacks ( ) ; alwaysCallbacks = mCallbacks . cloneAlwaysCallbacks ( ) ; clearCallbacks ( ) ; } if ( doneCallbacks . size ( ) > _NUM || alwaysCallbacks . size ( ) > _NUM ) { triggerAllDones ( doneCallbacks ) ; triggerAllAlways ( alwaysCallbacks ) ; } return this ; }
52266	private void adjustNameAndPosition ( Node node , int deltaX , int deltaY ) { String originalName = node . getName ( ) ; String uniqueName = nextUniqueName ( originalName ) ; if ( ! uniqueName . equals ( originalName ) ) { node . setName ( uniqueName ) ; node . setCenterX ( node . getCenterX ( ) + deltaX ) ; node . setCenterY ( node . getCenterY ( ) + deltaY ) ; } }
21675	private void createSnapshot ( BlockSnapshot snapshot , Snap unitySnap , StorageSystem storage , DbClient dbClient ) { snapshot . setNativeId ( unitySnap . getId ( ) ) ; snapshot . setNativeGuid ( NativeGUIDGenerator . generateNativeGuid ( storage , snapshot ) ) ; snapshot . setDeviceLabel ( unitySnap . getName ( ) ) ; snapshot . setIsSyncActive ( _BOOL ) ; snapshot . setInactive ( _BOOL ) ; snapshot . setCreationTime ( Calendar . getInstance ( ) ) ; snapshot . setWWN ( unitySnap . getAttachedWWN ( ) ) ; snapshot . setAllocatedCapacity ( unitySnap . getSize ( ) ) ; snapshot . setProvisionedCapacity ( unitySnap . getSize ( ) ) ; dbClient . createObject ( snapshot ) ; }
43955	public void save ( ) throws IOException { if ( ! props . isEmpty ( ) ) { ConfigurationUtil . saveConfigurationProperties ( props , propsFile , _BOOL ) ; } ConfigurationUtil . saveConfigurationProperties ( props , new File ( propsFile . getParentFile ( ) , propsFile . getName ( ) + _STR ) , _BOOL ) ; }
1269	public static int len ( String list , String delimiter , boolean ignoreEmpty ) { if ( delimiter . length ( ) == _NUM ) return len ( list , delimiter . charAt ( _NUM ) , ignoreEmpty ) ; char [ ] del = delimiter . toCharArray ( ) ; int len = StringUtil . length ( list ) ; if ( len == _NUM ) return _NUM ; int count = _NUM ; int last = _NUM ; char c ; for ( int i = _NUM ; i < len ; i ++ ) { c = list . charAt ( i ) ; for ( int y = _NUM ; y < del . length ; y ++ ) { if ( c == del [ y ] ) { if ( ! ignoreEmpty || last < i ) count ++ ; last = i + _NUM ; break ; } } } if ( ! ignoreEmpty || last < len ) count ++ ; return count ; }
34065	public synchronized void flush ( ) throws IOException { checkNotClosed ( ) ; trimToSize ( ) ; journalWriter . flush ( ) ; }
29929	public String buildUri ( String representationId , int segmentNumber , int bandwidth , long time ) { StringBuilder builder = new StringBuilder ( ) ; for ( int i = _NUM ; i < identifierCount ; i ++ ) { builder . append ( urlPieces [ i ] ) ; if ( identifiers [ i ] == REPRESENTATION_ID ) { builder . append ( representationId ) ; } else if ( identifiers [ i ] == NUMBER_ID ) { builder . append ( String . format ( Locale . US , identifierFormatTags [ i ] , segmentNumber ) ) ; } else if ( identifiers [ i ] == BANDWIDTH_ID ) { builder . append ( String . format ( Locale . US , identifierFormatTags [ i ] , bandwidth ) ) ; } else if ( identifiers [ i ] == TIME_ID ) { builder . append ( String . format ( Locale . US , identifierFormatTags [ i ] , time ) ) ; } } builder . append ( urlPieces [ identifierCount ] ) ; return builder . toString ( ) ; }
48543	static void dispose ( long pData , long pConfigInfo ) { OGLRenderQueue rq = OGLRenderQueue . getInstance ( ) ; rq . lock ( ) ; try { OGLContext . setScratchSurface ( pConfigInfo ) ; RenderBuffer buf = rq . getBuffer ( ) ; rq . ensureCapacityAndAlignment ( _NUM , _NUM ) ; buf . putInt ( DISPOSE_SURFACE ) ; buf . putLong ( pData ) ; rq . flushNow ( ) ; } finally { rq . unlock ( ) ; } }
69804	private void writeKanjiResourceFile ( File file ) throws IOException { FileOutputStream output = null ; KanjiEscapeOutputStream kanji = null ; OutputStreamWriter writer = null ; BufferedWriter w = null ; try { output = new FileOutputStream ( file ) ; kanji = new KanjiEscapeOutputStream ( output ) ; writer = new OutputStreamWriter ( kanji ) ; w = new BufferedWriter ( writer ) ; w . write ( _sb . toString ( ) ) ; } finally { Util . close ( w ) ; Util . close ( writer ) ; Util . close ( kanji ) ; Util . close ( output ) ; } }
55680	public ScannerException ( File file , ErrorMessages message ) { this ( file , ErrorMessages . get ( message ) , message , - _NUM , - _NUM ) ; }
40044	void renderNormal ( ) { glEnable ( GL_DEPTH_TEST ) ; glUseProgram ( this . normalProgram ) ; glUniformMatrix4fv ( viewMatrixUniform , _BOOL , viewMatrix . get ( matrixBuffer ) ) ; glUniformMatrix4fv ( projMatrixUniform , _BOOL , projMatrix . get ( matrixBuffer ) ) ; glUniformMatrix3fv ( normalMatrixUniform , _BOOL , normalMatrix . get ( matrixBuffer ) ) ; glBindFramebufferEXT ( GL_FRAMEBUFFER_EXT , fbo ) ; glClear ( GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT ) ; glBindBuffer ( GL_ARRAY_BUFFER , this . cubeVbo ) ; glEnableVertexAttribArray ( _NUM ) ; glVertexAttribPointer ( _NUM , _NUM , GL_FLOAT , _BOOL , _NUM , _NUM ) ; glEnableVertexAttribArray ( _NUM ) ; glVertexAttribPointer ( _NUM , _NUM , GL_FLOAT , _BOOL , _NUM , normalsOffset ) ; glDrawArrays ( GL_TRIANGLES , _NUM , numVertices ) ; glDisableVertexAttribArray ( _NUM ) ; glDisableVertexAttribArray ( _NUM ) ; glBindBuffer ( GL_ARRAY_BUFFER , _NUM ) ; glBindFramebufferEXT ( GL_FRAMEBUFFER_EXT , _NUM ) ; glUseProgram ( _NUM ) ; }
56508	private < T extends CWLResource > List < T > lookForResources ( CWLResourceType type , Class < T > clazz ) { List < T > resources = getRequirements ( type , clazz ) ; if ( resources == null || resources . size ( ) == _NUM ) { resources = getHints ( type , clazz ) ; } return resources ; }
20510	private void calcYValueSum ( ) { mYValueSum = _NUM ; for ( int i = _NUM ; i < mYVals . size ( ) ; i ++ ) { Entry e = mYVals . get ( i ) ; if ( e != null ) mYValueSum += Math . abs ( e . getVal ( ) ) ; } }
19620	@ Override public boolean release ( int decrement ) { if ( isEmpty ) { return _BOOL ; } if ( decrement < _NUM ) { throw new IllegalStateException ( String . format ( _STR , decrement , toVerboseString ( ) ) ) ; } final int refCnt = ledger . decrement ( decrement ) ; if ( BaseAllocator . DEBUG ) { historicalLog . recordEvent ( _STR , decrement , refCnt + decrement ) ; } if ( refCnt < _NUM ) { throw new IllegalStateException ( String . format ( _STR , id , toVerboseString ( ) ) ) ; } return refCnt == _NUM ; }
53888	public static void checkArgument ( boolean expression , Object errorMessage ) { if ( ! expression ) { throw new IllegalArgumentException ( String . valueOf ( errorMessage ) ) ; } }
81437	int listSize ( ) { int result = memSize ( ) ; for ( Iterator it = iterator ( ) ; it . hasNext ( ) ; ) { ASTNode child = ( ASTNode ) it . next ( ) ; result += child . treeSize ( ) ; } return result ; }
3793	public ConnectionTcp findConnectionByThreadId ( long threadId ) { for ( PortTcp listener : getPorts ( ) ) { ConnectionTcp conn = listener . findConnectionByThreadId ( threadId ) ; if ( conn != null ) return conn ; } return null ; }
53140	public UniformDistribution estimate ( double min , double max , final int count ) { double grow = ( count > _NUM ) ? _NUM * ( max - min ) / ( count - _NUM ) : _NUM ; return new UniformDistribution ( Math . max ( min - grow , - Double . MAX_VALUE ) , Math . min ( max + grow , Double . MAX_VALUE ) ) ; }
56414	public static RepositoryMetaData readFrom ( StreamInput in ) throws IOException { String name = in . readString ( ) ; String type = in . readString ( ) ; Settings settings = Settings . readSettingsFromStream ( in ) ; return new RepositoryMetaData ( name , type , settings ) ; }
43840	public static boolean isPrimitiveDatatype ( IRI datatype ) { return datatype . equals ( XMLSchema . DURATION ) || datatype . equals ( XMLSchema . DATETIME ) || datatype . equals ( XMLSchema . TIME ) || datatype . equals ( XMLSchema . DATE ) || datatype . equals ( XMLSchema . GYEARMONTH ) || datatype . equals ( XMLSchema . GYEAR ) || datatype . equals ( XMLSchema . GMONTHDAY ) || datatype . equals ( XMLSchema . GDAY ) || datatype . equals ( XMLSchema . GMONTH ) || datatype . equals ( XMLSchema . STRING ) || datatype . equals ( XMLSchema . BOOLEAN ) || datatype . equals ( XMLSchema . BASE64BINARY ) || datatype . equals ( XMLSchema . HEXBINARY ) || datatype . equals ( XMLSchema . FLOAT ) || datatype . equals ( XMLSchema . DECIMAL ) || datatype . equals ( XMLSchema . DOUBLE ) || datatype . equals ( XMLSchema . ANYURI ) || datatype . equals ( XMLSchema . QNAME ) || datatype . equals ( XMLSchema . NOTATION ) ; }
73787	protected void appendLine ( JComponent c ) { c . setAlignmentX ( _NUM ) ; contents . add ( c ) ; }
25147	private void addLinks ( final SpannableString string , final long accountId , final long extraId , final int type , final boolean sensitive , final OnLinkClickListener listener , final int highlightOption ) { switch ( type ) { case LINK_TYPE_MENTION : { addMentionOrListLinks ( string , accountId , extraId , highlightOption , listener ) ; break ; } case LINK_TYPE_HASHTAG : { addHashtagLinks ( string , accountId , extraId , listener , highlightOption ) ; break ; } case LINK_TYPE_LINK : { final URLSpan [ ] spans = string . getSpans ( _NUM , string . length ( ) , URLSpan . class ) ; for ( final URLSpan span : spans ) { final int start = string . getSpanStart ( span ) ; final int end = string . getSpanEnd ( span ) ; if ( start < _NUM || end > string . length ( ) || start > end ) { continue ; } string . removeSpan ( span ) ; applyLink ( span . getURL ( ) , start , end , string , accountId , extraId , LINK_TYPE_LINK , sensitive , highlightOption , listener ) ; } final List < Extractor . Entity > urls = mExtractor . extractURLsWithIndices ( ParseUtils . parseString ( string ) ) ; for ( final Extractor . Entity entity : urls ) { final int start = entity . getStart ( ) , end = entity . getEnd ( ) ; if ( entity . getType ( ) != Extractor . Entity . Type . URL || string . getSpans ( start , end , URLSpan . class ) . length > _NUM ) { continue ; } applyLink ( entity . getValue ( ) , start , end , string , accountId , extraId , LINK_TYPE_LINK , sensitive , highlightOption , listener ) ; } break ; } case LINK_TYPE_STATUS : { final URLSpan [ ] spans = string . getSpans ( _NUM , string . length ( ) , URLSpan . class ) ; for ( final URLSpan span : spans ) { final Matcher matcher = PATTERN_TWITTER_STATUS . matcher ( span . getURL ( ) ) ; if ( matcher . matches ( ) ) { final int start = string . getSpanStart ( span ) ; final int end = string . getSpanEnd ( span ) ; final String url = matcherGroup ( matcher , GROUP_ID_TWITTER_STATUS_STATUS_ID ) ; string . removeSpan ( span ) ; applyLink ( url , start , end , string , accountId , extraId , LINK_TYPE_STATUS , sensitive , highlightOption , listener ) ; } } break ; } case LINK_TYPE_CASHTAG : { addCashtagLinks ( string , accountId , extraId , listener , highlightOption ) ; break ; } default : { return ; } } }
5912	public void postProcess ( ) { if ( foreignColumnName != null ) { foreignAutoRefresh = _BOOL ; } if ( foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField . NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED ) { maxForeignAutoRefreshLevel = DatabaseField . DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL ; } }
18145	public boolean contains ( Node s ) { runTo ( - _NUM ) ; if ( null == m_map ) return _BOOL ; for ( int i = _NUM ; i < m_firstFree ; i ++ ) { Node node = m_map [ i ] ; if ( ( null != node ) && node . equals ( s ) ) return _BOOL ; } return _BOOL ; }
78255	private void persistNewTemp ( File fileCfg ) { if ( hsDeleteOnExit . size ( ) == _NUM ) { logDebug ( LogArea . CONFIG , _STR ) ; fileCfg . delete ( ) ; return ; } logDebug ( LogArea . CONFIG , _STR , hsDeleteOnExit . size ( ) , fileCfg . getAbsolutePath ( ) ) ; BufferedWriter writer = null ; try { writer = new BufferedWriter ( new FileWriter ( fileCfg ) ) ; for ( File file : hsDeleteOnExit ) { if ( ! file . delete ( ) ) { String f = file . getCanonicalPath ( ) ; writer . write ( f ) ; writer . newLine ( ) ; logWarn ( LogArea . JAR , _STR , f ) ; } } } catch ( IOException e ) { } finally { if ( writer != null ) { try { writer . close ( ) ; } catch ( IOException e ) { } } } }
78768	public static double clamp ( double value , double low , double high ) { return Math . min ( Math . max ( value , low ) , high ) ; }
78646	public void addWritten ( byte [ ] value ) { writeSetLock . lock ( ) ; writeSet . add ( new TimestampValuePair ( ets , value ) ) ; writeSetLock . unlock ( ) ; }
70116	public void load ( Entity unit ) throws IllegalArgumentException { if ( ! canLoad ( unit ) ) { throw new IllegalArgumentException ( _STR + unit . getShortName ( ) + _STR ) ; } currentSpace -= _NUM ; troops . addElement ( unit . getId ( ) ) ; }
17588	private void processWorkerExit ( Worker w , boolean completedAbruptly ) { if ( completedAbruptly ) decrementWorkerCount ( ) ; final ReentrantLock mainLock = this . mainLock ; mainLock . lock ( ) ; try { completedTaskCount += w . completedTasks ; workers . remove ( w ) ; } finally { mainLock . unlock ( ) ; } tryTerminate ( ) ; int c = ctl . get ( ) ; if ( runStateLessThan ( c , STOP ) ) { if ( ! completedAbruptly ) { int min = allowCoreThreadTimeOut ? _NUM : corePoolSize ; if ( min == _NUM && ! workQueue . isEmpty ( ) ) min = _NUM ; if ( workerCountOf ( c ) >= min ) return ; } addWorker ( null , _BOOL ) ; } }
47311	public void finish ( ) throws IOException { if ( ! def . finished ( ) ) { def . finish ( ) ; while ( ! def . finished ( ) ) { int len = def . deflate ( buf , _NUM , buf . length ) ; if ( def . finished ( ) && len <= buf . length - TRAILER_SIZE ) { writeTrailer ( buf , len ) ; len = len + TRAILER_SIZE ; out . write ( buf , _NUM , len ) ; return ; } if ( len > _NUM ) out . write ( buf , _NUM , len ) ; } byte [ ] trailer = new byte [ TRAILER_SIZE ] ; writeTrailer ( trailer , _NUM ) ; out . write ( trailer ) ; } }
3959	public boolean free ( T obj ) { AtomicInteger topRef = _top ; while ( _BOOL ) { final int top = topRef . get ( ) ; if ( _capacity <= top ) { return _BOOL ; } boolean isFree = _freeStack . compareAndSet ( top , null , obj ) ; topRef . compareAndSet ( top , top + _NUM ) ; if ( isFree ) { return _BOOL ; } } }
56227	public static boolean hasBinding ( Injector injector , Key < ? > key ) { Binding < ? > binding = getBinding ( injector , key ) ; return binding != null ; }
19890	private OpenReplicatorManagerMBean createInternalService ( String serviceName ) throws ReplicatorException { logger . info ( _STR + serviceName ) ; try { OpenReplicatorManager orm = new OpenReplicatorManager ( serviceName ) ; orm . setRmiHost ( managerRMIHost ) ; orm . setRmiPort ( managerRMIPort ) ; orm . setHostTimeZone ( hostTimeZone ) ; orm . setReplicatorTimeZone ( replicatorTimeZone ) ; orm . advertiseInternal ( ) ; orm . setSecurityInfo ( this . securityInfo ) ; return ( OpenReplicatorManagerMBean ) orm ; } catch ( Exception e ) { throw new ReplicatorException ( String . format ( _STR , serviceName ) , e ) ; } }
76936	public static CheckIndex . Status checkIndex ( Directory dir ) throws IOException { return checkIndex ( dir , _BOOL ) ; }
14696	static void policyChanged ( String serviceTypeName , PolicyEvent pe ) { if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + serviceTypeName ) ; } resourceNamesMap . remove ( serviceTypeName ) ; Cache resourceNamesCache = ( Cache ) resourceNamesMap . get ( serviceTypeName ) ; if ( ( resourceNamesCache == null ) || ( resourceNamesCache . isEmpty ( ) ) ) { return ; } try { DEBUG . error ( _STR ) ; ServiceTypeManager stm = ServiceTypeManager . getServiceTypeManager ( ) ; ServiceType serviceType = stm . getServiceType ( serviceTypeName ) ; Set resourceNamesToRemove = new HashSet ( ) ; synchronized ( resourceNamesCache ) { Enumeration resourceNames = resourceNamesCache . keys ( ) ; while ( resourceNames . hasMoreElements ( ) ) { String resourceName = ( String ) resourceNames . nextElement ( ) ; if ( resourceNamesToRemove . contains ( resourceName ) ) { continue ; } Set affectedResourceNames = pe . getResourceNames ( ) ; Iterator iter = affectedResourceNames . iterator ( ) ; while ( iter . hasNext ( ) ) { String affectedResourceName = ( String ) iter . next ( ) ; if ( serviceType . compare ( resourceName , affectedResourceName ) != ResourceMatch . NO_MATCH ) { resourceNamesToRemove . add ( resourceName ) ; } } } Iterator iter1 = resourceNamesToRemove . iterator ( ) ; while ( iter1 . hasNext ( ) ) { String resourceNameToRemove = ( String ) iter1 . next ( ) ; resourceNamesCache . remove ( resourceNameToRemove ) ; } } } catch ( SSOException e ) { DEBUG . error ( _STR , e ) ; } catch ( PolicyException pex ) { DEBUG . error ( _STR , pex ) ; } if ( DEBUG . messageEnabled ( ) ) { DEBUG . message ( _STR + serviceTypeName + _STR + resourceNamesMap . get ( serviceTypeName ) ) ; } }
54740	private void startHideAnimations ( ) { animationPlaying = _BOOL ; lightAnimationLayout ( ) ; if ( buttonType . equals ( ButtonType . CIRCLE ) ) { if ( hideOrderType . equals ( OrderType . DEFAULT ) ) { for ( int i = _NUM ; i < buttonNum ; i ++ ) { setHideAnimation ( dots [ i ] , circleButtons [ i ] , endLocations [ i ] , startLocations [ i ] , i ) ; } } else if ( hideOrderType . equals ( OrderType . REVERSE ) ) { for ( int i = _NUM ; i < buttonNum ; i ++ ) { setHideAnimation ( dots [ i ] , circleButtons [ i ] , endLocations [ i ] , startLocations [ i ] , buttonNum - i - _NUM ) ; } } else if ( hideOrderType . equals ( OrderType . RANDOM ) ) { Random random = new Random ( ) ; boolean [ ] used = new boolean [ buttonNum ] ; for ( int i = _NUM ; i < buttonNum ; i ++ ) used [ i ] = _BOOL ; int count = _NUM ; while ( _BOOL ) { int i = random . nextInt ( buttonNum ) ; if ( ! used [ i ] ) { used [ i ] = _BOOL ; setHideAnimation ( dots [ count ] , circleButtons [ count ] , endLocations [ count ] , startLocations [ count ] , i ) ; count ++ ; if ( count == buttonNum ) break ; } } } } else if ( buttonType . equals ( ButtonType . HAM ) ) { if ( hideOrderType . equals ( OrderType . DEFAULT ) ) { for ( int i = _NUM ; i < buttonNum ; i ++ ) { setHideAnimation ( bars [ i ] , hamButtons [ i ] , endLocations [ i ] , startLocations [ i ] , i ) ; } } else if ( hideOrderType . equals ( OrderType . REVERSE ) ) { for ( int i = _NUM ; i < buttonNum ; i ++ ) { setHideAnimation ( bars [ i ] , hamButtons [ i ] , endLocations [ i ] , startLocations [ i ] , buttonNum - i - _NUM ) ; } } else if ( hideOrderType . equals ( OrderType . RANDOM ) ) { Random random = new Random ( ) ; boolean [ ] used = new boolean [ buttonNum ] ; for ( int i = _NUM ; i < buttonNum ; i ++ ) used [ i ] = _BOOL ; int count = _NUM ; while ( _BOOL ) { int i = random . nextInt ( buttonNum ) ; if ( ! used [ i ] ) { used [ i ] = _BOOL ; setHideAnimation ( bars [ count ] , hamButtons [ count ] , endLocations [ count ] , startLocations [ count ] , i ) ; count ++ ; if ( count == buttonNum ) break ; } } } } }
64203	public TaggedOutputStream ( OutputStream proxy ) { super ( proxy ) ; }
16363	public List < MType > build ( ) { isClean = _BOOL ; if ( ! isMessagesListMutable && builders == null ) { return messages ; } boolean allMessagesInSync = _BOOL ; if ( ! isMessagesListMutable ) { for ( int i = _NUM ; i < messages . size ( ) ; i ++ ) { Message message = messages . get ( i ) ; SingleFieldBuilder < MType , BType , IType > builder = builders . get ( i ) ; if ( builder != null ) { if ( builder . build ( ) != message ) { allMessagesInSync = _BOOL ; break ; } } } if ( allMessagesInSync ) { return messages ; } } ensureMutableMessageList ( ) ; for ( int i = _NUM ; i < messages . size ( ) ; i ++ ) { messages . set ( i , getMessage ( i , _BOOL ) ) ; } messages = Collections . unmodifiableList ( messages ) ; isMessagesListMutable = _BOOL ; return messages ; }
32032	public static void putShort ( long addr , short val ) { if ( UNALIGNED ) UNSAFE . putShort ( addr , val ) ; else putShortByByte ( addr , val , BIG_ENDIAN ) ; }
40226	public static byte [ ] hashTwice ( byte [ ] input , int offset , int length ) { MessageDigest digest = newDigest ( ) ; digest . update ( input , offset , length ) ; return digest . digest ( digest . digest ( ) ) ; }
12649	public PronounceableFSM ( URL url , boolean scanFromFront ) throws IOException { this . scanFromFront = scanFromFront ; InputStream is = Utilities . getInputStream ( url ) ; loadText ( is ) ; is . close ( ) ; }
74862	private char [ ] applyFloatPadding ( final char [ ] ca4 , final boolean noDigits ) { char [ ] ca5 = ca4 ; if ( fieldWidthSet ) { int i ; int j ; final int nBlanks ; if ( leftJustify ) { nBlanks = fieldWidth - ca4 . length ; if ( nBlanks > _NUM ) { ca5 = new char [ ca4 . length + nBlanks ] ; for ( i = _NUM ; i < ca4 . length ; i ++ ) { ca5 [ i ] = ca4 [ i ] ; } for ( j = _NUM ; j < nBlanks ; j ++ , i ++ ) { ca5 [ i ] = _STR ; } } } else if ( ! leadingZeros || noDigits ) { nBlanks = fieldWidth - ca4 . length ; if ( nBlanks > _NUM ) { ca5 = new char [ ca4 . length + nBlanks ] ; for ( i = _NUM ; i < nBlanks ; i ++ ) { ca5 [ i ] = _STR ; } for ( j = _NUM ; j < ca4 . length ; i ++ , j ++ ) { ca5 [ i ] = ca4 [ j ] ; } } } else if ( leadingZeros ) { nBlanks = fieldWidth - ca4 . length ; if ( nBlanks > _NUM ) { ca5 = new char [ ca4 . length + nBlanks ] ; i = _NUM ; j = _NUM ; if ( ca4 [ _NUM ] == _STR ) { ca5 [ _NUM ] = _STR ; i ++ ; j ++ ; } for ( int k = _NUM ; k < nBlanks ; i ++ , k ++ ) { ca5 [ i ] = _STR ; } for ( ; j < ca4 . length ; i ++ , j ++ ) { ca5 [ i ] = ca4 [ j ] ; } } } } return ca5 ; }
18221	public Object put ( String key , Object value ) { final int len = key . length ( ) ; if ( len > m_charBuffer . length ) { m_charBuffer = new char [ len ] ; } Node node = m_Root ; for ( int i = _NUM ; i < len ; i ++ ) { Node nextNode = node . m_nextChar [ Character . toLowerCase ( key . charAt ( i ) ) ] ; if ( nextNode != null ) { node = nextNode ; } else { for ( ; i < len ; i ++ ) { Node newNode = new Node ( ) ; if ( m_lowerCaseOnly ) { node . m_nextChar [ Character . toLowerCase ( key . charAt ( i ) ) ] = newNode ; } else { node . m_nextChar [ Character . toUpperCase ( key . charAt ( i ) ) ] = newNode ; node . m_nextChar [ Character . toLowerCase ( key . charAt ( i ) ) ] = newNode ; } node = newNode ; } break ; } } Object ret = node . m_Value ; node . m_Value = value ; return ret ; }
14168	@ Override public void makeImmutable ( ) { if ( isMutable ) { if ( authnStatements != null ) { int length = authnStatements . size ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { AuthnStatement authn = ( AuthnStatement ) authnStatements . get ( i ) ; authn . makeImmutable ( ) ; } authnStatements = Collections . unmodifiableList ( authnStatements ) ; } if ( authzDecisionStatements != null ) { int length = authzDecisionStatements . size ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { AuthzDecisionStatement authz = ( AuthzDecisionStatement ) authzDecisionStatements . get ( i ) ; authz . makeImmutable ( ) ; } authzDecisionStatements = Collections . unmodifiableList ( authzDecisionStatements ) ; } if ( attributeStatements != null ) { int length = attributeStatements . size ( ) ; for ( int i = _NUM ; i < length ; i ++ ) { AttributeStatement attr = ( AttributeStatement ) attributeStatements . get ( i ) ; attr . makeImmutable ( ) ; } attributeStatements = Collections . unmodifiableList ( attributeStatements ) ; } if ( statements != null ) { statements = Collections . unmodifiableList ( statements ) ; } if ( conditions != null ) { conditions . makeImmutable ( ) ; } if ( issuer != null ) { issuer . makeImmutable ( ) ; } if ( subject != null ) { subject . makeImmutable ( ) ; } if ( advice != null ) { advice . makeImmutable ( ) ; } isMutable = _BOOL ; } }
3995	@ Override public String findLibrary ( String name ) { String systemName = System . mapLibraryName ( name ) ; ArrayList < Loader > loaders = getLoaders ( ) ; for ( int i = _NUM ; i < loaders . size ( ) ; i ++ ) { Loader loader = loaders . get ( i ) ; Path path = loader . getPath ( systemName ) ; if ( path != null && path . canRead ( ) ) { return path . getNativePath ( ) ; } path = loader . getPath ( _STR + systemName ) ; if ( path != null && path . canRead ( ) ) { return path . getNativePath ( ) ; } } for ( int i = _NUM ; i < _nativePath . size ( ) ; i ++ ) { Path path = _nativePath . get ( i ) ; if ( path . canRead ( ) ) return path . getNativePath ( ) ; } return super . findLibrary ( name ) ; }
73521	public void removeComponentListener ( final ComponentUpdateListener listener ) { componentListeners . remove ( listener ) ; }
78278	public static _Fields findByThriftId ( int fieldId ) { switch ( fieldId ) { case _NUM : return APPKEY ; case _NUM : return SEND_TIME ; case _NUM : return LOAD_INFO ; case _NUM : return STATUS ; default : return null ; } }
25982	public static boolean isEmpty ( CharSequence text ) { return text == null || text . length ( ) == _NUM ; }
27940	protected byte [ ] assertEncodeDecode ( final IGangliaMetadataMessage decl , final IGangliaMessage expected ) { if ( expected == null ) throw new IllegalArgumentException ( ) ; final XDROutputBuffer xdr = new XDROutputBuffer ( IGangliaDefaults . BUFFER_SIZE ) ; final GangliaMessageEncoder31 messageEncoder = new GangliaMessageEncoder31 ( ) ; final GangliaMessageDecoder31 messageDecoder = new GangliaMessageDecoder31 ( ) ; if ( expected . isMetricRequest ( ) ) { messageEncoder . writeRequest ( xdr , ( IGangliaRequestMessage ) expected ) ; } else if ( expected . isMetricMetadata ( ) ) { messageEncoder . writeMetadata ( xdr , ( IGangliaMetadataMessage ) expected ) ; } else if ( expected . isMetricValue ( ) ) { if ( decl == null ) throw new IllegalArgumentException ( _STR ) ; messageEncoder . writeMetric ( xdr , decl , ( IGangliaMetricMessage ) expected ) ; } else { throw new AssertionError ( ) ; } final IGangliaMessage actual = messageDecoder . decode ( xdr . getBuffer ( ) , _NUM , xdr . getLength ( ) ) ; assertEquals ( _STR , expected , actual ) ; final byte [ ] actualData = new byte [ xdr . getLength ( ) ] ; System . arraycopy ( xdr . getBuffer ( ) , _NUM , actualData , _NUM , actualData . length ) ; return actualData ; }
76756	private boolean isIndexable ( String term ) { return ( term . length ( ) < _NUM ) && ( term . length ( ) > _NUM ) ; }
55155	private void sendResponse ( String status , String mime , Properties header , InputStream data ) { try { if ( status == null ) throw new Error ( _STR ) ; OutputStream out = mySocket . getOutputStream ( ) ; PrintWriter pw = new PrintWriter ( out ) ; pw . print ( _STR + status + _STR ) ; if ( mime != null ) pw . print ( _STR + mime + _STR ) ; if ( header == null || header . getProperty ( _STR ) == null ) pw . print ( _STR + gmtFrmt . format ( new Date ( ) ) + _STR ) ; if ( header != null ) { Enumeration e = header . keys ( ) ; while ( e . hasMoreElements ( ) ) { String key = ( String ) e . nextElement ( ) ; String value = header . getProperty ( key ) ; pw . print ( key + _STR + value + _STR ) ; } } pw . print ( _STR ) ; pw . flush ( ) ; if ( data != null ) { byte [ ] buff = new byte [ _NUM ] ; while ( _BOOL ) { int read = data . read ( buff , _NUM , _NUM ) ; if ( read <= _NUM ) break ; out . write ( buff , _NUM , read ) ; } } out . flush ( ) ; out . close ( ) ; if ( data != null ) data . close ( ) ; } catch ( IOException ioe ) { try { mySocket . close ( ) ; } catch ( Throwable t ) { } } }
15309	public static String decode ( String encoded , AMEncryption encr ) { if ( checkCaller ( ) ) { try { ISSecurityPermission isp = new ISSecurityPermission ( _STR , _STR ) ; if ( securityManager != null ) { securityManager . checkPermission ( isp ) ; } } catch ( SecurityException e ) { Debug debug = Debug . getInstance ( _STR ) ; debug . error ( _STR + _STR , e ) ; return null ; } } if ( encoded == null || encoded . length ( ) == _NUM ) { return ( null ) ; } byte [ ] encData = null ; encData = Base64 . decode ( encoded . trim ( ) ) ; if ( encData == null ) { return null ; } byte [ ] rawData = encr . decrypt ( encData ) ; if ( rawData == null ) { return ( null ) ; } String answer = null ; try { answer = new String ( rawData , _STR ) ; } catch ( UnsupportedEncodingException uue ) { Debug debug = Debug . getInstance ( _STR ) ; debug . error ( _STR , uue ) ; answer = new String ( rawData ) ; } return ( answer ) ; }
75232	protected void waitForShutdownSignal ( ) throws InterruptedException { if ( mutexWaiting == null ) mutexWaiting = new Object ( ) ; try { synchronized ( mutexWaiting ) { mutexWaiting . wait ( ) ; } } catch ( InterruptedException e ) { if ( ! shutdown ) throw e ; } }
25005	public void addConnection ( Connection connection ) { if ( connection == null ) throw new IllegalArgumentException ( _STR ) ; synchronized ( connectionsLock ) { Connection [ ] newConnections = new Connection [ connections . length + _NUM ] ; newConnections [ _NUM ] = connection ; System . arraycopy ( connections , _NUM , newConnections , _NUM , connections . length ) ; connections = newConnections ; } connection . addListener ( invokeListener ) ; if ( TRACE ) trace ( _STR , _STR + connection ) ; }
53514	public double distance ( Point2D pt ) { final double x_distance = ( pt . getX ( ) - x ) * ( pt . getX ( ) - x ) ; final double y_distance = ( pt . getY ( ) - y ) * ( pt . getY ( ) - y ) ; return Math . sqrt ( x_distance + y_distance ) ; }
22282	private void writeAttribute ( java . lang . String namespace , java . lang . String attName , java . lang . String attValue , javax . xml . stream . XMLStreamWriter xmlWriter ) throws javax . xml . stream . XMLStreamException { if ( namespace . equals ( _STR ) ) { xmlWriter . writeAttribute ( attName , attValue ) ; } else { registerPrefix ( xmlWriter , namespace ) ; xmlWriter . writeAttribute ( namespace , attName , attValue ) ; } }
62712	private static int convertToInt ( String value , int defaultValue ) { String trim = value . trim ( ) ; if ( trim . length ( ) == _NUM ) { return defaultValue ; } return Integer . parseInt ( trim ) ; }
60159	public ChainIterable < T > addItem ( @ NotNull T item ) { return ( ChainIterable < T > ) super . add ( Collections . < T > singleton ( item ) ) ; }
53670	private void updateStateView ( int itCount , Collection < Individual < Double > > gen ) { Platform . runLater ( null ) ; simPaneCtrl . waitAfterStep ( ) ; }
49124	@ Override public void run ( ) { try { for ( ; ; ) { int n = portGetn ( port , bufferAddress , MAX_EVENT_COUNT ) ; assert n > _NUM ; long address = bufferAddress ; for ( int i = _NUM ; i < n ; i ++ ) { boolean shutdown = processEvent ( address ) ; if ( shutdown ) return ; address += SIZEOF_PORT_EVENT ; } } } catch ( UnixException x ) { x . printStackTrace ( ) ; } }
55942	@ Override public List < String > allKeys ( ) { List < String > nameFiles = new ArrayList < > ( ) ; File [ ] files = cacheDirectory . listFiles ( ) ; if ( files == null ) return nameFiles ; for ( File file : files ) { if ( file . isFile ( ) ) { nameFiles . add ( file . getName ( ) ) ; } } return nameFiles ; }
61996	public DialogueRecorder ( DialogueSystem system ) { this . settings = system . getSettings ( ) ; }
79870	private String generateUniqueFutureId ( ) { return String . valueOf ( mIdCounter . getAndIncrement ( ) ) ; }
40785	private static final void rescheduleMissedAlarms ( ContentResolver cr , Context context , AlarmManagerInterface manager ) { long now = System . currentTimeMillis ( ) ; long ancient = now - DateUtils . DAY_IN_MILLIS ; String [ ] projection = new String [ ] { CalendarContract . CalendarAlerts . ALARM_TIME } ; if ( Build . VERSION . SDK_INT >= _NUM && ContextCompat . checkSelfPermission ( context , Manifest . permission . READ_CALENDAR ) != PackageManager . PERMISSION_GRANTED ) { Log . d ( TAG , _STR ) ; return ; } Cursor cursor = cr . query ( CalendarAlerts . CONTENT_URI , projection , WHERE_RESCHEDULE_MISSED_ALARMS , ( new String [ ] { Long . toString ( now ) , Long . toString ( ancient ) , Long . toString ( now ) } ) , SORT_ORDER_ALARMTIME_ASC ) ; if ( cursor == null ) { return ; } if ( DEBUG ) { Log . d ( TAG , _STR + cursor . getCount ( ) ) ; } try { long alarmTime = - _NUM ; while ( cursor . moveToNext ( ) ) { long newAlarmTime = cursor . getLong ( _NUM ) ; if ( alarmTime != newAlarmTime ) { if ( DEBUG ) { Log . w ( TAG , _STR + newAlarmTime ) ; } AlertUtils . scheduleAlarm ( context , manager , newAlarmTime ) ; alarmTime = newAlarmTime ; } } } finally { cursor . close ( ) ; } }
568	public void addName ( String name ) { m_names . add ( name ) ; }
56598	@ Override default CompletableFuture < OptionalDouble > minDouble ( final ToDoubleFunction < ? super T > fn ) { return CompletableFuture . supplyAsync ( null , getExec ( ) ) ; }
3948	private boolean toState ( LifecycleState newState ) { LifecycleState state ; synchronized ( this ) { state = _state ; _state = newState ; _lastChangeTime = CurrentTime . currentTime ( ) ; } if ( _log != null && _log . isLoggable ( _lowLevel ) ) { _log . log ( _lowLevel , newState + _STR + _name ) ; } notifyListeners ( state , newState ) ; return _BOOL ; }
65890	public boolean initDialog ( ) { log . config ( _STR ) ; gbc . anchor = GridBagConstraints . NORTHWEST ; gbc . weightx = _NUM ; gbc . weighty = _NUM ; gbc . gridy = m_line ++ ; gbc . gridx = _NUM ; gbc . gridwidth = _NUM ; gbc . insets = nullInset ; gbc . fill = GridBagConstraints . HORIZONTAL ; centerPanel . add ( Box . createVerticalStrut ( _NUM ) , gbc ) ; MClient client = MClient . get ( Env . getCtx ( ) ) ; String ASPFilter = _STR ; if ( client . isUseASP ( ) ) ASPFilter = _STR + _STR + _STR + _STR + _STR + client . getAD_Client_ID ( ) + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + client . getAD_Client_ID ( ) + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + client . getAD_Client_ID ( ) + _STR + _STR + _STR + _STR + _STR ; String sql = null ; if ( Env . isBaseLanguage ( Env . getCtx ( ) , _STR ) ) sql = _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + ASPFilter + _STR ; else sql = _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + Env . getAD_Language ( Env . getCtx ( ) ) + _STR + _STR + ASPFilter + _STR ; boolean hasFields = _BOOL ; try { PreparedStatement pstmt = DB . prepareStatement ( sql , null ) ; pstmt . setInt ( _NUM , m_processInfo . getAD_Process_ID ( ) ) ; ResultSet rs = pstmt . executeQuery ( ) ; while ( rs . next ( ) ) { hasFields = _BOOL ; createField ( rs ) ; } rs . close ( ) ; pstmt . close ( ) ; } catch ( SQLException e ) { log . log ( Level . SEVERE , sql , e ) ; } if ( m_mFields . size ( ) != m_mFields2 . size ( ) || m_mFields . size ( ) != m_vEditors . size ( ) || m_mFields2 . size ( ) != m_vEditors2 . size ( ) ) log . log ( Level . SEVERE , _STR ) ; if ( hasFields ) { gbc . gridy = m_line ++ ; centerPanel . add ( Box . createVerticalStrut ( _NUM ) , gbc ) ; gbc . gridx = _NUM ; centerPanel . add ( Box . createHorizontalStrut ( _NUM ) , gbc ) ; AEnv . positionCenterWindow ( m_frame , this ) ; } else dispose ( ) ; return hasFields ; }
13184	@ Override protected String dateToString ( DateTimeData date ) { StringBuffer message = new StringBuffer ( _NUM ) ; message . append ( _STR ) ; message . append ( _STR ) ; append ( message , date . month , _NUM ) ; append ( message , ( char ) date . utc , _NUM ) ; return message . toString ( ) ; }
38937	private void addTest ( Test newTest ) { if ( m_RuleList == null ) { m_RuleList = new ArrayList < Test > ( ) ; } m_RuleList . add ( newTest ) ; }
27987	public double nextDouble ( double alpha , double lambda ) { double a = alpha ; double aa = - _NUM , aaa = - _NUM , b = _NUM , c = _NUM , d = _NUM , e , r , s = _NUM , si = _NUM , ss = _NUM , q0 = _NUM , q1 = _NUM , q2 = _NUM , q3 = _NUM , q4 = _NUM , q5 = - _NUM , q6 = _NUM , q7 = _NUM , q8 = - _NUM , q9 = _NUM , a1 = _NUM , a2 = - _NUM , a3 = _NUM , a4 = - _NUM , a5 = _NUM , a6 = - _NUM , a7 = _NUM , a8 = - _NUM , a9 = _NUM , e1 = _NUM , e2 = _NUM , e3 = _NUM , e4 = _NUM , e5 = _NUM , e6 = _NUM , e7 = _NUM ; double gds , p , q , t , sign_u , u , v , w , x ; double v1 , v2 , v12 ; if ( a <= _NUM ) throw new IllegalArgumentException ( ) ; if ( lambda <= _NUM ) new IllegalArgumentException ( ) ; if ( a < _NUM ) { b = _NUM + _NUM * a ; for ( ; ; ) { p = b * randomGenerator . raw ( ) ; if ( p <= _NUM ) { gds = Math . exp ( Math . log ( p ) / a ) ; if ( Math . log ( randomGenerator . raw ( ) ) <= - gds ) return ( gds / lambda ) ; } else { gds = - Math . log ( ( b - p ) / a ) ; if ( Math . log ( randomGenerator . raw ( ) ) <= ( ( a - _NUM ) * Math . log ( gds ) ) ) return ( gds / lambda ) ; } } } else { if ( a != aa ) { aa = a ; ss = a - _NUM ; s = Math . sqrt ( ss ) ; d = _NUM - _NUM * s ; } do { v1 = _NUM * randomGenerator . raw ( ) - _NUM ; v2 = _NUM * randomGenerator . raw ( ) - _NUM ; v12 = v1 * v1 + v2 * v2 ; } while ( v12 > _NUM ) ; t = v1 * Math . sqrt ( - _NUM * Math . log ( v12 ) / v12 ) ; x = s + _NUM * t ; gds = x * x ; if ( t >= _NUM ) return ( gds / lambda ) ; u = randomGenerator . raw ( ) ; if ( d * u <= t * t * t ) return ( gds / lambda ) ; if ( a != aaa ) { aaa = a ; r = _NUM / a ; q0 = ( ( ( ( ( ( ( ( q9 * r + q8 ) * r + q7 ) * r + q6 ) * r + q5 ) * r + q4 ) * r + q3 ) * r + q2 ) * r + q1 ) * r ; if ( a > _NUM ) { if ( a > _NUM ) { b = _NUM ; si = _NUM ; c = _NUM / s ; } else { b = _NUM + _NUM * ss ; si = _NUM / s + _NUM ; c = _NUM / s + _NUM ; } } else { b = _NUM + s - _NUM * ss ; si = _NUM ; c = _NUM / s - _NUM + _NUM * s ; } } if ( x > _NUM ) { v = t / ( s + s ) ; if ( Math . abs ( v ) > _NUM ) { q = q0 - s * t + _NUM * t * t + ( ss + ss ) * Math . log ( _NUM + v ) ; } else { q = q0 + _NUM * t * t * ( ( ( ( ( ( ( ( a9 * v + a8 ) * v + a7 ) * v + a6 ) * v + a5 ) * v + a4 ) * v + a3 ) * v + a2 ) * v + a1 ) * v ; } if ( Math . log ( _NUM - u ) <= q ) return ( gds / lambda ) ; } for ( ; ; ) { do { e = - Math . log ( randomGenerator . raw ( ) ) ; u = randomGenerator . raw ( ) ; u = u + u - _NUM ; sign_u = ( u > _NUM ) ? _NUM : - _NUM ; t = b + ( e * si ) * sign_u ; } while ( t <= - _NUM ) ; v = t / ( s + s ) ; if ( Math . abs ( v ) > _NUM ) { q = q0 - s * t + _NUM * t * t + ( ss + ss ) * Math . log ( _NUM + v ) ; } else { q = q0 + _NUM * t * t * ( ( ( ( ( ( ( ( a9 * v + a8 ) * v + a7 ) * v + a6 ) * v + a5 ) * v + a4 ) * v + a3 ) * v + a2 ) * v + a1 ) * v ; } if ( q <= _NUM ) continue ; if ( q > _NUM ) { w = Math . exp ( q ) - _NUM ; } else { w = ( ( ( ( ( ( e7 * q + e6 ) * q + e5 ) * q + e4 ) * q + e3 ) * q + e2 ) * q + e1 ) * q ; } if ( c * u * sign_u <= w * Math . exp ( e - _NUM * t * t ) ) { x = s + _NUM * t ; return ( x * x / lambda ) ; } } } }
83574	public void swap ( int i , int j ) { x . assertTrue ( i < list . size ( ) ) ; x . assertTrue ( j < list . size ( ) ) ; list . set ( i , list . set ( j , list . get ( i ) ) ) ; }
10356	private List < NameValuePair > buildIPTParameters ( Ipt ipt , String organisationKey ) { List < NameValuePair > data = new ArrayList < NameValuePair > ( ) ; if ( ipt != null && organisationKey != null ) { data . add ( new BasicNameValuePair ( _STR , StringUtils . trimToEmpty ( organisationKey ) ) ) ; data . add ( new BasicNameValuePair ( _STR , StringUtils . trimToEmpty ( ipt . getName ( ) ) ) ) ; data . add ( new BasicNameValuePair ( _STR , StringUtils . trimToEmpty ( ipt . getDescription ( ) ) ) ) ; data . add ( new BasicNameValuePair ( _STR , StringUtils . trimToEmpty ( ipt . getPrimaryContactType ( ) ) ) ) ; data . add ( new BasicNameValuePair ( _STR , StringUtils . trimToEmpty ( ipt . getPrimaryContactName ( ) ) ) ) ; data . add ( new BasicNameValuePair ( _STR , StringUtils . trimToEmpty ( ipt . getPrimaryContactEmail ( ) ) ) ) ; data . add ( new BasicNameValuePair ( _STR , SERVICE_TYPE_RSS ) ) ; data . add ( new BasicNameValuePair ( _STR , getRssFeedURL ( ) ) ) ; } else { log . debug ( _STR ) ; } return data ; }
8181	public static < T , U extends Closeable > T withCloseable ( U self , @ ClosureParams ( value = FirstParam . class ) Closure < T > action ) throws IOException { try { T result = action . call ( self ) ; Closeable temp = self ; self = null ; temp . close ( ) ; return result ; } finally { DefaultGroovyMethodsSupport . closeWithWarning ( self ) ; } }
14615	public static boolean isMatch ( String actualString , LinkedList patterns , char wildCard ) { boolean matched = _BOOL ; for ( ListIterator iter = patterns . listIterator ( _NUM ) ; iter . hasNext ( ) ; ) { if ( isMatch ( actualString , ( String ) iter . next ( ) , wildCard ) ) { matched = _BOOL ; break ; } } return matched ; }
24064	public synchronized void addServer ( ServerLocation location , String [ ] groups , ServerLoad initialLoad , long loadPollInterval ) { serverGroupMap . put ( location , groups ) ; LoadHolder connectionLoad = new LoadHolder ( location , initialLoad . getConnectionLoad ( ) , initialLoad . getLoadPerConnection ( ) , loadPollInterval ) ; addGroups ( connectionLoadMap , groups , connectionLoad ) ; LoadHolder queueLoad = new LoadHolder ( location , initialLoad . getSubscriptionConnectionLoad ( ) , initialLoad . getLoadPerSubscriptionConnection ( ) , loadPollInterval ) ; addGroups ( queueLoadMap , groups , queueLoad ) ; updateLoad ( location , initialLoad ) ; }
74213	public void addLeaf ( CatalogTreeLeaf leaf ) { _leaves . add ( leaf ) ; }
52379	private static String stampToString ( long tstamp , String formatMask ) { StringBuilder sb = new StringBuilder ( _NUM ) ; Formatter fmt = new Formatter ( sb , Locale . US ) ; int [ ] pieces = new int [ NUMIDX ] ; ComponentTime . unpackBits ( tstamp , pieces ) ; fmt . format ( formatMask , pieces [ YIDX ] , pieces [ MIDX ] , pieces [ DIDX ] , pieces [ HIDX ] , pieces [ IIDX ] , pieces [ SIDX ] , pieces [ UIDX ] ) ; fmt . close ( ) ; return ( sb . toString ( ) ) ; }
6023	public HttpRequest contentLength ( final String value ) { return contentLength ( Integer . parseInt ( value ) ) ; }
85801	public boolean draw ( Canvas canvas ) { update ( ) ; final float centerX = mBounds . centerX ( ) ; final float centerY = mBounds . height ( ) - mRadius ; canvas . scale ( _NUM , Math . min ( mGlowScaleY , _NUM ) * mBaseGlowScale , centerX , _NUM ) ; final float displacement = Math . max ( _NUM , Math . min ( mDisplacement , _NUM ) ) - _NUM ; float translateX = mBounds . width ( ) * displacement / _NUM ; mPaint . setAlpha ( ( int ) ( _NUM * mGlowAlpha ) ) ; canvas . drawCircle ( centerX + translateX , centerY , mRadius , mPaint ) ; boolean oneLastFrame = _BOOL ; if ( mState == STATE_RECEDE && mGlowScaleY == _NUM ) { mState = STATE_IDLE ; oneLastFrame = _BOOL ; } return mState != STATE_IDLE || oneLastFrame ; }
22589	public VNXeCommandJob modifyLunAsync ( LunModifyParam param , String resourceId ) { StringBuilder urlBld = new StringBuilder ( URL_RESOURCE ) ; urlBld . append ( resourceId ) ; urlBld . append ( URL_LUN_MODIFY_ACTION ) ; _url = urlBld . toString ( ) ; return postRequestAsync ( param ) ; }
42240	public String replace ( CharSequence target , CharSequence replacement ) { if ( target == null ) { throw new NullPointerException ( _STR ) ; } if ( replacement == null ) { throw new NullPointerException ( _STR ) ; } String ts = target . toString ( ) ; int index = indexOf ( ts , _NUM ) ; if ( index == - _NUM ) return this ; String rs = replacement . toString ( ) ; StringBuilder buffer = new StringBuilder ( count ) ; int tl = target . length ( ) ; int tail = _NUM ; do { buffer . append ( value , offset + tail , index - tail ) ; buffer . append ( rs ) ; tail = index + tl ; } while ( ( index = indexOf ( ts , tail ) ) != - _NUM ) ; buffer . append ( value , offset + tail , count - tail ) ; return buffer . toString ( ) ; }
34066	public void delete ( ) throws IOException { close ( ) ; deleteContents ( directory ) ; }
44668	public boolean similarTo ( Object o ) { if ( o == null ) { return _BOOL ; } if ( ! ( o instanceof SemanticConcept ) ) { return _BOOL ; } SemanticConcept otherConcept = ( SemanticConcept ) o ; HashSet < Integer > synset_intersection = new HashSet < Integer > ( this . synsets ) ; synset_intersection . retainAll ( otherConcept . synsets ) ; if ( ! synset_intersection . isEmpty ( ) ) { return _BOOL ; } HashSet < String > concept_intersection = new HashSet < String > ( this . concepts ) ; concept_intersection . retainAll ( otherConcept . concepts ) ; return ! concept_intersection . isEmpty ( ) ; }
16632	public void jGoogleAnalyticsTracker ( final String eventType , final String version , final String trackerId ) { final JGoogleAnalyticsTracker tracker = new JGoogleAnalyticsTracker ( _STR , version , trackerId ) ; final FocusPoint focusPoint = new FocusPoint ( eventType . toLowerCase ( ) ) ; tracker . trackAsynchronously ( focusPoint ) ; }
63656	protected final Tuple addInternal ( Tuple t ) { if ( m_tuples . add ( t ) ) { return t ; } else { return null ; } }
25300	public void put ( Song song ) { if ( ! mSongs . contains ( song ) ) { mSongs . add ( song ) ; } }
60161	@ NotNull public PsiQuery childrenNamed ( @ NotNull final Class < ? extends PsiNamedElement > clazz , @ NotNull final String name ) { final List < PsiElement > result = new ArrayList < PsiElement > ( ) ; for ( final PsiElement element : myPsiElements ) { for ( final PsiNamedElement child : PsiTreeUtil . findChildrenOfType ( element , clazz ) ) { if ( name . equals ( child . getName ( ) ) ) { result . add ( child ) ; } } } return new PsiQuery ( result . toArray ( new PsiElement [ result . size ( ) ] ) ) ; }
12130	private void emitMapPut ( Method method , String fieldName , StringBuilder builder ) { builder . append ( _STR ) ; builder . append ( getMapPutterName ( fieldName ) ) ; builder . append ( _STR ) ; builder . append ( getTypeArgumentImplName ( ( ParameterizedType ) method . getGenericReturnType ( ) , _NUM ) ) ; builder . append ( _STR ) ; builder . append ( getEnsureName ( fieldName ) ) ; builder . append ( _STR ) ; builder . append ( fieldName ) ; builder . append ( _STR ) ; builder . append ( _STR ) ; }
62004	@ Override public boolean equals ( Object o ) { return o . hashCode ( ) == hashCode ( ) ; }
16803	@ Override public String toString ( ) { if ( getUserObject ( ) instanceof TvShow ) { TvShow tvShow = ( TvShow ) getUserObject ( ) ; return tvShow . getTitle ( ) ; } return super . toString ( ) ; }
50465	private ArrayList < String > parseJson ( String text ) { text = text . substring ( text . indexOf ( _STR ) + SIZE_OF_EVENTS , text . indexOf ( _STR ) ) ; ArrayList < String > events = new ArrayList < String > ( ) ; if ( text . isEmpty ( ) ) { return events ; } int startIndex = _NUM , endIndex = _NUM ; while ( endIndex != - _NUM ) { endIndex = text . indexOf ( _STR , startIndex + DELIMITER_SIZE ) ; String eventText = ( endIndex == - _NUM ? text . substring ( startIndex ) : text . substring ( startIndex , endIndex ) ) ; Pattern pattern = Pattern . compile ( _STR ) ; Matcher matcher = pattern . matcher ( eventText ) ; eventText = matcher . replaceAll ( _STR ) ; pattern = Pattern . compile ( _STR ) ; matcher = pattern . matcher ( eventText ) ; if ( matcher . find ( ) ) { eventText = matcher . replaceFirst ( matcher . group ( _NUM ) + _STR ) ; } eventText = _STR + eventText ; startIndex = endIndex + _NUM ; events . add ( eventText ) ; } Collections . reverse ( events ) ; return events ; }
75684	@ Override public void removeTableModelListener ( TableModelListener l ) { m_Listeners . remove ( l ) ; }
84111	public StrBuilder replace ( int startIndex , int endIndex , String replaceStr ) { endIndex = validateRange ( startIndex , endIndex ) ; int insertLen = ( replaceStr == null ? _NUM : replaceStr . length ( ) ) ; replaceImpl ( startIndex , endIndex , endIndex - startIndex , replaceStr , insertLen ) ; return this ; }
62228	public static void addPermissionRecursive ( Path path , PosixFilePermission permission ) throws IOException { changePermissionsRecursive ( path , PermissionChange . ADD , Collections . singleton ( permission ) ) ; }
3557	private void runTimeoutTask ( ) { while ( isActive ( ) ) { reapTimeouts ( ) ; try { Thread . sleep ( _timeoutReapInterval ) ; } catch ( Exception e ) { } } }
57005	public IDevice learnEntity ( long macAddress , Short vlan , Integer ipv4Address , Long switchDPID , Integer switchPort , boolean processUpdates ) { List < IDeviceListener > listeners = deviceListeners . getOrderedListeners ( ) ; if ( ! processUpdates ) { deviceListeners . clearListeners ( ) ; } VlanVid v ; IPv4Address i ; DatapathId d ; OFPort p ; if ( vlan != null && vlan . shortValue ( ) <= _NUM ) vlan = null ; if ( ipv4Address != null && ipv4Address == _NUM ) ipv4Address = null ; if ( vlan == null ) { v = VlanVid . ofVlan ( - _NUM ) ; } else { v = VlanVid . ofVlan ( vlan ) ; } if ( ipv4Address == null ) { i = IPv4Address . NONE ; } else { i = IPv4Address . of ( ipv4Address ) ; } if ( switchDPID == null ) { d = DatapathId . of ( _NUM ) ; } else { d = DatapathId . of ( switchDPID . longValue ( ) ) ; } if ( switchPort == null ) { p = OFPort . ZERO ; } else { p = OFPort . of ( switchPort ) ; } IDevice res = learnDeviceByEntity ( new Entity ( MacAddress . of ( macAddress ) , v , i , d , p , new Date ( ) ) ) ; if ( listeners != null ) { for ( IDeviceListener listener : listeners ) { deviceListeners . addListener ( _STR , listener ) ; } } return res ; }
81263	public static boolean isValidTypeSignature ( String sig , boolean allowVoid ) { int len = sig . length ( ) ; return checkTypeSignature ( sig , _NUM , len , allowVoid ) == len ; }
58547	public void testCase19 ( ) { byte aBytes [ ] = { - _NUM , _NUM , _NUM , _NUM , _NUM , - _NUM , _NUM , - _NUM , _NUM , _NUM } ; byte bBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM } ; int aSign = _NUM ; int bSign = - _NUM ; byte rBytes [ ] = { _NUM , - _NUM , _NUM , _NUM , _NUM } ; BigInteger aNumber = new BigInteger ( aSign , aBytes ) ; BigInteger bNumber = new BigInteger ( bSign , bBytes ) ; BigInteger result = aNumber . remainder ( bNumber ) ; byte resBytes [ ] = new byte [ rBytes . length ] ; resBytes = result . toByteArray ( ) ; for ( int i = _NUM ; i < resBytes . length ; i ++ ) { assertTrue ( resBytes [ i ] == rBytes [ i ] ) ; } assertEquals ( _STR , _NUM , result . signum ( ) ) ; }
33299	public static boolean hasVisibleChildren ( ActionGroup group , PresentationFactory factory , ActionManager actionManager , PerspectiveManager perspectiveManager ) { ActionEvent event = new ActionEvent ( factory . getPresentation ( group ) , actionManager , perspectiveManager ) ; for ( Action anAction : group . getChildren ( event ) ) { if ( anAction == null ) { Log . error ( Utils . class , _STR + group + _STR + factory . getPresentation ( group ) ) ; continue ; } if ( anAction instanceof Separator ) { continue ; } final Presentation presentation = factory . getPresentation ( anAction ) ; anAction . update ( new ActionEvent ( presentation , actionManager , perspectiveManager ) ) ; if ( anAction instanceof ActionGroup ) { ActionGroup childGroup = ( ActionGroup ) anAction ; if ( childGroup . isPopup ( ) ) { if ( ! presentation . isVisible ( ) ) { continue ; } } if ( hasVisibleChildren ( childGroup , factory , actionManager , perspectiveManager ) ) { return _BOOL ; } } else if ( presentation . isVisible ( ) ) { return _BOOL ; } } return _BOOL ; }
69271	private static void checkArgReferences ( String typeSnippet , int numberOfArgs ) { Matcher argRefMatcher = ARG_REF_PATTERN . matcher ( typeSnippet ) ; while ( argRefMatcher . find ( ) ) { int index = Integer . parseInt ( argRefMatcher . group ( _NUM ) , _NUM ) - _NUM ; Preconditions . checkArgument ( index >= _NUM , _STR , argRefMatcher . group ( _NUM ) ) ; Preconditions . checkArgument ( index < numberOfArgs , _STR , argRefMatcher . group ( _NUM ) ) ; } }
73254	public void randomize ( ) { randomizeIncomingWeights ( ) ; normalizeIncomingWeights ( ) ; }
1516	public static void saveAsImage ( int x , int y , int width , int height , String path , CompressFormat compressFormat , int quality ) throws FileNotFoundException { Bitmap bmp = getPixelsFromBuffer ( x , y , width , height ) ; try { File file = new File ( path ) ; try { file . createNewFile ( ) ; } catch ( IOException e1 ) { e1 . printStackTrace ( ) ; } FileOutputStream fos = new FileOutputStream ( file ) ; bmp . compress ( compressFormat , quality , fos ) ; try { fos . flush ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } try { fos . close ( ) ; } catch ( IOException e ) { e . printStackTrace ( ) ; } } catch ( FileNotFoundException e ) { throw ( e ) ; } }
22799	private boolean isFileValid ( File file , String methodName ) { if ( file == null ) { Log . printConcatLine ( name , _STR , methodName , _STR ) ; return _BOOL ; } String fileName = file . getName ( ) ; if ( fileName == null || fileName . length ( ) == _NUM ) { Log . printConcatLine ( name , _STR + methodName , _STR ) ; return _BOOL ; } return _BOOL ; }
66910	public void removeSrcClass ( SootClass clz ) { srcClasses . remove ( clz . getName ( ) ) ; }
16289	private void updateRange ( double value ) { mMinValue = Math . min ( mMinValue , value ) ; mMaxValue = Math . max ( mMaxValue , value ) ; }
17419	JSONStringer close ( Scope empty , Scope nonempty , String closeBracket ) throws JSONException { Scope context = peek ( ) ; if ( context != nonempty && context != empty ) { throw new JSONException ( _STR ) ; } stack . remove ( stack . size ( ) - _NUM ) ; if ( context == nonempty ) { newline ( ) ; } out . append ( closeBracket ) ; return this ; }
62699	public void append ( byte [ ] bytes ) { append ( bytes , _NUM , bytes . length ) ; }
84052	public static boolean enoughSpaceOnPhone ( long updateSize ) { return getRealSizeOnPhone ( ) > updateSize ; }
73711	public void cancelButtonActionPerformed ( ) { editMode = _BOOL ; curNode = null ; addButton . setVisible ( _BOOL ) ; editButton . setVisible ( _BOOL ) ; deleteButton . setVisible ( _BOOL ) ; doneButton . setVisible ( _BOOL ) ; updateButton . setVisible ( _BOOL ) ; cancelButton . setVisible ( _BOOL ) ; nodeAddrField . setVisible ( _BOOL ) ; nodeAddrStatic . setVisible ( _BOOL ) ; statusText1 . setText ( stdStatus1 ) ; statusText2 . setText ( stdStatus2 ) ; statusText3 . setText ( stdStatus3 ) ; }
57668	public void addAttribute ( AttributedCharacterIterator . Attribute attribute , Object value ) { if ( attribute == null ) { throw new NullPointerException ( _STR ) ; } if ( text . isEmpty ( ) ) { throw new IllegalArgumentException ( _STR ) ; } List < Range > ranges = attributeMap . get ( attribute ) ; if ( ranges == null ) { ranges = new ArrayList < Range > ( _NUM ) ; attributeMap . put ( attribute , ranges ) ; } else { ranges . clear ( ) ; } ranges . add ( new Range ( _NUM , text . length ( ) , value ) ) ; }
19795	private Object stringToValue ( Object oldValue , String newValue ) throws ReplicatorException { if ( oldValue instanceof String ) { return newValue ; } else if ( oldValue instanceof Integer ) { return Integer . valueOf ( newValue ) ; } else if ( oldValue instanceof SerialBlob ) { try { return DatabaseHelper . getSafeBlob ( newValue . getBytes ( ) ) ; } catch ( SQLException e ) { throw new ReplicatorException ( _STR + e , e ) ; } } else { return newValue ; } }
18120	public void addNodesInDocOrder ( DTMIterator iterator , XPathContext support ) { if ( ! m_mutable ) throw new RuntimeException ( XSLMessages . createXPATHMessage ( XPATHErrorResources . ER_NODESETDTM_NOT_MUTABLE , null ) ) ; int node ; while ( DTM . NULL != ( node = iterator . nextNode ( ) ) ) { addNodeInDocOrder ( node , support ) ; } }
52359	public String toZString ( ) { StringBuilder buffer = new StringBuilder ( _NUM ) ; try { printZ ( buffer ) ; } catch ( IOException e ) { throw new RuntimeException ( _STR , e ) ; } return buffer . toString ( ) ; }
59625	public TrieDictionary < T > build ( int baseId ) { byte [ ] trieBytes = buildTrieBytes ( baseId ) ; TrieDictionary < T > r = new TrieDictionary < T > ( trieBytes ) ; return r ; }
62074	public void recordState ( DialogueState state , String name ) { states . put ( name , state ) ; if ( ! listModel . contains ( name ) ) { int position = name . contains ( CURRENT ) ? _NUM : Math . min ( _NUM , listModel . size ( ) ) ; listModel . add ( position , name ) ; } }
52350	public int writeUTF8 ( final CharSequence chars , int off , int len ) { if ( len > remaining ( ) ) { return writeUTF8Slow ( chars , off , len ) ; } final Block block = current ; int limit = block . limit ; char ch = _STR ; int octets = _NUM ; while ( len > _NUM ) { ch = chars . charAt ( off ) ; if ( ch >= UTF8_2_OCTET_MIN_VALUE ) { break ; } block . data [ limit ++ ] = ( byte ) ch ; octets ++ ; off ++ ; len -- ; } block . limit = limit ; if ( len > _NUM ) { if ( ch < UTF8_3_OCTET_MIN_VALUE ) { return octets + writeUTF8UpTo2Byte ( chars , off , len ) ; } if ( ch >= LOW_SURROGATE_FIRST && ch <= LOW_SURROGATE_LAST ) { throw new IllegalArgumentException ( _STR + ch ) ; } if ( ch >= HIGH_SURROGATE_FIRST && ch <= HIGH_SURROGATE_LAST ) { return octets + writeUTF8Slow ( chars , off , len ) ; } return octets + writeUTF8UpTo3Byte ( chars , off , len ) ; } return octets ; }
20186	public GeoServerWPSClient ( GeoServerConnection connection ) { this . connection = connection ; }
57354	protected ConnectionStateSSLv3 ( SSLSessionImpl session ) { try { CipherSuite cipherSuite = session . cipherSuite ; boolean is_exportabe = cipherSuite . isExportable ( ) ; hash_size = cipherSuite . getMACLength ( ) ; int key_size = ( is_exportabe ) ? cipherSuite . keyMaterial : cipherSuite . expandedKeyMaterial ; int iv_size = cipherSuite . ivSize ; block_size = cipherSuite . getBlockSize ( ) ; String algName = cipherSuite . getBulkEncryptionAlgorithm ( ) ; String hashName = cipherSuite . getHashName ( ) ; if ( logger != null ) { logger . println ( _STR ) ; logger . println ( _STR + session . getCipherSuite ( ) ) ; logger . println ( _STR + algName ) ; logger . println ( _STR + hashName ) ; logger . println ( _STR + hash_size ) ; logger . println ( _STR + block_size ) ; logger . println ( _STR + iv_size ) ; logger . println ( _STR + key_size ) ; } byte [ ] clientRandom = session . clientRandom ; byte [ ] serverRandom = session . serverRandom ; byte [ ] key_block = new byte [ _NUM * hash_size + _NUM * key_size + _NUM * iv_size ] ; byte [ ] seed = new byte [ clientRandom . length + serverRandom . length ] ; System . arraycopy ( serverRandom , _NUM , seed , _NUM , serverRandom . length ) ; System . arraycopy ( clientRandom , _NUM , seed , serverRandom . length , clientRandom . length ) ; PRF . computePRF_SSLv3 ( key_block , session . master_secret , seed ) ; byte [ ] client_mac_secret = new byte [ hash_size ] ; byte [ ] server_mac_secret = new byte [ hash_size ] ; byte [ ] client_key = new byte [ key_size ] ; byte [ ] server_key = new byte [ key_size ] ; boolean is_client = ! session . isServer ; System . arraycopy ( key_block , _NUM , client_mac_secret , _NUM , hash_size ) ; System . arraycopy ( key_block , hash_size , server_mac_secret , _NUM , hash_size ) ; System . arraycopy ( key_block , _NUM * hash_size , client_key , _NUM , key_size ) ; System . arraycopy ( key_block , _NUM * hash_size + key_size , server_key , _NUM , key_size ) ; IvParameterSpec clientIV = null ; IvParameterSpec serverIV = null ; if ( is_exportabe ) { if ( logger != null ) { logger . println ( _STR ) ; } MessageDigest md5 = MessageDigest . getInstance ( _STR ) ; md5 . update ( client_key ) ; md5 . update ( clientRandom ) ; md5 . update ( serverRandom ) ; client_key = md5 . digest ( ) ; md5 . update ( server_key ) ; md5 . update ( serverRandom ) ; md5 . update ( clientRandom ) ; server_key = md5 . digest ( ) ; key_size = cipherSuite . expandedKeyMaterial ; if ( block_size != _NUM ) { md5 . update ( clientRandom ) ; md5 . update ( serverRandom ) ; clientIV = new IvParameterSpec ( md5 . digest ( ) , _NUM , iv_size ) ; md5 . update ( serverRandom ) ; md5 . update ( clientRandom ) ; serverIV = new IvParameterSpec ( md5 . digest ( ) , _NUM , iv_size ) ; } } else if ( block_size != _NUM ) { clientIV = new IvParameterSpec ( key_block , _NUM * hash_size + _NUM * key_size , iv_size ) ; serverIV = new IvParameterSpec ( key_block , _NUM * hash_size + _NUM * key_size + iv_size , iv_size ) ; } if ( logger != null ) { logger . println ( _STR + is_exportabe ) ; logger . println ( _STR ) ; logger . print ( session . master_secret ) ; logger . println ( _STR ) ; logger . print ( clientRandom ) ; logger . println ( _STR ) ; logger . print ( serverRandom ) ; logger . println ( _STR ) ; logger . print ( client_mac_secret ) ; logger . println ( _STR ) ; logger . print ( server_mac_secret ) ; logger . println ( _STR ) ; logger . print ( client_key , _NUM , key_size ) ; logger . println ( _STR ) ; logger . print ( server_key , _NUM , key_size ) ; if ( clientIV != null ) { logger . println ( _STR ) ; logger . print ( clientIV . getIV ( ) ) ; logger . println ( _STR ) ; logger . print ( serverIV . getIV ( ) ) ; } else { logger . println ( _STR ) ; } } if ( algName == null ) { encCipher = new NullCipher ( ) ; decCipher = new NullCipher ( ) ; } else { encCipher = Cipher . getInstance ( algName ) ; decCipher = Cipher . getInstance ( algName ) ; if ( is_client ) { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( client_key , _NUM , key_size , algName ) , clientIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( server_key , _NUM , key_size , algName ) , serverIV ) ; } else { encCipher . init ( Cipher . ENCRYPT_MODE , new SecretKeySpec ( server_key , _NUM , key_size , algName ) , serverIV ) ; decCipher . init ( Cipher . DECRYPT_MODE , new SecretKeySpec ( client_key , _NUM , key_size , algName ) , clientIV ) ; } } messageDigest = MessageDigest . getInstance ( hashName ) ; if ( is_client ) { mac_write_secret = client_mac_secret ; mac_read_secret = server_mac_secret ; } else { mac_write_secret = server_mac_secret ; mac_read_secret = client_mac_secret ; } if ( hashName . equals ( _STR ) ) { pad_1 = SSLv3Constants . MD5pad1 ; pad_2 = SSLv3Constants . MD5pad2 ; } else { pad_1 = SSLv3Constants . SHApad1 ; pad_2 = SSLv3Constants . SHApad2 ; } } catch ( Exception e ) { e . printStackTrace ( ) ; throw new AlertException ( AlertProtocol . INTERNAL_ERROR , new SSLProtocolException ( _STR ) ) ; } }
70738	static boolean verifyZipFile ( File file ) { try { ZipFile zipFile = new ZipFile ( file ) ; try { zipFile . close ( ) ; return _BOOL ; } catch ( IOException e ) { Log . w ( TAG , _STR + file . getAbsolutePath ( ) ) ; } } catch ( ZipException ex ) { Log . w ( TAG , _STR + file . getAbsolutePath ( ) + _STR , ex ) ; } catch ( IOException ex ) { Log . w ( TAG , _STR + file . getAbsolutePath ( ) , ex ) ; } return _BOOL ; }
45628	long cleanup ( long now ) { int inUseConnectionCount = _NUM ; int idleConnectionCount = _NUM ; RealConnection longestIdleConnection = null ; long longestIdleDurationNs = Long . MIN_VALUE ; synchronized ( this ) { for ( Iterator < RealConnection > i = connections . iterator ( ) ; i . hasNext ( ) ; ) { RealConnection connection = i . next ( ) ; if ( pruneAndGetAllocationCount ( connection , now ) > _NUM ) { inUseConnectionCount ++ ; continue ; } idleConnectionCount ++ ; long idleDurationNs = now - connection . idleAtNanos ; if ( idleDurationNs > longestIdleDurationNs ) { longestIdleDurationNs = idleDurationNs ; longestIdleConnection = connection ; } } if ( longestIdleDurationNs >= this . keepAliveDurationNs || idleConnectionCount > this . maxIdleConnections ) { connections . remove ( longestIdleConnection ) ; } else if ( idleConnectionCount > _NUM ) { return keepAliveDurationNs - longestIdleDurationNs ; } else if ( inUseConnectionCount > _NUM ) { return keepAliveDurationNs ; } else { cleanupRunning = _BOOL ; return - _NUM ; } } closeQuietly ( longestIdleConnection . socket ( ) ) ; return _NUM ; }
48430	public StateInfo ( ) { }
31363	public boolean compare ( Object expected , Object current ) { if ( current != null ) { equal = current . equals ( expected ) ; } else if ( expected != null ) { equal = expected . equals ( _NUM ) ; } return equal ; }
77743	private static byte [ ] generateSeed ( ) { try { ByteArrayOutputStream seedBuffer = new ByteArrayOutputStream ( ) ; DataOutputStream seedBufferOut = new DataOutputStream ( seedBuffer ) ; seedBufferOut . writeLong ( System . currentTimeMillis ( ) ) ; seedBufferOut . writeLong ( System . nanoTime ( ) ) ; seedBufferOut . writeInt ( Process . myPid ( ) ) ; seedBufferOut . writeInt ( Process . myUid ( ) ) ; seedBufferOut . write ( BUILD_FINGERPRINT_AND_DEVICE_SERIAL ) ; seedBufferOut . close ( ) ; return seedBuffer . toByteArray ( ) ; } catch ( IOException e ) { throw new SecurityException ( _STR , e ) ; } }
61217	boolean needToCheckExclude ( ) { return _BOOL ; }
1188	public static byte [ ] decode ( String hexa ) throws CoderException { if ( hexa == null ) { throw new CoderException ( _STR ) ; } if ( ( hexa . length ( ) % _NUM ) != _NUM ) { throw new CoderException ( _STR ) ; } int tamArray = hexa . length ( ) / _NUM ; byte [ ] retorno = new byte [ tamArray ] ; for ( int i = _NUM ; i < tamArray ; i ++ ) { retorno [ i ] = hexToByte ( hexa . substring ( i * _NUM , i * _NUM + _NUM ) ) ; } return retorno ; }
56800	private List < UserNamespaceAuthorization > createUserNamespaceAuthorizationsFromEntities ( List < UserNamespaceAuthorizationEntity > userNamespaceAuthorizationEntities ) { List < UserNamespaceAuthorization > userNamespaceAuthorizations = new ArrayList < > ( ) ; for ( UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity : userNamespaceAuthorizationEntities ) { userNamespaceAuthorizations . add ( createUserNamespaceAuthorizationFromEntity ( userNamespaceAuthorizationEntity ) ) ; } return userNamespaceAuthorizations ; }
78201	private void readHeader ( ) throws OpenStegoException { this . dataHeader = new DCTDataHeader ( this , this . config ) ; }
57740	@ Override public synchronized void reset ( ) { pos = _NUM ; }
57393	protected < T extends KeySpec > T engineGetKeySpec ( Key key , Class < T > keySpec ) throws InvalidKeySpecException { BigInteger p , q , g , x , y ; if ( key != null ) { if ( keySpec == null ) { throw new NullPointerException ( _STR ) ; } if ( key instanceof DSAPrivateKey ) { DSAPrivateKey privateKey = ( DSAPrivateKey ) key ; if ( keySpec . equals ( DSAPrivateKeySpec . class ) ) { x = privateKey . getX ( ) ; DSAParams params = privateKey . getParams ( ) ; p = params . getP ( ) ; q = params . getQ ( ) ; g = params . getG ( ) ; return ( T ) ( new DSAPrivateKeySpec ( x , p , q , g ) ) ; } if ( keySpec . equals ( PKCS8EncodedKeySpec . class ) ) { return ( T ) ( new PKCS8EncodedKeySpec ( key . getEncoded ( ) ) ) ; } throw new InvalidKeySpecException ( _STR ) ; } if ( key instanceof DSAPublicKey ) { DSAPublicKey publicKey = ( DSAPublicKey ) key ; if ( keySpec . equals ( DSAPublicKeySpec . class ) ) { y = publicKey . getY ( ) ; DSAParams params = publicKey . getParams ( ) ; p = params . getP ( ) ; q = params . getQ ( ) ; g = params . getG ( ) ; return ( T ) ( new DSAPublicKeySpec ( y , p , q , g ) ) ; } if ( keySpec . equals ( X509EncodedKeySpec . class ) ) { return ( T ) ( new X509EncodedKeySpec ( key . getEncoded ( ) ) ) ; } throw new InvalidKeySpecException ( _STR ) ; } } throw new InvalidKeySpecException ( _STR ) ; }
25745	protected void drawText ( String text1 , String text2 , int x , int y , Canvas c ) { if ( textPaint == null ) { Paint p = new Paint ( ) ; p . setTypeface ( RobotoLightTypeface . getInstance ( context ) ) ; p . setColor ( textColor ) ; p . setTextSize ( _NUM * pixelDensity ) ; this . textPaint = p ; } float w = textPaint . measureText ( text1 , _NUM , text1 . length ( ) ) ; int offset = ( int ) w / _NUM ; c . drawText ( text1 , x - offset , y + ( _NUM * pixelDensity ) , textPaint ) ; w = textPaint . measureText ( text2 , _NUM , text2 . length ( ) ) ; offset = ( int ) w / _NUM ; c . drawText ( text2 , x - offset , y + ( _NUM * pixelDensity ) , textPaint ) ; }
80743	public boolean isLessThenOrEqualTo ( Percent Percent ) { assertDefined ( ) ; BigDecimal thisValue = notNull ( this ) ; BigDecimal parameter = notNull ( Percent ) ; return ( thisValue . compareTo ( parameter ) <= _NUM ) ; }
58103	public Object clone ( ) throws CloneNotSupportedException { PredicatedNodeTest clone = ( PredicatedNodeTest ) super . clone ( ) ; if ( ( null != this . m_proximityPositions ) && ( this . m_proximityPositions == clone . m_proximityPositions ) ) { clone . m_proximityPositions = new int [ this . m_proximityPositions . length ] ; System . arraycopy ( this . m_proximityPositions , _NUM , clone . m_proximityPositions , _NUM , this . m_proximityPositions . length ) ; } if ( clone . m_lpi == this ) clone . m_lpi = ( LocPathIterator ) clone ; return clone ; }
48437	public static boolean pointOutsidePrefSize ( JTable table , int row , int column , Point p ) { if ( table . convertColumnIndexToModel ( column ) != _NUM || row == - _NUM ) { return _BOOL ; } TableCellRenderer tcr = table . getCellRenderer ( row , column ) ; Object value = table . getValueAt ( row , column ) ; Component cell = tcr . getTableCellRendererComponent ( table , value , _BOOL , _BOOL , row , column ) ; Dimension itemSize = cell . getPreferredSize ( ) ; Rectangle cellBounds = table . getCellRect ( row , column , _BOOL ) ; cellBounds . width = itemSize . width ; cellBounds . height = itemSize . height ; assert ( p . x >= cellBounds . x && p . y >= cellBounds . y ) ; return p . x > cellBounds . x + cellBounds . width || p . y > cellBounds . y + cellBounds . height ; }
85733	public Builder addSourceFolder ( @ NonNull File folder ) { foldersToScan . add ( folder ) ; return this ; }
21877	public Method suspendSRDFGroupMethod ( final URI systemURI , final RemoteDirectorGroup group , final List < URI > sourceVolumes , final List < URI > targetVolumes ) { return new Workflow . Method ( SUSPEND_SRDF_GROUP_METHOD , systemURI , group , sourceVolumes , targetVolumes ) ; }
40838	private void fieldGoalAtt ( Team offense , Team defense ) { double fgDistRatio = Math . pow ( ( _NUM - gameYardLine ) / _NUM , _NUM ) ; double fgAccRatio = Math . pow ( ( _NUM - gameYardLine ) / _NUM , _NUM ) ; double fgDistChance = ( getHFadv ( ) + offense . getK ( _NUM ) . ratKickPow - fgDistRatio * _NUM ) ; double fgAccChance = ( getHFadv ( ) + offense . getK ( _NUM ) . ratKickAcc - fgAccRatio * _NUM ) ; if ( fgDistChance > _NUM && fgAccChance * Math . random ( ) > _NUM ) { if ( gamePoss ) { homeScore += _NUM ; HomeKStats [ _NUM ] ++ ; HomeKStats [ _NUM ] ++ ; } else { awayScore += _NUM ; AwayKStats [ _NUM ] ++ ; AwayKStats [ _NUM ] ++ ; } gameEventLog += getEventPrefix ( ) + offense . abbr + _STR + offense . getK ( _NUM ) . name + _STR + ( _NUM - gameYardLine ) + _STR ; addPointsQuarter ( _NUM ) ; offense . getK ( _NUM ) . statsFGMade ++ ; offense . getK ( _NUM ) . statsFGAtt ++ ; if ( ! playingOT ) kickOff ( offense ) ; else resetForOT ( ) ; } else { gameEventLog += getEventPrefix ( ) + offense . abbr + _STR + offense . getK ( _NUM ) . name + _STR + ( _NUM - gameYardLine ) + _STR ; offense . getK ( _NUM ) . statsFGAtt ++ ; if ( ! playingOT ) { gameYardLine = Math . max ( _NUM - gameYardLine , _NUM ) ; gameDown = _NUM ; gameYardsNeed = _NUM ; if ( gamePoss ) { HomeKStats [ _NUM ] ++ ; } else { AwayKStats [ _NUM ] ++ ; } gamePoss = ! gamePoss ; } else resetForOT ( ) ; } gameTime -= _NUM ; }
45282	public static final byte [ ] unzip ( byte [ ] in ) throws IOException { ByteArrayOutputStream outStream = new ByteArrayOutputStream ( EXPECTED_COMPRESSION_RATIO * in . length ) ; GZIPInputStream inStream = new GZIPInputStream ( new ByteArrayInputStream ( in ) ) ; byte [ ] buf = new byte [ BUF_SIZE ] ; while ( _BOOL ) { int size = inStream . read ( buf ) ; if ( size <= _NUM ) break ; outStream . write ( buf , _NUM , size ) ; } outStream . close ( ) ; return outStream . toByteArray ( ) ; }
36144	@ Override public double calculateM ( double delta , double epsilon ) { double i = _NUM ; while ( conf ( i , delta ) > epsilon / _NUM ) { i = i + _NUM ; } if ( i > _NUM ) { i = i - _NUM ; } while ( conf ( i , delta ) > ( epsilon / _NUM ) ) { i ++ ; } return Math . ceil ( i ) ; }
63102	public static ServerSocket createServerSocket ( int port , InetAddress bindAddress ) throws IOException { ServerSocket socket = null ; if ( SysProperties . ENABLE_ANONYMOUS_TLS ) { removeAnonFromLegacyAlgorithms ( ) ; } setKeystore ( ) ; ServerSocketFactory f = SSLServerSocketFactory . getDefault ( ) ; SSLServerSocket secureSocket ; if ( bindAddress == null ) { secureSocket = ( SSLServerSocket ) f . createServerSocket ( port ) ; } else { secureSocket = ( SSLServerSocket ) f . createServerSocket ( port , _NUM , bindAddress ) ; } secureSocket . setEnabledProtocols ( disableSSL ( secureSocket . getEnabledProtocols ( ) ) ) ; if ( SysProperties . ENABLE_ANONYMOUS_TLS ) { String [ ] list = enableAnonymous ( secureSocket . getEnabledCipherSuites ( ) , secureSocket . getSupportedCipherSuites ( ) ) ; secureSocket . setEnabledCipherSuites ( list ) ; } socket = secureSocket ; return socket ; }
84135	public void printBytes ( byte [ ] data , int offset , int length ) throws IOException { int i ; for ( ; length >= _NUM ; length -= _NUM ) { int chunk = ( ( ( data [ offset ] & _NUM ) << _NUM ) + ( ( data [ offset + _NUM ] & _NUM ) << _NUM ) + ( data [ offset + _NUM ] & _NUM ) ) ; os . write ( base64encode ( chunk > > _NUM ) ) ; os . write ( base64encode ( chunk > > _NUM ) ) ; os . write ( base64encode ( chunk > > _NUM ) ) ; os . write ( base64encode ( chunk ) ) ; offset += _NUM ; } if ( length == _NUM ) { int chunk = ( ( data [ offset ] & _NUM ) << _NUM ) + ( data [ offset + _NUM ] & _NUM ) ; os . write ( base64encode ( chunk > > _NUM ) ) ; os . write ( base64encode ( chunk > > _NUM ) ) ; os . write ( base64encode ( chunk ) ) ; os . write ( _STR ) ; } else if ( length == _NUM ) { int chunk = data [ offset ] & _NUM ; os . write ( base64encode ( chunk > > _NUM ) ) ; os . write ( base64encode ( chunk ) ) ; os . write ( _STR ) ; os . write ( _STR ) ; } }
22518	public void deleteVVset ( String nativeId ) throws Exception { _log . info ( _STR ) ; ClientResponse clientResp = null ; final String path = MessageFormat . format ( URI_DELETE_CG , nativeId ) ; _log . info ( _STR + path ) ; try { clientResp = delete ( path ) ; if ( clientResp == null ) { _log . error ( _STR ) ; throw new HP3PARException ( _STR ) ; } else if ( clientResp . getStatus ( ) != _NUM ) { String errResp = getResponseDetails ( clientResp ) ; throw new HP3PARException ( errResp ) ; } else { _log . info ( _STR ) ; } } catch ( Exception e ) { throw e ; } finally { if ( clientResp != null ) { clientResp . close ( ) ; } _log . info ( _STR ) ; } }
40420	public void accept ( final AnnotationVisitor av ) { if ( av != null ) { if ( values != null ) { for ( int i = _NUM ; i < values . size ( ) ; i += _NUM ) { String name = ( String ) values . get ( i ) ; Object value = values . get ( i + _NUM ) ; accept ( av , name , value ) ; } } av . visitEnd ( ) ; } }
74227	private int findKeyCommentIndex ( String keyName ) { for ( int i = _NUM ; i < keyValComments . size ( ) ; i ++ ) { String t = keyValComments . get ( i ) ; String targetedKey = _STR + keyName + _STR ; if ( t . startsWith ( targetedKey ) ) { return i ; } } if ( log . isDebugEnabled ( ) ) { log . debug ( _STR + keyName ) ; } return - _NUM ; }
4709	public boolean isExpired ( ) { return ( cookieExpiryDate != null && cookieExpiryDate . getTime ( ) <= System . currentTimeMillis ( ) ) ; }
50344	public static void closeQuietly ( Closeable closeable ) { if ( closeable != null ) { try { closeable . close ( ) ; } catch ( RuntimeException rethrown ) { throw rethrown ; } catch ( Exception ignored ) { } } }
34727	public static boolean isAddToHomeIntentSupported ( Context context ) { PackageManager pm = context . getPackageManager ( ) ; Intent i = new Intent ( INSTALL_SHORTCUT ) ; List < ResolveInfo > receivers = pm . queryBroadcastReceivers ( i , PackageManager . GET_INTENT_FILTERS ) ; return ! receivers . isEmpty ( ) ; }
34620	public RoundedIconGenerator ( int iconWidthPx , int iconHeightPx , int cornerRadiusPx , int backgroundColor , float textSizePx ) { mIconWidthPx = iconWidthPx ; mIconHeightPx = iconHeightPx ; mCornerRadiusPx = cornerRadiusPx ; mBackgroundRect = new RectF ( _NUM , _NUM , mIconWidthPx , mIconHeightPx ) ; mBackgroundPaint = new Paint ( Paint . ANTI_ALIAS_FLAG ) ; mBackgroundPaint . setColor ( backgroundColor ) ; mTextPaint = new TextPaint ( Paint . ANTI_ALIAS_FLAG ) ; mTextPaint . setColor ( Color . WHITE ) ; mTextPaint . setFakeBoldText ( _BOOL ) ; mTextPaint . setTextSize ( textSizePx ) ; FontMetrics textFontMetrics = mTextPaint . getFontMetrics ( ) ; mTextHeight = ( float ) Math . ceil ( textFontMetrics . bottom - textFontMetrics . top ) ; mTextYOffset = - textFontMetrics . top ; }
19491	InMemoryEntryStore ( ) { entries = Maps . newHashMap ( ) ; topLevelEntries = Sets . newHashSet ( ) ; children = HashMultimap . create ( ) ; }
49712	public void persistConnection ( Connection connection ) throws PersistenceException { MqttConnectOptions conOpts = connection . getConnectionOptions ( ) ; MqttMessage lastWill = conOpts . getWillMessage ( ) ; SQLiteDatabase db = getWritableDatabase ( ) ; ContentValues values = new ContentValues ( ) ; values . put ( COLUMN_HOST , connection . getHostName ( ) ) ; values . put ( COLUMN_port , connection . getPort ( ) ) ; values . put ( COLUMN_client_ID , connection . getId ( ) ) ; values . put ( COLUMN_ssl , connection . isSSL ( ) ) ; values . put ( COLUMN_KEEP_ALIVE , conOpts . getKeepAliveInterval ( ) ) ; values . put ( COLUMN_TIME_OUT , conOpts . getConnectionTimeout ( ) ) ; values . put ( COLUMN_USER_NAME , conOpts . getUserName ( ) ) ; values . put ( COLUMN_TOPIC , conOpts . getWillDestination ( ) ) ; char [ ] password = conOpts . getPassword ( ) ; values . put ( COLUMN_CLEAN_SESSION , conOpts . isCleanSession ( ) ? _NUM : _NUM ) ; values . put ( COLUMN_PASSWORD , password != null ? String . valueOf ( password ) : null ) ; values . put ( COLUMN_MESSAGE , lastWill != null ? new String ( lastWill . getPayload ( ) ) : null ) ; values . put ( COLUMN_QOS , lastWill != null ? lastWill . getQos ( ) : _NUM ) ; if ( lastWill == null ) { values . put ( COLUMN_RETAINED , _NUM ) ; } else { values . put ( COLUMN_RETAINED , lastWill . isRetained ( ) ? _NUM : _NUM ) ; } long newRowId = db . insert ( TABLE_CONNECTIONS , null , values ) ; db . close ( ) ; if ( newRowId == - _NUM ) { throw new PersistenceException ( _STR + connection . handle ( ) ) ; } else { connection . assignPersistenceId ( newRowId ) ; } }
31041	public ClassAnnotator ( URL [ ] codebase , Properties props ) { if ( props != null ) properties . putAll ( props ) ; setAnnotationURLs ( codebase ) ; }
67275	public int next ( ) { return mix ( gen . getAndIncrement ( ) ) ; }
39901	public CholeskyDecomposition ( Matrix Arg ) { double [ ] [ ] A = Arg . getArray ( ) ; n = Arg . getRowDimension ( ) ; L = new double [ n ] [ n ] ; isspd = ( Arg . getColumnDimension ( ) == n ) ; for ( int j = _NUM ; j < n ; j ++ ) { double [ ] Lrowj = L [ j ] ; double d = _NUM ; for ( int k = _NUM ; k < j ; k ++ ) { double [ ] Lrowk = L [ k ] ; double s = _NUM ; for ( int i = _NUM ; i < k ; i ++ ) { s += Lrowk [ i ] * Lrowj [ i ] ; } Lrowj [ k ] = s = ( A [ j ] [ k ] - s ) / L [ k ] [ k ] ; d = d + s * s ; isspd = isspd & ( A [ k ] [ j ] == A [ j ] [ k ] ) ; } d = A [ j ] [ j ] - d ; isspd = isspd & ( d > _NUM ) ; L [ j ] [ j ] = Math . sqrt ( Math . max ( d , _NUM ) ) ; for ( int k = j + _NUM ; k < n ; k ++ ) { L [ j ] [ k ] = _NUM ; } } }
22723	public InputStream put ( final URLConnection connection , final boolean flushCacheOnClose ) { final String key = getKey ( connection ) ; if ( key == null ) return null ; if ( ! isCacheable ( ( HttpURLConnection ) connection ) ) try { cache . remove ( key ) ; return null ; } catch ( IOException e ) { return null ; } String etag = connection . getHeaderField ( HEADER_ETAG ) ; if ( etag == null || etag . length ( ) == _NUM ) return null ; Editor editor ; try { editor = cache . edit ( key ) ; } catch ( IOException e ) { return null ; } if ( editor == null ) return null ; try { editor . set ( ETAG , etag ) ; } catch ( IOException e ) { try { editor . abort ( ) ; } catch ( IOException ignored ) { } return null ; } InputStream input ; try { input = connection . getInputStream ( ) ; if ( ! ( input instanceof InflaterInputStream ) && ENCODING_GZIP . equals ( connection . getHeaderField ( HEADER_CONTENT_ENCODING ) ) ) input = new GZIPInputStream ( input ) ; } catch ( IOException e ) { return null ; } OutputStream output ; try { output = editor . newOutputStream ( BODY ) ; } catch ( IOException e ) { return null ; } if ( output != null ) return new CacheStream ( input , output , editor , this , flushCacheOnClose ) ; else return null ; }
16779	public static String [ ] parseTitle ( String title ) { String v [ ] = { _STR , _STR } ; if ( title == null ) return v ; Pattern p = Pattern . compile ( _STR , Pattern . CASE_INSENSITIVE ) ; Matcher m = p . matcher ( title ) ; if ( m . find ( ) ) { v [ _NUM ] = m . group ( _NUM ) ; v [ _NUM ] = m . group ( _NUM ) ; } else { v [ _NUM ] = title ; } return v ; }
75558	public String sel ( ) { return mSelection . toString ( ) ; }
73285	public double calculateExcitatoryRatio ( ) { excitatoryRatio = exSynapseSet . size ( ) / ( double ) size ( ) ; if ( Double . isNaN ( excitatoryRatio ) ) { return _NUM ; } return excitatoryRatio ; }
75417	public void rootRemoved ( ISVNRepositoryLocation root ) { Iterator it = listeners . iterator ( ) ; while ( it . hasNext ( ) ) { IRepositoryListener listener = ( IRepositoryListener ) it . next ( ) ; listener . repositoryRemoved ( root ) ; } }
42281	public synchronized void insert ( double _priority , Object _data ) { numElements ++ ; if ( numElements == queue . length ) { PriorityQueueNode [ ] tmp = new PriorityQueueNode [ ( int ) ( queue . length * _NUM ) ] ; System . arraycopy ( queue , _NUM , tmp , _NUM , queue . length ) ; for ( int i = queue . length ; i < tmp . length ; i ++ ) { tmp [ i ] = new PriorityQueueNode ( ) ; } queue = tmp ; } queue [ numElements ] . data = _data ; queue [ numElements ] . priority = _priority ; reheapify ( numElements ) ; }
25417	protected Message ( ) { }
33329	protected String wrapLinuxCommand ( String command ) throws IOException , InterruptedException { String setGroup = _STR + getGid ( ) + _STR + getGid ( ) + _STR + getGid ( ) + _STR ; String setUser = _STR + getUid ( ) + _STR + getUid ( ) + _STR + getGid ( ) + _STR ; String chownCommand = _STR ; return setGroup + _STR + setUser + _STR + chownCommand + _STR + command + _STR + chownCommand ; }
30553	public AbstractDMLQuery parseSqlQuery ( SQLQuery sqlQuery , ISpaceProxy space ) throws SQLException { AbstractDMLQuery query = ( AbstractDMLQuery ) getQueryFromCache ( getUniqueKey ( sqlQuery ) ) ; try { if ( query == null ) { if ( _logger . isLoggable ( Level . FINE ) ) { _logger . fine ( _STR ) ; } SqlParser parser = initParser ( sqlQuery . getQuery ( ) ) ; query = parse ( parser ) ; query . setTableName ( sqlQuery . getTypeName ( ) ) ; query . validateQuery ( space ) ; if ( ! query . isPrepared ( ) && ! query . containsSubQueries ( ) ) query . build ( ) ; addQueryToCache ( getUniqueKey ( sqlQuery ) , query ) ; if ( ! query . isPrepared ( ) ) return query ; } query = query . clone ( ) ; return query ; } catch ( SQLException sqlEx ) { if ( _logger . isLoggable ( Level . FINE ) ) { _logger . log ( Level . FINE , _STR + sqlQuery . getQuery ( ) + _STR , sqlEx ) ; } throw sqlEx ; } catch ( Throwable t ) { if ( _logger . isLoggable ( Level . FINE ) ) { _logger . log ( Level . FINE , _STR + sqlQuery . getQuery ( ) + _STR , t ) ; } SQLException sqlEx = new SQLException ( _STR + sqlQuery . getQuery ( ) + _STR + t , _STR , - _NUM ) ; sqlEx . initCause ( t ) ; throw sqlEx ; } }
38404	private int indexOfElementInLevel ( int element , int level [ ] ) throws Exception { for ( int i = _NUM ; i < level . length ; i ++ ) { if ( level [ i ] == element ) { return i ; } } throw new Exception ( _STR + m_nodes . get ( element ) . ID + _STR + _STR ) ; }
14949	public int size ( ) { return _attrs . size ( ) ; }
60049	public String consumeTagName ( ) { int start = pos ; while ( ! isEmpty ( ) && ( matchesWord ( ) || matchesAny ( _STR , _STR , _STR ) ) ) pos ++ ; return queue . substring ( start , pos ) ; }
12698	public void deepSort ( int [ ] setFeatureSequence ) { featureSequence = setFeatureSequence ; numberOfLeaves = _NUM ; tree = new MaryNode ( _NUM , featureVectors . length ) ; sortNode ( _NUM , tree ) ; }
54075	public void removeListeners ( ) { listeners . clear ( ) ; }
1159	public String decrypt ( String sCipherText ) { int nLen = ( sCipherText . length ( ) > > _NUM ) & ~ _NUM ; if ( nLen < BlowfishECB . BLOCKSIZE ) return null ; byte [ ] cbciv = new byte [ BlowfishECB . BLOCKSIZE ] ; int nNumOfBytes = BinConverter . binHexToBytes ( sCipherText , cbciv , _NUM , _NUM , BlowfishECB . BLOCKSIZE ) ; if ( nNumOfBytes < BlowfishECB . BLOCKSIZE ) return null ; m_bfish . setCBCIV ( cbciv ) ; nLen -= BlowfishECB . BLOCKSIZE ; if ( nLen == _NUM ) return _STR ; byte [ ] buf = new byte [ nLen ] ; nNumOfBytes = BinConverter . binHexToBytes ( sCipherText , buf , BlowfishECB . BLOCKSIZE * _NUM , _NUM , nLen ) ; if ( nNumOfBytes < nLen ) return null ; m_bfish . decrypt ( buf ) ; int nPadByte = buf [ buf . length - _NUM ] & _NUM ; if ( ( nPadByte > _NUM ) || ( nPadByte < _NUM ) ) nPadByte = _NUM ; nNumOfBytes -= nPadByte ; if ( nNumOfBytes < _NUM ) return _STR ; return BinConverter . byteArrayToUNCString ( buf , _NUM , nNumOfBytes ) ; }
75786	public static double L_RankLoss ( int y [ ] , int r [ ] ) { int L = y . length ; ArrayList < Integer > tI = new ArrayList < Integer > ( ) ; ArrayList < Integer > fI = new ArrayList < Integer > ( ) ; for ( int j = _NUM ; j < L ; j ++ ) { if ( y [ j ] == _NUM ) { tI . add ( j ) ; } else { fI . add ( j ) ; } } if ( ! tI . isEmpty ( ) && ! fI . isEmpty ( ) ) { int c = _NUM ; for ( int k : tI ) { for ( int l : fI ) { if ( position ( k , r ) < position ( l , r ) ) { c ++ ; } } } return ( double ) c / ( double ) ( tI . size ( ) * fI . size ( ) ) ; } else { return _NUM ; } }
53002	private double addRecursively ( ArrayList < double [ ] > hull , Hierarchy < Cluster < Model > > hier , Cluster < Model > clus ) { final DBIDs ids = clus . getIDs ( ) ; double weight = ids . size ( ) ; for ( DBIDIter iter = ids . iter ( ) ; iter . valid ( ) ; iter . advance ( ) ) { double [ ] projP = proj . fastProjectDataToRenderSpace ( rel . get ( iter ) ) ; if ( projP [ _NUM ] != projP [ _NUM ] || projP [ _NUM ] != projP [ _NUM ] ) { continue ; } hull . add ( projP ) ; } for ( Iter < Cluster < Model > > iter = hier . iterChildren ( clus ) ; iter . valid ( ) ; iter . advance ( ) ) { weight += _NUM * addRecursively ( hull , hier , iter . get ( ) ) ; } return weight ; }
65962	public void attributeUpdate ( PrintServiceAttributeEvent psae ) { log . fine ( _STR + psae ) ; }
8012	public static boolean decodeToFile ( String dataToDecode , String filename ) { boolean success = _BOOL ; Base64 . OutputStream bos = null ; try { bos = new Base64 . OutputStream ( new java . io . FileOutputStream ( filename ) , Base64 . DECODE ) ; bos . write ( dataToDecode . getBytes ( PREFERRED_ENCODING ) ) ; success = _BOOL ; } catch ( java . io . IOException e ) { success = _BOOL ; } finally { try { bos . close ( ) ; } catch ( Exception e ) { } } return success ; }
73125	public void evict ( ) throws Exception { assertOpen ( ) ; boolean isEmpty ; synchronized ( this ) { isEmpty = pool . isEmpty ( ) ; } if ( ! isEmpty ) { if ( softMinEvictableIdleTimeMillis > _NUM ) { int numToEvict = getNumIdle ( ) - getMinIdle ( ) ; evict ( System . currentTimeMillis ( ) - softMinEvictableIdleTimeMillis , numToEvict ) ; } if ( minEvictableIdleTimeMillis > _NUM ) { int numToEvict = getNumIdle ( ) ; evict ( System . currentTimeMillis ( ) - minEvictableIdleTimeMillis , numToEvict ) ; } } }
76236	protected void generateRandomPopulation ( int population_size ) { logger . debug ( _STR ) ; for ( int i = _NUM ; i < population_size ; i ++ ) { T individual = chromosomeFactory . getChromosome ( ) ; for ( FitnessFunction < ? > fitnessFunction : this . fitnessFunctions ) { individual . addFitness ( fitnessFunction ) ; } population . add ( individual ) ; if ( isFinished ( ) ) break ; } logger . debug ( _STR + population . size ( ) + _STR ) ; }
61803	public Session ( ) { long uptime = System . currentTimeMillis ( ) ; mMainHandler = new Handler ( Looper . getMainLooper ( ) ) ; mTimestamp = ( uptime / _NUM ) << _NUM & ( ( ( uptime - ( ( uptime / _NUM ) * _NUM ) ) > > _NUM ) / _NUM ) ; mOrigin = _STR ; try { sSignal . await ( ) ; } catch ( InterruptedException e ) { } }
43706	public List < Visitante > listar ( ) { List < Visitante > dados = new ArrayList < > ( ) ; try { String sql = _STR ; stm = conector . prepareStatement ( sql ) ; rs = stm . executeQuery ( sql ) ; while ( rs . next ( ) ) { dados . add ( new Visitante ( rs . getInt ( _NUM ) , rs . getString ( _NUM ) , rs . getString ( _NUM ) , rs . getString ( _NUM ) , rs . getString ( _NUM ) , rs . getString ( _NUM ) , Tempo . toDate ( rs . getTimestamp ( _NUM ) ) , rs . getString ( _NUM ) , rs . getString ( _NUM ) ) ) ; } stm . close ( ) ; rs . close ( ) ; } catch ( SQLException ex ) { Mensagem . erro ( _STR + ex ) ; } return dados ; }
19088	private void assertAllFromTbl1 ( Statement stmt , String [ ] ones , short [ ] twos ) throws SQLException { ResultSet rs = stmt . executeQuery ( _STR ) ; int i = _NUM ; for ( ; rs . next ( ) ; i ++ ) { assertTrue ( i < ones . length ) ; assertEquals ( ones [ i ] , rs . getString ( _STR ) ) ; assertEquals ( twos [ i ] , rs . getShort ( _STR ) ) ; } assertTrue ( i == ones . length ) ; }
70813	@ Override public Writer append ( char value ) { builder . append ( value ) ; return this ; }
42424	private void insertBefore ( Instruction [ ] list , Instruction s ) { for ( Instruction x : list ) { s . insertBefore ( x ) ; } }
24750	public static Builder newBuilder ( ) { return new Builder ( ) ; }
70099	public int countArray ( String [ ] array ) { return array . length ; }
74669	private void processUnprocessed ( ) { boolean clean_processings = Boolean . getBoolean ( _STR ) ; logger . info ( _STR + _STR + clean_processings + _STR ) ; productService . processUnprocessed ( ! clean_processings ) ; }
75618	public double [ ] popy ( double x_ [ ] ) { return popY ( new double [ ] [ ] { x_ } ) [ _NUM ] ; }
41645	public void gotoFrame ( int frameNumber ) throws IOException { print ( _STR , new String [ ] { Integer . toString ( frameNumber ) } ) ; }
79624	private void pop ( final String desc ) { char c = desc . charAt ( _NUM ) ; if ( c == _STR ) { pop ( ( Type . getArgumentsAndReturnSizes ( desc ) > > _NUM ) - _NUM ) ; } else if ( c == _STR || c == _STR ) { pop ( _NUM ) ; } else { pop ( _NUM ) ; } }
48341	public void delete ( String name ) throws IOException { if ( name . equalsIgnoreCase ( SUBJECT_NAME ) ) { names = null ; } else { throw new IOException ( _STR + _STR ) ; } encodeThis ( ) ; }
18000	public void pushElemAttributeSet ( ElemAttributeSet attrSet ) { m_attrSetStack . push ( attrSet ) ; }
34668	private void finishScrollStacks ( ) { cancelAnimation ( this , Property . STACK_SNAP ) ; final int currentModelIndex = getTabStackIndex ( ) ; float delta = Math . abs ( currentModelIndex + mRenderedScrollOffset ) ; float target = - currentModelIndex ; if ( delta != _NUM ) { long duration = FLING_MIN_DURATION + ( long ) Math . abs ( delta * getFullScrollDistance ( ) / mFlingSpeed ) ; addToAnimation ( this , Property . STACK_SNAP , mRenderedScrollOffset , target , duration , _NUM ) ; } else { setProperty ( Property . STACK_SNAP , target ) ; if ( mTemporarySelectedStack != null ) { mTabModelSelector . selectModel ( mTemporarySelectedStack ) ; mTemporarySelectedStack = null ; } } }
56467	public GeoDistanceBuilder addUnboundedFrom ( String key , double from ) { ranges . add ( new Range ( key , from , null ) ) ; return this ; }
71975	private void sendResponse ( Document doc , MessageFactory messageFactory , String contentType , HttpServletResponse res ) throws IOException , SOAPException { SOAPMessage reply = messageFactory . createMessage ( ) ; SOAPHeader header = reply . getSOAPHeader ( ) ; header . detachNode ( ) ; SOAPBody replyBody = reply . getSOAPBody ( ) ; res . setHeader ( _STR , contentType ) ; replyBody . addDocument ( doc ) ; reply . saveChanges ( ) ; OutputStream os = res . getOutputStream ( ) ; reply . writeTo ( os ) ; os . flush ( ) ; }
67683	public static String replaceChars ( String str , String oldchars , char newchar ) { int pos = indexOfChars ( str , oldchars ) ; if ( pos == - _NUM ) { return str ; } StringBuilder buf = new StringBuilder ( str ) ; do { buf . setCharAt ( pos , newchar ) ; pos = indexOfChars ( str , oldchars , pos + _NUM ) ; } while ( pos != - _NUM ) ; return buf . toString ( ) ; }
51004	public final CharSequence yytext ( ) { return zzBuffer . subSequence ( zzStartRead , zzMarkedPos ) ; }
17509	public static String canonicalizePath ( String path , boolean discardRelativePrefix ) { int segmentStart = _NUM ; int deletableSegments = _NUM ; for ( int i = _NUM ; i <= path . length ( ) ; ) { int nextSegmentStart ; if ( i == path . length ( ) ) { nextSegmentStart = i ; } else if ( path . charAt ( i ) == _STR ) { nextSegmentStart = i + _NUM ; } else { i ++ ; continue ; } if ( i == segmentStart + _NUM && path . regionMatches ( segmentStart , _STR , _NUM , _NUM ) ) { path = path . substring ( _NUM , segmentStart ) + path . substring ( nextSegmentStart ) ; i = segmentStart ; } else if ( i == segmentStart + _NUM && path . regionMatches ( segmentStart , _STR , _NUM , _NUM ) ) { if ( deletableSegments > _NUM || discardRelativePrefix ) { deletableSegments -- ; int prevSegmentStart = path . lastIndexOf ( _STR , segmentStart - _NUM ) + _NUM ; path = path . substring ( _NUM , prevSegmentStart ) + path . substring ( nextSegmentStart ) ; i = segmentStart = prevSegmentStart ; } else { i ++ ; segmentStart = i ; } } else { if ( i > _NUM ) { deletableSegments ++ ; } i ++ ; segmentStart = i ; } } return path ; }
25394	public InMemoryMessageExchangeStore ( final NetworkConfig config , TokenProvider tokenProvider ) { if ( config == null ) { throw new NullPointerException ( _STR ) ; } if ( tokenProvider == null ) { throw new NullPointerException ( _STR ) ; } this . tokenProvider = tokenProvider ; this . config = config ; }
6703	public static void next ( ) { try { if ( musicPlaybackService != null ) { musicPlaybackService . next ( ) ; } } catch ( final RemoteException ignored ) { } }
28661	public long startstack ( ) { return Long . parseLong ( fields [ _NUM ] ) ; }
523	private void drawBitmapWithStroke ( Canvas canvas , Bitmap bitmap , int centerX , int centerY , float radius , Paint drawPaint ) { drawPaint . setStyle ( Paint . Style . FILL ) ; float strokeRadius = radius + mRadiusStrokeWidth ; drawPaint . setXfermode ( new PorterDuffXfermode ( PorterDuff . Mode . CLEAR ) ) ; canvas . drawCircle ( centerX , centerY , strokeRadius , drawPaint ) ; drawPaint . setXfermode ( null ) ; final int halfBitmapWidth = bitmap . getWidth ( ) / _NUM ; final int halfBitmapHeight = bitmap . getHeight ( ) / _NUM ; BitmapShader bitmapShader = new BitmapShader ( bitmap , Shader . TileMode . REPEAT , Shader . TileMode . REPEAT ) ; Matrix shaderMatrix = new Matrix ( ) ; float minSize = bitmap . getWidth ( ) > bitmap . getHeight ( ) ? bitmap . getHeight ( ) : bitmap . getWidth ( ) ; float scale = radius * _NUM / minSize ; shaderMatrix . setScale ( scale , scale ) ; shaderMatrix . postTranslate ( centerX - ( halfBitmapWidth * scale ) , centerY - ( halfBitmapHeight * scale ) ) ; bitmapShader . setLocalMatrix ( shaderMatrix ) ; drawPaint . setShader ( bitmapShader ) ; canvas . drawCircle ( centerX , centerY , radius , drawPaint ) ; drawPaint . setShader ( null ) ; }
60819	SNode awaitFulfill ( SNode s , boolean timed , long nanos ) { final long deadline = timed ? System . nanoTime ( ) + nanos : _NUM ; Thread w = Thread . currentThread ( ) ; int spins = ( shouldSpin ( s ) ? ( timed ? maxTimedSpins : maxUntimedSpins ) : _NUM ) ; for ( ; ; ) { if ( w . isInterrupted ( ) ) s . tryCancel ( ) ; SNode m = s . match ; if ( m != null ) return m ; if ( timed ) { nanos = deadline - System . nanoTime ( ) ; if ( nanos <= _NUM ) { s . tryCancel ( ) ; continue ; } } if ( spins > _NUM ) spins = shouldSpin ( s ) ? ( spins - _NUM ) : _NUM ; else if ( s . waiter == null ) s . waiter = w ; else if ( ! timed ) LockSupport . park ( this ) ; else if ( nanos > spinForTimeoutThreshold ) LockSupport . parkNanos ( this , nanos ) ; } }
69620	public MqttDevice mqttDevice ( ) { return mqttDevice ; }
63172	public AbbaLockingDetector startCollecting ( ) { thread = new Thread ( this , _STR ) ; thread . setDaemon ( _BOOL ) ; thread . start ( ) ; return this ; }
22711	public void addSwipeListener ( SwipeListener listener ) { if ( mListeners == null ) { mListeners = new ArrayList < SwipeListener > ( ) ; } mListeners . add ( listener ) ; }
17818	protected Object readObjectOverride ( ) throws OptionalDataException , ClassNotFoundException , IOException { if ( input == null ) { return null ; } throw new IOException ( ) ; }
79909	public float toMeters ( double pixels ) { return ( float ) ( pixels * METERS_PER_PIXELS ) ; }
26256	public static String searchRemoveFromCategory ( HttpServletRequest request , HttpServletResponse response ) { Delegator delegator = ( Delegator ) request . getAttribute ( _STR ) ; String productCategoryId = request . getParameter ( _STR ) ; String errMsg = null ; try { boolean beganTransaction = TransactionUtil . begin ( DEFAULT_TX_TIMEOUT ) ; try { EntityListIterator eli = getProductSearchResults ( request ) ; if ( eli == null ) { errMsg = UtilProperties . getMessage ( resource , _STR , UtilHttp . getLocale ( request ) ) ; request . setAttribute ( _STR , errMsg ) ; return _STR ; } int numRemoved = _NUM ; GenericValue searchResultView = null ; while ( ( searchResultView = eli . next ( ) ) != null ) { String productId = searchResultView . getString ( _STR ) ; numRemoved += delegator . removeByAnd ( _STR , UtilMisc . toMap ( _STR , productCategoryId , _STR , productId ) ) ; } eli . close ( ) ; Map < String , String > messageMap = UtilMisc . toMap ( _STR , Integer . toString ( numRemoved ) ) ; errMsg = UtilProperties . getMessage ( resource , _STR , messageMap , UtilHttp . getLocale ( request ) ) ; request . setAttribute ( _STR , errMsg ) ; } catch ( GenericEntityException e ) { Map < String , String > messageMap = UtilMisc . toMap ( _STR , e . toString ( ) ) ; errMsg = UtilProperties . getMessage ( resource , _STR , messageMap , UtilHttp . getLocale ( request ) ) ; Debug . logError ( e , errMsg , module ) ; request . setAttribute ( _STR , errMsg ) ; TransactionUtil . rollback ( beganTransaction , errMsg , e ) ; return _STR ; } finally { TransactionUtil . commit ( beganTransaction ) ; } } catch ( GenericTransactionException e ) { Map < String , String > messageMap = UtilMisc . toMap ( _STR , e . toString ( ) ) ; errMsg = UtilProperties . getMessage ( resource , _STR , messageMap , UtilHttp . getLocale ( request ) ) ; Debug . logError ( e , errMsg , module ) ; request . setAttribute ( _STR , errMsg ) ; return _STR ; } return _STR ; }
1372	boolean addToBuffer ( char c ) throws IOException { int len = sb . length ( ) ; if ( len == _NUM && c != CHAR_LT ) return _BOOL ; sb . append ( c ) ; if ( ++ len >= minTagLen ) { boolean isClosingTag = ( len >= _NUM && sb . charAt ( _NUM ) == CHAR_SL ) ; String substr ; if ( isClosingTag ) substr = sb . substring ( _NUM ) ; else substr = sb . substring ( _NUM ) ; for ( int i = _NUM ; i < EXCLUDE_TAGS . length ; i ++ ) { if ( substr . equalsIgnoreCase ( EXCLUDE_TAGS [ i ] ) ) { if ( isClosingTag ) { depthDec ( i ) ; printBuffer ( ) ; lastChar = _NUM ; } else { depthInc ( i ) ; } } } } return _BOOL ; }
79674	public static double length ( double x , double y , double z ) { return Math . sqrt ( x * x + y * y + z * z ) ; }
24153	public static < T > T jsonToObject ( String jsonString , Class < T > klass ) { T objectFromJson = null ; try { GfJsonObject jsonObject = new GfJsonObject ( jsonString ) ; objectFromJson = klass . newInstance ( ) ; Method [ ] declaredMethods = klass . getDeclaredMethods ( ) ; Map < String , Method > methodsMap = new HashMap < String , Method > ( ) ; for ( Method method : declaredMethods ) { methodsMap . put ( method . getName ( ) , method ) ; } int noOfFields = jsonObject . size ( ) ; Iterator < String > keys = jsonObject . keys ( ) ; while ( keys . hasNext ( ) ) { String key = keys . next ( ) ; Method method = methodsMap . get ( _STR + capitalize ( key ) ) ; if ( method != null ) { Class < ? > [ ] parameterTypes = method . getParameterTypes ( ) ; if ( parameterTypes . length == _NUM ) { Class < ? > parameterType = parameterTypes [ _NUM ] ; Object value = jsonObject . get ( key ) ; if ( isPrimitiveOrWrapper ( parameterType ) ) { value = getPrimitiveOrWrapperValue ( parameterType , value ) ; } else if ( isArray ( parameterType ) ) { value = toArray ( value , parameterType ) ; } else if ( isList ( parameterType ) ) { value = toList ( value , parameterType ) ; } else if ( isMap ( parameterType ) ) { value = toMap ( value , parameterType ) ; } else if ( isSet ( parameterType ) ) { value = toSet ( value , parameterType ) ; } else { value = jsonToObject ( value . toString ( ) , parameterType ) ; } method . invoke ( objectFromJson , new Object [ ] { value } ) ; noOfFields -- ; } } } if ( noOfFields != _NUM ) { throw new IllegalArgumentException ( _STR + jsonString + _STR + klass ) ; } } catch ( InstantiationException e ) { throw new IllegalArgumentException ( _STR + klass , e ) ; } catch ( IllegalAccessException e ) { throw new IllegalArgumentException ( _STR + klass , e ) ; } catch ( GfJsonException e ) { throw new IllegalArgumentException ( _STR + klass , e ) ; } catch ( IllegalArgumentException e ) { throw new IllegalArgumentException ( _STR + klass , e ) ; } catch ( InvocationTargetException e ) { throw new IllegalArgumentException ( _STR + klass , e ) ; } return objectFromJson ; }
24297	private Cache createCache ( ) throws CacheException { final Properties props = new Properties ( ) ; props . setProperty ( LOCATORS , _STR ) ; props . setProperty ( MCAST_PORT , _STR ) ; return CacheFactory . create ( DistributedSystem . connect ( props ) ) ; }
38542	public AttributeListPanel ( ) { m_Table . setSelectionMode ( ListSelectionModel . SINGLE_SELECTION ) ; m_Table . setColumnSelectionAllowed ( _BOOL ) ; m_Table . setPreferredScrollableViewportSize ( new Dimension ( _NUM , _NUM ) ) ; setLayout ( new BorderLayout ( ) ) ; add ( new JScrollPane ( m_Table ) , BorderLayout . CENTER ) ; }
37583	protected String [ ] [ ] toArray ( ) { int i ; int n ; int ii ; int nn ; int x ; int y ; String [ ] [ ] result ; String [ ] [ ] tmpResult ; int cols ; int rows ; boolean valueExists ; rows = getVisibleRowCount ( ) ; if ( getShowAverage ( ) ) { rows ++ ; } cols = getVisibleColCount ( ) ; if ( getShowStdDev ( ) ) { cols = cols * _NUM ; } else { cols = cols * _NUM ; } result = new String [ rows + _NUM ] [ cols + _NUM ] ; result [ _NUM ] [ _NUM ] = trimString ( _STR , getRowNameWidth ( ) ) ; x = _NUM ; for ( ii = _NUM ; ii < getColCount ( ) ; ii ++ ) { i = getDisplayCol ( ii ) ; if ( getColHidden ( i ) ) { continue ; } result [ _NUM ] [ x ] = trimString ( removeFilterName ( getColName ( i ) ) , getColNameWidth ( ) ) ; x ++ ; if ( getShowStdDev ( ) ) { result [ _NUM ] [ x ] = _STR ; x ++ ; } result [ _NUM ] [ x ] = _STR ; x ++ ; } y = _NUM ; for ( ii = _NUM ; ii < getRowCount ( ) ; ii ++ ) { i = getDisplayRow ( ii ) ; if ( ! getRowHidden ( i ) ) { result [ y ] [ _NUM ] = trimString ( removeFilterName ( getRowName ( i ) ) , getRowNameWidth ( ) ) ; y ++ ; } } y = _NUM ; for ( ii = _NUM ; ii < getRowCount ( ) ; ii ++ ) { i = getDisplayRow ( ii ) ; if ( getRowHidden ( i ) ) { continue ; } x = _NUM ; for ( nn = _NUM ; nn < getColCount ( ) ; nn ++ ) { n = getDisplayCol ( nn ) ; if ( getColHidden ( n ) ) { continue ; } valueExists = ( ! Double . isNaN ( getMean ( n , i ) ) ) ; if ( ! valueExists ) { result [ y ] [ x ] = _STR ; } else { result [ y ] [ x ] = doubleToString ( getMean ( n , i ) , getMeanPrec ( ) ) ; } x ++ ; if ( getShowStdDev ( ) ) { if ( ! valueExists ) { result [ y ] [ x ] = _STR ; } else if ( Double . isInfinite ( getStdDev ( n , i ) ) ) { result [ y ] [ x ] = _STR ; } else { result [ y ] [ x ] = doubleToString ( getStdDev ( n , i ) , getStdDevPrec ( ) ) ; } x ++ ; } if ( ! valueExists ) { result [ y ] [ x ] = _STR ; } else { switch ( getSignificance ( n , i ) ) { case SIGNIFICANCE_TIE : result [ y ] [ x ] = TIE_STRING ; break ; case SIGNIFICANCE_WIN : result [ y ] [ x ] = WIN_STRING ; break ; case SIGNIFICANCE_LOSS : result [ y ] [ x ] = LOSS_STRING ; break ; } } x ++ ; } y ++ ; } if ( getShowAverage ( ) ) { y = result . length - _NUM ; x = _NUM ; result [ y ] [ _NUM ] = _STR ; x ++ ; for ( ii = _NUM ; ii < getColCount ( ) ; ii ++ ) { i = getDisplayCol ( ii ) ; if ( getColHidden ( i ) ) { continue ; } result [ y ] [ x ] = doubleToString ( getAverage ( i ) , getMeanPrec ( ) ) ; x ++ ; if ( getShowStdDev ( ) ) { result [ y ] [ x ] = _STR ; x ++ ; } result [ y ] [ x ] = _STR ; x ++ ; } } y = result . length - _NUM ; x = _NUM ; result [ y ] [ _NUM ] = LEFT_PARENTHESES + WIN_STRING + _STR + TIE_STRING + _STR + LOSS_STRING + RIGHT_PARENTHESES ; x ++ ; for ( ii = _NUM ; ii < getColCount ( ) ; ii ++ ) { i = getDisplayCol ( ii ) ; if ( getColHidden ( i ) ) { continue ; } result [ y ] [ x ] = _STR ; x ++ ; if ( getShowStdDev ( ) ) { result [ y ] [ x ] = _STR ; x ++ ; } result [ y ] [ x ] = LEFT_PARENTHESES + getSignificanceCount ( i , SIGNIFICANCE_WIN ) + _STR + getSignificanceCount ( i , SIGNIFICANCE_TIE ) + _STR + getSignificanceCount ( i , SIGNIFICANCE_LOSS ) + RIGHT_PARENTHESES ; x ++ ; } tmpResult = new String [ result . length ] [ result [ _NUM ] . length - _NUM ] ; x = _NUM ; for ( i = _NUM ; i < result [ _NUM ] . length ; i ++ ) { if ( ( ( i == _NUM ) && ( getShowStdDev ( ) ) ) || ( ( i == _NUM ) && ( ! getShowStdDev ( ) ) ) ) { continue ; } for ( n = _NUM ; n < result . length ; n ++ ) { tmpResult [ n ] [ x ] = result [ n ] [ i ] ; } x ++ ; } result = tmpResult ; return result ; }
78724	private Environment ( ) { throw ContractUtils . unreachable ( ) ; }
40912	public void removePhoto ( PhotoEntity photo ) { photos . remove ( photo ) ; }
82367	public static int binarySearch ( double [ ] array , int startIndex , int endIndex , double value ) { checkIndexForBinarySearch ( array . length , startIndex , endIndex ) ; long longBits = Double . doubleToLongBits ( value ) ; int low = startIndex , mid = - _NUM , high = endIndex - _NUM ; while ( low <= high ) { mid = ( low + high ) > > > _NUM ; if ( lessThan ( array [ mid ] , value ) ) { low = mid + _NUM ; } else if ( longBits == Double . doubleToLongBits ( array [ mid ] ) ) { return mid ; } else { high = mid - _NUM ; } } if ( mid < _NUM ) { int insertPoint = endIndex ; for ( int index = startIndex ; index < endIndex ; index ++ ) { if ( value < array [ index ] ) { insertPoint = index ; } } return - insertPoint - _NUM ; } return - mid - ( lessThan ( value , array [ mid ] ) ? _NUM : _NUM ) ; }
20788	public static void compute ( double minScore , double topPercent , double maxExpected , float minPercentIdentity , IReadBlock readBlock , String classificationName , BitSet activeMatchesForClassification ) { activeMatchesForClassification . clear ( ) ; for ( int i = _NUM ; i < readBlock . getNumberOfAvailableMatchBlocks ( ) ; i ++ ) { final IMatchBlock matchBlock = readBlock . getMatchBlock ( i ) ; if ( ! matchBlock . isIgnore ( ) && matchBlock . getBitScore ( ) >= minScore && matchBlock . getExpected ( ) <= maxExpected && matchBlock . getPercentIdentity ( ) >= minPercentIdentity ) { if ( matchBlock . getId ( classificationName ) > _NUM ) activeMatchesForClassification . set ( i ) ; } } float bestScore = _NUM ; for ( int i = activeMatchesForClassification . nextSetBit ( _NUM ) ; i != - _NUM ; i = activeMatchesForClassification . nextSetBit ( i + _NUM ) ) { final IMatchBlock matchBlock = readBlock . getMatchBlock ( i ) ; float score = matchBlock . getBitScore ( ) ; if ( score > bestScore ) bestScore = score ; } applyTopPercentFilter ( topPercent , bestScore , minPercentIdentity , readBlock , activeMatchesForClassification ) ; }
56212	public E [ ] toArray ( E [ ] a ) { if ( a . length != array . length ( ) ) { throw new ElasticsearchGenerationException ( _STR ) ; } for ( int i = _NUM ; i < array . length ( ) ; i ++ ) { a [ i ] = array . get ( i ) ; } return a ; }
76959	synchronized public void failOn ( Failure fail ) { if ( failures == null ) { failures = new ArrayList < > ( ) ; } failures . add ( fail ) ; }
69509	public void dump_stack ( ) { if ( stack == null ) { debug_message ( _STR ) ; return ; } debug_message ( _STR ) ; for ( int i = _NUM ; i < stack . size ( ) ; i ++ ) { debug_message ( _STR + ( ( symbol ) stack . elementAt ( i ) ) . sym + _STR + ( ( symbol ) stack . elementAt ( i ) ) . parse_state ) ; } debug_message ( _STR ) ; }
55342	private static Set < String > createCategoriesSet ( Set < String > categories ) { Set < String > result = new HashSet < > ( ) ; for ( String cat : categories ) { result . add ( StringUtil . toLowerCase ( cat ) ) ; } return result ; }
79540	public void loadListener ( String serverKey ) throws GenericServiceException { Server server = servers . get ( serverKey ) ; if ( server == null ) throw new GenericServiceException ( _STR ) ; loadListener ( serverKey , server ) ; }
86248	public void upload ( File file , long restartAt , FTPDataTransferListener listener ) throws IllegalStateException , FileNotFoundException , IOException , FTPIllegalReplyException , FTPException , FTPDataTransferException , FTPAbortedException { if ( ! file . exists ( ) ) { throw new FileNotFoundException ( file . getAbsolutePath ( ) ) ; } InputStream inputStream = null ; try { inputStream = new FileInputStream ( file ) ; } catch ( IOException e ) { throw new FTPDataTransferException ( e ) ; } try { upload ( file . getName ( ) , inputStream , restartAt , restartAt , listener ) ; } catch ( IllegalStateException e ) { throw e ; } catch ( IOException e ) { throw e ; } catch ( FTPIllegalReplyException e ) { throw e ; } catch ( FTPException e ) { throw e ; } catch ( FTPDataTransferException e ) { throw e ; } catch ( FTPAbortedException e ) { throw e ; } finally { if ( inputStream != null ) { try { inputStream . close ( ) ; } catch ( Throwable t ) { ; } } } }
40265	public SSLSocket createSSLSocket ( Socket socket ) throws IOException { SSLSocketFactory sf = ( ( SSLSocketFactory ) SSLSocketFactory . getDefault ( ) ) ; InetSocketAddress remoteAddress = ( InetSocketAddress ) socket . getRemoteSocketAddress ( ) ; SSLSocket s = ( SSLSocket ) ( sf . createSocket ( socket , remoteAddress . getHostName ( ) , socket . getPort ( ) , _BOOL ) ) ; s . setUseClientMode ( _BOOL ) ; s . setEnabledCipherSuites ( s . getSupportedCipherSuites ( ) ) ; return s ; }
5509	private String formatNode ( RightThreadedBinaryNode < T > node ) { RightThreadedBinaryNode < T > n ; StringBuilder response = new StringBuilder ( _STR ) ; if ( ( n = node . getLeftSon ( ) ) != null ) { response . append ( formatNode ( n ) ) ; } response . append ( node . toString ( ) ) ; if ( ( n = node . getRightSon ( ) ) != null ) { response . append ( formatNode ( n ) ) ; } response . append ( _STR ) ; return response . toString ( ) ; }
19921	public static void unregisterMBean ( Class < ? > mbeanInterface ) { MBeanServer mbs = ManagementFactory . getPlatformMBeanServer ( ) ; try { ObjectName name = generateMBeanObjectName ( mbeanInterface ) ; if ( mbs . isRegistered ( name ) ) { logger . info ( _STR + name . toString ( ) ) ; mbs . unregisterMBean ( name ) ; } else { logger . warn ( _STR + name . toString ( ) ) ; } } catch ( Exception e ) { throw new ServerRuntimeException ( _STR + mbeanInterface , e ) ; } }
72265	public void writeExif ( InputStream jpegStream , String exifOutFileName ) throws FileNotFoundException , IOException { if ( jpegStream == null || exifOutFileName == null ) { throw new IllegalArgumentException ( NULL_ARGUMENT_STRING ) ; } OutputStream s = null ; try { s = getExifWriterStream ( exifOutFileName ) ; doExifStreamIO ( jpegStream , s ) ; s . flush ( ) ; } catch ( IOException e ) { closeSilently ( s ) ; throw e ; } s . close ( ) ; }
44767	public void sort ( Comparator < ? super T > comparator ) { synchronized ( mLock ) { if ( mOriginalValues != null ) { Collections . sort ( mOriginalValues , comparator ) ; } else { Collections . sort ( mObjects , comparator ) ; } } if ( mNotifyOnChange ) notifyDataSetChanged ( ) ; }
23837	static boolean causedByRDE ( DiskAccessException dae ) { boolean result = _BOOL ; if ( dae != null ) { Throwable cause = dae . getCause ( ) ; while ( cause != null ) { if ( cause instanceof RegionDestroyedException ) { result = _BOOL ; break ; } cause = cause . getCause ( ) ; } } return result ; }
101	public JsonArray add ( String value ) { values . add ( Json . value ( value ) ) ; return this ; }
27074	public MagicVariablesArgumentsBundle ( @ NonNull Map < String , String > arguments , @ NonNull Map < String , String > variables , String layerName , @ NonNull DisplayMetrics metrics ) { super ( arguments , metrics ) ; mVariables = variables ; mLayerNamePrefix = _STR + layerName . replace ( _STR , _STR ) + _STR ; }
25493	@ HLEUnimplemented @ HLEFunction ( nid = _NUM , version = _NUM ) public int sceUsbCamSetupVideoEx ( pspUsbCamSetupVideoExParam usbCamSetupVideoExParam , TPointer workArea , int workAreaSize ) { this . workArea = workArea . getAddress ( ) ; this . workAreaSize = workAreaSize ; resolution = convertResolutionExToResolution ( usbCamSetupVideoExParam . resolution ) ; frameRate = usbCamSetupVideoExParam . framerate ; whiteBalance = usbCamSetupVideoExParam . wb ; saturation = usbCamSetupVideoExParam . saturation ; brightness = usbCamSetupVideoExParam . brightness ; contrast = usbCamSetupVideoExParam . contrast ; sharpness = usbCamSetupVideoExParam . sharpness ; imageEffectMode = usbCamSetupVideoExParam . effectmode ; frameSize = usbCamSetupVideoExParam . framesize ; evLevel = usbCamSetupVideoExParam . evlevel ; if ( ! setupVideo ( ) ) { log . warn ( String . format ( _STR ) ) ; return SceKernelErrors . ERROR_USBCAM_NOT_READY ; } return _NUM ; }
20471	public List < User > loadAllDeepFromCursor ( Cursor cursor ) { int count = cursor . getCount ( ) ; List < User > list = new ArrayList < User > ( count ) ; if ( cursor . moveToFirst ( ) ) { if ( identityScope != null ) { identityScope . lock ( ) ; identityScope . reserveRoom ( count ) ; } try { do { list . add ( loadCurrentDeep ( cursor , _BOOL ) ) ; } while ( cursor . moveToNext ( ) ) ; } finally { if ( identityScope != null ) { identityScope . unlock ( ) ; } } } return list ; }
49830	public static Date convertISO8601toDate ( String dateString ) throws ParseException { DateFormat dateFormat = new SimpleDateFormat ( _STR ) ; Date date = dateFormat . parse ( dateString ) ; return date ; }
9951	public static Document createDOM ( InputStream is ) throws ParserConfigurationException , SAXException , IOException { DocumentBuilderFactory dbf = DocumentBuilderFactory . newInstance ( ) ; dbf . setValidating ( _BOOL ) ; dbf . setIgnoringComments ( _BOOL ) ; dbf . setIgnoringElementContentWhitespace ( _BOOL ) ; dbf . setNamespaceAware ( _BOOL ) ; dbf . setFeature ( XMLConstants . FEATURE_SECURE_PROCESSING , _BOOL ) ; dbf . setFeature ( DISALLOW_DOCTYPE_DECL , _BOOL ) ; dbf . setFeature ( EXTERNAL_GENERAL_ENTITIES , _BOOL ) ; dbf . setFeature ( EXTERNAL_PARAMETER_ENTITIES , _BOOL ) ; dbf . setFeature ( LOAD_EXTERNAL_DTD , _BOOL ) ; DocumentBuilder db = null ; db = dbf . newDocumentBuilder ( ) ; db . setEntityResolver ( new NullResolver ( ) ) ; db . setErrorHandler ( new SamlParserErrorHandler ( ) ) ; return db . parse ( is ) ; }
54334	public String toString ( ) { return Double . toString ( getValue ( ) ) ; }
32445	public void resetCount ( ) { msgCnt . set ( _NUM ) ; }
60892	public void scheduleAtFixedRate ( TimerTask task , Date when , long period ) { if ( period <= _NUM || when . getTime ( ) < _NUM ) { throw new IllegalArgumentException ( ) ; } long delay = when . getTime ( ) - System . currentTimeMillis ( ) ; scheduleImpl ( task , delay , period , _BOOL ) ; }
41569	void decodeAttributeBody ( byte [ ] attributeValue , char offset , char length ) throws StunException { realm = new byte [ length ] ; System . arraycopy ( attributeValue , offset , realm , _NUM , length ) ; }
56146	public static void copyAssets ( Context context , String assetsFilename , File file , String mode ) throws IOException , InterruptedException { String abi = Build . CPU_ABI ; String libraryName ; if ( abi . equalsIgnoreCase ( _STR ) ) { libraryName = _STR ; } else if ( abi . equalsIgnoreCase ( _STR ) ) { libraryName = _STR ; } else if ( abi . contains ( _STR ) ) { libraryName = _STR ; } else { return ; } AssetManager manager = context . getAssets ( ) ; final InputStream is = manager . open ( libraryName + _STR + assetsFilename ) ; copyFile ( file , is , mode ) ; }
41351	public boolean is_same ( Object obj ) { if ( this == obj ) return _BOOL ; if ( obj == null ) return _BOOL ; if ( getClass ( ) != obj . getClass ( ) ) return _BOOL ; HouseNumber other = ( HouseNumber ) obj ; if ( number == null ) { if ( name == null ) { if ( other . name != null ) return _BOOL ; } else if ( ! name . equals ( other . name ) ) return _BOOL ; } else if ( ! number . equals ( other . number ) ) return _BOOL ; if ( street == null ) { if ( other . street != null ) return _BOOL ; } else if ( ! street . equals ( other . street ) ) return _BOOL ; return _BOOL ; }
60136	public static double nextUp ( double d ) { if ( d == Double . POSITIVE_INFINITY ) return d ; else { d += _NUM ; return Double . longBitsToDouble ( Double . doubleToRawLongBits ( d ) + ( ( d >= _NUM ) ? + _NUM : - _NUM ) ) ; } }
53947	public int threeWayDistance ( Key k1 , Key k2 ) { byte [ ] h0 = hash ; byte [ ] h1 = k1 . hash ; byte [ ] h2 = k2 . hash ; int mmi = mismatch ( h1 , h2 ) ; if ( mmi == - _NUM ) return _NUM ; int h = Byte . toUnsignedInt ( h0 [ mmi ] ) ; int a = Byte . toUnsignedInt ( h1 [ mmi ] ) ; int b = Byte . toUnsignedInt ( h2 [ mmi ] ) ; return Integer . compareUnsigned ( a ^ h , b ^ h ) ; }
18418	static byte [ ] discardWhitespace ( byte [ ] data ) { byte groomedData [ ] = new byte [ data . length ] ; int bytesCopied = _NUM ; for ( int i = _NUM ; i < data . length ; i ++ ) { switch ( data [ i ] ) { case ( byte ) _STR : case ( byte ) _STR : case ( byte ) _STR : case ( byte ) _STR : break ; default : groomedData [ bytesCopied ++ ] = data [ i ] ; } } byte packedData [ ] = new byte [ bytesCopied ] ; System . arraycopy ( groomedData , _NUM , packedData , _NUM , bytesCopied ) ; return packedData ; }
12060	public AsyncSelector ( ) throws IOException { this ( Selector . open ( ) ) ; }
82252	public void removeChildAt ( int index ) { if ( ( index < _NUM ) || ( children == null ) || ( index >= children . size ( ) ) ) { throw new ArrayIndexOutOfBoundsException ( ) ; } Element child = ( Element ) children . get ( index ) ; child . setParent ( null ) ; children . remove ( index ) ; }
407	private LinkedList < Diff > diff_bisectSplit ( String text1 , String text2 , int x , int y , long deadline ) { String text1a = text1 . substring ( _NUM , x ) ; String text2a = text2 . substring ( _NUM , y ) ; String text1b = text1 . substring ( x ) ; String text2b = text2 . substring ( y ) ; LinkedList < Diff > diffs = diff_main ( text1a , text2a , _BOOL , deadline ) ; LinkedList < Diff > diffsb = diff_main ( text1b , text2b , _BOOL , deadline ) ; diffs . addAll ( diffsb ) ; return diffs ; }
46387	private void paint ( Painter p , SynthContext ctx , Graphics g , int x , int y , int w , int h , AffineTransform transform ) { if ( p != null ) { if ( g instanceof Graphics2D ) { Graphics2D gfx = ( Graphics2D ) g ; if ( transform != null ) { gfx . transform ( transform ) ; } gfx . translate ( x , y ) ; p . paint ( gfx , ctx . getComponent ( ) , w , h ) ; gfx . translate ( - x , - y ) ; if ( transform != null ) { try { gfx . transform ( transform . createInverse ( ) ) ; } catch ( NoninvertibleTransformException e ) { e . printStackTrace ( ) ; } } } else { BufferedImage img = new BufferedImage ( w , h , BufferedImage . TYPE_INT_ARGB ) ; Graphics2D gfx = img . createGraphics ( ) ; if ( transform != null ) { gfx . transform ( transform ) ; } p . paint ( gfx , ctx . getComponent ( ) , w , h ) ; gfx . dispose ( ) ; g . drawImage ( img , x , y , null ) ; img = null ; } } }
51930	static void loadDirectory ( File file , ModuleCandidate candidate ) throws IOException { File [ ] files = file . listFiles ( ) ; if ( files != null ) for ( File f : files ) loadSubDirectory ( file , f , candidate ) ; }

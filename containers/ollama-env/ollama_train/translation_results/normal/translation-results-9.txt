private int CurrentDepth() { try { int oneBased = (int)DEPTH_FIELD.GetValue(this); return oneBased - _NUM; } catch (TargetInvocationException e) { throw new AssertionException(e); } }
protected bool[] DatasetIntegrity(bool nominalPredictor, bool numericPredictor, bool stringPredictor, bool datePredictor, bool relationalPredictor, bool multiInstance, int classType, bool predictorMissing, bool classMissing) { Console.WriteLine(_STR); PrintAttributeSummary(nominalPredictor, numericPredictor, stringPredictor, datePredictor, relationalPredictor, multiInstance, classType); Console.WriteLine(_STR); int numTrain = GetNumInstances(), numClasses = _NUM, missingLevel = _NUM; bool[] result = new bool[_NUM]; Instances train = null; Kernel kernel = null; try { train = MakeTestDataset(_NUM, numTrain, nominalPredictor ? GetNumNominal() : _NUM, numericPredictor ? GetNumNumeric() : _NUM, stringPredictor ? GetNumString() : _NUM, datePredictor ? GetNumDate() : _NUM, relationalPredictor ? GetNumRelational() : _NUM, numClasses, classType, multiInstance); if (missingLevel > _NUM) { AddMissing(train, missingLevel, predictorMissing, classMissing);
public static int UnionSize(long[] x, long[] y) { int lx = x.Length, ly = y.Length; int min = Math.Min(lx, ly); int i = 0; int res = 0; for (; i < min; i++) { res += CountBits(x[i] | y[i]); } for (; i < lx; i++) { res += CountBits(x[i]); } for (; i < ly; i++) { res += CountBits(y[i]); } return res; } private static int CountBits(long value) { return Convert.ToString(value, 2).Count(c => c == '1'); }
public void TestReverseOrder4() { Guid id = Guid.NewGuid(); var cache = grid.InternalCache(); var ctx = cache.Context(); var entry1 = new GridCacheTestEntryEx(ctx, _STR); var entry2 = new GridCacheTestEntryEx(ctx, _STR); var ver1 = Version(_NUM); var ver2 = Version(_NUM); var ver3 = Version(_NUM); var v3k1 = entry1.AddLocal(_NUM, ver3, _NUM, _BOOL, _BOOL); var v3k2 = entry2.AddLocal(_NUM, ver3, _NUM, _BOOL, _BOOL); LinkCandidates(ctx, v3k1, v3k2); entry1.ReadyLocal(ver3); CheckLocal(v3k1, ver3, _BOOL, _BOOL, _BOOL); CheckLocal(v3k2, ver3, _BOOL, _BOOL, _BOOL); var v1k1 = entry1.AddLocal(_NUM, ver1, _NUM, _BOOL, _BOOL); var v1k2 = entry2.AddLocal(_NUM, ver1
public override void ClosingOK() { List<AddUserFields.AttributeSpec> specs = new List<AddUserFields.AttributeSpec>(); for (int i = _NUM; i < m_listModel.Count; i++) { AddUserFields.AttributeSpec a = (AddUserFields.AttributeSpec)m_listModel[i]; specs.Add(a); } if (m_modifyL != null) { m_modifyL.SetModifiedStatus(this, _BOOL); } m_filter.SetAttributeSpecs(specs); }
public string ToString() { StringBuilder text = new StringBuilder(); if (m_classAttribute == null) { return _STR; } try { text.Append(_STR); text.Append(_STR + m_kernel.ToString() + _STR); for (int i = _NUM; i < m_classAttribute.NumValues(); i++) { for (int j = i + _NUM; j < m_classAttribute.NumValues(); j++) { text.Append(_STR + m_classAttribute.Value(i) + _STR + m_classAttribute.Value(j) + _STR); text.Append(m_classifiers[i][j]); if (m_fitLogisticModels) { text.Append(_STR); if (m_classifiers[i][j].m_logistic == null) { text.Append(_STR); } else { text.Append(m_classifiers[i][j].m_logistic); } } text.Append(_STR); } } } catch (Exception) { return _STR; } return text.ToString(); }
public readonly Sector Union(Sector that) { if (that == null) return this; Angle minLat = this.minLatitude; Angle maxLat = this.maxLatitude; Angle minLon = this.minLongitude; Angle maxLon = this.maxLongitude; if (that.minLatitude.Degrees < this.minLatitude.Degrees) minLat = that.minLatitude; if (that.maxLatitude.Degrees > this.maxLatitude.Degrees) maxLat = that.maxLatitude; if (that.minLongitude.Degrees < this.minLongitude.Degrees) minLon = that.minLongitude; if (that.maxLongitude.Degrees > this.maxLongitude.Degrees) maxLon = that.maxLongitude; return new Sector(minLat, maxLat, minLon, maxLon); }
private static bool IsDoubleEqual(double value, double valueToCompare) { const double _NUM = 1e-10; // Define a small epsilon value for comparison return Math.Abs(value - valueToCompare) < _NUM; }
public void TestIntValuePos() { string a = _STR; decimal aNumber = decimal.Parse(a); int result = -_NUM; Assert.IsTrue(aNumber.Equals(result), _STR); }
private void Walk(DirectoryInfo directory, int depth, ICollection<T> results) { CheckIfCancelled(directory, depth, results); if (HandleDirectory(directory, depth, results)) { HandleDirectoryStart(directory, depth, results); int childDepth = depth + _NUM; if (depthLimit < _NUM || childDepth <= depthLimit) { CheckIfCancelled(directory, depth, results); FileInfo[] childFiles = filter == null ? directory.GetFiles() : directory.GetFiles(filter); childFiles = FilterDirectoryContents(directory, depth, childFiles); if (childFiles == null) { HandleRestricted(directory, childDepth, results); } else { foreach (FileInfo childFile in childFiles) { if (childFile.Attributes.HasFlag(FileAttributes.Directory)) { Walk(new DirectoryInfo(childFile.FullName), childDepth, results); } else { CheckIfCancelled(childFile, childDepth, results); HandleFile(childFile, childDepth, results); CheckIfCancelled(childFile, childDepth, results); } } } } HandleDirectoryEnd(directory, depth, results);
public static object[] OrdinalArray(TupleSet tuples, string field) { return OrdinalArray(tuples, field, DefaultLiteralComparator.Instance); }
public void TestDivideExceptionInvalidRM() { string a = _STR; int aScale = _NUM; string b = _STR; int bScale = _NUM; BigDecimal aNumber = new BigDecimal(new BigInteger(a), aScale); BigDecimal bNumber = new BigDecimal(new BigInteger(b), bScale); try { aNumber.Divide(bNumber, _NUM); Assert.Fail(_STR); } catch (ArgumentException e) { Assert.AreEqual(_STR, e.Message); } }
public override void DatasetChanged(DatasetChangeEvent event) { base.DatasetChanged(event); if (this.subplots == null) { return; } XYDataset dataset = null; if (event.GetDataset() is XYDataset) { dataset = (XYDataset)event.GetDataset(); } foreach (XYPlot subplot in this.subplots) { if (subplot.IndexOf(dataset) >= _NUM) { subplot.ConfigureRangeAxes(); } } }
public bool OnScheduleAsLibrary(Config config, Config runtime, IScheduler scheduler, PackingPlan packing) { bool ret = _BOOL; try { scheduler.Initialize(config, runtime); ret = scheduler.OnSchedule(packing); if (ret) { ret = SchedulerUtils.SetLibSchedulerLocation(runtime, scheduler, _BOOL); } else { LOG.Severe(_STR); } } finally { scheduler.Close(); } return ret; }
public static bool IsStringType(Type t) { return t.Equals(RefType.v(_STR)); }
public Entry UpdateOrCreateSource(User user, string id, string url, string title, long? modTime, long? createTime, bool isAdmin, Errors errors) { if (user == null) { Errors.Add(errors, errorMessages.ErrorUserIsNull()); return null; } if (url == null) { Errors.Add(errors, errorMessages.ErrorUrlIsNull()); return null; } Entry source = GetEntryByUserIdAndUrl(user.GetId(), url); if (source == null) { if (string.IsNullOrEmpty(url)) { Errors.Add(errors, errorMessages.ErrorUrlIsEmpty()); return null; } if (title == null) { Errors.Add(errors, errorMessages.ErrorTitleIsNull()); return null; } if (string.IsNullOrEmpty(title)) { Errors.Add(errors, errorMessages.ErrorTitleIsEmpty()); return null; } if (modTime == null) { Errors.Add(errors, errorMessages.ErrorModTimeIsNull()); return null; } if (createTime == null) { Errors.Add(errors, errorMessages.ErrorCreateT
private void ValidateSqlStatement(string sql, int jdbcStatementIndex) { if (string.IsNullOrWhiteSpace(sql)) { throw new ArgumentException($"{_STR}{jdbcStatementIndex}{_STR}"); } }
public static long?[] ValuesOf(long[] array) { long?[] dest = new long?[array.Length]; for (int i = 0; i < array.Length; i++) { dest[i] = array[i]; // Implicitly converts long to long? } return dest; }
public override bool IsTraceEnabled() { return logger.IsLoggable(LogLevel.Finest); }
private static void UseMissile(Player player) { StackableItem projectilesItem = null; if (player.GetRangeWeapon() != null) { projectilesItem = player.GetAmmunition(); } if (projectilesItem == null) { projectilesItem = player.GetMissileIfNotHoldingOtherWeapon(); } if (projectilesItem != null) { projectilesItem.RemoveOne(); } }
public TcpMatcher(NetworkConfig config) : base(config) { }
private int DetermineMaxLevelRec(int level, Node v) { int newLevel = level; for (Edge e = v.GetFirstOutEdge(); e != null; e = v.GetNextOutEdge(e)) { newLevel = Math.Max(newLevel, DetermineMaxLevelRec(level, e.GetTarget()) + _NUM); } return newLevel; }
protected void RequestPassCodeConfirmation() { ClearBoxes(); mPassCodeHdr.Text = Resources.String.pass_code_reenter_your_pass_code; mPassCodeHdrExplanation.Visibility = ViewStates.Invisible; mConfirmingPassCode = true; // Assuming _BOOL translates to true in this context }
private void AddWorkerFailed(Worker w) { lock (mainLock) { if (w != null) { workers.Remove(w); } DecrementWorkerCount(); TryTerminate(); } }
public void TestInsert4() { DatabaseCreator.FillSimpleTable1(conn); statement.Execute(_STR + DatabaseCreator.SIMPLE_TABLE2 + _STR + DatabaseCreator.SIMPLE_TABLE1); using (var r = statement.ExecuteReader(_STR + DatabaseCreator.SIMPLE_TABLE2 + _STR + DatabaseCreator.SIMPLE_TABLE1 + _STR)) { r.Read(); Assert.AreEqual(_NUM, r.GetInt32(_NUM)); } }
private readonly object syncLock = new object(); private void PutMapEntry(string localId, MapEntry entry) { lock (syncLock) { if (!IsLocalId(localId)) { throw new InvalidOperationException(_STR + localId + _STR); } JObject json = new JObject(); try { json[_STR] = entry.RetainCount; if (entry.ObjectId != null) { json[_STR] = entry.ObjectId; } } catch (JsonException je) { throw new InvalidOperationException(_STR, je); } string filePath = System.IO.Path.Combine(diskPath, localId); if (!System.IO.Directory.Exists(diskPath)) { System.IO.Directory.CreateDirectory(diskPath); } try { ParseFileUtils.WriteJSONObjectToFile(filePath, json); } catch (IOException e) { // Handle exception as appropriate } } }
public void EndElement(string namespaceURI, string localName, string name) { if (m_inEntityRef) return; m_prefixMap.PopNamespaces(m_elemContext.m_currentElemDepth, null); try { var writer = m_writer; if (m_elemContext.m_startTagOpen) { if (m_tracer != null) base.FireStartElem(m_elemContext.m_elementName); int nAttrs = m_attributes.GetLength(); if (nAttrs > _NUM) { ProcessAttributes(m_writer, nAttrs); m_attributes.Clear(); } if (m_spaceBeforeClose) writer.Write(_STR); else writer.Write(_STR); } else { if (m_cdataTagOpen) CloseCDATA(); if (ShouldIndent()) Indent(m_elemContext.m_currentElemDepth - _NUM); writer.Write(_STR); writer.Write(_STR); writer.Write(name); writer.Write(_STR); } } catch (IOException e) { throw new SAXException(e); } if (!m_elemContext.m_startTagOpen && m_doIndent) { m_ispreserve = m_p
public static void F(string msg, params object[] args) { if (!allowWtf) return; StackTraceElement caller = GetCallerStackTraceElement(); string tag = GenerateTag(caller); if (sLevel > LEVEL_FATAL) return; if (args.Length > _NUM) { msg = string.Format(msg, args); } Log.Wtf(tag, msg); }
public void DeleteLeaves(string name) { for (int i = _NUM; i < _leaves.Count; i++) { CatalogTreeLeaf leaf = _leaves[i]; if (name.Equals(leaf.GetName())) { _leaves.RemoveAt(i); i--; // Decrement i to account for the removal } } }
public string ToString() { var s = new System.Text.StringBuilder(); int size = Size(); for (int i = _NUM; i < size; i++) { s.Append(GetInt(i)); } return s.ToString(); }
protected bool Validate(char[] component, int soffset, int eoffset, BitArray generous) { if (eoffset == -_NUM) { eoffset = component.Length - _NUM; } for (int i = soffset; i <= eoffset; i++) { if (!generous.Get(component[i])) { return _BOOL; } } return _BOOL; }
private void BuildPieces() { pieces = new Piece[pathArray.Count]; Paint paint = new Paint(); Matrix matrix = new Matrix(); Canvas canvas = new Canvas(); for (int i = _NUM; i < pieces.Length; i++) { int shadow = Utils.NextInt(Utils.Dp2Px(_NUM), Utils.Dp2Px(_NUM)); Path path = pathArray[i]; RectF r = new RectF(); path.ComputeBounds(r, _BOOL); Bitmap pBitmap = Utils.CreateBitmapSafely((int)r.Width() + shadow * _NUM, (int)r.Height() + shadow * _NUM, Bitmap.Config.ARGB_4444, _NUM); if (pBitmap == null) { pieces[i] = new Piece(-_NUM, -_NUM, null, shadow); continue; } pieces[i] = new Piece((int)r.Left + mTouchPoint.X - shadow, (int)r.Top + mTouchPoint.Y - shadow, pBitmap, shadow); canvas.SetBitmap(pieces[i].Bitmap); BitmapShader mBitmapShader = new BitmapShader(mBitmap, Shader.TileMode.Clamp, Shader.TileMode.Cl
public bool RemoveShutdownHook(Thread hook) { var sm = SecurityManager.Current; if (sm != null) { sm.CheckPermission(new RuntimePermission("shutdownHooks")); } if (hook == null) throw new ArgumentNullException("hook cannot be null"); if (VMState > _NUM) { throw new InvalidOperationException(); } lock (hooksList) { return hooksList.Remove(hook); } }
public void Run() { while (m_keyboardStream != null) { try { if (m_keyboardReadRequest) { string s = m_keyboardStream.ReadLine(); m_keyboardInput.Add(s); m_keyboardReadRequest = false; lock (this) { Monitor.PulseAll(this); } } else { try { Thread.Sleep(_NUM); } catch (ThreadInterruptedException) { } } } catch (IOException) { } } }
public bool BoundScroll() { float curScroll = GetStackScroll(); float newScroll = GetBoundedStackScroll(curScroll); if (newScroll.CompareTo(curScroll) != 0) { SetStackScroll(newScroll); return true; } return false; }
public override AggregateableEvaluation Aggregate(Evaluation evaluation) { m_Incorrect += evaluation.Incorrect(); m_Correct += evaluation.Correct(); m_Unclassified += evaluation.Unclassified(); m_MissingClass += evaluation.M_MissingClass; m_WithClass += evaluation.M_WithClass; if (evaluation.M_ConfusionMatrix != null) { double[][] newMatrix = evaluation.ConfusionMatrix(); if (newMatrix != null) { for (int i = _NUM; i < m_ConfusionMatrix.Length; i++) { for (int j = _NUM; j < m_ConfusionMatrix[i].Length; j++) { m_ConfusionMatrix[i][j] += newMatrix[i][j]; } } } } double[] newClassPriors = evaluation.M_ClassPriors; if (newClassPriors != null && m_ClassPriors != null) { for (int i = _NUM; i < this.m_ClassPriors.Length; i++) { m_ClassPriors[i] = newClassPriors[i]; } } m_ClassPriorsSum = evaluation.M_ClassPri
public void WaitForVolumesToBeVisible(CGRequestParams request) { Scan(request.GetCopies(), request.GetRsets()); }
protected void StartAdditionalServices(Cache cache, Dictionary<string, object> options) { // Clear the cache and endpoint cache.Clear(); // Additional endpoint clearing logic can be added here }
public void UpdateView() { if (fInputElement != null && fParentComposite != null) { IndicatorViewState oldState = fStateMap[fInputElement]; bool reload = fFilesToReoad.Contains(fInputElement); if (reload || oldState == null) { JsonObject jsonObject = DroidsafePluginUtilities.ParseIndicatorFile(fInputElement); if (jsonObject == null) return; fFilesToReoad.Remove(fInputElement); fState = new IndicatorViewState(fInputElement, jsonObject, GetSecuritySpec(), oldState); fStateMap[fInputElement] = fState; } else { fState = oldState; } SetPartName(fState.IndicatorType); ShowPage(PAGE_VIEWER); fTreeViewer.SetInput(fState.JsonObject); if (fTreeViewer.Sorter == null) SortByField(GetSortByField()); } else { SetPartName(DEFAULT_PART_NAME); } }
public override void Paint(Graphics g) { g.DrawImage(image, _NUM, _NUM); if (!paintCalled) { paintCalled = _BOOL; lock (this) { Monitor.PulseAll(this); } } }
public override bool ConnectionAllowed(string eventName) { if (m_listenees.ContainsKey(eventName)) { return _BOOL; } return _BOOL; }
public bool IsPrefixed() { return name.IndexOf(_STR) >= _NUM; }
public void ReleaseAnyConnection(IDbConnection connection) { try { connection.Close(); } catch (Exception ex) { throw new RuntimeException(ex); } }
public QuickActionView AddActions(IEnumerable<Action> actions) { CheckShown(); mActions.AddRange(actions); return this; }
public void AddSeriesRenderer(int index, SimpleSeriesRenderer renderer) { mRenderers.Insert(index, renderer); }
public static bool CopyStream(Stream inputStream, Stream outputStream, CopyListener listener, int bufferSize) { int current = _NUM; int total = (int)inputStream.Length; // Change from is.available() to inputStream.Length if (total <= _NUM) { total = DEFAULT_IMAGE_TOTAL_SIZE; } byte[] bytes = new byte[bufferSize]; int count; if (ShouldStopLoading(listener, current, total)) return _BOOL; while ((count = inputStream.Read(bytes, _NUM, bufferSize)) != -_NUM) { outputStream.Write(bytes, _NUM, count); current += count; if (ShouldStopLoading(listener, current, total)) return _BOOL; } outputStream.Flush(); return _BOOL; }
private float CalcAngle(float value) { return value / mData.GetYValueSum() * _NUM; }
public synchronized void ReturnBuf(byte[] buf) { if (buf == null || buf.Length > mSizeLimit) { return; } mBuffersByLastUse.Add(buf); int pos = mBuffersBySize.BinarySearch(buf, BUF_COMPARATOR); if (pos < _NUM) { pos = -pos - _NUM; } mBuffersBySize.Insert(pos, buf); mCurrentSize += buf.Length; Trim(); }
protected AbstractOptions<T> AbstractOptions<T>(Func<T, T> valueFilter, AbstractOptions baseOptions, IEnumerable<T> values) where T : AbstractOptionValue { if (baseOptions == null) throw new ArgumentNullException(nameof(baseOptions)); if (valueFilter == null) throw new ArgumentNullException(nameof(valueFilter)); if (values == null) throw new ArgumentNullException(nameof(values)); var valueMap = new Dictionary<T, T>(baseOptions.ValueMap); PutAll(valueFilter, values.AsQueryable()); }
public CharSeq Concat(CharSeq another) { return new CharSeq(str + another.str); }
protected override void DoGet(HttpListenerRequest request, HttpListenerResponse response) { response.ContentType = _STR; using (var sendToClient = new StreamWriter(response.OutputStream)) { foreach (var v in this.videos) { sendToClient.Write(v.GetName() + _STR + v.GetUrl() + _STR); } } }
protected void NotifyStateChange(int oldState, int newState) { mState = newState; if (oldState != newState) { FirePropertyChange(_STR, oldState, newState); } }
public void TestGetOrder() { Assert.AreEqual(_STR, BigInteger.ValueOf(_NUM), ecps.GetOrder()); }
private void FormatAndLogThrowable(LoggingLevel level, Color color, string msg, Exception t) { if (!USE_COLORS) { FormatAndLogThrowable(level, msg, t); return; } if (PhotonLogger.Level.Id < level.Id) { return; } DateTime dateTime = DateTime.Now; string formatted = FormatLogLine(level, dateTime, msg); LoggingService.LogThrowable(dateTime, t, formatted, color); }
public static string ConstructQueueRedisKey(string queueName, string shardName, int priority, PinLaterJobState state) { return string.Format("{0}{1}{2}{3}{4}", PINLATER_QUEUE_KEY_PREFIX, shardName, queueName, priority, state.GetValue()); }
public static string DecodeCharset(string s, string charset) { if (s == null) { return null; } try { byte[] buf = System.Text.Encoding.ASCII.GetBytes(s); return System.Text.Encoding.GetEncoding(charset).GetString(buf); } catch (System.Text.EncodingException) { return s; } }
public void AddRestrictedDomain(string domainName) { if (string.IsNullOrEmpty(domainName)) { return; } if (restrictedDomains == null) { restrictedDomains = new List<string>(); } restrictedDomains.Add(domainName); }
public StoppableReadLock(ReadWriteLock lock, CancelCriterion stopper) { this.lock = lock.ReadLock(); this.stopper = stopper; }
public void TestIsAutoIncrement() { try { Assert.IsFalse(rsmd.IsAutoIncrement(_NUM)); } catch (SQLException e1) { Assert.Fail(_STR + e1.Message); e1.PrintStackTrace(); } try { conn.Close(); rsmd.GetSchemaName(_NUM); Assert.Fail(_STR); } catch (SQLException e) { } }
private long ComputeInterfaceHash() { long hash = _NUM; using (var sink = new MemoryStream(_NUM)) { try { using (var md = System.Security.Cryptography.SHA1.Create()) using (var outStream = new CryptoStream(sink, md, CryptoStreamMode.Write)) using (var dataOut = new BinaryWriter(outStream)) { dataOut.Write(INTERFACE_HASH_STUB_VERSION); foreach (var method in remoteMethods) { var methodDoc = method.MethodDoc(); dataOut.Write(methodDoc.Name()); dataOut.Write(Util.MethodDescriptorOf(methodDoc)); var exceptions = methodDoc.ThrownExceptions(); Array.Sort(exceptions, new ClassDocComparator()); foreach (var ex in exceptions) { dataOut.Write(Util.BinaryNameOf(ex)); } } dataOut.Flush(); byte[] hashArray = md.Hash; for (int i = _NUM; i < Math.Min(_NUM, hashArray.Length); i++) { hash += ((long)(hashArray[i] & _NUM)) << (i * _NUM); } } } catch (IOException e) {
public static void Copy(byte[] input, System.IO.Stream output) { if (input == null) throw new ArgumentNullException(nameof(input)); if (output == null) throw new ArgumentNullException(nameof(output)); output.Write(input, 0, input.Length); }
public bool IsEmpty() { return items.Count == 0; }
private static bool RenderFrame(int[] pixels, long gifFileInPtr, int[] metaData) { // Implementation to return the area of the upper 2 region of an array. return true; // Replace with actual implementation logic }
private static int EncodeText(CharSequence msg, int startpos, int count, StringBuilder sb, int initialSubmode) { StringBuilder tmp = new StringBuilder(count); int submode = initialSubmode; int idx = _NUM; while (_BOOL) { char ch = msg[startpos + idx]; switch (submode) { case SUBMODE_ALPHA: if (IsAlphaUpper(ch)) { if (ch == _STR) { tmp.Append((char)_NUM); } else { tmp.Append((char)(ch - _NUM)); } } else { if (IsAlphaLower(ch)) { submode = SUBMODE_LOWER; tmp.Append((char)_NUM); continue; } else if (IsMixed(ch)) { submode = SUBMODE_MIXED; tmp.Append((char)_NUM); continue; } else { tmp.Append((char)_NUM); tmp.Append((char)PUNCTUATION[ch]); break; } } break; case SUBMODE_LOWER: if (IsAlphaLo
public static bool IsValidNCName(string ncName) { if (ncName.Length == _NUM) return _BOOL; char ch = ncName[_NUM]; if (IsNCNameStart(ch) == _BOOL) return _BOOL; for (int i = _NUM; i < ncName.Length; i++) { ch = ncName[i]; if (IsNCName(ch) == _BOOL) { return _BOOL; } } return _BOOL; }
public RepeatedFieldBuilder<MType, BType, IType> AddMessage(MType message) { if (message == null) { throw new ArgumentNullException(); } EnsureMutableMessageList(); messages.Add(message); if (builders != null) { builders.Add(null); } OnChanged(); IncrementModCounts(); return this; }
protected void PrepareDataSet() { dataSet1 = new List<string> { _STR, _STR, _STR }; dataSet2 = new List<string> { _STR, _STR, _STR }; dataSet3 = new List<string> { _STR, _STR, _STR, _STR }; }
private ServiceRegistrar[] BuildServiceRegistrar() { int k = _NUM; ServiceRegistrar[] proxies = new ServiceRegistrar[proxyRegSet.Count]; foreach (ProxyReg reg in proxyRegSet) { proxies[k++] = reg.Proxy; } return proxies; }
private static bool CheckValue(string val) { if (val == null) throw new NullReferenceException(_STR); int len = val.Length; if (len == _NUM) return _BOOL; char[] s = val.ToCharArray(); int[] result = ParseValue(s, _NUM); int endValue = result[_NUM]; bool valuePattern = result[_NUM] == _NUM; if (endValue < len) throw new MalformedObjectNameException(_STR + s[endValue] + _STR); return valuePattern; }
protected void RecoverPrimary(HashSet<string> excludedServers) { if (pool.GetPoolOrCacheCancelInProgress() != null) { return; } bool isDebugEnabled = logger.IsDebugEnabled; if (queueConnections.GetPrimary() != null) { if (isDebugEnabled) { logger.Debug(_STR); } return; } if (isDebugEnabled) { logger.Debug(_STR); } if (printRecoveringPrimary) { logger.Info(LocalizedMessage.Create(LocalizedStrings.QueueManagerImpl_SUBSCRIPTION_MANAGER_REDUNDANCY_SATISFIER_PRIMARY_ENDPOINT_HAS_BEEN_LOST_ATTEMPTIMG_TO_RECOVER)); printRecoveringPrimary = _BOOL; } QueueConnectionImpl newPrimary = null; while (newPrimary == null && pool.GetPoolOrCacheCancelInProgress() == null) { List<QueueConnectionImpl> backups = queueConnections.GetBackups(); newPrimary = PromoteBackupToPrimary(backups); if (newPrimary == null) { break; } if (!AddToConnectionList(newPrimary, _BOOL)) { lock (lockObj
private void RebuildJournal() { lock (this) { if (journalWriter != null) { journalWriter.Close(); } using (StreamWriter writer = new StreamWriter(new FileStream(journalFileTmp, FileMode.Create, FileAccess.Write), Encoding.UTF8, IO_BUFFER_SIZE)) { writer.Write(MAGIC); writer.Write(_STR); writer.Write(VERSION_1); writer.Write(_STR); writer.Write(appVersion.ToString()); writer.Write(_STR); writer.Write(valueCount.ToString()); writer.Write(_STR); writer.Write(_STR); foreach (var entry in lruEntries.Values) { if (entry.currentEditor != null) { writer.Write(DIRTY + _STR + entry.key + _STR); } else { writer.Write(CLEAN + _STR + entry.key + entry.GetLengths() + _STR); } } } File.Move(journalFileTmp.FullName, journalFile.FullName); journalWriter = new StreamWriter(new FileStream(journalFile, FileMode.Create, FileAccess.Write), Encoding.UTF8, IO_BUFFER_SIZE); } }
public void Remove() { List<RecurrenceRule> rulesList = new List<RecurrenceRule>(); rulesList.AddRange(rRulesList); rulesList.AddRange(eRulesList); try { foreach (var rule in rulesList) { rule.Remove(); } info.Remove(); } catch (RecurrenceRuleException rre) { throw new RecurrenceInfoException(rre.Message, rre); } catch (GenericEntityException gee) { throw new RecurrenceInfoException(gee.Message, gee); } }
public void AddNodesInDocOrder(DTMIterator iterator, XPathContext support) { if (!m_mutable) throw new InvalidOperationException(XSLMessages.CreateXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); int node; while (DTM.NULL != (node = iterator.NextNode())) { AddNodeInDocOrder(node, support); } }
protected bool NeedToRefetchData() { long now = DateTimeOffset.Now.ToUnixTimeMilliseconds(); long last = lastDataFetchTime; if ((last + fetchIntervalMillis) < now) { lastDataFetchTime = now; return true; } return false; }
public override DocumentType CreateDocumentType(string qualifiedName, string publicID, string systemID) { CheckQName(qualifiedName); return new DocumentTypeImpl(null, qualifiedName, publicID, systemID); }
public void HandleRequest(RequestContext rc) { base.HandleRequest(rc); LdapLogin(); SSOToken adminSSOToken = GetAdminSSOToken(); IOutput outputWriter = GetOutputWriter(); string realm = GetStringOptionValue(IArgument.REALM_NAME); string patternType = GetStringOptionValue(IArgument.AGENT_TYPE); string filter = GetStringOptionValue(IArgument.FILTER); if (patternType == null) { patternType = _STR; } if (string.IsNullOrEmpty(filter)) { filter = _STR; } string[] params = { realm, patternType, filter }; WriteLog(LogWriter.LOG_ACCESS, Level.INFO, _STR, params); try { AMIdentityRepository amir = new AMIdentityRepository(adminSSOToken, realm); IdSearchResults isr = amir.SearchIdentities(IdType.AGENTONLY, filter, new IdSearchControl()); var results = isr.GetSearchResults(); if (results != null && results.Count > 0) { results.RemoveAll(amIdentity => !MatchType(amIdentity, patternType)); i
public byte[] ToBytes() { try { using (var outStream = new MemoryStream()) { _field.Store(outStream, null); return outStream.ToArray(); } } catch (IOException e) { throw new InvalidOperationException(e.Message, e); } }
public static E FromStyleName<E>(string styleName, Type enumClass, E defaultValue) where E : Enum, Style.HasCssName { if (styleName == null || enumClass == null) { return defaultValue; } foreach (var constant in Enum.GetValues(enumClass)) { var anEnum = (Style.HasCssName)constant; var cssClass = anEnum.GetCssName(); if (cssClass != null && StyleHelper.ContainsStyle(styleName, cssClass)) { return (E)anEnum; } } return defaultValue; }
[HLEUnimplemented] [HLEFunction(nid = _NUM, version = _NUM, checkInsideInterrupt = _BOOL)] public int SceMpegNextAvcRpAu(int mpeg, int streamUid) { if (!streamMap.ContainsKey(streamUid)) { log.Warn(string.Format(_STR, streamUid)); return -_NUM; } int result = HleMpegGetAvcAu(null); if (result != _NUM) { if (log.IsDebugEnabled) { log.Debug(string.Format(_STR, result)); } return result; } videoFrameCount++; startedMpeg = _BOOL; return _NUM; }
private Dictionary<Uri, ExportMask> CreateExportMaskMap(HashSet<Uri> placedMasks) { Dictionary<Uri, ExportMask> exportMaskMap = new Dictionary<Uri, ExportMask>(); var exportMaskIterator = dbClient.QueryIterativeObjects<ExportMask>(placedMasks, true); while (exportMaskIterator.MoveNext()) { ExportMask exportMask = exportMaskIterator.Current; exportMaskMap[exportMask.GetId()] = exportMask; } return exportMaskMap; }
public ImmutableArray2<K> Insert(int index, K obj) { int len = length + _NUM; int newLen = len; bool extendable; if (index == len - _NUM) { AtomicBoolean x = canExtend; if (x != null) { canExtend = null; if (array.Length > index && x.GetAndSet(_BOOL)) { array[index] = obj; return new ImmutableArray2<K>(array, len, _BOOL); } } extendable = _BOOL; newLen = len + _NUM; } else { extendable = _BOOL; } K[] a2 = (K[])new Object[newLen]; DataUtils.CopyWithGap(array, a2, length, index); a2[index] = obj; return new ImmutableArray2<K>(a2, len, extendable); }
public void WriteNoScale(Image c, Component i) { if (page == null) { NewPage(); } int x = x0 + width - (c.Width + charwidth); int y = y0 + (linenum * lineheight) + lineascent; if (page != null && pagenum >= prFirst) { page.DrawImage(c, x, y, c.Width, c.Height, null); } }
public void PutDocumentInCache(int n, Source source) { int cachedNode = GetNode(source); if (DTM.NULL != cachedNode) { if (cachedNode != n) throw new InvalidOperationException(_STR + _STR + source.GetSystemId()); return; } if (source.GetSystemId() != null) { m_sourceTree.AddElement(new SourceTree(n, source.GetSystemId())); } }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public static void Copy(Stream inputStream, Resource output, bool closeInputStream) { Stream outputStream = null; try { outputStream = ToBufferedOutputStream(output.GetOutputStream()); } catch (IOException ioException) { IOUtil.CloseEL(outputStream); throw; } Copy(inputStream, outputStream, closeInputStream, _BOOL); }
public string FadeAudio(string path, string type, double fadeInLength, double stopTime, double fadeOutLength) { var curves = new List<string> { _STR, _STR, _STR, _STR, _STR }; if (!curves.Contains(type)) { throw new InvalidOperationException(_STR + type); } var file = new FileInfo(path); string outFile = file.FullName + _STR; var cmd = new List<string> { soxBin, path, outFile, _STR, type, fadeInLength + _STR }; if (stopTime != -_NUM) { cmd.Add(stopTime + _STR); } if (fadeOutLength != -_NUM) { cmd.Add(fadeOutLength + _STR); } try { int rc = ExecSox(cmd, callback); if (rc != _NUM) { outFile = null; } } catch (IOException e) { Console.WriteLine(e); } catch (InterruptedException e) { Console.WriteLine(e); } ret
public override void Draw(Canvas canvas) { base.Draw(canvas); if (mEdgeGlowTop != null) { int scrollX = GetScrollX(); if (!mEdgeGlowTop.IsFinished()) { int restoreCount = canvas.Save(); int topPadding = mListPadding.Top + mGlowPaddingTop; int bottomPadding = mListPadding.Bottom + mGlowPaddingBottom; int height = GetHeight() - topPadding - bottomPadding; int edgeX = Math.Min(_NUM, scrollX + mFirstPositionDistanceGuess); canvas.Rotate(-_NUM); canvas.Translate(-GetHeight() + topPadding, edgeX); mEdgeGlowTop.SetSize(height, height); if (mEdgeGlowTop.Draw(canvas)) { Invalidate(); } canvas.RestoreToCount(restoreCount); } if (!mEdgeGlowBottom.IsFinished()) { int restoreCount = canvas.Save(); int topPadding = mListPadding.Left + mGlowPaddingTop; int bottomPadding = mListPadding.Right + mGlowPaddingBottom; int height = GetHeight() - topPadding - bottomPadding; int width = GetWidth();
public static ClassProperties LoadProperties(Type[] cls, Properties properties, bool inherit) { ClassProperties cp = new ClassProperties(properties); foreach (Type c in cls) { cp.Load(c, inherit); } return cp; }
public void TestCase20() { byte[] bBytes = { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; byte[] rBytes = { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; int bSign = _NUM; BigInteger aNumber = BigInteger.Zero; BigInteger bNumber = new BigInteger(bSign, bBytes); BigInteger result = aNumber.Add(bNumber); byte[] resBytes = result.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.True(resBytes[i] == rBytes[i]); } Assert.Equal(_NUM, result.Sign); }
private static void FixGPSTimeStamp(XMPNode exifSchema) { XMPNode gpsDateTime = XMPNodeUtils.FindChildNode(exifSchema, _STR, _BOOL); if (gpsDateTime == null) { return; } try { XMPDateTime binGPSStamp; XMPDateTime binOtherDate; binGPSStamp = XMPUtils.ConvertToDate(gpsDateTime.GetValue()); if (binGPSStamp.GetYear() != _NUM || binGPSStamp.GetMonth() != _NUM || binGPSStamp.GetDay() != _NUM) { return; } XMPNode otherDate = XMPNodeUtils.FindChildNode(exifSchema, _STR, _BOOL); if (otherDate == null) { otherDate = XMPNodeUtils.FindChildNode(exifSchema, _STR, _BOOL); } binOtherDate = XMPUtils.ConvertToDate(otherDate.GetValue()); Calendar cal = binGPSStamp.GetCalendar(); cal.Set(Calendar.YEAR, binOtherDate.GetYear()); cal.Set(Calendar.MONTH, binOtherDate.GetMonth()); cal.Set(Calen
protected bool CellConsumesEventType(Cell<object> cell, string eventType) { var consumedEvents = cell.GetConsumedEvents(); return consumedEvents != null && consumedEvents.Contains(eventType); }
public int Read() { int b0 = fInputStream.Read(); if (b0 > _NUM) { throw new IOException(Localizer.GetMessage(_STR, b0.ToString())); } return b0; }
protected void CreateYAxis(int i) { Console.WriteLine($"{i}_STR"); float verHeight = ((graphHeight / labelSize) * i) + border; if (i == largestValueSet.Count - _NUM) canvas.DrawLine(horStart, verHeight, width - border, verHeight, paint); else canvas.DrawLine(horStart, verHeight, border, verHeight, paint); paint.SetColor(Color.Black); int YLabels = (int)size - _NUM - i; string yLabels = string.Format("{0}_STR", YLabels * yAxisRatio); paint.SetTextAlign(Paint.Align.Right); canvas.DrawText(yLabels, horStart - _NUM, verHeight - _NUM, paint); paint.SetTextAlign(Paint.Align.Left); }
public long Max() { return deltaMax.Get(); }
public void Print(File file) { CheckExec(); SecurityManager sm = System.SecurityManager; if (sm != null) { sm.CheckPrintJobAccess(); } CheckActionSupport(Action.PRINT); CheckFileValidation(file); peer.Print(file); }
public void Extend(RuleGrounding other) { if (other.IsFailed()) { groundings.Clear(); return; } Extend(other.GetAlternatives()); }
public override string Expect(Pattern pattern) { string token = Read(pattern); if (token == null) { throw new ParserException(_STR + pattern.pattern() + _STR + document); } return token; }
public void TestGetTableTypesOrder() { DatabaseMetaData dmd = con.GetMetaData(); ResultSet rs = dmd.GetTableTypes(); string previousType = string.Empty; while (rs.Next()) { string type = rs.GetString(1); // Assuming _NUM is 1 Assert.IsTrue(string.Compare(type, previousType) >= 0); previousType = type; } rs.Close(); }
private FileStream UpdateCache(string filePath) { if (!fileNameAndStreamCache.TryGetValue(filePath, out FileStream fileStream)) { try { fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read); fileNameAndStreamCache[filePath] = fileStream; } catch (IOException e) { Logger.Error(e, e.Message); } } return fileStream; }
public void RemoveSwipeListener(SwipeListener listener) { if (mListeners == null) { return; } mListeners.Remove(listener); }
private static string DescriptorForFieldSignature(string signature) { return signature.Replace(_STR, _STR); }
public void AddParameters(NameValuePair[] parameters) { LOG.Trace(_STR); if (parameters == null) { LOG.Warn(_STR); } else { base.ClearRequestBody(); for (int i = _NUM; i < parameters.Length; i++) { params.Add(parameters[i]); } } }
public Atom AnnotationInterfaceToAnnotationClass() { byte[] annotationClassNameTmp = new byte[val.Length + _NUM]; Array.Copy(val, _NUM, annotationClassNameTmp, _NUM, val.Length - _NUM); annotationClassNameTmp[val.Length - _NUM] = _STR; annotationClassNameTmp[val.Length] = _STR; annotationClassNameTmp[val.Length + _NUM] = _STR; return Atom.FindOrCreateUtf8Atom(annotationClassNameTmp); }
public bool ResourceSupportAR(int? id) { if (!id.HasValue) { return _BOOL; } return ResourceSupportAR(id.Value); }
public static Dictionary<string, object> CreateElectronicText(DispatchContext dctx, Dictionary<string, object> context) { Dictionary<string, object> result = CreateElectronicTextMethod(dctx, context); return result; }
public PatternGuardExpr(string namespace, string name, Expression[] parameters, PatternExpr guarded) : this(namespace, name, parameters.ToList(), guarded) { }
public static int IntersectLineLine(Line2D a, Line2D b, Point2D intersect) { double a1x = a.GetX1(), a1y = a.GetY1(); double a2x = a.GetX2(), a2y = a.GetY2(); double b1x = b.GetX1(), b1y = b.GetY1(); double b2x = b.GetX2(), b2y = b.GetY2(); return IntersectLineLine(a1x, a1y, a2x, a2y, b1x, b1y, b2x, b2y, intersect); }
using System; using System.Collections.Generic; public static class Example { public static HashSet<string> UpdateAndGetRemovableOCs(HashSet<string> origSet, HashSet<string> removeOCs) { HashSet<string> returnOCs = removeOCs; if (removeOCs != null && removeOCs.Count > 0) { returnOCs = new HashSet<string>(); foreach (string origOC in origSet) { foreach (string removeOC in removeOCs) { if (string.Equals(origOC, removeOC, StringComparison.OrdinalIgnoreCase)) { returnOCs.Add(origOC); break; } } } foreach (var oc in returnOCs) { origSet.Remove(oc); } } return returnOCs; } }
public static int UnixTimestamp() { return (int)(DateTimeOffset.Now.ToUnixTimeMilliseconds() / 1000); }
public bool IsPDFLicense() { string key = GetSummary(); return key != null && key.Length > _NUM; }
protected void DrawGridBackground(Canvas c) { if (mDrawGridBackground) { c.DrawRect(mViewPortHandler.GetContentRect(), mGridBackgroundPaint); } if (mDrawBorders) { c.DrawRect(mViewPortHandler.GetContentRect(), mBorderPaint); } }
public ZipStreamImpl OpenReadImpl(PathImpl path) { string pathName = path.GetPath(); return OpenReadImpl(pathName); }
private static char[] ZzUnpackCMap(string packed) { char[] map = new char[_NUM]; int i = _NUM; int j = _NUM; while (i < _NUM) { int count = packed[i++]; char value = packed[i++]; do { map[j++] = value; } while (--count > 0); } return map; }
public override void OnTmpFilesCopied(ResultCode result) { DismissLoadingDialog(); Finish(); }
public synchronized OMGraphicList Prepare() { Projection projection = GetProjection(); bool DEBUG_FINE = logger.IsLoggable(Level.FINE); if (projection == null) { if (DEBUG_FINE) { logger.Fine(GetName() + _STR); } return new OMGraphicList(); } if (spatialIndex == null) { if (DEBUG_FINE) { logger.Fine(GetName() + _STR); } OMGraphicList list = GetList(); if (list != null) { list.Generate(projection, _BOOL); return list; } else { return new OMGraphicList(); } } Point2D ul = projection.GetUpperLeft(); Point2D lr = projection.GetLowerRight(); double ulLat = ul.Y; double ulLon = ul.X; double lrLat = lr.Y; double lrLon = lr.X; OMGraphicList list = new OMGraphicList(); if (ProjMath.IsCrossingDateline(ulLon, lrLon, projection.GetScale())) { if (DEBUG_FINE) { logger.Fine(_STR
static WorkQueue CommonSubmitterQueue() { ForkJoinPool p; WorkQueue[] ws; int m; Submitter z; z = submitters.get(); p = commonPool; if (z != null && p != null && (ws = p.workQueues) != null && (m = ws.Length - _NUM) >= _NUM) { return ws[m & z.seed & SQMASK]; } return null; }
private bool IsFieldPackagePrivate(Element attribute) { var modifiers = attribute.GetModifiers(); return !modifiers.Contains(Modifier.Public) && !modifiers.Contains(Modifier.Protected) && !modifiers.Contains(Modifier.Private); }
public void TestDivideRoundHalfUpPos() { string a = _STR; int aScale = -_NUM; string b = _STR; int bScale = _NUM; string c = _STR; int resScale = -_NUM; BigDecimal aNumber = new BigDecimal(new BigInteger(a), aScale); BigDecimal bNumber = new BigDecimal(new BigInteger(b), bScale); BigDecimal result = aNumber.Divide(bNumber, resScale, MidpointRounding.AwayFromZero); Assert.AreEqual(c, result.ToString()); Assert.AreEqual(resScale, result.Scale); }
public bool ReallyRestoreMsWordListFormatForUser(string userId, StreamReader streamReader, bool isAdmin, Errors errors) { if (userId == null) { Errors.Add(errors, errorMessages.ErrorsUserIdIsNull()); return false; } if (streamReader == null) { Errors.Add(errors, errorMessages.ErrorsTheInputStreamReaderIsNull()); return false; } User user = GetUserById(userId); if (user == null) { return false; } bool createdAnyChildren = false; try { long now = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); // Equivalent to System.currentTimeMillis() Entry notebook = CreateEntryNoteBook(user, "", now, null, null, false, false, false, isAdmin, false, errors); if (notebook == null) { return false; } Entry root = GetEntryById(notebook.GetRootId()); List<Entry> parents = new List<Entry> { root }; Dictionary<string, int> bulletToDepth = new Dictionary<string, int>(); string line; int previousDepth = 0;
protected override void OnPageScrolled(int position, float offset, int offsetPixels) { if (mDecorChildCount > _NUM) { int scrollX = GetScrollX(); int paddingLeft = GetPaddingLeft(); int paddingRight = GetPaddingRight(); int width = GetWidth(); int childCount = GetChildCount(); for (int i = _NUM; i < childCount; i++) { var child = GetChildAt(i); var lp = (LayoutParams)child.LayoutParameters; if (!lp.IsDecor) continue; int hgrav = lp.Gravity & Gravity.HorizontalGravityMask; int childLeft = _NUM; switch (hgrav) { default: childLeft = paddingLeft; break; case Gravity.Left: childLeft = paddingLeft; paddingLeft += child.Width; break; case Gravity.CenterHorizontal: childLeft = Math.Max((width - child.MeasuredWidth) / _NUM, paddingLeft); break; case Gravity.Right: childLeft = width - paddingRight - child.MeasuredWidth; paddingRight += child.MeasuredWidth; break; } childL
public static string ConvertCodes(string input) { if (input == null) return input; int current = _NUM; char[] chars = input.ToCharArray(); StringBuilder sb = new StringBuilder(); foreach (char c in chars) { if (current < chars.Length && c == _STR) { char tc = char.ToLower(chars[current + _NUM]); if (tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR || tc == _STR) { sb.Append(_STR); } else { sb.Append(c); } } else { sb.Append(c); } current++; } return sb.ToString(); }
private void LoadText(Stream stream) { StreamReader reader; string line; unitList = new List<DatabaseClusterUnit>(); unitTypesList = new List<UnitType>(); if (stream == null) { throw new Exception(_STR); } reader = new StreamReader(stream); try { lineCount++; line = reader.ReadLine(); while (line != null) { if (!line.StartsWith(_STR)) { ParseAndAdd(line, reader); } line = reader.ReadLine(); } units = new DatabaseClusterUnit[unitList.Count]; units = unitList.ToArray(); unitList = null; unitTypes = new UnitType[unitTypesList.Count]; unitTypes = unitTypesList.ToArray(); unitTypesList = null; } catch (IOException e) { throw new Exception(e.Message + _STR + lineCount); } finally { reader?.Close(); } }
private float CalculateSelectorRadius() { if (mfSelectorRadius == _NUM) { int nHeight = mSelectedView.Height; int nWidth = mSelectedView.Width; int nLargerSide = Math.Max(nWidth, nHeight); mfSelectorRadius = (nLargerSide ^ _NUM) / _NUM; } return mfSelectorRadius; }
private int MeasureWidth(int measureSpec) { int result; int specMode = MeasureSpec.GetMode(measureSpec); int specSize = MeasureSpec.GetSize(measureSpec); if (specMode == MeasureSpec.EXACTLY) { result = specSize; } else { result = (int)mTextPaint.MeasureText(mText) + GetPaddingLeft() + GetPaddingRight(); if (specMode == MeasureSpec.AT_MOST) { result = Math.Min(result, specSize); } } return result; }
public void Test_GetPutByteArray() { const int capacity = _NUM; var buf = new ByteArrayBuffer(capacity); Assert.AreEqual((byte)_NUM, buf.GetByte(_NUM)); Assert.AreEqual((byte)_NUM, buf.GetByte(capacity - _NUM)); int pos = _NUM; for (int i = _NUM; i < LIMIT; i++) { byte[] expected = new byte[new Random().Next(capacity - _NUM)]; new Random().NextBytes(expected); buf.Put(pos, expected); Assert.AreEqual(_NUM, BytesUtil.CompareBytesWithLenAndOffset(_NUM, expected.Length, expected, pos, expected.Length, buf.Array())); byte[] actual = new byte[expected.Length]; buf.Get(pos, actual); Assert.IsTrue(BytesUtil.BytesEqual(expected, actual)); } Assert.AreEqual((byte)_NUM, buf.GetByte(_NUM)); Assert.AreEqual((byte)_NUM, buf.GetByte(pos + capacity - _NUM)); }
public override void OnAdded(RPObject obj) { if (IsUser(obj)) { if (obj.Has(_STR)) { adminlevel = obj.GetInt(_STR); } } }
private string LocalNumber() { StringBuilder s = new StringBuilder(); if (debug) DbgEnter(_STR); try { int lc = _NUM; while (lexer.HasMoreChars()) { char la = lexer.LookAhead(_NUM); if (la == _STR || la == _STR || la == _STR || la == _STR || la == _STR || la == _STR || Lexer.IsHexDigit(la)) { lexer.Consume(_NUM); s.Append(la); lc++; } else if (lc > _NUM) break; else throw CreateParseException(_STR + la); } return s.ToString(); } finally { if (debug) DbgLeave(_STR); } }
public void PathValuesToPixel(List<Path> paths) { for (int i = _NUM; i < paths.Count; i++) { PathValueToPixel(paths[i]); } }
public static byte[] Decode(string s) { return Convert.FromBase64String(s); }
public static void CheckState(bool expression, object errorMessage) { if (ExoPlayerLibraryInfo.ASSERTIONS_ENABLED && !expression) { throw new InvalidOperationException(errorMessage.ToString()); } }
public static void SlideInFromTopAnimator(List<Animator> animators, View view, RecyclerView recyclerView) { AlphaAnimator(animators, view, _NUM); animators.Add(ObjectAnimator.OfFloat(view, _STR, -recyclerView.MeasuredHeight, _NUM)); if (FlexibleAdapter.DEBUG) { Log.Verbose(TAG, _STR); } }
public MutableBigInteger(MutableBigInteger val) { intLen = val.intLen; value = new int[intLen]; Array.Copy(val.value, val.offset, value, 0, intLen); }
[HttpGet("{tenant}")] public void SsoBindingError(string tenant, Locale locale, HttpResponse response) { logger.LogInformation(_STR + locale.ToString() + _STR + tenant); SsoDefaultTenantError(locale, response); }
public CheckpointManager(NetworkParameters parameters, InputStream inputStream = null) { this.parameters = parameters ?? throw new ArgumentNullException(nameof(parameters)); if (inputStream == null) { inputStream = OpenStream(parameters); } inputStream = new BufferedStream(inputStream); inputStream.Mark(_NUM); int first = inputStream.ReadByte(); inputStream.Reset(); if (first == BINARY_MAGIC[_NUM]) { dataHash = ReadBinary(inputStream); } else if (first == TEXTUAL_MAGIC[_NUM]) { dataHash = ReadTextual(inputStream); } else { throw new IOException(_STR); } }
public IndexSegmentIndex(IRawStore store, Checkpoint checkpoint, IndexMetadata metadata, bool readOnly) : base(store, checkpoint, metadata, readOnly) { // loads the compression, using compression }
private string Liveness() { bool isClosed = _BOOL; try { if (IsClosed()) { isClosed = _BOOL; } } catch (SQLException s) { isClosed = _BOOL; } if (isClosed) { return _STR; } return _STR; }
private static void InsertValue(Dictionary<string, List<string>> paramsMap, string paramVal, string parameterName) { if (paramVal != null) { List<string> list = new List<string>(); list.Add(paramVal); paramsMap[parameterName] = list; } }
public Size MinimumLayoutSize(Control target) { Size size; lock (this) { CheckContainer(target); CheckRequests(); size = new Size(xTotal.Minimum, yTotal.Minimum); } Padding insets = target.Padding; size.Width = Math.Min(size.Width + insets.Left + insets.Right, int.MaxValue); size.Height = Math.Min(size.Height + insets.Top + insets.Bottom, int.MaxValue); return size; }
private static void SolveL2RL1L2SVR(Problem prob, double[] w, Parameter param) { int l = prob.l; double C = param.C; double p = param.p; int w_size = prob.n; double eps = param.eps; int i, s, iter = _NUM; int max_iter = param.GetMaxIters(); int active_size = l; int[] index = new int[l]; double d, G, H; double Gmax_old = double.PositiveInfinity; double Gmax_new, Gnorm1_new; double Gnorm1_init = -_NUM; double[] beta = new double[l]; double[] QD = new double[l]; double[] y = prob.y; double[] lambda = new double[] { _NUM / C }; double[] upper_bound = new double[] { double.PositiveInfinity }; if (param.solverType == SolverType.L2R_L1LOSS_SVR_DUAL) { lambda[_NUM] = _NUM; upper_bound[_NUM] = C; } for (i = _NUM; i < l; i++) b
public bool Select(int position) { var v = mAllList[position]; if (mMultiChoiceAdapter != null) { PerformVibrate(); bool _BOOL = PerformSelect(v, position); return _BOOL; } return false; }
public override Enumeration<Option> ListOptions() { var result = new Vector<Option>(); result.AddElement(new Option(_STR + _STR, _STR, _NUM, _STR)); result.AddElement(new Option(_STR + _STR, _STR, _NUM, _STR)); result.AddAll(Collections.List(Super.ListOptions())); return result.Elements(); }
public override void IgnorableWhitespace(XMLString text, Augmentations augs) { if (!fIncludeIgnorableWhitespace || fFilterReject) { return; } if (!fDeferNodeExpansion) { Node child = fCurrentNode.LastChild; if (child != null && child.NodeType == Node.TEXT_NODE) { Text textNode = (Text)child; textNode.AppendData(text.ToString()); } else { Text textNode = fDocument.CreateTextNode(text.ToString()); if (fDocumentImpl != null) { TextImpl textNodeImpl = (TextImpl)textNode; textNodeImpl.SetIgnorableWhitespace(_BOOL); } fCurrentNode.AppendChild(textNode); } } else { int txt = fDeferredDocumentImpl.CreateDeferredTextNode(text.ToString(), _BOOL); fDeferredDocumentImpl.AppendChild(fCurrentNodeIndex, txt); } }
private static void WaitForEditorToBeActive(IEditorPart internalFileEditor, IWorkbenchPage page) { long start = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); long end = start; do { end = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); } while (page.GetActiveEditor() != internalFileEditor && (end - start) < _NUM); if (page.GetActiveEditor() != internalFileEditor) { logger.Warn(_STR); } }
private Solution LargestObjectiveValue(int objective, Population population) { Solution largest = null; double value = double.NegativeInfinity; foreach (Solution solution in population) { if (solution.GetObjective(objective) > value) { largest = solution; value = solution.GetObjective(objective); } } return largest; }
public static int ConvertLatmToY(int latm) { long v = (long)Math.Round((Mercator.MAX_Y - Mercator.Lat2Y(latm / LATLON_TO_LATLONM)) * MAX_AP_UNITS / (Mercator.MAX_Y * _NUM)); if (v > MAX_AP_UNITS) return MAX_AP_UNITS; if (v < _NUM) return -_NUM; return (int)v; }
public void RegisterCallbackHandler(SMSObjectListener changeListener) { objectListener = changeListener; if (!notificationInitialized) { string notificationFlag = SystemProperties.Get(NOTIFICATION_PROPERTY, _STR); if (notificationFlag.Equals(_STR, StringComparison.OrdinalIgnoreCase)) { try { Uri url = WebtopNaming.GetNotificationURL(); PLLClient.AddNotificationHandler(JAXRPCUtil.SMS_SERVICE, new SMSNotificationHandler()); client.Send(_STR, url.ToString(), null, null); if (debug.MessageEnabled()) { debug.Message(_STR + _STR + url); } } catch (Exception e) { if (debug.WarningEnabled()) { debug.Warning(_STR + _STR + e.Message + _STR); } StartPollingThreadIfEnabled(GetCachePollingInterval()); } } else { StartPollingThreadIfEnabled(GetCachePollingInterval()); } notificationInitialized = _BOOL; } }
public static NSObject Parse(Stream input) { byte[] buf = PropertyListParser.ReadAll(input); input.Close(); return Parse(buf); }
protected double CurrentScoreFunction() { double score = _NUM; for (int i = _NUM; i < this.values[this.currentVar1].Length; i++) { for (int j = _NUM; j < this.values[this.currentVar2].Length; j++) { score -= this.currentCounts[this.currentVar1][this.currentVar2][i][j] * Math.Log(this.currentPi[i][j]); } } return score; }
public void GrammaticalityEstimator(HashSet<string> fileNames, int minChar, int maxChar, int charWindow, int minWord, int maxWord, int wordWindow) { int minCharNGram = minChar; int maxCharNGram = maxChar; int minWordNGram = minWord; int maxWordNGram = maxWord; int wordDist = wordWindow; int charDist = charWindow; Dictionary<int, DistributionDocument> distroDocs = new Dictionary<int, DistributionDocument>(); Dictionary<int, DistributionWordDocument> distroWordDocs = new Dictionary<int, DistributionWordDocument>(); StringBuilder sb = new StringBuilder(); foreach (string file in fileNames) { try { using (StreamReader sr = new StreamReader(file)) { string line; while ((line = sr.ReadLine()) != null) { sb.Append(line); } } } catch (FileNotFoundException ex) { Console.Error.WriteLine(ex); } catch (IOException ex) { Console.Error.WriteLine(ex); } sb.Append((char)_NUM); } string fullT
private int CheckZoneLink(StringBuilder outString, string input, int start) { int pos = start + _NUM; StringBuilder temp = new StringBuilder(); string targetString = input.Substring(pos, Math.Min(input.Length, pos + _NUM)); bool prevIsDash = _BOOL; for (int i = _NUM; i < targetString.Length; i++) { char c = targetString[i]; if ((c >= _STR && c <= _STR) || (c >= _STR && c <= _STR)) { temp.Append(c); prevIsDash = _BOOL; } else if (c == _STR) { if (i == _NUM) { return -_NUM; } if (prevIsDash) { temp.Remove(temp.Length - _NUM, _NUM); break; } temp.Append(c); prevIsDash = _BOOL; } else { if (prevIsDash) { temp.Remove(temp.Length - _NUM, _NUM); } break; } } string zone = temp.ToString(); if (zone.Length
public void CheckNextPoissonConsistency(double mean) { const int sampleSize = _NUM; const int minExpectedCount = _NUM; long maxObservedValue = _NUM; const double alpha = _NUM; var frequency = new UnitTestUtils.Frequency<long>(); for (int i = _NUM; i < sampleSize; i++) { long value = randomData.NextPoisson(mean); if (value > maxObservedValue) { maxObservedValue = value; } frequency.AddValue(value); } var poissonDistribution = new PoissonDistribution(mean); int lower = _NUM; while (poissonDistribution.CumulativeProbability(lower - _NUM) * sampleSize < minExpectedCount) { lower++; } int upper = (int)(mean * _NUM); while ((1 - poissonDistribution.CumulativeProbability(upper - _NUM)) * sampleSize < minExpectedCount) { upper--; } int binWidth = _NUM; bool widthSufficient = _BOOL; double lowerBinMass, upperBinMass; while (!widthSufficient) { binWi
public static void CheckValid(double[] x) { foreach (double v in x) { if (double.IsNaN(v)) { throw new InvalidOperationException(_STR + v); } } }
private void LayoutChildren(bool queryAdapter) { int paddingLeft = PaddingLeft; int paddingRight = PaddingRight; int itemMargin = mItemMargin; int colWidth = (Width - paddingLeft - paddingRight - itemMargin * (mColCount - _NUM)) / mColCount; mColWidth = colWidth; int rebuildLayoutRecordsBefore = -_NUM; int rebuildLayoutRecordsAfter = -_NUM; Array.Fill(mItemBottoms, int.MinValue); int childCount = ChildCount; int amountRemoved = _NUM; for (int i = _NUM; i < childCount; i++) { View child = GetChildAt(i); LayoutParams lp = (LayoutParams)child.LayoutParameters; int col = lp.Column; int position = mFirstPosition + i; bool needsLayout = queryAdapter || child.IsLayoutRequested; if (queryAdapter) { View newView = ObtainView(position, child); if (newView == null) { RemoveViewAt(i); if (i - _NUM >= _NUM) InvalidateLayoutRecordsAfterPosition(i - _NUM); amountRemo
protected void ProcessConnectionEvent(ConnectionEvent event) { foreach (var listener in connectionListeners) { switch (event.GetType()) { case ConnectionEvent.Type.Connected: listener.Connected((ConnectedEvent)event); break; case ConnectionEvent.Type.Disconnected: listener.Disconnected((DisconnectedEvent)event); break; case ConnectionEvent.Type.PacketReceived: listener.PacketReceived((PacketReceivedEvent)event); break; } } }
public double Percentage(ConstantRange range) { SortedSet<Constant> sorted = Values(); SortedSet<Constant> contained = new SortedSet<Constant>(); Constant prev = null; foreach (Constant pct in sorted) { if (range.Contains(pct)) contained.Add(pct); else if (contained.Count == 0) prev = pct; } if (contained.Count == _NUM) return _NUM; double prevPercent = prev == null ? _NUM : pcts[prev]; return pcts[contained.Last()] - prevPercent; }
public static void CloseQuiet(IDisposable closeable) { if (closeable != null) { try { closeable.Dispose(); } catch { // Ignored } } }
public override void ReleaseLuceePageContext(PageContext pc, bool register) { if (pc.GetId() < _NUM) return; pc.Release(); ThreadLocalPageContext.Release(); runningPcs.Remove(pc.GetId()); if (pcs.Count < _NUM && pc.GetRequestTimeoutException() == null) { pcs.Push(pc); } }
public void AddEventListener(SIPDialogEventListener newListener) { eventListeners.Add(newListener); }
private bool JournalRebuildRequired() { const int redundantOpCompactThreshold = _NUM; return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.Count; }
private static byte[] StringToByteArray(string str) { if (str == null) { return null; } byte[] srcByte = System.Text.Encoding.UTF8.GetBytes(str); int srcLength = srcByte.Length; byte[] result = new byte[srcLength + _NUM]; Array.Copy(srcByte, _NUM, result, _NUM, srcLength); result[srcLength] = (byte)_NUM; return result; }
public static Properties LoadProperties(ClassLoader classLoader, string classpathResource) { return LoadProperties(null, classpathResource); }
public override bool Equals(object obj) { if (obj is Graph) { return this.ToString().Equals(obj.ToString()); } return false; }
public static NameValuePair ParseNameValuePair(string value, HeaderValueParser parser) { if (value == null) { throw new ArgumentException(_STR); } if (parser == null) { parser = SaveHeaderValueParser.DEFAULT; } CharArrayBuffer buffer = new CharArrayBuffer(value.Length); buffer.Append(value); SaveParserCursor cursor = new SaveParserCursor(_NUM, value.Length); return parser.ParseNameValuePair(buffer, cursor); }
private void PullEvent() { int newScrollValue; int itemDimension; float initialMotionValue, lastMotionValue; switch (GetPullToRefreshScrollDirection()) { case ScrollDirection.Horizontal: initialMotionValue = mInitialMotionX; lastMotionValue = mLastMotionX; break; case ScrollDirection.Vertical: default: initialMotionValue = mInitialMotionY; lastMotionValue = mLastMotionY; break; } switch (mCurrentMode) { case PullMode.PullFromEnd: newScrollValue = (int)Math.Round(Math.Max(initialMotionValue - lastMotionValue, _NUM) / FRICTION); itemDimension = GetFooterSize(); break; case PullMode.PullFromStart: default: newScrollValue = (int)Math.Round(Math.Min(initialMotionValue - lastMotionValue, _NUM) / FRICTION); itemDimension = GetHeaderSize(); break; } SetHeaderScroll(newScrollValue); if (newScrollValue != _NUM && !IsRefreshing()) { float scale = Math.Abs(newScrollValue) / (float)itemDimension; switch
private static MappingObject ObjectAt(PCalLocation loc, MappingObject[,] map) { return map[loc.GetLine(), loc.GetColumn()]; }
public string Parse(FileInfo file, JObject jsonData) { try { var template = GetTemplate(file); if (template != null) { using (var writer = new StringWriter()) { template.Merge(new VelocityContext(jsonData), writer); return writer.ToString(); } } } catch (Exception e) { Log.Error(e.Message, e); } return null; }
private LinkedList<Diff> DiffMain(string text1, string text2, bool checklines, long deadline) { if (text1 == null || text2 == null) { throw new ArgumentException(_STR); } LinkedList<Diff> diffs; if (text1.Equals(text2)) { diffs = new LinkedList<Diff>(); if (text1.Length != _NUM) { diffs.AddFirst(new Diff(Operation.EQUAL, text1)); } return diffs; } int commonLength = DiffCommonPrefix(text1, text2); string commonPrefix = text1.Substring(0, commonLength); text1 = text1.Substring(commonLength); text2 = text2.Substring(commonLength); commonLength = DiffCommonSuffix(text1, text2); string commonSuffix = text1.Substring(text1.Length - commonLength); text1 = text1.Substring(0, text1.Length - commonLength); text2 = text2.Substring(0, text2.Length - commonLength); diffs = DiffCompute(text1, text2, checklines, deadline); if (commonPrefix.Length != _NUM) { di
public Repository(string domain, bool fairLock) { lock = new ReaderWriterLockSlim(fairLock ? LockRecursionPolicy.SupportsRecursion : LockRecursionPolicy.NoRecursion); domainTb = new Dictionary<string, Dictionary<string, NamedObject>>(_NUM); if (domain != null && domain.Length != _NUM) this.domain = string.Intern(domain); else this.domain = ServiceName.DOMAIN; domainTb[this.domain] = new Dictionary<string, NamedObject>(); }
public int CountTokens() { int count = _NUM; bool inToken = _BOOL; for (int i = position, length = string.Length; i < length; i++) { if (delimiters.IndexOf(string[i], _NUM) >= _NUM) { if (returnDelimiters) count++; if (inToken) { count++; inToken = _BOOL; } } else { inToken = _BOOL; } } if (inToken) count++; return count; }
public static synchronized void IndexDocument(CodeIndexDocument codeIndexDocument) { ConcurrentQueue<CodeIndexDocument> queue = new ConcurrentQueue<CodeIndexDocument>(); queue.Enqueue(codeIndexDocument); IndexDocuments(queue); queue = null; }
protected void ResetCommon() { int count = fCommonComponents.Count; for (int i = _NUM; i < count; i++) { XMLComponent c = fCommonComponents[i]; c.Reset(this); } }
private void UpdateVolumeLabels(Volume trustedSrc, Volume invalidTgt) { VirtualArray invalidTgtVA = dbClient.QueryObject<VirtualArray>(invalidTgt.GetVirtualArray()); StringBuilder newLabel = new StringBuilder(); newLabel.Append(trustedSrc.GetLabel()); newLabel.Append(_STR); newLabel.Append(invalidTgtVA.GetLabel()); log.Info(_STR + newLabel.ToString()); invalidTgt.SetLabel(newLabel.ToString()); NamedURI projectURI = invalidTgt.GetProject(); projectURI.SetName(newLabel.ToString()); invalidTgt.SetProject(projectURI); NamedURI tenantURI = invalidTgt.GetTenant(); tenantURI.SetName(newLabel.ToString()); invalidTgt.SetTenant(tenantURI); Volume tgtVplexVolume = VPlexSrdfUtil.GetVplexVolumeFromSrdfVolume(dbClient, invalidTgt); if (tgtVplexVolume != null) { Volume srcVplexVolume = VPlexSrdfUtil.GetVplexVolumeFromSrdfVolume(dbClient, trustedSrc); if (srcVplexVolume != null) { newLabel.Length =
protected void Handle(Exception exception, string title, string message) { Utils.HandleError(GetShell(), exception, title, message); }
private void ReadObject(BinaryReader reader) { // Assuming the context allows for similar functionality in C# ReadDefaultObject(reader); i18n = Environment.GetI18n(); beanContextChildSupport = new BeanContextChildSupport(this); } private void ReadDefaultObject(BinaryReader reader) { // Implement the default object reading logic if needed }
private void PaintForegroundEnabled(Graphics g, int width, int height) { var s = DecodeArrowPath(width, height); g.FillShape(s, enabledColor); }
private static void LogThrow(LogLevel level, string className, string methodName, string message, object[] args, Exception thrown) { var logRecord = new LogRecord(level, message) { LoggerName = logger.Name, SourceClassName = className, SourceMethodName = methodName, Parameters = args, Exception = thrown }; logger.Log(logRecord); }
public void TestToBigIntegerZero() { string a = _STR; BigInteger bNumber = BigInteger.Parse(_STR); BigDecimal aNumber = new BigDecimal(a); BigInteger result = aNumber.ToBigInteger(); Assert.True(result.Equals(bNumber), _STR); }
public void OnAccuracyChanged(Sensor sensor, int accuracy) { if (sensor.GetType() != SensorType.Accelerometer) { return; } if (this.status == AccelListener.Stopped) { return; } this.accuracy = accuracy; }
public bool AllowsTrailingArguments() { return allowsTrailingArguments; }
[AndroidOnly("_STR + _STR")] public void TestSetMaxCRLNumber() { var selector = new X509CRLSelector(); var maxCRL = new BigInteger(_STR); var crl = new TestCRL(maxCRL); selector.SetMaxCRLNumber(null); Assert.IsTrue(selector.Match(crl), "_STR"); selector.SetMaxCRLNumber(maxCRL); Assert.IsTrue(selector.Match(crl), "_STR"); selector.SetMaxCRLNumber(new BigInteger(_STR)); Assert.IsFalse(selector.Match(crl), "_STR"); }
private void EvaluatePopup(MouseEventArgs e) { if (e.Button == MouseButtons.Right) { ContextMenuStrip menu = CreateBookmarkPopupMenu(); if (menu != null) { menu.Show(this, e.X, e.Y); } } }
private bool RemoveTask(Task t, int min) { for (int i = tasks.Count - 1; i >= min; i--) { if (tasks[i] == t) { tasks.RemoveAt(i); if (i < firstPending) { firstPending--; for (int j = threads.Count - 1; j >= _NUM; j--) { TaskThread thread = threads[j]; if (thread.task == t) { if (thread != Thread.CurrentThread) thread.Interrupt(); break; } } } return _BOOL; } } return _BOOL; }
public void TestDivideBigDecimalRoundingModeHalfUp() { string a = _STR; string b = _STR; string c = _STR; BigDecimal aNumber = new BigDecimal(new BigInteger(a)); BigDecimal bNumber = new BigDecimal(new BigInteger(b)); BigDecimal result = aNumber.Divide(bNumber, RoundingMode.HALF_UP); Assert.AreEqual(c, result.ToString()); }
protected void EnsurePathExists(string path) { string[] paths = path.Split(new string[] { _STR }, StringSplitOptions.RemoveEmptyEntries); StringBuilder spath = new StringBuilder(_STR); foreach (string temp in paths) { if (string.IsNullOrWhiteSpace(temp)) { continue; } spath.Append(temp); EnsureExists(spath.ToString(), null, acl, CreateMode.Persistent); spath.Append(_STR); } }
public Type LoadClass(string name, bool resolve) { int i = name.LastIndexOf(_STR); if (i != -_NUM) { SecurityManager sm = SecurityManager.Current; if (sm != null) { sm.CheckPackageAccess(name.Substring(0, i)); } } if (ucp.KnownToNotExist(name)) { Type c = FindLoadedClass(name); if (c != null) { if (resolve) { ResolveClass(c); } return c; } throw new ClassNotFoundException(name); } return base.LoadClass(name, resolve); }
private int MeasureShort(int measureSpec) { int result; int specMode = MeasureSpec.GetMode(measureSpec); int specSize = MeasureSpec.GetSize(measureSpec); if (specMode == MeasureSpec.Exactly) { result = specSize; } else { result = (int)(_NUM * mRadius + GetPaddingTop() + GetPaddingBottom() + _NUM); if (specMode == MeasureSpec.AtMost) { result = Math.Min(result, specSize); } } return result; }
private bool IsListChildUnderClipped(float x, float y) { var listChild = FindListChildUnder(x, y); return listChild != null && IsDescendantClipped(listChild); }
public Rules(Workspace workspace) { this.root = workspace.GetRoot(); this.teamHook = workspace.GetTeamHook(); }
public static void WriteByteArrayToFile(string filePath, byte[] data, bool append) { using (var stream = new FileStream(filePath, append ? FileMode.Append : FileMode.Create, FileAccess.Write)) { stream.Write(data, 0, data.Length); } }
public void Add(T item) { lock (lockObject) { if (items == null) { items = new List<T>(); } items.Add(item); } if (notifyOnChange) { NotifyItemInserted(items.Count); } }
private void CheckPendingCustomMessages() { if (!joiningNodes.Any() && IsLocalNodeCoordinator()) { TcpDiscoveryCustomEventMessage msg; while ((msg = pendingCustomMsgs.TryDequeue(out msg) ? msg : null) != null) { ProcessCustomMessage(msg); if (msg.Verified()) { msgHist.Add(msg); } } } }
private static int DetermineConsecutiveDigitCount(string msg, int startpos) { int count = _NUM; int len = msg.Length; int idx = startpos; if (idx < len) { char ch = msg[idx]; while (IsDigit(ch) && idx < len) { count++; idx++; if (idx < len) { ch = msg[idx]; } } } return count; }
protected int ParseAndAddNode(XmlResourceParser parser, Dictionary<string, TagParser> tagParserMap, List<long> screenIds) { if (TAG_INCLUDE.Equals(parser.GetName())) { int resId = GetAttributeResourceValue(parser, ATTR_WORKSPACE, _NUM); if (resId != _NUM) { return ParseLayout(resId, screenIds); } else { return _NUM; } } mValues.Clear(); ParseContainerAndScreen(parser, mTemp); long container = mTemp[_NUM]; long screenId = mTemp[_NUM]; mValues[Favorites.CONTAINER] = container; mValues[Favorites.SCREEN] = screenId; mValues[Favorites.CELLX] = ConvertToDistanceFromEnd(GetAttributeValue(parser, ATTR_X), mColumnCount); mValues[Favorites.CELLY] = ConvertToDistanceFromEnd(GetAttributeValue(parser, ATTR_Y), mRowCount); if (!tagParserMap.TryGetValue(parser.GetName(), out TagParser tagParser)) { if (LOGD) Log.Debug(TAG, _STR + parser.GetName()); return _NUM;
private float CalculateScrambleImageHeightMultiplier(float multiplier) { switch (currentPuzzle) { case PuzzleUtils.TYPE_777: case PuzzleUtils.TYPE_666: case PuzzleUtils.TYPE_555: case PuzzleUtils.TYPE_222: case PuzzleUtils.TYPE_444: case PuzzleUtils.TYPE_333: return (multiplier / _NUM) * _NUM; case PuzzleUtils.TYPE_CLOCK: return multiplier / _NUM; case PuzzleUtils.TYPE_MEGA: return multiplier / _NUM; case PuzzleUtils.TYPE_PYRA: return (float)(multiplier / Math.Sqrt(_NUM)); case PuzzleUtils.TYPE_SKEWB: return (multiplier / _NUM) * _NUM; case PuzzleUtils.TYPE_SQUARE1: return multiplier; } return multiplier; }
public void TestNumericScalars() { var m = new ObjectMapper(); m.EnableDefaultTyping(); Assert.AreEqual(_STR, m.WriteValueAsString(new object[] { (int)_NUM })); Assert.AreEqual(_STR, m.WriteValueAsString(new object[] { (long)_NUM })); Assert.AreEqual(_STR, m.WriteValueAsString(new object[] { (double)_NUM })); Assert.AreEqual(_STR, m.WriteValueAsString(new object[] { (float)_NUM })); }
protected void CloseCallbacksExceptListener() { CloseCacheCallback(GetCacheLoader()); CloseCacheCallback(GetCacheWriter()); CloseCacheCallback(GetEvictionController()); }
private static int IndexOf(object o, object[] elements, int index, int fence) { if (o == null) { for (int i = index; i < fence; i++) { if (elements[i] == null) return i; } } else { for (int i = index; i < fence; i++) { if (o.Equals(elements[i])) return i; } } return -1; // Assuming -1 is used to indicate "not found" }
private void PopulateProfiles(ProfileList profiles) { profilesComboBox.Items.Clear(); foreach (Profile p in profiles) { profilesComboBox.Items.Add(p); } int count = profilesComboBox.Items.Count; if (count != _NUM) { profilesComboBox.SelectedIndex = count - _NUM; } }
private long CheckFileHeader(BufferedFileDataInput bfdi) { int magic = _NUM; short major = _NUM; short minor = _NUM; long baseSeqno = 0; try { bfdi.WaitAvailable(HEADER_LENGTH, HEADER_WAIT_MILLIS); magic = bfdi.ReadInt(); major = bfdi.ReadShort(); minor = bfdi.ReadShort(); baseSeqno = bfdi.ReadLong(); } catch (IOException e) { throw new THLException(_STR + file.GetAbsolutePath(), e); } if (magic != MAGIC_NUMBER) throw new THLException(_STR + file.GetAbsolutePath() + _STR); if (major != MAJOR_VERSION) throw new THLException(_STR + file.GetAbsolutePath() + _STR); if (minor != MINOR_VERSION) logger.Warn(_STR + file.GetAbsolutePath() + _STR + major + _STR + minor + _STR + MAJOR_VERSION + _STR + MINOR_VERSION); return baseSeqno; }
public float RealAbsolute() { return Math.Abs(mLeft); }
private ExtremumType ExtremumType(int n, double[] alphaExtreme, HyperBoundingBox interval) { if (n == alphaExtreme.Length - _NUM) { return extremumType; } double[] alphaExtremeL = new double[alphaExtreme.Length]; double[] alphaExtremeR = new double[alphaExtreme.Length]; double[] alphaExtremeC = new double[alphaExtreme.Length]; Array.Copy(alphaExtreme, _NUM, alphaExtremeL, _NUM, alphaExtreme.Length); Array.Copy(alphaExtreme, _NUM, alphaExtremeR, _NUM, alphaExtreme.Length); Array.Copy(alphaExtreme, _NUM, alphaExtremeC, _NUM, alphaExtreme.Length); double[] centroid = SpatialUtil.Centroid(interval); for (int i = _NUM; i < n; i++) { alphaExtremeL[i] = centroid[i]; alphaExtremeR[i] = centroid[i]; alphaExtremeC[i] = centroid[i]; } double intervalLength = interval.GetMax(n) - interval.GetMin(n); alphaExtremeL[n] = new Random().NextDouble() * intervalLength + interval.GetMin(n); alphaExtr
public static string Map2OID(string algName) { return alg2OidMap.TryGetValue(algName.ToUpperInvariant(), out var oid) ? oid : null; }
public override IGenerator<ICircle> Construct(string[] args) { return new UniformGenerator(double.Parse(args[_NUM])); }
private bool YyRefill() { if (yy_startRead > _NUM) { Array.Copy(yy_buffer, yy_startRead, yy_buffer, _NUM, yy_endRead - yy_startRead); yy_endRead -= yy_startRead; yy_currentPos -= yy_startRead; yy_markedPos -= yy_startRead; yy_pushbackPos -= yy_startRead; yy_startRead = _NUM; } if (yy_currentPos >= yy_buffer.Length) { char[] newBuffer = new char[yy_currentPos * _NUM]; Array.Copy(yy_buffer, _NUM, newBuffer, _NUM, yy_buffer.Length); yy_buffer = newBuffer; } int numRead = yy_reader.Read(yy_buffer, yy_endRead, yy_buffer.Length - yy_endRead); if (numRead < _NUM) { return false; // Assuming _BOOL corresponds to false } else { yy_endRead += numRead; return true; // Assuming _BOOL corresponds to true } }
protected override void ProcessMouseEvent(MouseEventArgs e) { if (myInplaceComponent != null && (e.Button == MouseButtons.Left && e.Clicks == 1 || e.Button == MouseButtons.Right && e.Clicks == 1)) { FinishEditing(_BOOL); } base.ProcessMouseEvent(e); }
protected void AddModule(Dictionary<Type, IFloodlightModule> moduleMap, ICollection<IFloodlightModule> moduleList, IFloodlightModule module) { ICollection<Type> servs = moduleServiceMap[module]; if (servs != null) { foreach (Type c in servs) { moduleMap[c] = module; } } moduleList.Add(module); }
protected bool HasAllTables() { NaviLogger.Info(_STR); int counter = PostgreSQLHelpers.GetTableCount(GetConnection(), new List<string>(TABLES)); if (counter == _NUM) { return _BOOL; } else if (counter == TABLES.Length) { return _BOOL; } else { throw new InvalidDatabaseException(string.Format(_STR, counter, TABLES.Length)); } }
public List<string> Classify(List<List<Feature>> features) { string[,] featureStringArray = ToStrings(features); Pipe pipe = transducer.GetInputPipe(); Instance instance = new Instance(featureStringArray, null, null, null); instance = pipe.InstanceFrom(instance); Sequence<object> data = (Sequence<object>)instance.GetData(); Sequence<object> untypedSequence = transducer.Transduce(data); Sequence<string> sequence = ReflectionUtil.UncheckedCast(sequence); List<string> returnValues = new List<string>(); for (int i = _NUM; i < sequence.Size(); i++) { string encodedOutcome = sequence.Get(i); returnValues.Add(outcomeEncoder.Decode(encodedOutcome)); } return returnValues; }
public void OnBindHeaderViewHolder(RecyclerView.ViewHolder holder, int position) { OnBindHeaderViewHolder(holder, position, new List<object>()); }
private void UpdateLineList() { if (horizontalLineRadioButton.IsChecked == true) { SetHorizontalLineSelected(); } else { SetVerticalLineSelected(); } UpdateButtonStates(); }
public void Rectangle(double x, double y, double halfWidth, double halfHeight) { if (halfWidth < _NUM) throw new ArgumentException(_STR); if (halfHeight < _NUM) throw new ArgumentException(_STR); double xs = ScaleX(x); double ys = ScaleY(y); double ws = FactorX(_NUM * halfWidth); double hs = FactorY(_NUM * halfHeight); if (ws <= _NUM && hs <= _NUM) { Pixel(x, y); } else { offscreen.Draw(new RectangleF((float)(xs - ws / _NUM), (float)(ys - hs / _NUM), (float)ws, (float)hs)); } Draw(); }
protected void RefreshLoadingViewsSize() { int maximumPullScroll = (int)(GetMaximumPullScroll() * _NUM); int pLeft = GetPaddingLeft(); int pTop = GetPaddingTop(); int pRight = GetPaddingRight(); int pBottom = GetPaddingBottom(); switch (GetPullToRefreshScrollDirection()) { case ScrollDirection.Horizontal: if (mMode.ShowHeaderLoadingLayout()) { mHeaderLayout.SetWidth(maximumPullScroll); pLeft = -maximumPullScroll; } else { pLeft = _NUM; } if (mMode.ShowFooterLoadingLayout()) { mFooterLayout.SetWidth(maximumPullScroll); pRight = -maximumPullScroll; } else { pRight = _NUM; } break; case ScrollDirection.Vertical: if (mMode.ShowHeaderLoadingLayout()) { mHeaderLayout.SetHeight(maximumPullScroll); pTop = -maximumPullScroll; } else { pTop = _NUM; } if (mMode.ShowFooterLoadingLayout()) { mFooterLayout.SetHeight(
public void ReplaceSplitElement(int aIndex, Fragment aSplitElement) { splits[aIndex] = aSplitElement; }
private void StartItemList(StringBuilder result, string rootId) { result.Append(_STR + _STR + rootId + _STR); }
private static int NumInitialSplits(long numRecords) { const int maxSplits = _NUM; const long recordsPerSplit = _NUM; return (int)Math.Min(maxSplits, numRecords / recordsPerSplit + _NUM); }
public void MouseClick(MouseEventArgs e) { if (e.Clicks > _NUM) { GC.Collect(); } }
private static string[] ScanForSources(DirectoryInfo sourceDir, HashSet<string> sourceIncludes, HashSet<string> sourceExcludes) { var ds = new DirectoryScanner(); ds.SetFollowSymlinks(_BOOL); ds.SetBasedir(sourceDir); ds.SetIncludes(sourceIncludes.ToArray()); ds.SetExcludes(sourceExcludes.ToArray()); ds.AddDefaultExcludes(); try { ds.Scan(); } catch (InvalidOperationException) { return new string[_NUM]; } return ds.GetIncludedFiles(); }
private bool HasNextPostponed() { return postponedRoutes.Count > 0; }
public bool HasSingleElement() { return mSelectedWidgets.Count == _NUM; }
public IgfsPath(Uri uri) { if (uri == null) { throw new ArgumentNullException("_STR"); } path = NormalizePath(uri.AbsolutePath); }
public int ToInt(Element el, string attributeName) { return Caster.ToIntValue(el.GetAttribute(attributeName), int.MinValue); }
public static string ReadFully(TextReader reader) { StringWriter writer = new StringWriter(); char[] buffer = new char[_NUM]; int count; try { while ((count = reader.Read(buffer, 0, buffer.Length)) != 0) { writer.Write(buffer, 0, count); } } finally { reader.Close(); } return writer.ToString(); }
public void AddGetters(int assignedPropertyNumber, string propertyName) { foreach (var type in knownTypes) { var getter = type.GetGetter(propertyName); if (!allGetters.TryGetValue(type, out VariantPropertyGetterRow row)) { lock (this) { if (!allGetters.TryGetValue(type, out row)) { row = new VariantPropertyGetterRow(type, new EventPropertyGetter[assignedPropertyNumber + _NUM]); allGetters[type] = row; } } } row.AddGetter(assignedPropertyNumber, getter); } properties.Add(propertyName); }
protected void MarkUsed(Entry entry) { entry.LastUsed = DateTime.Now.Ticks; // Using Ticks as a high-resolution timer }
public override string Execute() { return "SUCCESS"; }
private void HandleStateLeft(IPAddress endpoint, string[] pieces) { Debug.Assert(pieces.Length >= _NUM); var tokens = GetTokensFor(endpoint); if (Logger.IsDebugEnabled) { Logger.Debug(_STR, endpoint, tokens); } Excise(tokens, endpoint, ExtractExpireTime(pieces)); }
public static void Register(string algorithmURI, Type implementingClass) { JavaUtils.CheckRegisterPermission(); if (log.IsLoggable(LogLevel.Fine)) { log.Log(LogLevel.Fine, _STR + algorithmURI + _STR + implementingClass); } if (algorithmHash.TryGetValue(algorithmURI, out var registeredClass)) { object[] exArgs = { algorithmURI, registeredClass }; throw new AlgorithmAlreadyRegisteredException(_STR, exArgs); } algorithmHash[algorithmURI] = implementingClass; }
public KeyValuePersistenceSettings(FileInfo settingsFile) { Stream inStream; try { inStream = new FileStream(settingsFile.FullName, FileMode.Open, FileAccess.Read); } catch (IOException e) { throw new IgniteException(_STR + settingsFile.FullName, e); } init(loadSettings(inStream)); }
public bool ContainsWordBreakingChar(string input) { if (!string.IsNullOrEmpty(input)) { for (int i = _NUM; i < input.Length; i++) { char c = input[i]; if (IsWordBreakingChar(c)) { return _BOOL; } } } return _BOOL; }
private void CheckInteriorIntersections() { foreach (var ss0 in segStrings) { foreach (var ss1 in segStrings) { CheckInteriorIntersections(ss0, ss1); } } }
public bool RemoveElement(object obj) { int index; if ((index = IndexOf(obj, _NUM)) == -_NUM) { return _BOOL; } RemoveElementAt(index); return _BOOL; }
private UnaryOperator<T> Compose<T>(UnaryOperator<T> before, UnaryOperator<T> after) { return null; }
private void AddCdcColSpecs(List<ColumnSpec> cdcSpecs, OneRowChange cdcRowChangeData) { int cdcPos = cdcSpecs.Count; if (cdcColumnsAtFront) cdcPos = _NUM; ColumnSpec spec = cdcRowChangeData.NewColumnSpec(); spec.SetIndex(cdcPos + _NUM); spec.SetName(_STR); spec.SetType(SqlDbType.VarChar); spec.SetLength(_NUM); cdcSpecs.Insert(cdcPos, spec); spec = cdcRowChangeData.NewColumnSpec(); spec.SetIndex(cdcPos + _NUM + _NUM); spec.SetName(_STR); spec.SetType(SqlDbType.Timestamp); cdcSpecs.Insert(cdcPos + _NUM, spec); spec = cdcRowChangeData.NewColumnSpec(); spec.SetIndex(cdcPos + _NUM + _NUM); spec.SetName(_STR); spec.SetType(SqlDbType.BigInt); cdcSpecs.Insert(cdcPos + _NUM, spec); }
public static string ConvertToCSharpFieldName(string name) { int dotIndex = name.IndexOf("_STR"); if (dotIndex >= 0) { name = name.Substring(0, dotIndex); } string[] split = name.Split(new string[] { "_STR" }, StringSplitOptions.None); StringBuilder out = new StringBuilder(); bool first = true; foreach (string section in split) { if (first) { first = false; out.Append(section); } else { out.Append(char.ToUpper(section[0]) + section.Substring(1)); } } return out.ToString(); }
public static SecretKeys GenerateKey() { FixPrng(); using (var keyGen = New RijndaelManaged()) { keyGen.KeySize = AES_KEY_LENGTH_BITS; keyGen.GenerateKey(); SecretKey confidentialityKey = keyGen.Key; byte[] integrityKeyBytes = RandomBytes(HMAC_KEY_LENGTH_BITS / _NUM); SecretKey integrityKey = new SecretKeySpec(integrityKeyBytes, HMAC_ALGORITHM); return new SecretKeys(confidentialityKey, integrityKey); } }
public static void CheckArgument(bool expression, object errorMessage) { if (!expression) { throw new ArgumentException(errorMessage?.ToString()); } }
protected void Execute(string[] sqls, SQLiteConnection db) { string throwSQL = string.Empty; try { if (sqls != null) { foreach (string sql in sqls) { throwSQL = sql; db.Execute(BaseUtility.ChangeCase(sql)); } } } catch (SQLiteException e) { throw new DatabaseGenerateException(DatabaseGenerateException.SQL_ERROR + throwSQL); } }
private void RebuildJournal() { lock (this) { if (journalWriter != null) { journalWriter.Close(); } using (var writer = new StreamWriter(new FileStream(journalFileTmp, FileMode.Create, FileAccess.Write), Encoding.ASCII)) { writer.Write(MAGIC); writer.Write(_STR); writer.Write(VERSION_1); writer.Write(_STR); writer.Write(appVersion.ToString()); writer.Write(_STR); writer.Write(valueCount.ToString()); writer.Write(_STR); writer.Write(_STR); foreach (var entry in lruEntries.Values) { if (entry.currentEditor != null) { writer.Write(DIRTY + _STR + entry.key + _STR); } else { writer.Write(CLEAN + _STR + entry.key + entry.GetLengths() + _STR); } } } if (journalFile.Exists) { RenameTo(journalFile, journalFileBackup, _BOOL); } RenameTo(journalFileTmp, journalFile, _BOOL); journalFileBackup.Delete(); journalWriter = new StreamWriter(new F
private void RefreshDoneButton(bool done) { butDone.Text = done ? Messages.GetString(_STR) : Messages.GetString(_STR); }
private void CreateMigrationTaskPage() { MigrationTaskEditor migrationTaskEditor = new MigrationTaskEditor(migrationTask, GetContainer()); int index = AddPage(migrationTaskEditor.GetControl()); SetPageText(index, _STR); taskListeners.Add(migrationTaskEditor); }
protected void OnPageScrolled(int position, float offset, int offsetPixels) { if (mDecorChildCount > _NUM) { int scrollX = GetScrollX(); int paddingLeft = GetPaddingLeft(); int paddingRight = GetPaddingRight(); int width = GetWidth(); int childCount = GetChildCount(); for (int i = _NUM; i < childCount; i++) { var child = GetChildAt(i); var lp = (LayoutParams)child.GetLayoutParams(); if (!lp.isDecor) continue; int hgrav = lp.gravity & Gravity.HorizontalGravityMask; int childLeft = _NUM; switch (hgrav) { default: childLeft = paddingLeft; break; case Gravity.Left: childLeft = paddingLeft; paddingLeft += child.GetWidth(); break; case Gravity.CenterHorizontal: childLeft = Math.Max((width - child.GetMeasuredWidth()) / _NUM, paddingLeft); break; case Gravity.Right: childLeft = width - paddingRight - child.GetMeasuredWidth(); paddingRight += child.GetMeasuredWidth(); break; } ch
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
private void Expand(int i) { if (count + i <= buf.Length) { return; } byte[] newbuf = mPool.GetBuf((count + i) * _NUM); Array.Copy(buf, _NUM, newbuf, _NUM, count); mPool.ReturnBuf(buf); buf = newbuf; }
public static int ToIPv4Address(string ipAddress) { if (ipAddress == null) throw new ArgumentException("Invalid IP address: null"); string[] octets = ipAddress.Split('.'); if (octets.Length != 4) throw new ArgumentException("Invalid IP address: incorrect number of octets"); int result = 0; for (int i = 0; i < 4; ++i) { int oct = int.Parse(octets[i]); if (oct > 255 || oct < 0) throw new ArgumentException("Invalid IP address: octet out of range"); result |= oct << ((3 - i) * 8); } return result; }
public void CloseCursor(Cursor cursor) { cursor.Close(); cursorMap.Remove(cursor.GetCursorId()); }
private bool HasNext(Pattern pattern) { if (!HasNext()) { return _BOOL; } Matcher matcher = pattern.Matcher(gserValue.Substring(pos, length)); return matcher.Find(); }
void PushInt(int i) { switch (i) { case -1: // Replace with the actual constant for _NUM mv.VisitInsn(Opcodes.ICONST_M1); return; case 0: // Replace with the actual constant for _NUM mv.VisitInsn(Opcodes.ICONST_0); return; case 1: // Replace with the actual constant for _NUM mv.VisitInsn(Opcodes.ICONST_1); return; case 2: // Replace with the actual constant for _NUM mv.VisitInsn(Opcodes.ICONST_2); return; case 3: // Replace with the actual constant for _NUM mv.VisitInsn(Opcodes.ICONST_3); return; case 4: // Replace with the actual constant for _NUM mv.VisitInsn(Opcodes.ICONST_4); return; case 5: // Replace with the actual constant for _NUM mv.VisitInsn(Opcodes.ICONST_5); return; } if (i >= SByte.MinValue && i <= SByte.MaxValue)
public static string XmlNode(string name, string attributes, string content, bool indent) { string start = attributes == null ? name : name + attributes; if (content == null) { return "<" + start + "/>"; } if (indent && content.IndexOf("<") >= 0) { content = "<" + Indent(content) + ">"; } return "<" + start + ">" + content + "</" + name + ">"; } private static string Indent(string content) { // Implementation for indenting the content return content; // Replace with actual indenting logic }
public void Add(int position, T item) { lock (lockObject) { if (items == null) { items = new List<T>(); } items.Insert(position, item); } if (notifyOnChange) { NotifyItemInserted(position); } }
void NotifyFailure(Exception exception) { lock (waitObject) { isComplete = _BOOL; if (exception is MqttException mqttException) { pendingException = mqttException; } else { pendingException = new MqttException(exception); } Monitor.PulseAll(waitObject); if (exception is MqttException lastMqttException) { lastException = lastMqttException; } listener?.OnFailure(this, exception); } }
public static void Transform(StreamSource src, StreamSource stylesheet, Fop fop) { var res = new SaxResult(fop.GetDefaultHandler()); try { var factory = TransformerFactory.NewInstance(); Transformer transformer; if (stylesheet == null) { transformer = factory.NewTransformer(); } else { transformer = factory.NewTransformer(stylesheet); } transformer.SetURIResolver(new LocalResolver(transformer.GetURIResolver())); transformer.Transform(src, res); } catch (Exception e) { throw new FopException(e); } }
public List<string> SplitStringWithDefaultDelimiterEscaped(string inputString) { string delimiter = configurationHelper.GetProperty(ConfigurationValue.FIELD_DATA_DELIMITER); string escapeChar = configurationHelper.GetProperty(ConfigurationValue.FIELD_DATA_DELIMITER_ESCAPE_CHAR); List<string> splitString = new List<string>(); if (!string.IsNullOrWhiteSpace(inputString)) { string regex = $"{Regex.Escape(escapeChar)}{Regex.Escape(delimiter)}"; foreach (string s in Regex.Split(inputString, regex)) { splitString.Add(s.Replace(escapeChar + delimiter, delimiter)); } } return splitString; }
protected bool ReadAvailableBlocking() { char[] buffer = myBuffer; StringBuilder token = myTextBuffer; token.Length = _NUM; bool read = _BOOL; int n; while ((n = myReader.Read(buffer, 0, buffer.Length)) > _NUM) { if (myScheduledSubmitter != null) myScheduledSubmitter.Cancel(false); read = _BOOL; lock (myTextBuffer) { ProcessLine(buffer, token, n); } myScheduledSubmitter = myExecutorService.Submit(myTokenSubmitter); } SubmitToken(); return read; }
public void DeleteObligation(Obligation obligation, int basicBlockId) { var updatedStateMap = new Dictionary<ObligationSet, State>(); foreach (var state in StateIterator()) { CheckCircularity(state, obligation, basicBlockId); var obligationSet = state.GetObligationSet(); obligationSet.Remove(obligation); if (obligationSet.Count > 0) { updatedStateMap[obligationSet] = state; } } ReplaceMap(updatedStateMap); }
private void ClipViewOnTheRight(ref Rect curViewBound, float curViewWidth, int right) { curViewBound.Right = (int)(right - mClipPadding); curViewBound.Left = (int)(curViewBound.Right - curViewWidth); }
public ContentImpl CreateCompoundPackageContent(OleBlobImpl blob, string prettyName, string className, string typeName, ByteBuffer blobBb, int dataBlockLen) { return new CompoundContentImpl(blob, prettyName, className, typeName, blobBb.Position, dataBlockLen); }
protected bool CheckCoverage() { int i; int n; int[] count; Range r; string attrIndex; SubspaceClusterDefinition cl; count = new int[GetNumAttributes()]; for (i = _NUM; i < GetNumAttributes(); i++) { for (n = _NUM; n < GetClusters().Length; n++) { cl = (SubspaceClusterDefinition)GetClusters()[n]; r = new Range(cl.GetAttrIndexRange()); r.SetUpper(GetNumAttributes()); if (r.IsInRange(i)) { count[i]++; } } } attrIndex = _STR; for (i = _NUM; i < count.Length; i++) { if (count[i] == _NUM) { if (attrIndex.Length != _NUM) { attrIndex += _STR; } attrIndex += (i + _NUM).ToString(); } } if (attrIndex.Length != _NUM) { throw new ArgumentException(_STR + _STR + attrIndex + _STR); } return _BOO
private HashSet<int> FindValues(string input) { HashSet<int> results = new HashSet<int>(); foreach (string str in input.Split(_STR)) { if (!str.Equals(_STR)) { results.Add(FindValue(str)); } } return results; }
private static int IndexOf(object[] array, int len, object elt) { for (int i = -1; i < len; i++) { if (elt.Equals(array[i])) return i; } return -1; }
[Obsolete] public void Append(string name, string value) { if (map.TryGetValue(name, out List<string> l)) { l.Add(value); } else { l = new List<string> { value }; map[name] = l; } }
public bool Equals(object obj) { if (obj == this) { return _BOOL; } if (!(obj is Certificate)) { return _BOOL; } Certificate other = (Certificate)obj; try { return StructuralComparisons.GenericEqualityComparer<byte[]>.Default.Equals(GetEncoded(), other.GetEncoded()); } catch (CertificateEncodingException) { return _BOOL; } }
public Statement Between(object former, object later) { statement.Append(_STR); statement.Append(former); statement.Append(_STR); statement.Append(later); return this; }
public byte[] Encode1(string s) { var tmp = new ByteArrayBuffer(s.Length); int nwritten = uc.Encode(s, tmp); int npack = LongPacker.GetByteLength(nwritten); var a = new byte[npack + nwritten]; var dob = new DataOutputBuffer(_NUM, a); try { dob.PackLong(nwritten); dob.Append(tmp.Array(), _NUM, tmp.Pos()); return a; } finally { try { dob.Close(); } catch (IOException e) { throw new RuntimeException(e); } } }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public static Dictionary<object, long> ValueHistogram(GeoTimeSerie gts) { Dictionary<object, long> occurrences = new Dictionary<object, long>(); for (int i = _NUM; i < gts.Values; i++) { object value = GTSHelper.ValueAtIndex(gts, i); if (!occurrences.ContainsKey(value)) { occurrences[value] = _NUM; } else { occurrences[value] += _NUM; } } if (GTSHelper.IsBucketized(gts) && gts.BucketCount != gts.Values) { occurrences[null] = gts.BucketCount - gts.Values; } return occurrences; }
private void UpdateExistingRow(SQLiteDatabase database, long id, bool bumpCount) { string stringId = id.ToString(); database.BeginTransaction(); using (var cursor = database.Query(SongPlayCountColumns.NAME, null, WHERE_ID_EQUALS, new string[] { stringId }, null, null, null)) { if (cursor != null && cursor.MoveToFirst()) { int lastUpdatedIndex = cursor.GetColumnIndex(SongPlayCountColumns.LAST_UPDATED_WEEK_INDEX); int lastUpdatedWeek = cursor.GetInt(lastUpdatedIndex); int weekDiff = mNumberOfWeeksSinceEpoch - lastUpdatedWeek; if (Math.Abs(weekDiff) >= NUM_WEEKS) { DeleteEntry(database, stringId); if (bumpCount) { CreateNewPlayedEntry(database, id); } } else if (weekDiff != _NUM) { int[] playCounts = new int[NUM_WEEKS]; if (weekDiff > _NUM) { for (int i = _NUM; i < NUM_WEEKS - weekDiff; i++) { playCounts[i + weekDiff] = cursor.GetInt(GetCol
private void ComputeWeights(Node node) { int wsum = _NUM; foreach (Node child in node.Children) { ComputeWeights(child); wsum += child.Weight; } node.Weight = Math.Max(_NUM, wsum); }
public Searcher() { searcher = new IndexSearcher(DirectoryReader.Open(FSDirectory.Open(Paths.Get(INDEX_DIR)))); parser = new QueryParser(CONTENT_FIELD, new StandardAnalyzer()); }
public QueryStringQueryBuilder Field(string field) { if (fields == null) { fields = new List<string>(); } fields.Add(field); return this; }
public static Task<R> Combine<R, A, B>(Task<A> a, Task<B> b, Func<A, B, R> function) { return Task.WhenAll(a, b).ContinueWith(t => { return function(a.Result, b.Result); }); }
protected string BuildCreateSchemaStatement() { throw new ReplicatorException(); // Implement logic as needed }
public void TestNegPosFirstShorter() { byte[] aBytes = { unchecked((byte)-_NUM), unchecked((byte)-_NUM), unchecked((byte)-_NUM), unchecked((byte)-_NUM), (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM }; byte[] bBytes = { unchecked((byte)-_NUM), (byte)_NUM, (byte)_NUM, (byte)_NUM, unchecked((byte)-_NUM), unchecked((byte)-_NUM), (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, unchecked((byte)-_NUM), (byte)_NUM, (byte)_NUM, unchecked((byte)-_NUM), (byte)_NUM, (byte)_NUM, unchecked((byte)-_NUM), unchecked((byte)-_NUM) }; int aSign = unchecked((int)-_NUM); int bSign = (int)_NUM; byte[] rBytes = { (byte)_NUM, unchecked((byte)-_NUM), (byte)_
public StreamInfoManager(TwitchApi api, StreamInfoListener listener) { this.listener = listener; this.api = api; pendingRequests = new Dictionary<string, object>(); invalidStreamInfo = new StreamInfo(_STR, listener); invalidStreamInfo.SetRequested(); }
public Sentence AsSentence() { return Sentence.NewConjunction(sentences); }
public bool IsPronoun() { return typeString.Contains(SUFFIX_PRONOUN); }
protected virtual void AppendShortType(StringBuilder sb, FieldType fieldType, int fieldWidth) { sb.Append(_STR); }
using System; using System.Collections.Generic; using System.Text; public class Tokenizer { private const int _NUM = 0; // Placeholder for the index value, adjust as necessary public static List<string> TokenizeString(string source, string separator) { if (separator.Length == _NUM) { return TokenizeString(source, separator[_NUM].ToString()); } List<string> tokenized = new List<string>(); int len = source.Length; StringBuilder buf = new StringBuilder(); for (int iter = _NUM; iter < len; iter++) { char current = source[iter]; if (separator.IndexOf(current) > _NUM) { if (buf.Length > _NUM) { tokenized.Add(buf.ToString()); buf = new StringBuilder(); } } else { buf.Append(current); } } if (buf.Length > _NUM) { tokenized.Add(buf.ToString()); } return tokenized; } }
private void BackupFavorites(BackupDataOutput data) { ContentResolver cr = mContext.ContentResolver; using (Cursor cursor = cr.Query(Favorites.CONTENT_URI, FAVORITE_PROJECTION, GetUserSelectionArg(), null, null)) { cursor.MoveToPosition(-_NUM); while (cursor.MoveToNext()) { long id = cursor.GetLong(ID_INDEX); long updateTime = cursor.GetLong(ID_MODIFIED); Key key = GetKey(Key.FAVORITE, id); mKeys.Add(key); string backupKey = KeyToBackupKey(key); if (!mExistingKeys.Contains(backupKey) || updateTime >= mLastBackupRestoreTime) { WriteRowToBackup(key, PackFavorite(cursor), data); } else { if (DEBUG) { Log.D(TAG, _STR + id); } } } } }
public void Update() { if (lastTime != -_NUM) { long delta = DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond * 100; // Convert to nanoseconds delta -= lastTime; rollingAverage.AddValue(delta); } lastTime = DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond * 100; // Convert to nanoseconds }
public List<ValidationErrorMessage> Validate() { errorMessageIds.Clear(); if (paymentProduct == null) { throw new NullReferenceException(_STR); } foreach (PaymentProductField field in paymentProduct.GetPaymentProductFields()) { if (!IsFieldInAccountOnFileAndNotAltered(field)) { errorMessageIds.AddRange(field.ValidateValue(GetValue(field.Id))); } } return errorMessageIds; }
public KeyStoreState() { }
public CryptoResult(T result, List<K> masterKeys, CiphertextHeaders headers) { result_ = result; masterKeys_ = masterKeys.AsReadOnly(); headers_ = headers; encryptionContext_ = headers_.GetEncryptionContextMap(); }
public void StateChanged(ChangeEvent e) { if (ignoreUpdate) { return; } double value = (double)(_NUM - setpointSlider.Value) / _NUM; SetSetPoint(value); sim.SetSetPoint(value); }
public static string[] ParseDelimitedList(string list, char delimiter) { string delim = string.Concat("_STR", delimiter); var tokens = list + delim + "_STR"; var v = new List<string>(); string lastToken = "_STR"; string word = "_STR"; var st = new System.StringTokenizer(tokens, delim, false); while (st.HasMoreTokens()) { string tok = st.NextToken(); if (lastToken != null) { if (tok.Equals(delim)) { word += lastToken; if (lastToken.Equals(delim)) tok = null; } else { if (!word.Equals("_STR")) v.Add(word); word = "_STR"; } } lastToken = tok; } return v.ToArray(); }
private void InitializeLayout() { GridLayout gl = new GridLayout(_NUM, _NUM); gl.Vgap = _NUM; SetLayout(gl); Add(new JLabel(_STR)); Add(frozenDD); Add(new JLabel(_STR)); Add(tfUpBound); Add(new JLabel(_STR)); Add(tfLowBound); Add(new JLabel(_STR)); Add(tfIncrement); Add(new JLabel(_STR)); Add(tfDelay); SetBorder(BorderFactory.CreateEmptyBorder(_NUM, _NUM, _NUM, _NUM)); }
public override bool IsRunning() { return (frame != null && frame.Visible); }
public static MosaicDefinition CreateMosaicDefinition(Account creator) { return CreateMosaicDefinition(creator, Utils.CreateMosaicId(_STR, _STR), CreateMosaicProperties()); }
public Result Result(SqlNode node, ICollection<Clause> clauses, RelNode rel) { var alias2 = SqlValidatorUtil.GetAlias(node, -_NUM); var alias3 = alias2 ?? _STR; var alias4 = SqlValidatorUtil.Uniquify(alias3, aliasSet, SqlValidatorUtil.EXPR_SUGGESTER); var alias5 = alias2 == null || !alias2.Equals(alias4) ? alias4 : null; return new Result(node, clauses, alias5, new List<Pair> { Pair.Of(alias4, rel.GetRowType()) }); }
private static void TrustAllHttpsCertificates() { SSLContext context; if (_trustManagers == null) { _trustManagers = new TrustManager[] { new FakeX509TrustManager() }; } try { context = SSLContext.GetInstance(_STR); context.Init(null, _trustManagers, new SecureRandom()); } catch (GeneralSecurityException gse) { throw new InvalidOperationException(gse.Message); } HttpsURLConnection.SetDefaultSSLSocketFactory(context.SocketFactory); }
private static bool IsInNeedOfForm(UIComponent component) { return component is ActionSource || component is ActionSource2 || component is EditableValueHolder; }
private void AddInternalListeners() { cbDistribution.ItemListener += cbItemListener; }
public static double SafeSqrt(double x) { const double _NUM = 0; // Assuming _NUM is defined as 0, adjust if needed. return (x < _NUM ? -Math.Sqrt(-x) : Math.Sqrt(x)); }
public static long RunMultiThreaded(IEnumerable<Callable> calls, GridTestSafeThreadFactory threadFactory) { if (!busyLock.EnterBusy()) throw new InvalidOperationException(_STR); var threads = new List<Thread>(); long time; try { foreach (var call in calls) { threads.Add(threadFactory.NewThread(call)); } time = DateTimeOffset.Now.ToUnixTimeMilliseconds(); foreach (var t in threads) { t.Start(); } } finally { busyLock.LeaveBusy(); } foreach (var t in threads) { t.Join(); } time = DateTimeOffset.Now.ToUnixTimeMilliseconds() - time; threadFactory.CheckError(); return time; }
private void BAppend(char ch) { try { mBuff[++mBuffIdx] = ch; } catch (Exception exp) { char[] buff = new char[mBuff.Length << _NUM]; Array.Copy(mBuff, _NUM, buff, _NUM, mBuff.Length); mBuff = buff; mBuff[mBuffIdx] = ch; } }
public void InitializeOwnerReferencesForField(StateManager sm, FieldMetaData fmd) { if (fmd.AssociationType == FieldMetaData.AssociationType.OneToMany) { var collection = sm.Fetch(fmd.GetIndex()) as ICollection; if (collection != null) { foreach (var item in collection) { if (item != null) { _relationsManager.SetOwnerStateManagerForPersistentInstance(item, sm, fmd); } } } } else if (fmd.AssociationType == FieldMetaData.AssociationType.OneToOne || fmd.IsEmbeddedPC()) { var value = sm.Fetch(fmd.GetIndex()); if (value != null) { _relationsManager.SetOwnerStateManagerForPersistentInstance(value, sm, fmd); } } }
public string BuildUnionSubQuery(string typeDiscriminatorColumn, string[] unionColumns, HashSet<string> columnsPresentInTable, int computedColumnsOffset, string typeDiscriminatorValue, string selection, string groupBy, string having) { int unionColumnsCount = unionColumns.Length; string[] projectionIn = new string[unionColumnsCount]; for (int i = _NUM; i < unionColumnsCount; i++) { string unionColumn = unionColumns[i]; if (unionColumn.Equals(typeDiscriminatorColumn)) { projectionIn[i] = _STR + typeDiscriminatorValue + _STR + typeDiscriminatorColumn; } else if (i <= computedColumnsOffset || columnsPresentInTable.Contains(unionColumn)) { projectionIn[i] = unionColumn; } else { projectionIn[i] = _STR + unionColumn; } } return BuildQuery(projectionIn, selection, groupBy, having, null, null); }
public Node(Coordinate pt) : this(pt, new DirectedEdgeStar()) { }
public synchronized void Increase() { if (accuracy > _NUM) { long timePassed = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - lastAdded; if (timePassed > accuracy) { ClearUp(); if (count > _NUM) { data.AddFirst(lastAdded + accuracy); } lastAdded = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); count = _NUM; } count++; } else { ClearUp(); data.AddFirst(DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()); } }
public void Revert(VirtualFile root, List<FilePath> files) { foreach (var paths in VcsFileUtil.ChunkPaths(root, files)) { var handler = new GitSimpleHandler(myProject, root, GitCommand.CHECKOUT); handler.AddParameters("_STR"); handler.EndOptions(); handler.AddParameters(paths); handler.Run(); } }
public static float[] ConcatAllFloat(params float[][] arrays) { int totalLength = 0; int subArrayCount = arrays.Length; for (int i = 0; i < subArrayCount; ++i) { totalLength += arrays[i].Length; } float[] result = new float[totalLength]; int offset = 0; for (int i = 0; i < subArrayCount; ++i) { Array.Copy(arrays[i], 0, result, offset, arrays[i].Length); offset += arrays[i].Length; } return result; }
public TaggedValueIterator(string aLine, bool attemptFirstWord, params string[] tags) { this.aLine = aLine; this.attemptFirstWord = attemptFirstWord; this.tags = tags; tagPos = _NUM; nextResult = GetNextResult(); if (attemptFirstWord) { int a = _NUM; while (a < aLine.Length) { if (aLine[a] == _STR || aLine[a] == _STR || char.IsWhiteSpace(aLine[a])) a++; else break; } int b = a + _NUM; while (b < aLine.Length) { if (char.IsLetterOrDigit(aLine[b]) || aLine[b] == _STR) b++; else break; } if (b - a > _NUM) { nextResult = aLine.Substring(a, b - a); } tagPos = b; } }
public void AscendTree() { if (parentPath != null) { parentPath.Append(PARENT_PATH); return; } File parentTree = CalcParentTree(); if (parentTree != null) { treeFile = parentTree; return; } parentPath = new StringBuilder(ProvideLastName()); parentPath.Append(PARENT_PATH); }
public bool CanRead() { return _is != null; }
void WriteTo(byte[] b, int off) { Array.Copy(buf, _NUM, b, off, count); }
void OnItemDismissed(int position) { var removed = mData[position]; bool wasRemoved = Remove(position); if (wasRemoved && mDataChangeListener != null) { mDataChangeListener.OnItemRemoved(removed, position); } }
public static double NormalPDF(double x, double variance, double meanValue) { double standardDeviation = Math.Sqrt(variance); return (1.0 / (standardDeviation * Math.Sqrt(2.0 * Math.PI))) * Math.Pow(Math.E, -((x - meanValue) * (x - meanValue)) / (2.0 * variance)); }
public static object[] SortCopy(object[] objects, IComparer comparer) { int len = objects.Length; object[] copy = new object[len]; Array.Copy(objects, 0, copy, 0, len); Array.Sort(copy, comparer); return copy; }
public void AddZoomListener(ZoomListener listener) { lock (this) { mZoomListeners.Add(listener); } }
private void ClearRegisters(Instruction start, Instruction end) { for (Instruction p = start; ; p = p.NextInstructionInCodeOrder()) { foreach (var op in p.GetOperands()) { if (op is RegisterOperand rOp) { ClearDepGraphNodeForRegister(rOp.GetRegister()); } } if (p == end) break; } foreach (var r in GenericPhysicalDefUse.EnumerateAllImplicitDefUses(ir)) { ClearDepGraphNodeForRegister(r); } }
public void FireAnnotationSelected(WorkflowAnnotation anno) { List<WorkflowAnnotation> list = new List<WorkflowAnnotation>(); list.Add(anno); FireAnnotationsChanged(AnnotationEvent.SELECTED_ANNOTATION_CHANGED, list); }
public bool UpdateStatsAndReturnIfAllowed() { long now = SystemClock.ElapsedRealtime(); long deltaMs = now - mLastRequestTimestamp; if (deltaMs < mDelayMs) return _BOOL; mLastRequestTimestamp = now; if (deltaMs < _NUM * mDelayMs) { mDelayMs = Math.Min(MAX_DELAY, mDelayMs * _NUM); } else { mDelayMs = MIN_DELAY; } return _BOOL; }
public bool VerifyServerEvidenceMessage(BigInteger serverM2) { if (A == null || M1 == null || S == null) { throw new CryptoException(_STR + _STR); } BigInteger computedM2 = SRP6Util.CalculateM2(digest, N, A, M1, S); if (computedM2.Equals(serverM2)) { M2 = serverM2; return true; } return false; }
public void HandleText(string text) { if (skippingCharacters > _NUM) { if (skippingCharacters >= text.Length) { skippingCharacters -= text.Length; return; } else { text = text.Substring(skippingCharacters); skippingCharacters = _NUM; } } if (rtfDestination != null) { rtfDestination.HandleText(text); return; } Warning(_STR); }
public sealed bool Remove(Uri serviceUri) { bool modified = false; lock (this) { if (aliases.Remove(serviceUri) != null) { modified = true; } var factory = services.Remove(serviceUri); if (factory != null) { modified = true; if (factory is CustomServiceFactory) { customServices.Remove(factory); } } } return modified; }
private static string ReferenceToAttribute(string attrib, bool includeDummies) { while (attrib.StartsWith(_STR)) { attrib = attrib.Substring(_NUM); } if (attrib.StartsWith(_STR)) { if (includeDummies) { attrib = attrib.Substring(_NUM); } else { return null; } } if (!StringUtil.StartsWithChar(attrib, _STR)) { return null; } attrib = attrib.Substring(_NUM); if (StringUtil.StartsWithChar(attrib, _STR)) { string cleanAttribute = null; for (int i = _NUM; i < attrib.Length; i++) { char currChar = attrib[i]; if (currChar == _STR || currChar == _STR) { cleanAttribute = null; break; } else if (currChar == _STR) { cleanAttribute = attrib.Substring(_NUM, i); break; } } attrib = cleanAttribute; } else { for (int i = _NUM; i < attrib.Length; i++)
public EscapedWriter(TextWriter fos) : base(fos) { }
public bool IsExpired(DateTime? date) { if (date == null) { throw new ArgumentException(_STR); } return (cookieExpiryDate != null && cookieExpiryDate <= date.Value); }
public void Record(RecordBuilderImpl recordBuilder) { StoreBitmap(recordBuilder); Stream viewHierarchyDump = null; try { viewHierarchyDump = mAlbum.OpenViewHierarchyFile(recordBuilder.GetName()); mViewHierarchy.Deflate(recordBuilder.GetView(), viewHierarchyDump); mAlbum.AddRecord(recordBuilder); } catch (IOException e) { throw new InvalidOperationException(e.Message, e); } finally { if (viewHierarchyDump != null) { try { viewHierarchyDump.Close(); } catch (IOException e) { Log.Error(_STR, _STR, e); } } } }
protected bool IsCorrectMethod(MethodInfo method, object[] args) { return (proxySignature.Equals(method.Name) && args.Length == _NUM); }
public void TestCase17() { byte[] aBytes = { -_NUM, _NUM, _NUM, _NUM, _NUM, -_NUM, _NUM, -_NUM, _NUM, _NUM }; byte[] bBytes = { _NUM, -_NUM, _NUM, _NUM, _NUM }; int aSign = _NUM; int bSign = _NUM; byte[] rBytes = { _NUM, -_NUM, _NUM, _NUM, _NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger bNumber = new BigInteger(bSign, bBytes); BigInteger result = BigInteger.Remainder(aNumber, bNumber); byte[] resBytes = result.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.True(resBytes[i] == rBytes[i]); } Assert.Equal(_NUM, result.Sign); }
public Metadata.Property.Builder Clear() { Metadata_Property_Builder _defaults = new Metadata.Property.Builder(); type = _defaults.type; boxedType = _defaults.boxedType; name = _defaults.name; capitalizedName = _defaults.capitalizedName; allCapsName = _defaults.allCapsName; getterName = _defaults.getterName; codeGenerator = _defaults.codeGenerator; fullyCheckedCast = _defaults.fullyCheckedCast; accessorAnnotations.Clear(); _unsetProperties.Clear(); _unsetProperties.AddRange(_defaults._unsetProperties); return (Metadata.Property.Builder)this; }
public static float RDistance(vec3 a, vec3 b) { float x = a.m[_NUM] - b.m[_NUM]; float y = a.m[_NUM] - b.m[_NUM]; float z = a.m[_NUM] - b.m[_NUM]; float result = (float)Math.Sqrt(x * x + y * y + z * z); return result; }
public void CheckBackupInfo(FileInfo backupInfoFile, bool backupInMultiVdc) { try { using (FileStream fs = new FileStream(backupInfoFile.FullName, FileMode.Open, FileAccess.Read)) { var properties = new Properties(); properties.Load(fs); CheckVersion(properties); CheckHosts(properties, backupInMultiVdc); } } catch (IOException ex) { log.Warn(_STR, ex); } }
public static string ToLowerCase(string s) { int len = s.Length; StringBuilder sb = null; for (int i = 0; i < len; i++) { char c = s[i]; if ((c >= 'a' && c <= 'z') || (c == ' ')) { if (sb != null) sb.Append(c); } else if ((c >= 'A' && c <= 'Z') || (c == ' ')) { if (sb != null) sb.Append(c); } else if (c >= 'A' && c <= 'Z') { if (sb == null) { sb = new StringBuilder(len); sb.Append(s, 0, i); } sb.Append((char)(c + 32)); // Convert uppercase to lowercase } else { throw new ArgumentException("Invalid character in the string"); } } return sb == null ? s : sb.ToString(); }
public void TestConstructorSignBytesNegative3() { byte[] aBytes = { unchecked((byte)-_NUM), _NUM, _NUM }; int aSign = -_NUM; byte[] rBytes = { unchecked((byte)-_NUM), _NUM, unchecked((byte)-_NUM), unchecked((byte)-_NUM) }; BigInteger aNumber = new BigInteger(aSign, aBytes); byte[] resBytes = aNumber.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.True(resBytes[i] == rBytes[i]); } Assert.Equal(-_NUM, aNumber.Sign); }
public static byte[] BuildOpusComment(string comment) { byte[] data = new byte[_NUM + comment.Length]; WriteOpusComment(data, _NUM, comment); return data; }
public static void AssertProps(UniformPair<EventBean> received, string[] propertyNames, object[] expectedInsert, object[] expectedRemoved) { AssertProps(received.First, propertyNames, expectedInsert); AssertProps(received.Second, propertyNames, expectedRemoved); }
public int Size() { return al.Count; }
public static string ToUpperCase(string src) { if (src == null) { return null; } else { return src.ToUpper(); } }
public IEnumerator<KnowledgeEdge> RequiredEdgesIterator() { HashSet<KnowledgeEdge> edges = new HashSet<KnowledgeEdge>(); foreach (OrderedPair<HashSet<MyNode>> o in requiredRulesSpecs) { HashSet<MyNode> first = o.GetFirst(); foreach (MyNode s1 in first) { HashSet<MyNode> second = o.GetSecond(); foreach (MyNode s2 in second) { if (!s1.Equals(s2)) { edges.Add(new KnowledgeEdge(s1.GetName(), s2.GetName())); } } } } return edges.GetEnumerator(); }
[Obsolete] public void Unlock(LockState<T> lockState) { if (lockState == null) { throw new ArgumentException(_STR); } if (lockState.SetLock != this) { throw new ArgumentException(_STR); } if (lockState.Thread != Thread.CurrentThread) { throw new ArgumentException(_STR); } threadSet.Remove(Thread.CurrentThread); foreach (ReentrantLock lock in lockState.Locks) { lock.Unlock(); } }
public static string FormatJavaDocBox(string text) { if (text == null) throw new ArgumentNullException(nameof(text)); return FormatTextBox(text, JAVA_DOC_WIDTH, JAVADOC_WORDS, JAVA_DOC_SINGLE_LINE_WORDS); }
private static string ForceNumberStringToTwoDigits(string text) { const int _NUM = 2; const string _STR = "0"; while (text.Length < _NUM) { text = _STR + text; } if (text.Length > _NUM) { text = text.Substring(text.Length - _NUM); } return text; }
public void AddDropItem(string name, double probability, int min, int max) { dropsItems.Add(new DropItem(name, probability, min, max)); }
public static List<E> FindByPrimaryKeys<E>(EntityManager em, List<BigInteger> ids, Type type) where E : IIdentifiable { RequireArgument(em != null, _STR); RequireArgument(ids != null && ids.Count > 0, _STR); RequireArgument(type != null, _STR); var query = em.CreateNamedQuery(_STR, type); query.SetHint(_STR, _STR); try { query.SetParameter(_STR, ids); query.SetParameter(_STR, _BOOL); return query.GetResultList<E>(); } catch (NoResultException ex) { return new List<E>(); } }
private void LoadWorkflow(Properties ctx, int AD_Workflow_ID, HttpSession sess) { MWorkflow wf = new MWorkflow(ctx, AD_Workflow_ID, null); MWFNode[] nodes = wf.GetNodes(_BOOL, Env.GetContextAsInt(ctx, _STR)); MWFNode wfn = null; List<int> nodes_ID = new List<int>(); for (int i = _NUM; i < nodes.Length; i++) { wfn = nodes[i]; nodes_ID.Add(wfn.GetAD_WF_Node_ID()); } int[,] imageMap = GenerateImageMap(nodes_ID); sess.SetAttribute(WORKFLOW, wf); sess.SetAttribute(NODES, nodes); sess.SetAttribute(NODES_ID, nodes_ID); sess.SetAttribute(IMAGE_MAP, imageMap); sess.SetAttribute(ACTIVE_NODE, -_NUM); }
public int GetHashCode() { int h = hash; if (h == -_NUM) { try { h = X509CertImpl.GetEncodedInternal(this).GetHashCode(); } catch (CertificateException e) { h = _NUM; } hash = h; } return h; }
public void RemoveFromTags(string removeTag) { tags.Remove(removeTag); FirePropertyChange(TAG, null, removeTag); FirePropertyChange(TAGS_AS_STRING, null, removeTag); }
public static bool Verify(byte[] data, byte[] signature, byte[] pub) { if (data.Length != _NUM || signature.Length > _NUM || pub.Length > _NUM) { throw new ArgumentException("Invalid input lengths."); } var byteBuff = nativeECDSABuffer.Get(); if (byteBuff == null) { byteBuff = new byte[_NUM + _NUM + _NUM + _NUM]; nativeECDSABuffer.Set(byteBuff); } Array.Clear(byteBuff, 0, byteBuff.Length); Buffer.BlockCopy(data, 0, byteBuff, 0, data.Length); BitConverter.GetBytes(signature.Length).CopyTo(byteBuff, data.Length); BitConverter.GetBytes(pub.Length).CopyTo(byteBuff, data.Length + 4); Buffer.BlockCopy(signature, 0, byteBuff, data.Length + 8, signature.Length); Buffer.BlockCopy(pub, 0, byteBuff, data.Length + 8 + signature.Length, pub.Length); return secp256k1_ecdsa_verify(byteBuff) == _NUM; }
protected void DeleteDirectory(DirectoryInfo webAppDirectory) { if (webAppDirectory.Exists && webAppDirectory.Attributes.HasFlag(FileAttributes.Directory)) { foreach (var element in webAppDirectory.GetFileSystemInfos()) { DeleteDirectory(element); } webAppDirectory.Delete(); } else { webAppDirectory.Delete(); } }
[SuppressMessage("STR")] public static void AssertSameIteratorAnyOrder(object[] expected, IEnumerator actual) { AssertSameIteratorAnyOrder(STR, expected, actual); }
public static string FormattingFinishedPercentage(RolloutGroup rolloutGroup, float finishedPercentage) { float tmpFinishedPercentage = _NUM; switch (rolloutGroup.GetStatus()) { case RolloutStatus.READY: case RolloutStatus.SCHEDULED: case RolloutStatus.ERROR: tmpFinishedPercentage = _NUM; break; case RolloutStatus.FINISHED: tmpFinishedPercentage = _NUM; break; case RolloutStatus.RUNNING: tmpFinishedPercentage = finishedPercentage; break; default: break; } return string.Format(_STR, tmpFinishedPercentage); }
public static string GenerateHostName(string vmName, string hostId) { string hostname = vmName + _STR + hostId; if (!hostname.Equals(hostname.ToLower())) { throw new InvalidOperationException(_STR); } return hostname; }
protected void TransferFromFile(FileInfo idFile) { using (StreamReader sr = new StreamReader(idFile.FullName)) { string line; while ((line = sr.ReadLine()) != null) { line = line.Trim(); if (line.Length > _NUM) { Transfer(line); } } } }
public static void OverScrollBy(PullToRefreshBase view, int deltaX, int scrollX, int deltaY, int scrollY, int scrollRange, int fuzzyThreshold, float scaleFactor, bool isTouchEvent) { int deltaValue, currentScrollValue, scrollValue; switch (view.GetPullToRefreshScrollDirection()) { case ScrollDirection.HORIZONTAL: deltaValue = deltaX; scrollValue = scrollX; currentScrollValue = view.GetScrollX(); break; case ScrollDirection.VERTICAL: default: deltaValue = deltaY; scrollValue = scrollY; currentScrollValue = view.GetScrollY(); break; } if (view.IsPullToRefreshOverScrollEnabled() && !view.IsRefreshing()) { Mode mode = view.GetMode(); if (mode.PermitsPullToRefresh() && !isTouchEvent && deltaValue != 0) { int newScrollValue = deltaValue + scrollValue; if (PullToRefreshBase.DEBUG) { Debug.Log($"{LOG_TAG} {deltaX} {scrollX} {deltaY} {scrollY} {newScrollValue} {scrollRange
private static string Unwrap(string expression) { if (expression.StartsWith(_STR)) { expression = expression.Substring(expression.IndexOf(_STR) + _NUM, expression.Length - _NUM); if (expression.EndsWith(_STR)) { expression = expression.Substring(_NUM, expression.LastIndexOf(_STR)); } else { expression = expression.Substring(_NUM, expression.LastIndexOf(_STR)); } } return expression; }
public bool AreAllSegmentsPresent(int datasetSize) { return mPieSegmentList.Count == datasetSize; }
protected int DrawNextEventTimeDiff() { int timeDiff = msgInterval[_NUM] == msgInterval[_NUM] ? _NUM : rng.Next(msgInterval[_NUM] - msgInterval[_NUM]); return msgInterval[_NUM] + timeDiff; }
private int CreateLines(string text, int insertPosition, int offset) { int count = _NUM; int start = _NUM; DelimiterInfo delimiterInfo = NextDelimiterInfo(text, _NUM); while (delimiterInfo != null && delimiterInfo.DelimiterIndex > -_NUM) { int index = delimiterInfo.DelimiterIndex + (delimiterInfo.DelimiterLength - _NUM); if (insertPosition + count >= fLines.Count) fLines.Add(new Line(offset + start, offset + index, delimiterInfo.Delimiter)); else fLines.Insert(insertPosition + count, new Line(offset + start, offset + index, delimiterInfo.Delimiter)); ++count; start = index + _NUM; delimiterInfo = NextDelimiterInfo(text, start); } if (start < text.Length) { if (insertPosition + count < fLines.Count) { Line l = fLines[insertPosition + count]; int delta = text.Length - start; l.Offset -= delta; l.Length += delta; } else { fLines.Add(new Line(offset + start, text.Length - _NUM, n
public static double Sqrt(double x) { return Math.Sqrt(x); }
private ResultPointsAndTransitions TransitionsBetween(ResultPoint from, ResultPoint to) { int fromX = (int)from.GetX(); int fromY = (int)from.GetY(); int toX = (int)to.GetX(); int toY = (int)to.GetY(); bool steep = Math.Abs(toY - fromY) > Math.Abs(toX - fromX); if (steep) { int temp = fromX; fromX = fromY; fromY = temp; temp = toX; toX = toY; toY = temp; } int dx = Math.Abs(toX - fromX); int dy = Math.Abs(toY - fromY); int error = -dx >> 1; int ystep = fromY < toY ? 1 : -1; int xstep = fromX < toX ? 1 : -1; int transitions = 0; bool inBlack = image.Get(steep ? fromY : fromX, steep ? fromX : fromY); for (int x = fromX, y = fromY; x !=
public static string ToBits(long x) { StringBuilder sb = new StringBuilder(); long t = x; for (int i = _NUM; i < _NUM; i++) { if ((i & _NUM) == _NUM && i > _NUM) { sb.Append(_STR); } sb.Append(t < _NUM ? _STR : _STR); t = t << _NUM; } Debug.Assert(t == _NUM); return sb.ToString(); }
public static byte[] EncodeUrl(BitArray urlsafe, byte[] bytes) { if (bytes == null) return null; if (urlsafe == null) urlsafe = WWW_FORM_URL; // Assuming WWW_FORM_URL is defined elsewhere using (var buffer = new MemoryStream()) { for (int i = _NUM; i < bytes.Length; i++) { int b = bytes[i]; if (b < _NUM) b = _NUM + b; // Assuming _NUM is defined elsewhere if (urlsafe[b]) { if (b == _STR) b = _STR; // Assuming _STR is defined elsewhere buffer.WriteByte((byte)b); } else { buffer.WriteByte((byte)_STR); // Assuming _STR is defined elsewhere char hex1 = Char.ToUpper((char)('0' + ((b >> _NUM) & _NUM))); // Assuming (_NUM & _NUM) is defined char hex2 = Char.ToUpper((char)('0' + (b & _NUM))); // Assuming (_NUM & _NUM) is defined buffer.WriteByte((byte)hex1); buf
public MessageTokenizer(IDiscordClient client, string content) { if (content == null) throw new ArgumentException("Content cannot be null."); if (content.Length == _NUM) throw new ArgumentException("Content length must not be equal to _NUM."); if (client == null) throw new ArgumentException("Client cannot be null."); this.content = content; this.client = client; StepForward(_NUM); }
public void Await(int ID) { if (parties == _NUM) return; bool startCondition = competitionCondition; int competingFor = (locks.Length * _NUM - _NUM - ID) / _NUM; while (competingFor >= _NUM) { var node = locks[competingFor]; if (node.TryLock()) { lock (node) { while (competitionCondition == startCondition) { Monitor.Wait(node); } } node.Unlock(); WakeUpTarget(competingFor * _NUM + _NUM); WakeUpTarget(competingFor * _NUM + _NUM); return; } else { if (competingFor == _NUM) break; competingFor = (competingFor - _NUM) / _NUM; } } competitionCondition = !competitionCondition; WakeUpTarget(_NUM); }
private void LoadTranslationsCacheIfEmpty() { if (translationCache.Count == 0) { foreach (var translation in translations) { if (translation.GetLocale() != null && translation.GetProperty() != null && !string.IsNullOrEmpty(translation.GetValue())) { string key = ObjectTranslation.GetCacheKey(translation.GetLocale(), translation.GetProperty()); translationCache[key] = translation.GetValue(); } } } }
public NavMouseMode(bool shouldConsumeEvents) : base(modeID, shouldConsumeEvents) { SetModeCursor(System.Drawing.Cursors.Cross); rectAttributes.SetLinePaint(System.Drawing.Color.Gray); rectAttributes.SetMattingPaint(System.Drawing.Color.LightGray); rectAttributes.SetMatted(_BOOL); }
public void AddEvent(SimEvent newEvent) { newEvent.SetSerial(serial++); sortedSet.Add(newEvent); }
public static void StopTimer(string name) { long stopTime = Stopwatch.GetTimestamp(); if (!openTimers.TryRemove(name, out long startTime)) { throw new ArgumentException(_STR); } SummaryStatistics statistics; if (!data.TryGetValue(name, out statistics)) { statistics = new SummaryStatistics(); data[name] = statistics; } statistics.AddValue(stopTime - startTime); }
public string ToStringSummary() { int resultsetLength; string result; string titles; int i; int j; if (m_NonSigWins == null) return _STR; resultsetLength = _NUM + Math.Max((int)(Math.Log(getColCount()) / Math.Log(_NUM)), (int)(Math.Log(getRowCount()) / Math.Log(_NUM))); result = _STR; titles = _STR; result += _STR; result += _STR + _STR; result += _STR; result += _STR; for (i = _NUM; i < getColCount(); i++) { if (getColHidden(i)) continue; titles += _STR; result += _STR; titles += _STR + Utils.PadLeft(_STR + getSummaryTitle(i), resultsetLength * _NUM + _NUM); } result += _STR; result += titles + _STR; for (i = _NUM; i < getColCount(); i++) { if (getColHidden(i)) continue; for (j = _NUM; j < getColCount(); j++)
public static FileInfo CreateTempPath(string path) { string sep = Path.DirectorySeparatorChar.ToString(); string tempDirPath = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), path); DirectoryInfo tempDir = new DirectoryInfo(tempDirPath); if (!tempDir.Exists) { tempDir.Create(); if (!tempDir.Exists) { bool status = tempDir.Delete(); throw new IOException($"Failed to create directory: {tempDir.FullName}, deletion status: {status}"); } } // This is an equivalent of Java's deleteOnExit AppDomain.CurrentDomain.ProcessExit += (s, e) => tempDir.Delete(true); return tempDir; }
public void HSpan(double start, double end, Paint color, string legend) { LegendText legendText = new LegendText(color, legend); comments.Add(legendText); plotElements.Add(new HSpan(start, end, color, legendText)); }
public StateInteractive ExtendToWholeConnections() { HashSet<BrdItem> selectedItems = new HashSet<BrdItem>(); foreach (BrdItem currItem in itemsList) { if (currItem is BrdConnectable) { selectedItems.UnionWith(currItem.GetConnectionItems()); } } if (selectedItems.Count == 0) { return returnState; } itemsList = selectedItems; ActLogStartScope(LogfileScope.EXTEND_TO_WHOLE_CONNECTIONS); Filter(); iBrd.Repaint(); return this; }
public static IKeyBuilder NewInstance(int capacity, CollatorEnum collatorChoice, CultureInfo locale, object strength, DecompositionEnum mode) { if (collatorChoice == CollatorEnum.ASCII) { return new KeyBuilder(capacity); } if (locale == null) { locale = CultureInfo.CurrentCulture; if (log.IsInfoEnabled) { log.Info(_STR + locale.DisplayName); } } bool icu = collatorChoice == CollatorEnum.ICU; if (icu && !DefaultKeyBuilderFactory.IsICUAvailable()) { throw new NotSupportedException(DefaultKeyBuilderFactory.ICU_NOT_AVAILABLE); } byte[] buf = CreateBuffer(capacity); int len = _NUM; switch (collatorChoice) { case CollatorEnum.ICU: return new KeyBuilder(new ICUSortKeyGenerator(locale, strength, mode), len, buf); case CollatorEnum.JDK: return new KeyBuilder(new JDKSortKeyGenerator(locale, strength, mode), len, buf); default: throw new NotSupportedException(_STR + collatorChoice); } }
private List<Node> PossibleParents(Node x, List<Node> nodes, IKnowledge knowledge) { List<Node> possibleParents = new List<Node>(); string _x = x.GetName(); foreach (Node z in nodes) { string _z = z.GetName(); if (PossibleParentOf(_z, _x, knowledge)) { possibleParents.Add(z); } } return possibleParents; }
protected void ConfigureFromProperties(Stream stream, string rootDirectory) { var props = new Properties(); props.Load(stream); props.Put(ROOT_DIR_PATH_PROPERTY, rootDirectory); string oldPrefix = GetPropertyPrefix(); SetProperties(null, props); SetPropertyPrefix(oldPrefix); }
public SqlConnection OpenNewConnection() { SqlConnection newConn = new SqlConnection(url, user, password); newConn.Open(); if (url.StartsWith(_STR)) { using (SqlCommand command = new SqlCommand()) { command.Connection = newConn; // No action needed, just initializes the command. } } else if (url.StartsWith(_STR)) { using (SqlCommand command = new SqlCommand(_STR, newConn)) { command.ExecuteNonQuery(); } } return newConn; }
public void AddRelations(Task task, IEnumerable<ObjectId> projectIds, string fieldName) { List<Project> newProjectList = new List<Project>(); IEnumerable<Project> projectsToAdd = projectRepository.FindAll(projectIds, null); foreach (var project in projectsToAdd) { newProjectList.Add(project); } try { var existingProjects = PropertyUtils.GetProperty(task, fieldName); if (existingProjects != null) { foreach (var project in (IEnumerable<Project>)existingProjects) { newProjectList.Add(project); } } } catch (Exception ex) { throw new RuntimeException(ex); } try { PropertyUtils.SetProperty(task, fieldName, newProjectList); } catch (Exception ex) { throw new RuntimeException(ex); } taskRepository.Save(task); }
protected void DoFloodBDDP(long pinSwitch, OFPacketIn pi, FloodlightContext cntx) { TopologyInstance ti = GetCurrentInstance(_BOOL); HashSet<long> switches = ti.GetSwitchesInOpenflowDomain(pinSwitch); if (switches == null) { switches = new HashSet<long>(); switches.Add(pinSwitch); } foreach (long sid in switches) { IOFSwitch sw = floodlightProvider.GetSwitch(sid); if (sw == null) continue; Collection<short> enabledPorts = sw.GetEnabledPortNumbers(); if (enabledPorts == null) continue; HashSet<short> ports = new HashSet<short>(enabledPorts); HashSet<short> portsKnownToTopo = ti.GetPortsWithLinks(sid); if (portsKnownToTopo != null) { foreach (short p in portsKnownToTopo) { NodePortTuple npt = new NodePortTuple(sid, p); if (ti.IsBroadcastDomainPort(npt) == _BOOL) { ports.Remove(p); } } } Hash
public void SleepMillis(long millis) { try { System.Threading.Thread.Sleep((int)millis); } catch (System.Threading.ThreadInterruptedException e) { logger.Error(e, e); } }
private static void VerifyWriteSetNotFound(BTree btree) { log.Info(_STR); for (int i = _NUM; i < _NUM; i++) { if (btree.Contains(i)) { throw new InvalidOperationException(_STR + i); } } }
private double CalculateEntropy(params double[] masses) { double res = _NUM; foreach (double d in masses) { res -= (d == _NUM) ? _NUM : d * Math.Log(d); } return res / LOG2; }
public static bool IsValidNmtoken(string nmtoken) { if (nmtoken.Length == _NUM) return _BOOL; for (int i = _NUM; i < nmtoken.Length; i++) { char ch = nmtoken[i]; if (!IsName(ch)) { return _BOOL; } } return _BOOL; }
public override void OnMouseDown(MouseEventArgs e) { m_frameLimiter.SetRepeats(_BOOL); if ((e.Button & MouseButtons.Left) != 0 && !e.alt && m_mouseState == _NUM && m_scaling == _NUM) { if ((e.Modifiers & Keys.Control) != 0 && (e.Modifiers & Keys.Shift) == 0) { m_mouseState = _NUM; } else if ((e.Modifiers & Keys.Shift) != 0 && (e.Modifiers & Keys.Control) == 0) { m_oldMousePos.Width = e.X; m_oldMousePos.Height = e.Y; m_newMousePos.Width = e.X; m_newMousePos.Height = e.Y; m_mouseState = _NUM; using (Graphics g = this.CreateGraphics()) { g.FillRectangle(new SolidBrush(m_ZoomBoxColor ?? Color.Black), m_oldMousePos.Width, m_oldMousePos.Height, m_newMousePos.Width - m_oldMousePos.Width, m_newMousePos.Height - m_oldMousePos.Height); g.ExcludeClip(new Rectangle(m_oldMousePos.Width
private static double ParseDoubleValue(string parseString, string openTag, string closeTag, DataTypeValidationException exception) { string tagValue = ParseStringValue(parseString, openTag, closeTag, exception); double doubleValue; try { doubleValue = double.Parse(tagValue); } catch (FormatException e) { throw e; } return doubleValue; }
public void PutString(string s) { byte[] bytes = System.Text.Encoding.UTF8.GetBytes(s); int length = bytes.Length; int endAt = m_index + length + _NUM; if (endAt > m_content.Length) throw new IndexOutOfRangeException($"{endAt} + {_STR} + {m_content.Length}"); Array.Copy(bytes, _NUM, m_content, m_index, length); m_index += length; m_content[m_index++] = _STR; DebugAppendString(s); }
private void PullEvent() { int newScrollValue; int itemDimension; float initialMotionValue, lastMotionValue; switch (GetPullToRefreshScrollDirection()) { case ScrollDirection.Horizontal: initialMotionValue = mInitialMotionX; lastMotionValue = mLastMotionX; break; case ScrollDirection.Vertical: default: initialMotionValue = mInitialMotionY; lastMotionValue = mLastMotionY; break; } switch (mCurrentMode) { case PullToRefreshMode.PullFromEnd: newScrollValue = (int)Math.Round(Math.Max(initialMotionValue - lastMotionValue, _NUM) / FRICTION); itemDimension = GetFooterSize(); break; case PullToRefreshMode.PullFromStart: default: newScrollValue = (int)Math.Round(Math.Min(initialMotionValue - lastMotionValue, _NUM) / FRICTION); itemDimension = GetHeaderSize(); break; } SetHeaderScroll(newScrollValue); if (newScrollValue != _NUM && !IsRefreshing()) { float scale = Math.Abs(newScrollValue) / itemDimension; swi
public void AddRtcpListener(RtcpEventListener listener) { listeners.Add(listener); }
protected override void EnsureNumberOfColumns(int numberOfColumns) { if (data.Length >= numberOfColumns) { return; } double[] newData = new double[numberOfColumns]; Array.Copy(data, _NUM, newData, _NUM, data.Length); data = newData; }
private static BitMatrix ExtractPureBits(BitMatrix image) { int[] leftTopBlack = image.GetTopLeftOnBit(); int[] rightBottomBlack = image.GetBottomRightOnBit(); if (leftTopBlack == null || rightBottomBlack == null) { throw NotFoundException.GetNotFoundInstance(); } float moduleSize = ModuleSize(leftTopBlack, image); int top = leftTopBlack[NUM]; int bottom = rightBottomBlack[NUM]; int left = leftTopBlack[NUM]; int right = rightBottomBlack[NUM]; if (left >= right || top >= bottom) { throw NotFoundException.GetNotFoundInstance(); } if (bottom - top != right - left) { right = left + (bottom - top); } int matrixWidth = (int)Math.Round((right - left + NUM) / moduleSize); int matrixHeight = (int)Math.Round((bottom - top + NUM) / moduleSize); if (matrixWidth <= NUM || matrixHeight <= NUM) { throw NotFoundException.GetNotFoundInstance(); } if (matrixHeight != matrixWidth) {
public override void Error(string domain, string key, XMLParseException exception) { if (fErrorHandler != null) { SAXParseException saxException = CreateSAXParseException(exception); try { fErrorHandler.Error(saxException); } catch (SAXParseException e) { throw CreateXMLParseException(e); } catch (SAXException e) { throw CreateXNIException(e); } } }
public static bool Connect(FileDescriptor fd, IPAddress inetAddress, int port) { try { return IoBridge.Connect(fd, inetAddress, port, _NUM); } catch (SocketException ex) { throw new InvalidOperationException("Socket connection failed", ex); } }
public bool IsWhitespace(int nodeHandle) { int type = GetNodeType(nodeHandle); Node node = GetNode(nodeHandle); if (type == TEXT_NODE || type == CDATA_SECTION_NODE) { FastStringBuffer buf = StringBufferPool.Get(); while (node != null) { buf.Append(node.GetNodeValue()); node = LogicalNextDOMTextNode(node); } bool isWhitespace = buf.IsWhitespace(_NUM, buf.Length); StringBufferPool.Free(buf); return isWhitespace; } return _BOOL; }
public CStatusPanel(BackEndDebuggerProvider debuggerProvider) { base(new BorderLayout()); Preconditions.CheckNotNull(debuggerProvider, _STR); m_label.ForeColor = Color.Black; Add(m_label); m_synchronizer = new CStatusLabelSynchronizer(m_label, debuggerProvider); }
public override bool Open(string access) { if (access.Equals(_STR)) { try { iStream = new FileImageInputStream(new File(filePath)); parser = new LabelParser(); metadata = parser.ParseHeader(iStream); iStream.Close(); iStream = null; } catch (IOException e) { try { iStream.Close(); } catch (Exception x) { } return _BOOL; } } return base.Open(access); }
void DeregisterSpring(Spring spring) { if (spring == null) { throw new ArgumentException(_STR); } mActiveSprings.Remove(spring); mSpringRegistry.Remove(spring.GetId()); }
[Nullable] public string FileName() { return JavaLogger.FileName(delegate); }
public static BNode ParseBNode(string nTriplesBNode, ValueFactory valueFactory) { if (nTriplesBNode.StartsWith(_STR)) { return valueFactory.CreateBNode(nTriplesBNode.Substring(_NUM)); } else { throw new ArgumentException(_STR + nTriplesBNode); } }
public void ResetPSRs() { pilotRolls.Clear(); }
public static void Sort(byte[] array) { DualPivotQuicksort.Sort(array); }
public void ClosePopup() { if (openedSubPopup != null) { openedSubPopup.ClosePopup(); } RemoveFromParent(); }
public void FreeObject(int id) { if (cacheId == id) { cacheId = -_NUM; cache = null; } map.Remove(id); }
private void StretchViewVertically(View view, int crossSize) { var lp = (LayoutParams)view.LayoutParameters; int newHeight = crossSize - lp.TopMargin - lp.BottomMargin; newHeight = Math.Max(newHeight, _NUM); view.Measure(MeasureSpec.MakeMeasureSpec(view.MeasuredWidth, MeasureSpecMode.Exactly), MeasureSpec.MakeMeasureSpec(newHeight, MeasureSpecMode.Exactly)); }
public static IPAddress HexToInet6Address(string addrHexString) { try { return NumericToInetAddress(string.Format("{0}:{1}:{2}:{3}:{4}:{5}:{6}:{7}", addrHexString.Substring(0, 4), addrHexString.Substring(4, 4), addrHexString.Substring(8, 4), addrHexString.Substring(12, 4), addrHexString.Substring(16, 4), addrHexString.Substring(20, 4), addrHexString.Substring(24, 4), addrHexString.Substring(28, 4))); } catch (Exception e) { Console.Error.WriteLine("Error in converting address: " + addrHexString + " " + e); throw new ArgumentException(e.Message, e); } }
public void TrackFailure() { retryTime = Utils.CurrentTimeMillis() + (long)backoff; backoff = Math.Min(backoff * params.Multiplier, params.Maximum); }
public double ReadDouble() { return primitiveTypes.ReadDouble(); }
private bool IsAtMaximum(Adjustable bar) { return (bar.GetValue() + bar.GetVisibleAmount() >= bar.GetMaximum()); }
public bool MatchesCS(string seq) { return queue.StartsWith(seq, pos); }
protected void ParseAndAddMapTileSet(Uri tileSetProperties) { var descProps = new Properties(); var logger = GetLogger(); logger.Info(_STR); using (var descURLStream = tileSetProperties.OpenStream()) { descProps.Load(descURLStream); } logger.Info(_STR + tileSetProperties.ToString() + _STR + descProps.ToString()); var mts = CreateMapTileSetFromProperties(descProps); if (mts != null && mts.AllGood()) { var mtsName = mts.GetName(); mapTileSets[mtsName] = mts; logger.Info(_STR + mtsName + _STR); } }
protected DateTime? Compute(double value) { if (double.IsNaN(value)) { return null; } long dateLong = (long)value; DateTime date = DateTime.FromBinary(dateLong); return date; }
public void EnablePan(BluetoothAdapter adapter) { if (mPan == null) mPan = (BluetoothPan)ConnectProxy(adapter, BluetoothProfile.PAN); Debug.Assert(mPan != null); long start = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); mPan.SetBluetoothTethering(_BOOL); long stop = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); Debug.Assert(mPan.IsTetheringOn()); WriteOutput(string.Format(_STR, (stop - start))); }
private int DistBetweenPoints(int x1, int z1, int x2, int z2, bool bAllowDiags) { int w = Math.Abs(x2 - x1); int h = Math.Abs(z2 - z1); if (bAllowDiags) { if (w < h) w = _NUM; else h = _NUM; } return w + h + _NUM; }
public URL(string protocol, string host, int port, string file, URLStreamHandler handler) { if (port < -1) { throw new MalformedURLException("Invalid port: " + port); } if (protocol == null) { throw new NullReferenceException("Protocol cannot be null."); } if (host != null && host.Contains("=") && host[1] != '=') { host = "=" + host + "="; } this.protocol = protocol; this.host = host; file = UrlUtils.AuthoritySafePath(host, file); int hash = file.IndexOf("#"); if (hash != -1) { this.file = file.Substring(0, hash); this.ref = file.Substring(hash + 1); } else { this.file = file; } FixURL(true); if (handler == null) { SetupStreamHandler(); if (streamHandler == null) { throw new MalformedURLException("No stream handler for protocol: " + protocol); } } else { streamHandler = hand
private Workflow.Method CreateVolumesMethod(Uri systemUri, Uri poolUri, List<Uri> volumeUris, VirtualPoolCapabilityValuesWrapper capabilities) { return new Workflow.Method(_STR, systemUri, poolUri, volumeUris, capabilities); }
public FileCommandInfo(int fd, string command, int result, string parameters) : this(_BOOL, fd, command, result, parameters) { }
public void Init(GuiManualHerblore manual) { foreach (var widget in widgets) { widget.Init(manual); } }
private static SslSocketFactory TrustAllHosts(HttpsURLConnection connection) { SslSocketFactory oldFactory = connection.SslSocketFactory; try { var sc = SSLContext.GetInstance("TLS"); sc.Init(null, trustAllCerts, new SecureRandom()); SslSocketFactory newFactory = sc.SocketFactory; connection.SslSocketFactory = newFactory; } catch (Exception e) { Log.Error(LOG_TAG, e.Message, e); } return oldFactory; }
public double SampleMax() { return _activeCountMax.GetAndSet(_activeCount.Get()); }
public Representation UserCodeForm() { OAuth2Request request = requestFactory.Create(GetRequest()); if (request.GetParameter(OAuth2Constants.DeviceCode.USER_CODE) != null) { return Verify(null); } else { return GetTemplateRepresentation(FORM, request, null); } }
public void TestMissionNameConstruction() { string xml = _STR; xml += CreateStartMissionXml(_STR, _STR); xml += CreateEndMissionXml(); using (var missionInputStream = new MemoryStream(Encoding.UTF8.GetBytes(xml))) { string missionName = null; try { missionName = MissionParser.GetMissionName(missionInputStream); } catch (MissionParseException e) { e.PrintStackTrace(); } Assert.AreEqual(_STR, missionName); } }
public override bool Equals(object other) { if (other == this) { return true; } if (other is ZoneOffsetTransition d) { return transition.Equals(d.transition) && offsetBefore.Equals(d.offsetBefore) && offsetAfter.Equals(d.offsetAfter); } return false; }
public override void Release() { base.Release(); Init(); }
public double UnsafeSabrVolatility(double strike, double forward, double expiryTime, double alpha, double beta, double nu, double rho) { const double _NUM = 1.0; // Assuming _NUM is defined as 1.0 based on notation const double QL_EPSILON = 1e-10; // Assuming this constant is defined double oneMinusBeta = _NUM - beta; double A = Math.Pow(forward * strike, oneMinusBeta); double sqrtA = Math.Sqrt(A); double logM; if (!IsClose(forward, strike)) logM = Math.Log(forward / strike); else { double epsilon = (forward - strike) / strike; logM = epsilon - _NUM * epsilon * epsilon; } double z = (nu / alpha) * sqrtA * logM; double B = _NUM - _NUM * rho * z + z * z; double C = oneMinusBeta * oneMinusBeta * logM * logM; double tmp = (Math.Sqrt(B) + z - rho) / (_NUM - rho); double xx = Math.Log(tmp);
public void Close() { while (mReceivers.Count > 0) { mContext.UnregisterReceiver(mReceivers.RemoveAt(0)); } if (mOutputWriter != null) { try { mOutputWriter.Close(); } catch (IOException e) { Log.W(mTag, _STR, e); } } }
private void ResolveFiles(List<string> classpaths, Dictionary<string, string> files, string[] paths, string prefix) { foreach (var path in paths) { string relativePath = fileHandler.GetName(path); if (prefix != null) { relativePath = fileHandler.Append(prefix, relativePath); } if (classpaths != null) { classpaths.Add(relativePath); } if (fileHandler.IsDirectory(path)) { string[] children = fileHandler.GetChildren(path); if (children != null && children.Length != 0) { ResolveFiles(null, files, children, relativePath); } } else { files[relativePath] = path; } } }
public void TestGetInstance() { try { ExemptionMechanism.GetInstance(null, _STR); Fail(_STR); } catch (NoSuchProviderException) { // Expected exception } try { ExemptionMechanism.GetInstance(_STR, null); Fail(_STR); } catch (ArgumentException) { // Expected exception } }
public synchronized void ReloadConfiguration() { properties = null; finalParameters.Clear(); }
protected void RemoveMessageProcessor(MessageProcessor oldMessageProcessor) { lock (messageProcessors) { if (messageProcessors.Remove(oldMessageProcessor)) { oldMessageProcessor.Stop(); } } }
public X509IssuerSerial(X509Certificate cert) : this(cert.GetIssuerX500Principal(), cert.GetSerialNumber()) { }
private void AddToSet(ObjectXmlPersist persist, IFile file, string setName) { var updateSet = LoadEdgeMatchers(persist, file); PersistUpdatedBundle(persist, file, updateSet, setName); }
public void PutBytes(byte[] bytes) { EnsureCapacity(bytes.Length); Array.Copy(bytes, _NUM, this.byteBuffer, this.position, bytes.Length); this.position += bytes.Length; }
public static string ArrayToDelimitedString(object[] arr, string delim) { if (arr == null) { return string.Empty; } var sb = new System.Text.StringBuilder(); for (int i = 0; i < arr.Length; i++) { if (i > 0) { sb.Append(delim); } sb.Append(arr[i]); } return sb.ToString(); }
public void ClearAll() { List<EncodedImage> old; lock (this) { old = new List<EncodedImage>(mMap.Values); mMap.Clear(); } for (int i = _NUM; i < old.Count; i++) { EncodedImage encodedImage = old[i]; if (encodedImage != null) { encodedImage.Close(); } } }
public static CompiereColor Parse(string attributes) { CompiereColor cc = new CompiereColor(); try { if (attributes != null && attributes.Length > _NUM) cc.ParseAttributres(attributes); } catch (Exception e) { log.Severe(_STR + attributes + _STR + e.ToString()); } return cc; }
public static synchronized LuaState NewLuaState() { int i = GetNextStateIndex(); LuaState L = new LuaState(i); states.Add(i, L); return L; }
static long CheckPreambleSize(Memory mem) { long cap = mem.GetCapacity(); if (cap < _NUM) { ThrowNotBigEnough(cap, _NUM); } long pre0 = mem.GetLong(_NUM); int preLongs = (int)(pre0 & _NUM); int required = Math.Max(preLongs << _NUM, _NUM); if (cap < required) { ThrowNotBigEnough(cap, required); } return pre0; }
public int Read() { if (inputStream == null) { Reopen(); } Count(_NUM); return inputStream.Read(); }
private void FitImageToView() { Drawable drawable = GetDrawable(); if (drawable == null || drawable.IntrinsicWidth == _NUM || drawable.IntrinsicHeight == _NUM) { return; } if (matrix == null || prevMatrix == null) { return; } int drawableWidth = drawable.IntrinsicWidth; int drawableHeight = drawable.IntrinsicHeight; float scaleX = (float)viewWidth / drawableWidth; float scaleY = (float)viewHeight / drawableHeight; switch (mScaleType) { case ScaleType.CENTER: scaleX = scaleY = _NUM; break; case ScaleType.CENTER_CROP: scaleX = scaleY = Math.Max(scaleX, scaleY); break; case ScaleType.CENTER_INSIDE: scaleX = scaleY = Math.Min(_NUM, Math.Min(scaleX, scaleY)); // fall through case ScaleType.FIT_CENTER: scaleX = scaleY = Math.Min(scaleX, scaleY); break; case ScaleType.FIT_XY: break; default: throw new NotSupportedException(_STR);
public void Limit(double x1, double y1, double x2, double y2) { clip[_NUM] = Math.Max(clip[_NUM], x1); clip[_NUM] = Math.Max(clip[_NUM], y1); clip[_NUM] = Math.Min(clip[_NUM], x2); clip[_NUM] = Math.Min(clip[_NUM], y2); }
public void Shutdown() { long begin = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); log.Info(_STR); log.Info(_STR + GetTaskCount(scheduledPool) + _STR); log.Info(_STR + GetTaskCount(instantPool) + _STR); log.Info(_STR + GetTaskCount(longRunningPool) + _STR); log.Info(_STR + (workStealingPool.GetQueuedTaskCount() + workStealingPool.GetQueuedSubmissionCount()) + _STR); scheduledPool.Shutdown(); instantPool.Shutdown(); longRunningPool.Shutdown(); workStealingPool.Shutdown(); bool success = _BOOL; try { success |= AwaitTermination(_NUM); scheduledPool.SetExecuteExistingDelayedTasksAfterShutdownPolicy(_BOOL); scheduledPool.SetContinueExistingPeriodicTasksAfterShutdownPolicy(_BOOL); success |= AwaitTermination(_NUM); } catch (InterruptedException e) { e.PrintStackTrace(); } log.Info(_STR + success + _STR + (DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - begin) + _STR); log.Info(_STR + GetTaskCount(scheduledP
public static ICollection<IPAddress> ToInetAddresses(ICollection<string> addrs, ICollection<string> hostNames) { var res = new HashSet<IPAddress>(addrs.Count); using (var hostNamesIt = hostNames.GetEnumerator()) { foreach (var addr in addrs) { string hostName = hostNamesIt.MoveNext() ? hostNamesIt.Current : null; IPAddress inetAddr = null; if (!string.IsNullOrEmpty(hostName)) { try { inetAddr = Dns.GetHostAddresses(hostName).FirstOrDefault(); } catch (SocketException) { // ignored } } if (inetAddr == null || IPAddress.IsLoopback(inetAddr)) { try { inetAddr = Dns.GetHostAddresses(addr).FirstOrDefault(); } catch (SocketException) { // ignored } } if (inetAddr != null) res.Add(inetAddr); } } if (!res.Any()) throw new IgniteCheckedException(_STR + string.Join(", ", addrs) + _STR + string.Join(", ", hostNames
public static string RemoveNewLineChars(string s) { string retString = null; if (s != null && s.Length > _NUM && s.IndexOf(_STR) != -_NUM) { char[] chars = s.ToCharArray(); int len = chars.Length; StringBuilder sb = new StringBuilder(len); for (int i = _NUM; i < len; i++) { char c = chars[i]; if (c != _STR) { sb.Append(c); } } retString = sb.ToString(); } else { retString = s; } return retString; }
void CalculateCounters() { if (!IsDBAvailable()) return; long time = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); int total = _NUM; write.Lock(); try { CountResetFeedsAndCategories(); total += CountFeedsWithUnread(); CountCategoriesWithUnread(); CountSpecialCategories(total); } finally { write.Unlock(); } Console.WriteLine(string.Format(_STR, total, (DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - time))); }
protected void AppendHTML(StringBuilder sbuf, char ch) { switch (ch) { case 'STR1': sbuf.Append("STR1"); break; case 'STR2': sbuf.Append("STR2"); break; case 'STR3': sbuf.Append("STR3"); break; default: sbuf.Append(ch); break; } }
private Collection<Var> MigrateColumns(SQLTable currentTable) { List<Var> vars = new List<Var>(); string tableType = currentTable.GetEntityType(); Dictionary<string, ResourceType.DataType> columns = currentTable.GetColumns(); Dictionary<string, string> foreignColumns = currentTable.GetForeignKeyColumns(); foreach (string column in columns.Keys) { ResourceType.DataType columnType = columns[column]; if (foreignColumns.ContainsKey(column)) { vars.AddRange(MigrateAsRelation(tableType, column, foreignColumns[column])); } else { vars.AddRange(MigrateAsResource(tableType, columnType, column)); } } return vars; }
public int RetrieveRowCount(string tableName) { SqlDataReader reader = null; int rowCount = -1; // Replace _NUM with -1 try { reader = command.ExecuteReader(_STR + tableName); // Ensure _STR is defined appropriately if (reader.Read()) { rowCount = reader.GetInt32(0); // Replace _NUM with 0 } } finally { if (reader != null) { reader.Close(); } } return rowCount; }
public JarModifier(File jarFile) { this.jarFile = jarFile; using (var jar = new JarFile(jarFile)) { var enumerator = jar.Entries.GetEnumerator(); while (enumerator.MoveNext()) { var currentEntry = (JarEntry)enumerator.Current; var resetEntry = new JarEntry(currentEntry.Name); jarEntries[currentEntry.Name] = resetEntry; } string manifestPath = $"{META_INF}{SEPERATOR}{_STR}"; JarEntry jarEntry = jar.GetJarEntry(manifestPath); if (jarEntry != null) { var entries = jar.Entries.GetEnumerator(); while (entries.MoveNext()) { jarEntry = (JarEntry)entries.Current; if (manifestPath.Equals(jarEntry.Name, StringComparison.OrdinalIgnoreCase)) { break; } else { jarEntry = null; } } } var manifest = new Manifest(); if (jarEntry != null) { manifest.Read(jar.GetInputStream(jarEntry)); } this.manifest = manifest; } }
public override int AddAttribute(Attribute a) { if (a == null) { throw new ArgumentException(_STR); } else { int index = -_NUM; Attribute original = a; a = (Attribute)a.Clone(); if (unusedColumnList.Count > _NUM) { lock (unusedColumnList) { if (unusedColumnList.Count > _NUM) { index = unusedColumnList[_NUM]; unusedColumnList.RemoveAt(_NUM); attributes[index] = a; } else { index = attributes.Count; attributes.Add(a); } } } else { index = attributes.Count; attributes.Add(a); } a.SetTableIndex(index); original.SetTableIndex(index); return index; } }
public B With(string key, int value) { return With(key, value.ToString()); }
public static void SortTopN<X>(X[] array, int offset, int limit, Comparison<X> comp) { PartitionTopN(array, offset, limit, comp); Array.Sort(array, offset, Math.Min(offset + limit, array.Length - offset), Comparer<X>.Create(comp)); }
protected bool IsServerTransaction() { return this is SIPServerTransaction; }
public object AddMarkedOccurrenceHighlight(int start, int end, MarkOccurrencesHighlightPainter painter) { var doc = textArea.Document; var mapper = textArea.GetUI(); var highlightInfo = new LayeredHighlightInfo { Painter = painter, P0 = doc.CreatePosition(start), P1 = doc.CreatePosition(end - _NUM) }; markedOccurrences.Add(highlightInfo); mapper.DamageRange(textArea, start, end); return highlightInfo; }
public static void OverScrollBy(PullToRefreshBase view, int deltaX, int scrollX, int deltaY, int scrollY, int scrollRange, int fuzzyThreshold, float scaleFactor, bool isTouchEvent) { int deltaValue, currentScrollValue, scrollValue; switch (view.GetPullToRefreshScrollDirection()) { case ScrollDirection.HORIZONTAL: deltaValue = deltaX; scrollValue = scrollX; currentScrollValue = view.GetScrollX(); break; case ScrollDirection.VERTICAL: default: deltaValue = deltaY; scrollValue = scrollY; currentScrollValue = view.GetScrollY(); break; } if (view.IsPullToRefreshOverScrollEnabled() && !view.IsRefreshing()) { Mode mode = view.GetMode(); if (mode.PermitsPullToRefresh() && !isTouchEvent && deltaValue != 0) { int newScrollValue = (deltaValue + scrollValue); if (PullToRefreshBase.DEBUG) { Console.WriteLine($"LOG_TAG: {deltaX}, {scrollX}, {deltaY}, {scrollY}, {newScr
public static void ReadFully(Stream inStream, byte[] buf, int off, int len) { const int _NUM = 1024; // Assuming _NUM is defined as 1024 const string _STR = "Failed to read the full amount of data."; // Assuming _STR is an error message int toRead = len; while (toRead > 0) { int bytesRead = inStream.Read(buf, off, Math.Min(toRead, _NUM)); if (bytesRead <= 0) { throw new IOException(_STR); } toRead -= bytesRead; off += bytesRead; } }
public static void AssumeTrue(Func<bool> assumptionSupplier, Func<string> messageSupplier) { if (!assumptionSupplier()) { throw new TestAbortedException(messageSupplier()); } }
public static string AddToCartBulk(HttpRequest request, HttpResponse response) { string categoryId = request.Query[_STR]; ShoppingCart cart = GetCartObject(request); Delegator delegator = (Delegator)request.HttpContext.Items[_STR]; LocalDispatcher dispatcher = (LocalDispatcher)request.HttpContext.Items[_STR]; ShoppingCartHelper cartHelper = new ShoppingCartHelper(delegator, dispatcher, cart); string controlDirective; Dictionary<string, object> result; Dictionary<string, object> paramMap = UtilHttp.GetParameterMap(request); string catalogId = CatalogWorker.GetCurrentCatalogId(request); result = cartHelper.AddToCartBulk(catalogId, categoryId, paramMap); controlDirective = ProcessResult(result, request); if (controlDirective.Equals(ERROR)) { return _STR; } else { return _STR; } }
public void AddFrequentSet(FrequentItemSet itemSet) { frequentSets.Add(itemSet); maximumSetSize = Math.Max(itemSet.GetNumberOfItems(), maximumSetSize); }
private int SkipFromPeekBuffer(int length) { int bytesSkipped = Math.Min(peekBufferLength, length); UpdatePeekBuffer(bytesSkipped); return bytesSkipped; }
protected Workflow.Method CreateRemoveVolumesFromCGMethod(Uri vplexURI, Uri cgURI, List<Uri> vplexVolumeURIs) { return new Workflow.Method(REMOVE_VOLUMES_FROM_CG_STEP, vplexURI, cgURI, vplexVolumeURIs); }
private static int ShowUrlsPrompt(IWin32Window parent, List<string> urls) { string text = _STR; foreach (var url in urls) { string splitUrl = SplitUrl(url); text += splitUrl + _STR; } string okOption = _STR; if (urls.Count > _NUM) { okOption = _STR + urls.Count + _STR; } string[] options = { okOption, _STR }; if (urls.Count == _NUM) { options = new string[] { okOption, _STR, _STR }; } int chosenOption = MessageBox.Show(text, _STR, MessageBoxButtons.OKCancel, MessageBoxIcon.Question); return chosenOption; }
public int ConvertMouse(MouseEventArgs eventArgs) { if (panelFont == null) return NO_MOUSE; int colOff = eventArgs.X - GRID_WIDTH - PANEL_MARGIN; int colNum = colOff / horizStep; int colRem = colOff % horizStep; if (colNum >= panelColumns || colRem < TEXT_MARGIN || colRem > (horizStep - GRID_WIDTH - TEXT_MARGIN)) { return NO_MOUSE; } int rowOff = eventArgs.Y - GRID_WIDTH - PANEL_MARGIN; int rowNum = rowOff / vertiStep; int rowRem = rowOff % vertiStep; if (rowRem < TEXT_MARGIN || rowRem > (vertiStep - GRID_WIDTH - TEXT_MARGIN)) { return NO_MOUSE; } int result = cornerIndex + (rowNum * panelColumns) + colNum; if (result >= cellCount) return NO_MOUSE; return result; }
private static string ComputeRegexString(string originalString, string oldName, string newName) { StringBuilder builder = new StringBuilder(originalString.Length); string oldNameOrNewNameRegEx = string.Format("{0}|{1}", Regex.Escape(oldName), Regex.Escape(newName)); int i = originalString.IndexOf(oldName); if (i >= 0) { int prevI = 0; while (i >= 0) { builder.Append(Regex.Escape(originalString.Substring(prevI, i - prevI))); builder.Append(oldNameOrNewNameRegEx); prevI = i; i = originalString.IndexOf(oldName, i + oldName.Length); } builder.Append(Regex.Escape(originalString.Substring(prevI + oldName.Length))); } return builder.ToString(); }
public synchronized string GenerateCallIdentifier(string address) { string date = (DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() + callIDCounter++ + new Random().NextLong()).ToString(); byte[] cid = digester.ComputeHash(Encoding.UTF8.GetBytes(date)); string cidString = Utils.ToHexString(cid); return cidString + _STR + address; }
public int ParseHour(string source, char patternChar, int offset) { int min = (patternChar == 'H' || patternChar == 'h') ? _NUM : _NUM; int max = ((patternChar == 'h' || patternChar == 'H') ? _NUM : _NUM) + min; return ParseNumber(source, offset, _STR, min, max) - min; }
public void DoHistory(KeyEventArgs e) { if (e.Source == m_Input) { switch (e.KeyCode) { case Keys.Up: if (m_HistoryPos > _NUM) { m_HistoryPos--; string command = m_CommandHistory[m_HistoryPos]; m_Input.Text = command; } break; case Keys.Down: if (m_HistoryPos < m_CommandHistory.Count) { m_HistoryPos++; string command = string.Empty; if (m_HistoryPos < m_CommandHistory.Count) { command = m_CommandHistory[m_HistoryPos]; } m_Input.Text = command; } break; default: break; } } }
public static ReferenceBinding[] Substitute(Substitution substitution, ReferenceBinding[] originalTypes) { if (originalTypes == null) return null; ReferenceBinding[] substitutedTypes = originalTypes; for (int i = _NUM, length = originalTypes.Length; i < length; i++) { ReferenceBinding originalType = originalTypes[i]; TypeBinding substitutedType = Substitute(substitution, originalType); if (!(substitutedType is ReferenceBinding)) { return null; } if (substitutedType != originalType) { if (substitutedTypes == originalTypes) { substitutedTypes = new ReferenceBinding[length]; Array.Copy(originalTypes, _NUM, substitutedTypes, _NUM, i); } substitutedTypes[i] = (ReferenceBinding)substitutedType; } else if (substitutedTypes != originalTypes) { substitutedTypes[i] = originalType; } } return substitutedTypes; }
protected override void OnDraw(Canvas canvas) { base.OnDraw(canvas); if (mBitmapShader == null) return; canvas.DrawCircle(mCenterX, mCenterY, mCoverRadius, mCoverPaint); canvas.DrawCircle(mCenterX, mCenterY, mCoverRadius, mCoverFrontPaint); mDurationText = SecondsToTime(mDurationSecondsCurrent); mDurationPaint.GetTextBounds(mDurationText, 0, mDurationText.Length, mRectDuration); canvas.DrawText(mDurationText, mCenterX - (mRectDuration.Width() / 2), mCenterY + (mRectDuration.Height() / 2), mDurationPaint); if (mBitmapUnselectedAction1 != null && mBitmapSelectedAction1 != null) { canvas.DrawBitmap(isAction1Selected ? mBitmapSelectedAction1 : mBitmapUnselectedAction1, mCenterX - (mCenterX / 2), mCenterY + (mCenterY / 2) - (mCenterY / 2), mActionPaint); } if (mBitmapUnselectedAction2 != null && mBitmapSelectedAction2 != null) {
private static ICollection<TCPTransport> AllKnownTransports() { HashSet<TCPTransport> s; lock (localEndpoints) { s = new HashSet<TCPTransport>(localEndpoints.Count); foreach (var epList in localEndpoints.Values) { TCPEndpoint ep = epList.First(); s.Add(ep.transport); } } return s; }
public void RequestSecondsUntilIdleLockout() { operations.Add(PasswordPolicyStateOperationType.GET_SECONDS_UNTIL_IDLE_LOCKOUT); }
[HttpGet("your_route_here")] [ProducesResponseType(typeof(List<string>), StatusCodes.Status200OK)] public static List<string> ShowHiveDatabases() { IHiveClient hiveClient = HiveClientFactory.GetHiveClient(); List<string> results = null; try { results = hiveClient.GetHiveDbNames(); } catch (Exception e) { Console.WriteLine(e); throw new IOException(e.Message); } return results; }
public void TestNegNegFirstShorter() { byte[] aBytes = { byte.MinValue, byte.MinValue, byte.MinValue, byte.MinValue, byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MaxValue }; byte[] bBytes = { byte.MinValue, byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MinValue, byte.MinValue, byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MinValue, byte.MaxValue, byte.MaxValue, byte.MinValue, byte.MaxValue, byte.MaxValue, byte.MinValue, byte.MinValue }; int aSign = -1; int bSign = -1; byte[] rBytes = { byte.MinValue, byte.MaxValue, byte.MinValue, byte.MinValue, byte.MinValue, byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MaxValue, byte.MinValue, byte.MinValue, byte.MaxValue, byte.MinValue, byte.MinValue, byte.MaxValue, byte.MinValue, byte.MinValue, byte.MaxValue, byte.MaxValue };
private static double HackyAdjuster(double f) { double tmp = Math.Sqrt(_NUM - f); return (f <= _NUM) ? tmp : tmp + (_NUM * (f - _NUM)); }
private static object FromString(string s) { byte[] data = Convert.FromBase64String(s); using (var memoryStream = new MemoryStream(data)) using (var binaryFormatter = new BinaryFormatter()) { return binaryFormatter.Deserialize(memoryStream); } }
private bool CopyDocument(SearchDocument newDocument, SearchDocument document, Dictionary<string, HashSet<string>> removedProperties) { bool mutated = false; foreach (var oldFieldName in document.GetPropertyNames()) { newDocument.AddProperty(oldFieldName); var oldValues = document.GetProperty(oldFieldName); if (oldValues != null) { HashSet<string> objectsRemoved = (removedProperties != null && removedProperties.TryGetValue(oldFieldName, out var temp)) ? temp : null; foreach (var oldValue in oldValues) { if (objectsRemoved != null && objectsRemoved.Contains(oldValue)) { mutated = true; } else { AddProperty(oldFieldName, oldValue, newDocument); } } } } return mutated; }
public SVDMatrix(Matrix arg) : this(arg, _BOOL, _BOOL, _BOOL) { }
public void UnlockForClear(InternalDistributedMember locker) { lock (this.clearLockSync) { InternalDistributedSystem instance = InternalDistributedSystem.GetAnyInstance(); if (instance != null && logger.IsDebugEnabled) { logger.Debug(_STR, locker, System.IdentityHashCode(this)); } if (this.lockOwner != null && !locker.Equals(this.lockOwner)) { if (instance != null && logger.IsDebugEnabled) { logger.Debug(_STR, lockOwner); } return; } UnlockVersionGeneration(locker); } }
public UnicastRef() { }
private static int LastIndexOf(object o, object[] elements, int index) { const int _NUM = 0; // Assuming _NUM is defined as 0 for the loop to function correctly if (o == null) { for (int i = index; i >= _NUM; i--) { if (elements[i] == null) { return i; } } } else { for (int i = index; i >= _NUM; i--) { if (o.Equals(elements[i])) { return i; } } } return -_NUM; }
public void Write(ByteBuffer buffer) { buffer.Position = _NUM; if (mFileChannel.Size + buffer.Capacity < mMaxSize) { while (buffer.HasRemaining) { mFileChannel.Write(buffer); } UpdateWaveFileSize(); } else { int remaining = (int)(mMaxSize - mFileChannel.Size); remaining -= remaining % mAudioFormat.GetFrameSize(); byte[] bytes = buffer.Array; ByteBuffer current = ByteBuffer.Wrap(bytes.Take(remaining).ToArray()); ByteBuffer next = ByteBuffer.Wrap(bytes.Skip(remaining).ToArray()); while (current.HasRemaining) { mFileChannel.Write(current); } UpdateWaveFileSize(); Rollover(); while (next.HasRemaining) { mFileChannel.Write(next); } UpdateWaveFileSize(); } }
public static double DmodD(double lhs, double rhs) { return rhs != _NUM ? lhs - rhs * Math.Floor(lhs / rhs) : double.NaN; }
public void TestMaxLess() { byte[] aBytes = { _NUM, _NUM, _NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM }; byte[] bBytes = { _NUM, _NUM, _NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM }; int aSign = _NUM; int bSign = _NUM; byte[] rBytes = { _NUM, _NUM, _NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger bNumber = new BigInteger(bSign, bBytes); BigInteger result = BigInteger.Max(aNumber, bNumber); byte[] resBytes = result.ToByteArray(); for (int i = 0; i < resBytes.Length; i++) { Assert.T
private readonly object _lock = new object(); private void Block(bool tf) { lock (_lock) { if (tf) { while (m_ioThread.IsAlive && m_state != IDLE) { Monitor.Wait(_lock); } } else { Monitor.PulseAll(_lock); } } }
public void Move(MouseEvent e) { Point2D pnt = GetProjectionPoint(e); int x = (int)pnt.GetX(); int y = (int)pnt.GetY(); if (poly.GetRenderType() == OMGraphic.RENDERTYPE_OFFSET) { gpm = new OffsetGrabPoint(x, y); gpm.Clear(); } else { gpm = gpo; gpm.Clear(); gpm.Set(x, y); } AddPolyGrabPointsToOGP(gpm); movingPoint = gpm; }
public FloatBuffer Put(float[] src, int srcOffset, int floatCount) { Arrays.CheckOffsetAndCount(src.Length, srcOffset, floatCount); if (floatCount > Remaining()) { throw new BufferOverflowException(); } for (int i = srcOffset; i < srcOffset + floatCount; ++i) { Put(src[i]); } return this; }
public void DispatchCharactersEvents(int nodeHandle, ContentHandler ch, bool normalize) { int identity = MakeNodeIdentity(nodeHandle); if (identity == DTM.NULL) return; int type = _type2(identity); if (type == DTM.ELEMENT_NODE || type == DTM.DOCUMENT_NODE) { int startNode = identity; identity = _firstch2(identity); if (DTM.NULL != identity) { int offset = -_NUM; int length = _NUM; do { type = _exptype2(identity); if (type == DTM.TEXT_NODE || type == DTM.CDATA_SECTION_NODE) { int dataIndex = m_dataOrQName[elementAt(identity)]; if (dataIndex >= _NUM) { if (-_NUM == offset) { offset = dataIndex >> TEXT_LENGTH_BITS; } length += dataIndex & TEXT_LENGTH_MAX; } else { if (-_NUM == offset) { offset = m_data[elementAt(-dataIndex)]; } length += m_data[elementAt(-dataIndex + _NUM)]; } } identity+
public static bool ContainIP(int cidrPrefix, int cidrMaskBits, int ip) { bool matched = true; int bitsToShift = 32 - cidrMaskBits; if (bitsToShift > 0) { cidrPrefix = cidrPrefix >> bitsToShift; ip = ip >> bitsToShift; cidrPrefix = cidrPrefix << bitsToShift; ip = ip << bitsToShift; } if (cidrPrefix != ip) { matched = false; } return matched; }
protected static bool Lock(string serviceName, object name) { DistributedLockService service = DistributedLockService.GetServiceNamed(serviceName); bool locked = service.Lock(name, _NUM, -_NUM); return locked; }
protected int CheckKnownCookie() { int retVal = _NUM; Debug.Message(_STR, ADAPTIVE); HttpRequest req = GetHttpRequest(); if (req != null) { Cookie cookie = CookieUtils.GetCookieFromReq(req, knownCookieName); if (cookie != null) { if (knownCookieValue.Equals(CookieUtils.GetCookieValue(cookie), StringComparison.OrdinalIgnoreCase)) { retVal = knownCookieScore; } } } if (knownCookieValue == null) { knownCookieValue = _STR; } if (knownCookieSave) { postAuthNMap[_STR] = knownCookieName; postAuthNMap[_STR] = knownCookieValue; } if (!knownCookieInvert) { retVal = knownCookieScore - retVal; } return retVal; }
public File[] SelectImportFiles(string title, bool multipleSelection, FileNameExtensionFilter[] fileNameExtensionFilters) { if (bool.Parse(System.GetProperty(_STR, OSType.IsMac().ToString()))) { FileDialog importDialog = fileDialogs.Get(title); if (importDialog == null) { importDialog = new FileDialog(this, title, FileDialog.LOAD); fileDialogs.Put(title, importDialog); } importDialog.SetVisible(true); if (importDialog.GetFile() != null) { return new File[] { new File(importDialog.GetDirectory(), importDialog.GetFile()) }; } } else { JFileChooser importChooser = fileChoosers.Get(title); if (importChooser == null) { importChooser = new JFileChooser(Utils.GetCWD()); importChooser.SetMultiSelectionEnabled(multipleSelection); foreach (var fileNameExtensionFilter in fileNameExtensionFilters) { importChooser.SetFileFilter(fileNameExtensionFilter); } importChooser.SetDialogTitle(title); fileChoosers.Put(title, importChooser); } int returnVal = importChooser.ShowOpenDialog(this); i
public GT_MetaGenerated_Item(string aUnlocalized, short aOffset, short aItemAmount) : base(aUnlocalized) { SetCreativeTab(GregTech_API.TAB_GREGTECH_MATERIALS); SetHasSubtypes(_BOOL); SetMaxDamage(_NUM); mEnabledItems = new BitArray(aItemAmount); mVisibleItems = new BitArray(aItemAmount); mOffset = (short)Math.Min(_NUM, aOffset); mItemAmount = (short)Math.Min(aItemAmount, _NUM - mOffset); mIconList = new IIcon[aItemAmount][_NUM]; sInstances.Add(GetUnlocalizedName(), this); }
public override IEnumerator<Option> ListOptions() { List<Option> newList = new List<Option>(_NUM); newList.Add(new Option(_STR + _STR, _STR, _NUM, _STR)); newList.Add(new Option(_STR + _STR, _STR, _NUM, _STR)); newList.Add(new Option(_STR, _STR, _NUM, _STR)); newList.Add(new Option(_STR + _STR + _STR, _STR, _NUM, _STR)); newList.Add(new Option(_STR, _STR, _NUM, _STR)); newList.Add(new Option(_STR, _STR, _NUM, _STR)); newList.Add(new Option(_STR, _STR, _NUM, _STR)); newList.Add(new Option(_STR, _STR, _NUM, _STR)); newList.Add(new Option(_STR, _STR, _NUM, _STR)); newList.AddRange(super.ListOptions().ToList()); return newList.GetEnumerator(); }
public SSLEngineResult Wrap(ByteBuffer[] srcs, int offset, int len, ByteBuffer dst) { if (engineWasShutdown) { return new SSLEngineResult(SSLEngineResult.Status.CLOSED, SSLEngineResult.HandshakeStatus.NOT_HANDSHAKING, _NUM, _NUM); } if (srcs == null || dst == null) { throw new InvalidOperationException(_STR); } if (dst.IsReadOnly) { throw new ReadOnlyBufferException(); } if (!handshakeStarted) { BeginHandshake(); } SSLEngineResult.HandshakeStatus handshakeStatus = GetHandshakeStatus(); if ((session == null || engineWasClosed) && (handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_UNWRAP || handshakeStatus == SSLEngineResult.HandshakeStatus.NEED_TASK)) { return new SSLEngineResult(GetEngineStatus(), handshakeStatus, _NUM, _NUM); } int capacity = dst.Remaining; int produced = _NUM; if (alertProtocol.HasAlert()) { if (capacity < recordProtocol.GetRecordSize(_NUM))
public static byte[] ReadFully(Stream input) { try { return ReadFullyNoClose(input); } finally { input.Close(); } }
public static ParsedSql ParseSqlStatement(string sql) { HashSet<string> namedParameters = new HashSet<string>(); ParsedSql parsedSql = new ParsedSql(sql); char[] statement = sql.ToCharArray(); int namedParameterCount = 0; int unnamedParameterCount = 0; int totalParameterCount = 0; int i = 0; while (i < statement.Length) { int skipToPosition = SkipCommentsAndQuotes(statement, i); if (i != skipToPosition) { if (skipToPosition >= statement.Length) { break; } i = skipToPosition; } char c = statement[i]; if (c == '@' || c == ':') { int j = i + 1; if (j < statement.Length && statement[j] == c) { i += 1; continue; } while (j < statement.Length && !IsParameterSeparator(statement[j])) { j++; } if (j - i > 1) { string parameter = sql.Substring(i + 1, j - i - 1); if
unsafe void PutLong(int offset, long value) { *((long*)(baseAddress + offset)) = value; }
public bool OnEvent(ActionResult result) { lock (this) { string requestId = result.GetResponseInfo().mRequestId; if (requestId == null) { return _BOOL; } bool eventRemoved = mRequestIds.Remove(requestId); if (eventRemoved) { Type key = null; foreach (Type type in mLastRequestIdByType.Keys) { if (requestId.Equals(mLastRequestIdByType[type])) { key = type; break; } } if (key != null) { mLastRequestIdByType.Remove(key); } } return eventRemoved; } }
public static string Gensalt(int logRounds, RandomNumberGenerator random) { StringBuilder rs = new StringBuilder(); byte[] rnd = new byte[BCRYPT_SALT_LEN]; random.GetBytes(rnd); rs.Append(_STR); if (logRounds < _NUM) { rs.Append(_STR); } if (logRounds > _NUM) { throw new ArgumentException(_STR); } rs.Append(logRounds.ToString()); rs.Append(_STR); rs.Append(EncodeBase64(rnd, rnd.Length)); return rs.ToString(); }
public void CheckKey(object key) { if (!hasHash) { return; } if (key == null) { return; } int expected = key.GetHashCode(); if (expected == keyHash) { return; } throw new PartitionedRegionException(_STR + expected + _STR + keyHash); }
public StringBuilder NumberToString(string strNumberToConvert) { string strNumber = string.Empty, signBit = string.Empty; if (strNumberToConvert.StartsWith(string.Empty)) { strNumber = string.Empty + strNumberToConvert.Substring(1, strNumberToConvert.Length - 1); signBit = string.Empty; } else { strNumber = string.Empty + strNumberToConvert; } var dft = new System.Globalization.CultureInfo("en-US").NumberFormat; string strtemp = string.Empty + dft.Format(double.Parse(strNumber)); StringBuilder strbNumber = new StringBuilder(strtemp); int intLen = strbNumber.Length; for (int i = intLen - 3; i > 3; i -= 3) { strbNumber.Insert(i, string.Empty); } if (signBit.Equals(string.Empty)) { strbNumber.Insert(0, string.Empty); } return strbNumber; }
private void RunInitScriptIfRequired(string url, SqlConnection connection) { var matcher = INITSCRIPT_MATCHING_PATTERN.Match(url); if (matcher.Success) { string initScriptPath = matcher.Groups[_NUM].Value; try { var resource = Resources.GetResource(initScriptPath); string sql = Resources.ToString(resource, Encoding.UTF8); ScriptUtils.ExecuteSqlScript(connection, initScriptPath, sql); } catch (IOException e) { LOGGER.Warn(_STR, initScriptPath); throw new SqlException(_STR + initScriptPath, e); } catch (ScriptException e) { LOGGER.Error(_STR, initScriptPath, e); throw new SqlException(_STR + initScriptPath, e); } } }
private static int ParseInt(string value, int beginIndex, int endIndex) { if (beginIndex < 0 || endIndex > value.Length || beginIndex > endIndex) { throw new FormatException(value); } int i = beginIndex; int result = 0; int digit; if (i < endIndex) { digit = Char.GetNumericValue(value[i++]); if (digit < 0) { throw new FormatException("Invalid input: " + value); } result = -digit; } while (i < endIndex) { digit = Char.GetNumericValue(value[i++]); if (digit < 0) { throw new FormatException("Invalid input: " + value); } result *= 10; result -= digit; } return -result; }
public static void PrintLine(object x) { Console.WriteLine(x); }
public static void CheckFinite(double[] val) { for (int i = _NUM; i < val.Length; i++) { double x = val[i]; if (double.IsInfinity(x) || double.IsNaN(x)) { throw new MathIllegalArgumentException(LocalizedCoreFormats.NOT_FINITE_NUMBER, x); } } }
private void InitKeyboardButtons(KeyboardView view) { mButtons = new List<KeyboardButtonView> { (KeyboardButtonView)view.FindViewById(Resource.Id.pin_code_button_0), (KeyboardButtonView)view.FindViewById(Resource.Id.pin_code_button_1), (KeyboardButtonView)view.FindViewById(Resource.Id.pin_code_button_2), (KeyboardButtonView)view.FindViewById(Resource.Id.pin_code_button_3), (KeyboardButtonView)view.FindViewById(Resource.Id.pin_code_button_4), (KeyboardButtonView)view.FindViewById(Resource.Id.pin_code_button_5), (KeyboardButtonView)view.FindViewById(Resource.Id.pin_code_button_6), (KeyboardButtonView)view.FindViewById(Resource.Id.pin_code_button_7), (KeyboardButtonView)view.FindViewById(Resource.Id.pin_code_button_8), (KeyboardButtonView)view.FindViewById(Resource.Id.pin_code_button_9), (KeyboardButtonView)view.FindViewById(Resource.Id.pin_code_button_clear) }; foreach (var button in mButtons) { button.Click += (sender, e) => OnButtonClick(sender); }
public static bool IsAutoNew(Properties ctx, int windowNo) { if (ctx == null) throw new ArgumentException(_STR); string s = GetContext(ctx, windowNo, _STR, _BOOL); if (s != null) { if (s.Equals(_STR)) return _BOOL; else return _BOOL; } return IsAutoNew(ctx); }
private static string FindRelativePath(string filePath, string dirPath) { string relPath; if (!dirPath.EndsWith(Path.DirectorySeparatorChar.ToString())) { dirPath += Path.DirectorySeparatorChar; } if (filePath.StartsWith(dirPath)) { relPath = filePath.Substring(dirPath.Length); } else { relPath = filePath; } return relPath; }
public bool Init() { log.Config(_STR); MClient client = MClient.Get(Env.GetCtx()); string ASPFilter = _STR; if (client.IsUseASP()) { ASPFilter = $"{_STR}{_STR}{_STR}{_STR}{_STR}{client.GetAD_Client_ID()}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{client.GetAD_Client_ID()}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{client.GetAD_Client_ID()}{_STR}{_STR}{_STR}{_STR}{_STR}"; } string sql = null; if (Env.IsBaseLanguage(Env.GetCtx(), _STR)) { sql = $"{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{_STR}{ASPFilter}{_STR}"; } else { sql = $"{_STR}{_STR}{_STR}{_STR}{_STR}{_ST
private static string DoNormalize(string filename, char separator, bool keepSeparator) { if (filename == null) { return null; } int size = filename.Length; if (size == _NUM) { return filename; } int prefix = GetPrefixLength(filename); if (prefix < _NUM) { return null; } char[] array = new char[size + _NUM]; filename.CopyTo(_NUM, array, _NUM, size - _NUM); char otherSeparator = separator == SYSTEM_SEPARATOR ? OTHER_SEPARATOR : SYSTEM_SEPARATOR; for (int i = _NUM; i < array.Length; i++) { if (array[i] == otherSeparator) { array[i] = separator; } } bool lastIsDirectory = _BOOL; if (array[size - _NUM] != separator) { array[size++] = separator; lastIsDirectory = _BOOL; } for (int i = prefix + _NUM; i < size; i++) { if (array[i] == separator && array[i - _NUM] == separator
public void ResetSingleton() { root = null; tmpFileCounter.Set(_NUM); accessedFiles.Clear(); shouldAllThrowIOException = _BOOL; classesThatShouldThrowIOException.Clear(); lock (leakingResources) { foreach (var resource in leakingResources) { try { resource.Release(); } catch (Exception e) { logger.Warn(_STR + e.Message, e); } } leakingResources.Clear(); } }
public void TestAndNotNegNegFirstLonger() { byte[] aBytes = { -_NUM, _NUM, _NUM, _NUM, -_NUM, -_NUM, _NUM, _NUM, _NUM, _NUM, -_NUM, _NUM, _NUM, -_NUM, _NUM, _NUM, -_NUM, -_NUM }; byte[] bBytes = { -_NUM, -_NUM, -_NUM, -_NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; int aSign = -_NUM; int bSign = -_NUM; byte[] rBytes = { _NUM, -_NUM, -_NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger bNumber = new BigInteger(bSign, bBytes); BigInteger result = BigInteger.AndNot(aNumber, bNumber); byte[] resBytes = res
public static string GenerateStringOfCharacters(int count) { StringBuilder sb = new StringBuilder(); Random random = new Random(); const string CHARACTERS = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"; // Set your character set here const int _NUM = 0; // Define the starting index if necessary for (int i = _NUM; i < count; i++) { sb.Append(CHARACTERS[random.Next(CHARACTERS.Length)]); } return sb.ToString(); }
private ExchangeRateManager() { if (System.getProperty(_STR) == null) throw new NotSupportedException(_STR); AddKnownRates(); }
public void RemoveAttribute(string name) { if (name != null) { if (attributesList != null) { for (int i = _NUM; i < attributesList.Count; i++) { object o = attributesList[i]; if (o is AttributeField a) { try { string n = a.GetName(); if (n != null) { if (name.Equals(n)) { attributesList.Remove(a); } } } catch (SdpParseException e) { // Handle exception if necessary } } } } } }
public override void Evict(string key) { key = SafetyKey(key); var file = new FileInfo(Path.Combine(cacheDirectory, key)); if (file.Exists) { file.Delete(); } }
public static bool IsUniqueConstraintError(Exception e) { if (DB.IsPostgreSQL()) return IsSQLState(e, _STR); return IsErrorCode(e, _NUM); }
public ConfigurationError(string msg, Exception x) : base(msg) { this.exception = x; }
void AddFillComponents(Panel panel, int[] cols, int[] rows) { Size filler = new Size(_NUM, _NUM); bool filledCell11 = _BOOL; CellConstraints cc = new CellConstraints(); if (cols.Length > _NUM && rows.Length > _NUM) { if (cols[_NUM] == _NUM && rows[_NUM] == _NUM) { panel.Controls.Add(Box.CreateRigidArea(filler), cc.xy(_NUM, _NUM)); filledCell11 = _BOOL; } } for (int index = _NUM; index < cols.Length; index++) { if (cols[index] == _NUM && filledCell11) { continue; } panel.Controls.Add(Box.CreateRigidArea(filler), cc.xy(cols[index], _NUM)); } for (int index = _NUM; index < rows.Length; index++) { if (rows[index] == _NUM && filledCell11) { continue; } panel.Controls.Add(Box.CreateRigidArea(filler), cc.xy(_NUM, rows[index])); } }
private void InsertUsedContextPrefixes() { int unknownPrefixesCount = unknownPrefixesInXMLLiteral.Count; if (unknownPrefixesCount > _NUM) { StringBuilder contextPrefixes = new StringBuilder(_NUM); ElementInfo topElement = PeekStack(); for (int i = _NUM; i < unknownPrefixesCount; i++) { string prefix = unknownPrefixesInXMLLiteral[i]; string namespaceValue = topElement.GetNamespace(prefix); if (namespaceValue != null) { AppendNamespaceDecl(contextPrefixes, prefix, namespaceValue); } } int endOfFirstStartTag = charBuf.IndexOf(_STR); charBuf.Insert(endOfFirstStartTag, contextPrefixes.ToString()); } unknownPrefixesInXMLLiteral.Clear(); }
public void AddPutTimeNanos(long duration) { putTimeNanos.AddAndGet(duration); delegate?.AddPutTimeNanos(duration); }
using System; using System.Collections.Generic; public static class HashPrecomputation { private const int MAX_HASH_FUNCS = 256; // assuming a constant for MAX_HASH_FUNCS private const int _NUM = 0; // assuming a starting index for the loop public static List<int> PrecomputeHashes(byte[] data, long tweak) { List<int> list = new List<int>(MAX_HASH_FUNCS); for (int i = _NUM; i < MAX_HASH_FUNCS; ++i) { list.Add(MurmurHash3Bit(i, data, tweak)); } return list; } private static int MurmurHash3Bit(int i, byte[] data, long tweak) { // Implement the MurmurHash3 bit logic here // Placeholder return; this logic must be implemented return 0; } }
[RequestProcessing(value = "_STR", method = HTTPRequestMethod.GET)] [Before(adviceClass = new Type[] { typeof(StopwatchStartAdvice), typeof(AnonymousViewCheck), typeof(UserBlockCheck) })] [After(adviceClass = typeof(StopwatchEndAdvice))] public void ShowHomeFollowingTags(HTTPRequestContext context, HttpRequest request, HttpResponse response, string userName) { var user = (JSONObject)request.GetAttribute(User.USER); request.SetAttribute(Keys.TEMAPLTE_DIR_NAME, Symphonys.Get("_STR")); var renderer = new SkinRenderer(); context.SetRenderer(renderer); renderer.SetTemplateName("_STR"); var dataModel = renderer.GetDataModel(); filler.FillHeaderAndFooter(request, response, dataModel); string pageNumStr = request.GetParameter("_STR"); if (string.IsNullOrEmpty(pageNumStr) || !int.TryParse(pageNumStr, out _)) { pageNumStr = "_STR"; } int pageNum = int.Parse(pageNumStr); int pageSize = Symphonys.GetInt("_STR"); int windowSize = Symphonys.GetInt("_STR"); FillHomeUser(dataMod
public int ElevationAt(float lat, float lon) { if (frameIsValid == _BOOL) { if (lat >= dsi.swLat && lat <= dsi.neLat && lon >= dsi.swLon && lon <= dsi.neLon) { int latIndex = (int)Math.Round((lat - dsi.swLat) * _NUM / uhl.latPostInterval); int lonIndex = (int)Math.Round((lon - dsi.swLon) * _NUM / uhl.lonPostInterval); if (elevations[lonIndex] == null) { ReadDataRecord(lonIndex); } return (int)elevations[lonIndex][latIndex]; } } return -_NUM; }
ObservedObject CreateObservedObject(ObjectName obj) { return new ObservedObject(obj); }
private void DeleteChildren(XmlElement container) { while (container.HasChildNodes) { container.RemoveChild(container.LastChild); } }
private void SaveInitialChildState(FacesContext facesContext, UIComponent component) { if (component is EditableValueHolder editableValueHolder && !component.IsTransient()) { string clientId = component.GetClientId(facesContext); SavedState state = new SavedState(); initialChildState[clientId] = state; state.Populate(editableValueHolder); } IEnumerator<UIComponent> iterator = component.GetFacetsAndChildren().GetEnumerator(); while (iterator.MoveNext()) { SaveChildState(facesContext, iterator.Current); } }
public bool IsOverlap() { HashSet<BrdItem> startContacts = GetStartContacts(); HashSet<BrdItem> endContacts = GetEndContacts(); foreach (BrdItem endContact in endContacts) { if (startContacts.Contains(endContact)) return true; } return false; }
static object EnsureNotNull(Location location, object value) { if (value == null) { throw new EvalException(location, _STR); } return value; }
public static List<object> ReadListXml(Stream inStream) { var parser = new XmlPullParser(); // Assuming XmlPullParser is defined and can be instantiated parser.SetInput(inStream, null); return (List<object>)ReadValueXml(parser, new string[_NUM]); }
private static string PadRight(string s, int minLength) { return string.Format("{0," + minLength + "}", s); }
public override IEnumerator<string> EnumerateMeasures() { List<string> newList = new List<string> { _STR }; return newList.GetEnumerator(); }
protected void OnSendTaskCompleted(RecordBuffer<R> buffer) { logger.Trace(_STR, Name(), buffer); Interlocked.Decrement(ref activeSendTasks); }
public void AddPreferencesButton() { var prefsButton = new Button(_STR); prefsButton.HideActionText = _BOOL; prefsButton.Click += RasterPlotActions.GetPropertiesDialogAction(this); buttonPanel.Children.Add(prefsButton); }
public void ClearUnused(ConfigImpl config) { SystemOut.PrintDate(config.GetOutWriter(), _STR + Size() + _STR + maxSize + _STR); if (Size() > maxSize) { object[] keys = Keys(); LongKeyList list = new LongKeyList(); for (int i = _NUM; i < keys.Length; i++) { PageSource ps = GetPageSource(keys[i], _BOOL); long updateTime = ps.GetLastAccessTime(); if (updateTime + timeout < DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond) { long add = (ps.GetAccessCount() - _NUM) * _NUM; if (add > timeout) add = timeout; list.Add(updateTime + add, keys[i]); } } while (Size() > maxSize) { object key = list.Shift(); if (key == null) break; Remove(key); } } }
public static GridField[] CreateFields(Properties ctx, int windowNo, int tabNo, int adTabId) { List<GridFieldVO> listVO = new List<GridFieldVO>(); int adWindowId = _NUM; bool readOnly = _BOOL; string sql = GridFieldVO.GetSQL(ctx); PreparedStatement pstmt = null; try { pstmt = DB.PrepareStatement(sql, null); pstmt.SetInt(_NUM, adTabId); using (var rs = pstmt.ExecuteQuery()) { while (rs.Next()) { GridFieldVO vo = GridFieldVO.Create(ctx, windowNo, tabNo, adWindowId, adTabId, readOnly, rs); listVO.Add(vo); } } } catch (Exception e) { log.Log(Level.SEVERE, sql, e); } finally { if (pstmt != null) { try { pstmt.Close(); } catch { pstmt = null; } } } GridField[] retValue = new GridField[listVO.Count]; for (int i = 0; i < l
public ShortInterleavedRaster(SampleModel sampleModel, DataBuffer dataBuffer, Point origin) : this(sampleModel, dataBuffer, new Rectangle(origin.X, origin.Y, sampleModel.GetWidth(), sampleModel.GetHeight()), origin, null) { }
private void CopyCarbonDataFileToCarbonStorePath(string localFileName) { long copyStartTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); Logger.Info($"{_STR}{localFileName}{_STR}{carbonDataDirectoryPath}"); try { CarbonFile localCarbonFile = FileFactory.GetCarbonFile(localFileName, FileFactory.GetFileType(localFileName)); string carbonFilePath = carbonDataDirectoryPath + localFileName.Substring(localFileName.LastIndexOf(Path.DirectorySeparatorChar)); CopyLocalFileToCarbonStore(carbonFilePath, localFileName, CarbonCommonConstants.BYTEBUFFER_SIZE, GetMaxOfBlockAndFileSize(fileSizeInBytes, localCarbonFile.GetSize())); } catch (IOException e) { throw new CarbonDataWriterException(_STR); } Logger.Info($"{_STR}{localFileName}{_STR}{(DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - copyStartTime)}"); }
public override bool FlingBackward(Selector obj, bool isVertical) { UiScrollable scrollable = new UiScrollable(obj.ToUiSelector()); if (isVertical) scrollable.SetAsVerticalList(); else scrollable.SetAsHorizontalList(); return scrollable.FlingBackward(); }
protected static double ToDouble(string s) { try { return double.Parse(s); } catch (Exception e) { TestCase.Fail(_STR + s + _STR + e.ToString()); return double.NaN; } }
public void AddListener(IFilterPanelListener<T> listener) { m_listeners.AddListener(listener); }
public void TestMirror(File orig, File origni, File truecolor) { File mirror = TestSupport.AddSuffixToName(orig, _STR); File recov = TestSupport.AddSuffixToName(orig, _STR); long crc0 = _NUM; bool interlaced; bool palete; using (PngReader pngr = new PngReader(orig)) { PngWriter pngw = null; try { if (rand.NextBoolean()) pngr.SetLineSetFactory(ImageLineSetDefault.GetFactoryByte()); palete = pngr.ImgInfo.Indexed; pngr.PrepareSimpleDigestComputation(); interlaced = pngr.IsInterlaced(); pngw = new PngWriter(mirror, pngr.ImgInfo, _BOOL); pngw.SetFilterType(FilterType.FILTER_CYCLIC); pngw.CopyChunksFrom(pngr.GetChunksList()); IImageLineSet<IImageLine> lines = pngr.ReadRows(); for (int row = _NUM; row < pngr.ImgInfo.Rows; row++) { MirrorLine(lines.GetImageLine(row), pngr.ImgI
public bool IsStable() { return myFeatures.Contains(FEATURE_STABLE); }
public static void CalcTextSize(Paint paint, string demoText, FSize outputFSize) { Rectangle r = new Rectangle(0, 0, 0, 0); paint.GetTextBounds(demoText, 0, demoText.Length, ref r); outputFSize.Width = r.Width; outputFSize.Height = r.Height; }
protected override void PerformDefaults() { base.PerformDefaults(); InitializeValues(); VerifyValidation(); }
public string ToString() { var buf = new StringBuilder(_STR); for (int i = _NUM, end = _pos - _NUM; i < end; i++) { buf.Append(_data[i]); buf.Append(_STR); } if (Size() > _NUM) { buf.Append(_data[_pos - _NUM]); } buf.Append(_STR); return buf.ToString(); }
public static void Write(int x1, int y1, System.Drawing.Image image, int imageWidth, int imageHeight, LinkProperties properties, System.IO.BinaryWriter writer) { int[] pixels = new int[imageWidth * imageHeight]; // Copy the pixels from the image to the array // This is a simplistic way; in real applications, you might want to use LockBits for better performance for (int y = 0; y < imageHeight; y++) { for (int x = 0; x < imageWidth; x++) { System.Drawing.Color pixelColor = ((System.Drawing.Bitmap)image).GetPixel(x, y); int pixelValue = pixelColor.ToArgb(); pixels[y * imageWidth + x] = pixelValue; } } LinkRaster.Write(x1, y1, imageWidth, imageHeight, pixels, properties, writer); }
public void TestProjectionPredicateDifferentClassLoaders() { var ignite3 = StartGrid(NUM); URL[] clsLdrUrls; try { clsLdrUrls = new URL[] { new URL(GridTestProperties.GetProperty(STR)) }; } catch (MalformedURLException e) { throw new RuntimeException(STR, e); } var ldr1 = new URLClassLoader(clsLdrUrls, GetType().Assembly.GetLoader()); var taskCls = ldr1.LoadClass(STR); var nodeFilterCls = ldr1.LoadClass(STR); var nodeFilter = (IgnitePredicate<ClusterNode>)nodeFilterCls .GetConstructor(new[] { typeof(UUID) }) .Invoke(new object[] { ignite2.Cluster().LocalNode().Id() }); var ret = (Dictionary<UUID, int>)ExecuteAsync( Compute(ignite1.Cluster().ForPredicate(nodeFilter)), taskCls, null ).Get(TASK_EXEC_TIMEOUT_MS); Assert.IsNotNull(ret); Assert.IsTrue(ret.ContainsKey(ignite1.Cluster().LocalNode().Id()) && ret[ignite1.Cluster().LocalNode().Id()] == NU
public void StateChanged(ChangeEvent evt) { int scale = slider.Value; value.Text = _STR + scale.ToString(); size.Text = _STR + (width * scale) + _STR + (height * scale) + _STR; preview.Invalidate(); preview.Refresh(); }
public static void WriteToFile(string content, FileInfo dstFile) { if (dstFile.Exists) { throw new IOException("The file already exists in the file system."); } using (StreamWriter writer = new StreamWriter(dstFile.FullName)) { writer.Write(content); } }
public static bool IsFileURL(Uri url) { string protocol = url.Scheme; return (protocol.Equals("file", StringComparison.OrdinalIgnoreCase) || protocol.Equals("vfsfile", StringComparison.OrdinalIgnoreCase) || protocol.Equals("vfs", StringComparison.OrdinalIgnoreCase)); }
private void UpdateStatus(string relayState, int currentStatus) { if (currentStatusMap.TryGetValue(relayState, out int tmp)) { int previousStatus = tmp; switch (previousStatus) { case LOGOUT_SUCCEEDED_STATUS: if (currentStatus > previousStatus) { currentStatusMap[relayState] = currentStatus; } break; case LOGOUT_FAILED_STATUS: if (currentStatus < LOGOUT_FAILED_STATUS) { currentStatusMap[relayState] = LOGOUT_PARTIAL_STATUS; } break; default: break; } } else { currentStatusMap[relayState] = currentStatus; } }
public static int[] OidStrToInts(string oid) { int length = oid.Length; if (oid[length - _NUM] == _STR) { throw new IOException(_STR + oid); } int[] result = new int[length / _NUM + _NUM]; int number = _NUM; for (int i = _NUM; i < length; i++) { int value = _NUM; int pos = i; for (; i < length; i++) { char ch = oid[i]; if (ch < _STR || ch > _STR) { break; } value = _NUM * value + (ch - _STR); } if (i == pos) { throw new IOException(_STR + oid); } result[number++] = value; if (i == length) { break; } char nextChar = oid[i]; if (nextChar != _STR) { throw new IOException(_STR + oid); } } if (number < _NUM) { throw new IOException(_STR + oid); } return result.Skip(_
public static HashSet<string> ListServers(SSOToken ssoToken, string siteName) { HashSet<string> members = new HashSet<string>(); string siteId = GetSiteId(ssoToken, siteName); if (siteId != null) { HashSet<string> allServers = ServerConfiguration.GetServers(ssoToken); foreach (string svr in allServers) { if (ServerConfiguration.BelongToSite(ssoToken, svr, siteName)) { members.Add(svr); } } } return members; }
public static GenericObjectEditorDialog CreateDialog(Container parent) { return CreateDialog(parent, null); }
public static bool ContainsInLineFeatures(StyledLayerDescriptor sld) { if (sld != null) { foreach (var layer in sld.Layers) { if (layer is UserLayer userLayer) { if (userLayer.GetInlineFeatureDatastore() != null) { return true; } } } } return false; }
public byte[] DecodeBuffer(Stream inStream) { using (var outStream = new MemoryStream()) { DecodeBuffer(inStream, outStream); return outStream.ToArray(); } }
public static void RunFinalization() { Runtime.RunFinalization(); }
private void DisplayAllStringDefinedInStringXml() { var textView = FindViewById<SimpleIconFontTextView>(Resource.Id.text_view_1); var list = new List<string>(); list.Add(GetString(Resource.String.gems_logo)); string text = string.Join(_STR, list); textView.Text = text; }
public static void CheckHTTPRequestLength(HttpRequest request) { int maxContentLength = SAMLUtils.GetMaxContentLength(); if (maxContentLength != _NUM) { int length = request.ContentLength; if (length == -_NUM) { throw new HttpException(bundle.GetString(_STR)); } if (length > maxContentLength) { if (debug.MessageEnabled()) { debug.Message(_STR + _STR + length); } throw new HttpException(bundle.GetString(_STR)); } } }
public void AddForeignKeyConstraint(string name, string sourceField, string targetField, string targetTable) { ForeignKeyConstraint foreignKey = new ForeignKeyConstraint(name, sourceField, targetField, targetTable); AddForeignKeyConstraint(foreignKey); }
public override void OnCreate(Bundle savedInstanceState) { base.OnCreate(savedInstanceState); mHandler = new Handler(); SetContentView(Resource.Layout.voice_recognition); Button speakButton = FindViewById<Button>(Resource.Id.btn_speak); mList = FindViewById<ListView>(Resource.Id.list); mSupportedLanguageView = FindViewById<Spinner>(Resource.Id.supported_languages); PackageManager pm = PackageManager; IList<ResolveInfo> activities = pm.QueryIntentActivities(new Intent(RecognizerIntent.ActionRecognizeSpeech), _NUM); if (activities.Count != _NUM) { speakButton.Click += (s, e) => SpeakButtonClick(); } else { speakButton.Enabled = _BOOL; speakButton.Text = _STR; } RefreshVoiceSettings(); } private void SpeakButtonClick() { // Implement speak button click logic here (if applicable) }
public void Push(Notification notification, NotificationResponseListener listener) { string notificationTopic = notification.GetTopic(); string topic = notificationTopic ?? defaultTopic; Request req = Utils.BuildRequest(client, topic, notification, gateway); semaphore.Wait(); req.Send(new ResponseListener(semaphore, notification, listener)); }
private static void AppendJsonPair(StringBuilder json, string key, string value) { bool isValueNumeric = false; try { if (value.Equals(string.Empty) || !value.EndsWith(string.Empty)) { double.Parse(value); isValueNumeric = true; } } catch (FormatException) { isValueNumeric = false; } if (json[json.Length - 1] != '{') { json.Append(','); } json.Append(EscapeJson(key)); json.Append(':'); if (isValueNumeric) { json.Append(value); } else { json.Append(EscapeJson(value)); } }
public void UpdateFromResource() { foreach (string resource in resources) { using (Stream is = Assembly.GetExecutingAssembly().GetManifestResourceStream(resource)) { var parseResult = Parse(is); foreach (EntryType type in myMap.Keys) { var dataMappings = myMap[type]; var resourceMappings = parseResult[type]; var tempMappings = new Dictionary<string, ConfigEntry>(); var keys = new HashSet<string>(dataMappings.Keys); keys.UnionWith(resourceMappings.Keys); foreach (string key in keys) { if (resourceMappings.ContainsKey(key)) { tempMappings[key] = resourceMappings[key]; } else { tempMappings[key] = dataMappings[key]; } } myMap[type] = tempMappings; } } } }
private void Deselect(int index, bool shouldFireEvents) { CheckWidget(); if (index < _NUM || index >= items.Count) { return; } var item = selection.RemoveAt(index); if (shouldFireEvents) { FireSelectionEvent(item); } var deselectedItems = new List<DLItem>(); item.SetLastAction(LAST_ACTION.DESELECTION); deselectedItems.Add(item); if (shouldFireEvents) { FireSelectionChangeEvent(deselectedItems); } RedrawTables(); }
public bool IsLeaf(object nd) { Node node = (Node)nd; return !node.HasChildNodes(); }
public void AddListener(Listener listener) { mListeners.Add(listener); NotifyServiceDiscovered(mMatchingDrones); }
public override bool Equals(object obj) { // Compare this equality with equality if (obj == null || GetType() != obj.GetType()) { return false; } // Further comparison logic goes here... return base.Equals(obj); }
private double[] ParseVector(string s) { string[] entries = s.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries); double[] d = new double[entries.Length]; for (int i = _NUM; i < entries.Length; i++) { try { d[i] = double.Parse(entries[i]); } catch (FormatException) { throw new AbortException(_STR); } } return d; }
public void TestCreateUpdate() { string id = _STR; var metadata = new Dictionary<string, object> { { FileMetadataSchema.ID, id }, { _STR, _STR } }; int version0; long createTime0; byte[] expected0 = new byte[] { _NUM, _NUM, _NUM }; { version0 = repo.Create(metadata); metadata[FileMetadataSchema.VERSION] = version0; Assert.AreEqual(_STR, _NUM, version0); var doc = (RepositoryDocumentImpl)repo.Read(id); createTime0 = doc.GetVersionCreateTime(); var actual = doc.AsMap(); Assert.AreEqual(_STR, id, actual[FileMetadataSchema.ID]); Assert.AreEqual(_STR, version0, actual[FileMetadataSchema.VERSION]); Assert.AreEqual(_STR, _STR, actual[_STR]); Assert.AreEqual(_STR, metadata.Count, actual.Count); repo.CopyStream(id, version0, new MemoryStream(expected0)); Assert.AreEqual(_STR, expected0, Read(repo.InputStream(id, version0))); } int version1; long createTime1; b
public override void WriteExternal(IDataOutput outStream) { base.WriteExternal(outStream); outStream.WriteDouble(knnDistance); }
public SessionWrapper(Session ses) { this.ses = ses; this.time = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); }
public static List<BatchResponse> PostWithSingleRequest(RequestSpecification requestSpec, ResponseSpecification responseSpec, BatchRequest br) { List<BatchRequest> batchRequests = new List<BatchRequest> { br }; string jsonifiedRequest = BatchHelper.ToJsonString(batchRequests); List<BatchResponse> response = BatchHelper.PostBatchRequestsWithoutEnclosingTransaction(requestSpec, responseSpec, jsonifiedRequest); Debug.Assert(response != null); Debug.Assert(response.Count > _NUM); return response; }
public FileInfo ProgramDirectory() { return programDirectory; }
public override void ClearRouteSensors() { _controlSensorList = new List<ControlSensor>(); }
public static KEYSTORE_TYPE FromString(string x) { foreach (KEYSTORE_TYPE currentType in Enum.GetValues(typeof(KEYSTORE_TYPE))) { if (x.Equals(currentType.ToString(), StringComparison.OrdinalIgnoreCase)) return currentType; } throw new ConfigurationException(string.Format(_STR, x)); }
public ObjectMapper NextLevel(ObjectMapper level) { ObjectMapper previous = levelStack.Peek(); levelStack.Push(level); return previous; }
protected static int ToDigit(char ch, int index) { int digit = CharUnicodeInfo.GetDecimalDigitValue(ch); if (digit == -1) { throw new HexDecodeException($"Invalid character {ch} at index {index}"); } return digit; }
public JObject ToJson() { JObject json = new JObject(); JArray jpods = new JArray(); foreach (var pod in pods) { jpods.Add(pod.ToJson()); } json[_STR] = jpods; json[_STR] = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); return json; }
public static KeyStore Load(FileInfo keyStoreFile, Password password) { KeyStoreType keyStoreType = null; try { keyStoreType = CryptoFileUtil.DetectKeyStoreType(new FileStream(keyStoreFile.FullName, FileMode.Open)); } catch (FileNotFoundException ex) { throw ex; } catch (IOException ex) { throw new CryptoException(Resources.GetString(_STR), ex); } if (keyStoreType == null) { return null; } return Load(keyStoreFile, password, keyStoreType); }
public override void RemovePropertyChangeListener(PropertyChangeListener pcl) { m_pcSupport.RemovePropertyChangeListener(pcl); }
[VisibleForTesting] static bool IsPrecachingEnabled(Context context) { var prefs = PreferenceManager.GetDefaultSharedPreferences(context); return prefs.GetBoolean(PREF_IS_PRECACHING_ENABLED, false); }
public void And(LongBitSet other) { int pos = Math.Min(numWords, other.numWords); while (--pos >= _NUM) { bits[pos] &= other.bits[pos]; } if (numWords > other.numWords) { Array.Fill(bits, _NUM, other.numWords, numWords - other.numWords); } }
public override bool Equals(object obj) { if (this == obj) return true; if (!(obj is PrincipalEntry)) return false; PrincipalEntry that = (PrincipalEntry)obj; return principalClass.Equals(that.principalClass) && principalName.Equals(that.principalName); }
public bool IsValidLockdownProfile() { try { return _BOOL; } catch (ArgumentException e) { Log.Warning(TAG, _STR, e); return _BOOL; } }
private int ReadServerResponse() { StringBuilder replyBuf = new StringBuilder(_NUM); int c; int continuingCode = -_NUM; int code; string response; serverResponse.SetSize(_NUM); while (_BOOL) { while ((c = in.Read()) != -_NUM) { if (c == _STR) { if ((c = in.Read()) != _STR) { replyBuf.Append((char)_STR); } } replyBuf.Append((char)c); if (c == _STR) break; } response = replyBuf.ToString(); replyBuf.Length = 0; if (logger.IsLoggable(PlatformLogger.Level.FINEST)) { logger.Finest(_STR + serverAddr + _STR + response); } if (response.Length == _NUM) { code = -_NUM; } else { try { code = int.Parse(response.Substring(_NUM, _NUM)); } catch (FormatException) { code = -_NUM; } catch (ArgumentOutOfRangeException)
public static bool IsExtension(string filename, string[] extensions) { if (filename == null) { return false; } if (extensions == null || extensions.Length == 0) { return IndexOfExtension(filename) == -1; } string fileExt = GetExtension(filename); foreach (string extension in extensions) { if (fileExt.Equals(extension)) { return true; } } return false; }
public FromClause(Stream streamOne, OuterJoinQualifier outerJoinQualifier, Stream streamTwo) { this(streamOne); Add(streamTwo); outerJoinQualifiers.Add(outerJoinQualifier); }
private static void DecodeAnsiX12Segment(BitSource bits, StringBuilder result) { int[] cValues = new int[_NUM]; do { if (bits.Available() == _NUM) { return; } int firstByte = bits.ReadBits(_NUM); if (firstByte == _NUM) { return; } ParseTwoBytes(firstByte, bits.ReadBits(_NUM), cValues); for (int i = _NUM; i < _NUM; i++) { int cValue = cValues[i]; if (cValue == _NUM) { result.Append(_STR); } else if (cValue == _NUM) { result.Append(_STR); } else if (cValue == _NUM) { result.Append(_STR); } else if (cValue == _NUM) { result.Append(_STR); } else if (cValue < _NUM) { result.Append((char)(cValue + _NUM)); } else if (cValue < _NUM) { result.Append((char)(cValue + _NUM));
public static KdbDatabase CreateKdbDatabase(Credentials credentials, KdbHeader kdbHeader, Stream inputStream) { using (var dataInput = new LittleEndianDataInputStream(inputStream)) { CheckSignature(dataInput); DeserializeHeader(kdbHeader, dataInput); using (var decryptedInputStream = kdbHeader.CreateDecryptedInputStream(credentials.GetKey(), inputStream)) using (var digest = Encryption.GetMessageDigestInstance()) using (var digestInputStream = new DigestInputStream(decryptedInputStream, digest)) { dataInput = new LittleEndianDataInputStream(digestInputStream); KdbDatabase kdbDatabase = new KdbDatabase(); KdbGroup lastGroup = (KdbGroup)kdbDatabase.GetRootGroup(); for (long group = _NUM; group < kdbHeader.GetGroupCount(); group++) { lastGroup = DeserializeGroup(lastGroup, dataInput); } for (long entry = _NUM; entry < kdbHeader.GetEntryCount(); entry++) { DeserializeEntry(kdbDatabase, dataInput); } if (!digest.Digest().SequenceEqual(kdbHeader.GetContentHash()))
private DiffPart DecodeAdd(int blockSize_S, int blockSize_L) { if (blockSize_S < _NUM || blockSize_L < _NUM) { throw new DecodingException(_STR + blockSize_S + _STR + blockSize_L); } int s = r.Read(blockSize_S); int l = r.Read(blockSize_L); using (var output = new MemoryStream()) { for (int i = _NUM; i < l; i++) { output.WriteByte(r.ReadByte()); } DiffPart part = new DiffPart(DiffAction.INSERT); part.SetStart(s); part.SetText(Encoding.UTF8.GetString(output.ToArray())); return part; } }
public void Sort() { Array.Sort(V, _NUM, Size()); }
public void RebuildPanel() { if (activeWorker != null && !activeWorker.IsCompleted) { activeWorker.Cancel(true); } panelImages.Clear(); panelImages.Invalidate(); // Refreshes the panel scrollPane.Refresh(); // Repaints the scroll pane activeWorker = new ImageLoader(mediaFiles); activeWorker.Execute(); }
protected void ProcessBytes(byte[] buf, int off, int len) { nBytesIn += len; if (len < _NUM || state.IsDone()) return; if (state == State.ROW_READY) throw new PngjInputException(_STR); if (inf.NeedsDictionary() || !inf.NeedsInput()) throw new RuntimeException(_STR); inf.SetInput(buf, off, len); if (IsCallbackMode()) { while (InflateData()) { int nextRowLen = ProcessRowCallback(); PrepareForNextRow(nextRowLen); if (IsDone()) ProcessDoneCallback(); } } else { InflateData(); } }
protected override string ToString(FileInfo obj) { return obj.FullName; }
public void GoToNextPage() { bool isLastPage = viewPager.CurrentItem == (pages.Count - _NUM); if (!isLastPage) { viewPager.SetCurrentItem(viewPager.CurrentItem + _NUM, _BOOL); } }
private static Stream NullInputStream() { if (DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() > _NUM) { return null; } throw new NullReferenceException(); }
public IReadOnlyList<TypeId> AsList() { return new List<TypeId>(types).AsReadOnly(); }
private static void DeleteRules(List<string> batchList, List<Rule> rulesToDelete) { string deleteStatement = _STR + RULES_TABLE + _STR; foreach (Rule rule in rulesToDelete) { batchList.Add(string.Format(deleteStatement, rule.GetUid())); } }
public bool IsVisited(object element) { return myVisitedElements.ContainsKey(element); }
public AwsIotConnection(AbstractAwsIotClient client) { this.client = client; }
public static Task<T> ExceptionallyCompletedFuture<T>(Exception exception) { var taskCompletionSource = new TaskCompletionSource<T>(); taskCompletionSource.SetException(exception); return taskCompletionSource.Task; }
protected void InitForecastErrors(List<float> model, TimeSeries.DataSequence data) { double sumErr = _NUM; double sumAbsErr = _NUM; double sumAbsPercentErr = _NUM; double sumErrSquared = _NUM; int processedPoints = _NUM; int n = data.Size(); for (int i = _NUM; i < n; i++) { double error = model[i] - data.Get(i).Value; sumErr += error; sumAbsErr += Math.Abs(error); sumAbsPercentErr += Math.Abs(error / data.Get(i).Value); sumErrSquared += error * error; processedPoints++; } this.bias = sumErr / processedPoints; this.mad = sumAbsErr / processedPoints; this.mape = sumAbsPercentErr / processedPoints; this.mse = sumErrSquared / processedPoints; this.sae = sumAbsErr; errorsInit = _BOOL; }
public bool CheckModifiers(MouseEventArgs e) { return e.Button == modifiers; }
public void EmitRetainedVars(GenerateJsVisitor gen) { if (retainedVars.Count > 0) { gen.Out(_STR); bool first = true; foreach (string varName in retainedVars) { if (!first) { gen.Out(_STR); } first = false; gen.Out(varName); } gen.EndLine(true); retainedVars.Clear(); } }
public Uri CreateUri(string scheme, string authority, string path, string query, string fragment) { if (scheme != null && path != null && !string.IsNullOrEmpty(path) && path[0] != '/') { throw new UriFormatException(path); } var uriBuilder = new StringBuilder(); if (scheme != null) { uriBuilder.Append(scheme); uriBuilder.Append(":"); } if (authority != null) { uriBuilder.Append("//"); AuthorityEncoder.AppendEncoded(uriBuilder, authority); } if (path != null) { PathEncoder.AppendEncoded(uriBuilder, path); } if (query != null) { uriBuilder.Append("?"); AllLegalEncoder.AppendEncoded(uriBuilder, query); } if (fragment != null) { uriBuilder.Append("#"); AllLegalEncoder.AppendEncoded(uriBuilder, fragment); } return new Uri(uriBuilder.ToString(), UriKind.RelativeOrAbsolute); }
public List<StructuredTranslation> KbestExtractOnHG(HyperGraph hg, int topN) { ResetState(); if (hg == null || hg.GoalNode == null) { return new List<StructuredTranslation>(); } List<StructuredTranslation> kbest = new List<StructuredTranslation>(topN); for (int k = _NUM; k <= topN; k++) { StructuredTranslation translation = GetKthStructuredTranslation(hg.GoalNode, k); if (translation == null) { break; } kbest.Add(translation); } return kbest; }
public override int Read() { lock (lockObject) { CheckNotClosed(); if (pos != count) { return str[pos++] & 0xFF; // Return the character as an integer } return -1; // Return -1 if the end of the string is reached } }
public static bool IsSnapshotFullCopySupported(Uri blockSnapUri, DbClient dbClient) { BlockSnapshot blockObj = dbClient.QueryObject<BlockSnapshot>(blockSnapUri); StorageSystem storage = dbClient.QueryObject<StorageSystem>(blockObj.GetStorageController()); return (storage != null && (storage.DeviceIsType(Type.OpenStack) || storage.DeviceIsType(Type.VNXBlock) || storage.DeviceIsType(Type.IBMXIV) || storage.DeviceIsType(Type.VMAX))); }
public IEnumerable<ServiceDescriptor> ListServices() { List<ServiceDescriptor> serviceDescriptors = new List<ServiceDescriptor>(); foreach (var fileDescriptor in fileDescriptors) { serviceDescriptors.AddRange(fileDescriptor.GetServices()); } return serviceDescriptors; }
private string StripCodeValueSentences(string input) { return Regex.Replace(input, _STR, _STR); }
public void TestDivideRoundHalfEvenNeg2() { string a = _STR; int aScale = _NUM; string b = _STR; int bScale = _NUM; string c = _STR; int resScale = -_NUM; decimal aNumber = Convert.ToDecimal(new BigInteger(a) * (decimal)Math.Pow(10, -aScale)); decimal bNumber = Convert.ToDecimal(new BigInteger(b) * (decimal)Math.Pow(10, -bScale)); decimal result = Math.Round(aNumber / bNumber, resScale, MidpointRounding.ToEven); Assert.AreEqual(c, result.ToString()); Assert.AreEqual(resScale, BitConverter.GetBytes(decimal.GetBits(result)[3])[2]); }
public static double Quantile(double p, double alpha, double beta) { if (double.IsNaN(alpha) || double.IsNaN(beta) || double.IsNaN(p) || alpha < _NUM || beta < _NUM) { return double.NaN; } if (p < _NUM || p > _NUM) { return double.NaN; } if (p == _NUM) { return _NUM; } if (p == _NUM) { return _NUM; } if (p > _NUM) { return _NUM - RawQuantile(_NUM - p, beta, alpha, LogBeta(beta, alpha)); } else { return RawQuantile(p, alpha, beta, LogBeta(alpha, beta)); } }
public bool Validate(string cert, string signedData, string signature) { byte[] certBytes = Convert.FromBase64String(cert); byte[] signedDataBytes = Convert.FromBase64String(signedData); byte[] signatureBytes = Convert.FromBase64String(signature); return Validate(certBytes, signedDataBytes, signatureBytes); }
private SharedDeployment CreateNewDeployment(GridDeploymentMetadata meta, bool isCache) { System.Diagnostics.Debug.Assert(Monitor.IsEntered(mux)); System.Diagnostics.Debug.Assert(meta.ParentLoader() == null); IgniteUuid ldrId = IgniteUuid.FromUuid(ctx.LocalNodeId()); GridDeploymentClassLoader clsLdr; if (meta.DeploymentMode() == DeploymentMode.CONTINUOUS || meta.Participants() == null) { clsLdr = new GridDeploymentClassLoader(ldrId, meta.UserVersion(), meta.DeploymentMode(), _BOOL, ctx, ctx.Config().GetClassLoader() != null ? ctx.Config().GetClassLoader() : U.GridClassLoader(), meta.ClassLoaderId(), meta.SenderNodeId(), comm, ctx.Config().GetNetworkTimeout(), log, ctx.Config().GetPeerClassLoadingLocalClassPathExclude(), ctx.Config().GetPeerClassLoadingMissedResourcesCacheSize(), meta.DeploymentMode() == DeploymentMode.CONTINUOUS, _BOOL); if (meta.Participants() != null) { foreach (var e in meta.Participants()) { clsLdr.Register(e.Key, e.Value); } } if (log.IsDebugEnab
public int Size() { return seq.Count; }
public void TestAddServletRunAsRole() { string xml = WEBAPP_TEST_HEADER + _STR + _STR + _STR + _STR + _STR; WebXml webXml = WebXmlIo.ParseWebXml(new MemoryStream(Encoding.UTF8.GetBytes(xml)), GetEntityResolver()); WebXmlUtils.AddServletRunAsRoleName(webXml, _STR, _STR); string roleName = WebXmlUtils.GetServletRunAsRoleName(webXml, _STR); Assert.AreEqual(_STR, roleName); }
public void TestCase15() { byte[] aBytes = { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; byte[] bBytes = { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; int aSign = -_NUM; int bSign = -_NUM; byte[] rBytes = { -_NUM, -_NUM, -_NUM, -_NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger bNumber = new BigInteger(bSign, bBytes); BigInteger result = aNumber.Subtract(bNumber); byte[] resBytes = new byte[rBytes.Length]; resBytes = result.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert
public MultiTermQuery(string field) { this.field = field ?? throw new ArgumentNullException(nameof(field), "Field cannot be null."); }
public static void PrintLine(object message) { if (!IsDisabled()) { PrintLine(message.ToString()); } }
public void Accumulate(TaggedLogAPIEntity entity) { AggregateAPIEntity current = root; foreach (string groupby in groupbys) { string tagv = LocateGroupbyField(groupby, entity); if (string.IsNullOrEmpty(tagv)) { tagv = UNASSIGNED_GROUPBY_ROOT_FIELD_NAME; } var children = current.GetEntityList(); if (!children.ContainsKey(tagv)) { children[tagv] = factory.Create(); current.SetNumDirectDescendants(current.GetNumDirectDescendants() + _NUM); } AggregateAPIEntity child = children[tagv]; if (counting) { Count(child); } foreach (string sumFunctionField in sumFunctionFields) { Sum(child, entity, sumFunctionField); } current = child; } }
public void TestInvalidXml() { TestInvalidGpx(INVALID_XML_GPX); }
public string ToString(bool expand) { StringBuilder acc = new StringBuilder(); ToString(acc, _NUM, expand); return acc.ToString(); }
public static bool IsAccessorPair(TMember member, TMember member2) { return (member is TGetter && member2 is TSetter) || (member is TSetter && member2 is TGetter); }
using System; using System.Globalization; public static class DateFormatter { public static DateTimeFormatInfo CreateUTCDateFormatter(string dateFormat) { DateTimeFormatInfo formatter = new DateTimeFormatInfo { FullDateTimePattern = dateFormat, ShortDatePattern = dateFormat, ShortTimePattern = dateFormat, LongTimePattern = dateFormat, }; // Set the culture to UTC CultureInfo culture = new CultureInfo("en-US"); culture.DateTimeFormat = formatter; return formatter; } }
public void WriteLinkedKml(string filename, KmlType kml) { if (filename.Equals(_STR)) { throw new ArgumentException(_STR); } if (filename.Equals(_STR)) { throw new ArgumentException(_STR); } WriteKml(filename, kml); }
public string DestinationFilePath() { return destinationFilePath; }
public override void RefreshUsersOrGroupsListFromServer() { ShowLoadingDialog(GetString(Resource.String.common_loading)); var getTask = new GetShareWithUsersAsyncTask(this); object[] parameters = { GetFile(), GetAccount(), GetStorageManager() }; getTask.Execute(parameters); }
public BootPanel() { InitComponents(); }
private List<Header> DefaultHeaders() { var dateFormat = new SimpleDateFormat(_STR); var headers = new List<Header>(); headers.Add(new BasicHeader(_STR, dateFormat.Format(DateTime.Now))); return headers; }
public AemParsys Clear() { var list = currentScope.FindElements(By.CssSelector(SELECTOR_FOR_COMPONENT_IN_PARSYS)); list.ForEach(element => element.Remove()); return this; }
protected RequestHandle SendRequest(HttpClient client, HttpContext httpContext, HttpRequestMessage uriRequest, string contentType, IResponseHandler responseHandler, Context context) { if (contentType != null) { uriRequest.Headers.TryAddWithoutValidation("Content-Type", contentType); } responseHandler.SetRequestHeaders(uriRequest.Headers.ToArray()); responseHandler.SetRequestURI(uriRequest.RequestUri); var request = threadPool.Submit(() => new AsyncHttpRequest(client, httpContext, uriRequest, responseHandler)); if (context != null) { if (!requestMap.TryGetValue(context, out List<WeakReference<Future>> requestList)) { requestList = new List<WeakReference<Future>>(); requestMap[context] = requestList; } requestList.Add(new WeakReference<Future>(request)); } return new RequestHandle(request); }
private void RegisterNewClient(JsonObject jData) { Client newClient = gson.FromJson<Client>(jData); if (newClient.IsValid()) { AddClient(newClient); BroadcastNewClient(newClient); SendClientList(newClient); } else { logger.Log(LogLevel.Warning, _STR); } }
public override void Parse(Stream inputStream, string baseUri) { if (inputStream == null) { throw new ArgumentException(_STR); } if (baseUri == null) { throw new ArgumentException(_STR); } InputSource inputSource = new InputSource(new BOMInputStream(inputStream, _BOOL)); inputSource.SetSystemId(baseUri); Parse(inputSource); }
public static DateTime ParseDate(string dateValue, ICollection<string> dateFormats) { if (dateValue == null) { throw new ArgumentException("Date value cannot be null."); } if (dateFormats == null) { dateFormats = DEFAULT_PATTERNS; // Assuming DEFAULT_PATTERNS is defined elsewhere } if (dateValue.Length > _NUM && dateValue.StartsWith(_STR) && dateValue.EndsWith(_STR)) { dateValue = dateValue.Substring(_NUM, dateValue.Length - _NUM - _NUM); } DateTime parsedDate; var cultureInfo = new CultureInfo("en-US"); var timeZoneInfo = TimeZoneInfo.FindSystemTimeZoneById(_STR); // Assuming _STR is a valid time zone ID foreach (var format in dateFormats) { try { parsedDate = DateTime.ParseExact(dateValue, format, cultureInfo); return TimeZoneInfo.ConvertTime(parsedDate, timeZoneInfo); } catch (FormatException) { // Ignore and try the next format } } throw new DateParseException(_STR + dateValu
public JSONObject Remove(string name) { if (name == null) { throw new ArgumentNullException(_STR); } int index = IndexOf(name); if (index != -_NUM) { table.RemoveAt(index); names.RemoveAt(index); values.RemoveAt(index); } return this; }
EdgeMap<Block> FindLoops(Deque<Block> code, Map<Block, Block> idom, SetMap<Block, Edge> pred) { EdgeMap<Block> loops = new EdgeMap<Block>(); foreach (Block b in code) { foreach (Edge s in b.Succ()) { if (IsLoop(s, idom)) { VerboseStatus(_STR + s); Block h = s.To; HashSet<Block> loop = loops.Get(h); HashSet<Block> work = new HashSet<Block>(); foreach (Edge p in pred.Get(h)) { if (IsLoop(p, idom) && !loop.Contains(p.From) && p.From != h) { loop.Add(p.From); work.Add(p.From); } } while (work.Count > 0) { Block x = GetBlock(work); foreach (Edge p in pred.Get(x)) { if (p.From != h && !loop.Contains(p.From)) { loop.Add(p.From); work.Add(p.From); } } } } } } return loops; }
public int[] ReadLine() { int[] record = new int[MAX_LEN]; int checksum = _NUM; int charIn; try { while ((charIn = buffIn.Read()) == _NUM || charIn == _NUM) { } if (charIn != _STR) { if (log.IsDebugEnabled) { log.Debug(_STR + lineNo); } return new int[] { -_NUM }; } } catch (IOException e) { MessageBox.Show(this, _STR, _STR, MessageBoxButtons.OK, MessageBoxIcon.Error); if (log.IsDebugEnabled) { log.Debug(_STR + e.ToString()); } } record[LEN] = RdHexByte(); checksum += record[LEN]; record[ADDRH] = RdHexByte(); checksum += record[ADDRH]; record[ADDRL] = RdHexByte(); checksum += record[ADDRL]; record[TYPE] = RdHexByte(); checksum += record[TYPE]; address = (address & _NUM) + record[ADDRH] * _NUM + record[ADDRL
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
private void GenerateHiveTestFiles() { using (StreamWriter writerA = new StreamWriter(Path.Combine(testWorkDir, _STR))) using (StreamWriter writerB = new StreamWriter(Path.Combine(testWorkDir, _STR))) { char sep = _STR; int idB = _NUM; int idA = _NUM; int v = _NUM; for (int i = _NUM; i < _NUM; i++) { writerA.Write(idA++); writerA.Write(sep); writerA.WriteLine(idB); writerB.Write(idB++); writerB.Write(sep); writerB.WriteLine(v += _NUM); writerB.Write(idB++); writerB.Write(sep); writerB.WriteLine(v += _NUM); } writerA.Flush(); writerB.Flush(); } }
public void RenameEditorPanel(Editor panel) { if (panelsList.Count == _NUM) { return; } for (int i = _NUM; i < panelsList.Count; i++) { object o = panelsList[i]; if (o == panel) { var r = (JCheckBoxMenuItem)panelsSubMenu.GetItem(i); r.Text = panel.GetTitle(); return; } } }
private bool FitsAsSingleLine(int col) { return (col + SingleLineWidth() <= PcalTLAGen.WrapColumn) || (BodyFormulas.Sf == null && (PrcdFormulas == null || PrcdFormulas.Count == _NUM)); }
protected override void Before() { previousThreads = Thread.AllStackTraces; }
public void SphericalToWorld(Vector3 vec) { if (pjUnprojected == null) { string projStr = _STR + projInfo.GetSemiMajorAxis() + _STR + projInfo.GetSemiMinorAxis() + _STR; pjUnprojected = Proj4.NewInstance(projStr); } if (pjProjected == null) { pjProjected = Proj4.NewInstance(proj4String); } try { vec.ToArray(coord); coord[_NUM] = Math.ToRadians(coord[_NUM]); coord[_NUM] = Math.ToRadians(coord[_NUM]); pjUnprojected.Transform(pjProjected, coord); vec.SetX(coord[_NUM]); vec.SetY(coord[_NUM]); } catch (Exception e) { Console.WriteLine(e); } }
public string Replace(CharSequence target, CharSequence replacement) { if (target == null) { throw new NullReferenceException(_STR); } if (replacement == null) { throw new NullReferenceException(_STR); } string targetString = target.ToString(); int matchStart = IndexOf(targetString, _NUM); if (matchStart == -_NUM) { return this; } string replacementString = replacement.ToString(); int targetLength = targetString.Length; if (targetLength == _NUM) { int resultLength = count + (count + _NUM) * replacementString.Length; StringBuilder result = new StringBuilder(resultLength); result.Append(replacementString); int end = offset + count; for (int i = offset; i != end; ++i) { result.Append(value[i]); result.Append(replacementString); } return result.ToString(); } StringBuilder resultBuilder = new StringBuilder(count); int searchStart = _NUM; do { resultBuilder.Append(value, offset + searchStart, matchStart - searchStart); resultBuilder.Append(replacem
public static string EncodeUrl(string str) { return Encode(str, _STR); }
public void DrawRenderedImage(RenderedImage img, AffineTransform xform) { if (img == null) { return; } mPrintMetrics.DrawImage(this, img); mDrawingArea.AddInfinite(); }
private long BuildSize(int durationInSeconds, LinkInfo linfo) { long result = -_NUM; double bitRateSum = _NUM; switch (linfo.fmt) { case _NUM: bitRateSum = _NUM + _NUM / _NUM; break; case _NUM: bitRateSum = _NUM + _NUM / _NUM; break; case _NUM: bitRateSum = _NUM + _NUM / _NUM; break; case _NUM: bitRateSum = _NUM + _NUM / _NUM; break; case _NUM: bitRateSum = _NUM + _NUM / _NUM; break; case _NUM: bitRateSum = _NUM + _NUM / _NUM; break; case _NUM: bitRateSum = _NUM + _NUM / _NUM; break; case _NUM: bitRateSum = _NUM + _NUM / _NUM; break; case _NUM: bitRateSum = _NUM + _NUM / _NUM; break; case _NUM: bitRateSum = _
private void SkipToEndOfLine() { while (pos < in.Length) { char c = in[pos]; if (c == _STR || c == _STR) { pos++; break; } pos++; } }
public IndependenceTest IndTestSubset(List<object> vars) { return null; }
public override void ActOn(FileInfo file) { StreamReader reader = null; try { reader = new StreamReader(file.FullName); AnnounceSeedsFromReader(reader); } catch (FileNotFoundException fnf) { logger.Log(LogLevel.Error, _STR, fnf); } finally { reader?.Dispose(); } }
public static string FormatMillis(int millis) { const string _STR = ":"; const int _NUM = 60; string result = string.Empty; int hr = millis / (1000 * _NUM * _NUM); millis %= (1000 * _NUM * _NUM); int min = millis / (1000 * _NUM); millis %= (1000 * _NUM); int sec = millis / 1000; if (hr > 0) { result += hr + _STR; } if (min >= 0) { if (min > 0) { result += min + _STR; } else { result += _STR + min + _STR; } } if (sec > 0) { result += sec; } else { result += _STR + sec; } return result; }
public void AddPropertyChangeListener(string propertyName, PropertyChangedEventHandler listener) { propertyChangeSupport.AddPropertyChangeListener(propertyName, listener); }
public FileInfo CreateNewFolder(DirectoryInfo containingDir) { if (containingDir == null) { throw new IOException(_STR); } FileInfo newFolder = CreateFileObject(containingDir, newFolderString); int i = _NUM; while (newFolder.Exists && i < _NUM) { newFolder = CreateFileObject(containingDir, string.Format(newFolderNextString, i)); i++; } if (newFolder.Exists) { throw new IOException(_STR + newFolder.FullName); } else { newFolder.Create(); } return newFolder; }
public ResourcesPoet AddTypedArray(string name, List<string> values) { Element element = document.CreateElement(_STR); element.SetAttribute(_STR, name); foreach (string value in values) { Element valueElement = document.CreateElement(_STR); valueElement.AppendChild(document.CreateTextNode(value)); element.AppendChild(valueElement); } resourceElement.AppendChild(element); return this; }
public bool AddSubAction(ConfAction actionConf) { if (actionConf.GetType() != null) { SubAction sub = SubAction.Factory(actionConf.GetType(), actionConf); if (sub == null) { if (Cfg.DEBUG) { Check.Log(TAG + _STR + actionConf.GetType()); } return _BOOL; } list.Add(sub); if (sub is SubActionSlow) { SetQueue(MAIN_QUEUE); } return _BOOL; } else { if (Cfg.DEBUG) { Check.Log(TAG + _STR); } return _BOOL; } }
void FillEntryTree(HashSet<PageLeafEntry> entries, Row row) { int ptr = _rowHead; byte[] buffer = _buffer; while (ptr < BLOCK_SIZE) { int code = buffer[ptr] & CODE_MASK; int len = GetLength(code, row); if (code == INSERT || code == REMOVE) { PageLeafEntry entry = new PageLeafEntry(this, row, ptr, len, code); entries.Add(entry); } ptr += len; } }
public static bool ContainsAtLeastOne<S>(ICollection<S> left, ICollection<S> right) { if (left == null || right == null) { return false; } foreach (S id in left) { if (right.Contains(id)) { return true; } } return false; }
private bool ProcessKeyUp(int keyCode) { if (keyCode == KeyEvent.KEYCODE_ESCAPE || keyCode == KeyEvent.KEYCODE_BACK) { Dismiss(); return _BOOL; } else if (keyCode == KeyEvent.KEYCODE_TAB) { if (mInKbMode) { if (IsTypedTimeFullyLegal()) { FinishKbMode(_BOOL); } return _BOOL; } } else if (keyCode == KeyEvent.KEYCODE_ENTER) { if (mInKbMode) { if (!IsTypedTimeFullyLegal()) { return _BOOL; } FinishKbMode(_BOOL); } mCallback?.OnTimeSet(mTimePicker, mTimePicker.GetHours(), mTimePicker.GetMinutes()); Dismiss(); return _BOOL; } else if (keyCode == KeyEvent.KEYCODE_DEL) { if (mInKbMode) { if (mTypedTimes.Count > 0) { int deleted = DeleteLastTypedKey(); string deletedKeyStr; if (deleted == GetAmOrPmKeyCode(AM)) { deletedKeyStr = mAmText; } else
public void AssertDurationIsInRange(long expectedMillis) { long minimum = (long)(expectedMillis * _NUM); long maximum = Math.Max((long)(expectedMillis * _NUM), _NUM); long waitMillis = Math.Max(expectedMillis * _NUM, _NUM); long duration = GetDurationMillis(waitMillis); if (duration < minimum) { Assert.Fail(_STR + expectedMillis + _STR + minimum + _STR + duration); } else if (duration > maximum) { Assert.Fail(_STR + expectedMillis + _STR + maximum + _STR + duration); } }
public void LogDiff(string id, string field, string db, string hw) { StringBuilder diffBuffer = new StringBuilder(string.Format(_STR, id, field)); if (string.IsNullOrEmpty(db) || db.Equals(NO_MATCHING_ENTRY, StringComparison.OrdinalIgnoreCase)) { diffBuffer.Append(string.Format(_STR, hw)); } else if (string.IsNullOrEmpty(hw) || hw.Equals(NO_MATCHING_ENTRY, StringComparison.OrdinalIgnoreCase)) { diffBuffer.Append(string.Format(_STR, db)); } else { diffBuffer.Append(string.Format(_STR, db ?? _STR, hw ?? _STR)); } msgs.Append(diffBuffer.ToString() + _STR); if (log != null) { log.Info(diffBuffer.ToString()); } }
public FieldFrameBodyIMG(Lyrics3Image image) { images.Add(image); }
public AbstractResource(string mimetype) : this(mimetype, DateTimeOffset.Now.ToUnixTimeMilliseconds()) { }
private void Parameters() { foreach (var arg in arguments) { arg = arg.ToLower(); if (!arg.StartsWith(_STR)) throw new ArgumentException(_STR + arg); int colonIndex = arg.IndexOf(_STR); string key; string value; if (colonIndex >= _NUM) { key = arg.Substring(_NUM, colonIndex - _NUM); value = arg.Substring(colonIndex + _NUM); } else { key = arg.Substring(_NUM); value = _STR; } if (!allowedKeys.Contains(key)) throw new ArgumentException(_STR + arg.Substring(_NUM) + _STR + StringUtil.ToCommaDelimitedString(allowedKeys)); hashtable[key] = value; } foreach (var requiredKey in requiredKeys) { if (!hashtable.ContainsKey(requiredKey)) throw new ArgumentException(_STR + requiredKey); } }
public List<TLV> InitRespondSmp(string question, string secret, bool initiating) { if (question != null && !initiating) throw new ArgumentException(_STR); byte[] ourFp = Hex.Decode(keyManager.GetLocalFingerprint(sessionID)); string remoteFingerprint = keyManager.GetRemoteFingerprint(sessionID); if (remoteFingerprint == null) throw new OtrException(_STR); byte[] theirFp = Hex.Decode(remoteFingerprint); byte[] sessionId; try { sessionId = ComputeSessionId(session.GetS()); } catch (SMException ex) { throw new OtrException(ex); } byte[] bytes = Encoding.UTF8.GetBytes(secret); int combinedBufLen = _NUM + sessionId.Length + bytes.Length; byte[] combinedBuf = new byte[combinedBufLen]; combinedBuf[_NUM] = _NUM; if (initiating) { Array.Copy(ourFp, _NUM, combinedBuf, _NUM, _NUM); Array.Copy(theirFp, _NUM, combinedBuf, _NUM, _NUM); } else { Array.Copy(theirFp, _N
private double MelToLinFreq(double inputFreq) { return (NUM * (Math.Pow(NUM, (inputFreq / NUM)) - NUM)); }
public RoundedIconGenerator(int iconWidthPx, int iconHeightPx, int cornerRadiusPx, Color backgroundColor, float textSizePx) { mIconWidthPx = iconWidthPx; mIconHeightPx = iconHeightPx; mCornerRadiusPx = cornerRadiusPx; mBackgroundRect = new RectangleF(0, 0, mIconWidthPx, mIconHeightPx); mBackgroundPaint = new SolidBrush(backgroundColor); mTextPaint = new Font("Arial", textSizePx, FontStyle.Bold); mTextBrush = new SolidBrush(Color.White); using (Graphics g = Graphics.FromImage(new Bitmap(1, 1))) { FontFamily fontFamily = mTextPaint.FontFamily; StringFormat stringFormat = new StringFormat(); SizeF textSize = g.MeasureString("Sample", mTextPaint, new SizeF(mIconWidthPx, mIconHeightPx), stringFormat); mTextHeight = (float)Math.Ceiling(textSize.Height); mTextYOffset = -textSize.Height + textSize.Height / 2; // adjust as needed to center text } }
public static byte[] RandomBytes(int size) { byte[] bytes = new byte[size]; seededRandom.NextBytes(bytes); return bytes; }
public override string ToString() { StringBuilder bfString = new StringBuilder(); bfString.Append(_STR); if (m_starting != null) { bfString.Append(_STR); bfString.Append(StartSetToString()); bfString.Append(_STR); } if (m_threshold != -double.MaxValue) { bfString.Append(_STR + Utils.DoubleToString(m_threshold, _NUM, _NUM) + _STR); } return bfString.ToString(); }
protected void ArrayCopy(byte[] buf, int pos, int length) { mMessage.Write(buf, pos, length); mPosition += length; }
public bool IsExpired() { return (DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - time) > DFLT_EXPIRATION_TIMEOUT; }
public JSONObject Put(string key, bool value) { Put(key, value ? true : false); return this; }
private void WriteAttribute(string prefix, string namespaceUri, string attName, string attValue, System.Xml.XmlWriter xmlWriter) { if (xmlWriter.GetPrefix(namespaceUri) == null) { xmlWriter.WriteStartElement(prefix, attName, namespaceUri); xmlWriter.WriteNamespace(prefix, namespaceUri); } xmlWriter.WriteAttributeString(attName, attValue); }
private void HandleSelection(View view, Item item, int position) { if (!item.IsSelectable()) { return; } if (item.IsSelected() && !mAllowDeselection) { return; } bool selected; if (mPositionBasedStateManagement) { selected = mSelections.Contains(position); } else { selected = item.IsSelected(); } if (mSelectWithItemUpdate || view == null) { if (!mMultiSelect) { Deselect(); } if (selected) { Deselect(position); } else { Select(position); } } else { if (!mMultiSelect) { if (mPositionBasedStateManagement) { foreach (var pos in mSelections.ToList()) { if (pos != position) { Deselect(pos); } } } else { var selections = GetSelections(); foreach (var pos in selections) { if (pos != position) { Deselect(pos); } } } } item.WithSetSelec
public bool CanInvoke(MDepreciationWorkfile assetwk, MAssetAcct assetAcct, int A_Current_Period, decimal Accum_Dep) { if (assetwk == null) { log.Warning(_STR); return _BOOL; } int offset = _NUM; int lifePeriods = assetwk.GetUseLifeMonths(assetwk.IsFiscal()); bool ok = (offset <= A_Current_Period); if (CLogMgt.IsLevelFinest()) { log.Finest(_STR + A_Current_Period + _STR + lifePeriods + _STR + offset + _STR + ok); } return ok; }
public bool WriteHeader(Stream os) { try { WriteInt(os, CACHE_MAGIC); WriteString(os, key); WriteString(os, etag == null ? _STR : etag); WriteLong(os, serverDate); WriteLong(os, lastModified); WriteLong(os, ttl); WriteLong(os, softTtl); WriteStringStringMap(responseHeaders, os); os.Flush(); return _BOOL; } catch (IOException e) { VolleyLog.d(_STR, e.ToString()); return _BOOL; } }
public byte[] GetResponseAsByteArray() { using (var output = new MemoryStream()) { try { Copy(Buffer(), output); } catch (IOException e) { throw new HttpRequestException(e.Message, e); } return output.ToArray(); } }
public void FadeOutAllLayers() { mTransitionState = TRANSITION_STARTING; Array.Fill(mIsLayerOn, _BOOL); InvalidateSelf(); }
public SortedDictionary<float, List<List<int>>> PackModifiedFirstFitDescending() { throw new NotSupportedException(_STR); }
public void AddTextChangeListener(FilterQueryChangeListener textChangeListener) { listeners.Add(textChangeListener); }
public override IEnumerator<Profile> GetEnumerator() { return profiles.GetEnumerator(); }
private bool StartsWithSpace(string str) { return str.Length != _NUM && str[_NUM] == _STR; }
public string Wrap(string path) { return uriPrefix + path; }
private int KeyToLevel(string key) { string[] token = key.Split(_STR); return token.Length - _NUM; }
public bool MouseDragged(MouseEvent e) { if (grabbedPlotGraphics) { int x = e.X; int y = e.Y; int dx = x - prevX; int dy = y - prevY; plotX += dx; plotY += dy; prevX = x; prevY = y; graph.Resize(plotX, plotY, plotWidth, plotHeight); OMGraphicList plotGraphics = graph.GetPlotGraphics(); plotGraphics.Generate(GetProjection(), _BOOL); Repaint(); } return _BOOL; }
private void InitCachingHttpHeadersFilter(IServiceProvider serviceProvider, DispatcherType[] disps) { _logger.LogDebug(_STR); var cachingHttpHeadersFilter = serviceProvider.GetRequiredService<IServiceCollection>() .AddScoped<CachingHttpHeadersFilter>(); var filterRegistration = serviceProvider.GetRequiredService<IFilterCollection>(); filterRegistration.Add(new FilterRegistration { FilterType = typeof(CachingHttpHeadersFilter), Name = _STR, AsyncSupported = _BOOL }); filterRegistration.AddUrlPatterns(disps, _BOOL, _STR); filterRegistration.AddUrlPatterns(disps, _BOOL, _STR); }
protected void AddCommonComponent(XMLComponent component) { if (fCommonComponents.Contains(component)) { return; } fCommonComponents.Add(component); AddRecognizedParamsAndSetDefaults(component); }
private SNode AwaitFulfill(SNode s, bool timed, long nanos) { long deadline = timed ? DateTime.Now.Ticks * 100 : _NUM; Thread w = Thread.CurrentThread; int spins = ShouldSpin(s) ? (timed ? maxTimedSpins : maxUntimedSpins) : _NUM; while (true) { if (w.IsBackground) s.TryCancel(); SNode m = s.Match; if (m != null) return m; if (timed) { nanos = deadline - (DateTime.Now.Ticks * 100); if (nanos <= _NUM) { s.TryCancel(); continue; } } if (spins > _NUM) spins = ShouldSpin(s) ? (spins - _NUM) : _NUM; else if (s.Waiter == null) s.Waiter = w; else if (!timed) Thread.Sleep(Timeout.Infinite); else if (nanos > spinForTimeoutThreshold) Thread.Sleep((int)nanos / 1000000); // Convert nanos to milliseconds } }
public void Load(GeneralSubtrees generalSubtrees) { List<GeneralSubtree> generalSubtreesList = generalSubtrees.GetGeneralSubtrees(); generalSubtreesList.Sort(new GeneralSubtreeBaseComparator()); data = new object[generalSubtreesList.Count][_NUM]; int i = _NUM; foreach (var generalSubtree in generalSubtreesList) { data[i][_NUM] = generalSubtree; data[i][_NUM] = generalSubtree; data[i][_NUM] = generalSubtree; i++; } FireTableDataChanged(); }
public override synchronized int Read() { if (pos < count) { return buffer[pos++] & _NUM; } return -_NUM; }
public bool IsPingDisabled() { return (healthcheck != null && !healthcheck.Exists()); }
using System.IO; public static void WriteToFile(string filePath, string contents) { using (FileStream fs = new FileStream(filePath, FileMode.Create, FileAccess.Write)) { byte[] info = System.Text.Encoding.UTF8.GetBytes(contents); fs.Write(info, 0, info.Length); } }
public void MakeTreeOfWritables(IEnumerable<KeyValuePair<string, int>> flatData) { Text key = new Text(); foreach (var pair in flatData) { key.Set(pair.Key); List<IntWritable> valList; if (!mockInput.ContainsKey(key)) { valList = new List<IntWritable>(); mockInput[key] = valList; key = new Text(); } else { valList = (List<IntWritable>)mockInput[key]; } valList.Add(new IntWritable(pair.Value)); } }
public static double Angle(Coordinate p0, Coordinate p1) { double dx = p1.X - p0.X; double dy = p1.Y - p0.Y; return Math.Atan2(dy, dx); }
public InMemoryCursor(string[] columnNames) { mCurrentPosition = -_NUM; mColumnNames = columnNames; }
public override bool IsEnabled() { if (attributeSelectionPanel != null && !IsValueOnly()) { return attributeSelectionPanel.IsEnabled(); } else { if (slider != null) { return slider.IsEnabled(); } } return _BOOL; }
private void RenderForeground(ExecutionUnit process, Graphics g2, bool printing) { if (drawHighlight && !printing && (model.IsDragStarted() || (model.IsDropTargetSet() && model.IsImportDragged())) || model.IsOperatorSourceHovered()) { switch (RapidMinerGUI.GetDragHighlightMode()) { case HighlightMode.FULL: case HighlightMode.BORDER: DrawDragBorder(process, g2); break; case HighlightMode.NONE: default: break; } } }
public ModbusTransaction CreateTransaction() { ModbusSerialTransaction transaction = new ModbusSerialTransaction(); transaction.SetTransport(this); return transaction; }
public void Start() { if (runner == null) { runner = new Thread(this, _STR); runner.Start(); } }
public synchronized int ExportObject(string name, object obj) { var clazz = obj.GetType(); var eo = new ExportedObject(); eo.Object = obj; eo.Methods = clazz.GetMethods(); exportedObjects.Add(eo); eo.Identifier = exportedObjects.Count - _NUM; if (name != null) { exportedNames[name] = eo; } try { stubGen.MakeProxyClass(clazz); } catch (NotFoundException e) { throw new CannotCompileException(e); } return eo.Identifier; }
protected readonly DirectoryInfo CreateDBFFDCDirectory() { DirectoryInfo dbffdcDir = new DirectoryInfo(ffdcDirectoryName); if (!dbffdcDir.Exists) { bool isDBFFDcDirCreated = dbffdcDir.Create(); if (isDBFFDcDirCreated) { dbffdcDir = new DirectoryInfo(ffdcDirectoryName); return dbffdcDir; } } else if (!dbffdcDir.Attributes.HasFlag(FileAttributes.Directory)) { return null; } return dbffdcDir; }
public static string ReadCharacterSizedString(Stream stream) { StringBuilder result = new StringBuilder(); int strLen = ReadUINT16(stream); int character = stream.ReadByte(); if (character != -1) { character |= stream.ReadByte() << 8; } do { if (character != -1) { result.Append((char)character); character = stream.ReadByte(); if (character != -1) { character |= stream.ReadByte() << 8; } } } while (character != -1 || (result.Length + 1) > strLen); if (strLen != (result.Length + 1)) { throw new InvalidOperationException("Invalid string length"); } return result.ToString(); }
protected void ProcessChildren(QueryNode queryTree) { List<QueryNode> children = queryTree.GetChildren(); ChildrenList newChildren; if (children != null && children.Count > _NUM) { newChildren = AllocateChildrenList(); try { foreach (var child in children) { var processedChild = ProcessIteration(child); if (processedChild == null) { throw new NullReferenceException(); } newChildren.Add(processedChild); } List<QueryNode> orderedChildrenList = SetChildrenOrder(newChildren); queryTree.Set(orderedChildrenList); } finally { newChildren.BeingUsed = _BOOL; } } }
private void InitializeMessages(List<string> messages) { messages.AddRange(TipOfTheDayMessages.GetGeneralMessages()); if (OSUtils.IsWindows()) { messages.AddRange(TipOfTheDayMessages.GetWindowsMessages()); } else if (OSUtils.IsMacOSX()) { messages.AddRange(TipOfTheDayMessages.GetMacOSXMessages()); } else if (OSUtils.IsLinux()) { messages.AddRange(TipOfTheDayMessages.GetLinuxMessages()); } else { messages.AddRange(TipOfTheDayMessages.GetOtherMessages()); } if (!OSUtils.IsMacOSX()) { messages.AddRange(TipOfTheDayMessages.GetNonMacOSXMessages()); } messages.AddRange(TipOfTheDayMessages.GetFrostWireMessages()); messages.Shuffle(); _currentTip = -_NUM; }
public PersistedQueue(string queueEnvPath, string queueName, int cacheSize) { Directory.CreateDirectory(queueEnvPath); var dbEnvConfig = new EnvironmentConfig { Transactional = _BOOL, AllowCreate = _BOOL }; this.dbEnv = new Environment(queueEnvPath, dbEnvConfig); var dbConfig = new DatabaseConfig { Transactional = _BOOL, AllowCreate = _BOOL, DeferredWrite = _BOOL }; this.queueDatabase = dbEnv.OpenDatabase(null, queueName, dbConfig); this.queueName = queueName; this.cacheSize = cacheSize; this.opsCounter = _NUM; }
protected StringBuilder Write(StringBuilder sb, params object[] objects) { foreach (object str in objects) { sb.Append(str); } return sb; }
public override bool ConnectionAllowed(EventSetDescriptor esd) { return ConnectionAllowed(esd.Name); }
public static Request NewPostOpenGraphActionRequest(Session session, OpenGraphAction openGraphAction, Callback callback) { if (openGraphAction == null) { throw new FacebookException(_STR); } if (string.IsNullOrEmpty(openGraphAction.GetType())) { throw new FacebookException(_STR); } string path = string.Format(MY_ACTION_FORMAT, openGraphAction.GetType()); return NewPostRequest(session, path, openGraphAction, callback); }
public void ShowLoading() { SwitchState(LOADING, null, null, null, null, null, new List<int>()); }
public void ReadExternal(BinaryReader reader) { int vocabSize = reader.ReadInt32(); for (int i = _NUM; i < vocabSize; i++) { string line = reader.ReadString(); Vocabulary.Id(line); } numTokens = reader.ReadDouble(); countFuncs = new long[reader.ReadInt32()][_NUM]; for (int i = _NUM; i < countFuncs.Length; i++) { countFuncs[i][_NUM] = reader.ReadInt64(); countFuncs[i][_NUM] = reader.ReadInt64(); } typesFuncs = new long[reader.ReadInt32()][_NUM]; for (int i = _NUM; i < typesFuncs.Length; i++) { typesFuncs[i][_NUM] = reader.ReadInt64(); typesFuncs[i][_NUM] = reader.ReadInt64(); } quantizationBase = reader.ReadDouble(); bf = new BloomFilter(); bf.ReadExternal(reader); }
public static double ComputeMAD(double[] x, double median) { for (int i = _NUM; i < x.Length; i++) { x[i] = Math.Abs(x[i] - median); } double mad = QuickSelect.Median(x); if (!(mad > _NUM)) { double min = double.PositiveInfinity; foreach (double xi in x) { if (xi > _NUM && xi < min) { min = xi; } } if (min < double.PositiveInfinity) { mad = min; } else { mad = _NUM; } } if (mad == double.PositiveInfinity) { double max = _NUM; foreach (double xi in x) { if (xi < double.PositiveInfinity && xi > max) { max = xi; } } if (max < double.PositiveInfinity) { mad = max; } else { mad = _NUM; } } return mad; }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public SdpException(Exception rootCause) : base(rootCause.Message) { }
private bool LinkFirst(Node<E> node) { if (count >= capacity) return false; Node<E> f = first; node.next = f; first = node; if (last == null) last = node; else f.prev = node; ++count; notEmpty.Signal(); return true; }
protected void NotifyPropertyChangeListener(string property, object oldValue, object newValue) { HashSet<PropertyChangeListener> v; lock (this) { v = new HashSet<PropertyChangeListener>(listeners); } foreach (var listener in v) { listener.PropertyChange(new PropertyChangeEvent(this, property, oldValue, newValue)); } }
public bool IndicateDirtyRead(ITemplateHolder template) { return (template.IsReadOperation() && _useDirtyRead) || template.IsDirtyReadRequested(); }
public JValueSlider(string title, int min, int max, int value) { this(title, min, max, value); m_smin = min; m_srange = max - min; m_slider.Minimum = min; m_slider.Maximum = max; SetValue(value); }
protected void ApplyAttributesToSymbol(TacticalGraphicAttributes graphicAttributes, TacticalSymbolAttributes symbolAttributes) { double? value = graphicAttributes.GetInteriorOpacity(); if (value.HasValue) { symbolAttributes.SetOpacity(value.Value); } value = graphicAttributes.GetScale(); if (value.HasValue) { symbolAttributes.SetScale(value.Value); } Material material = graphicAttributes.GetInteriorMaterial(); symbolAttributes.SetInteriorMaterial(material); Font font = graphicAttributes.GetTextModifierFont(); if (font != null) { symbolAttributes.SetTextModifierFont(font); } material = graphicAttributes.GetTextModifierMaterial(); if (material != null) { symbolAttributes.SetTextModifierMaterial(material); } }
public void IncreaseIdleCount(IdleStatus status, long currentTime) { if (status == IdleStatus.BothIdle) { idleCountForBoth.IncrementAndGet(); lastIdleTimeForBoth = currentTime; } else if (status == IdleStatus.ReaderIdle) { idleCountForRead.IncrementAndGet(); lastIdleTimeForRead = currentTime; } else if (status == IdleStatus.WriterIdle) { idleCountForWrite.IncrementAndGet(); lastIdleTimeForWrite = currentTime; } else { throw new ArgumentException(_STR + status.ToString()); } }
public RemoteServiceDescriptor(string baseUrl, HttpJsonRequestFactory requestFactory) { this.baseUrl = baseUrl; this.requestFactory = requestFactory; try { Uri baseUrlUri = new Uri(baseUrl); string protocol = baseUrlUri.Scheme; if (protocol != "http" && protocol != "https") { throw new ArgumentException(string.Format("Invalid URL protocol: {0}", baseUrl)); } } catch (UriFormatException) { throw new ArgumentException(string.Format("Invalid URL format: {0}", baseUrl)); } }
private Journal ReadJournal(ParcelFileDescriptor oldState) { Journal journal = new Journal(); if (oldState == null) { return journal; } using (FileInputStream inStream = new FileInputStream(oldState.FileDescriptor)) { try { int availableBytes = inStream.available(); if (DEBUG) Console.WriteLine(TAG + _STR + availableBytes); if (availableBytes < MAX_JOURNAL_SIZE) { byte[] buffer = new byte[availableBytes]; int bytesRead = 0; bool valid = false; InvalidProtocolBufferNanoException lastProtoException = null; while (availableBytes > 0) { try { int result = inStream.Read(buffer, bytesRead, Math.Min(_NUM, availableBytes)); if (result > 0) { availableBytes -= result; bytesRead += result; } else { Console.WriteLine(TAG + _STR); availableBytes = 0; } } catch (IOException e) { buffer = null; availableBytes = 0; } try { MessageNano.MergeF
public Server Start() { try { started = true; service.Start(); string name = service.GetName() + " " + service.GetURL() + " "; Thread t = new Thread(new ThreadStart(this)); t.IsBackground = service.IsDaemon(); t.Start(); for (int i = 1; i < int.MaxValue; i *= 2) { Thread.Sleep(i); if (IsRunning(true)) { return this; } } if (IsRunning(true)) { return this; } throw new DbException(ErrorCode.EXCEPTION_OPENING_PORT_2, name, " "); } catch (DbException e) { throw DbException.ToSQLException(e); } }
public override bool IsComplete() { return _BOOL; }
public ByteMatrix Encode(string contents, int width, int height, IDictionary<EncodeHintType, object> hints) { if (contents == null || contents.Length == 0) { throw new ArgumentException("Contents cannot be null or empty."); } if (width < 1 || height < 1) { throw new ArgumentException($"Width and height must be greater than 0: {width}, {height}"); } ErrorCorrectionLevel errorCorrectionLevel = ErrorCorrectionLevel.L; if (hints != null && hints.TryGetValue(EncodeHintType.ERROR_CORRECTION, out var requestedECLevel)) { errorCorrectionLevel = (ErrorCorrectionLevel)requestedECLevel; } QRCode code = new QRCode(); Encoder.Encode(contents, errorCorrectionLevel, hints, code); return RenderResult(code, width, height); }
public IntBuffer Put(int[] src, int srcOffset, int intCount) { if (IsReadOnly()) { throw new ReadOnlyBufferException(); } CheckOffsetAndCount(src.Length, srcOffset, intCount); if (intCount > Remaining()) { throw new BufferOverflowException(); } for (int i = srcOffset; i < srcOffset + intCount; ++i) { Put(src[i]); } return this; }
public Request Header(string key, string value) { if (key == null) throw new ArgumentNullException(nameof(key)); if (value == null) throw new ArgumentNullException(nameof(value)); _headers[key] = value; return this; }
public void UpdateUI() { base.UpdateUI(); this.BackColor = Color.FromArgb(_NUM, _NUM, _NUM, _NUM); this.WordWrap = _BOOL; this.Highlighter = null; this.ReadOnly = !_BOOL; LookAndFeel.InstallBorder(this, _STR); LookAndFeel.InstallColorsAndFont(this, _STR, _STR, _STR); if (resizeHandler != null) { resizeHandler.ComponentResized(null); } SizePolicy policy = (SizePolicy)this.GetClientProperty(typeof(SizePolicy)); if (policy != null) { GUIUtils.RestrictSize(this, policy); } }
public static void GenerateExtensionManager(string rootFolder) { string outFile = Path.Combine(rootFolder, REGISTRY_PATH); StringBuilder builder = new StringBuilder(); builder.Append(_STR); GenerateImports(builder); GenerateClass(builder); File.WriteAllText(outFile, builder.ToString()); }
public synchronized Task<V> Submit(Callable<V> task) { if (pool == null) { throw new RejectedExecutionException(); } return pool.Submit(task); }
private void CheckBucketName(string name) { if (name == null) { throw new InvalidBucketNameException(NULL_STRING, _STR); } if (name.Length < _NUM || name.Length > _NUM) { string msg = _STR; throw new InvalidBucketNameException(name, msg); } if (System.Text.RegularExpressions.Regex.IsMatch(name, _STR)) { string msg = _STR + _STR; throw new InvalidBucketNameException(name, msg); } if (!System.Text.RegularExpressions.Regex.IsMatch(name, _STR)) { string msg = _STR + _STR; throw new InvalidBucketNameException(name, msg); } }
private void ValidateUserNamespaceAuthorizationCreateRequest(UserNamespaceAuthorizationCreateRequest request) { if (request == null) { throw new ArgumentNullException(nameof(request), _STR); } ValidateUserNamespaceAuthorizationKey(request.GetUserNamespaceAuthorizationKey()); ValidateNamespacePermissions(request.GetNamespacePermissions()); }
protected string Format(object o) { return o.ToString(); }
public void CalculateDerived() { xStats.CalculateDerived(); yStats.CalculateDerived(); differencesStats.CalculateDerived(); correlation = double.NaN; if (!double.IsNaN(xStats.StdDev) && !double.IsNaN(yStats.StdDev) && !Utils.Equal(xStats.StdDev, _NUM)) { double slope = (xySum - xStats.Sum * yStats.Sum / count) / (xStats.SumSq - xStats.Sum * xStats.Mean); if (!Utils.Equal(yStats.StdDev, _NUM)) { correlation = slope * xStats.StdDev / yStats.StdDev; } else { correlation = _NUM; } } if (Utils.Greater(differencesStats.StdDev, _NUM)) { double tval = differencesStats.Mean * Math.Sqrt(count) / differencesStats.StdDev; if (m_degreesOfFreedom >= _NUM) { differencesProbability = Statistics.FProbability(tval * tval, _NUM, m_degreesOfFreedom); } else { if (count > _NUM) { differencesProbability = Statistics.FProbability(tval * t
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
protected bool CanDeleteConsistencyGroup(BlockConsistencyGroup consistencyGroup) { return !consistencyGroup.GetInactive() && !consistencyGroup.Created(); }
public static void CloseQuietly(IDisposable disposable) { if (disposable != null) { try { disposable.Dispose(); } catch (RuntimeException rethrown) { throw rethrown; } catch (Exception ignored) { // Ignored } } }
public AmqpMessage ReceiveNoWait() { CheckClosed(); return Prefetch.Poll(); }
protected override void RemoveRange(int start, int end) { if (start < _NUM) { throw new IndexOutOfRangeException(_STR + start); } else if (end > size) { throw new IndexOutOfRangeException(_STR + end + _STR + size); } else if (start > end) { throw new IndexOutOfRangeException(_STR + start + _STR + end); } if (start == end) { return; } if (end == size) { Array.Fill(array, null, firstIndex + start, size - start); } else if (start == _NUM) { Array.Fill(array, null, firstIndex, end); firstIndex += end; } else { Array.Copy(array, firstIndex + end, array, firstIndex + start, size - end); int lastIndex = firstIndex + size; int newLast = lastIndex + start - end; Array.Fill(array, null, newLast, lastIndex - newLast); } size -= end - start; modCount++; }
private bool zzRefill() { if (zzStartRead > _NUM) { Array.Copy(zzBuffer, zzStartRead, zzBuffer, _NUM, zzEndRead - zzStartRead); zzEndRead -= zzStartRead; zzCurrentPos -= zzStartRead; zzMarkedPos -= zzStartRead; zzPushbackPos -= zzStartRead; zzStartRead = _NUM; } if (zzCurrentPos >= zzBuffer.Length) { char[] newBuffer = new char[zzCurrentPos * _NUM]; Array.Copy(zzBuffer, _NUM, newBuffer, _NUM, zzBuffer.Length); zzBuffer = newBuffer; } int numRead = zzReader.Read(zzBuffer, zzEndRead, zzBuffer.Length - zzEndRead); if (numRead < _NUM) { return false; // Assuming _BOOL is false when the condition meets } else { zzEndRead += numRead; return true; // Assuming _BOOL is true otherwise } }
private void CheckDuplicateNamesDuringDelete(List<int> ids) { List<Entity> myEntities = game.GetPlayerEntities(game.GetPlayer(localPlayerNumber), _BOOL); Dictionary<string, List<int>> rawNameToId = new Dictionary<string, List<int>>(myEntities.Count * _NUM); foreach (Entity e in myEntities) { string rawName = e.GetShortNameRaw(); if (!rawNameToId.TryGetValue(rawName, out List<int> namedIds)) { namedIds = new List<int>(); } namedIds.Add(e.GetId()); rawNameToId[rawName] = namedIds; } foreach (int id in ids) { Entity removedEntity = game.GetEntity(id); if (removedEntity == null) { continue; } string removedRawName = removedEntity.GetShortNameRaw(); if (duplicateNameHash.TryGetValue(removedEntity.GetShortNameRaw(), out int count) && count > _NUM) { if (rawNameToId.TryGetValue(removedRawName, out List<int> namedIds)) { foreach (int i in namedIds)
protected void StopBKCluster() { if (bkc != null) { bkc.Close(); } foreach (var server in bs) { server.Shutdown(); var autoRecovery = autoRecoveryProcesses[server]; if (autoRecovery != null && IsAutoRecoveryEnabled()) { autoRecovery.Shutdown(); LOG.Debug(_STR + server.GetLocalAddress()); } } bs.Clear(); foreach (var dir in tmpDirs) { FileUtils.DeleteDirectory(dir); } }
public void Or(Criteria criteria) { oredCriteria.Add(criteria); }
public void ReleaseSelections(HashSet<Entity> items) { foreach (var item in items) { ReleaseSelection(item); } }
public HubLinkMapping(string fileName, int numberOfHubs, Network network) { this.numberOfHubs = numberOfHubs; if (fileName.Contains(_STR)) { ReadMappingTable(fileName); unMappedLinksAtZeroHub = _BOOL; return; } HandleUnmappedLinksStart(); try { using (StreamReader sr = new StreamReader(fileName)) { string line; while ((line = sr.ReadLine()) != null) { var tokens = line.Split(' '); for (int i = _NUM; i < this.numberOfHubs; i++) { if (tokens.Length > i) { if (double.TryParse(tokens[i], out double linkId)) { linkHubMapping[linkId.ToString()] = i; } } else { throw new InvalidOperationException(_STR); } } } } } catch (Exception e) { throw new InvalidOperationException(_STR, e); } linkHubMapping.Remove(_STR); HandleUnmappedLinksEnd(network); }
public bool DeleteLoadName(string load) { if (!_loadList.Contains(load)) { return _BOOL; } _loadList.Remove(load); log.Debug(_STR + GetName() + _STR + load); SetDirtyAndFirePropertyChange(LOADS_CHANGED_PROPERTY, _loadList.Count + _NUM, _loadList.Count); return _BOOL; }
private ComputeState ValidateComputeName(string awsId, string vmName) { if (this.isAwsClientMock) { return null; } ComputeState computeState = GetComputeByAWSId(this.host, awsId); string tagNameValue = computeState.name; if (tagNameValue == null) { throw new ArgumentNullException(nameof(tagNameValue), "Tag name value must not be null."); } if (vmName != tagNameValue) { throw new ArgumentException("The provided VM name does not match the tag name value."); } return computeState; }
public static string FromTag(IntArrayTag tag) { StringBuilder builder = new StringBuilder(); builder.Append(ARRAY_START); bool start = true; foreach (int value in tag.GetValue()) { IntTag i = new IntTag(value); if (start) { start = false; } else { builder.Append(ELEMENT_SEPARATOR); } builder.Append(FromTag(i)); } builder.Append(ARRAY_END); return builder.ToString(); }
public static int RemoveArgsAndReturnInsertionIndex(List<string> args, int argIndex, bool tryRemovingArgValue) { if (argIndex < _NUM || argIndex >= args.Count) { return _NUM; } if (tryRemovingArgValue) { string argValue = GetArgValue(args, argIndex + _NUM); if (argValue != null) { args.RemoveAt(argIndex + _NUM); } } args.RemoveAt(argIndex); return argIndex; }
void ReplacePolicyInResourceTree(ServiceTypeManager svtm, SSOToken token, Policy oldPolicy, Policy newPolicy) { RemovePolicyFromResourceTree(svtm, token, oldPolicy); AddPolicyToResourceTree(svtm, token, newPolicy); }
public AtomicDoubleArray(int length) { larray = new AtomicLongArray(length); long ZERO = BitConverter.DoubleToInt64Bits(_NUM); for (int i = _NUM; i < length; i++) { larray.Set(i, ZERO); } }
private void CopyAction(FileInfo srcFile, FileInfo destFile) { using (FileStream istream = new FileStream(srcFile.FullName, FileMode.Open, FileAccess.Read)) using (FileStream ostream = new FileStream(destFile.FullName, FileMode.Create, FileAccess.Write)) { FileChannel input = istream.GetChannel(); FileChannel output = ostream.GetChannel(); input.TransferTo(0, input.Size(), output); } }
private void RecomputeSeparation(double[][] means, double[][] cdist, LongStatistic diststat) { int k = means.Length; for (int i = _NUM; i < k; i++) { DoubleVector mi = DoubleVector.Wrap(means[i]); for (int j = _NUM; j < i; j++) { cdist[i][j] = cdist[j][i] = distanceFunction.Distance(mi, DoubleVector.Wrap(means[j])); } } if (diststat != null) { diststat.Increment((k * (k - _NUM)) >> _NUM); } }
private static Bitmap MakeSquare(Bitmap input) { if (input.Height == input.Width) { return input; } else { int max = Math.Max(input.Height, input.Width); int dx = (max - input.Width) / _NUM; int dy = (max - input.Height) / _NUM; return CreateImg(max, max, input.PixelFormat, null); } }
protected abstract void HandleLostEntry(HttpRoute route);
public void WriteStartElement(string localName) { if (localName == null || localName.Length == _NUM) { throw new XMLStreamException(_STR); } _state = STATE_ELEMENT; if (_currentEle != null && _currentEle.GetState() == ELEMENT_STARTTAG_OPEN) { CloseStartTag(); } _currentEle = new Element(_currentEle, localName, _BOOL); OpenStartTag(); _writer.Write(localName); }
public void AddProcessInteractionListener(ProcessInteractionListener listener) { if (listener == null) { throw new ArgumentException(_STR); } processInteractionListeners.Add(listener); }
private void TraverseInternal(object root, bool yieldRoot, IdentityHashMap<object, object> seen) { if (root == null || seen.ContainsKey(root)) { return; } if (yieldRoot) { if (!Visit(root)) { return; } } seen[root] = root; if (root is JSONObject json) { foreach (string key in json.Keys()) { try { TraverseInternal(json.Get(key), _BOOL, seen); } catch (JSONException e) { throw new System.Exception(e.Message, e); } } } else if (root is JSONArray array) { for (int i = _NUM; i < array.Length; ++i) { try { TraverseInternal(array.Get(i), _BOOL, seen); } catch (JSONException e) { throw new System.Exception(e.Message, e); } } } else if (root is IDictionary map) { foreach (var value in map.Values) { TraverseInternal(value, _BOOL, seen); } } else if (root is IList lis
public StringBuilder ReplaceFirst(string searchStr, string replaceStr) { int searchLen = (searchStr == null ? 0 : searchStr.Length); if (searchLen > 0) { int index = IndexOf(searchStr, 0); if (index >= 0) { int replaceLen = (replaceStr == null ? 0 : replaceStr.Length); ReplaceImpl(index, index + searchLen, searchLen, replaceStr, replaceLen); } } return this; }
protected abstract void InternalPut(int index, byte b);
public CommonTurnoutOperationConfig(TurnoutOperation op) : base(op) { myOp = (CommonTurnoutOperation)op; maxTriesSpinner = new NumericUpDown(); intervalSpinner = new NumericUpDown(); var vbox = new FlowLayout(FlowLayout.TopLeft); var hbox1 = new FlowLayout(FlowLayout.TopLeft); var hbox2 = new FlowLayout(FlowLayout.TopLeft); vbox.Controls.Add(hbox2); vbox.Controls.Add(hbox1); vbox.Controls.Add(new Label()); // Placeholder for vertical glue hbox1.Controls.Add(new Label(Bundle.GetMessage(_STR))); hbox1.Controls.Add(new Label()); // Placeholder for horizontal glue intervalSpinner.MinimumSize = new Size(_NUM, _NUM); intervalSpinner.Minimum = CommonTurnoutOperation.minInterval; intervalSpinner.Maximum = CommonTurnoutOperation.maxInterval; intervalSpinner.Value = (decimal)myOp.GetInterval(); intervalSpinner.Increment = (decimal)CommonTurnoutOperation.intervalStepSize; hbox1.Controls.Add(intervalSpinner); hbox2.Controls.Add(new Label(Bundle.GetMessage(_STR))); h
public static string GenerateSalt(int logRounds, Random random) { if (logRounds < _NUM || logRounds > _NUM) { throw new ArgumentException(_STR); } StringBuilder rs = new StringBuilder(); byte[] rnd = new byte[BCRYPT_SALT_LEN]; random.NextBytes(rnd); rs.Append(_STR); if (logRounds < _NUM) { rs.Append(_STR); } rs.Append(logRounds); rs.Append(_STR); EncodeBase64(rnd, rnd.Length, rs); return rs.ToString(); }
protected void DrawDescription(Canvas c) { if (!mDescription.Equals(_STR)) { if (mDescriptionPosition == null) { c.DrawText(mDescription, GetWidth() - mViewPortHandler.OffsetRight() - _NUM, GetHeight() - mViewPortHandler.OffsetBottom() - _NUM, mDescPaint); } else { c.DrawText(mDescription, mDescriptionPosition.X, mDescriptionPosition.Y, mDescPaint); } } }
public long ParseBytes(string freeSpace, string path) { try { long bytes = long.Parse(freeSpace); if (bytes < _NUM) { throw new IOException(_STR + DF + _STR + _STR + path + _STR); } return bytes; } catch (FormatException ex) { throw new IOExceptionWithCause(_STR + DF + _STR + _STR + path + _STR, ex); } }
public string FindInterlanguageLink(string lang) { int start = page.IndexOf(_STR + lang + _STR); if (start < 0) return null; int end = page.IndexOf(_STR, start); if (end < 0) return null; string link = page.Substring(start + 0 + lang.Length, end - (start + 0 + lang.Length)); if (link.IndexOf(_STR) != -1) { return null; } if (link.Length == 0) return null; return link; }
private void UpdateActions(INaviAddressSpace addressSpace) { m_loadAddressSpaceAction.Enabled = !addressSpace.IsLoaded(); }
public static IParallelFlux<T> From<T>(IPublisher<T> source, int parallelism) { return From(source, parallelism, QueueSupplier.SMALL_BUFFER_SIZE, QueueSupplier.Small()); }
private static void CleanDirectoryOnExit(DirectoryInfo directory) { if (!directory.Exists) { string message = directory.FullName + " is not found."; throw new ArgumentException(message); } if (!directory.Attributes.HasFlag(FileAttributes.Directory)) { string message = directory.FullName + " is not a directory."; throw new ArgumentException(message); } FileInfo[] files = directory.GetFiles(); IOException exception = null; foreach (FileInfo file in files) { try { ForceDeleteOnExit(file); } catch (IOException ioe) { exception = ioe; } } if (exception != null) { throw exception; } } // You need to implement this method according to your needs private static void ForceDeleteOnExit(FileInfo file) { // Implementation here }
private void AddGumball(float xPos, float yPos) { Gumball gumball = new Gumball(); gumball.mXInitPos = xPos; gumball.mYInitPos = yPos; gumball.mSoundPoolId = Guid.NewGuid(); mSoundPoolId.Put(gumball.mSoundPoolId, _BOOL); mGameView.AddGumball(gumball); mSoundPool.Play(mSoundBallDrop, _NUM, _NUM, _NUM, _NUM, _NUM); }
int Put(T segment, List<object> recycleBin) { int count; if (lastCount == _NUM) { count = _NUM; lastCount = _NUM; last = segment; } else if (EqualityComparer<T>.Default.Equals(last, segment)) { ++lastCount; count = _NUM; recycleBin.Add(segment); } else { count = lastCount; lastCount = _NUM; last = segment; } return count; }
[KnownFailure(_STR)] public void TestDelete6() { DatabaseCreator.FillFKStrictTable(conn); statement.Execute(_STR + DatabaseCreator.FKSTRICT_TABLE + _STR + DatabaseCreator.PARENT_TABLE + _STR); using (var r = statement.ExecuteReader(_STR + DatabaseCreator.FKSTRICT_TABLE + _STR)) { r.Read(); Assert.AreEqual(_NUM, r.GetInt32(_NUM)); } }
public Channel Chan(string topic, JsonNode payload) { Logger.Log(LogLevel.Debug, _STR, topic, payload); var channel = new Channel(topic, payload, this.Socket); lock (channels) { channels.Add(channel); } return channel; }
public PlaPointFloat ChangeSize(double newSize) { if (v_x == _NUM && v_y == _NUM) { return this; } double length = Math.Sqrt(v_x * v_x + v_y * v_y); double new_x = (v_x * newSize) / length; double new_y = (v_y * newSize) / length; return new PlaPointFloat(new_x, new_y); }
public int Insert(Row row, byte[] sourceBuffer, int sourceOffset, BlobOutputStream[] blobs) { int rowHead = _rowHead; int blobTail = _blobTail; int rowLength = row.Length(); rowHead -= rowLength; if (rowHead < blobTail) { return -_NUM; } byte[] buffer = _buffer; Array.Copy(sourceBuffer, sourceOffset, buffer, rowHead, rowLength); buffer[rowHead] = (byte)((buffer[rowHead] & ~CODE_MASK) | INSERT); blobTail = row.InsertBlobs(buffer, rowHead, blobTail, blobs); if (blobTail < _NUM) { return -_NUM; } SetBlobTail(blobTail); SetRowHead(rowHead); ValidateBlock(row); return rowHead; }
private void AddDefaultUri() { if (uriEncodedList == null) throw new InvalidOperationException("uriEncodedList cannot be null."); Uri uri; try { uri = U.ResolveWorkDirectory(DFLT_DEPLOY_DIR, _BOOL).ToUri(); } catch (IgniteCheckedException e) { throw new IgniteSpiException(_STR, e); } uriEncodedList.Add(uri); }
protected void Transfer(string seqRange) { try { int rangePos = seqRange.IndexOf(_STR); if (rangePos == -_NUM) { Transfer(long.Parse(seqRange)); } else { string start = seqRange.Substring(0, rangePos); string end = seqRange.Substring(rangePos + _NUM); long startIdx; if (start.Length == _NUM) { startIdx = _NUM; } else { startIdx = long.Parse(start); } long endIdx; if (end.Length == _NUM) { endIdx = mReader.NumberSequences() - _NUM; } else { endIdx = long.Parse(end); } if (startIdx > endIdx) { throw new FormatException(_STR + seqRange); } for (long i = startIdx; i <= endIdx; i++) { Transfer(i); } } } catch (FormatException e) { WarnInvalidSequence(seqRange); } }
public static double DistancePointLinePerpendicular(Coordinate p, Coordinate A, Coordinate B) { double len2 = (B.x - A.x) * (B.x - A.x) + (B.y - A.y) * (B.y - A.y); double s = ((A.y - p.y) * (B.x - A.x) - (A.x - p.x) * (B.y - A.y)) / len2; return Math.Abs(s) * Math.Sqrt(len2); }
public BigInteger Copy() { PrepareJavaRepresentation(); int[] copyDigits = new int[numberLength]; Array.Copy(digits, _NUM, copyDigits, _NUM, numberLength); return new BigInteger(sign, numberLength, copyDigits); }
public void RunTest() { Document doc; NodeList elementList; Node nameNode; CharacterData child; string childData; doc = (Document)Load(_STR, _BOOL); elementList = doc.GetElementsByTagName(_STR); nameNode = elementList.Item(_NUM); child = (CharacterData)nameNode.FirstChild; child.ReplaceData(_NUM, _NUM, _STR); childData = child.Data; Assert.AreEqual(_STR, _STR, childData); }
public string PatchFixIds() { return properties.GetProperty(_STR); }
public void ReadFully(byte[] b) { ReadFully(b, _NUM, b.Length); }
private void CreateGui() { var outerNamePanel = new JPanel(new BorderLayout()); outerNamePanel.Border = new TitledBorder(_STR); var namePanel = new JPanel(new BorderLayout()); namePanel.Border = new EmptyBorder(_NUM, _NUM, _NUM, _NUM); var nameLabel = new CHelpLabel(_STR + _STR, new CNameHelp()); nameLabel.PreferredSize = new Dimension(_NUM, _NUM); namePanel.Add(nameLabel, BorderLayout.WEST); namePanel.Add(m_nameTextField, BorderLayout.CENTER); outerNamePanel.Add(namePanel, BorderLayout.CENTER); var outerDescriptionPanel = new JPanel(new BorderLayout()); outerDescriptionPanel.Border = new EmptyBorder(_NUM, _NUM, _NUM, _NUM); var descriptionPanel = new JPanel(new BorderLayout()); descriptionPanel.Border = new TitledBorder(_STR); descriptionPanel.MinimumSize = new Dimension(_NUM, _NUM); descriptionPanel.Add(new JScrollPane(m_descriptionField)); outerDescriptionPanel.Add(descriptionPanel, BorderLayout.CENTER); var buttonPanel = new JPanel(new GridLayout(_NUM, _NUM)); buttonPa
public static bool IsJellybeanOrLater() { return (Android.OS.Build.VERSION.SdkInt >= (int)Android.OS.BuildVersionCodes.JellyBean); }
public PartialCorrelationPdf(int n, int k) { this.n = n; this.k = k; double gammaRatio = GammaRatio(n, k); this.constant = (_NUM / Math.Pow(Math.PI, _NUM)) * gammaRatio; this.outsideExp = (double)(n - k - _NUM) / _NUM; }
private static bool IsEnabled() { if (SystemUtils.IS_OS_WINDOWS) { return _BOOL; } try { var lines = CommandUtil.ExecuteCommandAndGetLines(new List<string> { _STR }); foreach (var line in lines) { if (line.Contains(_STR)) { if (line.Contains(_STR)) { Logger.Info(_STR); return _BOOL; } return _BOOL; } } } catch (Exception ex) { // Handle exception if necessary } return _BOOL; }
public bool Validate() { outputFile = new FileInfo(outputPath); if (outputFile.Exists || outputFile.Attributes.HasFlag(FileAttributes.Directory)) { invalidMessage = _STR; return valid = _BOOL; } if (!signMode) { keyFile = new FileInfo(keyFilePath); if (!keyFile.Exists || keyFile.Attributes.HasFlag(FileAttributes.Directory)) { invalidMessage = _STR; return valid = _BOOL; } } return valid = _BOOL; }
public void AddResponseCodeListener(ActionListener a) { responseCodeListeners.Add(a); }
public double CalculateLogLikelihood() { double logL = _NUM; foreach (var statistic in dataList) { for (int j = _NUM; j < statistic.GetDimension(); j++) { logL -= Math.Log(statistic.GetStatisticValue(j)); } } return logL; }
public static bool HasDeadStatesFromInitial(Automaton a) { BitSet reachableFromInitial = GetLiveStatesFromInitial(a); BitSet reachableFromAccept = GetLiveStatesToAccept(a); reachableFromInitial.AndNot(reachableFromAccept); return reachableFromInitial.IsEmpty() == _BOOL; }
public Decimal Subtract(Decimal decimalValue) { AssertDefined(); if (m_value == null) { return decimalValue; } BigDecimal value = m_value.Subtract(decimalValue.GetBigDecimalValue()); return new Decimal(value, SCALE); }
public override bool Equals(object obj) { if (obj == null) { return _BOOL; } if (!(obj is KnowledgeEdge pair)) { return _BOOL; } return from.Equals(pair.from) && to.Equals(pair.to); }
protected int SkipLine(int c) { while (c != -_NUM && c != _STR && c != _STR) { c = reader.Read(); } if (c == _STR) { c = reader.Read(); lineNo++; ReportLocation(lineNo, _NUM); } else if (c == _STR) { c = reader.Read(); if (c == _STR) { c = reader.Read(); } lineNo++; ReportLocation(lineNo, _NUM); } return c; }
public override void ListVolumes(CommandInput input, CompletionHandler completionHandler) { CreateOrUpdateTargetSsl(input); Uri uri = UriUtils.ExtendUri(input.GetDockerUri(), _STR); SendGet(uri, null, completionHandler); }
public static ByteBuffer Base64StringToByteBuffer(string base64EncodedKey) { return ByteBuffer.Wrap(Base64DecodeString(base64EncodedKey)); }
public bool Step() { long current = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); if (mStart == _NUM || (current - mStart < _NUM)) { mProgress = _NUM; } else if (current - mStart > mDuration) { if (mLoop) { mProgress = _NUM; Start(); return _BOOL; } mProgress = _NUM; return _BOOL; } else { mProgress = (current - mStart) / (double)mDuration; } return _BOOL; }
protected void LoadRawCharacters(StringBuilder sb) { int c = ReadChar(); while (true) { c = ReadChar(); switch (c) { case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_1: case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_2: case CharacterSequence.CHAR_SEQ_ESCAPED_NEWLINE_SEQUENCE_3: continue; case -_NUM: return; default: if (!IonTokenConstsX.Is7BitValue(c)) { c = ReadLargeCharSequence(c); } break; } if (IonUTF8.NeedsSurrogateEncoding(c)) { sb.Append(IonUTF8.HighSurrogate(c)); c = IonUTF8.LowSurrogate(c); } sb.Append((char)c); } }
public SignatureFakingOracle(string documentString) { Security.AddProvider(new BouncyCastleProvider()); signatureValueElements = new List<Node>(); keyInfoElements = new List<Node>(); certificates = new List<string>(); certHandlers = new List<CertificateHandler>(); try { doc = DomUtilities.StringToDom(documentString); CrawlSignatureElements(); log.Debug(_STR + signatureValueElements.Count + _STR); CrawlKeyInfoElements(); log.Debug(_STR + keyInfoElements.Count + _STR); } catch (SAXException e) { throw new SignatureFakingException(e); } }
public ArbitraryLengthPathNode(TermNode left, TermNode right, VarNode tVarLeft, VarNode tVarRight, long lowerBound, long upperBound) : this(new[] { new JoinGroupNode() }, NV.AsMap(new NV(Annotations.LEFT_TERM, left), new NV(Annotations.RIGHT_TERM, right), new NV(Annotations.TRANSITIVITY_VAR_LEFT, tVarLeft), new NV(Annotations.TRANSITIVITY_VAR_RIGHT, tVarRight), new NV(Annotations.DROP_VARS, new List<VarNode>()), new NV(Annotations.LOWER_BOUND, lowerBound), new NV(Annotations.UPPER_BOUND, upperBound))) { var dropVars = new HashSet<VarNode>(); dropVars.Add(tVarLeft); dropVars.Add(tVarRight); SetProperty(Annotations.DROP_VARS, dropVars); }
public void AddChangingListener(OnWheelChangedListener listener) { changingListeners.Add(listener); }
private int ScanYamlDirectiveNumber(Mark startMark) { char ch = reader.Peek(); if (!char.IsDigit(ch)) { throw new ScannerException(_STR, startMark, _STR + ch + _STR + (int)ch + _STR, reader.GetMark()); } int length = _NUM; while (char.IsDigit(reader.Peek(length))) { length++; } int value = int.Parse(reader.PrefixForward(length)); return value; }
public static string ToBitString(int[] i) { var sb = new StringBuilder(i.Length); foreach (int b in i) { sb.Append(b); } return sb.ToString(); }
public static ByteBuffer ConvertToSigned16BitSamples(Buffer buffer) { return ConvertToSigned16BitSamples(buffer.GetSamples()); }
bool CheckToken(ByteWrapper token, Key nodeId, IPAddress ip, int port, Key lookupKey) { UpdateTokenTimestamps(); bool valid = CheckToken(token, nodeId, ip, port, lookupKey, timestampCurrent.Get()) || CheckToken(token, nodeId, ip, port, lookupKey, timestampPrevious); if (!valid) { DHT.LogDebug(_STR + ip.ToString()); } return valid; }
private void WriteAttribute(string namespaceValue, string attName, string attValue, XmlWriter xmlWriter) { if (namespaceValue.Equals(_STR)) { xmlWriter.WriteAttributeString(attName, attValue); } else { RegisterPrefix(xmlWriter, namespaceValue); xmlWriter.WriteAttributeString(namespaceValue, attName, attValue); } }
public void ExpandAll() { CancelEditing(); TreeModel tm = GetModel(); object root = tm.GetRoot(); if (root != null) { ExpandAllPaths(new TreePath(root), tm); } }
protected void DescribeVocabularies(IVCount[] predicatePartitionCounts) { var namespaces = new HashSet<string>(); foreach (var tmp in predicatePartitionCounts) { var p = (URI)tmp.GetValue(); var namespaceStr = p.GetNamespace(); if (namespaceStr.EndsWith(_STR)) { namespaceStr = namespaceStr.Substring(_NUM, namespaceStr.Length - _NUM); } namespaces.Add(namespaceStr); } var a = namespaces.ToArray(); Array.Sort(a); foreach (var namespaceStr in a) { g.Add(aDataset, VoidVocabularyDecl.vocabulary, f.CreateURI(namespaceStr)); } }
public void TestInvokeAny4() { CountdownEvent latch = new CountdownEvent(_NUM); var e = new ForkJoinPool(_NUM); PoolCleaner cleaner = null; try { cleaner = Cleaner(e); var tasks = new List<Func<string>> { () => LatchAwaitingStringTask(latch)(), null }; try { e.InvokeAny(tasks); ShouldThrow(); } catch (NullReferenceException success) { } latch.Signal(); } finally { cleaner?.Close(); } }
private static void SolveL2RL1L2SVR(Problem prob, double[] w, Parameter param) { int l = prob.l; double C = param.C; double p = param.p; int w_size = prob.n; double eps = param.eps; int i, s, iter = _NUM; int max_iter = _NUM; int active_size = l; int[] index = new int[l]; double d, G, H; double Gmax_old = double.PositiveInfinity; double Gmax_new, Gnorm1_new; double Gnorm1_init = _NUM; double[] beta = new double[l]; double[] QD = new double[l]; double[] y = prob.y; double[] lambda = new double[] { _NUM / C }; double[] upper_bound = new double[] { double.PositiveInfinity }; if (param.solverType == SolverType.L2R_L1LOSS_SVR_DUAL) { lambda[_NUM] = _NUM; upper_bound[_NUM] = C; } for (i = _NUM; i < l; i++) { b
public SignalGroupSubTableAction(string s) { }
public static List<string> GenerateXVals(int from, int to) { List<string> xvals = new List<string>(); for (int i = from; i < to; i++) { xvals.Add(_STR + i); } return xvals; }
public void TestCompareToDiffSigns1() { byte[] aBytes = { _NUM, _NUM, _NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM }; byte[] bBytes = { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; int aSign = _NUM; int bSign = -_NUM; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger bNumber = new BigInteger(bSign, bBytes); Assert.AreEqual(_NUM, aNumber.CompareTo(bNumber)); }
private Dictionary<object, List<SvcReg>> AddAttr(SvcReg reg, EntryClass eclass, int fldidx, object value) { Dictionary<object, List<SvcReg>>[] attrMaps; if (!serviceByAttr.TryGetValue(eclass, out attrMaps)) { attrMaps = new Dictionary<object, List<SvcReg>>[eclass.GetNumFields()]; serviceByAttr[eclass] = attrMaps; } Dictionary<object, List<SvcReg>> map = attrMaps[fldidx]; if (map == null) { map = new Dictionary<object, List<SvcReg>>(); attrMaps[fldidx] = map; } List<SvcReg> regs; if (!map.TryGetValue(value, out regs)) { regs = new List<SvcReg>(); map[value] = regs; } else if (regs.Contains(reg)) { return map; } regs.Add(reg); return map; }
public QueryStringDecoderUtil(Uri uri) : this(uri, Encoding.Default) { }
public static float[] CmykFromRgb(int rgbColor) { int red = (rgbColor >> 16) & 0xFF; int green = (rgbColor >> 8) & 0xFF; int blue = rgbColor & 0xFF; float black = Math.Min(1.0f - red / 255f, Math.Min(1.0f - green / 255f, 1.0f - blue / 255f)); float cyan = 1.0f; float magenta = 1.0f; float yellow = 1.0f; if (black != 1.0f) { cyan = (1.0f - red / 255f - black) / (1.0f - black); magenta = (1.0f - green / 255f - black) / (1.0f - black); yellow = (1.0f - blue / 255f - black) / (1.0f - black); } return new float[] { cyan, magenta, yellow, black }; }
public void RemoveSwipeListener(SwipeListener listener) { if (mListeners == null) { return; } mListeners.Remove(listener); }
public static void ShowErrorMessage(string msg) { ShowErrorMessage(msg, _NUM); }
public static NameValuePair ParseNameValuePair(string value, HeaderValueParser parser) { if (value == null) { throw new ArgumentException("_STR"); } if (parser == null) { parser = BasicHeaderValueParser.DEFAULT; } CharArrayBuffer buffer = new CharArrayBuffer(value.Length); buffer.Append(value); ParserCursor cursor = new ParserCursor(_NUM, value.Length); return parser.ParseNameValuePair(buffer, cursor); }
public static string StripCharsInBag(string s, string bag) { StringBuilder stringBuilder = new StringBuilder(); for (int i = 0; i < s.Length; i++) { char c = s[i]; if (bag.IndexOf(c) == -1) { stringBuilder.Append(c); } } return stringBuilder.ToString(); }
public static double Cos(double radians) { return Math.Cos(radians); }
public static string FormatNumber(float number, int digitCount, bool separateThousands) { char[] out = new char[100]; // Adjust size as necessary bool neg = false; if (number == 0) return string.Empty; bool zero = false; if (number < 0) { neg = true; number = -number; } if (digitCount > 20) // Adjust based on the maximum limit digitCount = 20; // Adjust based on the maximum limit number *= (float)Math.Pow(10, digitCount); long lval = (long)Math.Round(number); int ind = out.Length - 1; int charCount = 0; bool decimalPointAdded = false; while (lval != 0 || charCount < (digitCount + 1)) { int digit = (int)(lval % 10); lval /= 10; out[ind--] = (char)(digit + '0'); charCount++; if (charCount == digitCount) { out[ind--] = '.'; charCount++; decimalPointAdde
protected override void OnDestroy() { base.OnDestroy(); DoReallyStop(_BOOL); mFragments.DispatchDestroy(); if (mLoaderManager != null) { mLoaderManager.DoDestroy(); } }
public void RemoveVetoableChangeListener(string propertyName, VetoableChangeListener inVcl) { beanContextChildSupport.RemoveVetoableChangeListener(propertyName, inVcl); }
public static bool DoesFileExist(Context c, string fileName, long fileSize, bool deleteFileOnMismatch) { var fileForNewFile = new File(Helpers.GenerateSaveFileName(c, fileName)); if (fileForNewFile.Exists()) { if (fileForNewFile.Length == fileSize) { return true; } if (deleteFileOnMismatch) { fileForNewFile.Delete(); } } return false; }
static WindowsFileAttributes FromFindData(long address) { int fileAttrs = Unsafe.ReadInt32(new IntPtr(address + OFFSETOF_FIND_DATA_ATTRIBUTES)); long creationTime = Unsafe.ReadInt64(new IntPtr(address + OFFSETOF_FIND_DATA_CREATETIME)); long lastAccessTime = Unsafe.ReadInt64(new IntPtr(address + OFFSETOF_FIND_DATA_LASTACCESSTIME)); long lastWriteTime = Unsafe.ReadInt64(new IntPtr(address + OFFSETOF_FIND_DATA_LASTWRITETIME)); long size = ((long)(Unsafe.ReadInt32(new IntPtr(address + OFFSETOF_FIND_DATA_SIZEHIGH)) << _NUM)) + (Unsafe.ReadInt32(new IntPtr(address + OFFSETOF_FIND_DATA_SIZELOW)) & _NUM); int reparseTag = IsReparsePoint(fileAttrs) ? Unsafe.ReadInt32(new IntPtr(address + OFFSETOF_FIND_DATA_RESERVED0)) : _NUM; return new WindowsFileAttributes(fileAttrs, creationTime, lastAccessTime, lastWriteTime, size, reparseTag, _NUM, _NUM, _NUM); }
public static void WriteMapXml(IDictionary<string, object> val, XmlSerializer out, WriteMapCallback callback) { if (val == null) { return; } foreach (var entry in val) { WriteValueXml(entry.Value, entry.Key, out, callback); } }
public void FireEventProgrammatically(Event event) { if (!event.IsConsumed()) { ripplerPane.FireEvent(event); } }
private bool HasFullEntry(JsonValue entry, QuerySide querySide) { if (querySide == QuerySide.SOURCE && sourceQueryFullEntry != null) { return sourceQueryFullEntry; } else if (querySide == QuerySide.TARGET && targetQueryFullEntry != null) { return targetQueryFullEntry; } if (entry != null) { short ignoreFields = _NUM; if (entry.IsDefined(_STR)) { ignoreFields++; } if (entry.IsDefined(_STR)) { ignoreFields++; } ignoreFields += _NUM; return entry.Size() > ignoreFields; } else { return _BOOL; } }
public static bool IsModule(IResource resource) { return resource != null && TLA_EXTENSION.Equals(resource.GetFileExtension()); }
public int WriteAnnotation(Annotation annotation) { int off = data.Position; WriteByte(annotation.Visibility); WriteEncodedArray(annotation.EncodedAnnotation); return off; }
public static long FromInet4Address(IPAddress inetAddress) { EnsureIsInet4Address(inetAddress); return (uint)inetAddress.GetHashCode(); }
public bool RevisionContainsTemplateName(int revId, string templateName) { return RevisionContainsTemplateNames(revId, new List<string> { templateName }); }
public List<GenericEntry> RetrieveAllAccountInfoRequests(DateTime? fromDate) { string url = BASE_URL + _STR + domain; if (fromDate.HasValue) { url += _STR + DATE_FORMAT.Format(fromDate.Value); } return GetAllPages(new Uri(url), typeof(GenericFeed)); }
protected void DrawCylinder(int x, int y, int w, int h, Color fillColor, Paint fillPaint, Color penColor, bool isShadow) { int h4 = h / _NUM; int r = w - _NUM; if (fillColor != null || fillPaint != null) { using (var area = new GraphicsPath()) { area.AddRectangle(new Rectangle(x, y + h4 / _NUM, r, h - h4)); area.AddRectangle(new Rectangle(x, y + h4 / _NUM, r, h - h4)); area.AddEllipse(x, y, r, h4); area.AddEllipse(x, y + h - h4, r, h4); if (isShadow) { g.Color = mxConstants.SHADOW_COLOR; g.TranslateTransform(mxConstants.SHADOW_OFFSETX, mxConstants.SHADOW_OFFSETY); g.FillPath(new SolidBrush(g.Color), area); g.ResetTransform(); } if (fillPaint != null) { g.FillPath(fillPaint, area); } else { g.FillPath(new SolidBrush(fillColor), area); }
public StringList Plus(params string[] args) { StringList newList = new StringList(); newList.AddRange(this); newList.AddRange(args); return newList; }
private void WalkParseTree(List<SwiftBaseListener> listeners, TopLevelContext tree) { ParseTreeWalker walker = new ParseTreeWalker(); listeners.ForEach(listener => { /* Implement button handling logic here */ }); }
public override char ReadChar() { dis.ReadFully(work, _NUM, _NUM); return (char)((work[_NUM] & _NUM) << _NUM | (work[_NUM] & _NUM)); }
public static int TruncatedCompareTo(DateTime date1, DateTime date2, int field) { DateTime truncatedDate1 = Truncate(date1, field); DateTime truncatedDate2 = Truncate(date2, field); return DateTime.Compare(truncatedDate1, truncatedDate2); }
protected List<DecompoundedWord> MakeSplit(string aWord) { List<DecompoundedWord> result = new List<DecompoundedWord>(); for (int i = _NUM; i < aWord.Length; i++) { string leftWord = aWord.Substring(_NUM, i + _NUM); string rightWord = aWord.Substring(i + _NUM); bool leftGood = dict.Contains(leftWord) && leftWord.Length >= minWordLength; bool rightGood = rightWord.Length > minRestLength || rightWord.Length == _NUM; if (leftGood && rightGood) { DecompoundedWord split = DecompoundedWord.CreateFromString(leftWord + _STR + rightWord); split.SetSplitPos(i); result.Add(split); } foreach (string morpheme in morphemes.GetAll()) { try { string leftWithoutMorpheme = leftWord.Substring(_NUM, leftWord.Length - morpheme.Length); if (leftWord.EndsWith(morpheme) && dict.Contains(leftWithoutMorpheme) && rightGood) { DecompoundedWord split = DecompoundedWord.CreateF
public static bool IsBookSearchUrl(string url) { return url.StartsWith(_STR) || url.StartsWith(_STR); }
public static string ClassNamePath(string className) { string filename = className.Replace("_STR", System.IO.Path.DirectorySeparatorChar.ToString()); filename = filename.ReplaceFirst("_STR", "_STR"); if (filename.IndexOf("_STR") > 0) { filename = filename.Substring(0, filename.IndexOf("_STR")); } return "_STR" + System.IO.Path.DirectorySeparatorChar + filename + "_STR"; }
public void RemoveTitlePrefix(string prfx) { titlePrefix.Remove(prfx); FirePropertyChange(TITLE_PREFIX, null, titlePrefix); }
public void Send(HashSet<DistributedMember> recipients, bool multicast) { bool isDebugEnabled = logger.IsDebugEnabled(); if (Thread.CurrentThread.IsInterrupted) { throw new ThreadInterruptedException(); } recipients = new HashSet<DistributedMember>(recipients); DistributedMember me = originDm.GetDistributionManagerId(); if (recipients.Contains(me)) { recipients.Remove(me); } if (isDebugEnabled) { logger.Debug(_STR, recipients); } var rp = new ReplyProcessor21(originDm, recipients); var processorId = rp.GetProcessorId(); SetRecipients(recipients); SetMulticast(multicast); var failures = originDm.PutOutgoing(this); if (failures != null && failures.Count > _NUM) { foreach (var mbr in failures) { if (isDebugEnabled) { logger.Debug(_STR, mbr); } } } rp.WaitForReplies(); }
private bool IsRelevant(object service, Entry[] attributes) { foreach (var e in _serviceAttributes) { foreach (var en in attributes) { if (e.Equals(en)) continue; } return _BOOL; } bool flag = _BOOL; foreach (var en in attributes) { if (_serviceName.Equals(en)) { flag = _BOOL; break; } } if (!flag) return _BOOL; flag = _BOOL; foreach (var cl in _classes) { if (cl.IsInstanceOfType(service)) { flag = _BOOL; break; } } return flag; }
private static bool Eq(object o1, object o2) { return o1 == null ? o2 == null : o1.Equals(o2); }
public int FindCarByRoadNumber(string roadNumber) { if (sysList != null) { if (!roadNumber.Equals(_roadNumber)) { return GetIndex(_NUM, roadNumber); } int index = GetIndex(_index, roadNumber); if (index > _NUM) { return index; } return GetIndex(_NUM, roadNumber); } return -_NUM; }
[SlashedClassName] [SuppressFBWarnings(_STR)] public static string ToSlashedClassName([SlashedClassName(When.UNKNOWN)] string className) { if (className.IndexOf(_STR) >= _NUM) { return DescriptorFactory.CanonicalizeString(className.Replace(_STR, _STR)); } return className; }
public static double P_AveragePrecision(int[] y, int[] r) { double avgPrec = _NUM; int L = y.Length; List<int> ones = new List<int>(); for (int j = _NUM; j < L; j++) { if (y[j] == _NUM) { ones.Add(j); } } if (ones.Count <= _NUM) return _NUM; foreach (int j in ones) { double s = _NUM; foreach (int k in ones) { if (r[k] <= r[j]) { s++; } } avgPrec += (s / (_NUM + r[j])); } avgPrec /= ones.Count; return avgPrec; }
public Location NewLocation(string name) { Location location = GetLocationByName(name); if (location == null) { _id++; location = new Location(_id.ToString(), name); int oldSize = _locationHashTable.Count; _locationHashTable[location.Id] = location; SetDirtyAndFirePropertyChange(LISTLENGTH_CHANGED_PROPERTY, oldSize, _locationHashTable.Count); } return location; }
public override void Close() { closing = _BOOL; if (reservations == null || reservations.CompareAndSet(_NUM, -_NUM)) { DoClose(); } }
private void RemoveOMADownloadFromSharedPrefs(long downloadId) { HashSet<string> omaDownloads = GetStoredDownloadInfo(PENDING_OMA_DOWNLOADS); foreach (string omaDownload in omaDownloads.ToList()) { OMAEntry entry = OMAEntry.ParseOMAEntry(omaDownload); if (entry.mDownloadId == downloadId) { omaDownloads.Remove(omaDownload); StoreDownloadInfo(PENDING_OMA_DOWNLOADS, omaDownloads); return; } } }
public static bool IsAndroidSdkDirInLocalPropertiesFile(string projectDir) { string androidHome = GetAndroidHomeFromLocalPropertiesFile(projectDir); if (!string.IsNullOrEmpty(androidHome)) { string msg = string.Format(_STR, androidHome); LOG.Info(msg); return _BOOL; } return _BOOL; }
public static bool HasTokenInformation(Bundle bundle) { if (bundle == null) { return _BOOL; } string token = bundle.GetString(TOKEN_KEY); if (string.IsNullOrEmpty(token) || token.Length == _NUM) { return _BOOL; } long expiresMilliseconds = bundle.GetLong(EXPIRATION_DATE_KEY, _NUM); if (expiresMilliseconds == _NUM) { return _BOOL; } return _BOOL; }
public void ResetPolicy() { mPreferences.PutString(PREF_LAST_RESPONSE, Policy.RETRY.ToString()); SetRetryUntil(DEFAULT_RETRY_UNTIL); SetMaxRetries(DEFAULT_MAX_RETRIES); SetRetryCount(long.Parse(DEFAULT_RETRY_COUNT)); SetValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP); mPreferences.Commit(); }
public override bool ConnectionAllowed(string eventName) { if (eventName.Equals(_STR) && m_listenees.ContainsKey(eventName)) { return _BOOL; } return _BOOL; }
public static Vector2 Pow(Vector2 o, double power) { return new Vector2(Math.Pow(o.x, power), Math.Pow(o.z, power)); }
public static object InvokeStatic(string clazz, string methodName, Type[] types, object[] values) { try { return InvokeStatic(Type.GetType(clazz), methodName, types, values); } catch (TypeLoadException) { throw new MissingMethodException($"Class not found: {clazz}"); } }
public Prototype Undump(Stream stream, string chunkname) { if (stream.ReadByte() != LUA_SIGNATURE[_NUM] || stream.ReadByte() != LUA_SIGNATURE[_NUM] || stream.ReadByte() != LUA_SIGNATURE[_NUM] || stream.ReadByte() != LUA_SIGNATURE[_NUM]) { return null; } string sname = GetSourceName(chunkname); LoadState s = new LoadState(stream, sname); s.LoadHeader(); switch (s.LuacNumberFormat) { case NUMBER_FORMAT_FLOATS_OR_DOUBLES: case NUMBER_FORMAT_INTS_ONLY: case NUMBER_FORMAT_NUM_PATCH_INT32: break; default: throw new LuaError(_STR); } return s.LoadFunction(LuaString.ValueOf(sname)); }
public void AddButton(Uri url, string info, EventHandler<ActionEventArgs> handler) { var button = new Button { Image = new Bitmap(url.ToString()), ToolTipText = info, Margin = new Padding(_NUM, _NUM, _NUM, _NUM), FlatStyle = FlatStyle.Flat }; button.Click += handler; button.FlatAppearance.BorderSize = _BOOL ? 1 : 0; Controls.Add(button); }
private void MapRequestToResponses(Matcher<Request> requestMatcher, ResponseSource responses) { mappings.Add(new MatcherResponseSourcePair(requestMatcher, responses)); }
protected override void CommitToInput() { JmxBeanSensorAssignment assignment = GetInput(); if (assignment != null) { assignment.SetDomain(domainText.Text); assignment.SetObjectNameParameters(new Dictionary<string, string>(parametersMap)); if (allAttributesButton.Selection) { assignment.SetAttributes(new HashSet<string>()); } else { assignment.SetAttributes(new HashSet<string>(attributesSet)); } } }
public static string[] Split(string original, string separator) { List<string> nodes = new List<string>(); int index = original.IndexOf(separator); while (index >= 0) { nodes.Add(original.Substring(0, index)); original = original.Substring(index + separator.Length); index = original.IndexOf(separator); } nodes.Add(original); return nodes.ToArray(); }
public void InsertTwin(Instruction inst, Instruction twin) { var iter = list.GetEnumerator(); while (iter.MoveNext()) { GCIRMapElement newPtr = iter.Current; if (newPtr.GetInstruction() == inst) { iter.Current = newPtr.CreateTwin(twin); return; } } throw new OptimizingCompilerException(_STR + inst + _STR); }
public object NewInstance() { object o = NewInstanceImpl(); if (o == null) { throw new InstantiationException(); } return o; }
public FormatSpecifierParser(string format) { this.format = format; this.length = format.Length; }
public static void ToString(IEnumerator<object> enumerator, string separator, StringBuilder sb) { while (enumerator.MoveNext()) { sb.Append(enumerator.Current); if (enumerator.MoveNext()) { sb.Append(separator); } } }
public bool IsFull() { if (maxSize > _NUM && notifications.Count >= maxSize) { return _BOOL; } return _BOOL; }
private void SchedulePlaylistSave() { if (!mPlaylistLoading) { if (mPlaylistSavePending.CompareAndSet(_BOOL, _BOOL)) { mThreadPoolManager.ScheduleOnce(new PlaylistSaveTask(), _NUM, TimeUnit.Seconds); } } }
public bool IsToRead() { foreach (var v in variables) { if (v.IsToRead()) { return true; } } return false; }
public void ActionPerformed(ActionEvent e) { NavigateToPriorDemo(); }
public string ToString() { StringBuilder text = new StringBuilder(); for (int i = _NUM; i < m_Elements.Length; i++) { if (i > _NUM) text.Append(_STR); text.Append(Utils.DoubleToString(m_Elements[i], _NUM)); } text.Append(_STR); return text.ToString(); }
[Obsolete] public static int ConvertToInteger(int i) { return i; }
public void Or(Criteria criteria) { oredCriteria.Add(criteria); }
public static void V(string tag, string msg, params object[] args) { if (sLevel > LEVEL_VERBOSE) { return; } if (args.Length > _NUM) { msg = string.Format(msg, args); } Log.V(tag, msg); }
public void SaveIndexes() { List<Index> toSave = new List<Index>(); lock (this) { object[] valueTable = this.indexes.valueTable; for (int i = _NUM, l = valueTable.Length; i < l; i++) { Index index = (Index)valueTable[i]; if (index != null) toSave.Add(index); } } bool allSaved = _BOOL; for (int i = _NUM, length = toSave.Count; i < length; i++) { Index index = toSave[i]; ReadWriteMonitor monitor = index.monitor; if (monitor == null) continue; try { monitor.EnterRead(); if (index.HasChanged()) { if (monitor.ExitReadEnterWrite()) { try { SaveIndex(index); } catch (IOException e) { if (VERBOSE) { Util.Verbose(_STR, Console.Error); e.PrintStackTrace(); } allSaved = _BOOL; } finally { monitor.ExitWriteEnterRead(); } } else
private double Match_BitapScore(int e, int x, int loc, string pattern) { float accuracy = (float)e / pattern.Length; int proximity = Math.Abs(loc - x); if (Match_Distance == _NUM) { return proximity == _NUM ? accuracy : _NUM; } return accuracy + (proximity / (float)Match_Distance); }
private void MovePos(float deltaY) { if (deltaY < _NUM && mPtrIndicator.IsInStartPosition()) { if (DEBUG) { PtrCLog.E(LOG_TAG, string.Format(_STR)); } return; } int to = mPtrIndicator.GetCurrentPosY() + (int)deltaY; if (mPtrIndicator.WillOverTop(to)) { if (DEBUG) { PtrCLog.E(LOG_TAG, string.Format(_STR)); } to = PtrIndicator.POS_START; } mPtrIndicator.SetCurrentPos(to); int change = to - mPtrIndicator.GetLastPosY(); UpdatePos(change); }
public void PutAll(IDictionary<K, V> m) { TryPresize(m.Count); foreach (var entry in m) { PutVal(entry.Key, entry.Value, _BOOL); } }
public UndoableEdit InsertString(int where, string str) { if (where >= count || where < _NUM) { throw new BadLocationException(_STR, count); } char[] chars = str.ToCharArray(); Replace(where, _NUM, chars, _NUM, chars.Length); if (marks != null) { UpdateMarksForInsert(where, str.Length); } return new InsertUndo(where, str.Length); }
public string ToString() { return GetValue().ToString(); }
private bool WriteData() { int tosend; int sent; byte[] block = new byte[kBlockSize]; do { tosend = Math.Min(sendStreamSize - totalSent, block.Length); Array.Copy(sendData, totalSent, block, _NUM, tosend); if (tosend > _NUM) { sent = LocalSend(block, tosend); UpdateLocalClock(); if (sent != -_NUM) { totalSent += sent; } else { logger.Log(Level.FINE, _STR); } } else { sent = tosend = _NUM; } } while (sent > _NUM); if (logger.IsLoggable(Level.FINER)) { logger.Log(Level.FINER, _STR + totalSent + _STR + (sendStreamSize - totalSent)); } return tosend == _NUM; }
public static int CopyAndCloseOutput(TextReader input, TextWriter output) { try { return Copy(input, output); } finally { output.Close(); } }
public int CheckBookiesUp(int count, int timeout) { using (var zkc = ConnectZooKeeper(zkHost, zkPort, zkTimeoutSec)) { int mostRecentSize = _NUM; for (int i = _NUM; i < timeout; i++) { try { var children = zkc.GetChildren(_STR, _BOOL); children.Remove(_STR); mostRecentSize = children.Count; if (mostRecentSize > count || LOG.IsDebugEnabled) { LOG.Info(_STR + mostRecentSize + _STR + _STR + count); if (mostRecentSize > count || LOG.IsTraceEnabled) { foreach (var child in children) { LOG.Info(_STR + child); } } } if (mostRecentSize == count) { break; } } catch (KeeperException e) { // Handle exception as necessary } System.Threading.Thread.Sleep(_NUM); } return mostRecentSize; } }
public Point2D InverseTransform(Point2D src, Point2D dst) { try { src.SetLocation(src.X + rotXOffset, src.Y + rotYOffset); dst = rotTransform.InverseTransform(src, dst); } catch (NoninvertibleTransformException e) { logger.Log(Level.Fine, e.Message, e); } return dst; }
public static Exception ShouldFail<T>(Action code) { Exception ex = null; try { code(); } catch (Exception e) { ex = e; } if (ex == null) { throw new InvalidOperationException($"Expected exception not thrown for code: {code} with type: {typeof(T).Name}"); } else if (!(ex is T)) { throw new InvalidOperationException($"Expected exception of type: {typeof(T).Name} but got: {ex.GetType().Name} for code: {code}"); } return ex; }
public int Write(byte[] destMac, byte[] packet, int offset, int byteCount) { if (destMac == null) { throw new ArgumentNullException(nameof(destMac), _STR); } if (packet == null) { throw new ArgumentNullException(nameof(packet), _STR); } CheckOffsetAndCount(packet.Length, offset, byteCount); if (destMac.Length != _NUM) { throw new ArgumentException(_STR + destMac.Length.ToString(), nameof(destMac)); } return SendPacket(fd, mInterfaceName, mProtocolType, destMac, packet, offset, byteCount); } private void CheckOffsetAndCount(int length, int offset, int count) { if (offset < 0 || count < 0 || offset + count > length) { throw new ArgumentOutOfRangeException("Offset and count are out of range."); } }
private bool? ProcessYESNO(StylesheetHandler handler, string uri, string name, string rawName, string value) { if (!(value.Equals(_STR) || value.Equals(_STR))) { HandleError(handler, XSLTErrorResources.INVALID_BOOLEAN, new object[] { name, value }, null); return null; } return value.Equals(_STR) ? _BOOL : _BOOL; }
protected List<KeyNamePair> LoadRMAData(int C_BPartner_ID) { List<KeyNamePair> list = new List<KeyNamePair>(); string sqlStmt = _STR + _STR + _STR + _STR + _STR; using (var pstmt = DB.PrepareStatement(sqlStmt)) { pstmt.Parameters.AddWithValue(_NUM, C_BPartner_ID); using (var rs = pstmt.ExecuteReader()) { while (rs.Read()) { list.Add(new KeyNamePair(rs.GetInt(_NUM), rs.GetString(_NUM))); } } } return list; }
public override List<WorkOrder> SearchWOForBilling(Dictionary<string, object> criteriaMap) { logger.Debug(_STR); List<WorkOrder> filteredList = new List<WorkOrder>(); criteriaMap[ACTION_FLAG] = _STR; foreach (var workorder in SearchWO(criteriaMap)) { if (!IsWOValidforBill(workorder.GetId())) { filteredList.Add(workorder); } } return filteredList; }
public Week(DateTime time, TimeZoneInfo zone, CultureInfo locale) { if (time == null) throw new ArgumentNullException(nameof(time)); if (zone == null) throw new ArgumentNullException(nameof(zone)); if (locale == null) throw new ArgumentNullException(nameof(locale)); var calendar = TimeZoneInfo.ConvertTimeToUtc(time, zone); var tempWeek = CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(calendar); if (tempWeek == _NUM && calendar.Month == 12) { this.week = _NUM; this.year = (short)(calendar.Year + _NUM); } else { this.week = (byte)Math.Min(tempWeek, LAST_WEEK_IN_YEAR); int yyyy = calendar.Year; if (calendar.Month == 1 && this.week >= _NUM) { yyyy--; } this.year = (short)yyyy; } peg(calendar); }
public ResourceQueue(NonBlockingLockManagerWithNewDesign<R> lockService, R resource) { if (lockService == null) throw new ArgumentNullException(nameof(lockService)); if (resource == null) throw new ArgumentNullException(nameof(resource)); this.lockService = lockService; this.resource = resource; this.queue = new ConcurrentQueue<T>(); this.statisticsTask = new QueueSizeMovingAverageTask(resource.ToString(), queue); }
public void EncodeAndSign(X500Name subject, Signature signature) { DerOutputStream outStream, scratch; byte[] certificateRequestInfo; byte[] sig; if (encoded != null) { throw new SignatureException(_STR); } this.subject = subject; scratch = new DerOutputStream(); scratch.PutInteger(BigInteger.Zero); subject.Encode(scratch); scratch.Write(subjectPublicKeyInfo.GetEncoded()); attributeSet.Encode(scratch); outStream = new DerOutputStream(); outStream.Write(DerValue.Tag_Sequence, scratch); certificateRequestInfo = outStream.ToByteArray(); scratch = outStream; signature.Update(certificateRequestInfo, _NUM, certificateRequestInfo.Length); sig = signature.Sign(); AlgorithmId algId = null; try { algId = AlgorithmId.Get(signature.GetAlgorithm()); } catch (NoSuchAlgorithmException nsae) { throw new SignatureException(nsae); } algId.Encode(scratch); scratch.PutBitString(sig); outStream = new DerOutputStream(); outStream.Write(DerValue.Tag_Sequence, scratch); encoded = outStream
public synchronized void SchedulePeriodicTask(TimerTask task, long period) { try { m_timer.ScheduleAtFixedRate(task, _NUM, period); } catch (IllegalStateException) { m_timer = new Timer(); m_timer.ScheduleAtFixedRate(task, _NUM, period); } }
public static string Abbreviate(string str, FontMetrics fm, int width) { int lastBlank = -1, nChars = 0, cumx = 0; while (cumx < width && nChars < str.Length) { if (char.IsWhiteSpace(str[nChars])) { lastBlank = nChars; } cumx += fm.CharWidth(str[nChars]); nChars++; } if (nChars < str.Length && lastBlank > -1) { nChars = lastBlank; } return (nChars > 0 ? str.Substring(0, nChars) : str); }
protected void StopWraparoundTest() { if (testRunning && wrapTest) { wrapTimer.Stop(); statusText1.Text = _STR + numErrors.ToString() + _STR; statusText1.Visible = _BOOL; statusText2.Text = numIterations.ToString() + _STR; statusText2.Visible = _BOOL; } }
protected void CheckRowIndex(int row) { if (row < _NUM || row >= GetRowDimension()) { throw new MathIllegalArgumentException(LocalizedCoreFormats.ROW_INDEX, row, _NUM, GetRowDimension() - _NUM); } }
private void NukeSymbols() { _count = _NUM; _longestCollisionList = _NUM; Array.Fill(_mainHash, _NUM); Array.Fill(_mainNames, null); Array.Fill(_collList, null); _collCount = _NUM; _collEnd = _NUM; }
private static float DetermineEnemyBlitzStrength(Territory blitzHere, List<Route> blitzTerrRoutes, List<Territory> blockTerr, GameData data, PlayerID ePlayer) { HashSet<int> ignore = new HashSet<int>(); ignore.Add(_NUM); CompositeMatch<Unit> blitzUnit = new CompositeMatchAnd<Unit>( Matches.UnitIsOwnedBy(ePlayer), Matches.UnitCanBlitz, Matches.UnitCanMove ); CompositeMatch<Territory> validBlitzRoute = new CompositeMatchAnd<Territory>( Matches.TerritoryHasNoEnemyUnits(ePlayer, data), Matches.TerritoryIsNotImpassableToLandUnits(ePlayer, data) ); List<Route> routes = new List<Route>(); List<Unit> blitzUnits = FindAttackers(blitzHere, _NUM, ignore, ePlayer, data, blitzUnit, validBlitzRoute, blockTerr, routes, _BOOL); foreach (Route r in routes) { if (r.NumberOfSteps() == _NUM) { blitzTerrRoutes.Add(r); } } return Strength(blitzUnits, _BOOL, _BOOL, _B
public Name Join(string identifier) { ValidateLowerUnderscore(identifier); List<NamePiece> newPieceList = new List<NamePiece>(namePieces); newPieceList.Add(new NamePiece(identifier, CaseFormat.LOWER_UNDERSCORE)); return new Name(newPieceList); }
private LocalDateTime ParseDate(string dateStr, bool tryAgain) { LocalDateTime date = LocalDateTime.Now; if (mDateTimeFormatter == null) { InitFormatter(dateStr); } if (mDateTimeFormatter != null) { try { date = LocalDateTime.Parse(dateStr, mDateTimeFormatter); } catch (DateTimeParseException e) { Console.WriteLine(string.Format(_STR, dateStr)); if (tryAgain) { Console.WriteLine(_STR); mDateTimeFormatter = null; return ParseDate(dateStr, _BOOL); } } } return date; }
public string ToString() { string str = caller; if (level > _NUM || thread != -_NUM) { str += _STR; } if (level > _NUM) { str += level; } if (thread != -_NUM) { str += _STR + thread; } if (level > _NUM || thread != -_NUM) { str += _STR; } str += _STR; if (spawnMessage) { str += _STR; } if (answer.Length > _NUM) { str += answer + _STR; } if (callee.Length > _NUM) { str += callee + _STR; } str += message; if (returnsInstantly) { str += _STR; } return str; }
public static bool IsWhiteSpace(int c) { switch (c) { case NUL_CHAR: case _STR: case FF_CHAR: return true; default: return false; } }
public void Remove(RequestFilter filter) { filters.Remove(filter); }
protected void RemoveClassifiers(int[] indices) { if (indices == null) { m_ModelClassifiers.Clear(); } else { for (int i = indices.Length - _NUM; i >= _NUM; i--) { m_ModelClassifiers.RemoveAt(indices[i]); } } SetModified(_BOOL); }
public override void AddPropertyChangeListener(PropertyChangedEventHandler pcl) { m_pcSupport.AddPropertyChangeListener(pcl); }
public int NumCheckpoints() { return checkpoints.Count; }
public void AddElement(object anObject) { p_data.Add(anObject); FireIntervalAdded(this, p_data.Count - _NUM, p_data.Count - _NUM); if (p_data.Count == _NUM && m_selectedObject == null && anObject != null) { SetSelectedItem(anObject); } }
public Builder AddListenUrls(List<string> urls) { List<string> needAdd = new List<string>(); foreach (string url in urls) { if (!UrlUtil.IsUrl(url)) { continue; } needAdd.Add(url); } if (needAdd.Count > 0) { if (mListenUrls == null) { mListenUrls = new HashSet<string>(); } foreach (string url in needAdd) { mListenUrls.Add(url); } } return this; }
public void AddAssignedVirtualArrays(HashSet<string> virtualArrayURIs) { if (virtualArrayURIs != null && virtualArrayURIs.Count > 0) { HashSet<string> addVirtualArrays = new HashSet<string>(virtualArrayURIs); if (_assignedVirtualArrays == null) { SetAssignedVirtualArrays(new HashSet<string>()); _assignedVirtualArrays.UnionWith(addVirtualArrays); } else { _assignedVirtualArrays.UnionWith(addVirtualArrays); } UpdateVirtualArrayTags(); } }
public override bool IsCellEditable(int row, int column) { EnvVar envVar = dataList[row]; if (column == COL_VALUE) { return _BOOL; } return !envVar.IsPredefined(); }
private static char[] ZzUnpackCMap(string packed) { char[] map = new char[_NUM]; int i = _NUM; int j = _NUM; while (i < _NUM) { int count = packed[i++]; char value = packed[i++]; do { map[j++] = value; } while (--count > 0); } return map; }
private bool DropInTrash() { if (mHighlightedBlockView != null) { mHighlightedBlockView.SetHighlightedConnection(null); mHighlightedBlockView = null; } mDraggedConnections.Clear(); return mController.TrashRootBlock(mPendingDrag.GetRootDraggedBlock()); }
public List<T> ConcatValues<T>(params T[][] data) { var rv = new List<T>(); foreach (var values in data) { rv.AddRange(values); } return rv; }
public DagIterator(Graph pattern) { foreach (var edge in pattern.GetEdges()) { if (Edges.IsDirectedEdge(edge) || Edges.IsUndirectedEdge(edge)) { continue; } throw new ArgumentException(_STR + _STR + edge); } decoratedGraphs.Add(new DecoratedGraph(pattern)); }
private bool ValidateCustomCatalog(string title, string value) { return _BOOL; }
public FunctionExecutionPooledExecutor(BlockingQueue<Runnable> queue, int poolSize, PoolStatHelper stats, ThreadFactory threadFactory) : this(queue, poolSize, stats, threadFactory, int.Parse(ConfigurationManager.AppSettings[DistributionConfig.GemfirePrefix + _STR]) ?? (_NUM * _NUM), _BOOL) { }
protected bool IsSSDPDiscovery(string body) { if (body != null && body.StartsWith(_STR) && body.Contains(_STR)) { return _BOOL; } return _BOOL; }
public override void AddChild(WXComponent child, int index) { if (child == null || index < -_NUM) { return; } if (child is WXBaseRefresh) { if (!CheckRefreshOrLoading(child)) { mRefreshs.Add(child); } return; } if (mChildren == null) { mChildren = new List<WXComponent>(); } int count = mChildren.Count; index = index >= count ? -_NUM : index; if (index == -_NUM) { mChildren.Add(child); } else { mChildren.Insert(index, child); } }
private void RestoreSortingSelection(int[] selection, int lead, ModelChange change) { for (int i = selection.Length - _NUM; i >= _NUM; i--) { selection[i] = ConvertRowIndexToView(selection[i], change); } lead = ConvertRowIndexToView(lead, change); if (selection.Length == _NUM || (selection.Length == _NUM && selection[_NUM] == GetSelectedRow())) { return; } selectionModel.SetValueIsAdjusting(_BOOL); selectionModel.ClearSelection(); for (int i = selection.Length - _NUM; i >= _NUM; i--) { if (selection[i] != -_NUM) { selectionModel.AddSelectionInterval(selection[i], selection[i]); } } SwingUtilities2.SetLeadAnchorWithoutSelection(selectionModel, lead, lead); selectionModel.SetValueIsAdjusting(_BOOL); }
public synchronized byte[] ToByteArray() { int remaining = count; if (remaining == _NUM) { return EMPTY_BYTE_ARRAY; } byte[] newbuf = new byte[remaining]; int pos = _NUM; foreach (byte[] buf in buffers) { int c = Math.Min(buf.Length, remaining); Buffer.BlockCopy(buf, _NUM, newbuf, pos, c); pos += c; remaining -= c; if (remaining == _NUM) { break; } } return newbuf; }
public void Clean() { Mute(null); Mute(null); Mute(null); }
public void Consume(int eventCount, long timeoutInMillis, Predicate<Event> condition) { if (eventCount < _NUM) throw new ArgumentException(_STR); if (eventCount == _NUM) return; int eventsRemaining = eventCount; long stopTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() + timeoutInMillis; while (eventsRemaining > _NUM && DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() < stopTime) { Event nextEvent = queue.Dequeue(); // Assuming queue is a Queue<Event> if (nextEvent != null) { if (condition(test)(nextEvent)) { --eventsRemaining; consumedEvents.Invoke(nextEvent); // Assuming consumedEvents is an Action<Event> } else { ignoredEvents.Invoke(nextEvent); // Assuming ignoredEvents is an Action<Event> } } } if (eventsRemaining > _NUM) { throw new TimeoutException(_STR + (eventCount - eventsRemaining) + _STR + eventCount + _STR + timeoutInMillis + _STR); } }
private void UpdateUiFromCommand(Command command) { if (command == null) { return; } actionsComboBox.Text = command.GetAction(); dataTextField.Text = command.GetData(); categoryTextField.Text = command.GetCategory(); mimeTextField.Text = command.GetMimeType(); componentTextField.Text = command.GetComponent(); userTextField.Text = command.GetUser(); flagsList_.RemoveSelectionInterval(_NUM, flagsList_.GetItemsCount()); List<IntentFlags> flags = command.GetFlags(); if (flags != null && flags.Count > _NUM) { foreach (IntentFlags flag in flags) { flagsList_.SetSelectedValue(flag, true); } } else { flagsList_.SetSelectedIndex(_NUM); } UpdateFlagsTextField(); tableModel_.RemoveAllRows(); List<ExtraField> extras = command.GetExtras(); if (extras != null && extras.Count > _NUM) { foreach (ExtraField extra in extras) { tableModel_.AddRow(extra); } } UpdateTableVisibility(); }
public void TestCompareToZeroZero() { BigInteger aNumber = BigInteger.Zero; BigInteger bNumber = BigInteger.Zero; Assert.Equal(_NUM, aNumber.CompareTo(bNumber)); }
public static int RandGaussian(int mean, int sd) { Random rand = new Random(); return (int)(rand.NextGaussian() * sd + mean); }
private float ComputeOverscrollPercent() { if (mOverScrollOffset >= _NUM) { return mOverScrollOffset / mMaxOverScroll; } else { return mOverScrollOffset / mMaxUnderScroll; } }
public IVector(int c) { vector = new int[Math.Max(defaultCapacity, c)]; }
public void ProcessInvite(RequestEvent requestEvent, ServerTransaction serverTransaction) { Request request = requestEvent.GetRequest(); SipProvider sipProvider = (SipProvider)requestEvent.GetSource(); ServerTransaction st = serverTransaction; try { if (st == null) { try { st = sipProvider.GetNewServerTransaction(request); } catch (TransactionUnavailableException tae) { tae.PrintStackTrace(); return; } catch (TransactionAlreadyExistsException taex) { return; } } string toTag = _STR + DateTime.UtcNow.Ticks; Response response = messageFactory.CreateResponse(Response.RINGING, request); ToHeader toHeader = (ToHeader)response.GetHeader(ToHeader.NAME); toHeader.SetTag(toTag); st.SendResponse(response); response = messageFactory.CreateResponse(Response.OK, request); Address address = addressFactory.CreateAddress(_STR + myAddress + _STR + myPort + _STR); ContactHeader contactHeader = headerFactory.CreateContactHeader(address); response.AddHeader(contactHeader); toHeader = (ToHeader)response.GetHeader(ToHeader.N
public static IgniteLogger Logger(GridKernalContext ctx, AtomicReference<IgniteLogger> logRef, object obj) { IgniteLogger log = logRef.Get(); if (log == null) { logRef.CompareAndSet(null, ctx.Log(obj.GetType())); log = logRef.Get(); } return log; }
protected bool ReadReceiveDelay() { try { receiveDelay = int.Parse(receiveDelayField.Text); } catch (Exception e) { statusText1.Text = rb.GetString(_STR); statusText1.Visible = _BOOL; receiveDelay = _NUM; errorInStatus1 = _BOOL; ResetNotes2(); return _BOOL; } if (receiveDelay < _NUM) { statusText1.Text = rb.GetString(_STR); statusText1.Visible = _BOOL; receiveDelay = _NUM; errorInStatus1 = _BOOL; ResetNotes2(); return _BOOL; } if (receiveDelay > _NUM) { statusText1.Text = rb.GetString(_STR); statusText1.Visible = _BOOL; receiveDelay = _NUM; errorInStatus1 = _BOOL; ResetNotes2(); return _BOOL; } return _BOOL; }
private void WriteIndent(int times) { for (int i = options.GetBaseIndent() + times; i > _NUM; i--) { writer.Write(options.GetIndent()); } }
public override int GetHashCode() { int result = _NUM; var it = GetEnumerator(); while (it.MoveNext()) { object obj = it.Current; result = (_NUM * result) + (obj == null ? _NUM : obj.GetHashCode()); } return result; }
public static int ParseString(string value) { return int.Parse(value); }
void DoHandleCSharpMouseEvent(MouseEvent mouseEvent) { if (!XToolkit.IsLeftMouseButton(mouseEvent) && !XToolkit.IsRightMouseButton(mouseEvent)) { return; } XBaseWindow grabWindow = XAwtState.GetGrabWindow(); Point ptGlobal = mouseEvent.GetLocationOnScreen(); if (!hasPointerMoved) { if (grabInputPoint == null || (Math.Abs(ptGlobal.X - grabInputPoint.X) > GetMouseMovementSmudge()) || (Math.Abs(ptGlobal.Y - grabInputPoint.Y) > GetMouseMovementSmudge())) { hasPointerMoved = true; } } XBaseMenuWindow wnd = GetMenuWindowFromPoint(ptGlobal); XMenuItemPeer item = (wnd != null) ? wnd.GetItemFromPoint(wnd.ToLocal(ptGlobal)) : null; XBaseMenuWindow cwnd = GetShowingLeaf(); switch (mouseEvent.GetID()) { case MouseEvent.MOUSE_PRESSED: showingMousePressedSubmenu = null; if ((grabWindow == this) && (wnd == null)) { UngrabInput(); } e
public bool IsInvalidNode() { ASTNode first = fNodes[_NUM]; ASTNode candidate = first.GetParent(); if (candidate == null) return _BOOL; if (candidate.GetNodeType() == ASTNode.METHOD_DECLARATION) return _BOOL; return _BOOL; }
public void Push(float value) { int bits = BitConverter.SingleToInt32Bits(value); if (bits == _NUM || bits == _NUM || bits == _NUM) { mv.VisitInsn(Opcodes.FCONST_0 + (int)value); } else { mv.VisitLdcInsn(value); } }
public void OnMotion(MotionEvent event, Interaction iact) { // Code to align (or perform some other operation). }
public synchronized void RemoveBatchClustererListener(BatchClustererListener cl) { m_batchClustererListeners.Remove(cl); }
public HeldLocksGrant Refresh(long expirationDateMs) { return new HeldLocksGrant(grantId, creationDateMs, expirationDateMs, lockMap, lockTimeout, versionId); }
void RemoveKnownObject(ParseObject obj) { lock (mutex) { knownObjects.Remove(obj); } }
public static HeapBytesStore<byte[]> Wrap(byte[] bytes) { return HeapBytesStore.Wrap(bytes); }
private static string Parse(JsonValue baseValue) { if (!baseValue.IsString()) { return null; } return BuildString(baseValue.AsString()); }
public void TestValueOfLongNegative2() { long longVal = -_NUM; BigInteger aNumber = new BigInteger(longVal); byte[] rBytes = { (byte)(-_NUM), (byte)_NUM, (byte)(-_NUM), (byte)(-_NUM) }; byte[] resBytes = aNumber.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.True(resBytes[i] == rBytes[i]); } Assert.Equal(-_NUM, aNumber.Sign); }
public void BeforeInsert(int index, char element) { if (index > size || index < _NUM) throw new IndexOutOfRangeException(_STR + index + _STR + size); EnsureCapacity(size + _NUM); Array.Copy(elements, index, elements, index + _NUM, size - index); elements[index] = element; size++; }
private void GrowEntries() { int newLen = (next.Length << _NUM) + _NUM; int[] newNext = new int[newLen]; Buffer.BlockCopy(next, INT_ARR_OFF, newNext, INT_ARR_OFF, size << _NUM); next = newNext; nextEmpty = new int[newLen]; Array.Fill(nextEmpty, -_NUM); object[] newObjs = new object[newLen]; Array.Copy(objs, _NUM, newObjs, _NUM, size); objs = newObjs; }
public SidedPlane(Vector p, bool onSide, Vector A, Vector B) : base(A, B) { sigNum = onSide ? Math.Sign(Evaluate(p)) : -Math.Sign(Evaluate(p)); if (sigNum == _NUM) throw new ArgumentException(_STR); }
public static bool IsInputStreamGZIPCompressed(PushbackInputStream inputStream) { if (inputStream == null) return false; byte[] signature = new byte[2]; int readStatus = inputStream.Read(signature, 0, signature.Length); inputStream.Unread(signature); int streamHeader = (signature[1] & 0xFF) | ((signature[0] << 8) & 0xFF00); return readStatus == 2 && GZIPInputStream.GZIP_MAGIC == streamHeader; }
void InsertOp(int pos, int length, int op) { int totalLen = m_ops.GetOp(OpMap.MAPINDEX_LENGTH); for (int i = totalLen - _NUM; i >= pos; i--) { m_ops.SetOp(i + length, m_ops.GetOp(i)); } m_ops.SetOp(pos, op); m_ops.SetOp(OpMap.MAPINDEX_LENGTH, totalLen + length); }
private void Clear() { valid = _BOOL; if (listenerObjects == null || listenerObjects.Count == 0) { DeregisterListener(); } ssm = null; if (SMSEntry.cacheSMSEntries) { orgConfigs.Clear(); globalConfigs.Clear(); } }
public static void RegisterDecayableObject(Decayable obj) { decayObjects.Add(obj); }
public static void AssertExpectedOutputContains(string expectedString, string x) { if (!x.Contains(expectedString)) { Fail(_STR + expectedString + _STR + x + _STR); } }
public bool Remove(string classname) { string pkgname; HashSet<string> names; classname = CleanUp(classname); pkgname = ExtractPackage(classname); names = m_Cache[pkgname]; if (names != null) { return names.Remove(classname); } else { return false; // Assuming _BOOL is false in C# } }
public void TestFailedStage() { var ex = new CFException(); var f = Task.FromException<int>(ex); var x = new AtomicInteger(_NUM); var r = new AtomicReference<Throwable>(); f.ContinueWith(t => { }, TaskContinuationOptions.ExecuteSynchronously); Assert.AreEqual(x.Get(), _NUM); Assert.AreEqual(r.Get(), ex); }
protected override void OnPaint(PaintEventArgs e) { base.OnPaint(e); Graphics2D graphics = (Graphics2D)e.Graphics; graphics.BackColor = mColorSpectrumBackground; var renderHints = new RenderingHints(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON); renderHints.Put(RenderingHints.KEY_RENDERING, RenderingHints.VALUE_RENDER_QUALITY); graphics.SetRenderingHints(renderHints); DrawFrequencies(graphics); DrawCursor(graphics); }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public void ClassLoaderDestroy(DynamicClassLoader loader) { MethodInfo destroy = GetDestroyMethod(_resource.GetType()); if (destroy == null) return; try { destroy.Invoke(_resource, null); } catch (Exception e) { log.Log(LogLevel.Warning, e.ToString(), e); } }
public bool DeleteAttachmentPoint(DatapathId sw, OFPort port) { AttachmentPoint ap = new AttachmentPoint(sw, port, new DateTime(_NUM)); if (this.oldAPs != null) { List<AttachmentPoint> apList = new List<AttachmentPoint>(this.oldAPs); int index = apList.IndexOf(ap); if (index > _NUM) { apList.RemoveAt(index); this.oldAPs = apList; } } if (this.attachmentPoints != null) { List<AttachmentPoint> apList = new List<AttachmentPoint>(this.attachmentPoints); int index = apList.IndexOf(ap); if (index > _NUM) { apList.RemoveAt(index); this.attachmentPoints = apList; return _BOOL; } } return _BOOL; }
static bool IsAssignableTo(ClassNode type, ClassNode toBeAssignedTo) { if (UNKNOWN_PARAMETER_TYPE == type) return true; // _BOOL if (type == toBeAssignedTo) return true; // _BOOL if (toBeAssignedTo.Redirect() == STRING_TYPE && type.Redirect() == GSTRING_TYPE) { return true; // _BOOL } if (IsPrimitiveType(toBeAssignedTo)) toBeAssignedTo = GetWrapper(toBeAssignedTo); if (IsPrimitiveType(type)) type = GetWrapper(type); if (Double_TYPE == toBeAssignedTo) { return type.IsDerivedFrom(NUMBER_TYPE); } if (Float_TYPE == toBeAssignedTo) { return type.IsDerivedFrom(NUMBER_TYPE) && Double_TYPE != type.Redirect(); } if (Long_TYPE == toBeAssignedTo) { return type.IsDerivedFrom(NUMBER_TYPE) && Double_TYPE != type.Redirect() && Float_TYPE != type.Redirect(); } if (Integer_TYPE == toBeAssignedTo) { return type.IsDerivedFrom(NUMBER_TYPE) && Double_TYPE != type.Redirect() && Float_T
public synchronized int TotalRecoverFiles() { int total = _NUM; foreach (var file in fileDetails.Values) { if (file.Reused() == _BOOL) { total++; } } return total; }
public static AnimGameItem Process(MD5Model md5Model, MD5AnimModel animModel, Vector3 defaultColour) { List<Matrix4x4> invJointMatrices = CalcInJointMatrices(md5Model); List<AnimatedFrame> animatedFrames = ProcessAnimationFrames(md5Model, animModel, invJointMatrices); List<Mesh> list = new List<Mesh>(); foreach (MD5Mesh md5Mesh in md5Model.GetMeshes()) { Mesh mesh = GenerateMesh(md5Model, md5Mesh); HandleTexture(mesh, md5Mesh, defaultColour); list.Add(mesh); } Mesh[] meshes = list.ToArray(); AnimGameItem result = new AnimGameItem(meshes, animatedFrames, invJointMatrices); return result; }
public ConfigurationError(string msg, Exception x) : base(msg) { this.exception = x; }
public override void DeleteAssignment(Experiment experiment, User.ID userID, Context context, Application.Name appName, Assignment currentAssignment) { DeleteUserFromLookUp(experiment.GetID(), userID, context); bool countUp = _BOOL; assignmentsCountExecutor.Execute(new AssignmentCountEnvelope(assignmentsRepository, experimentRepository, dbRepository, experiment, currentAssignment, countUp, eventLog, null, assignUserToExport, assignBucketCount)); DeleteAssignmentOld(experiment.GetID(), userID, context, appName, currentAssignment.GetBucketLabel()); RemoveIndexUserToExperiment(userID, experiment.GetID(), context, appName); RemoveIndexUserToBucket(userID, experiment.GetID(), context, currentAssignment.GetBucketLabel()); RemoveIndexExperimentsToUser(userID, experiment.GetID(), context, appName); }
public string Format(object obj, StringBuilder toAppendTo) { DateTime? source = null; if (obj is DateTime) { source = (DateTime)obj; } else if (obj is string) { try { source = DateTime.Parse((string)obj); } catch (FormatException) { throw new Exception("Invalid date format."); } } if (source == null) { throw new ArgumentException(obj == null ? "Input cannot be null" : obj.ToString()); } return Format(source.Value, toAppendTo); }
private static readonly bool CompareAndSetWaitStatus(Node node, int expect, int update) { return Unsafe.CompareAndSwapInt(node, waitStatusOffset, expect, update); }
public static ThreadDump Create() { ThreadDump threadDump = _threadDumpRef.Get(); if (threadDump == null) { threadDump = new ThreadDumpPro(); _threadDumpRef.CompareAndSet(null, threadDump); threadDump = _threadDumpRef.Get(); } return threadDump; }
private void CheckStart() { if (mCanProcessAudio && !mOutput.IsRunning() && mOutput.Available() <= mBufferStartThreshold) { mOutput.Start(); } }
protected bool MatchesFilter(string input, string[] filter) { foreach (string match in filter) { if (!input.Contains(match)) return false; } return true; }
private E UnlinkFirst() { Node<E> f = first; if (f == null) return default(E); Node<E> n = f.next; E item = f.item; f.item = default(E); f.next = f; // This line keeps consistency, but might not be necessary in C# first = n; if (n == null) last = null; else n.prev = null; --count; notFull.Signal(); return item; }
public IStatus Run(IProgressMonitor monitor) { Stream input = null; FileStream output = null; IStatus jobStatus = Status.OK_STATUS; byte[] b = new byte[_NUM]; int bytesRead; try { HttpWebRequest request = (HttpWebRequest)WebRequest.Create(url); HttpWebResponse response = (HttpWebResponse)request.GetResponse(); input = response.GetResponseStream(); long totalBytesRead = _NUM; int responseStatusCode = (int)response.StatusCode; if (responseStatusCode >= (int)HttpStatusCode.BadRequest) { jobStatus = new Status(Status.ERROR, CorePlugin.PLUGIN_ID, string.Format(_STR, responseStatusCode, response.StatusDescription)); } long contentLength = response.ContentLength; output = new FileStream(target, FileMode.Create, FileAccess.Write); monitor.BeginTask(_STR + url.ToString(), (int)contentLength); while (jobStatus == Status.OK_STATUS) { if (contentLength > _NUM && totalBytesRead >= contentLength) { break; } bytesRead = input.Read(b, 0, b.Len
private static readonly object _lock = new object(); private static DocumentBuilderFactory docBuilderFactory; private static void InitDocBuilderFactory() { lock (_lock) { docBuilderFactory = DocumentBuilderFactory.NewInstance(); docBuilderFactory.SetIgnoringComments(_BOOL); docBuilderFactory.SetCoalescing(_BOOL); } }
public double InterceptStdErr() { return Math.Sqrt(svar0); }
private void CreateMissingValues() { string sql = _STR + _STR + _STR + _STR + _STR + _STR + _STR; using (var connection = new SqlConnection(/* your connection string here */)) { using (var command = new SqlCommand(sql, connection)) { command.Parameters.AddWithValue("@RegistrationID", GetARegistrationID()); connection.Open(); using (var reader = command.ExecuteReader()) { while (reader.Read()) { var v = new MRegistrationValue(this, reader.GetInt32(_NUM), _STR); v.SaveEx(); } } } } }
private static string NormalizePath(string path) { return path.Replace(_STR, _STR); }
public void StartLaunchNotifier() { if (m_launchNotification == null) throw new NullReferenceException(); m_launchNotifierThread.IsBackground = _BOOL; m_launchNotifierThread.Start(); }
private static void Encode(List<AclEntry> acl, long address) { long offset = address; foreach (var ace in acl) { int flags = _NUM; UserPrincipal who = ace.Principal(); if (!(who is UnixUserPrincipals.User)) throw new ProviderMismatchException(); UnixUserPrincipals.User user = (UnixUserPrincipals.User)who; int uid; if (user.IsSpecial()) { uid = -_NUM; if (who == UnixUserPrincipals.SPECIAL_OWNER) flags |= ACE_OWNER; else if (who == UnixUserPrincipals.SPECIAL_GROUP) flags |= (ACE_GROUP | ACE_IDENTIFIER_GROUP); else if (who == UnixUserPrincipals.SPECIAL_EVERYONE) flags |= ACE_EVERYONE; else throw new AssertionError(_STR); } else { if (user is UnixUserPrincipals.Group) { uid = user.Gid(); flags |= ACE_IDENTIFIER_GROUP; } else { uid = user.Uid(); } } int type; switch (ace.Type()) { case
public static string ExpandHiddenDir(string filename) { const int macro = filename.IndexOf(hiddenDirMacro, _NUM); string expandedFilter; if (macro == -_NUM) { return filename; } if (Cfg.DEBUG) { Check.Log(TAG + _STR); } expandedFilter = Regex.Replace(filename, _STR, Path.Hidden().TrimEnd(_STR.ToCharArray()), 1); if (Cfg.DEBUG) { Check.Log(TAG + _STR + expandedFilter); } return expandedFilter; }
private bool TryQueueCurrentBuffer(long elapsedWaiting) { if (currentBuffer.IsEmpty()) return false; if (isOpen && neverPubQueue.Count < neverPubCapacity) { neverPubQueue.Add(currentBuffer); totalQueuedRecords.Add(currentBuffer.SizeRecords()); totalQueuedBuffers.Increment(); OnQueueBufferSuccess(currentBuffer, elapsedWaiting); currentBuffer = new RecordBuffer<Flow>(flow); return false; } else if (elapsedWaiting > _NUM) { OnQueueBufferTimeout(currentBuffer, elapsedWaiting); return false; } else { return false; } }
public void UpdateValue(object value, bool isSelected, bool sync) { if (IsReadOnly()) { return; } if (GenericFormFactory.IsTextForm(formType)) { textString = (string)value; if (textString != null && textString.Equals(lastTextString)) { sync = _BOOL; } lastTextString = textString; } else { textString = (string)value; this.isSelected = isSelected; if (isSelected != lastIsSelected && lastTextString != null && textString != null && textString.Equals(lastTextString)) { sync = _BOOL; } lastTextString = textString; lastIsSelected = isSelected; } if (sync && guiType != FormFactory.ULC && guiComp != null) { SyncGUI(value); } }
public bool HasNext() { dataInputStream.Mark(_NUM); int val = dataInputStream.Read(); dataInputStream.Reset(); return val != -_NUM; }
private StringBuilder AppendParameterSignature(StringBuilder buffer, char[][] parameterTypes, char[][] parameterNames) { if (parameterTypes != null) { for (int i = _NUM; i < parameterTypes.Length; i++) { if (i > _NUM) { buffer.Append(_STR); buffer.Append(_STR); } buffer.Append(parameterTypes[i]); if (parameterNames != null && parameterNames[i] != null) { buffer.Append(_STR); buffer.Append(parameterNames[i]); } } } return buffer; }
public void CompleteHeartbeat(Database database, long seqno, string eventId) { if (logger.IsDebugEnabled) logger.Debug(_STR); Statement st = null; ResultSet rs = null; Timestamp sts = new Timestamp(_NUM); Timestamp now = new Timestamp(DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond); List<Column> whereClause = new List<Column>(); List<Column> values = new List<Column>(); if (logger.IsDebugEnabled) logger.Debug(_STR + now); try { st = database.CreateStatement(); rs = st.ExecuteQuery(sourceTsQuery); if (rs.Next()) sts = rs.GetTimestamp(_NUM); } finally { if (rs != null) { try { rs.Close(); } catch (SQLException e) { } } if (st != null) { try { st.Close(); } catch (SQLException e) { } } } long lagMillis = now.GetTime() - sts.GetTime(); hbId.SetValue(KEY); whereClause.Add(hbId); hbSeqno.SetValue(seqno); hbEv
public CipherParameters Decrypt(byte[] inArray, int inOff, int inLen, int keyLen) { if (!key.IsPrivate()) { throw new ArgumentException(_STR); } BigInteger n = key.GetModulus(); BigInteger d = key.GetExponent(); byte[] C = new byte[inLen]; Array.Copy(inArray, inOff, C, 0, C.Length); BigInteger c = new BigInteger(1, C); BigInteger r = c.ModPow(d, n); return GenerateKey(n, r, keyLen); }
private PrivateKey LoadPrivateKey() { if (defaultKeys) { return GetPrivateKeyFromString(RSAKeyLoader.DEFAULT_PKEY); } if (priKey == null) { using (var reader = new StreamReader(path + _STR + this.id)) { string key = string.Empty; string line; while ((line = reader.ReadLine()) != null) { key += line; } priKey = GetPrivateKeyFromString(key); } } return priKey; }
public void RemoveCategoriesListener(SnapshotCategoriesListener listener) { listeners.Remove(listener); }
public bool HasUnsupportedCriticalExtension() { var extns = GetCriticalExtensionOIDs(); if (extns == null) { return _BOOL; } extns.Remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT); extns.Remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR); return extns.Count > 0; }
private int? GetWeekNumberForASevenDayRange(DateTime firstDateInRange, System.Globalization.CalendarWeekRule weekFieldRules, bool requireUnanimousWeekNumber) { List<int> weekNumbersList = new List<int>(); for (int daysIntoTheFuture = _NUM; daysIntoTheFuture <= _NUM; ++daysIntoTheFuture) { DateTime currentDateInRange; try { currentDateInRange = firstDateInRange.AddDays(daysIntoTheFuture); int currentWeekNumber = CultureInfo.CurrentCulture.Calendar.GetWeekOfYear(currentDateInRange); weekNumbersList.Add(currentWeekNumber); } catch (Exception ex) { return _NUM; } } bool isUnanimous = InternalUtilities.AreObjectsEqual(weekNumbersList[_NUM], weekNumbersList[_NUM]); if (isUnanimous) { return weekNumbersList[_NUM]; } if (requireUnanimousWeekNumber) { return null; } int mostCommonWeekNumber = InternalUtilities.GetMostCommonElementInList(weekNumbersList); return mostCommonWeekNumber; }
private bool IsNotInArray(string str, string[] array) { for (int i = _NUM; i < array.Length; i++) { if (str.Equals(array[i])) { return _BOOL; } } return _BOOL; }
public Node CloneOrImportNode(short operation, Node node, bool deep) { NodeImpl copy = ShallowCopy(operation, node); if (deep) { NodeList list = node.GetChildNodes(); for (int i = _NUM; i < list.GetLength(); i++) { copy.AppendChild(CloneOrImportNode(operation, list.Item(i), deep)); } } NotifyUserDataHandlers(operation, node, copy); return copy; }
public static void Cleanup() { lock (w) { Secp256k1Context.DestroyContext(Secp256k1Context.GetContext()); } }
public void Init() { LoadParameterFromZK(); _invalidLoginCleanupExecutor.ScheduleWithFixedDelay(new InvalidLoginCleaner(), CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS, CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS, TimeSpan.FromMinutes(1)); _log.Info(_STR, _maxAuthnLoginAttemptsCount); _log.Info(_STR, _maxAuthnLoginAttemptsLifeTimeInMins); _log.Info(_STR, CLEANUP_THREAD_SCHEDULE_INTERVAL_IN_MINS); }
public List<string> MakeUrlList(string shard) { List<string> urls = StrUtils.SplitSmart(shard, _STR, _BOOL); for (int i = _NUM; i < urls.Count; i++) { urls[i] = BuildUrl(urls[i]); } if (urls.Count > _NUM) { var rng = new Random(); urls = urls.OrderBy(a => rng.Next()).ToList(); } return urls; }
public StreamReader GetReader(string charset) { try { return new StreamReader(Stream(), GetValidCharset(charset)); } catch (DecoderFallbackException e) { throw new HttpRequestException(e); } }
private byte[] ToZLIB(RenderedImage image, Color bkg, string colorModel) { return ImageGraphics2D.ToByteArray(image, ImageConstants.RAW, ImageConstants.ENCODING_FLATE_ASCII85, ImageGraphics2D.GetRAWProperties(bkg, colorModel)); }
public void AddVertex(object id) { if (initialized) { throw new ArgumentException(); } Vertex vertex = new Vertex(id); object existing = vertexMap.Put(id, vertex); if (existing != null) { throw new ArgumentException(); } vertexList.Add(vertex); }
public void ConfigureLocalServices() { clientMemo.SetLnTrafficController(this); clientMemo.ConfigureCommandStation(LnCommandStationType.COMMAND_STATION_DCS100, _BOOL, _BOOL); clientMemo.ConfigureManagers(); }
private static int IndexOf(int fromIndex, string csq) { const int _NUM = -1; // Assuming _NUM is -1 based on typical usage if (csq == null) return _NUM; int length = csq.Length; int j = fromIndex; int i = (j < length) ? csq[j++] : _NUM; i <<= 16; // Assuming we want to shift left by 16 bits (similar to Java's int -> int in bits) i |= (j < length) ? csq[j++] : _NUM; return i; }
protected SizeRequirements CalculateMinorAxisRequirements(int axis, SizeRequirements r) { UpdateGrid(); CalculateColumnRequirements(axis); if (r == null) { r = new SizeRequirements(); } long min = _NUM; long pref = _NUM; int n = columnRequirements.Length; for (int i = _NUM; i < n; i++) { SizeRequirements req = columnRequirements[i]; min += req.minimum; pref += req.preferred; } int adjust = (n + _NUM) * cellSpacing + _NUM * borderWidth; min += adjust; pref += adjust; r.minimum = (int)min; r.preferred = (int)pref; r.maximum = (int)pref; AttributeSet attr = GetAttributes(); CSS.LengthValue cssWidth = (CSS.LengthValue)attr.GetAttribute(CSS.Attribute.WIDTH); if (BlockView.SpanSetFromAttributes(axis, r, cssWidth, null)) { if (r.minimum < (int)min) { r.maximum = r.minimum = r.preferred = (int)min; } } to
public void Append(string str) { for (int i = _NUM; i < str.Length; i++) { Append(str[i]); } }
public Task<string> PushAsync(string name, Expression func) { string let = string.Format(_STR, name, func.ToHaskell()); return PullRaw(let); }
public override string ToString(int depth) { if (depth <= _NUM) return _STR; return _STR + base.ToString(depth) + _STR + mantissa + _STR + exponent + _STR + (bigVal != null ? bigVal.ToString() : _STR) + _STR + image; }
public MetaDataColumnDescriptor(string columnName, int jdbcType, object defaultValue) { _columnName = columnName.ToUpper(); _jdbcType = jdbcType; _defaultValue = defaultValue; }
private void BulkLoad(double[] lmin, double[] lmax, List<Node> children, ArrayModifiableDBIDs ids, int start, int end, int dim, int level, int code) { if (dim == _NUM) { var iter = ids.Iter(); iter.Seek(start); var first = relation.Get(iter); iter.Advance(); bool degenerate = _BOOL; loop: for (; iter.GetOffset() < end; iter.Advance()) { var other = relation.Get(iter); for (int d = _NUM; d < lmin.Length; d++) { if (Math.Abs(first.DoubleValue(d) - other.DoubleValue(d)) > _NUM) { degenerate = _BOOL; break loop; } } } if (degenerate) { double[] center = new double[lmin.Length]; for (int d = _NUM; d < lmin.Length; d++) { center[d] = lmin[d] * _NUM + lmax[d] * _NUM + shift[d]; if (center[d] > min[d] + width[d]) { center
protected List<float[]> ForwardPoly(float[] rawllpts, int ltype, int nsegs, bool isFilled) { bool DEBUG = Debug.Debugging(_STR); int len = rawllpts.Length > _NUM ? rawllpts.Length : _NUM; if (len < _NUM) return new List<float[]>(_NUM); if (IsComplicatedLineType(ltype)) return DoPolyDispatch(rawllpts, ltype, nsegs, isFilled); int invalid_count = _NUM; bool curr_invalid, prev_invalid = _BOOL; Point temp = new Point(); AzimuthVar az_first = null, az_save = null, azVar = new AzimuthVar(); List<AzimuthVar> sections = new List<AzimuthVar>(_NUM); float[] x_ = null, xs = new float[len]; float[] y_ = null, ys = new float[len]; Forward(rawllpts[_NUM], rawllpts[_NUM], temp, azVar); xs[_NUM] = temp.x; ys[_NUM] = temp.y; prev_invalid = azVar.invalid_forward; if (prev_invalid) { ++invalid_co
private List<string> FilterYears(List<string> items) { Calendar now = Calendar.GetInstance(); int year = now.Get(Calendar.Year); string yearInString = year.ToString(); Console.WriteLine(TAG + _STR + yearInString); int prevYear = year - _NUM; string prevYearInString = prevYear.ToString(); Console.WriteLine(TAG + _STR + prevYearInString); for (int i = items.Count - 1; i >= 0; i--) { string s = items[i]; if (System.Text.RegularExpressions.Regex.IsMatch(s, _STR) && !s.Contains(yearInString) && !s.Contains(prevYearInString)) { Console.WriteLine(TAG + _STR + s); items.RemoveAt(i); } } Console.WriteLine(TAG + _STR + string.Join(", ", items)); return items; }
public DataProviderEvent(LocalizableMessage reason, HashSet<Type> types) { Reject.IfNull(reason, types); Reject.IfTrue(types.Count == 0); this.reason = reason; var tmp = new HashSet<Type>(types); this.types = new HashSet<Type>(tmp); }
public List<string> ValidateBean<T>(T bean, string errIfBeanNull) { List<string> errors = new List<string>(); if (bean == null) { errors.Add(errIfBeanNull); return errors; } var violations = validator.Validate(bean); foreach (var violation in violations) { errors.Add(violation.Message); } return errors; }
protected void SmartInsertAfterBracket(IDocument document, DocumentCommand command) { if (command.Offset == -_NUM || document.GetLength() == _NUM) { return; } try { int p = (command.Offset == document.GetLength() ? command.Offset - _NUM : command.Offset); int line = document.GetLineOfOffset(p); int start = document.GetLineOffset(line); int whiteend = FindEndOfWhiteSpace(document, start, command.Offset); if (whiteend == command.Offset) { int indLine = FindMatchingOpenBracket(document, line, command.Offset, _NUM); if (indLine != -_NUM && indLine != line) { StringBuilder replaceText = new StringBuilder(GetIndentOfLine(document, indLine)); replaceText.Append(document.Get(whiteend, command.Offset - whiteend)); replaceText.Append(command.Text); command.Length = command.Offset - start; command.Offset = start; command.Text = replaceText.ToString(); } } } catch (BadLocationException e) { GWTPluginLog.LogError(e); } }
private string AttemptToChooseFormattingPattern() { if (nationalNumber.Length >= MIN_LEADING_DIGITS_LENGTH) { GetAvailableFormats(nationalNumber.ToString()); string formattedNumber = AttemptToFormatAccruedDigits(); if (formattedNumber.Length > _NUM) { return formattedNumber; } return MaybeCreateNewTemplate() ? InputAccruedNationalNumber() : accruedInput.ToString(); } else { return AppendNationalNumber(nationalNumber.ToString()); } }
private void FillPicks() { MLookup orgL = MLookupFactory.Get(Env.GetCtx(), m_WindowNo, _NUM, _NUM, DisplayType.TableDir); fWarehouse = new VLookup(_STR, _BOOL, _BOOL, _BOOL, orgL); lWarehouse.Text = Msg.Translate(Env.GetCtx(), _STR); fWarehouse.VetoableChange += this; m_M_Warehouse_ID = fWarehouse.Value; MLookup bpL = MLookupFactory.Get(Env.GetCtx(), m_WindowNo, _NUM, _NUM, DisplayType.Search); fBPartner = new VLookup(_STR, _BOOL, _BOOL, _BOOL, bpL); lBPartner.Text = Msg.Translate(Env.GetCtx(), _STR); lDocType.Text = Msg.Translate(Env.GetCtx(), _STR); cmbDocType.Items.Add(new KeyNamePair(MOrder.Table_ID, Msg.Translate(Env.GetCtx(), _STR))); cmbDocType.Items.Add(new KeyNamePair(MRMA.Table_ID, Msg.Translate(Env.GetCtx(), _STR))); cmbDocType.SelectedIndexChanged += this; }
protected override FieldConfigBase CreateCopy(FieldConfigBase fieldConfigBase) { FieldConfigFontPreview copy = null; if (fieldConfigBase != null) { copy = new FieldConfigFontPreview(fieldConfigBase.GetCommonData()); } return copy; }
public void TestConstructorSignBytesZeroNull3() { byte[] aBytes = { }; int aSign = _NUM; byte[] rBytes = { _NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); byte[] resBytes = aNumber.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.True(resBytes[i] == rBytes[i]); } Assert.Equal(_STR, _NUM, aNumber.Sign); }
public object CastToType(int t, XPathContext support) { object result; switch (t) { case CLASS_STRING: result = Str(); break; case CLASS_NUMBER: result = Convert.ToDouble(Num()); break; case CLASS_NODESET: result = Iter(); break; case CLASS_BOOLEAN: result = Convert.ToBoolean(Bool()); break; case CLASS_UNKNOWN: result = m_obj; break; default: Error(XPATHErrorResources.ER_CANT_CONVERT_TO_TYPE, new object[] { GetTypeString(), t.ToString() }); result = null; break; } return result; }
public static void ForceDeleteOnExit(FileInfo file) { if (file.Attributes.HasFlag(FileAttributes.Directory)) { DeleteDirectoryOnExit(file); } else { // Here, you would implement logic to mark the file for deletion on exit. // In .NET, you might want to manage that manually as there's no direct equivalent. } } private static void DeleteDirectoryOnExit(FileInfo directory) { // Logic to delete the directory on exit }
public override bool Init(StepMetaInterface smi, StepDataInterface sdi) { this.meta = (SortKeyStepMeta)smi; this.data = (SortKeyStepData)sdi; return base.Init(smi, sdi); }
private void PrintAnnotationFromEditor(WorkflowAnnotation anno, Graphics g2) { Graphics gPr = g2.Create(); RectangleF loc = anno.GetLocation(); gPr.Translate(loc.X, loc.Y); gPr.SetClip(0, 0, (int)loc.Width, (int)loc.Height); Size size = new Size((int)loc.Width, (int)loc.Height); pane.Size = size; pane.Text = AnnotationDrawUtils.CreateStyledCommentString(anno); pane.SelectionStart = 0; pane.Paint(gPr); gPr.Dispose(); }
public void Add(IPoint pt) { if (inProgress) { throw new InvalidOperationException(_STR); } points.Add(pt); }
public static Configuration Load(TextReader reader) { try { var properties = new Properties(); properties.Load(reader); return From(properties); } finally { reader.Close(); } }
public void Add(OffsettedItem item) { ThrowIfPrepared(); try { if (item.GetAlignment() > GetAlignment()) { throw new ArgumentException(_STR); } } catch (NullReferenceException) { throw new NullReferenceException(_STR); } items.Add(item); }
public static void AddAnnotationToXML(XmlElement annotationsElement, string name, string value) { if (value == null) { DeleteAnnotationFromXML(annotationsElement, name); } else { XmlDocument doc = annotationsElement.OwnerDocument; XmlElement elem = doc.CreateElement("STR"); annotationsElement.AppendChild(elem); elem.SetAttribute("STR", name); elem.InnerText = value; } }
public bool ReadBoolean() { return primitiveTypes.ReadBoolean(); }
public IEnumerator<string> EnumerateMeasures() { List<string> newList = new List<string> { _STR }; return newList.GetEnumerator(); }
public override Instances DefineDataFormat() { List<Attribute> atts; List<string> attValues; int i; m_Random = new Random(GetSeed()); m_nextClassShouldBeZero = _BOOL; m_lastLabel = double.NaN; SetNumExamplesAct(GetNumExamples()); atts = new List<Attribute>(); atts.Add(new Attribute(_STR)); atts.Add(new Attribute(_STR)); atts.Add(new Attribute(_STR)); attValues = new List<string>(); for (i = _NUM; i < _NUM; i++) { attValues.Add(_STR + i); } atts.Add(new Attribute(_STR, attValues)); attValues = new List<string>(); for (i = _NUM; i <= _NUM; i++) { attValues.Add(_STR + i); } atts.Add(new Attribute(_STR, attValues)); attValues = new List<string>(); for (i = _NUM; i < _NUM; i++) { attValues.Add(_STR + i); } atts.Add(new Attribute(_STR)); atts.Add(new Attrib
public static double LnGamma(double alpha) { double x = alpha, f = _NUM, z; if (x < _NUM) { f = _NUM; z = x - _NUM; while (++z < _NUM) { f *= z; } x = z; f = -Math.Log(f); } z = _NUM / (x * x); return f + (x - _NUM) * Math.Log(x) - x + _NUM + (((- _NUM * z + _NUM) * z - _NUM) * z + _NUM) / x; }
private static char[] ZZUnpackCMap(string packed) { char[] map = new char[_NUM]; int i = _NUM; int j = _NUM; while (i < _NUM) { int count = packed[i++]; char value = packed[i++]; do { map[j++] = value; } while (--count > 0); } return map; }
public void StartTicker(long delay, bool rightToLeft) { if (!tickerEnabled) { return; } if (!IsCellRenderer()) { Form parent = GetComponentForm(); if (parent != null) { parent.RegisterAnimatedInternal(this); } } tickerStartTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); tickerDelay = delay; tickerRunning = true; // Assuming _BOOL represents true this.rightToLeft = rightToLeft; if (IsRTL()) { this.rightToLeft = !this.rightToLeft; } }
public static CipherSuite ValueOf(int id1, int id2) { id1 &= _NUM; id2 &= _NUM; int id = (id1 << _NUM) | id2; if (!idMap.TryGetValue(id, out CipherSuite c)) { string h1 = Convert.ToString(id1, _NUM); string h2 = Convert.ToString(id2, _NUM); c = new CipherSuite(_STR + h1 + _STR + h2, id); } return c; }
public static Context CreatePendingActionContext(Context context, ReconAction action, string mappingName, JsonValue sourceObject, string reconId, Situation situation) { var pendingActionMap = new Dictionary<string, object>(); pendingActionMap[MAPPING_NAME] = mappingName; pendingActionMap[SOURCE_OBJECT] = sourceObject; pendingActionMap[RECON_ID] = reconId; pendingActionMap[ORIGINAL_SITUATION] = situation.ToString(); var pendingActionContext = new PendingActionContext(context, pendingActionMap, action.ToString()); return pendingActionContext; }
private static char[] ZzUnpackCMap(string packed) { char[] map = new char[_NUM]; int i = _NUM; int j = _NUM; while (i < _NUM) { int count = packed[i++]; char value = packed[i++]; do map[j++] = value; while (--count > 0); } return map; }
public void ShowDroidsafeTextMarkers(IEditorPart openedEditor, string className) { if (openedEditor != null && openedEditor is ITextEditor && fProcessedClasses != null) { ITextEditor editor = (ITextEditor)openedEditor; if (fProcessedClasses.Contains(className)) { if (fClassesNeedUpdate.Contains(className)) { ClassMarkerProcessor classProcessor = Get(className); classProcessor.UpdateTaintMarkers(editor); fClassesNeedUpdate.Remove(className); } } else { fProcessedClasses.Add(className); var classTaintedDataMap = fTaintedDataMap[className]; var classUnreachableMethodMap = fUnreachableSourceMethodMap[className]; if (classTaintedDataMap != null || classUnreachableMethodMap != null) { IEditorInput input = editor.GetEditorInput(); if (input is FileEditorInput) { ClassMarkerProcessor classProcessor = Get(className); classProcessor.ShowDroidsafeTextMarkers(editor); } } } } }
private static void ResolveNewExpression(NewExpression objSubjectExpression, HashSet<string> objTypesSet) { ClassReference objClassRef = objSubjectExpression.GetClassReference(); if (objClassRef == null || objClassRef.GetFQN() == null) { objTypesSet.Add(Types.strResolvingAbortedOnPsiLevel); return; } objTypesSet.Add(objClassRef.GetFQN()); }
private static List<Size> PickUpToThree(List<Size> sizes) { List<Size> result = new List<Size>(); Size largest = sizes[_NUM]; result.Add(largest); Size lastSize = largest; foreach (Size size in sizes) { double targetArea = Math.Pow(_NUM, result.Count) * Area(largest); if (Area(size) < targetArea) { if (!result.Contains(lastSize) && (targetArea - Area(lastSize) < Area(size) - targetArea)) { result.Add(lastSize); } else { result.Add(size); } } lastSize = size; if (result.Count == _NUM) { break; } } if (result.Count < _NUM && !result.Contains(lastSize)) { result.Add(lastSize); } return result; }
private bool VerifyLogRecord(string[] record, int macPos) { StringBuilder data = new StringBuilder(); for (int m = _NUM; m < record.Length - _NUM; m++) { data.Append(record[m]); } string curMAC = record[macPos]; bool verified = helper.VerifyMAC(data.ToString(), helper.ToByteArray(curMAC)); return verified; }
public static void CopyToClipboard(IDataObject dataObject) { ClipboardHelper.CopyToClipboard(dataObject); }
public static string FormatPercent(int downloadSize, int fileSize) { float num = (float)downloadSize / fileSize; float percent = (float)((int)(num * _NUM)) / _NUM; return percent.ToString() + _STR; }
private string AttrDef2AttrDesc(Attributes attrs) { StringBuilder attrDesc = new StringBuilder(_STR); Attribute attr = null; int count = _NUM; attr = attrs.Get(NUMERICOID_ID); if (attr != null) { attrDesc.Append(WriteNumericOID(attr)); count++; } else { throw new ConfigurationException(_STR + _STR); } attr = attrs.Get(NAME_ID); if (attr != null) { attrDesc.Append(WriteQDescrs(attr)); count++; } attr = attrs.Get(DESC_ID); if (attr != null) { attrDesc.Append(WriteQDString(attr)); count++; } attr = attrs.Get(OBSOLETE_ID); if (attr != null) { attrDesc.Append(WriteBoolean(attr)); count++; } attr = attrs.Get(SUP_ID); if (attr != null) { attrDesc.Append(WriteWOID(attr)); count++; } attr = attrs.Get(EQUALITY_ID); if (attr != null) { attrDesc.Append(WriteWOID(attr));
private void UpdateActions() { string selectedText = GetSelectedText(); if (selectedText == null) selectedText = _STR; bool stuffSelected = !selectedText.Equals(_STR); bool allSelected = selectedText.Equals(GetText()); UNDO_ACTION.Enabled = IsEnabled() && IsEditable() && IsUndoAvailable(); CUT_ACTION.Enabled = IsEnabled() && IsEditable() && stuffSelected; COPY_ACTION.Enabled = IsEnabled() && stuffSelected; PASTE_ACTION.Enabled = IsEnabled() && IsEditable() && IsPasteAvailable(); DELETE_ACTION.Enabled = IsEnabled() && stuffSelected; SELECT_ALL_ACTION.Enabled = IsEnabled() && !allSelected; }
using System; using System.Collections.Generic; public static class Utils { public static T MakeImmutable<T>(T element) { // Implementation for making an individual element immutable return element; // Placeholder; implement as needed } public static ICollection<T> MakeImmutable<T>(ICollection<T> mutableCollection) { ICollection<T> newCollection; try { var collectionType = mutableCollection.GetType(); newCollection = (ICollection<T>)Activator.CreateInstance(collectionType); } catch (Exception e) { throw new InvalidOperationException(e.Message, e); } foreach (var element in mutableCollection) { newCollection.Add(MakeImmutable(element)); } return new ReadOnlyCollection<T>(newCollection); } }
public synchronized void TrackHexImages(IHex hex, MediaTracker tracker) { Image baseImage = hexToImageCache[hex]; List<Image> superImages = hexToImageListCache[hex]; List<Image> orthoImages = orthoListCache[hex]; tracker.AddImage(baseImage, _NUM); if (superImages != null) { foreach (Image img in superImages) { tracker.AddImage(img, _NUM); } } if (orthoImages != null) { foreach (Image img in orthoImages) { tracker.AddImage(img, _NUM); } } }
public static DateTime ParseText(string dateStr) { try { return mSimpleTextFormat.Parse(dateStr); } catch (FormatException e) { Console.WriteLine(e); throw new InvalidOperationException(_STR); } }
public bool IsProcessed(Trace trace, Node node, Direction direction) { bool ret = _BOOL; if (processor.GetNodeType() == node.GetType() && processor.GetDirection() == direction) { if (uriFilter == null || uriFilter.Test(node.GetUri())) { ret = _BOOL; } } if (log.IsLoggable(LogLevel.Finest)) { log.Finest(_STR + trace + _STR + node + _STR + direction + _STR + ret); } return ret; }
public override void PowerOnSelfTest() { lock (this) { foreach (var ws in waveformSynthesizers) { ws.PowerOnSelfTest(); } } }
private QuadEdge[] FetchTriangleToVisit(QuadEdge edge, Stack<QuadEdge> edgeStack, bool includeFrame, HashSet<QuadEdge> visitedEdges) { QuadEdge curr = edge; int edgeCount = _NUM; bool isFrame = _BOOL; do { triEdges[edgeCount] = curr; if (IsFrameEdge(curr)) isFrame = _BOOL; QuadEdge sym = curr.Sym(); if (!visitedEdges.Contains(sym)) edgeStack.Push(sym); visitedEdges.Add(curr); edgeCount++; curr = curr.LNext(); } while (curr != edge); if (isFrame && !includeFrame) return null; return triEdges; }
public ICollection<CRL> EngineGenerateCRLs(Stream inStream) { CRL crl; List<CRL> crls = new List<CRL>(); while ((crl = EngineGenerateCRL(inStream)) != null) { crls.Add(crl); } return crls; }
public void DeleteEntityConfig(string realm, string federationId) { if (federationId == null) { return; } if (realm == null) { realm = _STR; } string[] objs = { federationId, realm }; try { var oldAttrs = configInst.GetConfiguration(realm, federationId); var oldValues = oldAttrs[ATTR_ENTITY_CONFIG] as HashSet<object>; if (oldValues == null || oldValues.Count == 0) { LogUtil.Error(Level.INFO, LogUtil.NO_ENTITY_DESCRIPTOR_DELETE_ENTITY_CONFIG, objs, null); throw new WSFederationMetaException(_STR, objs); } var idpConfig = GetIDPSSOConfig(realm, federationId); if (idpConfig != null) { RemoveFromCircleOfTrust(idpConfig, realm, federationId); } var spConfig = GetSPSSOConfig(realm, federationId); if (spConfig != null) { RemoveFromCircleOfTrust(spConfig, realm, federationId); } var attr = new HashSet<string>(); a
public static DataSourceViewsManager SharedInstance { get { if (sharedInstance == null) { lock (lockObject) { if (sharedInstance == null) { sharedInstance = new DataSourceViewsManager(); } } } return sharedInstance; } } private static DataSourceViewsManager sharedInstance; private static readonly object lockObject = new object();
public string Tag(string inner, string c1, string c2) { bool color = (attr & ATTR_COLOR) == ATTR_COLOR && ToastBootstrap.color; string s = _STR; if (color) s += _STR + c1 + _STR; s += inner; if (color) s += _STR + c2 + _STR; s += _STR; if (color) s += _STR + c1 + _STR; return color ? Pretty.Format(s) : s; }
private string LoadXmlDefinition() { var cache = CacheFactory.GetAnyInstance(); var stringWriter = new StringWriter(); using (var printWriter = new PrintWriter(stringWriter)) { CacheXmlGenerator.Generate(cache, printWriter, _BOOL, _BOOL, _BOOL); } return LoadXmlDefinition(stringWriter.ToString()); }
private long? GetId(HttpRequest request) { long? id = null; string pathInfo = request.Path.Value; if (pathInfo != null && pathInfo.Length > _NUM) { string idString = pathInfo.Substring(_NUM); id = long.Parse(idString); } return id; }
public void Uncompress() { data.Position = _NUM; using (var inflater = new DeflateStream(data.AsStream(), CompressionMode.Decompress)) { byte[] buffer = new byte[_NUM]; var tmp = new MemoryStream(_NUM); tmp.SetLength(0); // Initialize the tmp memory stream try { while (inflater.CanRead) { int decompressed = inflater.Read(buffer, 0, buffer.Length); if (decompressed <= _NUM) { break; } tmp.Write(buffer, _NUM, decompressed); } } catch (IOException e) { tmp.Dispose(); throw new InvalidOperationException(_STR, e); } finally { inflater.Close(); } data.Dispose(); data = tmp; data.Position = 0; PrepareIO(); } }
public void Poll(TcpSocketStatisticsHandler handler) { this.statisticsHandler = handler; try { fileLoader.Load(); var buffer = fileLoader.GetBuffer(); lineParser.Reset(); lineParser.HandleToken(buffer, buffer.Position, buffer.Limit); } finally { this.statisticsHandler = null; } monitoredSockets.PurgeEntriesOlderThan(updateCount); updateCount++; }
public override void Close() { lock (lockObject) { if (!IsClosed()) { inputStream.Close(); buffer = null; } } }
public int CompareTo(CharBuffer otherBuffer) { int compareRemaining = (Remaining() < otherBuffer.Remaining()) ? Remaining() : otherBuffer.Remaining(); int thisPos = Position; int otherPos = otherBuffer.Position; char thisByte, otherByte; while (compareRemaining > 0) { thisByte = Get(thisPos); otherByte = otherBuffer.Get(otherPos); if (thisByte != otherByte) { return thisByte < otherByte ? -1 : 1; } thisPos++; otherPos++; compareRemaining--; } return Remaining() - otherBuffer.Remaining(); }
public UrbanSimZoneCSVWriterV2(string matsim4opusTempDirectory, string matsimOutputDirectory) { this.matsim4opusTempDirectory = matsim4opusTempDirectory; this.matsimOutputDirectory = matsimOutputDirectory; try { log.Info(_STR); zoneWriter = new StreamWriter(Path.Combine(matsim4opusTempDirectory, FILE_NAME)); log.Info(_STR + Path.Combine(matsim4opusTempDirectory, FILE_NAME) + _STR); zoneWriter.WriteLine(string.Join(_STR, Labels.ZONE_ID, Labels.ACCESSIBILITY_BY_FREESPEED, Labels.ACCESSIBILITY_BY_CAR, Labels.ACCESSIBILITY_BY_BIKE, Labels.ACCESSIBILITY_BY_WALK, Labels.ACCESSIBILITY_BY_PT)); log.Info(_STR); } catch (Exception e) { Console.WriteLine(e); // Or use a logging framework to log the exception } }
public override void Agg(object newVal) { if (newVal is byte[]) { byte[] byteArray = (byte[])newVal; using (var buffer = new MemoryStream(byteArray)) using (var reader = new BinaryReader(buffer)) { while (buffer.Position < buffer.Length) { aggVal += reader.ReadInt64(); count += reader.ReadDouble(); firstTime = true; // Assuming _BOOL represents true } return; } } aggVal += (long)newVal; count++; firstTime = true; // Assuming _BOOL represents true }
private static PolicyNotification ExtractPolicyNotification(string xml) { PolicyNotification policyNotification = null; try { string notificationDataBlock = GetNotificationDataBlock(xml); if (notificationDataBlock != null) { var doc = XMLUtils.GetXMLDocument(new MemoryStream(Encoding.UTF8.GetBytes(notificationDataBlock))); var rootNode = XMLUtils.GetRootNode(doc, NODE_POLICY_SERVICE); if (rootNode != null) { var notificationNode = XMLUtils.GetChildNode(rootNode, NODE_POLICY_NOTIFICATION); if (notificationNode != null) { policyNotification = PolicyNotification.ParseXML(notificationNode); } else { Debug.Error(_STR + _STR + _STR); throw new PolicyEvaluationException(ResBundleUtils.rbName, _STR, null, null); } } else { Debug.Error(_STR + _STR); } } else { Debug.Error(_STR + _STR + _STR); } } catch (Exception xe) { Debug.Error(_STR, xe); throw new PolicyEvaluationException(ResBundleUtils.rbName, _STR, null, xe);
public synchronized void Flush() { CheckNotClosed(); TrimToSize(); journalWriter.Flush(); }
private object FindParcel(byte[] objectArray, string className) { try { Type classTmp = Type.GetType(className); var declaredConstructor = classTmp.GetConstructor(new Type[] { typeof(Parcel) }); var parcelInstance = WearBusTools.ByteToParcel(objectArray); return declaredConstructor.Invoke(new object[] { parcelInstance }); } catch (Exception e) { Debug.WriteLine($"{WearBusTools.BUSWEAR_TAG}: {e.Message}"); } return null; }
private static string DecodeFieldName(string xmlFieldName) { StringBuilder str = new StringBuilder(); int fieldNameLength = xmlFieldName.Length; char currentChar; for (int i = _NUM; i < fieldNameLength; i++) { currentChar = xmlFieldName[i]; if (currentChar == _STR) { str.Append(char.ToUpper(xmlFieldName[++i])); } else { str.Append(currentChar); } } return str.ToString(); }
public bool IsLoginSet() { return (username != null && (password != null && !username.Equals(_STR) && !password.Equals(_STR))) || oauth; }
public void AddContentItem(ContentItem contentItem) { if (contentItems == null) { contentItems = new List<ContentItem>(); } contentItems.Add(contentItem); }
public static string CanonicalizeClassName(string name) { string classname = name.Replace("_STR", "_STR"); classname = classname.Replace("_STR", "_STR"); if (classname.StartsWith("_STR")) classname = classname.Substring(_NUM); if (classname.EndsWith("_STR")) classname = classname.Substring(_NUM, classname.Length - _NUM); return classname; }
public static void Pause(int milliseconds) { if (milliseconds >= _NUM || logger.IsDebugEnabled()) { logger.Info(_STR, milliseconds); } long target = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() + milliseconds; try { while (true) { long msLeft = target - DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); if (msLeft <= _NUM) { break; } Thread.Sleep((int)msLeft); } } catch (ThreadInterruptedException e) { Assert.Fail(_STR, e); } }
public bool IsHighlightWithInvisibleEdge() { return highlightWithInvisibleEdge; }
private Configuration PrepareJobForCancelling() { PrepareFile(_STR, _NUM); executedTasks.Set(_NUM); cancelledTasks.Set(_NUM); failMapperId.Set(_NUM); splitsCount.Set(_NUM); Configuration cfg = new Configuration(); SetupFileSystems(cfg); Job job = Job.GetInstance(cfg); job.SetOutputKeyClass(typeof(Text)); job.SetOutputValueClass(typeof(IntWritable)); job.SetMapperClass(typeof(CancellingTestMapper)); job.SetNumReduceTasks(_NUM); job.SetInputFormatClass(typeof(InFormat)); FileInputFormat.SetInputPaths(job, new Path(_STR + GetTestGridName(_NUM) + _STR)); FileOutputFormat.SetOutputPath(job, new Path(_STR + GetTestGridName(_NUM) + _STR)); job.SetJarByClass(GetType()); return job.GetConfiguration(); }
public void RemoveChangingListener(OnWheelChangedListener listener) { changingListeners.Remove(listener); }
public static double[] Lsf2Lpc(double[] lsf) { MathUtils.QuickSort(lsf); int P = lsf.Length; int halfOrder = P / _NUM; double xf, xx; double[] a = new double[P / _NUM + _NUM]; double[] a1 = new double[P / _NUM + _NUM]; double[] a2 = new double[P / _NUM + _NUM]; double[] b = new double[P / _NUM + _NUM]; double[] b1 = new double[P / _NUM + _NUM]; double[] b2 = new double[P / _NUM + _NUM]; double[] p = new double[P / _NUM]; double[] q = new double[P / _NUM]; double[] oneMinusA = new double[P + _NUM]; oneMinusA[_NUM] = _NUM; if ((lsf[_NUM] <= _NUM) || (lsf[_NUM] >= _NUM)) { throw new ArgumentException(_STR + lsf[_NUM]); } for (int i = _NUM; i < P; i++) { if
protected void GenerateFields() { var iterator = mElements.GetEnumerator(); while (iterator.MoveNext()) { var element = iterator.Current; if (!element.used) { iterator.Remove(); continue; } var fields = mClass.GetFields(); bool duplicateField = false; foreach (var field in fields) { string name = field.Name; if (name != null && name.Equals(element.GetFieldName())) { duplicateField = true; break; } } if (duplicateField) { iterator.Remove(); continue; } mClass.Add(mFactory.CreateFieldFromText($"_{element.name}_{element.GetFieldName()}_", mClass)); } }
public bool IsFlying() { return flyThroughDialog != null; }
public synchronized void Init() { channelFactory = new NioClientSocketChannelFactory(Executors.NewCachedThreadPool(), Executors.NewCachedThreadPool()); datagramChannelFactory = new NioDatagramChannelFactory(Executors.NewCachedThreadPool()); timer = new HashedWheelTimer(); }
public static string RemovePattern(string source, string regex) { return ReplacePattern(source, regex, string.Empty); }
private void ConsumeNestedScroll(int dxUnconsumed, int dyUnconsumed, int dxFinalUnconsumed, int dyFinalUnconsumed) { if (mOverScrollEffect == OverScrollEffect.Bounce && dyFinalUnconsumed != _NUM) { mUnconsumedOverScrollOffset += -dyFinalUnconsumed; int maxOffset = mOverScrollOffsetLimit; if (mUnconsumedOverScrollOffset > _NUM) { mUnconsumedOverScrollOffset = Math.Min(maxOffset, mUnconsumedOverScrollOffset); } else if (mUnconsumedOverScrollOffset < _NUM) { mUnconsumedOverScrollOffset = Math.Max(-maxOffset, mUnconsumedOverScrollOffset); } SetScrollingOffset(GetUnconsumedScrollingOffset()); } PullEdgeEffects(dxUnconsumed, dyUnconsumed); }
private void RetrieveWaypoints(SearchQuery query, List<Waypoint> waypoints) { string queryLikeSelection2 = _STR + query.TextQuery + _STR; string[] waypointSelectionArgs = new string[] { queryLikeSelection2, queryLikeSelection2, queryLikeSelection2 }; Cursor cursor = null; try { cursor = providerUtils.GetWaypointCursor(WAYPOINT_SELECTION_QUERY, waypointSelectionArgs, WAYPOINT_SELECTION_ORDER, MAX_SCORED_WAYPOINTS); if (cursor != null) { waypoints.Capacity = cursor.Count; while (cursor.MoveNext()) { Waypoint waypoint = providerUtils.CreateWaypoint(cursor); if (LocationUtils.IsValidLocation(waypoint.GetLocation())) { waypoints.Add(waypoint); } } } } finally { cursor?.Close(); } }
void Release() { imageLoader.CancelPendingRequests(); loading = new bool[noxItems.Count]; }
public int Size() { var lockObject = this.lockObject; // Assuming lockObject is the equivalent of ReentrantLock in C# lockObject.Lock(); try { return count; } finally { lockObject.Unlock(); } }
public void Add(string name, long cnt) { if (_values == null) { _values = new List<Count>(_NUM); } _values.Add(new Count(this, name, cnt)); }
void CloseDialog() { // Exits the dialog of this room. }
private static void DecodeTextCompaction(int[] textCompactionData, int[] byteCompactionData, int length, StringBuilder result) { Mode subMode = Mode.ALPHA; Mode priorToShiftMode = Mode.ALPHA; int i = _NUM; while (i < length) { int subModeCh = textCompactionData[i]; char ch = (char)_NUM; switch (subMode) { case Mode.ALPHA: if (subModeCh < _NUM) { ch = (char)(_STR + subModeCh); } else { if (subModeCh == _NUM) { ch = _STR; } else if (subModeCh == LL) { subMode = Mode.LOWER; } else if (subModeCh == ML) { subMode = Mode.MIXED; } else if (subModeCh == PS) { priorToShiftMode = subMode; subMode = Mode.PUNCT_SHIFT; } else if (subModeCh == MODE_SHIFT_TO_BYTE_COMPACTION_MODE) { result.Append((char)byteCompactionData[i
public MediaConfig CreateChannelFileAttachment(string file, MediaConfig config) { config.AddCredentials(this); string xml = POSTFILE(this.url + _STR, file, config.Name, config.ToXML()); Element root = Parse(xml); if (root == null) { return null; } try { MediaConfig media = new MediaConfig(); media.ParseXML(root); return media; } catch (Exception exception) { this.exception = SDKException.ParseFailure(exception); throw this.exception; } }
public void AddParam(AstNode param) { if (param == null) throw new ArgumentNullException(nameof(param)); if (params == null) { params = new List<AstNode>(); } params.Add(param); param.SetParent(this); }
public class DeleteEvent : BaseEvent { private string mBlockId; private string mOldXml; private IReadOnlyList<string> mIds; public DeleteEvent(JSONObject json) : base(TYPE_DELETE, json) { if (string.IsNullOrEmpty(mBlockId)) { throw new JSONException(TYPENAME_DELETE + _STR + JSON_BLOCK_ID); } mOldXml = json.optString(JSON_OLD_VALUE); JSONArray ids = json.getJSONArray(JSON_IDS); int count = ids.length(); List<string> temp = new List<string>(count); for (int i = _NUM; i < count; ++i) { temp.Add(ids.getString(i)); } mIds = temp.AsReadOnly(); } }
public static bool IsFullCopyRestorable(Volume volume, DbClient dbClient) { bool result = false; string replicaState = volume.GetReplicaState(); if (IsVolumeFullCopy(volume, dbClient) && !string.IsNullOrEmpty(replicaState)) { ReplicationState state = ReplicationState.GetEnumValue(replicaState); if (state != null && state == ReplicationState.Synchronized) { result = true; } } return result; }
private static string[] ReadQDStrings(string inputString, int[] positions) { return ReadQDescrs(inputString, positions); }
private static bool IsBufferTooLarge(ByteBuffer buf) { return IsBufferTooLarge(buf.Capacity()); }
public static void ResetIndexBufferTime() { SAFE_QUERY_TIME.Set(_NUM); }
protected abstract AdminResponse CreateResponse(DistributionManager dm);
protected bool CheckExternalStorageAndNotify(string fileName) { if (fileName != null && fileName.StartsWith(_STR)) { AlertDownloadFailure(Resource.String.download_no_sdcard_dlg_title); return _BOOL; } string status = Environment.ExternalStorageState; if (!status.Equals(Environment.MediaMounted)) { int title; if (status.Equals(Environment.MediaShared)) { title = Resource.String.download_sdcard_busy_dlg_title; } else { title = Resource.String.download_no_sdcard_dlg_title; } AlertDownloadFailure(title); return _BOOL; } return _BOOL; }
public static string PluralNoun(int quantity, string noun) { string enoun = FullForm(noun); if (quantity == _NUM) { return Singular(enoun); } else { return Plural(noun); } }
public bool VerifyXmlSignature(XmlElement element, string certAlias) { return VerifyXmlSignature(element, DEF_ID_ATTRIBUTE, certAlias); }
public void Add(Video video) { videoList.Add(video); NotifyDataSetChanged(); }
private static bool IsInHorizontalTargetZone(float x, float y, float handleXStart, float handleXEnd, float handleY, float targetRadius) { if (x > handleXStart && x < handleXEnd && Math.Abs(y - handleY) <= targetRadius) { return true; } return false; }
public void ReadTransportSystems(int[] columnsIndices, StreamReader reader) { string line = reader.ReadLine(); while (line != null && line.Length > _NUM) { line = reader.ReadLine(); } }
private bool HasPrefix(byte[] nal) { return nal[_NUM] == _NUM && nal[_NUM] == _NUM && nal[_NUM] == _NUM && nal[_NUM] == _NUM ? _BOOL : _BOOL; }
private void UnshareMain() { int[] old = _mainHash; int len = _mainHash.Length; _mainHash = new int[len]; Array.Copy(old, _NUM, _mainHash, _NUM, len); _mainHashShared = _BOOL; }
public ComponentConfigBuilder AddItemInMultifield(string multifieldLabel, int index, string itemType, string itemLabel, string value) { string type = string.Format(_STR, index, itemType); string label = string.Format(_STR, multifieldLabel, itemLabel); config.Add(new ConfigurationEntry(currentTab, type, label, value)); return this; }
public int Size() { return names.Count; }
public static IMultiPoint[] RandomPoints(int n, int d, int scale) { IMultiPoint[] points = new IMultiPoint[n]; Random rGen = new Random(); for (int i = 0; i < n; i++) { StringBuilder sb = new StringBuilder(); for (int j = 0; j < d; j++) { sb.Append(rGen.NextDouble() * scale); if (j < d - 1) { sb.Append(","); } } points[i] = new Hyperpoint(sb.ToString()); } return points; }
private void ParseParameters(string parameters) { Log.Verbose(_STR, _STR + _STR + parameters); if (parameters != null) { int i; do { i = parameters.IndexOf(_STR); if (i < _NUM) { ParseParameter(parameters); } else { ParseParameter(parameters.Substring(_NUM, i)); parameters = parameters.Substring(i + _NUM); } } while (i >= _NUM); } }
public void AddHttpSessionToken(string site, string token) { if (!site.Contains(_STR)) { site += _STR; } HttpSessionTokensSet siteTokens = sessionTokens.GetValueOrDefault(site); if (siteTokens == null) { siteTokens = new HttpSessionTokensSet(); sessionTokens[site] = siteTokens; } log.Info(_STR + site + _STR + token); siteTokens.AddToken(token); UnmarkRemovedDefaultSessionToken(site, token); }
public GradleDistribution DeserializeFromString(string distributionString) { if (distributionString == null) { throw new ArgumentNullException(nameof(distributionString)); } string localInstallationPrefix = _STR; if (distributionString.StartsWith(localInstallationPrefix) && distributionString.EndsWith(_STR)) { string localInstallationDir = distributionString.Substring(localInstallationPrefix.Length, distributionString.Length - localInstallationPrefix.Length - _NUM); return GradleDistribution.ForLocalInstallation(new File(localInstallationDir)); } string remoteDistributionPrefix = _STR; if (distributionString.StartsWith(remoteDistributionPrefix) && distributionString.EndsWith(_STR)) { string remoteDistributionUri = distributionString.Substring(remoteDistributionPrefix.Length, distributionString.Length - remoteDistributionPrefix.Length - _NUM); return GradleDistribution.ForRemoteDistribution(CreateURI(remoteDistributionUri)); } string versionPrefix = _STR; if (distributionString.StartsWith(versionPrefix) && distributionString.EndsWith(_STR)) { string version = distributionString.Substring(versionPrefix.Length, distributionString.Length - versionPrefix.Length - _NUM); return GradleDistribution.ForVersion(version); } string wrapperString = _STR; i
public double MetersToPixels() { double screenCenterLat = screenTopLeft.latitude - screenSize.latitude / _NUM; double metersToLon = _NUM / (Util.LON_TO_METERS_AT_EQUATOR * Math.Cos(screenCenterLat / _NUM * Math.PI)); return screenSize.longitude / windowWidth * metersToLon; }
public bool SendViaDataSocket(byte[] bytes, int start, int len) { if (dataOutputStream == null) { Log.i(TAG, _STR); return _BOOL; } if (len == _NUM) { return _BOOL; } try { dataOutputStream.Write(bytes, start, len); } catch (IOException e) { Log.i(TAG, _STR); Log.i(TAG, e.ToString()); return _BOOL; } localDataSocket.ReportTraffic(len); return _BOOL; }
private void PushContext(BaseContext c) { contextStack.Push(c); }
public override void BookmarksOrHistoryPicker(ComboViews startView) { if (mTabControl.GetCurrentWebView() == null) { return; } if (IsInCustomActionMode()) { EndActionMode(); } var extras = new Bundle(); extras.PutBoolean(BrowserBookmarksPage.EXTRA_DISABLE_WINDOW, !mTabControl.CanCreateNewTab()); mUi.ShowComboView(startView, extras); }
public FST(string fileName, string encoding, bool verbose) { using (FileStream fs = new FileStream(fileName, FileMode.Open, FileAccess.Read)) { LoadHeaderless(fs, encoding, verbose); } }
public static double[] NormalizeZscore(double[] x) { double mn = Mean(x, _NUM); double sd = StandardDeviation(x, _NUM); for (int i = _NUM; i < x.Length; i++) { if (!double.IsNaN(x[i])) { x[i] = (x[i] - mn) / sd; } } return x; }
void AddLocation(string location) { if (fLocationList.Contains(location)) { return; } fLocationList.Add(location); fTableViewer.Refresh(); fTableViewer.SetChecked(location, _BOOL); fTableViewer.SetSelection(new StructuredSelection(location)); ValidateLocations(); }
public JavaFormatter(string lineDelimiter, int initialIndentLevel, bool useCodeFormatter, IJavaProject project) { fLineDelimiter = lineDelimiter; fUseCodeFormatter = useCodeFormatter; fInitialIndentLevel = initialIndentLevel; fProject = project; }
public string Encode(string pString, string charset) { if (pString == null) { return null; } try { return EncodeText(pString, charset); } catch (UnsupportedEncodingException e) { throw new EncoderException(e.Message); } }
private static void CheckPathNeed() { if (samplingInterval == -_NUM) { lastPreloadTime = ReadMorePaths(); } if (!double.IsNaN(lastPreloadTime) && SimClock.GetTime() >= lastPreloadTime - (samplingInterval * MIN_AHEAD_INTERVALS)) { for (int i = _NUM; i < nrofPreload && !double.IsNaN(lastPreloadTime); i++) { lastPreloadTime = ReadMorePaths(); } } }
public double Wide(Prior prior, Likelihood likelihood) { int nodeCount = tree.GetNodeCount(); NodeRef root = tree.GetRoot(); NodeRef i; int indexI; do { indexI = MathUtils.RandomInt(nodeCount); i = tree.GetNode(indexI); } while (root == i || (tree.GetParent(i) == root && tree.GetNodeHeight(i) > tree.GetNodeHeight(GetOtherChild(tree, tree.GetParent(i), i)))); List<int> secondNodeIndices = new List<int>(); List<double> probabilities = new List<double>(); NodeRef j, jP; NodeRef iP = tree.GetParent(i); double heightIP = tree.GetNodeHeight(iP); double heightI = tree.GetNodeHeight(i); double sum = _NUM; double backward = CalculateTreeLikelihood(prior, likelihood, tree); int offset = (int)-backward; backward = Math.Exp(backward + offset); for (int n = _NUM; n < nodeCount; n++) { j = tree.GetNode(n); if (j != root) { j
public bool IsInputColumnNameAllowed(string columnName) { if (columnName == null || columnName.Length == _NUM) return _BOOL; GetInputColumnNames(_BOOL); for (int i = _NUM; i < m_inputcolumnnames.Length; i++) { if (columnName.Equals(m_inputcolumnnames[i])) return _BOOL; } return _BOOL; }
public static int Rgb(string hex) { int color = (int)long.Parse(hex.Replace("#", ""), System.Globalization.NumberStyles.HexNumber); int r = (color >> 16) & 0xFF; int g = (color >> 8) & 0xFF; int b = color & 0xFF; return Color.Rgb(r, g, b); }
public override void AddPropertyChangeListener(string name, PropertyChangeListener pcl) { m_bcSupport.AddPropertyChangeListener(name, pcl); }
public void TestEmptyOrNullBlob() { try { using (var stmt = connection.PrepareStatement(_STR)) { stmt.SetInt(_NUM, _NUM); stmt.SetBytes(_NUM, new byte[_NUM]); int insertedCount = stmt.ExecuteUpdate(); Assert.IsTrue(insertedCount == _NUM, _STR); stmt.SetInt(_NUM, _NUM); stmt.SetNull(_NUM, SqlDbType.Binary); insertedCount = stmt.ExecuteUpdate(); Assert.IsTrue(insertedCount == _NUM, _STR); } using (var stmt = connection.PrepareStatement(_STR)) { stmt.SetInt(_NUM, _NUM); using (var rs = stmt.ExecuteQuery()) { Assert.IsTrue(rs.Next(), _STR); Assert.IsTrue(rs.GetBytes(_NUM).SequenceEqual(new byte[_NUM]), _STR); } stmt.SetInt(_NUM, _NUM); using (var rs = stmt.ExecuteQuery()) { Assert.IsTrue(rs.Next(), _STR); Assert.IsTrue(rs.GetObject(_NUM) == null, _STR); } } } catch (Exception ex) {
private void WriteAttribute(string namespaceUri, string attName, string attValue, System.Xml.XmlWriter xmlWriter) { if (namespaceUri.Equals(_STR)) { xmlWriter.WriteStartAttribute(attName); xmlWriter.WriteString(attValue); xmlWriter.WriteEndAttribute(); } else { RegisterPrefix(xmlWriter, namespaceUri); xmlWriter.WriteStartAttribute(attName, namespaceUri); xmlWriter.WriteString(attValue); xmlWriter.WriteEndAttribute(); } }
private readonly object _lock = new object(); private void RebuildJournal() { lock (_lock) { if (journalWriter != null) { journalWriter.Close(); } using (var writer = new StreamWriter(new FileStream(journalFileTmp, FileMode.Create), Encoding.ASCII)) { writer.Write(MAGIC); writer.Write(_STR); writer.Write(VERSION_1); writer.Write(_STR); writer.Write(appVersion.ToString()); writer.Write(_STR); writer.Write(valueCount.ToString()); writer.Write(_STR); writer.Write(_STR); foreach (var entry in lruEntries.Values) { if (entry.currentEditor != null) { writer.Write(DIRTY + _STR + entry.key + _STR); } else { writer.Write(CLEAN + _STR + entry.key + entry.GetLengths() + _STR); } } } if (journalFile.Exists) { RenameTo(journalFile, journalFileBackup, true); } RenameTo(journalFileTmp, journalFile, true); journalFileBackup.Delete(); journalWriter = new StreamWriter(
public void TestCase22() { byte[] bBytes = new byte[] { _NUM, _NUM, _NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM, (byte)-_NUM }; byte[] rBytes = new byte[] { _NUM, _NUM, _NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM, (byte)-_NUM }; int bSign = -_NUM; BigInteger aNumber = BigInteger.Zero; BigInteger bNumber = new BigInteger(bSign, bBytes); BigInteger result = aNumber.Subtract(bNumber); byte[] resBytes = result.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.IsTrue(resBytes[i] == rBytes[i]); } Assert.AreEqual(_NUM, result.Sign); }
using System; using System.Collections.Generic; using System.IO; using System.Runtime.Serialization.Formatters.Binary; public void Restore(string fileName) { using (FileStream fs = new FileStream(fileName, FileMode.Open)) { BinaryFormatter formatter = new BinaryFormatter(); locations = (Dictionary<V, Point>)formatter.Deserialize(fs); } InitializeLocations(); locked = _BOOL; FireStateChanged(); }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public void WaitForData() { if (this.initialized) { return; } WaitOnInitialization(this.initializationLatchAfterGetInitialImage); }
private void BlackmanHarris4sMin(int size) { int start = (windowFunction.Length - size) / _NUM; int stop = (windowFunction.Length + size) / _NUM; double scale = _NUM / (double)size / _NUM; for (int i = _NUM; start < stop; start++, i++) { windowFunction[i] = scale * (_NUM - _NUM * Math.Cos(twoPI * i / size) + _NUM * Math.Cos(_NUM * twoPI * i / size) - _NUM * Math.Cos(_NUM * twoPI * i / size)); } }
private byte[] CalculateCMSKeyChecksum(byte[] key) { byte[] result = new byte[_NUM]; sha1.Update(key, _NUM, key.Length); sha1.DoFinal(digest, _NUM); Array.Copy(digest, _NUM, result, _NUM, _NUM); return result; }
public int GetHashCode() { return _lowerNick.GetHashCode(); }
public bool IncrementReceived() { long diff = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - startTime; if (diff >= _NUM) { packetsPerSecond = intervalPackets; startTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); intervalPackets = _NUM; return _BOOL; } else { intervalPackets++; } this.receivedPackets++; return _BOOL; }
public Sentence ParseSentence(string text, ConversationContext ctx) { if (IsEmpty()) { return ConversationParser.Parse(text, ctx); } string txt = text.Trim(); var sentence = new SentenceImplementation(ctx, txt); txt = ConversationParser.DetectSentenceType(txt, sentence); if (typeMatching) { ReadTypeMatchExpressions(txt, ctx, sentence); } else if (exactMatching) { ReadSimpleExpressions(txt, ctx, sentence); } else if (similarMatching) { ReadSimpleExpressions(txt, ctx, sentence); } else if (jokerMatching) { ReadJokerExpressions(txt, ctx, sentence); } else if (caseInsensitive) { ReadSimpleExpressions(txt, ctx, sentence); } return sentence; }
public KafkaCluster UsingDirectory(FileInfo dataDir) { if (running) { throw new InvalidOperationException(_STR); } if (dataDir != null && dataDir.Exists && !dataDir.Attributes.HasFlag(FileAttributes.Directory) && !dataDir.CanWrite && !dataDir.CanRead) { throw new ArgumentException(_STR); } this.dataDir = dataDir; return this; }
private void Expand(int i) { if (count + i <= buf.Length) { return; } byte[] newbuf = mPool.GetBuf((count + i) * _NUM); Array.Copy(buf, _NUM, newbuf, _NUM, count); mPool.ReturnBuf(buf); buf = newbuf; }
void OnConsumeFinished(Purchase purchase, IabResult result) { // This method determines that with a derived key that takes a string that takes this and a consumption. }
protected bool CheckProsodicPosition(XmlElement currentRulePart, string prosodicPositionType) { var attNodes = currentRulePart.Attributes; for (int z = _NUM; z < attNodes.Count; z++) { var el = attNodes[z]; string currentAtt = el.Name; string currentVal = el.Value; if (currentAtt.Equals(_STR)) { if (!currentVal.StartsWith(_STR)) { if (!prosodicPositionType.Equals(currentVal)) return _BOOL; } else { currentVal = currentVal.Substring(_NUM); if (prosodicPositionType.Equals(currentVal)) return _BOOL; } } } return _BOOL; }
public static decimal? ParseBigDecimalForEntity(string bigDecimalString) { if (bigDecimalString == null) { return null; } bigDecimalString = bigDecimalString.Trim(); bigDecimalString = bigDecimalString.Replace("_STR", "_STR"); if (bigDecimalString.Length < _NUM) { return null; } return decimal.Parse(bigDecimalString); }
public static void RegisterOperators(string name, Stream operatorsXML, ClassLoader classLoader) { RegisterOperators(name, operatorsXML, classLoader, null); }
private void DoPermissionWorkBeforeAndroidM(Activity activity, string[] permissions, PermissionsResultAction action) { foreach (string perm in permissions) { if (action != null) { if (!mPermissions.Contains(perm)) { action.OnResult(perm, Permissions.NOT_FOUND); } else if (ActivityCompat.CheckSelfPermission(activity, perm) != Permission.Granted) { action.OnResult(perm, Permissions.DENIED); } else { action.OnResult(perm, Permissions.GRANTED); } } } }
public void DeleteSubGroupContainers(HashSet<string> groupContainers) { foreach (var groupContainerDN in groupContainers) { AMGroupContainer groupContainer = new AMGroupContainerImpl(token, groupContainerDN); groupContainer.Delete(); } }
public GlowTask(Plugin owner, Action task, bool sync, long delay, long period) { base(task, null); taskId = nextTaskId++.GetValueOrDefault(); // Assuming nextTaskId is managed appropriately description = task.ToString(); this.owner = owner; this.delay = delay; this.period = period; counter = _NUM; this.sync = sync; }
public static void Init(string[] args) { try { Compiler.InitCompiler(args); if (VM.BuildForAdaptiveSystem && VM.BuildWithBaseBootImageCompiler) { OptCompiler.InitCompiler(args); } } catch (Exception e) { while (e != null) { Console.WriteLine(e); e = e.InnerException; } } }
public static bool OpenDev() { // Assuming the implementation checks the JVM status return false; // Replace with actual condition checking the JVM status }
int SendNextByte() { int result = _NUM; try { long tDiff = interByteTime - ((DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond) - lastRxTime) * _NUM; if (tDiff > _NUM) { log.Debug(_STR + tDiff + _STR); Thread.Sleep((int)(tDiff / _NUM), (int)(tDiff % _NUM)); } } catch (ThreadInterruptedException ex) { log.Error(_STR + ex.ToString()); } if (currTxCharPos >= currTxTgm.Length) { result = DequeueTelegram(); } if (result == _NUM) { WriteChar(currTxTgm[currTxCharPos++], _BOOL); if (currTxCharPos >= currTxTgm.Length) { SetProtStat(ProtStatus.RECEIVING); } } return result; }
using System; using System.IO; using System.Runtime.Serialization; using System.Runtime.Serialization.Formatters.Binary; using System.Convert; public static string Encode(Serializable s) { using (var memoryStream = new MemoryStream()) { IFormatter formatter = new BinaryFormatter(); try { formatter.Serialize(memoryStream, s); byte[] bytes = memoryStream.ToArray(); return Convert.ToBase64String(bytes); } catch (IOException e) { throw new Exception(e.Message, e); } } }
public static Dictionary<string, object> CreateImage(DispatchContext dctx, Dictionary<string, object> context) { Dictionary<string, object> result = CreateImageMethod(dctx, context); return result; }
public void AddProfiles(params IProfile[] profiles) { if (mAccountHeaderBuilder.mProfiles == null) { mAccountHeaderBuilder.mProfiles = new List<IProfile>(); } mAccountHeaderBuilder.mProfiles.AddRange(IdDistributor.CheckIds(profiles)); mAccountHeaderBuilder.UpdateHeaderAndList(); }
private static bool IsIdentifierName(string k) { int n = k.Length; if (n == 0) { return false; } if (!char.IsLetter(k[0]) && k[0] != '_') { return false; } for (int i = 1; i < n; ++i) { if (!char.IsLetterOrDigit(k[i]) && k[i] != '_') { return false; } } return true; }
static bool LessThanUnsignedLong(long x1, long x2) { return (x1 + long.MinValue) < (x2 + long.MinValue); }
private void MoveSingleNode(object source, Point newPoint) { DisplayNode node = (DisplayNode)source; int deltaX = newPoint.X - clickPoint.X; int deltaY = newPoint.Y - clickPoint.Y; int newX = node.GetLocation().X + deltaX; int newY = node.GetLocation().Y + deltaY; node.SetLocation(newX, newY); }
using System.Collections.Generic; public static List<T> ToList<T>(T obj1, T obj2, T obj3) { List<T> list = new List<T>(); list.Add(obj1); list.Add(obj2); list.Add(obj3); return list; }
public void AddMacroRecord(MacroRecord record) { if (record != null) { macroRecords.Add(record); } }
protected KafkaSpoutWrapper CreateKafkaSpout( IDictionary<string, object> conf, TopologyContext context, SpoutOutputCollector collector, string topic, string schemeClsName, SpoutSpec spoutSpec, IDictionary<string, StreamDefinition> sds) { string kafkaBrokerZkQuorum = config.GetString(_STR); BrokerHosts hosts; if (config.HasPath(_STR)) { hosts = new ZkHosts(kafkaBrokerZkQuorum, config.GetString(_STR)); } else { hosts = new ZkHosts(kafkaBrokerZkQuorum); } string transactionZkRoot = DEFAULT_STORM_KAFKA_TRANSACTION_ZK_ROOT; if (config.HasPath(_STR)) { transactionZkRoot = config.GetString(_STR); } string zkStateTransactionRelPath = DEFAULT_STORM_KAFKA_TRANSACTION_ZK_RELATIVE_PATH; if (config.HasPath(_STR)) { zkStateTransactionRelPath = config.GetString(_STR); } SpoutConfig spoutConfig = new SpoutConfig( hosts, topic, transactionZkRoot,
public Builder AddEmail(Email email) { emails.Add(email); return this; }
public static HashProvider Best(HashParameters parameters) { return Best(parameters, new HashSet<HashSupport> { HashSupport.STATEFUL }); }
public byte[] ReadRawBytes(int size) { if (size < _NUM) { throw new InvalidProtocolBufferNanoException("Negative size"); } if (bufferPos + size > currentLimit) { SkipRawBytes(currentLimit - bufferPos); throw new InvalidProtocolBufferNanoException("Truncated message"); } if (size <= bufferSize - bufferPos) { byte[] bytes = new byte[size]; Array.Copy(buffer, bufferPos, bytes, 0, size); bufferPos += size; return bytes; } else { throw new InvalidProtocolBufferNanoException("Truncated message"); } }
static bool PairSum(int[] ar, int x) { Array.Sort(ar); int len = ar.Length; int i = 0, j = len - 1; while (i < j) { if (ar[i] + ar[j] == x) { return true; } else if (ar[i] + ar[j] < x) { i++; } else { j--; } } return false; }
public synchronized void LoadFromFile() { entries.Clear(); var file = Path.Combine(fileName); try { using (var reader = new StreamReader(file, Encoding.UTF8)) { string line; while ((line = reader.ReadLine()) != null) { AddressbookEntry parsedEntry = ParseLine(line); if (parsedEntry != null) { entries.Add(parsedEntry.GetName(), parsedEntry); } } } } catch (IOException ex) { LOGGER.Warning(_STR + ex.Message); } LOGGER.Info(_STR + entries.Count + _STR + fileName); ScanCategories(); }
public double LocalScore(int i, params int[] parents) { foreach (int p in parents) { if (forbidden.Contains(p)) return double.NaN; } double residualVariance = covariances[i, i]; int n = GetSampleSize(); int p = parents.Length; Matrix covxx = GetSelection1(covariances, parents); try { Matrix covxxInv = covxx.Inverse(); Matrix covxy = GetSelection2(covariances, parents, i); Matrix b = covxxInv.Times(covxy); double dot = _NUM; for (int j = _NUM; j < covxy.RowDimension; j++) { for (int k = _NUM; k < covxy.ColumnDimension; k++) { dot += covxy[j, k] * b[j, k]; } } residualVariance -= dot; if (residualVariance <= _NUM) { if (IsVerbose()) { Console.WriteLine(_STR + (residualVariance / covariances[i, i])); } return double.NaN; } double
public bool Remove(int position) { var removeTransaction = new RemoveTransaction(this, position); bool success = removeTransaction.Perform(); mTransactions.Enqueue(removeTransaction); return success; }
private void EncodeTypes(List<Type> types, Dictionary<string, object> map, string key, Declaration from) { if (types == null || types.Count == 0) return; List<Dictionary<string, object>> sats = new List<Dictionary<string, object>>(types.Count); foreach (Type st in types) { sats.Add(TypeMap(st, from)); } map[key] = sats; }
public static void ClearAssertionInformation() { _AssertInfos.Clear(); _AssertOccured = _BOOL; }
public void Build(string code, string customStatus) { try { if (customStatus != null) { result[resources.GetString(R.string.intent_extra_status)] = customStatus; } else { result[resources.GetString(R.string.intent_extra_status)] = resources.GetString(R.string.shared_pref_default_status); } result[resources.GetString(R.string.intent_extra_code)] = code; operationListResult.Put(result); } catch (JSONException e) { Log.Error(TAG, _STR + e.ToString()); } }
public static Operator GenerateBranchPlan(AkibanInformationSchema ais, Table table) { var indexScan = GenerateIndexScan(ais, table); var schema = SchemaCache.GlobalSchema(ais); PrimaryKey pkey = table.GetPrimaryKeyIncludingInternal(); IndexRowType indexType = schema.IndexRowType(pkey.GetIndex()); return GenerateBranchPlan(table, indexScan, indexType); }
protected void AddToMaintenanceQueue(NodePortTuple npt) { if (maintenanceQueue.Contains(npt) == _BOOL) { maintenanceQueue.Add(npt); } }
private bool LinkFirst(Node<E> node) { if (count >= capacity) return false; Node<E> f = first; node.Next = f; first = node; if (last == null) last = node; else f.Prev = node; ++count; notEmpty.Signal(); return true; }
public long StartStack() { return long.Parse(fields[_NUM]); }
public static void CopyRealmPrivilegesFromParent(SSOToken token, OrganizationConfigManager parent, OrganizationConfigManager child) { if (debug.MessageEnabled()) { debug.Message(_STR + _STR + parent.GetOrganizationName() + _STR + child.GetOrganizationName()); } DelegationManager pdm = new DelegationManager(token, parent.GetOrganizationName()); DelegationManager cdm = new DelegationManager(token, child.GetOrganizationName()); string childOrgName = DNMapper.OrgNameToDN(child.GetOrganizationName()); var pdps = pdm.GetPrivileges(); if (pdps == null || !pdps.Any()) { if (debug.MessageEnabled()) { debug.Message(_STR + _STR); } return; } foreach (var dp in pdps) { var subjects = dp.GetSubjects(); if (subjects == null || !subjects.Any()) { if (debug.MessageEnabled()) { debug.Message(_STR + _STR + dp); } continue; } var newSubjects = new HashSet<string>(); foreach (var sName in subjects) { try {
public bool Match(MimeType other) { if (this == other) return _BOOL; if (type != null && other.type != null && !type.Equals(other.type)) return _BOOL; if (subtype != null && other.subtype != null && !subtype.Equals(other.subtype)) return _BOOL; return _BOOL; }
public override bool IsArmed() { return other.IsArmed(); }
public EncoderTestSuiteBuilder Valid(int min, int max) { _valid.Set(min, max + _NUM); _invalid.Clear(min, max + _NUM); _encoded.Clear(min, max + _NUM); return this; }
protected List<VolumeDescriptor> CreateChangeVirtualPoolDescriptors(StorageSystem vplexSystem, Volume volume, VirtualPool newVpool, string taskId, List<Recommendation> recommendations, VirtualPoolCapabilityValuesWrapper capabilities, ControllerOperationValuesWrapper operationsWrapper) { URI volumeVarrayURI = volume.GetVirtualArray(); VirtualArray volumeVarray = _dbClient.QueryObject<VirtualArray>(volumeVarrayURI); s_logger.Info(_STR, volumeVarrayURI); URI volumeVpoolURI = volume.GetVirtualPool(); VirtualPool currentVpool = _dbClient.QueryObject<VirtualPool>(volumeVpoolURI); List<VolumeDescriptor> descriptors = new List<VolumeDescriptor>(); VolumeDescriptor vplexVirtualVolumeDesc = new VolumeDescriptor(VolumeDescriptor.Type.VPLEX_VIRT_VOLUME, volume.GetStorageController(), volume.GetId(), volume.GetPool(), null); Dictionary<string, object> volumeParams = new Dictionary<string, object>(); volumeParams[VolumeDescriptor.PARAM_VPOOL_CHANGE_EXISTING_VOLUME_ID] = volume.GetId(); volumeParams[VolumeDescriptor.PARAM_VPOOL_CHANGE_NEW_VPOOL_ID] = newVpool.GetId(); volumeParams[VolumeDescriptor.PARAM_VPOOL_CHANGE_OL
public static bool IsJavaScriptEnabled(HttpRequest request) { var session = request.HttpContext.Session; var javaScriptEnabled = session.GetBool("_STR"); if (javaScriptEnabled != null) { return javaScriptEnabled.Value; } return _BOOL; }
public override bool Equals(object obj) { if (this == obj) return _BOOL; if (obj is ECFieldFp ecFieldFp) { return p.Equals(ecFieldFp.p); } return _BOOL; }
public string Name() { return theName; }
public static void CloseQuietly(System.IDisposable disposable) { if (disposable != null) { try { disposable.Dispose(); } catch (System.Exception) { // Ignored } } }
private static string ChecksumMD5(string data) { using (var md5 = System.Security.Cryptography.MD5.Create()) { byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(data); byte[] hashBytes = md5.ComputeHash(inputBytes); return BitConverter.ToString(hashBytes).Replace("-", "").ToLowerInvariant(); } }
public static bool ValidSkinSpecFile(string fileName) { var file = new FileInfo(Path.Combine(Configuration.SkinsDir(), fileName)); if (!file.Exists || !file.Attributes.HasFlag(FileAttributes.Directory) || !file.Attributes.HasFlag(FileAttributes.Normal)) { return _BOOL; } var dbf = DocumentBuilderFactory.NewInstance(); try { var builder = dbf.NewDocumentBuilder(); var doc = builder.Parse(file.FullName); var listOfComponents = doc.GetElementsByTagName(UI_ELEMENT); if (listOfComponents.Length > _NUM) { return _BOOL; } else { return _BOOL; } } catch (Exception e) { return _BOOL; } }
private void GenerateLegalTimesTree() { int k0 = KeyEvent.KEYCODE_0; int k1 = KeyEvent.KEYCODE_1; int k2 = KeyEvent.KEYCODE_2; int k3 = KeyEvent.KEYCODE_3; int k4 = KeyEvent.KEYCODE_4; int k5 = KeyEvent.KEYCODE_5; int k6 = KeyEvent.KEYCODE_6; int k7 = KeyEvent.KEYCODE_7; int k8 = KeyEvent.KEYCODE_8; int k9 = KeyEvent.KEYCODE_9; mLegalTimesTree = new Node(); if (mIs24HourMode) { Node minuteFirstDigit = new Node(k0, k1, k2, k3, k4, k5); Node minuteSecondDigit = new Node(k0, k1, k2, k3, k4, k5, k6, k7, k8, k9); minuteFirstDigit.AddChild(minuteSecondDigit); Node firstDigit = new Node(k0, k1); mLegalTimesTree.AddChild(firstDigit); Node secondDi
public StrBuilder Insert(int index, object obj) { if (obj == null) { return Insert(index, nullText); } return Insert(index, obj.ToString()); }
public override void HandleMouseMoved(ChartCanvas canvas, MouseEvent e) { if (!canvas.IsTooltipEnabled()) { return; } string text = GetTooltipText(canvas, e.X, e.Y); canvas.SetTooltip(text, e.ScreenX, e.ScreenY); }
public int Size() { lock (this.lock) { return count; } }
private bool LoadUnpackedUmd(string filename) { if (doUmdBuffering) { return _BOOL; } FileInfo file = new FileInfo(filename); if (file.Exists) { using (RandomAccessFile raf = new RandomAccessFile(file.FullName, _STR)) { FileChannel roChannel = raf.GetChannel(); ByteBuffer readbuffer = roChannel.Map(FileChannel.MapMode.READ_ONLY, _NUM, (int)roChannel.Size()); emulator.Load(_STR, readbuffer); log.Info(_STR); return _BOOL; } } return _BOOL; }
public bool DisableVMAX3Compression(Uri blockObjectUri, StorageSystem storageSystem) { VirtualPool virtualPool = null; StoragePool storagePool = null; Volume volume = null; if (URIUtil.IsType(blockObjectUri, typeof(Volume))) { volume = _dbClient.QueryObject<Volume>(blockObjectUri); } else if (URIUtil.IsType(blockObjectUri, typeof(BlockSnapshot))) { BlockSnapshot snapshot = _dbClient.QueryObject<BlockSnapshot>(blockObjectUri); volume = _dbClient.QueryObject<Volume>(snapshot.GetParent()); } else if (URIUtil.IsType(blockObjectUri, typeof(BlockMirror))) { BlockMirror mirror = _dbClient.QueryObject<BlockMirror>(blockObjectUri); virtualPool = _dbClient.QueryObject<VirtualPool>(mirror.GetVirtualPool()); storagePool = _dbClient.QueryObject<StoragePool>(mirror.GetPool()); } if (volume != null) { virtualPool = _dbClient.QueryObject<VirtualPool>(volume.GetVirtualPool()); storagePool = _dbClient.QueryObject<StoragePool>(volume.GetPool()); }
public static LatLon RhumbEndPosition(LatLon p, double rhumbAzimuthRadians, double pathLengthRadians) { if (p == null) { throw new ArgumentException(_STR); } return RhumbEndPosition(p, Angle.FromRadians(rhumbAzimuthRadians), Angle.FromRadians(pathLengthRadians)); }
private static int IndexOf(object[] array, object elt) { return IndexOf(array, array.Length, elt); }
public Size MaximumLayoutSize(Container target) { return new Size(int.MaxValue, int.MaxValue); }
public static string ReadStream(Stream input) { using (var reader = new StreamReader(input)) { var sb = new StringBuilder(); string line; while ((line = reader.ReadLine()) != null) { sb.Append(line + _STR); } return sb.ToString(); } }
public void Update(long n) { uncounted.AddAndGet(n); }
private void LogExpiration(Entry e) { if (e.RenewalsDone()) { logger.Log(Level.Fine, _STR, e.Lease); } else { logger.Log(Level.Failed, _STR, e.Lease); } }
void RemoveRipple(Ripple ripple) { Ripple[] ripples = mExitingRipples; int count = mExitingRipplesCount; int index = GetRippleIndex(ripple); if (index >= _NUM) { Array.Copy(ripples, index + _NUM, ripples, index, count - (index + _NUM)); ripples[count - _NUM] = null; mExitingRipplesCount--; InvalidateSelf(); } }
protected void WriteS(ByteBuffer buf, string text) { if (text == null) { buf.PutChar(_STR); } else { int len = text.Length; for (int i = _NUM; i < len; i++) { buf.PutChar(text[i]); } buf.PutChar(_STR); } }
public override void OnDrawEye(Eye eye) { GLES20.glClear(GLES20.GL_COLOR_BUFFER_BIT | GLES20.GL_DEPTH_BUFFER_BIT); Engine.CheckGLError(_STR); if (!prefOrientationProviderString.Equals(_STR)) { if (firstOnDrawEye > _NUM) { firstOnDrawEye--; float[] m = new float[_NUM]; Matrix.InvertM(m, _NUM, mHeadViewSDK, _NUM); Matrix.MultiplyMM(m, _NUM, eye.GetEyeView(), _NUM, m, _NUM); if (eye.GetType() == Eye.Type.RIGHT) { mEyeRightView = m; } else if (eye.GetType() == Eye.Type.LEFT) { mEyeLeftView = m; } return; } float[] m = new float[_NUM]; if (eye.GetType() == Eye.Type.RIGHT) { Matrix.MultiplyMM(m, _NUM, mHeadViewUse, _NUM, mEyeRightView, _NUM); } else { Matrix.MultiplyMM(m, _NUM, mHeadViewUse, _NUM
protected SourceRecords ConsumeRecordsByTopic(int numRecords) { SourceRecords records = new SourceRecords(); ConsumeRecords(numRecords, null); return records; }
public override bool Equals(object obj) { if (this == obj) { return true; } if (!(obj is PrototypeSize size)) { return false; } return prototype.Equals(size.prototype); }
private static int CompareVersion(string versionStr1, string versionStr2) { if (versionStr1 == null) { throw new MLContextException(_STR); } if (versionStr2 == null) { throw new MLContextException(_STR); } using (var scanner1 = new System.IO.StringReader(versionStr1)) using (var scanner2 = new System.IO.StringReader(versionStr2)) { char[] delimiter = new char[] { '.' }; string[] parts1 = versionStr1.Split(delimiter); string[] parts2 = versionStr2.Split(delimiter); int length = Math.Max(parts1.Length, parts2.Length); for (int i = 0; i < length; i++) { int version1 = i < parts1.Length ? int.Parse(parts1[i]) : 0; int version2 = i < parts2.Length ? int.Parse(parts2[i]) : 0; if (version1 < version2) { return -_NUM; } else if (version1 > version2) { return _NUM; } } return 0; // Assu
public static bool IsValidVector(Vector2 vector) { if (vector == null) { return false; } if (float.IsNaN(vector.X) || float.IsNaN(vector.Y)) { return false; } if (float.IsInfinity(vector.X) || float.IsInfinity(vector.Y)) { return false; } return vector.X > 0 && vector.Y > 0; }
public bool IsObsessional() { return typeString.Contains(SUFFIX_OBSESSIONAL); }
using System; public void ChangeLocoSpeed(DccThrottle throttle, Block block, float speed) { if (block == referenced && speed == desiredSpeedStep) { return; } float blockLength = block.GetLengthMm(); if (block == referenced) { distanceRemaining -= GetDistanceTravelled(throttle.GetIsForward(), throttle.GetSpeedSetting(), (float)(DateTime.Now.Ticks - lastTimeTimerStarted) / _NUM); blockLength = distanceRemaining; log.Debug(_STR); } else { referenced = block; } ChangeLocoSpeed(throttle, blockLength, speed); }
public bool Remove(object targetChild) { return Remove(targetChild, true); }
private void NotifyClassObservers(ClassDescriptor classDescriptor) { foreach (IClassObserver observer in classObserverList) { observer.ObserveClass(classDescriptor); } }
public void Dup2() { mv.VisitInsn(Opcodes.DUP2); }
static bool IsAppXml(string mime) { return mime != null && (mime.Equals(_STR) || mime.Equals(_STR) || mime.Equals(_STR) || (mime.StartsWith(_STR) && mime.EndsWith(_STR))); }
public static NativePage CreateNativePageForUrl(string url, NativePage candidatePage, Tab tab, TabModelSelector tabModelSelector, Activity activity) { return CreateNativePageForUrl(url, candidatePage, tab, tabModelSelector, activity, tab.IsIncognito()); }
protected void ThrowParseException(ParseException e) { if (locator != null) { string elementLocation = string.Empty; if (curHandler != null) { elementLocation += curHandler.qName; } string location = $"Line: {locator.LineNumber}, Column: {locator.ColumnNumber} {elementLocation}"; LogUtils.LogException(logger, LogLevel.Fine, location, e); throw new ParseException(location + e.Message, e); } else { LogUtils.LogException(logger, LogLevel.Fine, null, e); throw e; } }
public CustomEditor() { SetLayout(new BorderLayout()); Add(m_Label, BorderLayout.Center); m_DeleteBut.Click += m_InnerActionListener; m_EditBut.Click += m_InnerActionListener; m_UpBut.Click += m_InnerActionListener; m_DownBut.Click += m_InnerActionListener; m_AddBut.Click += m_InnerActionListener; m_ElementList.SelectedIndexChanged += m_InnerSelectionListener; m_ElementList.MouseClick += m_InnerMouseListener; m_AddBut.ToolTipText = _STR; m_DeleteBut.ToolTipText = _STR; m_EditBut.ToolTipText = _STR; m_UpBut.ToolTipText = _STR; m_DownBut.ToolTipText = _STR; }
public MemoidOne(Func<Input, Output> fn, Func<Input, Input, bool> equality) { fn_ = fn ?? throw new ArgumentNullException(nameof(fn)); equality_ = equality ?? throw new ArgumentNullException(nameof(equality)); }
public static EPType SingleValue(Type singleValueType) { if (singleValueType != null && singleValueType.IsArray) { return new ClassMultiValuedEPType(singleValueType, singleValueType.GetElementType()); } return new ClassEPType(singleValueType); }
private static Type ConvertFieldType(string fieldType) { if (string.IsNullOrEmpty(fieldType) || !fieldTypeMap.ContainsKey(fieldType)) { return null; } return fieldTypeMap[fieldType]; }
void AddXMLElementAfterTokenIndex(int lastTokenIndex, XMLElement element, bool addAfterNewLine) { AddXMLElementAfterTokenIndex(lastTokenIndex, element, addAfterNewLine, _BOOL); }
public static Dictionary<string, object> FindContentParents(DispatchContext dctx, Dictionary<string, object> context) { var results = new Dictionary<string, object>(); var parentList = new List<object>(); results[_STR] = parentList; var dispatcher = dctx.GetDispatcher(); string contentId = (string)context[_STR]; string contentAssocTypeId = (string)context[_STR]; string direction = (string)context[_STR]; if (string.IsNullOrEmpty(direction)) { direction = _STR; } var traversMap = new Dictionary<string, object> { [_STR] = contentId, [_STR] = direction, [_STR] = contentAssocTypeId }; try { var thisResults = dispatcher.RunSync(_STR, traversMap); string errorMsg = ServiceUtil.GetErrorMessage(thisResults); if (!string.IsNullOrEmpty(errorMsg)) { Debug.LogError(_STR + errorMsg, module); return ServiceUtil.ReturnError(errorMsg); } var nodeMap = UtilGenerics.CheckMap(thisResults[_STR]); WalkParentTree(nodeMap, parentList);
public static bool ArrayEquals(object x, object y, double tolf, double told) { if (x == null && y == null) { return true; } if (x == null || y == null) { return false; } Type xType = x.GetType(); Type yType = y.GetType(); if (xType != yType) { return false; } if (!xType.IsArray) { return x.Equals(y); } else { if (xType == typeof(int[])) { return StructuralComparisons.StructuralEqualityComparer.Equals((int[])x, (int[])y); } else if (xType == typeof(double[])) { if (told == 0) { return StructuralComparisons.StructuralEqualityComparer.Equals((double[])x, (double[])y); } else { return DoubleArrayEquals((double[])x, (double[])y, told); } } else if (xType == typeof(long[])) { return StructuralComparisons.StructuralEqualityComparer.Equals((long[]
public Dictionary(Directory tempDir, string tempFileNamePrefix, Stream affix, List<Stream> dictionaries, bool ignoreCase) { this.ignoreCase = ignoreCase; this.needsInputCleaning = ignoreCase; this.needsOutputCleaning = true; // Assuming _BOOL is true flagLookup.Add(new BytesRef()); string tempPath = Path.GetTempPath(); // Assuming tempPath is defined elsewhere string tempFileName = Path.Combine(tempPath, $"{Guid.NewGuid()}_tempFile"); // Generate temp file name using (var outStream = new BufferedStream(File.Create(tempFileName))) { using (affix) { byte[] buffer = new byte[1024]; // Assuming _NUM = 32 int len; while ((len = affix.Read(buffer, 0, buffer.Length)) > 0) { outStream.Write(buffer, 0, len); } } outStream.Flush(); } Stream aff1 = null, aff2 = null; bool success = true; // Assuming _BOOL is true try { aff1 = new BufferedStream(File.OpenRead(tempF
public void CollapseBuilding(Building bldg) { buildings.Remove(bldg); var bldgCoords = bldg.GetCoords(); foreach (var coords in bldgCoords) { CollapseBuilding(coords); } }
[RpcMethod] public void DetachISO(string vmId, bool isDeleteFile, AsyncMethodCallback<Host.AsyncClient.DetachIsoCall> handler) { EnsureClient(); var detachISORequest = new DetachISORequest(vmId) { DeleteFile = isDeleteFile }; clientProxy.SetTimeout(DETACH_ISO_TIMEOUT_MS); logger.Info(_STR, vmId, GetHostIp(), detachISORequest); try { clientProxy.DetachIso(detachISORequest, handler); } catch (TException e) { throw new RpcException(e.Message); } }
private string ReadNfcErrorMsg(ByteBuffer reply) { int errorType = reply.GetInt(); int errorCode = reply.GetInt(); int msgLen = reply.GetInt(); if (msgLen == _NUM) { return _STR; } ByteBuffer msgBuffer = ByteBuffer.Allocate(msgLen); ReadFully(msgBuffer); string errorMsg = System.Text.Encoding.ASCII.GetString(msgBuffer.Array, _NUM, msgLen - _NUM); return string.Format(_STR, errorType, errorCode, errorMsg); }
private void Show(bool show) { if (show) { if (mXFade != null) { mXFade.Cancel(); } mState = STATE_PIE; mCurrentItem = null; PieItem root = GetRoot(); foreach (PieItem openItem in mOpen) { if (openItem.HasItems()) { foreach (PieItem item in openItem.GetItems()) { item.SetSelected(_BOOL); } } } mLabel.SetText(_STR); mOpen.Clear(); mOpen.Add(root); LayoutPie(); FadeIn(); } else { mState = STATE_IDLE; mTapMode = _BOOL; if (mXFade != null) { mXFade.Cancel(); } if (mLabel != null) { mLabel.SetText(_STR); } } SetVisible(show); mHandler.SendEmptyMessage(show ? MSG_OPEN : MSG_CLOSE); }
private readonly object _lock = new object(); private void PersistProfileAndNotifyChange(AuthnProvider modifiedProvider, bool newObject) { lock (_lock) { modifiedProvider.SetLastModified(DateTime.UtcNow.Ticks); if (newObject) { _dbClient.CreateObject(modifiedProvider); } else { _dbClient.PersistObject(modifiedProvider); } NotifyChange(); } }
public void AddUndoableAction(UndoableAction action) { undoStack.Push(action); redoStack.Clear(); }
public IntArrayList(int[] data) { array = new int[(int)(data.Length * _NUM) + _NUM]; size = data.Length; Array.Copy(data, _NUM, array, _NUM, size); }
private void AddPingTimeData(long sample) { lastPingTimesLock.EnterWriteLock(); try { if (lastPingTimes == null) { lastPingTimes = new long[PING_MOVING_AVERAGE_WINDOW]; Array.Fill(lastPingTimes, sample); } else { Array.Copy(lastPingTimes, _NUM, lastPingTimes, _NUM, lastPingTimes.Length - _NUM); lastPingTimes[lastPingTimes.Length - _NUM] = sample; } } finally { lastPingTimesLock.ExitWriteLock(); } }
public StringBuilder EncodeBody(StringBuilder buffer) { return buffer.Append(contentEncoding); }
protected void TearDown() { try { ds.Close(); sds.Close(); } catch (Exception) { // Handle exception if necessary } }
public string Substring(string subject, int start, int stop) { if (stop == -1 || stop >= subject.Length) { return subject.Substring(start); } return subject.Substring(start, stop - start); }
public bool ControlRunTrain(int idx) { if (log.IsDebugEnabled()) { log.Debug(_STR + idx + _STR + _runMode + _STR + GetDisplayName()); } bool ret = _BOOL; int oldIndex = -MODE_MANUAL; if (_engineer == null) { switch (idx) { case HALT: case RESUME: case RETRY: ret = _BOOL; break; case ABORT: if (_runMode == Warrant.MODE_LEARN) { FirePropertyChange(_STR, -MODE_LEARN, _idxCurrentOrder); } else { StopWarrant(_BOOL); } break; } } else { lock (_engineer) { oldIndex = _engineer.GetRunState(); switch (idx) { case HALT: _engineer.SetHalt(_BOOL); break; case RESUME: _engineer.SetHalt(_BOOL); Restart(); ret = MoveIntoNextBlock(MID); break; case RETRY: BlockOrder bo = GetBl
public void RemoveCustomSashFormListener(ICustomSashFormListener listener) { if (customSashFormListeners != null) { customSashFormListeners.Remove(listener); } }
public static void WriteStringToFile(FileInfo file, string data) { WriteStringToFile(file, data, Encoding.Default, true); }
protected void DeleteSessionVariables(string sessionId, params string[] varNames) { if (sessionId.Equals(_STR)) { return; } var key = keyFactory.NewKey(sessionId); var transaction = datastore.NewTransaction(); try { var stateEntity = transaction.Get(key); var builder = Entity.Builder(stateEntity); var delNames = new StringBuilder(); foreach (var varName in varNames) { delNames.Append(varName + _STR); builder = builder.Remove(varName); } datastore.Update(builder.Build()); } catch (NullReferenceException) { // Handle exception if necessary } finally { if (transaction.Active()) { transaction.Rollback(); } } }
public override string ToString() { StringBuilder sb = new StringBuilder(_NUM); Format((GetYear() + _NUM), _NUM, sb); sb.Append(_STR); Format((GetMonth() + _NUM), _NUM, sb); sb.Append(_STR); Format(GetDate(), _NUM, sb); return sb.ToString(); }
public override void Close() { if (mBufferCount > _NUM) { try { mQueue.Write(mBuffer, _NUM, mBufferCount); } catch (InterruptedException e) { throw new IOException(_STR); } mBufferCount = _NUM; } mQueue.Close(); try { mThread.Join(); } catch (InterruptedException e) { throw new IOException(_STR); } finally { base.Close(); } CheckException(); }
public static int ParseStringAsInt(string input) { try { return int.Parse(input); } catch (FormatException e) { throw new IndexParseFieldException(input, e); } }
public void WriteAll(MySqlDataReader reader, bool includeColumnNames, bool trim) { if (includeColumnNames) { WriteColumnNames(reader); } while (reader.Read()) { WriteNext(GetColumnValues(reader, trim)); } }
public void TestSpecialCase1() { byte[] aBytes = { (byte)-_NUM, (byte)-_NUM, (byte)-_NUM, (byte)-_NUM }; byte[] bBytes = { (byte)_NUM, (byte)-_NUM, (byte)-_NUM, (byte)-_NUM }; int aSign = -_NUM; int bSign = -_NUM; byte[] rBytes = { (byte)-_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger bNumber = new BigInteger(bSign, bBytes); BigInteger result = BigInteger.And(aNumber, bNumber); byte[] resBytes = result.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.True(resBytes[i] == rBytes[i]); } Assert.Equal(-_NUM, result.Sign); }
private static void VerifyDevice(IDevice d, long mac, short? vlan, int? ip, long swId, int port) { Debug.Assert(d != null); Debug.Assert(MacAddress.Of(mac).Equals(d.GetMACAddress())); if (vlan == null) { Assert.AreEqual(new VlanVid[] { VlanVid.OfVlan(-_NUM) }, d.GetVlanId()); } else { Assert.AreEqual(new VlanVid[] { VlanVid.OfVlan(vlan.Value) }, d.GetVlanId()); } if (ip == null) { Assert.AreEqual(new IPv4Address[] { IPv4Address.Of(_NUM) }, d.GetIPv4Addresses()); } else { Assert.AreEqual(new IPv4Address[] { IPv4Address.Of(ip.Value) }, d.GetIPv4Addresses()); } SwitchPort expectedAp = new SwitchPort(DatapathId.Of(swId), OFPort.Of(port)); Assert.AreEqual(new SwitchPort[] { expectedAp }, d.GetAttachmentPoints()); }
public ZoneRulesBuilder AddWindow(ZoneOffset standardOffset, LocalDateTime until, TimeDefinition untilDefinition) { if (standardOffset == null) throw new ArgumentNullException(nameof(standardOffset)); if (until == null) throw new ArgumentNullException(nameof(until)); if (untilDefinition == null) throw new ArgumentNullException(nameof(untilDefinition)); TZWindow window = new TZWindow(standardOffset, until, untilDefinition); if (windowList.Count > _NUM) { TZWindow previous = windowList[windowList.Count - _NUM]; window.ValidateWindowOrder(previous); } windowList.Add(window); return this; }
public Hashtable<IPoint, List<ILineSegment>> Intersections(IEnumerator<ILineSegment> iterator) { var segments = new List<ILineSegment>(); while (iterator.MoveNext()) { segments.Add(iterator.Current); } return Intersections(segments.ToArray()); }
public bool IsTTFNativeFont() { return ttf; }
private void RegisterProviders() { var devMachine = appContext.GetDevMachine(); if (devMachine == null) { return; } var providers = GetMacros(devMachine); CheckNotNull(providers); if (providers.Count == 0) { return; } providerRegistry.Register(providers); }
public LongMap(int initialCapacity, float loadFactor) { if (initialCapacity < _NUM) throw new ArgumentException(_STR + initialCapacity); if (initialCapacity > (_NUM << _NUM)) throw new ArgumentException(_STR + initialCapacity); capacity = MathUtils.NextPowerOfTwo(initialCapacity); if (loadFactor <= _NUM) throw new ArgumentException(_STR + loadFactor); this.loadFactor = loadFactor; threshold = (int)(capacity * loadFactor); mask = capacity - _NUM; hashShift = _NUM - BitOperations.TrailingZeroCount((uint)capacity); stashCapacity = Math.Max(_NUM, (int)Math.Ceiling(Math.Log(capacity)) + _NUM); pushIterations = Math.Max(Math.Min(capacity, _NUM), (int)Math.Sqrt(capacity) / _NUM); keyTable = new long[capacity + stashCapacity]; valueTable = new V[keyTable.Length]; }
protected ASN1Set(ASN1Encodable obj) { set.Add(obj); }
protected void PopulateStreamBlob(int testId, byte[] baseContent, int requiredSize) { byte[] testBytes = GenerateBlobContent(baseContent, requiredSize); using (FbDatabase db = CreateDatabaseConnection()) { var listener = new SimpleStatementListener(); var transaction = GetTransaction(db); try { var statement = db.CreateStatement(transaction); statement.AddStatementListener(listener); var blobParameterBuffer = db.CreateBlobParameterBuffer(); blobParameterBuffer.AddArgument(BlobParameterBuffer.TYPE, BlobParameterBuffer.TYPE_STREAM); var blob = db.CreateBlobForOutput(transaction, blobParameterBuffer); blob.Open(); int bytesWritten = 0; while (bytesWritten < testBytes.Length) { byte[] buffer = new byte[Math.Min(blob.GetMaximumSegmentSize(), testBytes.Length - bytesWritten)]; Array.Copy(testBytes, bytesWritten, buffer, 0, buffer.Length); blob.PutSegment(buffer); bytesWritten += buffer.Length; } blob.Close(); statement.Prepare(INSERT_BLOB_TABLE); var datatypeCoder = db.GetDatatypeCoder(); var param1 = new FieldValue(datatypeCoder.EncodeInt(testId)); var par
private static long SignFromBit_AntiCyclic(double value) { return BitConverter.DoubleToInt64Bits(value) >> _NUM | _NUM; }
public void AddNearKey(KeyCacheObject key, GridCacheSharedContext ctx) { nearKeys.Add(key); }
private void AnalyzeClassFields(string className, int action) { try { Type dynamicClass = Type.GetType(className); if (dynamicClass == null) { throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + className); } FieldInfo[] fields = dynamicClass.GetFields(BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static); foreach (FieldInfo field in fields) { if (IsPrivateAndNonPrimitive(field)) { OneToAnyConditions(className, field, action); ManyToAnyConditions(className, field, action); } } } catch (TypeLoadException ex) { throw new DatabaseGenerateException(DatabaseGenerateException.CLASS_NOT_FOUND + className, ex); } }
protected bool IsLevelEnabled(int logLevel) { return logLevel >= currentLogLevel; }
public static void LoadAll(Form parent, IDebugger debugger, IAddress offset, int size) { CheckArguments(parent, debugger, offset); var waiter = new CDumpAllWaiter(debugger, offset, size); CProgressDialog.ShowEndless(parent, _STR + _STR, waiter); if (waiter.GetException() != null) { CUtilityFunctions.LogException(waiter.GetException()); var innerMessage = _STR + _STR; var innerDescription = CUtilityFunctions.CreateDescription(string.Format(_STR, offset.ToHexString()), new string[] { _STR }, new string[] { _STR }); NaviErrorDialog.Show(parent, innerMessage, innerDescription, waiter.GetException()); } }
public static bool DeleteDirectory(string directory, bool useOSNativeDelete) { bool result = false; if (!useOSNativeDelete) { var dir = new DirectoryInfo(directory); foreach (var file in dir.GetFiles()) { if (file.Delete()) { Log.Debug("Deleted file: " + file.Name); } else { Log.Debug("Failed to delete file: " + file.Name); file.Delete(); // mark to delete on exit } } if (dir.Delete()) { Log.Debug("Deleted directory: " + dir.FullName); result = true; } else { Log.Debug("Failed to delete directory: " + dir.FullName); dir.Delete(); // mark to delete on exit } } else { Process p = null; Thread std = null; try { Log.Debug("Executing native delete command."); p = new Process { StartInfo = new ProcessStartInfo { FileName = "cmd.exe", Arguments = "/C rmdir /S /Q \"" + directory.Replace("\\", "\\\\") +
public void TestSetAttributeNodeNS() { Document doc; Element element; Attr attribute1; Attr attribute2; Attr attrNode; string attrName; string attrNS; NamedNodeMap attributes; int length; doc = (Document)Load(_STR, builder); element = doc.CreateElementNS(_STR, _STR); attribute1 = doc.CreateAttributeNS(_STR, _STR); attribute2 = doc.CreateAttributeNS(_STR, _STR); attribute2.Value = _STR; element.SetAttributeNodeNS(attribute1); element.SetAttributeNodeNS(attribute2); attrNode = element.GetAttributeNodeNS(_STR, _STR); attrName = attrNode.NodeName; attrNS = attrNode.NamespaceURI; Assert.AreEqual(_STR, _STR, attrName); Assert.AreEqual(_STR, _STR, attrNS); attributes = element.Attributes; length = attributes.Length; Assert.AreEqual(_STR, _NUM, length); }
public bool IsCritical() { return _BOOL; }
public static string FindEditTable(string tables) { if (!string.IsNullOrEmpty(tables)) { int spacePos = tables.IndexOf(' '); int commaPos = tables.IndexOf(','); if (spacePos > 0 && (spacePos < commaPos || commaPos < 0)) { return tables.Substring(0, spacePos); } else if (commaPos > 0 && (commaPos < spacePos || spacePos < 0)) { return tables.Substring(0, commaPos); } return tables; } else { throw new InvalidOperationException("Input string is empty"); } }
public void WriteOperationsCarFile() { MakeBackupFile(DefaultOperationsFilename()); try { if (!CheckFile(DefaultOperationsFilename())) { var file = new FileInfo(DefaultOperationsFilename()); var parentDir = file.Directory; if (parentDir != null && !parentDir.Exists) { if (!parentDir.Create()) { Log.Error(_STR); } } if (file.Create().Dispose() != null) { Log.Debug(_STR); } } WriteFile(DefaultOperationsFilename()); } catch (Exception e) { Log.Error(_STR + e); } }
public ConfigurationError(string msg, Exception x) : base(msg) { this.exception = x; }
private bool HasNewFollowers(List<Follower> followers) { return followers.Count > 0 && followers[_NUM].NewFollower; }
private void OnTrackPointElementStart(Attributes attributes) { string latitude = attributes.GetValue(ATT_LAT); string longitude = attributes.GetValue(ATT_LON); if (latitude == null || longitude == null) { throw new SAXException(CreateErrorMessage(_STR)); } try { latitudeValue = double.Parse(latitude); longitudeValue = double.Parse(longitude); } catch (FormatException e) { throw new SAXException(CreateErrorMessage(_STR + latitude + _STR + longitude), e); } }
protected void FirePropertyChange(PropertyChangeEvent evt) { pcs.FirePropertyChange(evt); }
static int CheckDesc(string desc, int start, bool canBeVoid) { if (desc == null || start >= desc.Length) { throw new ArgumentException(_STR); } int index; switch (desc[start]) { case _STR when canBeVoid: return start + _NUM; case _STR: case _STR: case _STR: case _STR: case _STR: case _STR: case _STR: case _STR: return start + _NUM; case _STR: index = start + _NUM; while (index < desc.Length && desc[index] == _STR) { ++index; } if (index < desc.Length) { return CheckDesc(desc, index, _BOOL); } else { throw new ArgumentException(_STR + desc); } case _STR: index = desc.IndexOf(_STR, start); if (index == -_NUM || index - start < _NUM) { throw new ArgumentException(_STR + desc); } try { CheckInternalName(desc, start + _
public static void SortFields(FieldBinding[] sortedFields, int left, int right) { Array.Sort(sortedFields, left, right - left, FIELD_COMPARATOR); }
private void DrawBackground(Graphics g) { g.Color = m_bgColorOffset; g.FillRectangle(new SolidBrush(m_bgColorOffset), -m_firstColumn * m_charWidth, _NUM, m_offsetViewWidth, this.Height); }
public void AddUniqueAttribute(string elementName, string attrName) { if (elementName != null && attrName != null) { _uniqueElementAttrMap[elementName] = attrName; } }
private static DeleteVmResponse CheckDeleteVmResponse(DeleteVmResponse deleteVmResponse) { Logger.Info(_STR, deleteVmResponse); switch (deleteVmResponse.GetResult()) { case Result.OK: break; case Result.SYSTEM_ERROR: throw new SystemErrorException(deleteVmResponse.GetError()); case Result.VM_NOT_FOUND: throw new VmNotFoundException(deleteVmResponse.GetError()); case Result.VM_NOT_POWERED_OFF: throw new VmNotPoweredOffException(deleteVmResponse.GetError()); default: throw new RpcException(string.Format(_STR, deleteVmResponse.GetResult())); } return deleteVmResponse; }
public void RunTest() { Document doc; NodeList elementList; Node nameNode; CharacterData child; doc = (Document)Load(_STR, _BOOL); elementList = doc.GetElementsByTagName(_STR); nameNode = elementList.Item(_NUM); child = (CharacterData)nameNode.FirstChild; bool success = _BOOL; try { child.DeleteData(_NUM, _NUM); } catch (DOMException ex) { success = (ex.Code == DOMException.INDEX_SIZE_ERR); } Assert.True(success, _STR); }
public void LimitTransAndScale(Matrix matrix, RectF content) { float[] vals = new float[_NUM]; matrix.GetValues(vals); float curTransX = vals[Matrix.MTRANS_X]; float curScaleX = vals[Matrix.MSCALE_X]; float curTransY = vals[Matrix.MTRANS_Y]; float curScaleY = vals[Matrix.MSCALE_Y]; mScaleX = Math.Max(mMinScaleX, curScaleX); mScaleY = Math.Max(mMinScaleY, curScaleY); float width = _NUM; float height = _NUM; if (content != null) { width = content.Width(); height = content.Height(); } float maxTransX = -width * (mScaleX - _NUM); float newTransX = Math.Min(Math.Max(curTransX, maxTransX - mTransOffsetX), mTransOffsetX); float maxTransY = height * (mScaleY - _NUM); float newTransY = Math.Max(Math.Min(curTransY, maxTransY + mTransOffsetY), -mTransOffsetY); va
public BlazeValueFactory ValueFactory() { return vf; }
public StatefulRefreshToken(JsonValue token) : base(token) { if (!OAUTH_REFRESH_TOKEN.Equals(GetTokenName())) { throw new InvalidGrantException(_STR + GetTokenId()); } }
public void PutStyle(string styleId, StyleSelector styleSelector) { try { int id = int.Parse(styleId); mMaxStyleId = Math.Max(mMaxStyleId, id); } catch (FormatException) { } mStyles[styleId] = styleSelector; }
private static string ExtractClientName(string clientId, string host) { string hostExcludedId = string.Empty; if ((IsIPv6(host) || IsIPv4(host)) && clientId.StartsWith(host)) { hostExcludedId = clientId.Substring(host.Length); } else { int firstDotIndex = host.IndexOf('.'); if (firstDotIndex != -1) { string hostShortName = host.Substring(0, firstDotIndex); hostExcludedId = clientId.Substring(hostShortName.Length); } } string vmPIDAndKindRegex = "your-regex-pattern"; // Update with actual regex pattern string regex = "your-regex-pattern"; // Update with actual regex pattern string name = "NOT_AVAILABLE"; string temp = hostExcludedId; int openIndex = temp.IndexOf('['); // Update with actual character if needed if (openIndex != -1) { regex = vmPIDAndKindRegex + regex; } if (System.Text.RegularExpressions.Regex.IsMatch(temp, regex)) { string[] splitted = temp.Split(new char[] { ' ' }, StringSplitOptions.RemoveEmptyEntries
public static FastFuture<T> FromCompletableFuture<T>(CompletableFuture<T> cf) { var f = new FastFuture<T>(); cf.ThenAccept(_ => { }); cf.Exceptionally(ex => { return default; }); return f; }
public static bool IsPlaceAction(InventoryAction action) { switch (action) { case InventoryAction.SWAP_WITH_CURSOR: case InventoryAction.PLACE_ONE: case InventoryAction.PLACE_ALL: case InventoryAction.PLACE_SOME: return true; } return false; }
private void RefreshMarkers() { RemoveAll(); Dictionary<int, Marker> markerMap = new Dictionary<int, Marker>(); List<ParserNotice> notices = textArea.GetParserNotices(); foreach (var notice in notices) { if (notice.Level <= levelThreshold || notice is TaskNotice) { int key = notice.Line; if (!markerMap.TryGetValue(key, out Marker m)) { m = new Marker(notice); m.AddMouseListener(listener); markerMap[key] = m; Add(m); } else { m.AddNotice(notice); } } } if (GetShowMarkedOccurrences() && textArea.GetMarkOccurrences()) { List<DocumentRange> occurrences = textArea.GetMarkedOccurrences(); foreach (var range in occurrences) { int line = _NUM; try { line = textArea.GetLineOfOffset(range.StartOffset); } catch (BadLocationException) { continue; } ParserNotice notice = new MarkedOccurrenceNotice(range); int key = line; if (!markerMap.TryGetValue(key, out Marker m))
private List<View> AddView(View view, List<View> cache) { if (cache == null) { cache = new List<View>(); } cache.Add(view); return cache; }
public static byte[] ReadInputStream(System.IO.Stream input) { using (var memoryStream = new System.IO.MemoryStream()) { input.CopyTo(memoryStream); return memoryStream.ToArray(); } }
public void PlayMedia(bool showPlayerWindow) { string filename = StopAndPrepareFilename(); if (filename.Length > _NUM) { MPlayerMediator mplayerMediator = MPlayerMediator.Instance; if (mplayerMediator != null) { mplayerMediator.ShowPlayerWindow(showPlayerWindow); } mplayer.Open(filename, GetAdjustedVolume()); } NotifyState(GetState()); }
public static string ToUtf8String(string s) { return System.Text.Encoding.UTF8.GetString(System.Text.Encoding.Default.GetBytes(s)); }
public static int EncodeCacheFlags(HashSet<GridClientCacheFlag> flagSet) { int bits = _NUM; if (flagSet.Contains(GridClientCacheFlag.SKIP_STORE)) { bits |= _NUM; } return bits; }
public void Add(DataSource source, bool visible) { Add(data.Count, source, visible); }
public override void AddValue(double value, double weight) { m_WeightedSum += value * weight; m_WeightedSumSquared += value * value * weight; m_SumOfWeights += weight; if (!m_TM.TryGetValue(value, out double existingWeight)) { m_TM[value] = weight; } else { m_TM[value] = existingWeight + weight; } }
private JPanel BuildRow(string str, JCheckBox checkBox) { JPanel panel = new JPanel(new BorderLayout()); panel.Add(new JLabel(str), BorderLayout.WEST); panel.Add(checkBox, BorderLayout.EAST); checkBox.ItemListener += m_checkBoxListener; return panel; }
private static readonly object syncLock = new object(); private static string FormatAndParse(SimpleDateFormat formatDate, SimpleDateFormat parseDate, string text) { lock (syncLock) { try { DateTime date = parseDate.Parse(text); string result = formatDate.Format(date); return result; } catch (ParseException e) { Logger.Warning(_STR + text); } return _STR; } }
public static bool IsChildGroup(string group) { return group.IndexOf(GROUP_DELIMITER) != -1; }
private void ThrowArrayIndexOutOfBoundsException(int itemIndex) { throw new IndexOutOfRangeException(_STR + _STR + spaceItems.Count + _STR + itemIndex); }
private LocusInfo CreateNextUncoveredLocusInfo(Locus stopBeforeLocus) { while (lastReferenceSequence <= stopBeforeLocus.GetSequenceIndex() && lastReferenceSequence <= referenceSequenceMask.GetMaxSequenceIndex()) { if (lastReferenceSequence == stopBeforeLocus.GetSequenceIndex() && lastPosition + _NUM >= stopBeforeLocus.GetPosition()) { return null; } int nextbit = referenceSequenceMask.NextPosition(lastReferenceSequence, lastPosition); if (nextbit == -_NUM) { if (lastReferenceSequence == stopBeforeLocus.GetSequenceIndex()) { lastPosition = stopBeforeLocus.GetPosition(); return null; } lastReferenceSequence++; lastPosition = _NUM; } else if (lastReferenceSequence < stopBeforeLocus.GetSequenceIndex() || nextbit < stopBeforeLocus.GetPosition()) { lastPosition = nextbit; return new LocusInfo(GetReferenceSequence(lastReferenceSequence), lastPosition); } else if (nextbit >= stopBeforeLocus.GetPosition()) { return null; } } return null; }
public void GlobalConfigChanged(string serviceName, string version, string groupName, string serviceComponent, int changeType) { // unit test for <unk> 's <unk> }
public static void LaunchEmailIntent(Activity activity, string addr, string text) { Log.Info(LOG_TAG, _STR + activity.LocalClassName); Intent emailIntent = new Intent(Intent.ActionSend); emailIntent.PutExtra(Intent.ExtraEmail, new string[] { addr }); emailIntent.PutExtra(Intent.ExtraText, text); emailIntent.SetType(_STR); PackageManager emailPackageManager = activity.PackageManager; var emailResolveInfos = emailPackageManager.QueryIntentActivities(emailIntent, 0); if (emailResolveInfos.Count > 0) { activity.StartActivity(emailIntent); } }
public int Count() { return n; }
public void Add(int position, T item) { mData.Insert(position, item); NotifyItemInserted(position); }
public void AddTranslator(ClassPool cp, Translator t) { source = cp; translator = t; t.Start(cp); }
private void OnMainContentScrolled(int currentY, int deltaY) { if (deltaY > mActionBarAutoHideSensitivity) { deltaY = mActionBarAutoHideSensitivity; } else if (deltaY < -mActionBarAutoHideSensitivity) { deltaY = -mActionBarAutoHideSensitivity; } if (Math.Sign(deltaY) * Math.Sign(mActionBarAutoHideSignal) < 0) { mActionBarAutoHideSignal = deltaY; } else { mActionBarAutoHideSignal += deltaY; } bool shouldShow = currentY < mActionBarAutoHideMinY || (mActionBarAutoHideSignal <= -mActionBarAutoHideSensitivity); AutoShowOrHideActionBar(shouldShow); }
public void WriteLEChars(string s) { int length = s.Length; for (int i = _NUM; i < length; i++) { int c = s[i]; out.Write(c & _NUM); out.Write((c >> _NUM) & _NUM); } written += length * _NUM; }
public static string ReadLine() { string line; try { line = Console.ReadLine(); } catch (NoSuchElementException) { line = null; } return line; }
[Obsolete] public bool IsValid(string regex) { if (regex == null) { return _BOOL; } var pattern = new Regex(regex); var matcher = pattern.IsMatch(GetText()); return matcher; }
public void WriteToFile(string filename) { GridUtils.WriteSpatialGridTable(this, filename); }
public void AddFooterView(View v, object data, bool isSelectable) { FixedViewInfo info = new FixedViewInfo(); info.View = v; info.Data = data; info.IsSelectable = isSelectable; mFooterViewInfos.Add(info); if (mAdapter != null && mDataSetObserver != null) { mDataSetObserver.OnChanged(); } }
public void AddCloseHook(CloseHook hook) { if (closeHooks == null) { closeHooks = new List<CloseHook>(); } closeHooks.Add(hook); }
public void RejectedExecution(Action r, ThreadPoolExecutor e) { if (!e.IsShutdown) { r(); } }
private void UpdateRange(double x, double y) { mMinX = Math.Min(mMinX, x); mMaxX = Math.Max(mMaxX, x); mMinY = Math.Min(mMinY, y); mMaxY = Math.Max(mMaxY, y); }
static bool CheckStandardUPCEANChecksum(string s) { int length = s.Length; if (length == _NUM) { return _BOOL; } int sum = 0; for (int i = length - _NUM; i >= _NUM; i -= _NUM) { int digit = s[i] - _STR; if (digit < 0 || digit > 9) { throw new FormatException(); } sum += digit; } sum *= _NUM; for (int i = length - _NUM; i >= _NUM; i -= _NUM) { int digit = s[i] - _STR; if (digit < 0 || digit > 9) { throw new FormatException(); } sum += digit; } return sum % _NUM == 0; }
public void ReadConfig(string filename) { if (string.IsNullOrEmpty(filename) || filename.Equals(_STR)) return; ReadConfig(new StreamReader(filename)); }
private void ApplyTradingBonus(Player player) { player.IncrementTradescore(); }
public static string SlurpURLNoExceptions(Uri u) { try { return SlurpURL(u); } catch (Exception e) { Console.WriteLine(e); return null; } }
private static void CreateCombinedTrace(TraceList newTrace, List<TraceList> traces, HashSet<BreakpointAddress> addresses) { HashSet<BreakpointAddress> visitedAddresses = new HashSet<BreakpointAddress>(); foreach (var trace in traces) { foreach (var event in trace) { BreakpointAddress address = event.GetOffset(); if (!addresses.Contains(address)) { continue; } if (visitedAddresses.Contains(address)) { continue; } visitedAddresses.Add(address); newTrace.AddEvent(event); } } }
public void InterruptAll() { lock (knownActorTasks) { foreach (var ft in knownActorTasks) { ft.Cancel(_BOOL); } threadGuard.InterruptAll(); } }
public void RegisterDefaultDeviceTypes() { var devicesList = DefaultPlatform.GetDeviceServiceMap(); foreach (var entry in devicesList) { string key = entry.Key; string value = entry.Value; try { RegisterDeviceService((Type)Type.GetType(key), (Type)Type.GetType(value)); } catch (TypeLoadException e) { Console.WriteLine(e); } } }
private static void RemoveDependencySubsets(string swcLocation, Dictionary<string, HashSet<string>> dependencyMap, SwcDependencyInfoImpl depInfo) { HashSet<string> removeSet = new HashSet<string>(); SwcExternalScriptInfo externalInfo = depInfo.GetSwcExternalScriptInfo(swcLocation); Dictionary<string, HashSet<string>> externalsBySwc = new Dictionary<string, HashSet<string>>(); foreach (var swcDependLocation in dependencyMap[swcLocation]) { foreach (var swcDependLocation2 in dependencyMap[swcLocation]) { if (swcDependLocation.Equals(swcDependLocation2)) continue; if (!externalsBySwc.TryGetValue(swcDependLocation, out var externalScripts)) { externalScripts = externalInfo.GetExternalScripts(swcDependLocation); externalsBySwc[swcDependLocation] = externalScripts; } if (!externalsBySwc.TryGetValue(swcDependLocation2, out var externalScripts2)) { externalScripts2 = externalInfo.GetExternalScripts(swcDependLocation2); externalsBySwc[swcDep
private void DrawTicks(Canvas canvas, double min, double max, double minAngle, double maxAngle, int centerX, int centerY, double longRadius, double shortRadius, double ticks, Paint paint, bool labels) { for (double i = min; i <= max; i += ticks) { double angle = GetAngleForValue(i, minAngle, maxAngle, min, max); double sinValue = Math.Sin(angle); double cosValue = Math.Cos(angle); int x1 = (int)Math.Round(centerX + (shortRadius * sinValue)); int y1 = (int)Math.Round(centerY + (shortRadius * cosValue)); int x2 = (int)Math.Round(centerX + (longRadius * sinValue)); int y2 = (int)Math.Round(centerY + (longRadius * cosValue)); canvas.DrawLine(x1, y1, x2, y2, paint); if (labels) { paint.TextAlign = Align.Left; if (x1 <= x2) { paint.TextAlign = Align.Right; } string text = i + _STR; if (Math.Round(i) == (l
private void UpdateBaseMatrix(Drawable d) { ImageView imageView = GetImageView(); if (imageView == null || d == null) { return; } float viewWidth = imageView.Width; float viewHeight = imageView.Height; int drawableWidth = d.IntrinsicWidth; int drawableHeight = d.IntrinsicHeight; mBaseMatrix.Reset(); float widthScale = viewWidth / drawableWidth; float heightScale = viewHeight / drawableHeight; if (mScaleType == ScaleType.Center) { mBaseMatrix.PostTranslate((viewWidth - drawableWidth) / _NUM, (viewHeight - drawableHeight) / _NUM); } else if (mScaleType == ScaleType.CenterCrop) { float scale = Math.Max(widthScale, heightScale); mBaseMatrix.PostScale(scale, scale); mBaseMatrix.PostTranslate((viewWidth - drawableWidth * scale) / _NUM, (viewHeight - drawableHeight * scale) / _NUM); } else if (mScaleType == ScaleType.CenterInside) { float scale = Math.Min(_NUM, Math.Min(widthSc
public static Func<Partition<T, K, List<T>>, T, bool> AlwaysInsert<T, K>() { return null; }
public void TestFindSpringOpenLdap() { LdapProxy proxy = GetLdapOpenLdap(); List<object> result = null; try { result = proxy.Find(GetLdapSearchVO(_STR, LdapConstants.NO_SEARCH_LIMIT, null, null, null, LdapScopeConstants.SCOPE_SUBTREE)); } catch (Exception e) { // Handle exception if necessary } Assert.NotNull(result); Assert.Equal(_NUM, result.Count); }
public void TestConstructorStringRadix8() { string value = _STR; int radix = _NUM; byte[] rBytes = { _NUM, (byte)-_NUM, (byte)-_NUM, (byte)-_NUM, (byte)-_NUM, (byte)_NUM, (byte)_NUM }; BigInteger aNumber = BigInteger.Parse(value, System.Globalization.NumberStyles.AllowHexSpecifier); byte[] resBytes = aNumber.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.True(resBytes[i] == rBytes[i]); } Assert.Equal(_STR, _NUM, aNumber.Sign); }
private static bool InEncoding(char ch, string encoding) { bool isInEncoding; try { char[] cArray = new char[_NUM]; cArray[_NUM - 1] = ch; // Assuming _NUM is the size of char array string s = new string(cArray); byte[] bArray = System.Text.Encoding.GetEncoding(encoding).GetBytes(s); isInEncoding = InEncoding(ch, bArray); } catch (Exception) { isInEncoding = _BOOL; if (encoding == null) isInEncoding = _BOOL; } return isInEncoding; }
public void Delete(SSOToken token, string dn) { foreach (string entry in SubEntries(token, dn, _STR, _NUM, _BOOL, _BOOL)) { debug.Message(_STR, entry); Delete(token, GetNamingAttribute() + _STR + entry + _STR + dn); } foreach (string subOrg in SearchSubOrgNames(token, dn, _STR, _NUM, _BOOL, _BOOL, _BOOL)) { debug.Message(_STR, subOrg); Delete(token, subOrg); } Delete(token.GetPrincipal(), dn); ObjectChanged(dn, DELETE); }
private void RemoveHighlights() { if (textArea != null) { var h = (RSyntaxTextAreaHighlighter)textArea.GetHighlighter(); for (int i = _NUM; i < tags.Count; i++) { h.RemoveMarkOccurrencesHighlight(tags[i]); } } tags.Clear(); }
private static void EnqueueSuccessors<T>(T block, PriorityQueue<T> worklist, BitSet visitedBlocks) where T : AbstractBlockBase<T> { foreach (var successor in block.GetSuccessors()) { if (!visitedBlocks.Get(successor.GetId())) { visitedBlocks.Set(successor.GetId()); worklist.Add(successor); } } }
protected void AddCommonComponent(XMLComponent component) { if (fCommonComponents.Contains(component)) { return; } fCommonComponents.Add(component); AddRecognizedParamsAndSetDefaults(component); }
public void AddRole(string role) { if (role != null) { roles.Add(role); } }
public CModulesCheckBoxPanel(CModulesTableModel modulesTableModel) : base(new BorderLayout()) { var checkBox = new JCheckBox(_STR); checkBox.ItemChecked += new InternalCheckboxListener(); Add(checkBox); m_modulesTableModel = modulesTableModel; }
public QDate() : this(_gmtTimeZone) { }
protected void ResponseSent(StreamResponseMessage responseMessage) { if (syncProtocol != null) syncProtocol.ResponseSent(responseMessage); }
public void Append(FastStringBuffer value) { if (value == null) return; int strlen = value.Length(); if (_NUM == strlen) return; int copyfrom = _NUM; char[] chunk = m_array[m_lastChunk]; int available = m_chunkSize - m_firstFree; while (strlen > _NUM) { if (available > strlen) available = strlen; int sourcechunk = (copyfrom + value.m_chunkSize - _NUM) >> value.m_chunkBits; int sourcecolumn = copyfrom & value.m_chunkMask; int runlength = value.m_chunkSize - sourcecolumn; if (runlength > available) runlength = available; Array.Copy(value.m_array[sourcechunk], sourcecolumn, m_array[m_lastChunk], m_firstFree, runlength); if (runlength != available) Array.Copy(value.m_array[sourcechunk + _NUM], _NUM, m_array[m_lastChunk], m_firstFree + runlength, available - runlength); strlen -= available; copyfrom += available; if (strlen > _NUM) { int i = m_array.Length; if
protected Tuple<BlobStoreIndexShardSnapshots, int> BuildBlobStoreIndexShardSnapshots(Dictionary<string, BlobMetaData> blobs) { int latest = -_NUM; foreach (var name in blobs.Keys) { if (name.StartsWith(SNAPSHOT_INDEX_PREFIX)) { try { int gen = int.Parse(name.Substring(SNAPSHOT_INDEX_PREFIX.Length)); if (gen > latest) { latest = gen; } } catch (FormatException ex) { logger.Warn(_STR, name); } } } if (latest >= _NUM) { try { return new Tuple<BlobStoreIndexShardSnapshots, int>( indexShardSnapshotsFormat.Read(blobContainer, latest.ToString()), latest); } catch (IOException e) { logger.Warn(_STR, e, SNAPSHOT_INDEX_PREFIX + latest); } } List<SnapshotFiles> snapshots = new List<SnapshotFiles>(); foreach (var name in blobs.Keys) { try { BlobStoreIndexShardSnapshot snapshot = null; if (name.StartsWith(SNAPSHOT_PREFIX)) { snapshot = indexShardSnapshotFormat.R
protected MapleQuestRequirement(MapleQuest quest, ReadBin data) { this.quest = quest; this.dayByDay = data.ReadByte() > _NUM; this.normalAutoStart = data.ReadByte() > _NUM; this.lvmin = data.ReadShort(); this.lvmax = data.ReadShort(); this.mbmin = data.ReadShort(); this.charismaMin = data.ReadShort(); this.charmMin = data.ReadShort(); this.craftMin = data.ReadShort(); this.insightMin = data.ReadShort(); this.senseMin = data.ReadShort(); this.willMin = data.ReadShort(); this.pop = data.ReadShort(); this.pettamenessmin = data.ReadShort(); this.subJobFlag = data.ReadShort(); this.npc = data.ReadInt(); this.interval = data.ReadInt(); this.end = data.ReadString(); this.startscript = data.ReadString(); this.endscript = data.ReadString(); short size = data.ReadShort(); for (int i = _NUM; i < size; i++) { int field = data.ReadInt(); fieldEnter.Add(field); } siz
public ForumPostConfig CreateReply(ForumPostConfig config) { config.AddCredentials(this); string xml = POST(this.url + _STR, config.ToXML()); XElement root = Parse(xml); if (root == null) { return null; } try { ForumPostConfig reply = new ForumPostConfig(); reply.ParseXML(root); return reply; } catch (Exception exception) { this.exception = SDKException.ParseFailure(exception); throw this.exception; } }
public bool IsArmed() { return other.IsArmed(); }
public static AttribKey ForHtmlAttrib(ElKey el, string localName) { return new AttribKey(el, HTML_NS, localName); }
public SparseArray(Type linearArrayType, int[] rowIndices, int[] colIndices, L realValues, L imagValues, int numRows, int numCols) { ValidateUserSuppliedParameters(linearArrayType, rowIndices, colIndices, realValues, imagValues); _baseComponentType = linearArrayType.GetElementType(); _outputArrayType = ArrayUtils.GetArrayClass(_baseComponentType, _NUM); var sparseMap = CreateSparseMap(linearArrayType, rowIndices, colIndices, realValues, imagValues, numRows, numCols); _numRows = numRows; _numCols = numCols; List<SparseKey> keys = sparseMap.Keys.ToList(); keys.Sort(); _rowIndices = new int[keys.Count]; _colIndices = new int[keys.Count]; _linearIndices = new int[keys.Count]; _realValues = (L)Array.CreateInstance(_baseComponentType, keys.Count); _imagValues = imagValues == null ? null : (L)Array.CreateInstance(_baseComponentType, keys.Count); for (int i = _NUM; i < keys.Count; i++)
public static Tuple Max(TupleSet tuples, string field, IComparer<Tuple> cmp) { if (tuples is Table table) { ColumnMetadata md = table.GetMetadata(field); return table.GetTuple(md.GetMaximumRow()); } else { return Max(tuples.Tuples(), field, cmp); } }
protected void UpdateRadioLinks() { m_CVBut.Enabled = _BOOL; m_CVText.Enabled = m_CVBut.Checked; m_CVLab.Enabled = m_CVBut.Checked; m_SeedText.Enabled = m_CVBut.Checked; m_SeedLab.Enabled = m_CVBut.Checked; if (m_AttributeEvaluatorEditor.GetValue() is AttributeTransformer) { m_CVBut.Checked = _BOOL; m_CVBut.Enabled = _BOOL; m_CVText.Enabled = _BOOL; m_CVLab.Enabled = _BOOL; m_SeedText.Enabled = _BOOL; m_SeedLab.Enabled = _BOOL; m_TrainBut.Checked = _BOOL; } }
private string IdString(int id1, int id2) { return _STR + (id2 & _NUM).ToString("x") + _STR + (id1 & _NUM).ToString("x") + _STR + ((id2 & _NUM) * _NUM + (id1 & _NUM)) + _STR; }
public EtagCache ResetStats() { hits.Set(_NUM); misses.Set(_NUM); return this; }
public void TestOtherToStringDefault() { NumberConverter converter = MakeConverter(); Assert.AreEqual(_STR, _STR, converter.Convert(typeof(string), new StringBuilder(_STR))); }
private void RemoveItemAtIndex(int index, bool updateChildrenOnMenuViews) { if (index < _NUM || index >= mItems.Count) return; mItems.RemoveAt(index); if (updateChildrenOnMenuViews) OnItemsChanged(_BOOL); }
public void TestShiftRight3() { byte[] aBytes = { _NUM, -_NUM, _NUM, _NUM, -_NUM, -_NUM, _NUM, _NUM, _NUM, _NUM, -_NUM, _NUM, _NUM }; int aSign = _NUM; int number = _NUM; byte[] rBytes = { _NUM, _NUM, _NUM, -_NUM, -_NUM, -_NUM, _NUM, -_NUM, _NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger result = aNumber.ShiftRight(number); byte[] resBytes = result.ToByteArray(); for (int i = 0; i < resBytes.Length; i++) { Assert.True(resBytes[i] == rBytes[i]); } Assert.Equal(_NUM, result.Sign); }
private void ShowFilterDialog(Filter filter) { int sortOrder = mAdapter.Count - _NUM; if (filter == null) { EditFilterActivity.CreateNewFilter(GetActivity(), sortOrder); } else { EditFilterActivity.EditFilter(GetActivity(), filter, sortOrder); } }
public static int NumPixelsBetween(int x1, int y1, int x2, int y2) { return (int)Math.Sqrt(Math.Pow((double)(x1 - x2), _NUM) + Math.Pow((double)(y1 - y2), _NUM)); }
private KeyStore CreateKeys(KeyStore keyStore, string keyAlgorithm, string publicAlias, string privateAlias, PrivateKeyEntry signer) { PrivateKey caKey; X509Certificate caCert; X509Certificate[] caCertChain; if (signer == null) { caKey = null; caCert = null; caCertChain = null; } else { caKey = signer.GetPrivateKey(); caCert = (X509Certificate)signer.GetCertificate(); caCertChain = (X509Certificate[])signer.GetCertificateChain(); } PrivateKey privateKey; X509Certificate x509c; if (publicAlias == null && privateAlias == null) { privateKey = null; x509c = null; } else { int keySize; if (keyAlgorithm.Equals(_STR1)) { keySize = _NUM1; } else if (keyAlgorithm.Equals(_STR2)) { keySize = _NUM2; } else if (keyAlgorithm.Equals(_STR3)) { keySize = _NUM3; }
static bool AllowsPopup(FormObject formObject) { switch (formObject.GetParameterConstant(PdfDictionary.Subtype)) { case PdfDictionary.Text: case PdfDictionary.Square: case PdfDictionary.Highlight: case PdfDictionary.Underline: case PdfDictionary.StrickOut: case PdfDictionary.Stamp: return _BOOL; default: return _BOOL; } }
public static LocalGitRepo FromCurrentDir(string remoteUrl) { Git git; string gitDirPath = _STR; try { git = Git.Open(gitDirPath); } catch (RepositoryNotFoundException) { string fullPathOfCurrentDir = PathOf(gitDirPath); string gitRoot = GetGitRootIfItExistsInOneOfTheParentDirectories(new DirectoryInfo(fullPathOfCurrentDir)); string summary; List<string> messages = new List<string>(); if (gitRoot == null) { summary = _STR; messages.Add(summary); messages.Add(fullPathOfCurrentDir + _STR); } else { summary = _STR; messages.Add(summary); messages.Add(fullPathOfCurrentDir + _STR); messages.Add(_STR + PathOf(gitRoot)); } throw new ValidationException(summary, messages); } catch (Exception e) { throw new ValidationException(_STR + PathOf(gitDirPath) + _STR, new List<string> { _STR, e.ToString() }); } return new LocalGitRepo(git, remoteUrl); }
public static Vector2 Min(Vector2 o1, Vector2 o2) { return new Vector2(Math.Min(o1.x, o2.x), Math.Min(o1.y, o2.y)); }
public void AddTestCall(GenericAccessibleObject call) { Inputs.CheckNull(call); testMethods.Add(call); }
public void Serialize(KXmlSerializer serializer) { mDeviceInfo.Serialize(serializer); SerializeHostInfo(serializer); SerializeTestSummary(serializer); monkeyTag.Serialize(serializer); List<TestPackageResult> packages = new List<TestPackageResult>(mPackageMap.Values); packages.Sort(new PkgComparator()); foreach (TestPackageResult result in packages) { result.Serialize(serializer); } }
private void VerifyBlockMirrorMigration() { log.Info(_STR); var blockMirrorItr = _dbClient.QueryIterativeObjects<BlockMirror>(blockMirrorURIs); var blockObjects = new List<BlockObject>(); while (blockMirrorItr.MoveNext()) { blockObjects.Add(blockMirrorItr.Current); } VerifyBlockObjects(blockObjects); }
public LogFormatter(Logger log) { if (log == null) log = Logger.GetLogger(Logger.GLOBAL_LOGGER_NAME); Level lvl = null; while (log != null) { lvl = log.GetLevel(); if (lvl != null) break; log = log.GetParent(); } if (lvl == null) lvl = Level.WARNING; this.level = lvl; }
public synchronized void RemoveTextListener(TextListener cl) { m_textListeners.Remove(cl); }
protected void RefreshLoadingViewsSize() { int maximumPullScroll = (int)(GetMaximumPullScroll() * _NUM); int pLeft = GetPaddingLeft(); int pTop = GetPaddingTop(); int pRight = GetPaddingRight(); int pBottom = GetPaddingBottom(); switch (GetPullToRefreshScrollDirection()) { case ScrollDirection.Horizontal: if (mMode.ShowHeaderLoadingLayout()) { mHeaderLayout.SetWidth(maximumPullScroll); pLeft = -maximumPullScroll; } else { pLeft = _NUM; } if (mMode.ShowFooterLoadingLayout()) { mFooterLayout.SetWidth(maximumPullScroll); pRight = -maximumPullScroll; } else { pRight = _NUM; } break; case ScrollDirection.Vertical: if (mMode.ShowHeaderLoadingLayout()) { mHeaderLayout.SetHeight(maximumPullScroll); pTop = -maximumPullScroll; } else { pTop = _NUM; } if (mMode.ShowFooterLoadingLayout()) { mFooterLayout.SetHeight(
private Element CreateIDPEntityDescriptor(bool exportPrivateData) { Element entEle = doc.CreateElementNS(null, SAMLNames.ENTDESCRIPTOR); string id = idmClient.GetEntityID(tenantName); string alias = idmClient.GetLocalIDPAlias(tenantName); if (id == null) { id = tenantName; } entEle.SetAttribute(SAMLNames.ENTID, id); Element idpSSO = CreateIDPSSODescriptor(exportPrivateData); entEle.AppendChild(idpSSO); if (exportPrivateData) { if (string.IsNullOrEmpty(alias)) { alias = id; } Element orgEle = CreateOrganization(tenantName, tenantName, alias, SAMLNames.ENGLISH); entEle.AppendChild(orgEle); } return entEle; }
public void Clear() { infoQueue.Clear(); while (!dataQueue.IsEmpty()) { allocator.Release(dataQueue.Remove()); } totalBytesDropped = _NUM; totalBytesWritten = _NUM; lastAllocation = null; lastAllocationOffset = allocationLength; }
public void ApplyCamera(GL gl) { gl.MatrixMode(GL.GL_PROJECTION); gl.LoadIdentity(); glu.Perspective(_NUM, width / (float)height, _NUM, _NUM); eye[_NUM] = (float)Math.Sin(theta) * _NUM; eye[_NUM] = _NUM; eye[_NUM] = (float)Math.Cos(theta) * _NUM; glu.LookAt(eye[_NUM], eye[_NUM], eye[_NUM], _NUM, _NUM, _NUM, _NUM, _NUM, _NUM); gl.MatrixMode(GL.GL_MODELVIEW); gl.LoadIdentity(); gl.Viewport(_NUM, _NUM, width, height); }
public static ResultSet PointTable(double x, double y) { var factory = new GeometryFactory(); var rs = new SimpleResultSet(); rs.AddColumn(_STR, Types.JAVA_OBJECT, _STR, _NUM, _NUM); rs.AddRow(factory.CreatePoint(new Coordinate(x, y))); return rs; }
public void AddToExistingVolumesIfAbsent(Dictionary<string, int> volumeWWNs) { if (_existingVolumes == null) { _existingVolumes = new Dictionary<string, string>(); } foreach (var wwn in volumeWWNs.Keys) { string normalizedWWN = BlockObject.NormalizeWWN(wwn); if (!_existingVolumes.ContainsKey(normalizedWWN) && (_userAddedVolumes == null || !_userAddedVolumes.ContainsKey(normalizedWWN))) { string hluStr = ExportGroup.LUN_UNASSIGNED_STR; if (volumeWWNs.TryGetValue(normalizedWWN, out int hlu)) { hluStr = hlu.ToString(); } _existingVolumes[normalizedWWN] = hluStr; } } }
public PathImpl CreateTempFile(string prefix, string suffix) { if (prefix == null || prefix.Length == 0) prefix = string.Empty; if (suffix == null) suffix = string.Empty; lock (LOCK) { for (int i = 0; i < int.MaxValue; i++) { int r = Math.Abs(RandomUtil.GetRandomLong().GetHashCode()); PathImpl file = Lookup(prefix + r + suffix); if (file.CreateNewFile()) return file; } } throw new IOException(string.Empty); }
static Dictionary<TargetType, List<TypeCompound>> PartitionByTargetType( ICollection<TypeCompound> annos, List<TypeCompound> unmatched, params TargetType[] targetTypes) { var targetTypeToAnnos = new Dictionary<TargetType, List<TypeCompound>>(); foreach (var targetType in targetTypes) { targetTypeToAnnos[targetType] = new List<TypeCompound>(); } foreach (var anno in annos) { if (targetTypeToAnnos.TryGetValue(anno.GetPosition().Type, out var annoSet)) { annoSet.Add(anno); } else if (unmatched != null) { unmatched.Add(anno); } } return targetTypeToAnnos; }
public ConfigurationError(string msg, Exception x) : base(msg) { this.exception = x; }
public void Load() { try { if (fileChannel == null) { fileChannel = File.Open(path, FileMode.Open, FileAccess.Read, FileShare.Read); } fileChannel.Seek(_NUM, SeekOrigin.Begin); buffer.Clear(); tmp.Clear(); while (fileChannel.Read(tmp) > _NUM) { tmp.Flip(); if (tmp.Remaining() > buffer.Capacity - buffer.Position) { ByteBuffer next = ByteBuffer.AllocateDirect(Math.Max(buffer.Capacity * _NUM, tmp.Remaining())); buffer.Flip(); next.Put(buffer); buffer = next; } buffer.Put(tmp); tmp.Clear(); } buffer.Flip(); } catch (IOException e) { throw new UncheckedIOException(e); } }
private void OnHPChange(int amount) { if (User.SquaredDistanceTo(x, y) < HEARING_DISTANCE_SQ) { if (amount > _NUM) { AddTextIndicator(_STR + amount, NotificationType.POSITIVE); } else { AddTextIndicator(amount.ToString(), NotificationType.NEGATIVE); } } }
private FileInfo ResolveName(string name) { FileInfo file; if (name.StartsWith(ROOT)) { file = new FileInfo(Path.Combine(myTemplateRootFolder.FullName, name.Substring(ROOT.Length))); } else if (myLastTemplateFolders != null && myLastTemplateFolders.Count > 0) { file = new FileInfo(Path.Combine(myLastTemplateFolders.Peek().FullName, name)); } else { file = new FileInfo(Path.Combine(myTemplateRootFolder.FullName, name)); } return file.Directory.GetFiles().FirstOrDefault(f => f.Name == file.Name); }
public void InitToolTip() { if (ttmanager == null) { ttmanager = ToolTipManager.SharedInstance(); ttmanager.RegisterComponent(map); ttmanager.SetEnabled(_BOOL); return; } if (map != null) { map.ToolTipText = null; } }
public static string[] DecodeArray(string encodedArray) { string[] items = encodedArray.Split(_STR); List<string> list = new List<string>(); for (int i = _NUM; i < items.Length; i++) { string item = items[i]; item = item.Replace(_STR, _STR); // Assumed gsub is similar to Replace in C# if (!item.Equals(_STR)) { list.Add(item); } } return list.ToArray(); }
public bool ComputeAngleOffset() { if (mFinished) { return _BOOL; } long systemClock = AnimationUtils.CurrentAnimationTimeMillis(); long timePassed = systemClock - mStartTime; if (timePassed < mDuration) { switch (mMode) { case SCROLL_MODE: float sc = (float)timePassed / mDuration; mCurrAngle = mStartAngle + (float)Math.Round(mDeltaAngle * sc); break; case FLING_MODE: float timePassedSeconds = timePassed / _NUM; float distance; if (mVelocity < _NUM) { distance = mCoeffVelocity * mVelocity * timePassedSeconds - (mDeceleration * timePassedSeconds * timePassedSeconds / _NUM); } else { distance = -mCoeffVelocity * mVelocity * timePassedSeconds - (mDeceleration * timePassedSeconds * timePassedSeconds / _NUM); } mCurrAngle = mStartAngle - Math.Sign(mVelocity) * (float)Math.Round(distance); break; } return _BOOL; } else { mFinishe
private void SendResource(Guid uuid, object resource, long length, Stream is) { Debug.Assert(uuid != null); Debug.Assert(resource != null); Debug.Assert(length >= _NUM); Debug.Assert(is != null); Debug.Assert(!sentStatus); long bytesWritten = _NUM; long begin = Stopwatch.GetTimestamp(); var os = s.GetOutputStream(); try { using (var dos = new BinaryWriter(os)) { dos.Write((byte)StatusEnum.OK.Get()); dos.Write(length); dos.Flush(); bytesWritten += _NUM + sizeof(long); sentStatus = true; } long checksum; const int BUFSIZE = Bytes.kilobyte32 * _NUM; using (var cis = new CheckedInputStream(new BufferedStream(is), new Adler32())) { byte[] buff = new byte[BUFSIZE]; while (true) { int read = cis.Read(buff, _NUM, BUFSIZE); if (read <= _NUM) break; os.Write(buff, _NUM, read); bytesWritten += read; } checksum = cis.Checksum.Value; } using (
public long Sigignore() { return long.Parse(fields[_NUM]); }
private static byte[] GenerateSeed() { try { using (var seedBuffer = new MemoryStream()) using (var seedBufferOut = new BinaryWriter(seedBuffer)) { seedBufferOut.Write(DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()); seedBufferOut.Write(DateTime.UtcNow.Ticks); seedBufferOut.Write(Environment.ProcessId); seedBufferOut.Write(Environment.UserName.GetHashCode()); // Placeholder for UID seedBufferOut.Write(Encoding.UTF8.GetBytes(BUILD_FINGERPRINT_AND_DEVICE_SERIAL)); return seedBuffer.ToArray(); } } catch (IOException e) { throw new SecurityException(_STR, e); } }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public string Render(ValueExpr theExpr) { theExpr.Visit(this); return mBuffer.ToString(); }
public void StopSampling() { if (mSamplingCounter.DecrementAndGet() == _NUM) { mHandler.StopSamplingThread(); AddFinalSample(); } }
public static void ReverseWinding(List<Vector2> points) { if (points == null) throw new ArgumentNullException("points"); int size = points.Count; if (size == _NUM || size == _NUM) return; points.Reverse(); }
public DSignCsr(Form parent, PKCS10CertificationRequest pkcs10Csr, File csrFile, PrivateKey signPrivateKey, KeyPairType signKeyPairType, X509Certificate verificationCertificate, Provider provider) { base(parent, DialogModality.DocumentModal); this.pkcs10Csr = pkcs10Csr; this.csrFile = csrFile; this.signPrivateKey = signPrivateKey; this.signKeyPairType = signKeyPairType; this.verificationCertificate = verificationCertificate; this.provider = provider; this.Text = res.GetString(_STR); InitComponents(); }
protected static void Init() { string notificationFactoryClassName = null; try { notificationFactoryClassName = System.GetProperty(NOTIFICATION_FACTORY_NAME); } catch (SecurityException e) { throw new SystemException(e); } if (notificationFactoryClassName != null) { Type nfc; try { nfc = Type.GetType(notificationFactoryClassName); factory = (INotificationManagerFactory)nfc.GetConstructor(Type.EmptyTypes).Invoke(null); } catch (TypeLoadException | TargetInvocationException | MemberAccessException e) { throw new SystemException(e); } } else { factory = new SyslogNotificationFactory(); } }
private int AwaitDone(bool timed, long nanos) { long deadline = timed ? Stopwatch.GetTimestamp() + nanos : _NUM; WaitNode q = null; bool queued = _BOOL; for (;;) { if (Thread.CurrentThread.IsAlive == false) // Check for thread interruption { RemoveWaiter(q); throw new ThreadInterruptedException(); } int s = state; if (s > COMPLETING) { if (q != null) q.thread = null; return s; } else if (s == COMPLETING) { Thread.Yield(); } else if (q == null) { q = new WaitNode(); } else if (!queued) { queued = UNSAFE.CompareAndSwapObject(this, waitersOffset, q.next = waiters, q); } else if (timed) { nanos = deadline - Stopwatch.GetTimestamp(); if (nanos <= _NUM) { RemoveWaiter(q); return state; } LockSupport.ParkNanos(this, nanos); } else { LockSupport.Park(this
private bool LinkFirst(Node<E> node) { if (count >= capacity) return false; Node<E> f = first; node.Next = f; first = node; if (last == null) last = node; else f.Prev = node; ++count; notEmpty.Signal(); return true; }
public static double Clamp(double value, double low, double high) { return Math.Min(Math.Max(value, low), high); }
public static string ParseVolumeHostDirectory(string volume) { if (string.IsNullOrEmpty(volume)) { return volume; } if (!volume.Contains(HOST_CONTAINER_DIR_DELIMITER)) { return volume; } string[] hostContainerDir = volume.Split(new[] { HOST_CONTAINER_DIR_DELIMITER }, StringSplitOptions.None); if (hostContainerDir.Length != _NUM) { throw new ArgumentException(_STR); } string hostDir = hostContainerDir[_NUM]; return hostDir; }
private string FmtTime(double time) { return Utilities.Pad(timeFormatter.Format(time) + _STR, _NUM); }
public override object[] ToArray() { object[] result = new object[elementCount]; Array.Copy(elementData, _NUM, result, _NUM, elementCount); return result; }
public static string Right(string s, int width, char fillChar) { if (s.Length >= width) { return s; } StringBuilder sb = new StringBuilder(width); for (int i = width - s.Length; --i >= 0; ) { sb.Append(fillChar); } sb.Append(s); return sb.ToString(); }
public synchronized bool AddAll(IEnumerable<E> collection) { modCount++; var array = collection.ToArray(); int numNew = array.Length; EnsureCapacityHelper(elementCount + numNew); Array.Copy(array, 0, elementData, elementCount, numNew); elementCount += numNew; return numNew != 0; }
public override void Update(DefaultApplicationState transState) { NewCheckpoint(transState.GetState(), transState.GetStateHash(), transState.GetLastCheckpointCID()); SetLastCheckpointCID(transState.GetLastCheckpointCID()); }
public static byte[] StringToUtf8Bytes(string str) { int len = str.Length; byte[] bytes = new byte[len * _NUM]; int outAt = _NUM; for (int i = _NUM; i < len; i++) { char c = str[i]; if (c != _NUM && c < _NUM) { bytes[outAt] = (byte)c; outAt++; } else if (c < _NUM) { bytes[outAt] = (byte)(((c >> _NUM) & _NUM) | _NUM); bytes[outAt + _NUM] = (byte)((c & _NUM) | _NUM); outAt += _NUM; } else { bytes[outAt] = (byte)(((c >> _NUM) & _NUM) | _NUM); bytes[outAt + _NUM] = (byte)(((c >> _NUM) & _NUM) | _NUM); bytes[outAt + _NUM] = (byte)((c & _NUM) | _NUM); outAt += _NUM; } } byte[] result = new byte[outAt
private List<KeyValuePair<string, object>> ToPairList(Dictionary<string, object> bindings) { var blist = new List<KeyValuePair<string, object>>(); foreach (var pair in bindings) { blist.Add(new KeyValuePair<string, object>(pair.Key, pair.Value)); } return blist; }
public override bool ValidateLabel(string label) { if (label == null) throw new ArgumentNullException("_STR"); return !labels.Contains(label); }
public void AddMessageObserver(MessageObserver observer) { if (observer == null) { throw new ArgumentNullException(); } else if (messageObservers == null) { InitMessageObserverList(); } messageObservers.Add(observer); }
public void Show(char initialChar) { initialString.Append(initialChar); Show(); if (Environment.OSVersion.Platform != PlatformID.Unix) // Assuming _STR corresponds to a non-Unix platform { SetEditText(initialString.ToString()); } }
private static void Byte2Hex(byte b, StringBuilder buf) { int high = (b >> 4) & 0x0F; int low = b & 0x0F; buf.Append(HEX_DIGITS[high]); buf.Append(HEX_DIGITS[low]); }
public E Remove(int index) { hashCodeUpToDate = _BOOL; modCount++; E oldValue = elementData[index]; int numMoved = size - index - _NUM; if (numMoved > _NUM) { Array.Copy(elementData, index + _NUM, elementData, index, numMoved); } elementData[--size] = default(E); return oldValue; }
public static DoubleVector Rnorm(int n, double mean, double sd, Random random) { if (sd < _NUM) throw new ArgumentException(_STR); if (sd == _NUM) return new DoubleVector(n, mean); DoubleVector v = new DoubleVector(n); for (int i = _NUM; i < n; i++) v.Set(i, (random.NextGaussian() + mean) / sd); return v; }
private PdfObject ReadCompressedStream(PdfObject rootObj, int pointer, PdfFileReader currentPdfFile, ObjectReader objectReader, PdfObject linearObj) { while (pointer != -_NUM) { MovePointer(pointer); byte[] raw = objectReader.ReadObjectData(-_NUM, null); StringBuilder objectName = new StringBuilder(); char current1, last = _STR; int matched = _NUM, i1 = _NUM; while (i1 < raw.Length) { current1 = (char)raw[i1]; if (current1 == _NUM || current1 == _NUM) { current1 = _STR; } if (current1 == _STR && last == _STR) { matched = _NUM; } else if (current1 == pattern[matched]) { matched++; } else { matched = _NUM; objectName.Append(current1); } if (matched == _NUM) { break; } last = current1; i1++; } objectName.Append(_STR); PdfObject pdfObject = new CompressedObject(objectName.ToString()); pdfObject.SetCompressedStrea
protected void WarningOccurred(int code) { cbLock.Lock(); try { if (code < _NUM || code > MAX_WARNING) { throw new InternalError(_STR); } ProcessWarningOccurred(_STR, code.ToString()); } finally { cbLock.Unlock(); } }
public bool IsKnownSub(string subName) { return KNOWN_SUBS.Contains(subName); }
public string DiffText1(LinkedList<Diff> diffs) { StringBuilder text = new StringBuilder(); foreach (Diff aDiff in diffs) { if (aDiff.Operation != Operation.INSERT) { text.Append(aDiff.Text); } } return text.ToString(); }
public bool IsStored() { return Math.Sign(id) != -_NUM; }
using System; using System.IO; using System.Numerics; public static BigInteger SizeOfDirectoryAsBigInteger(DirectoryInfo directory) { CheckDirectory(directory); FileInfo[] files = directory.GetFiles("*", SearchOption.AllDirectories); if (files == null || files.Length == 0) { return BigInteger.Zero; } BigInteger size = BigInteger.Zero; foreach (FileInfo file in files) { try { if (!IsSymlink(file.FullName)) { size += new BigInteger(file.Length); } } catch (IOException) { // Handle exception if necessary } } return size; }
public bool IsSearchLightBit(int bit) { if (nodeType != SMINI) { log.Error(_STR); return _BOOL; } if (bit < _NUM || bit > _NUM) { log.Error(_STR + bit.ToString()); return _BOOL; } if (locSearchLightBits[bit] == _NUM) { return _BOOL; } return _BOOL; }
public AgeFileFilter(DateTime cutoffDate, bool acceptOlder) : this(cutoffDate.Ticks, acceptOlder) { }
public void CalcMajorTick() { majorTick = _NUM; majorTickCount = (int)Math.Round(Math.Log10(maxTick / minTick)) + _NUM; }
public bool Next() { try { return _rs.Next(); } catch (SqlException sqle) { throw new GenericDataSourceException(_STR + _sql, sqle); } }
public void Put(string sample, HiddenAttribute attribute, object value) { Put(sample, attribute.ToString(), value); }
void PostMessage(List<JetstreamMessage> msgs, DispatchQueueStats stats) { m_msgRcvCounter.AddAndGet(msgs.Count); if (monitorUpstreamQueueAndPauseTraffic() == UpstreamQueueState.FULL && m_paused.Get()) { if (!m_msgProcessor.HasAvailableCapacity(m_twentyPercentCapacity)) { m_totalMsgsDropped.Increment(); return; } } List<Runnable> requests = new List<Runnable>(msgs.Count); for (int i = _NUM, t = msgs.Count; i < t; i++) { JetstreamMessage tm = msgs[i]; if (tm.GetTopic() == null) { m_totalMsgsDropped.Increment(); if (LOGGER.IsDebugEnabled()) { LOGGER.Debug(_STR); } continue; } MessageServiceRequest msr = new MessageServiceRequest(tm); msr.SetPriority(tm.GetPriority()); msr.SetSequenceid(tm.GetSequenceId()); if (msr.GetPriority() == JetstreamMessage.INTERNAL_MSG_PRIORITY) { if (!m_internalMsgProcessor.ProcessRequest(msr)) { m_totalMsgsDropped.Increment(); th
public bool UnsetOrdering(object first, object second) { DigraphNode firstPONode = (DigraphNode)poNodes[first]; DigraphNode secondPONode = (DigraphNode)poNodes[second]; return firstPONode.RemoveEdge(secondPONode) || secondPONode.RemoveEdge(firstPONode); }
public string ConvertSWFToHTML(Stream input) { StringWriter out1 = new StringWriter(); using (PrintWriter output = new PrintWriter(out1)) { TagParser parser = new TagParser(this); SWFReader reader = new SWFReader(parser, input); reader.ReadFile(); input.Close(); string headerStr = ""; // Add logic to retrieve headerStr if needed string ret = _STR + (string.IsNullOrEmpty(headerStr) ? _STR : _STR + headerStr + _STR) + out1.ToString() + _STR; return ret; } }
public void Write(ClassFile classFile, FileInfo file) { using (FileStream fOut = file.OpenWrite()) { Write(classFile, fOut); } }
public Shape GreatCircleLineShape() { GeneralPath path = null; if (llpts != null && llpts.Length >= _NUM && llpts.Length % _NUM == _NUM) { double y1 = llpts[_NUM]; double x1 = llpts[_NUM]; path = new GeneralPath(GeneralPath.WIND_EVEN_ODD, llpts.Length / _NUM); bool firstCoords = _BOOL; for (int i = _NUM; i < llpts.Length; i += _NUM) { double y2 = llpts[i]; double x2 = llpts[i + _NUM]; double radDist = GreatCircle.SphericalDistance(y1, x1, y2, x2); int nsegs = (int)(ProjMath.RadToDeg(radDist) * segsPerDeg); if (nsegs == _NUM) { nsegs = _NUM; } double[] coords = GreatCircle.GreatCircle(y1, x1, y2, x2, nsegs, _BOOL); if (returnDegrees) { ProjMath.ArrayRadToDeg(coords);
public Connection(InetSocketAddress peerAddress) : this(peerAddress, null) { }
protected static List<object> ConvertToList(object[] anArray) { if (anArray == null) { return null; } var list = new List<object>(anArray.Length); foreach (var element in anArray) { list.Add(element); } return list; }
protected synchronized void NotifyVersion(SprogVersion v) { ver = v; foreach (var listener in GetCopyOfListeners()) { try { listener.NotifyVersion(ver); versionListeners.Remove(listener); } catch (Exception e) { log.Warn(_STR + listener + _STR + e); } } }
protected void AcceptDrop(int dropOperation) { DropTargetContextPeer peer = GetDropTargetContextPeer(); if (peer != null) { peer.AcceptDrop(dropOperation); } }
public void Clear() { oredCriteria.Clear(); orderByClause = null; distinct = _BOOL; }
public override string ToString() { string result = base.ToString(); if (m_CapabilitiesFilter != null) { InitCapabilities(); if (m_Capabilities != null) { if (m_Capabilities.SupportsMaybe(m_CapabilitiesFilter) && !m_Capabilities.Supports(m_CapabilitiesFilter)) { result = _STR + MAYBE_SUPPORT + _STR + result + _STR; } else if (!m_Capabilities.Supports(m_CapabilitiesFilter)) { result = _STR + NO_SUPPORT + _STR + result + _STR; } } } return result; }
public ConfigurationError(string msg, Exception x) : base(msg) { this.exception = x; }
public void SplitNode(KDTreeNode node, int numNodesCreated, double[][] nodeRanges, double[][] universe) { CorrectlyInitialized(); if (node.m_NodesRectBounds == null) { node.m_NodesRectBounds = new double[_NUM][]; for (int i = _NUM; i < node.m_NodeRanges.Length; i++) { node.m_NodesRectBounds[MIN][i] = node.m_NodeRanges[i][MIN]; node.m_NodesRectBounds[MAX][i] = node.m_NodeRanges[i][MAX]; } } double maxRectWidth = double.NegativeInfinity; double maxPtWidth = double.NegativeInfinity; double tempval; int splitDim = -_NUM; int classIdx = m_Instances.ClassIndex(); for (int i = _NUM; i < node.m_NodesRectBounds[_NUM].Length; i++) { if (i == classIdx) continue; tempval = node.m_NodesRectBounds[MAX][i] - node.m_NodesRectBounds[MIN][i]; if (m_NormalizeNodeWidth) { tempval = temp
public DateTime ModifiedDate(string path) { lock (lockObject) { if (!connected) { throw new InvalidOperationException(_STR); } if (!authenticated) { throw new InvalidOperationException(_STR); } communication.SendFTPCommand(_STR + path); FTPReply r = communication.ReadFTPReply(); TouchAutoNoopTimer(); if (!r.IsSuccessCode()) { throw new FTPException(r); } string[] messages = r.GetMessages(); if (messages.Length != _NUM) { throw new FTPIllegalReplyException(); } else { try { return MDTM_DATE_FORMAT.Parse(messages[_NUM]); } catch (FormatException) { throw new FTPIllegalReplyException(); } } } }
public bool ImportPkcs8() { return jrbPkcs8.Selected; }
public ControlFlowGraph Run(CompilationUnitTree root, ProcessingEnvironment env, MethodTree tree, ClassTree classTree) { var underlyingAST = new CFGMethod(tree, classTree); return Run(root, env, underlyingAST); }
private bool IsValidEngine() { if (HasFlag(~(CLAN_ENGINE | TANK_ENGINE | LARGE_ENGINE | SUPERHEAVY_ENGINE | SUPPORT_VEE_ENGINE))) { Problem.Append(_STR + EngineFlags); return _BOOL; } if (HasFlag(SUPPORT_VEE_ENGINE) && (EngineType != STEAM) && (EngineType != COMBUSTION_ENGINE) && (EngineType != BATTERY) && (EngineType != FUEL_CELL) && (EngineType != SOLAR) && (EngineType != FISSION) && (EngineType != NORMAL_ENGINE) && (EngineType != NONE)) { Problem.Append(_STR); return _BOOL; } if ((((int)Math.Ceiling(EngineRating / _NUM) > ENGINE_RATINGS.Length) || (EngineRating < _NUM)) && !HasFlag(SUPPORT_VEE_ENGINE)) { Problem.Append(_STR + EngineRating); return _BOOL; } if ((EngineRating > _NUM) && !HasFlag(SUPPORT_VEE_ENGINE)) { EngineFlags |= LARGE_ENGINE; } switch (EngineType) { case COMBUSTION_ENG
public static void AssertEquals(string message, float expected, float actual, float delta) { if (float.IsInfinity(expected)) { if (expected != actual) FailNotEquals(message, expected, actual); } else if (Math.Abs(expected - actual) > delta) { FailNotEquals(message, expected, actual); } } private static void FailNotEquals(string message, float expected, float actual) { throw new Exception($"{message}. Expected:<{expected}> but was:<{actual}>"); }
private void CalculateD(double[] b) { int length = mExtremalIndices.Count - _NUM; mD = new double[length]; for (int k = _NUM; k < length; k++) { mD[k] = b[k] * (mGrid.GetCosineFrequencyGrid()[mExtremalIndices[k]] - mGrid.GetCosineFrequencyGrid()[mExtremalIndices[length]]); } }
public static byte[] Base64Decode(string coded) { if (coded == null) return null; byte[] src = System.Text.Encoding.UTF8.GetBytes(coded); int len = src.Length; int dlen = len - (len / _NUM); dlen = (dlen >> _NUM) + (dlen >> _NUM); int rem = _NUM; if (_NUM == src[len - _NUM]) rem++; if (_NUM == src[len - _NUM]) rem++; dlen -= rem; byte[] dst = new byte[dlen]; int pos = _NUM; int dpos = _NUM; int col = _NUM; len -= _NUM; while (pos < len) { byte b0 = _base64de[src[pos++]]; byte b1 = _base64de[src[pos++]]; byte b2 = _base64de[src[pos++]]; byte b3 = _base64de[src[pos++]]; if (B64INV == b0 || B64INV == b1 || B64INV == b2 || B64INV == b3) throw new Exception(_ST
private static Properties LoadProperties(string propertiesFile) { Properties properties = new Properties(); try { using (var stream = new FileStream(propertiesFile, FileMode.Open, FileAccess.Read)) { properties.Load(stream); } } catch (IOException e) { throw new RuntimeException(_STR, e); } return properties; }
public TextEditor ReplaceAll(Pattern pattern, Replacement replacement) { Matcher m = pattern.Matcher(text); int lastIndex = _NUM; StringBuilder sb = new StringBuilder(); while (m.Find()) { sb.Append(text.Substring(lastIndex, m.Start())); sb.Append(replacement.Replacement(m)); lastIndex = m.End(); } sb.Append(text.Substring(lastIndex, text.Length - lastIndex)); text = sb.ToString(); return this; }
public Dictionary<string, Dictionary<string, string>> List(string serviceName) { var results = new Dictionary<string, Dictionary<string, string>>(); ServiceInfo[] infos = jmdns.List(_STR + serviceName + _STR); foreach (var info in infos) { _log.Info(_STR, info); var hostAddrs = info.GetHostAddresses(); var buf = new StringBuilder(); foreach (var hostAddr in hostAddrs) { buf.Append(hostAddr); buf.Append(_STR); } string key = buf.ToString(); _log.Info(_STR, key); var values = new Dictionary<string, string>(); foreach (var prop in info.GetPropertyNames()) { string value = System.Text.Encoding.UTF8.GetString(info.GetPropertyBytes(prop)); _log.Info(_STR, prop, value); values[prop] = value; } if (values.Count == 0) { _log.Warn(_STR, key); } results[key] = values.Count == 0 ? null : values; } return results; }
[SuppressMessage("Warnings", "STR")] public override LazyFutureStream<U> Concat(IEnumerable<U> other) { var thisStream = this.ToStream(); var otherStream = other.ToStream(); return FromStream(thisStream.Concat(otherStream)); }
private int MoveComponents(Container target, int x, int y, int width, int height, int rowStart, int rowEnd, bool ltr, bool useBaseline, int[] ascent, int[] descent) { switch (newAlign) { case Alignments.LEFT: x += ltr ? _NUM : width; break; case Alignments.CENTER: x += width / _NUM; break; case Alignments.RIGHT: x += ltr ? width : _NUM; break; case Alignments.LEADING: break; case Alignments.TRAILING: x += width; break; } int maxAscent = _NUM; int nonbaselineHeight = _NUM; int baselineOffset = _NUM; if (useBaseline) { int maxDescent = _NUM; for (int i = rowStart; i < rowEnd; i++) { Component m = target.GetComponent(i); if (mVisible) { if (ascent[i] >= _NUM) { maxAscent = Math.Max(maxAscent, ascent[i]); maxDescent = Math.Max(maxDescent, desc
public override void ReadExternal(BinaryReader reader) { path = IgfsUtils.ReadPath(reader); blockSize = reader.ReadInt32(); grpBlockSize = reader.ReadInt64(); len = reader.ReadInt64(); props = U.ReadStringMap(reader); accessTime = reader.ReadInt64(); modificationTime = reader.ReadInt64(); flags = reader.ReadByte(); }
public StandardXYItemLabelGenerator() : this(DEFAULT_ITEM_LABEL_FORMAT, NumberFormat.GetInstance(), NumberFormat.GetInstance()) { }
public Vector2(double direction) { this.X = Math.Cos(direction); this.Y = Math.Sin(direction); }
public static Dictionary<string, object> ConvertDocumentFileToFile(DispatchContext dctx, Dictionary<string, object> context) { XMultiComponentFactory xMultiComponentFactory = null; string stringUrl = context[_STR] as string; string stringConvertedFile = context[_STR] as string; string inputMimeType = context[_STR] as string; string outputMimeType = context[_STR] as string; string oooHost = context[_STR] as string; string oooPort = context[_STR] as string; try { xMultiComponentFactory = OpenOfficeWorker.GetRemoteServer(oooHost, oooPort); FileInfo inputFile = new FileInfo(stringUrl); long fileSize = inputFile.Length; using (FileStream fis = new FileStream(inputFile.FullName, FileMode.Open, FileAccess.Read)) using (MemoryStream baos = new MemoryStream((int)fileSize)) { int c; while ((c = fis.ReadByte()) != -1) { baos.WriteByte((byte)c); } OpenOfficeByteArrayInputStream oobais = new OpenOfficeByteArrayInputStream
public double AdjustedPow10(double val) { bool negFlag = (val < _NUM); if (negFlag) { val = -val; } double res; if (val < _NUM) { res = (Math.Pow(_NUM, val + _NUM) - _NUM) / _NUM; } else { res = Math.Pow(_NUM, val); } return negFlag ? -res : res; }
public override void Clear() { columnList.ForEach(_ => { }); }
public bool IsLastInvoice() { string cm = GetCostingMethod(); return cm != null && cm.Equals(COSTINGMETHOD_LastInvoice); }
public static void ProxyPort(int port) { string portValue = port.ToString(); SetProperty(_STR, portValue); SetProperty(_STR, portValue); }
public static string FetchClusterName(string clusterCgName) { string clusterName = null; if (!string.IsNullOrEmpty(clusterCgName)) { string[] tmp = clusterCgName.Split(SPLITTER); clusterName = tmp[_NUM]; } return clusterName; }
private void FetchMyServiceCardsFromServer() { RetroCallback retroCallback = new RetroCallback(this); retroCallback.SetRequestId(HttpConstants.ApiResponseCodes.GET_MY_SERVICES); retroCallbackList.Add(retroCallback); mYeloApi.GetMyServiceCards(retroCallback); }
public DViewAsymmetricKeyFields(Form parent, string title, RSAPublicKey rsaPublicKey) : base(parent, title, true) { key = rsaPublicKey; InitFields(); }
public List<ColourChange> SampleConditionalMigrationEvents2(int parentColour, double parentHeight, int childColour, double childHeight, double[] m) { List<ColourChange> colourChanges = new List<ColourChange>(); if (parentHeight < childHeight) { throw new ArgumentException(_STR + parentHeight + _STR + childHeight + _STR); } try { int currentColour = parentColour; double currentHeight = parentHeight; while (/* _BOOL */) // Replace with actual condition { ColourChange nextEvent = RandomConditionalMigrationEvent(currentColour, currentHeight, childColour, childHeight, m); currentHeight = nextEvent.GetTime(); currentColour = nextEvent.GetColourAbove(); colourChanges.Add(nextEvent); } } catch (NoEventException nee) { // Handle the exception as needed } ReverseColourChangeList(colourChanges, parentColour); return colourChanges; }
public static bool IsAttribute(object objValue) { if (objValue is string stringValue) { if (stringValue.StartsWith(ATTRIBUTE_START) && stringValue.EndsWith(ATTRIBUTE_END)) { return _BOOL; } } return _BOOL; }
public static string DecodeASCII(byte[] key, int off, int len) { byte[] b = new byte[len]; Array.Copy(key, off, b, _NUM, len); for (int i = _NUM; i < len; i++) { b[i] = DecodeByte(b[i]); } try { return System.Text.Encoding.GetEncoding(_STR).GetString(b); } catch (EncoderFallbackException e) { throw new InvalidOperationException(e.Message, e); } }
public override void ValueChanged(TreeSelectionEvent e) { if (preventEvent) { return; } if (mainFrame != null) { List<Operator> selectedOperators = GetSelectedOperators(); if (selectedOperators != null && selectedOperators.Count > 0) { mainFrame.SelectOperators(selectedOperators); } } }
public synchronized void RemovePropertyChangeListener(PropertyChangeListener listener) { listeners.Remove(listener); }
private bool TransferAfterCancelledWait(Node node) { if (CompareAndSetWaitStatus(node, Node.CONDITION, _NUM)) { Enqueue(node); return _BOOL; } while (!IsOnSyncQueue(node)) { Thread.Yield(); } return _BOOL; }
private static Intent CreateShareIntent(Context context, string shareText) { var shareIntent = new Intent(Intent.ActionSend); shareIntent.PutExtra(Intent.ExtraSubject, context.GetString(Resource.String.share_subject)); shareIntent.PutExtra(Intent.ExtraText, shareText); shareIntent.SetType("_STR"); return shareIntent; }
public static AtomicIntegerFieldUpdater<U> NewUpdater<U>(Type tclass, string fieldName) { if (UnsafeHolder.IsAvailable()) { return new AtomicIntegerFieldUpdaterImpl<U>(tclass, fieldName); } return AtomicIntegerFieldUpdater.NewUpdater<U>(tclass, fieldName); }
private bool TryStep(double t0, double[] y0, double step, int k, double[] scale, double[][] f, double[] yMiddle, double[] yEnd) { int n = sequence[k]; double subStep = step / n; double subStep2 = _NUM * subStep; double t = t0 + subStep; for (int i = _NUM; i < y0.Length; ++i) { yEnd[i] = y0[i] + subStep * f[_NUM][i]; } f[_NUM] = ComputeDerivatives(t, yEnd); double[] yTmp = (double[])y0.Clone(); for (int j = _NUM; j < n; ++j) { if (_NUM * j == n) { Array.Copy(yEnd, _NUM, yMiddle, _NUM, y0.Length); } t += subStep; for (int i = _NUM; i < y0.Length; ++i) { double middle = yEnd[i]; yEnd[i] = yTmp[i] + subStep2 * f[j][i]; y
public Dictionary<string, object> ConvertDataToObjects(Dictionary<string, string> data) { Dictionary<string, object> results = new Dictionary<string, object>(); if (data != null) { foreach (var key in data.Keys) { results[key] = data[key]; } } return results; }
private static (string, string) OffsetLSR(long offset, ITranslationEnvironment environment, List<ReilInstruction> instructions, string registerNodeValue1, string registerNodeValue2, string immediateNodeValue) { string address = environment.GetNextVariableString(); string tmpVar1 = environment.GetNextVariableString(); string tmpVar2 = environment.GetNextVariableString(); string index = environment.GetNextVariableString(); long baseOffset = offset; instructions.Add(ReilHelpers.CreateBsh(baseOffset++, dw, registerNodeValue2, dw, _STR + immediateNodeValue, qw, tmpVar1)); instructions.Add(ReilHelpers.CreateAnd(baseOffset++, qw, tmpVar1, dw, dWordBitMask, dw, index)); instructions.Add(ReilHelpers.CreateAdd(baseOffset++, dw, registerNodeValue1, dw, index, dw, tmpVar2)); instructions.Add(ReilHelpers.CreateAnd(baseOffset++, dw, tmpVar2, dw, dWordBitMask, dw, address)); return (address, registerNodeValue1); }
public static RowLimitSpec BuildRowLimitSpec(EsperEPL2GrammarParser.RowLimitContext ctx) { object numRows; object offset; if (ctx.o != null) { numRows = ParseNumOrVariableIdent(ctx.n1, ctx.i1); offset = ParseNumOrVariableIdent(ctx.n2, ctx.i2); } else if (ctx.c != null) { offset = ParseNumOrVariableIdent(ctx.n1, ctx.i1); numRows = ParseNumOrVariableIdent(ctx.n2, ctx.i2); } else { numRows = ParseNumOrVariableIdent(ctx.n1, ctx.i1); offset = null; } int? numRowsInt = null; string numRowsVariable = null; if (numRows is string) { numRowsVariable = (string)numRows; } else { numRowsInt = (int)numRows; } int? offsetInt = null; string offsetVariable = null; if (offset is string) { offsetVariable = (string)offset; } else { offset
public int FirstCommonLayer(BrdItem pOther) { int maxFirstLayer = Math.Max(FirstLayer(), pOther.FirstLayer()); int minLastLayer = Math.Min(LastLayer(), pOther.LastLayer()); if (maxFirstLayer > minLastLayer) { return -_NUM; } return maxFirstLayer; }
public ItemStack RemoveItems(ItemStack drive, ItemStack stack, int amountWanted) { if (GetMaxKilobits(drive) == -_NUM) return null; int stored = GetAmountStored(drive, stack); int amountGiven = Math.Min(amountWanted, stored); if (amountGiven > _NUM) { SetAmountStored(drive, stack, stored - amountGiven); stack.StackSize += amountGiven; MarkDirty(drive); } return stack; }
public void SaveIndexes() { List<Index> toSave = new List<Index>(); lock (this) { object[] valueTable = this.indexes.valueTable; for (int i = _NUM, l = valueTable.Length; i < l; i++) { Index index = (Index)valueTable[i]; if (index != null) toSave.Add(index); } } bool allSaved = _BOOL; for (int i = _NUM, length = toSave.Count; i < length; i++) { Index index = toSave[i]; ReadWriteMonitor monitor = index.monitor; if (monitor == null) continue; try { monitor.EnterRead(); if (index.HasChanged()) { if (monitor.ExitReadEnterWrite()) { try { SaveIndex(index); } catch (IOException e) { if (JobManager.VERBOSE) { Util.Verbose(_STR, Console.Error); e.PrintStackTrace(); } allSaved = _BOOL; } finally { monitor.ExitWriteEnterRead(); }
public void AddItem(Artist artist, int position) { if (artist == null) throw new ArgumentNullException(_STR); if (position < GetItemCount() || position > GetItemCount()) throw new ArgumentOutOfRangeException(_STR); artists.Insert(position, artist); NotifyItemInserted(position); }
public Process ExecuteAsync(CommandLine command, Dictionary<string, string> environment) { if (workingDirectory != null && !workingDirectory.Exists) { throw new IOException(workingDirectory + _STR); } return ExecuteInternal(command, environment, workingDirectory, streamHandler, null); }
public void ExpandAndSelectIfExists(RepositoryLocation location) { if (location.Parent() != null) { ExpandIfExists(location.Parent(), location.GetName()); } else { ExpandIfExists(location, null); } ScrollPathToVisible(GetSelectionPath()); }
public void NextToken() { previousLine = line; previousColumn = column; while (pos < matcher.RegionStart) { if (text[pos] == _STR) { ++line; column = _NUM; } else { ++column; } ++pos; } if (matcher.RegionStart == matcher.RegionEnd) { currentToken = _STR; } else { matcher.UsePattern(TOKEN); if (matcher.LookingAt()) { currentToken = matcher.Group(); matcher.Region(matcher.End(), matcher.RegionEnd); } else { currentToken = text[pos].ToString(); matcher.Region(pos + _NUM, matcher.RegionEnd); } } SkipWhitespace(); }
public static void SaveProvisioningValidity(Context context, long validity) { if (validity <= _NUM) { return; } long next = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() + validity; var preferences = context.GetSharedPreferences(AndroidRegistryFactory.RCS_PREFS_NAME, FileCreationMode Private); var editor = preferences.Edit(); editor.PutLong(REGISTRY_PROVISIONING_VALIDITY, validity); editor.PutLong(REGISTRY_PROVISIONING_EXPIRATION, next); editor.Commit(); }
public void Encode(Stream outStream) { var tmp = new DerOutputStream(); if (this.extensionValue == null) { this.extensionId = PKIXExtensions.ReasonCode_Id; this.critical = _BOOL; EncodeThis(); } base.Encode(tmp); outStream.Write(tmp.ToByteArray(), 0, tmp.ToByteArray().Length); }
public DriverTask UnexportVolumesFromInitiators(List<Initiator> initiators, List<StorageVolume> volumes) { LOG.Info(_STR); DriverTask task = new DellSCDriverTask(_STR); ScServer server = null; StringBuilder errBuffer = new StringBuilder(); int volumesUnmapped = _NUM; foreach (var volume in volumes) { string ssn = volume.GetStorageSystemId(); bool isSnapshot = volume.GetNativeId().Count(c => c == _STR) == _NUM; try { StorageCenterAPI api = connectionManager.GetConnection(ssn); ScVolume scVol = null; if (isSnapshot) { scVol = api.FindReplayView(volume.GetNativeId()); if (scVol != null) { api.DeleteVolume(scVol.InstanceId); volumesUnmapped++; continue; } } else { scVol = api.GetVolume(volume.GetNativeId()); } if (scVol == null) { throw new DellSCDriverException(string.Format(_STR, volume.GetNativeId())); } if (server == null) { server = F
public async Task CreateClusterAsync(string projectId, ClusterCreateSpec clusterCreateSpec, IAsyncCallback<Task> responseCallback) { string path = string.Format(_STR, GetBasePath(), projectId); await CreateObjectAsync(path, SerializeObjectAsJson(clusterCreateSpec), responseCallback); }
public static DereferenceAliasesPolicy ValueOf(int intValue) { if (intValue < _NUM || intValue >= ELEMENTS.Length) { return null; } return ELEMENTS[intValue]; }
public void TestGetNamedItemNS2() { Document doc; NamedNodeMap attributes; Node element; Attr attribute; NodeList elementList; string attrName; doc = (Document)Load(_STR, builder); elementList = doc.GetElementsByTagNameNS(_STR, _STR); element = elementList.Item(_NUM); attributes = element.Attributes; attribute = (Attr)attributes.GetNamedItemNS(_STR, _STR); attrName = attribute.NodeName; Assert.AreEqual(_STR, _STR, attrName); }
public static void WriteUnsafe(PacketOutputStream outStream, string value, bool noBackslashEscapes) { byte[] bytes = System.Text.Encoding.UTF8.GetBytes(value); outStream.WriteUnsafe(QUOTE); WriteBytesEscapedUnsafe(outStream, bytes, bytes.Length, noBackslashEscapes); outStream.WriteUnsafe(QUOTE); }
public void Add(SAMRecord read, int position) { recordAndOffsets.Add(new RecordAndOffset(read, position)); }
private Sha256Hash CalculateHash() { try { using (var bos = new UnsafeByteArrayOutputStream(HEADER_SIZE)) { WriteHeader(bos); return new Sha256Hash(Utils.ReverseBytes(DoubleDigest(bos.ToArray()))); } } catch (IOException e) { throw new RuntimeException(e); } }
private void AddPropertyType(Uri p, Resource t) { OwlProperty prop = GetProperty(p); if (t.Equals(OWL.TRANSITIVEPROPERTY)) { prop.SetTransitive(); } else if (t.Equals(OWL.SYMMETRICPROPERTY)) { prop.SetSymmetric(); } else if (t.Equals(OWL2.ASYMMETRICPROPERTY)) { prop.SetAsymmetric(); } else if (t.Equals(OWL.FUNCTIONALPROPERTY)) { prop.SetFunctional(); } else if (t.Equals(OWL.INVERSEFUNCTIONALPROPERTY)) { prop.SetInverseFunctional(); } else if (t.Equals(OWL2.IRREFLEXIVEPROPERTY)) { prop.SetIrreflexive(); } else { throw new Exception("No matching property type found."); } }
public static void Equals(object object1, object object2) { CheckAssertion(object1.Equals(object2), null); }
public static string WriteActionsToString(OFInstructionWriteActions inst, Logger log) { return ActionUtils.ActionsToString(inst.GetActions(), log); }
protected virtual void PreAddInterruptibly(object o) { // This method is called in derived classes before <unk> () }
public static string EncodeLines(byte[] input, int offset, int length, int lineLength, string lineSeparator) { int blockLength = (lineLength * _NUM) / _NUM; if (blockLength <= _NUM) throw new ArgumentException(); int lines = (length + blockLength - _NUM) / blockLength; int bufferLength = ((length + _NUM) / _NUM) * _NUM + lines * lineSeparator.Length; StringBuilder buffer = new StringBuilder(bufferLength); int inputPosition = _NUM; while (inputPosition < length) { int l = Math.Min(length - inputPosition, blockLength); buffer.Append(Encode(input, offset + inputPosition, l)); buffer.Append(lineSeparator); inputPosition += l; } return buffer.ToString(); }
private ODataFeed ReadFeedLogPerf(string query, Dictionary<string, string> parameters) { long deltaTime = DateTimeOffset.Now.ToUnixTimeMilliseconds(); ODataFeed feed = client.ReadFeed(query, parameters); Log(LogLevel.Debug, _STR + query + _STR + deltaTime + _STR); return feed; }
protected long RlLong(BinaryReader br) { int b1, b2, b3, b4; int i = _NUM; i = br.ReadInt32(); b1 = (i & _NUM) << _NUM; b2 = (i & _NUM) << _NUM; b3 = (i & _NUM) >> _NUM; b4 = (i & _NUM) >> _NUM; i = (b1 | b2 | b3 | b4); return i; }
public void TestShiftRight4() { byte[] aBytes = { _NUM, -_NUM, _NUM, _NUM, -_NUM, -_NUM, _NUM, _NUM, _NUM, _NUM, -_NUM, _NUM, _NUM }; int aSign = _NUM; int number = _NUM; byte[] rBytes = { _NUM, _NUM, -_NUM, _NUM, -_NUM, -_NUM, -_NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger result = aNumber >> number; // Shift right operation byte[] resBytes = result.ToByteArray(); for (int i = 0; i < resBytes.Length; i++) { Assert.IsTrue(resBytes[i] == rBytes[i]); } Assert.AreEqual(_NUM, result.Sign); }
public Dependencies ResolveFromFile(FileInfo file, string className, SootClass sc) { DexlibWrapper wrapper = cache.Get(file); if (wrapper == null) { wrapper = new DexlibWrapper(file); cache.Put(file, wrapper); wrapper.Initialize(); } Dependencies deps = wrapper.MakeSootClass(sc, className); AddSourceFileTag(sc, _STR + file.Name); return deps; }
public static string BuildResponseUrl(string tenant, LogoutState logoutState) { string retval = null; LogoutResponse samlResponse = logoutState.GenerateResponseForTenant(tenant, logoutState.GetMessageSource(), logoutState.GetLocale()); if (samlResponse != null) { log.Info(_STR + samlResponse.ToString()); retval = logoutState.GenerateResponseUrlForTenant(samlResponse, tenant); } return retval; }
public static void AssertLabel(int[] path, string text) { if (verbose) { Log(_STR + ToString(path) + _STR + text + _STR); } Label l = (Label)GetComponentByPath(path); AssertBool(l != null, _STR + text); AssertBool(text == l.GetText() || text.Equals(l.GetText()), (_STR + l.GetText()) + _STR + text); }
private void InterpolateResultList(List<PathParser.PathDataNode> list) { if (list == null || list.Count <= _NUM) return; float[][] listPenPos = PathNodeUtils.CalculatePenPosition(list); List<PathParser.PathDataNode> subList = new List<PathParser.PathDataNode>(); int size = list.Count; PathParser.PathDataNode currentNode = null; int i = _NUM; while (i < size - _NUM) { currentNode = list[i]; if (!IsInterpolatableCommand(currentNode.mType)) { i++; continue; } bool validSequence = false; int k = i; for (int j = i; j < size && validSequence; j++) { if (currentNode.mType == list[j].mType) { k = j; if (!currentNode.mParams.SequenceEqual(list[j].mParams)) break; } else { validSequence = false; } } if (k - i > _NUM) { InterpolateSubList(list.GetRange(i, k + _NUM - i)); }
private void InitTokenizer(StreamTokenizer tokenizer) { tokenizer.ResetSyntax(); tokenizer.WhitespaceChars(_NUM, (_STR - _NUM)); tokenizer.WordChars(_STR, _STR); tokenizer.WhitespaceChars(_STR, _STR); tokenizer.WhitespaceChars(_STR, _STR); tokenizer.CommentChar(_STR); tokenizer.WhitespaceChars(_STR, _STR); tokenizer.QuoteChar(_STR); tokenizer.QuoteChar(_STR); tokenizer.EolIsSignificant(_BOOL); }
protected void IllegalMessageReceived(OFMessage m) { string msg = GetSwitchStateMessage(m, _STR); throw new SwitchStateException(msg); }
protected void RunThreadSizeLoop() { for (int i = _NUM; i <= _NUM; i += _NUM) { SetNumWorkers(i); try { Thread.Sleep(_NUM * _NUM); } catch (ThreadInterruptedException e) { // Handle exception if necessary } } }
protected bool Read() { if (!nReuseHeader) { Debug.Message(_STR, _STR); return ReadHeader(); } byte[] tempData = new byte[nDataSize - nFieldOffset]; int nReadBytes = poModule.Read(tempData, 0, tempData.Length); Array.Copy(pachData, nFieldOffset, tempData, 0, tempData.Length); if (nReadBytes != (int)(nDataSize - nFieldOffset) && nReadBytes == -1) { return false; } else if (nReadBytes != (int)(nDataSize - nFieldOffset)) { Debug.Error(_STR); return false; } return true; }
public override bool Lock() { try { if (!FileFactory.IsFileExist(location, FileFactory.GetFileType(tmpPath))) { FileFactory.Mkdirs(location, FileFactory.GetFileType(tmpPath)); } string lockFilePath = $"{location}{CarbonCommonConstants.FILE_SEPARATOR}{lockFile}"; if (!FileFactory.IsFileExist(lockFilePath, FileFactory.GetFileType(location))) { FileFactory.CreateNewLockFile(lockFilePath, FileFactory.GetFileType(location)); } fileOutputStream = new FileStream(lockFilePath, FileMode.OpenOrCreate, FileAccess.Write); channel = fileOutputStream.GetType().GetMethod("GetChannel").Invoke(fileOutputStream); try { fileLock = (IDisposable)channel.GetType().GetMethod("TryLock").Invoke(channel); } catch (Exception) { return _BOOL; } return fileLock != null ? _BOOL : _BOOL; } catch (IOException) { return _BOOL; } }
public void Open(int port) { connection = new DatagramSocket(port); connection.SetSoTimeout(timeout); }
public string GlobalInfo() { return _STR + _STR; }
public MLResults Execute(Script script) { ScriptExecutor scriptExecutor = new ScriptExecutor(sparkMonitoringUtil); scriptExecutor.SetExplain(explain); scriptExecutor.SetExplainLevel(explainLevel); scriptExecutor.SetStatistics(statistics); scriptExecutor.SetInit(scriptHistoryStrings.Count == 0); return Execute(script, scriptExecutor); }
public void Disable(RichFormatterFeature feature) { features.Remove(feature); }
public void RemoveEventListener(ZWaveEventListener eventListener) { lock (zwaveEventListeners) { zwaveEventListeners.Remove(eventListener); } }
private static double PythonTime() { return DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() / _NUM; }
public void Add(params T[] newItems) { Add(newItems.ToList()); }
public static string QuoteIfJavaKeyword(string name) { return JVMModuleUtil.QuoteIfJavaKeyword(name); }
public static Recipe FromCursor(SQLiteDataReader reader) { Recipe recipe = new Recipe(null); for (int c = _NUM; c < reader.FieldCount; c++) { string columnName = reader.GetName(c); if (columnName.Equals(RecipeTable.ID_COLUMN)) { recipe.id = reader.GetString(c); } else if (columnName.Equals(RecipeTable.TITLE_COLUMN)) { recipe.SetTitle(reader.GetString(c)); } else if (columnName.Equals(RecipeTable.DESCRIPTION_COLUMN)) { recipe.SetDescription(reader.GetString(c)); } else if (columnName.Equals(RecipeTable.PHOTO_COLUMN)) { recipe.SetPhoto(reader.GetString(c)); } else if (columnName.Equals(RecipeTable.PREP_TIME_COLUMN)) { recipe.SetPrepTime(reader.GetString(c)); } } return recipe; }
public static void CheckState(bool expression, object errorMessage) { if (!expression) { throw new InvalidOperationException(errorMessage?.ToString()); } }
private static void AddDropTableStatements<T, ID>(DatabaseType databaseType, TableInfo<T, ID> tableInfo, List<string> statements) { List<string> statementsBefore = new List<string>(); List<string> statementsAfter = new List<string>(); foreach (var fieldType in tableInfo.GetFieldTypes()) { databaseType.DropColumnArg(fieldType, statementsBefore, statementsAfter); } StringBuilder sb = new StringBuilder(); sb.Append(_NUM); databaseType.AppendEscapedEntityName(sb, tableInfo.GetTableName()); sb.Append(_STR); statements.AddRange(statementsBefore); statements.Add(sb.ToString()); statements.AddRange(statementsAfter); }
public bool IsLocked() { return queue.Count > 0; }
public long CguestTime() { return long.Parse(fields[_NUM]); }
private static ClassInfo FindOrCreateClass(string t) { if (!t.EndsWith(_STR)) { return ClassInfo.FindOrCreateClass(t); } else { string baseType = t.Substring(_NUM, t.IndexOf(_STR)); int level = (t.Length - t.IndexOf(_STR)) / _NUM; string s = _STR; for (int i = _NUM; i < level; ++i) { s += _STR; } if (baseType.Equals(_STR)) s += _STR; else if (baseType.Equals(_STR)) s += _STR; else s += _STR + baseType + _STR; return ClassInfo.FindOrCreateClass(s); } }
private void ResetNotes() { if (errorInStatus1) { if (editMode) { statusText1.Text = editStatus1; } else { statusText1.Text = stdStatus1; } errorInStatus1 = false; } ResetNotes2(); }
[HLEFunction(nid: _NUM, version: _NUM)] public int sceRtcSetTick(TPointer timeAddr, TPointer64 ticksAddr) { long ticks = ticksAddr.GetValue() - rtcMagicOffset; ScePspDateTime time = ScePspDateTime.FromMicros(ticks); time.Write(timeAddr); return _NUM; }
public static void Write(FileInfo file, string data, Encoding encoding, bool append) { string str = data ?? null; File.WriteAllText(file.FullName, str, encoding); }
private void PopulateNavDrawer() { mNavDrawerItems.Clear(); mNavDrawerItems.Add(NAVDRAWER_ITEM_HOME); mNavDrawerItems.Add(NAVDRAWER_ITEM_SEPARATOR); mNavDrawerItems.Add(NAVDRAWER_ITEM_MY_FOLLOWING); mNavDrawerItems.Add(NAVDRAWER_ITEM_MY_SHOTS); mNavDrawerItems.Add(NAVDRAWER_ITEM_MY_BUCKETS); mNavDrawerItems.Add(NAVDRAWER_ITEM_MY_PROJECTS); mNavDrawerItems.Add(NAVDRAWER_ITEM_MY_TEAMS); mNavDrawerItems.Add(NAVDRAWER_ITEM_MY_LIKES); mNavDrawerItems.Add(NAVDRAWER_ITEM_SEPARATOR_SPECIAL); mNavDrawerItems.Add(NAVDRAWER_ITEM_SETTINGS); CreateNavDrawerItems(); }
private BigInteger OddModPow(BigInteger y, BigInteger z) { if (y.Equals(BigInteger.One)) return this; if (signum == _NUM) return BigInteger.Zero; int[] baseArray = (int[])mag.Clone(); int[] exp = y.mag; int[] mod = z.mag; int modLen = mod.Length; if ((modLen & _NUM) != _NUM) { int[] x = new int[modLen + _NUM]; Array.Copy(mod, _NUM, x, _NUM, modLen); mod = x; modLen++; } int wbits = _NUM; int ebits = BitLength(exp, exp.Length); if (ebits != _NUM || exp[_NUM] != _NUM) { while (ebits > bnExpModThreshTable[wbits]) { wbits++; } } int tblmask = _NUM << wbits; int[][] table = new int[tblmask][]; for (int i = _NUM; i < tblmask; i++) table[i] = new int[modLen]; long n0
public void RunTest() { Document doc; NodeList elementList; Node nameNode; CharacterData child; string childValue; int childLength; doc = (Document)Load(_STR, _BOOL); elementList = doc.GetElementsByTagName(_STR); nameNode = elementList.Item(_NUM); child = (CharacterData)nameNode.FirstChild; childValue = child.Data; childLength = childValue.Length; Assert.AreEqual(_NUM, childLength); }
public int NextToken() { while (index < length && char.IsWhiteSpace(expr[index])) { index++; } tokenVal = null; if (index == length) return TOKEN_END; int start = index; char currentChar = expr[index]; char nextChar = (char)_NUM; index++; if (index < length) nextChar = expr[index]; switch (currentChar) { case _STR: return TOKEN_LBRACE; case _STR: return TOKEN_RBRACE; case _STR: return TOKEN_EQ; case _STR: if (nextChar == _STR) { index++; return TOKEN_NOT_EQ; } return TOKEN_NOT; case _STR: if (nextChar == _STR) { index++; return TOKEN_OR; } break; case _STR: if (nextChar == _STR) { index++; return TOKEN_AND; } break; case _STR: if (nextChar == _STR) { index++; return TOKEN_GE; } return TOKEN_GT; case _STR:
public static byte[] ValuesOf(byte[] array) { byte[] dest = new byte[array.Length]; for (int i = 0; i < array.Length; i++) { dest[i] = array[i]; } return dest; }
public void AuditCallhome(OperationTypeEnum auditType, string operationalStatus, string description, params object[] descparams) { _auditMgr.RecordAuditLog(null, null, EVENT_SERVICE_TYPE, auditType, DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(), operationalStatus, description, descparams); }
public static float Mean(float[] data, int startIndex, int endIndex) { float mean = 0; int total = 0; startIndex = Math.Max(startIndex, 0); startIndex = Math.Min(startIndex, data.Length - 1); endIndex = Math.Max(endIndex, 0); endIndex = Math.Min(endIndex, data.Length - 1); if (startIndex > endIndex) startIndex = endIndex; for (int i = startIndex; i <= endIndex; i++) { if (float.IsNaN(data[i])) { throw new ArgumentException("Data contains NaN values."); } mean += data[i]; total++; } mean /= total; return mean; }
public static string ConstructNTPtime(long date) { long ntpTime = _NUM; long startTime = (date / SECONDS_TO_MILLISECONDS_CONVERSION_RATE) + ntpTime; return startTime.ToString(); }
protected MediaType SelectMediaType(ServerWebExchange exchange, List<MediaType> producibleTypes) { List<MediaType> acceptableTypes = GetAcceptableTypes(exchange); producibleTypes = GetProducibleTypes(exchange, producibleTypes); HashSet<MediaType> compatibleMediaTypes = new HashSet<MediaType>(); foreach (MediaType acceptable in acceptableTypes) { foreach (MediaType producible in producibleTypes) { if (acceptable.IsCompatibleWith(producible)) { compatibleMediaTypes.Add(SelectMoreSpecificMediaType(acceptable, producible)); } } } List<MediaType> result = new List<MediaType>(compatibleMediaTypes); MediaType.SortBySpecificityAndQuality(result); foreach (MediaType mediaType in compatibleMediaTypes) { if (mediaType.IsConcrete()) { return mediaType; } else if (mediaType.Equals(MediaType.ALL) || mediaType.Equals(MediaType.MEDIA_TYPE_APPLICATION_ALL)) { return MediaType.APPLICATION_OCTET_STREAM; } } return null; }
public void PaintBorder(Component c, Graphics g, int x, int y, int width, int height) { if (!(c is JPopupMenu popup)) { return; } Font origFont = g.Font; Color origColor = g.Color; string title = popup.Label; if (title == null) { return; } g.Font = font; FontMetrics fm = SwingUtilities2.GetFontMetrics(popup, g, font); int fontHeight = fm.Height; int descent = fm.Descent; int ascent = fm.Ascent; Point textLoc = new Point(); int stringWidth = SwingUtilities2.StringWidth(popup, fm, title); textLoc.Y = y + ascent + TEXT_SPACING; textLoc.X = x + ((width - stringWidth) / _NUM); g.Color = background; g.FillRectangle(new SolidBrush(background), textLoc.X - TEXT_SPACING, textLoc.Y - (fontHeight - descent), stringWidth + (_NUM * TEXT_SPACING), fontHeight - descent); g.Color = foreground; SwingUtilities2.DrawString(popup, g, title, text
public void EnsureCapacity(int minCap) { if (minCap > array.Length) { int newCap = (array.Length * _NUM >> _NUM) + _NUM; int[] oldData = array; array = new int[newCap < minCap ? minCap : newCap]; Array.Copy(oldData, _NUM, array, _NUM, size); } }
public void InvalidateAndUnmap(params ByteBuffer[] bufs) { if (cleaner != null) { invalidated = true; // Assuming _BOOL is equivalent to true barrier.LazySet(1); // Assuming _NUM is equivalent to 1 Thread.Yield(); foreach (ByteBuffer b in bufs) { cleaner.FreeBuffer(resourceDescription, b); } } }
public int AddDir(File file) { if (!file.Exists()) { return _NUM; } string[] names = GetNames(GetFiles(file, _STR)); LoadClass(file, names); return _NUM; }
private bool IsMineshafterPresent() { try { Type.GetType(_STR); return _BOOL; } catch (Exception) { return _BOOL; } }
public override bool Equals(object obj) { if (obj == this) { return true; } if (!(obj is BubbleXYItemLabelGenerator)) { return false; } if (!base.Equals(obj)) { return false; } var that = (BubbleXYItemLabelGenerator)obj; if (!Object.Equals(this.zFormat, that.zFormat)) { return false; } if (!Object.Equals(this.zDateFormat, that.zDateFormat)) { return false; } return true; }
public static bool HasElementChild(Node node) { NodeList nl = node.ChildNodes; Node child = null; int length = nl.Length; for (int i = 0; i < length; i++) { child = nl.Item(i); if (child.NodeType == Node.ELEMENT_NODE) { return true; } } return false; }
public void DelItem(int index) { lock (GetMenuTreeLock()) { if (selectedIndex == index) { SelectItem(null, _BOOL); } else if (selectedIndex > index) { selectedIndex--; } if (index < items.Count) { items.RemoveAt(index); } else { if (log.IsLoggable(PlatformLogger.Level.FINE)) { log.Fine(_STR + index + _STR + items.Count); } } } UpdateSize(); }
public static int CountCSSPrimitiveNames() { return ALL_PRIMITIVE_PROPERTY_NAMES.Count; }
public void PrintString(string v) { PrintString(v, _NUM, v.Length); }
private void CheckPermission(object obj, NamespacePermissionEnum[] permissions, List<AccessDeniedException> accessDeniedExceptions) { if (obj != null) { if (obj is ICollection) { ICollection collection = (ICollection)obj; foreach (var element in collection) { CheckPermission(element, permissions, accessDeniedExceptions); } } else if (obj is string str) { try { CheckPermission(str, permissions); } catch (AccessDeniedException accessDeniedException) { accessDeniedExceptions.Add(accessDeniedException); } } else { throw new InvalidOperationException(string.Format("{0}, {1}, {2}", typeof(string), typeof(ICollection), obj.GetType())); } } }
private void DisplayAllStringDefinedInStringXml() { var textView = (SimpleIconFontTextView)FindViewById(Resource.Id.text_view_2); var list = new List<string>(); list.Add(GetString(Resource.String.cubeicon_gems_logo)); list.Add(GetString(Resource.String.cubeicon_android)); list.Add(GetString(Resource.String.cubeicon_heart)); string text = string.Join(_STR, list); textView.Text = text; }
private static Intent CreateMapActivityIntent(Context context, URLSpan[] urlSpans) { for (int span_i = _NUM; span_i < urlSpans.Length; span_i++) { URLSpan urlSpan = urlSpans[span_i]; string urlString = urlSpan.GetURL(); if (urlString.StartsWith(GEO_PREFIX)) { Intent geoIntent = new Intent(Intent.ActionView, Android.Net.Uri.Parse(urlString)); geoIntent.AddFlags(ActivityFlags.NewTask); return geoIntent; } } return null; }
private StringBuilder GenerateParameters() { StringBuilder parameters = new StringBuilder(); if (filterMap == null && expandParameters == null) { return parameters; } parameters.Append(_STR); int filterParameterCounter = _NUM; if (filterMap != null && filterMap.Count > 0) { parameters.Append(FILTER_PREFIX); foreach (var filterEntry in filterMap) { parameters.Append(string.Format(_STR, filterEntry.Key, filterEntry.Value)); if (++filterParameterCounter < filterMap.Count) { parameters.Append(_STR); } } if (expandParameters != null) { parameters.Append(_STR); } } if (expandParameters != null) { parameters.Append(EXPAND_PREFIX); using (var enumerator = expandParameters.GetEnumerator()) { if (enumerator.MoveNext()) { parameters.Append(string.Format(_STR, enumerator.Current)); while (enumerator.MoveNext()) { parameters.Append(string.Format(_STR, enumerator.Current)); } } } } return parameters; }
public void WriteExif(Bitmap bmap, Stream exifOutStream) { if (bmap == null || exifOutStream == null) { throw new ArgumentException(NULL_ARGUMENT_STRING); } using (Stream s = GetExifWriterStream(exifOutStream)) { bmap.Compress(Bitmap.CompressFormat.Jpeg, _NUM, s); s.Flush(); } }
public void RemoveAttribute(int index) { if (index >= _NUM && index < length) { if (index < length - _NUM) { Array.Copy(data, (index + _NUM) * _NUM, data, index * _NUM, (length - index - _NUM) * _NUM); } index = (length - _NUM) * _NUM; data[index++] = null; data[index++] = null; data[index++] = null; data[index++] = null; data[index] = null; length--; } else { BadIndex(index); } }
public static string FromFieldSignature(string signature) { const int _NUM = 1; // Assuming _NUM = 1 based on the context const char _STR = 's'; // Assuming _STR = 's' based on the context if (signature[_NUM] != _STR) { return null; } return signature.Substring(_NUM, signature.Length - _NUM * 2); }
private void PaintPreview(int dx, int dy, float zoomFactor) { if (image != null) { Graphics g = this.CreateGraphics(); Color bg = renderer.GetBackgroundColor(); g.Clear(bg); int newWidth = (int)Math.Round(image.Width * zoomFactor); int newHeight = (int)Math.Round(image.Height * zoomFactor); g.DrawImage(image, dx, dy, newWidth, newHeight); if (dx > _NUM) g.ClearRect(_NUM, _NUM, dx, this.Height); else g.ClearRect(this.Width + dx, _NUM, this.Width, this.Height); if (dy > _NUM) g.ClearRect(_NUM, _NUM, this.Width, dy); else g.ClearRect(_NUM, this.Height + dy, this.Width, this.Height); } }
[RequiresPermission(Manifest.Permission.Camera)] public CameraSource Start() { lock (mCameraLock) { if (mCamera != null) { return this; } mCamera = CreateCamera(); if (Build.VERSION.SdkInt >= Build.VERSION_CODES.Honeycomb) { mDummySurfaceTexture = new SurfaceTexture(DUMMY_TEXTURE_NAME); mCamera.SetPreviewTexture(mDummySurfaceTexture); } else { mDummySurfaceView = new SurfaceView(mContext); mCamera.SetPreviewDisplay(mDummySurfaceView.Holder); } mCamera.StartPreview(); mProcessingThread = new Thread(mFrameProcessor); mFrameProcessor.SetActive(true); mProcessingThread.Start(); } return this; }
public synchronized void Clear() { mCategories.Clear(); mValues.Clear(); }
using System; using System.Collections.Generic; public class Example { public static List<List<double>> PartitionVariable(List<double> arr, int chunk) { int count = 0; // Initialize count to 0 List<List<double>> ret = new List<List<double>>(); while (count < arr.Count) { int nextCount = Math.Min(count + chunk, arr.Count); List<double> sublist = arr.GetRange(count, nextCount - count); count += chunk; ret.Add(sublist); } ret.RemoveAll(lists => lists.Count < chunk); // Remove sublists with size less than chunk return ret; } }
private static void UpdateWindowUI(Window window) { System.Windows.Forms.Application.DoEvents(); Form[] ownedForms = window.OwnedForms; foreach (Form ownedForm in ownedForms) { UpdateWindowUI(ownedForm); } }
public void ClearResults() { if (resultList != null) { resultList.Clear(); mAdapter.NotifyDataSetChanged(); } listener.OnSearchCleared(); }
public List<ConstraintWidget> FindWidgets(WidgetContainer container, int x, int y, int width, int height) { List<ConstraintWidget> found = new List<ConstraintWidget>(); Rectangle area = new Rectangle(x, y, width, height); foreach (ConstraintWidget widget in container.GetChildren()) { WidgetCompanion companion = (WidgetCompanion)widget.GetCompanionWidget(); WidgetDecorator decorator = companion.GetWidgetDecorator(WidgetDecorator.BLUEPRINT_STYLE); if (!decorator.IsVisible()) { continue; } Rectangle bounds = new Rectangle(widget.GetDrawX(), widget.GetDrawY(), widget.GetWidth(), widget.GetHeight()); if (area.Intersects(bounds)) { found.Add(widget); } } return found; }
public void PrintSymbol(CharSequence text) { if (text == null) { AppendAscii(_STR); } else if (text.Length == _NUM) { throw new EmptySymbolException(); } else if (SymbolNeedsQuoting(text, _BOOL)) { AppendAscii(_STR); PrintCodePoints(text, SYMBOL_ESCAPE_CODES); AppendAscii(_STR); } else { AppendAscii(text); } }
public static ShoppingCartItem MakeItem(int cartLocation, GenericValue product, decimal selectedAmount, decimal quantity, decimal unitPrice, DateTime? reservStart, decimal reservLength, decimal reservPersons, DateTime? shipBeforeDate, DateTime? shipAfterDate, Dictionary<string, GenericValue> additionalProductFeatureAndAppls, Dictionary<string, object> attributes, string prodCatalogId, ProductConfigWrapper configWrapper, string itemType, ShoppingCart.ShoppingCartItemGroup itemGroup, LocalDispatcher dispatcher, ShoppingCart cart, bool triggerExternalOpsBool, bool triggerPriceRulesBool, GenericValue parentProduct, bool skipInventoryChecks, bool skipProductChecks) { return MakeItem(cartLocation, product, selectedAmount, quantity, unitPrice, reservStart, reservLength, reservPersons, null, null, shipBeforeDate, shipAfterDate, additionalProductFeatureAndAppls, attributes, prodCatalogId, configWrapper, itemType, itemGroup, dispatcher, cart, triggerExternalOpsBool, triggerPriceRulesBool, parentProduct, skipInventoryChecks, skipProductChecks); }
public override string ToString() { var sortedTable = InferenceUtils.GetNBest(table, Math.Max(table.Count, _NUM)); string str = _STR; foreach (var entry in sortedTable) { string prob = StringUtils.GetShortForm(entry.Value); str += _STR + entry.Key + _STR + prob + _STR; } return (str.Length > _NUM) ? str.Substring(_NUM, str.Length - _NUM) : str; }
protected void UpdateBorderText(string text) { if (text == null) { throw new ArgumentNullException(nameof(text), _STR); } m_titledBorder.SetTitle(text); UpdateUI(); }
private void AddClasses(Type[] classes, HashSet<Type> result, string fieldName) { if (classes == null || classes.Length == 0) throw new ArgumentException($"Classes absent for {fieldName}"); foreach (var classe in classes) { result.Add(classe); } }
public void ResetReferences() { if (_refs != null) _refs.Clear(); }
public static BigInteger DecodeMPI(byte[] mpi, bool hasLength) { byte[] buf; if (hasLength) { int length = (int)ReadUint32BE(mpi, _NUM); buf = new byte[length]; Array.Copy(mpi, _NUM, buf, 0, length); } else { buf = mpi; } if (buf.Length == 0) return BigInteger.Zero; bool isNegative = (buf[0] & 0x80) == 0x80; if (isNegative) buf[0] &= 0x7F; BigInteger result = new BigInteger(buf); return isNegative ? BigInteger.Negate(result) : result; }
public void SchemaChanged(string serviceName, string version) { lock (mapRealmToFormat) { mapRealmToFormat.Remove(ROOT); } }
public void Sort(DTMIterator v, List<object> keys, XPathContext support) { m_keys = keys; int n = v.GetLength(); List<NodeCompareElem> nodes = new List<NodeCompareElem>(); for (int i = _NUM; i < n; i++) { NodeCompareElem elem = new NodeCompareElem(v.Item(i)); nodes.Add(elem); } List<NodeCompareElem> scratchVector = new List<NodeCompareElem>(); MergeSort(nodes, scratchVector, _NUM, n - _NUM, support); for (int i = _NUM; i < n; i++) { v.SetItem(nodes[i].m_node, i); } v.SetCurrentPos(_NUM); }
protected DateTimeData Parse(string str) { DateTimeData date = new DateTimeData(str, this); int len = str.Length; date.Year = YEAR; date.Day = DAY; if (str[_NUM] != _STR || str[_NUM] != _STR) { throw new SchemaDateTimeException(_STR + str); } int stop = _NUM; date.Month = ParseInt(str, _NUM, stop); if (str.Length >= stop + _NUM && str[stop] == _STR && str[stop + _NUM] == _STR) { stop += _NUM; } if (stop < len) { if (!IsNextCharUTCSign(str, stop, len)) { throw new SchemaDateTimeException(_STR + str); } else { GetTimeZone(str, date, stop, len); } } ValidateDateTime(date); SaveUnnormalized(date); if (date.Utc != _NUM && date.Utc != _STR) { Normalize(date); } date.Position = _NUM; return date; }
private void AddToQueue(SerialMessage serialMessage) { if (serialMessage == null) { return; } if (!msgQueue.Contains(serialMessage) && msgQueue.RemainingCapacity() > _NUM) { msgQueue.Add(serialMessage); } SendMessage(); }
private DBID StringToDBID(string query) { return DBIDUtil.ImportInteger(int.Parse(query)); }
public override void WriteShort(int v) { work[_NUM] = (byte)v; work[_NUM + 1] = (byte)(v >> 8); dis.Write(work, _NUM, _NUM); }
public void Println(long v) { TextWriter out = this.out; if (out == null) return; Print(v); try { out.WriteLine(); } catch (IOException e) { log.Log(Level.Fine, e.ToString(), e); } }
public ThriftServiceMetadata(Type serviceType) { if (serviceType == null) throw new ArgumentNullException(nameof(serviceType)); interfaces = Init(null, new List<Type> { serviceType }); }
public WritableRaster CreateCompatibleWritableRaster(int w, int h) { if (w <= _NUM || h <= _NUM) { throw new RasterFormatException(_STR + ((w <= _NUM) ? _STR : _STR)); } SampleModel sm = sampleModel.CreateCompatibleSampleModel(w, h); return new BytePackedRaster(sm, new Point(_NUM, _NUM)); }
public static Response InvalidEntity(ConstraintViolationException e) { StringBuilder errorMessage = new StringBuilder(); bool firstPass = true; foreach (var error in e.GetConstraintViolations()) { if (!firstPass) { errorMessage.Append(", "); } errorMessage.Append(string.Format("{0}: {1} (Invalid Value: {2})", error.GetPropertyPath(), error.GetMessage(), error.GetInvalidValue())); firstPass = false; } var externalException = new ExternalException(ErrorCode.INVALID_ENTITY, errorMessage.ToString(), null); return ExternalException(externalException); }
public string CheckStartBlock(int mode) { if (log.IsDebugEnabled) { log.Debug(_STR + GetDisplayName() + _STR); } BlockOrder bo = _orders[_NUM]; OBlock block = bo.GetBlock(); string msg = block.Allocate(this); if (msg != null) { return msg; } msg = bo.SetPath(this); if (msg != null) { return msg; } int state = block.GetState(); if ((state & OBlock.DARK) != _NUM || _tempRunBlind) { msg = Bundle.GetMessage(_STR, block.GetDisplayName()); } else if ((state & OBlock.OCCUPIED) == _NUM) { if (mode == MODE_LEARN) { msg = _STR; } else { msg = _STR; } msg = Bundle.GetMessage(msg, GetTrainName(), block.GetDisplayName()); } else { TrackerTableAction.StopTrackerIn(block); } return msg;
private void ParseSwitch(int indent, bool firstContent, string header, Layout layout, List<Elem> elems) { TokenStream tokens = new TokenStream(header); Elem selector = ParseExpr(tokens); tokens.CheckAtEnd(); var cases = new List<Case>(); List<Elem> defaultElems = null; bool done; string line = GetNextLine(); var matcher = COMMAND_LINE.Match(line); string command; string rest; if (matcher.Success) { command = matcher.Groups[COMMAND_NAME_GROUP].Value; rest = line.Substring(matcher.Index + matcher.Length); done = true; } else { Error(_STR); done = true; command = null; rest = null; } while (!done) { switch (command) { case END_COMMAND: CheckHeaderEmpty(command, rest); done = true; break; case DEFAULT_COMMAND: CheckHeaderEmpty(command, rest); if (defaultElems != null) { Error(_STR); } defaultElems = ParseUntil(indent, layout, END_COMMAND); command = lastTerminator; rest = lastT
public void Init(string prefix, System.Uri url) { try { using (var inStream = url.GetResponse().GetResponseStream()) { var props = new System.Collections.Generic.Dictionary<string, string>(); var reader = new System.IO.StreamReader(inStream); string line; while ((line = reader.ReadLine()) != null) { var parts = line.Split(new[] { '=' }, 2); if (parts.Length == 2) { props[parts[0].Trim()] = parts[1].Trim(); } } Init(GetLayers(prefix, props)); } } catch (System.UriFormatException) { logger.Warning(_STR + url + _STR); } catch (System.IO.IOException) { logger.Warning(_STR); } }
bool SuppressedBy(DNSIncoming msg) { try { foreach (DNSRecord answer in msg.GetAllAnswers()) { if (SuppressedBy(answer)) { return _BOOL; } } return _BOOL; } catch (IndexOutOfRangeException e) { logger.Log(LogLevel.Warning, _STR + msg + _STR, e); return _BOOL; } }
using System.Collections.Generic; using System.Collections.Specialized; public static NameValueCollection CreateProperties(IDictionary<string, string> map) { NameValueCollection properties = new NameValueCollection(); if (map != null && map.Count > 0) { foreach (var entry in map) { properties.Add(entry.Key, entry.Value); } } return properties; }
public Node SelectFirst(string query) { List<Node> selectedNodes = Select(query); if (selectedNodes.Count == 0) { return null; } return selectedNodes[_NUM]; }
public static string[] StringArrayFromProperties(Properties p, string propName, string tok) { string[] ret = null; string raw = p.GetProperty(propName); if (raw != null && raw.Length > _NUM) { try { var token = new System.Collections.Generic.List<string>(raw.Split(new[] { tok }, System.StringSplitOptions.None)); int numPaths = token.Count; ret = new string[numPaths]; for (int i = _NUM; i < numPaths; i++) { ret[i] = token[i]; } return ret; } catch (System.Exception e) { Console.WriteLine(e); } } return ret; }
public void Generate(int x1, int y1, int x2, int y2) { Point midPoint = new Point(); Point arcCenter = new Point(); PointF peakPoint = new PointF(); double distance = Math.Sqrt(Math.Pow(Math.Abs(y2 - y1), _NUM) + Math.Pow(Math.Abs(x2 - x1), _NUM)); double straightLineSlope = Math.Atan((double)(y2 - y1) / (double)(x2 - x1)); double inverseSlope = straightLineSlope - (Math.PI / _NUM); if (Debug.Debugging(_STR)) { Debug.Output(_STR + Math.ToDegrees(straightLineSlope) + _STR + distance + _STR); } midPoint.Location = new Point(x1 + ((x2 - x1) / _NUM), y1 + ((y2 - y1) / _NUM)); if (Debug.Debugging(_STR)) { Debug.Output(_STR + x1 + _STR + y1 + _STR + x2 + _STR + y2 + _STR + midPoint.X + _STR + midPoint.Y + _STR);
private static int CompareLocales(CultureInfo primary, CultureInfo other) { string lang = primary.TwoLetterISOLanguageName; if (string.IsNullOrEmpty(lang) || lang != other.TwoLetterISOLanguageName) { return _NUM; } string country = primary.Name.Split('-').Length > 1 ? primary.Name.Split('-')[1] : null; if (string.IsNullOrEmpty(country) || country != (other.Name.Split('-').Length > 1 ? other.Name.Split('-')[1] : null)) { return _NUM; } string variant = primary.ThreeLetterISORegionName; if (string.IsNullOrEmpty(variant) || variant != other.ThreeLetterISORegionName) { return _NUM; } return _NUM; }
void QueryReadResult(SqlCommand cmd) { using (SqlDataReader reader = cmd.ExecuteReader()) { DataTable schema = reader.GetSchemaTable(); int columnCount = schema.Rows.Count; while (reader.Read()) { for (int i = _NUM; i < columnCount; i++) { string value = reader.GetString(i + _NUM); } } } }
public static bool AddDistinctEntry<V>(List<V> sourceList, V entry) { if (sourceList != null && !sourceList.Contains(entry)) { sourceList.Add(entry); return true; } return false; }
public override bool Equals(object obj) { if (obj is MSort ms) { if (data == ms.data) return true; } return false; }
public static void EndTransaction(CConnection connection) { EndTransaction(connection.GetConnection()); }
public CCrossReferencesPanel() { this.SuspendLayout(); this.Layout = new BorderLayout(); m_table.SelectionMode = SelectionMode.SingleSelection; this.Controls.Add(new JScrollPane(m_table)); m_table.MouseClick += new MouseEventHandler(new InternalMouseListener().MouseClick); this.ResumeLayout(); }
private void DoubleCapacity() { int p = head; int n = elements.Length; int r = n - p; int newCapacity = n << _NUM; if (newCapacity < _NUM) throw new InvalidOperationException(_STR); object[] a = new object[newCapacity]; Array.Copy(elements, p, a, _NUM, r); Array.Copy(elements, _NUM, a, r, p); elements = a; head = _NUM; tail = n; }
private void ChangeOpenAMDebugFolder(string newOpenAMDebugFolder) { SystemPropertiesManager.InitializeProperties(DebugConstants.CONFIG_DEBUG_DIRECTORY, newOpenAMDebugFolder); }
protected string ComputeFullUrl(Uri baseUrl, string link) { if (link == null || link.Length == 0) { return null; } const string _STR = "/"; const int _NUM = 0; if (!link.StartsWith(_STR)) { if (link.StartsWith(_STR)) { link = $"{baseUrl.Scheme}{_STR}{baseUrl.Authority}{link}"; } else { if (link.Contains(_STR)) { return null; } string path = baseUrl.AbsolutePath; if (!path.EndsWith(_STR)) { int sep = path.LastIndexOf(_STR); string file = path.Substring(sep + _NUM); if (file.Contains(_STR) || file.Contains("..")) { path = path.Substring(_NUM, sep); } } link = $"{baseUrl.Scheme}{_STR}{baseUrl.Authority}{path}{_STR}{link}"; } } link = NormalizeUrlEnding(link); string l = link.ToLowerInvariant(); if (l.EndsWith(_STR) || l.EndsWith(".jpg")
private void LoadManifest() { if (_isManifestRead) return; lock (this) { if (_isManifestRead) return; try { _manifest = _jarPath.GetManifest(); if (_manifest == null) return; Attributes attr = _manifest.GetMainAttributes(); if (attr != null) AddManifestPackage(_STR, attr); var entries = _manifest.GetEntries(); foreach (var entry in entries) { string pkg = entry.Key; attr = entry.Value; if (attr == null) continue; AddManifestPackage(pkg, attr); } } catch (IOException e) { log.Log(Level.Warning, e.ToString(), e); } finally { _isManifestRead = true; } } }
public ReferenceBinding[] ConvertToRawTypes(ReferenceBinding[] originalTypes, bool forceErasure, bool forceRawEnclosingType) { if (originalTypes == null) return null; ReferenceBinding[] convertedTypes = originalTypes; for (int i = _NUM, length = originalTypes.Length; i < length; i++) { ReferenceBinding originalType = originalTypes[i]; ReferenceBinding convertedType = (ReferenceBinding)ConvertToRawType(forceErasure ? originalType.Erasure() : originalType, forceRawEnclosingType); if (convertedType != originalType) { if (convertedTypes == originalTypes) { Array.Copy(originalTypes, _NUM, convertedTypes = new ReferenceBinding[length], _NUM, i); } convertedTypes[i] = convertedType; } else if (convertedTypes != originalTypes) { convertedTypes[i] = originalType; } } return convertedTypes; }
public void AddColumn(int idx, Column column) { if (column != null) { columns.Insert(idx, column); } }
public void ReadData(BinaryReader din) { reference = din.ReadUInt16(); andMask = din.ReadUInt16(); orMask = din.ReadUInt16(); }
bool RemoveDisplay(Display display) { return m_displays.Remove(display); }
public double NextGaussian() { if (mHaveNextNextGaussian) { mHaveNextNextGaussian = false; return mNextNextGaussian; } else { double v1, v2, s; do { v1 = 2.0 * NextDouble() - 1.0; v2 = 2.0 * NextDouble() - 1.0; s = v1 * v1 + v2 * v2; } while (s >= 1.0 || s == 0.0); double multiplier = Math.Sqrt(-2.0 * Math.Log(s) / s); mNextNextGaussian = v2 * multiplier; mHaveNextNextGaussian = true; return v1 * multiplier; } }
private void FireEvent(IRunningQuery q) { if (q == null) throw new ArgumentException(); if (listeners.Count == 0) { return; } IRunningQueryListener[] a = listeners.ToArray(); foreach (IRunningQueryListener listener in a) { try { listener.Notify(q); } catch (Exception t) { if (InnerCause.IsInnerCause(t, typeof(InterruptedException))) { throw new InvalidOperationException(t); } log.Error(t, t); } } }
private void UpdateContactHeaderPort(int localPort, SIPMessage message) { if (message != null && message.GetContactHeader() != null) { ContactHeader contactHeader = message.GetContactHeader(); Address contactAddress = contactHeader.GetAddress(); contactAddress.SetPort(localPort); } }
public static AndroidHttpClient NewInstance(string userAgent) { return NewInstance(userAgent, null); }
public GridCacheMvccCandidate AddEntry(GridLocalCacheEntry entry) { GridCacheMvccCandidate candidate = entry.AddLocal(threadId, lockVer, null, null, timeout, !InTransaction(), InTransaction(), ImplicitSingle(), _BOOL); entries.Add(entry); if (candidate == null && timeout < _NUM) { if (log.IsDebugEnabled) log.Debug(_STR + entry); OnFailed(); return null; } if (candidate != null) { entry.ReadyLocal(candidate); } return candidate; }
public override void VisitVertex(StreetRouter.State state) { int? edgeIdx = state.BackEdge; if (edgeIdx != null && edgeIdx != -_NUM) { EdgeStore.Edge edge = edgeStore.GetCursor(edgeIdx.Value); GeoJsonFeature feature = new GeoJsonFeature(edge.GetGeometry()); feature.AddProperty(_STR, state.Weight); feature.AddProperty(_STR, state.StreetMode); feature.AddProperty(_STR, state.BackEdge); features.Add(feature); } }
public void Test_BSBM_Q1_NoSolutions() { var helper = new TestHelper(_STR, _STR, new string[] { }, _STR); AssertSameJoinOrder(new int[] { _NUM, _NUM, _NUM, _NUM, _NUM }, helper); }
public static void DeleteFileOrLog(FileInfo file) { if (!file.Delete()) { logger.Warn(FAILED_DELETING_FILE + file.FullName); } }
public synchronized void Remove(int index) { base.Remove(index); mMaxValues.Remove(index); }
public GitlabGroupMember AddGroupMember(GitlabGroup group, GitlabUser user, GitlabAccessLevel accessLevel) { return AddGroupMember(group.Id, user.Id, accessLevel); }
protected Logger(string name, string resourceBundleName) : base(name, resourceBundleName) { }
public override void Increment(double coord, short val) { int bin = GetBinNr(coord); if (bin < _NUM) { if (size - bin > data.Length) { short[] tmpdata = new short[GrowSize(data.Length, size - bin)]; Array.Copy(data, _NUM, tmpdata, -bin, size); data = tmpdata; } else { Array.Copy(data, _NUM, data, -bin, size); Array.Fill(data, (short)_NUM, -bin, data.Length - (_NUM + -bin)); } data[_NUM] = val; Debug.Assert(data.Length >= size - bin); offset -= bin; size -= bin; } else if (bin >= data.Length) { short[] tmpdata = new short[GrowSize(data.Length, bin + _NUM)]; Array.Copy(data, _NUM, tmpdata, _NUM, size); tmpdata[bin] = val; data = tmpdata; size = bin + _NUM; max = double.MaxValue; } else { if (bin >= size) { s
public static void CheckArgument(bool expression, object errorMessage) { if (!expression) { throw new ArgumentException(errorMessage?.ToString()); } }
public Document PutAll(Dictionary<String, object> fields) { if (fields != null) { foreach (var entry in fields) { Set(entry.Key, entry.Value); } } return this; }
private bool ContainsIgnoreCase(List<string> stringList, string match) { foreach (string s in stringList) { if (s.Equals(match, StringComparison.OrdinalIgnoreCase)) { return true; } } return false; }
public static double ComputeMAD(double[] x, double median) { for (int i = _NUM; i < x.Length; i++) { x[i] = Math.Abs(x[i] - median); } double mad = QuickSelect.Median(x); if (!(mad > _NUM)) { double min = double.PositiveInfinity; foreach (double xi in x) { if (xi > _NUM && xi < min) { min = xi; } } if (min < double.PositiveInfinity) { mad = min; } else { mad = _NUM; } } return mad; }
private static void InitializeKnownPlugins<T>( T pluginInterface, IPluginRegistry<IPlugin<T>> registry, List<PluginConfigItem> xmlPluginOrder, List<Pair<IPlugin<T>, PluginStatus>> validatedPlugins, List<Pair<IPlugin<T>, Exception>> initializedPlugins, HashSet<long> processedPlugins) { foreach (var pt in xmlPluginOrder) { processedPlugins.Add(pt.GetGUID()); var plugin = FindPlugin(validatedPlugins, pt.GetGUID()); if (plugin != null) { if (pt.IsLoad()) { InitializePlugin(plugin, pluginInterface, registry, initializedPlugins); } else { registry.AddDisabledPlugin(plugin, DisabledPluginReason.NotLoaded); } } } }
public static void SessionStop() { if (mProcess == null) return; mProcess.Destroy(); mProcess = null; }
public static void KeepAlive(bool keepAlive) { SetProperty(_STR, keepAlive.ToString()); }
public static Request NewUploadVideoRequest(Session session, File file, Callback callback) { using (var descriptor = new ParcelFileDescriptor(file, ParcelFileDescriptor.Mode.ReadOnly)) { var parameters = new Bundle(_NUM); parameters.PutParcelable(file.Name, descriptor); return new Request(session, MY_VIDEOS, parameters, HttpMethod.Post, callback); } }
private static byte[] ReadCheckedBytes(byte[] buffer, int dataSize) { CheckedMessage wrapper = new CheckedMessage(); MessageNano.MergeFrom(wrapper, buffer, _NUM, dataSize); CRC32 checksum = new CRC32(); checksum.Update(wrapper.Payload); if (wrapper.Checksum != checksum.GetValue()) { throw new InvalidProtocolBufferNanoException(_STR); } return wrapper.Payload; }
private MulticastSocket CreateSocket() { MulticastSocket sock = new MulticastSocket(mcastPort); sock.SetLoopbackMode(_BOOL); if (sockItf != null) sock.SetInterface(sockItf); if (sock.GetLoopbackMode()) { U.Warn(log, _STR + _STR); } sock.JoinGroup(mcastGrp); if (ttl != -_NUM) sock.SetTimeToLive(ttl); return sock; }
void CopyNodeStructure(List<Node> destination) { while (destination.Count < nodes.Count) { destination.Add(new Node()); } while (destination.Count > nodes.Count) { destination.RemoveAt(destination.Count - 1); } int n = nodes.Count; for (int i = 0; i < n; i++) { Node node0 = nodes[i]; Node node1 = destination[i]; node1.heightParameter = node0.heightParameter; node1.rateParameter = node0.rateParameter; node1.traitParameter = node0.traitParameter; node1.partitioning = node0.partitioning; node1.taxon = node0.taxon; node1.bifurcation = node0.bifurcation; node1.number = node0.number; node1.myHashCode = node0.myHashCode; if (node0.leftParent != null) { node1.leftParent = storedNodes[nodes.IndexOf(node0.leftParent)]; } else { node1.leftParent = null; } if (node0.rightParent != null) { node1.rightParent = storedNodes[nodes.IndexOf(node0.rightPar
protected void CheckSelectedSubsetMetaData(ExampleSetMetaData subsetMetaData) { // Unit tests that can be used to convert the number of alarms used by the subclass of validating. }
private void ValidateWill(string dest, object payload) { if (dest == null || payload == null) { throw new ArgumentException(); } MqttTopic.Validate(dest, true); }
public BerInputStream(Stream inputStream, int initialSize) { this.inputStream = inputStream; buffer = new byte[initialSize]; Next(); if (length != INDEFINIT_LENGTH) { if (buffer.Length < (length + offset)) { byte[] newBuffer = new byte[length + offset]; Array.Copy(buffer, 0, newBuffer, 0, offset); buffer = newBuffer; } } else { isIndefiniteLength = true; throw new ASN1Exception("Indefinite length encountered."); } }
private Member NextMember(Member.Type type) { return new TestMember(type, new Address(_STR, ++port), new Address(_STR, port + _NUM)); }
protected void EncodeLineSuffix(StreamWriter aStream) { aStream.WriteLine(); }
bool IsSystemFont() { return systemFont; }
public void AddToBeLoaded(string url) { if (toBeLoaded == null) { toBeLoaded = new List<string>(); } if (!string.IsNullOrWhiteSpace(url)) { toBeLoaded.Add(url); } }
public Document PutAll(IEnumerable<Field> fields) { foreach (var field in fields) { SetValue(field.Name, field.Value); } return this; }
public AppraiseGitReviewClient(Repository repo) { this.repo = repo; this.author = new PersonIdent(repo); }
public RootBlockView(bool rootBlock0, ByteBuffer buf, ChecksumUtility checker) { if (buf == null) throw new ArgumentException(); if (buf.Remaining() != SIZEOF_ROOT_BLOCK) { throw new ArgumentException($"{_STR}{SIZEOF_ROOT_BLOCK}{_STR}{buf.Remaining()}"); } this.buf = buf.AsReadOnlyBuffer(); this.rootBlock0 = rootBlock0; switch (GetStoreType()) { case StoreType.RW: am = new RWAddressManager(null); break; case StoreType.WORM: int offsetBits = GetOffsetBits(); am = new WormAddressManager(offsetBits); break; default: throw new RootBlockException($"{_STR}{GetStoreType()}"); } if (checker == null) { log.Warn(_STR); } this.checker = checker; Valid(); }
protected SOAPRequest CreateSOAPRequest(string methodName, SOAPMethodRequestWriter requestWriter) { PostMethod method = new PostMethod(endpoint.ToString()); method.SetContentChunked(_BOOL); SetRequestHeaders(method, methodName); SOAPRequestEntity requestEntity = BuildRequestEntity(methodName, requestWriter); requestEntity.SetSOAPHeaderProvider(soapHeaderProvider); BufferedSOAPRequestEntity bufferedEntity = new BufferedSOAPRequestEntity(requestEntity); method.SetRequestEntity(bufferedEntity); return new SOAPRequest(method, requestEntity); }
using System; using System.Collections.Generic; using System.Linq; using System.Reflection; public void InnerEnum() { Type pc = typeof(PlayingCard); List<Enum> include = new List<Enum>(); List<Enum> exclude = new List<Enum>(); foreach (Type c in pc.GetNestedTypes(BindingFlags.Public | BindingFlags.NonPublic)) { if (c.IsEnum) { var mods = c.GetTypeInfo().GetAccessModifier(); if (mods == TypeAttributes.Public) { include.AddRange(c.GetEnumValues().Cast<Enum>()); } else { exclude.AddRange(c.GetEnumValues().Cast<Enum>()); } } } HashSet<TypedOperation> actual = GetConcreteOperations(pc); Assert.AreEqual(include.Count + _NUM, actual.Count, _STR); foreach (Enum e in include) { Assert.IsTrue(actual.Contains(CreateEnumOperation(e)), _STR + e.ToString() + _STR); } foreach (Enum e in exclude) { Assert.IsFalse(actual.Contains(CreateEnumOperation(e)), _STR + e.ToString() + _STR); }
public string ToURI() { var buffer = new CharArrayBuffer(_NUM); buffer.Append(this.schemeName); buffer.Append(_STR); buffer.Append(this.hostname); if (this.port != -_NUM) { buffer.Append(_STR); buffer.Append(this.port.ToString()); } return buffer.ToString(); }
public void TestWildcardsDoesNotNeedTwoDots() { string cert = _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR; CertificateFactory cf = CertificateFactory.GetInstance(_STR); using (var inStream = new MemoryStream(Encoding.UTF8.GetBytes(cert))) { X509Certificate x509 = (X509Certificate)cf.GenerateCertificate(inStream); MySslSession session = new MySslSession(new X509Certificate[] { x509 }); IHostnameVerifier verifier = HttpsURLConnection.GetDefaultHostnameVerifier(); Assert.True(verifier.Verify(_STR, session)); } }
public static bool InTargetDir(FileInfo file) { return InTargetDir(file.FullName); }
public bool SkipAny(char c, string csq) { int i = index; int n = csq.Length; while (i < n && csq[i] == c) { i++; } if (i == index) return _BOOL; index = i; return _BOOL; }
private void GenerateUniformIntegerExamples(Instances format, int numInstances, SubspaceClusterDefinition cl, string cName) { Instance example = null; int numAtts = m_NumAttributes; if (GetClassFlag()) { numAtts++; } example = new DenseInstance(numAtts); example.SetDataset(format); bool[] attributes = cl.GetAttributes(); double[] minValue = cl.GetMinValue(); double[] maxValue = cl.GetMaxValue(); int[] minInt = new int[minValue.Length]; int[] maxInt = new int[maxValue.Length]; int[] intValue = new int[maxValue.Length]; int[] numInt = new int[minValue.Length]; int num = _NUM; for (int i = _NUM; i < minValue.Length; i++) { minInt[i] = (int)Math.Ceiling(minValue[i]); maxInt[i] = (int)Math.Floor(maxValue[i]); numInt[i] = (maxInt[i] - minInt[i] + _NUM); num *= numInt[i]; } int numEach = numInstances / nu
public synchronized bool RemoveAll(ICollection c) { object[] elements = GetArray(); int len = elements.Length; if (len != _NUM) { int newlen = _NUM; object[] temp = new object[len]; for (int i = _NUM; i < len; ++i) { object element = elements[i]; if (!c.Contains(element)) temp[newlen++] = element; } if (newlen != len) { SetArray(temp.Skip(_NUM).Take(newlen - _NUM).ToArray()); return _BOOL; } } return _BOOL; }
private bool CompareAndSetTail(Node expect, Node update) { return Interlocked.CompareExchange(ref tail, update, expect) == expect; }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public Phone CreatePhone(string value) { PhoneField phoneImpl = new PhoneField(); try { phoneImpl.SetValue(value); } catch (SdpException s) { s.PrintStackTrace(); } return phoneImpl; }
private ListResourceBundle LoadResourceBundle(string resourceBundle) { m_resourceBundleName = resourceBundle; Locale locale = GetLocale(); ListResourceBundle lrb; try { ResourceBundle rb = ResourceBundle.GetBundle(m_resourceBundleName, locale); lrb = (ListResourceBundle)rb; } catch (MissingResourceException e) { try { lrb = (ListResourceBundle)ResourceBundle.GetBundle(m_resourceBundleName, new Locale(_STR, _STR)); } catch (MissingResourceException e2) { throw new MissingResourceException(_STR + m_resourceBundleName, m_resourceBundleName, _STR); } } m_resourceBundle = lrb; return lrb; }
private HashSet<string> ReturnRemotePoolsAssociatedWithRemoteCopySettings( Dictionary<string, List<string>> remoteCopySettings, HashSet<string> poolUris) { HashSet<string> remotePoolUris = new HashSet<string>(); foreach (var entry in remoteCopySettings) { VirtualPool vPool = _objectCache.QueryObject<VirtualPool>(new Uri(entry.Key)); if (vPool == null) { remotePoolUris.UnionWith(poolUris); } else if (vPool.UseMatchedPools != null && vPool.UseMatchedPools) { if (vPool.MatchedStoragePools != null) { remotePoolUris.UnionWith(vPool.MatchedStoragePools); } } else if (vPool.AssignedStoragePools != null) { remotePoolUris.UnionWith(vPool.AssignedStoragePools); } } return remotePoolUris; }
private string ConvertToHtml(string input) { return _STR + input.Replace(_STR, _STR) + _STR; }
private readonly object _lock = new object(); private List<FileLock> locks = new List<FileLock>(); private void AddLock(FileLock lockObject) { lock (_lock) { long lockEnd = lockObject.Position + lockObject.Size; foreach (var existingLock in locks) { if (existingLock.Position > lockEnd) { break; } if (existingLock.Overlaps(lockObject.Position, lockObject.Size)) { throw new OverlappingFileLockException(); } } locks.Add(lockObject); } }
public static void UF7(double[] x, double[] f, int nx) { int count1 = 0; int count2 = 0; double sum1 = 0.0; double sum2 = 0.0; double yj; for (int j = 1; j <= nx; j++) { yj = x[j - 1] - Math.Sin(0.5 * Math.PI * x[0] + j * Math.PI / nx); if (j % 2 == 0) { sum2 += yj * yj; count2++; } else { sum1 += yj * yj; count1++; } } yj = Math.Pow(x[0], 2); f[0] = yj + 0.5 * sum1 / (double)count1; f[1] = 1.0 - yj + 0.5 * sum2 / (double)count2; }
private void ReloadModelWithNewValue(long? newValue) { long newValueAsPrimitive = newValue ?? GetModelUpdatePeriod(); foreach (var listener in modelUpdatePeriodListeners) { var eventArgs = new PropertyChangeEvent(this, "_STR", GetModelUpdatePeriod(), newValueAsPrimitive); listener.PropertyChange(eventArgs); } }
public static string MoveToUCIString(Move m) { string ret = SquareToString(m.From); ret += SquareToString(m.To); switch (m.PromoteTo) { case Piece.WQueen: case Piece.BQueen: ret += "_STR"; break; case Piece.WRook: case Piece.BRook: ret += "_STR"; break; case Piece.WBishop: case Piece.BBishop: ret += "_STR"; break; case Piece.WKnight: case Piece.BKnight: ret += "_STR"; break; default: break; } return ret; }
public Image CreateAcceleratedImage(Component target, int width, int height) { ColorModel model = GetColorModel(Transparency.OPAQUE); WritableRaster wr = model.CreateCompatibleWritableRaster(width, height); return new OffScreenImage(target, model, wr, model.IsAlphaPremultiplied()); }
public void DisplayState() { TextWriter xout = context.Get(Log.OutKey); xout.WriteLine(_STR + fileObjectHistory); xout.WriteLine(_STR + openTypeNames); xout.WriteLine(_STR + generatedSourceNames); xout.WriteLine(_STR + string.Join(", ", generatedClasses.Keys)); xout.WriteLine(_STR + aggregateGeneratedSourceNames); xout.WriteLine(_STR + aggregateGeneratedClassNames); }
public static void WriteStringToWriter(string inputString, System.IO.TextWriter writer) { using (var bw = new System.IO.StreamWriter(writer)) { bw.Write(inputString); } }
private void EnsureCapacity(int n) { if (n <= _NUM) { return; } int max; if (data == null || data.Length == _NUM) { max = _NUM; } else if (data.Length >= n * _NUM) { return; } else { max = data.Length; } while (max < n * _NUM) { max *= _NUM; } string[] newData = new string[max]; if (length > _NUM) { Array.Copy(data, _NUM, newData, _NUM, length * _NUM); } data = newData; }
public void DecRef() { EnsureOpen(); int rc = RefCount.DecrementAndGet(); if (rc == _NUM) { bool success = _BOOL; try { DoClose(); Closed = _BOOL; success = _BOOL; } finally { if (!success) { RefCount.IncrementAndGet(); } } } else if (rc < _NUM) { throw new InvalidOperationException(_STR + rc + _STR); } }
public static X500Name X500PrincipalToX500Name(X500Principal principal) { return X500Name.GetInstance(KseX500NameStyle.Instance, principal.GetEncoded()); }
private void AssertDescribedResource(BigdataValue describedResource, IDescribeCache describeCache, TestHelper helper) { var actualGraph = describeCache.Lookup(describedResource.GetIV()); Assert.NotNull(actualGraph); var expectedGraph = GetExpectedDescription(describedResource, helper); helper.CompareGraphs(new HashSet<Statement>(actualGraph), expectedGraph); foreach (var stmt in actualGraph) { Assert.True(stmt is BigdataStatement); var st = (BigdataStatement)stmt; Assert.NotNull(st.S()); Assert.NotNull(st.P()); Assert.NotNull(st.O()); if (st.GetContext() != null) { Assert.NotNull(st.C()); } } }
public bool IsFlat() { return TYPE_FLAT.Equals(GetType()); }
[Obsolete] private List<CharSequence> BuildLimitedNetworksList() { var context = GetActivity(); var limited = new List<CharSequence>(); if (HasSubscription(context)) { var subscriberId = GetActiveSubscriberId(context); if (mPolicyEditor.HasLimitedPolicy(BuildTemplateMobileAll(subscriberId))) { limited.Add(GetText(Resource.String.data_usage_list_mobile)); } if (mPolicyEditor.HasLimitedPolicy(BuildTemplateMobile3gLower(subscriberId))) { limited.Add(GetText(Resource.String.data_usage_tab_3g)); } if (mPolicyEditor.HasLimitedPolicy(BuildTemplateMobile4g(subscriberId))) { limited.Add(GetText(Resource.String.data_usage_tab_4g)); } } if (mPolicyEditor.HasLimitedPolicy(BuildTemplateWifiWildcard())) { limited.Add(GetText(Resource.String.data_usage_tab_wifi)); } if (mPolicyEditor.HasLimitedPolicy(BuildTemplateEthernet())) { limited.Add(GetText(Resource.String.data_usage_tab_ethernet)); } return limited; }
public int EvalRPN(string[] tokens) { if (tokens == null || tokens.Length == 0) return 0; Stack<string> s = new Stack<string>(); int len = tokens.Length; for (int i = 0; i < len; i++) { string cur = tokens[i]; if (IsOperator(cur)) { int t2 = int.Parse(s.Pop()); int t1 = int.Parse(s.Pop()); int res = Calculate(t1, t2, cur); s.Push(res.ToString()); } else { s.Push(cur); } } return int.Parse(s.Peek()); }
public void AddAllSeries(List<XYSeries> series) { lock (this) { mSeries.AddRange(series); } }
private static void Exit(string errMsg, Options options, int exitCode) { if (errMsg != null) { Console.WriteLine(_STR + errMsg); } string runner = Environment.GetCommandLineArgs()[0]; int space = runner.IndexOf(' '); runner = runner.Substring(0, space == -1 ? runner.Length : space); if (options != null) { HelpFormatter formatter = new HelpFormatter(); formatter.PrintHelp(runner, options); } Environment.Exit(exitCode); }
public override int Compare(NewSplitEmittedTerm term1, NewSplitEmittedTerm term2) { return term1.CompareTo(term2); }
public AABB Merge(AABB other) { minX = Math.Min(minX, other.minX); maxX = Math.Max(maxX, other.maxX); minY = Math.Min(minY, other.minY); maxY = Math.Max(maxY, other.maxY); minZ = Math.Min(minZ, other.minZ); maxZ = Math.Max(maxZ, other.maxZ); return this; }
public static string GenerateAutoTag(int stackOffset) { StackTrace currentStack = new StackTrace(); StackFrame element = currentStack.GetFrame(stackOffset); string className = element.GetMethod().DeclaringType.FullName; string[] pkgPath = className.Split(new[] { '.' }); if (pkgPath.Length > 2) { className = pkgPath[pkgPath.Length - 2]; } var sbInnerClass = new StringBuilder(); int index; string strLoop = className; while ((index = strLoop.LastIndexOf('.')) != -1) { string piece = strLoop.Substring(index + 1); sbInnerClass.Insert(0, piece); if (!Regex.IsMatch(piece, @"^\d+$")) // check if piece is not a digit-only string { break; } sbInnerClass.Insert(0, '.'); strLoop = strLoop.Substring(0, index); } if (sbInnerClass.Length > 0 && sbInnerClass[0] == '.') { sbInnerClass.Remove(0, 1); } string innerCl
public void FlushPending() { if (m_needToCallStartDocument) { StartDocumentInternal(); m_needToCallStartDocument = false; // Assuming _BOOL is equivalent to false } if (m_elemContext.m_startTagOpen) { CloseStartTag(); m_elemContext.m_startTagOpen = false; // Assuming _BOOL is equivalent to false } if (m_cdataTagOpen) { CloseCDATA(); m_cdataTagOpen = false; // Assuming _BOOL is equivalent to false } if (m_writer != null) { try { m_writer.Flush(); } catch (IOException e) { // Handle or log exception if needed } } }
private void HandleSubscribe(string[] args) { switch (args[_NUM]) { case _STR: var rrsub = new TestSubscriber<Payload>(_NUM); payloadSubscribers[_NUM] = rrsub; idToType[_NUM] = args[_NUM]; var rrclient = createClient.Get(); var rrpub = rrclient.RequestResponse(new PayloadImpl(args[_NUM], args[_NUM])); rrpub.Subscribe(rrsub); break; case _STR: var rssub = new TestSubscriber<Payload>(_NUM); payloadSubscribers[_NUM] = rssub; idToType[_NUM] = args[_NUM]; var rsclient = createClient.Get(); var rspub = rsclient.RequestStream(new PayloadImpl(args[_NUM], args[_NUM])); rspub.Subscribe(rssub); break; case _STR: var rsubsub = new TestSubscriber<Payload>(_NUM); payloadSubscribers[_NUM] = rsubsub; idToType[_NUM] = args[_NUM]; var rsubclient = createClient.Get(); var rsubpub = rsubclient.RequestSubscription(new PayloadImpl(args[_NUM], args[_NUM]));
[PostConstruct] public void Init() { configurationViews.Add(defaultDistributionSetTypeLayout); configurationViews.Add(authenticationConfigurationView); configurationViews.Add(pollingConfigurationView); }
public ExtendedType(int nodeType, string namespace, string localName) { this.nodeType = nodeType; this.namespace = namespace; this.localName = localName; this.hash = nodeType + namespace.GetHashCode() + localName.GetHashCode(); }
private static void ValidateNewAddition(List<ExpressionOwner> paths, ExpressionOwner owner, LocPathIterator path) { Assertion(owner.GetExpression() == path, _STR); int n = paths.Count; for (int i = _NUM; i < n; i++) { ExpressionOwner ew = paths[i]; Assertion(ew != owner, _STR); Assertion(ew.GetExpression() != path, _STR); } }
public override void Start() { for (int i = _NUM; i < threadCount; ++i) { HashSet<SystemStreamPartition> threadSsps = new HashSet<SystemStreamPartition>(); foreach (SystemStreamPartition ssp in ssps) { if (Math.Abs(ssp.GetHashCode()) % threadCount == i) { threadSsps.Add(ssp); } } Thread thread = new Thread(new MockSystemConsumerRunnable(threadSsps)) { Name = _STR + i, IsBackground = _BOOL }; threads.Add(thread); thread.Start(); } }
private List<double[]> InitializeWeightsND() { int N = _NUM; List<double[]> candidates = new List<double[]>(numberOfPoints * N); for (int i = _NUM; i < numberOfPoints * N; i++) { double[] weight = new double[numberOfObjectives]; for (int j = _NUM; j < numberOfObjectives; j++) { weight[j] = PRNG.NextDouble(); } double sum = weight.Sum(); for (int j = _NUM; j < numberOfObjectives; j++) { weight[j] /= sum; } candidates.Add(weight); } List<double[]> weights = new List<double[]>(numberOfPoints * N); for (int i = _NUM; i < numberOfObjectives; i++) { double[] weight = new double[numberOfObjectives]; weight[i] = _NUM; weights.Add(weight); } while (weights.Count < numberOfPoints) { double[] weight = null; double distance = double.NegativeInfinity; for (int i = _NUM; i < candidates.Count; i++) { double d = double.Posit
public void Undo() { try { if (undoManager != null) { undoManager.UndoOrRedo(); } } catch (CannotUndoException) { // Ignored } catch (CannotRedoException) { // Ignored } }
public void RemoveColumn(Column column) { if (column != null) { columns.Remove(column); } }
public string Info() { StringBuilder sb = new StringBuilder(_STR + tableSize + _STR + elements + _STR + loadFactor + _STR + threshold); sb.Append(_STR + numEmpty); int size = _NUM; int min = elements; int max = -_NUM; for (int i = _NUM; i < tableSize; i++) { LinkedList<string> list = bins[i]; if (list != null) { int sz = list.Count; size += sz; if (sz < min) { min = sz; } if (sz > max) { max = sz; } } } float avg = size; int baseCount = (tableSize - numEmpty); if (baseCount == _NUM) { sb.Append(_STR); sb.Append(_STR); sb.Append(_STR); } else { avg /= baseCount; sb.Append(_STR + avg); sb.Append(_STR + min); sb.Append(_STR + max); } return sb.ToString(); }
public bool PeekSample(ref MediaCodec.BufferInfo outBufferInfo) { Update(); bool result = _BOOL; if (mAvailableOutputBuffers.Count > 0) { int index = mAvailableOutputBuffers.Peek(); MediaCodec.BufferInfo info = mOutputBufferInfo[index]; outBufferInfo.Set(info.Offset, info.Size, info.PresentationTimeUs, info.Flags); result = _BOOL; } return result; }
public override AbstractScannedResult ScanBlocklet(BlocksChunkHolder blocksChunkHolder) { try { FillScannedResult(blocksChunkHolder); } catch (FilterUnsupportedException e) { throw new QueryExecutionException(e.Message); } return scannedResult; }
public override int GetHashCode() { return subconditions.GetHashCode() - operator.GetHashCode(); }
public void BalanceSegments() { MAcctSchemaElement[] elements = m_acctSchema.GetAcctSchemaElements(); for (int i = _NUM; i < elements.Length; i++) { MAcctSchemaElement ase = elements[i]; if (ase.IsBalanced()) { BalanceSegment(ase.GetElementType()); } } }
public AnnotationDrawer(AnnotationsModel model, ProcessRendererModel rendererModel) { this.model = model; this.rendererModel = rendererModel; this.displayCache = new Dictionary<string, object>(); this.cachedID = new Dictionary<string, object>(); pane = new JEditorPane(_STR, _STR); pane.Border = null; pane.IsOpaque = _BOOL; }
public bool HasUserPartitions() { return userOutput.Count > 0; }
public override void InsertString(int offs, string str, AttributeSet attr) { if (offs < _NUM) { return; } if (str.Length > _NUM) { for (int i = _NUM; i < str.Length; i++) { if (str[i] == _STR) { remainingTextString = str.Substring(i + _NUM); remainingTextAttr = attr; inputKeyListener.KeyPressed(new KeyEvent(new Container(), KeyEvent.KEY_PRESSED, _NUM, _NUM, KeyEvent.VK_ENTER, _STR)); break; } else { InsertChar(offs + i, _STR.ToString() + str[i]); } } } else if (str.Length == _NUM) { InsertChar(offs, str); } }
protected int ReadCodePoint() { int next = reader.Read(); if (char.IsHighSurrogate((char)next)) { next = char.ConvertToUtf32((char)next, (char)reader.Read()); } return next; }
public static int PutInt(byte[] bytes, int offset, int val, bool littleEndian) { if (littleEndian) { val = BitConverter.ToInt32(BitConverter.GetBytes(val).Reverse().ToArray(), 0); } Buffer.BlockCopy(BitConverter.GetBytes(val), 0, bytes, offset, sizeof(int)); return offset + sizeof(int); }
public Item(Drawable symbol, string labelText, Font font) { double fontSize = font.GetSize2D(); SetLayout(new EdgeLayout(fontSize, _NUM)); this.symbol = symbol; Add(symbol, Location.WEST); label = new Label(labelText); label.SetFont(font); label.SetAlignmentX(_NUM); label.SetAlignmentY(_NUM); Add(label, Location.CENTER); }
void Tag(string tag) { // called when a tag with tag is a tag }
public int Consume() { int consumedAmount; if (Math.Abs(left) < Math.Abs(GetRegen())) { consumedAmount = left; left = _NUM; } else { consumedAmount = GetRegen(); left -= GetRegen(); } return consumedAmount; }
private Delegate DelegateMethod() { Exception errShmem = null; Exception errTcp = null; Delegate curDelegate = delegateRef.Get(); if (curDelegate != null) return curDelegate; bool skipInProc = Parameter(conf, PARAM_IGFS_ENDPOINT_NO_EMBED, authority, _BOOL); if (!skipInProc) { IgfsEx igfs = GetIgfsEx(endpoint.Grid(), endpoint.Igfs()); if (igfs != null) { HadoopIgfsEx hadoop = null; try { hadoop = new HadoopIgfsInProc(igfs, log, userName); curDelegate = new Delegate(hadoop, hadoop.Handshake(logDir)); } catch (IOException e) when (e is HadoopIgfsCommunicationException) { hadoop?.Close(_BOOL); if (log.IsDebugEnabled) log.Debug($"{_STR}", e); } catch (IgniteCheckedException e) { // Handle IgniteCheckedException if needed } } } bool skipLocShmem = Parameter(conf, PARAM_IGFS_ENDPOINT_NO_LOCAL_SHMEM, authority, _BOOL
public FromClause Add(OuterJoinQualifier outerJoinQualifier) { outerJoinQualifiers.Add(outerJoinQualifier); return this; }
private static File[] Encode(string src) { if (src == null || src.Length == _NUM) { return new File[_NUM]; } var tokenizer = new StringTokenizer(src, _STR); File[] dirs = new File[tokenizer.CountTokens()]; for (int i = _NUM; i < dirs.Length; i++) { dirs[i] = new File(tokenizer.NextToken()); } return dirs; }
private bool JournalRebuildRequired() { const int redundantOpCompactThreshold = _NUM; return redundantOpCount >= redundantOpCompactThreshold && redundantOpCount >= lruEntries.Count; }
public E Poll(long timeout, TimeUnit unit) { long nanos = unit.ToNanos(timeout); var lockObject = this.lock; lockObject.Enter(); long t = Now(); TenantQueue.Item item = null; try { while (true) { TenantQueue q = NextQueue(t); if (q == null) { if (nanos <= 0) return default; else nanos = available.AwaitNanos(nanos); } else { long delay = q.Next - t; if (delay <= 0) { item = q.Poll(t); return item == null ? default : item.Element; } if (nanos <= 0) return default; if (nanos < delay || leader != null) nanos = available.AwaitNanos(nanos); else { var thisThread = Thread.CurrentThread; leader = thisThread; try { long timeLeft = available.AwaitNanos(delay); nanos -= delay - timeLeft; } finally { if (leader == thisThread) leader = null; }
public void AddSwipeListener(SwipeListener listener) { if (mListeners == null) { mListeners = new List<SwipeListener>(); } mListeners.Add(listener); }
public int Size() { return patterns.Count; }
private SublimeBaseMenuItem AddInternal(int pivotID, Positioned positioned, SublimeBaseMenuItem newItem) { int newItemGroupId = newItem.GetGroupId(); CheckExistenceOfGroup(newItemGroupId); int pivotIndex = FindItemIndex(pivotID); SublimeBaseMenuItem pivot = mItems[pivotIndex]; if (newItem.GetItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) { CheckIfGroupHeaderAlreadyExistsForGroup(newItemGroupId); int index = FindGroupIndex(newItemGroupId); if (index >= _NUM) { mItems.Insert(index, newItem); } else { if (positioned == Positioned.BEFORE) { if (pivot.GetGroupId() == NO_GROUP_ID || pivot.GetItemType() == SublimeBaseMenuItem.ItemType.GROUP_HEADER) { mItems.Insert(pivotIndex, newItem); } else { mItems.Add(newItem); } } else if (positioned == Positioned.AFTER) { if (pivot.GetGr
public static void WriteUint8(Stream theStream, int theValue) { theStream.WriteByte((byte)theValue); }
private E UnlinkFirst() { Node<E> f = first; if (f == null) return default; // returns null if the element is empty Node<E> n = f.Next; E item = f.Item; f.Item = default; f.Next = f; first = n; if (n == null) last = null; else n.Previous = null; --count; notFull.Signal(); return item; }
public void TestCase11() { byte[] aBytes = new byte[] { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; byte[] bBytes = new byte[] { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; int aSign = _NUM; int bSign = -_NUM; byte[] rBytes = new byte[] { _NUM, _NUM, _NUM, _NUM, -_NUM, -_NUM, -_NUM, -_NUM, -_NUM, -_NUM, -_NUM, -_NUM, -_NUM, -_NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger bNumber = new BigInteger(bSign, bBytes); BigInteger result = BigInteger.Add(aNumber, bNumber); byte[] resBytes = result.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++)
public override void AddHeader(string header, string value) { mHeadersOptions.Add(new HeaderOption(header, value)); }
public void Store() { try { keyProvider.Store(); } catch (KeyStoreException e) { throw new SAMLException(e.Message); } catch (CertificateException e) { throw new SAMLException(e.Message); } catch (NoSuchAlgorithmException e) { throw new SAMLException(e.Message); } catch (IOException e) { throw new SAMLException(e.Message); } }
static void AppendToPointerHierarchy(BaseType type, BaseType pointer) { if (type == null) throw new ArgumentNullException(nameof(type)); if (pointer == null) throw new ArgumentNullException(nameof(pointer)); if (type == pointer) throw new ArgumentException("Type cannot be the same as pointer."); if (pointer.PointedToBy == type) throw new ArgumentException("Pointer is already pointed to by the type."); if (type.PointsTo == pointer) throw new ArgumentException("Type already points to the pointer."); pointer.PointsTo = type; type.PointedToBy = pointer; }
public static void Sort(long[] a) { DoSort(a, _NUM, a.Length - _NUM); }
public string ToString() { return _STR + string.Format(_STR, ValueSimilarity * _NUM) + _STR + string.Format(_STR, ContainmentSimilarity * _NUM) + _STR + string.Format(_STR, SizeSimilarity * _NUM); }
public T Last() { IEnumerator<T> enumerator = GetEnumerator(); T value = default; while (enumerator.MoveNext()) { value = enumerator.Current; } return value; }
public static void ThreadSleep(long millis) { try { System.Threading.Thread.Sleep((int)millis); } catch (ThreadInterruptedException ex) { Console.WriteLine(ex.ToString()); } }
public int IndexOf(Node elem, int index) { RunTo(-_NUM); if (m_map == null) return -_NUM; for (int i = index; i < m_firstFree; i++) { Node node = m_map[i]; if (node != null && node.Equals(elem)) return i; } return -_NUM; }
static bool IsPackageAccess(int modifiers) { return (modifiers & ACCESS_TEST) == _NUM; }
public void Write(string filename) { using (var stream = new StreamWriter(filename)) { Write(stream); } }
public ManagedWindowDecorator(Window window, string windowId) { this.window = window; name = _STR + windowId; }
public override void Write(byte[] b, int off, int len) { while (len > _NUM) { int c = Math.Min(len, decoderIn.Remaining()); decoderIn.Put(b, off, c); ProcessInput(_BOOL); len -= c; off += c; } if (writeImmediately) { FlushOutput(); } }
public static void Log(string message, params object[] args) { if (loggingEnabled) { Console.WriteLine(args.Length == _NUM ? message : string.Format(message, args)); } }
protected void ProcessUpdates(Queue<DeviceUpdate> updates) { if (updates == null) return; DeviceUpdate update = null; while ((update = updates.Dequeue()) != null) { if (logger.IsTraceEnabled) { logger.Trace(_STR, update); } if (update.Change == DeviceUpdate.Change.DELETE) { deviceSyncManager.RemoveDevice(update.Device); } else { deviceSyncManager.StoreDevice(update.Device); } List<IDeviceListener> listeners = deviceListeners.GetOrderedListeners(); NotifyListeners(listeners, update); } }
bool HandleRemoteCanRebalance(long size) { return _BOOL; }
public static FileInfo ToSldFile(FileInfo file) { string path = file.FullName; string baseName = path.Substring(_NUM, path.Length - _NUM); string newPath = baseName + _STR; FileInfo sld = new FileInfo(newPath); if (sld.Exists) { return sld; } newPath = baseName + _STR; sld = new FileInfo(newPath); if (sld.Exists) { return sld; } return null; }
private string InsertProperties(string template, Dictionary<string, string> properties) { foreach (var entry in properties) { template = template.Replace(entry.Key, entry.Value); } return template; }
public static void ChangeFont(Control comp, FontStyle style) { Font font = comp.Font; comp.Font = new Font(font, style); }
public void DrawContours(Mat img, Color color) { Drawing.DrawContours(img, contours, color); }
public static void SaveX509Cert(string certStr, string certFilePath) { using (var writer = new StreamWriter(certFilePath)) { writer.WriteLine(BEGIN_CERT); writer.WriteLine(certStr); writer.WriteLine(END_CERT); } }
public void ClearOnCentralPositionChangedListener() { mOnCentralPositionChangedListeners.Clear(); }
public static object InvokeStatic(Type clazz, string methodName) { try { var method = clazz.GetMethod(methodName, new Type[_NUM]); var result = method.Invoke(null, new object[_NUM]); return result; } catch (IllegalAccessException) { throw new MissingMethodException(methodName + _STR); } catch (TargetInvocationException e) { throw new InvalidOperationException(e.Message); } }
[Obsolete] public bool IsFillBelowLine() { return mFillBelowLine.Count > _NUM; }
public void OnPatchServiceResult(bool isUpgradePatch) { if (!isRetryEnable) { TinkerLog.W(TAG, _STR); return; } if (!isUpgradePatch) { TinkerLog.W(TAG, _STR); return; } if (retryInfoFile.Exists()) { SharePatchFileUtil.SafeDeleteFile(retryInfoFile); } if (tempPatchFile.Exists()) { SharePatchFileUtil.SafeDeleteFile(tempPatchFile); } }
public static _Fields FindByThriftId(int fieldId) { switch (fieldId) { case _NUM: return NOTE_ID; case _NUM: return CLASS_NAME; case _NUM: return INTERPRETER_CONTEXT; default: return null; } }
public static bool IsStanza(Packet packet) { if (packet is Message) return true; if (packet is IQ) return true; if (packet is Presence) return true; return false; }
public override int Execute(FormObject form, int type, string code, int eventType, char keyPressed) { int messageCode = ActionHandler.NOMESSAGE; if (code is string js) { string[] args = JSFunction.ConvertToArray(js); string command = args[_NUM]; if (command.StartsWith(_STR)) { messageCode = HandleAFCommands(form, command, js, args, eventType, keyPressed); } } return messageCode; }
private bool NeedsUpdate(long bundleVersion, string beanVersion) { if (beanVersion.Contains(_STR)) { Log.Info(TAG, _STR + bundleVersion); Log.Info(TAG, _STR + beanVersion); return _BOOL; } else { try { long parsedVersion = long.Parse(beanVersion.Split(new[] { _STR }, StringSplitOptions.None)[_NUM]); Log.Info(TAG, _STR + bundleVersion); Log.Info(TAG, _STR + parsedVersion); if (bundleVersion > parsedVersion) { return _BOOL; } else { Log.Info(TAG, _STR); } } catch (FormatException e) { Log.Error(TAG, _STR + beanVersion); Fail(BeanError.UNPARSABLE_FW_VERSION); } } return _BOOL; }
public void Clear(FacesContext facesContext, Dictionary<string, object> viewMap) { if (LOGGER.IsLoggable(Level.FINEST)) { LOGGER.Log(Level.FINEST, _STR); } var contextMap = GetContextMap(facesContext, viewMap); if (contextMap != null) { DestroyBeans(viewMap, contextMap); } }
public void LoadLogicalTablesWithGranularities(Dictionary<string, TableGroup> nameGroupMap, HashSet<Granularity> validGrains, ResourceDictionaries dictionaries) { foreach (var entry in nameGroupMap) { string logicalTableName = entry.Key; TableGroup group = entry.Value; LoadLogicalTableWithGranularities(logicalTableName, group, validGrains, dictionaries); } }
protected int ReadBlock() { blockSize = Read(); int n = _NUM; if (blockSize > _NUM) { try { int count = _NUM; while (n < blockSize) { count = in.Read(block, n, blockSize - n); if (count == -_NUM) break; n += count; } } catch (IOException e) { // Handle exception if necessary } if (n < blockSize) { status = STATUS_FORMAT_ERROR; } } return n; }
public override void AddNewSubscription(Subscription newSubscription) { string clientID = newSubscription.GetClientId(); List<ClientTopicCouple> clientSubscriptions; if (!subscriptions.TryGetValue(clientID, out clientSubscriptions)) { clientSubscriptions = new List<ClientTopicCouple>(); subscriptions[clientID] = clientSubscriptions; } clientSubscriptions.Add(newSubscription.AsClientTopicCouple()); }
public X509CertPathImpl(List<Certificate> certs) { if (certs == null || certs.Count == 0) { throw new CertificateException("Certs cannot be null or empty."); } int size = certs.Count; certificates = new List<X509Certificate>(size); for (int i = 0; i < size; i++) { Certificate cert = certs[i]; if (!(cert is X509Certificate)) { throw new CertificateException("Certificate at index " + i + " is not an X509Certificate."); } certificates.Add((X509Certificate)cert); } }
public Process(string xmlString) { InitContext(); using (StringReader in = new StringReader(xmlString)) { ReadProcess(in); } }
public ConsulTopologyFraction() { this.url = DEFAULT_URL; }
protected string BuildQualifierRegex(string qualifierValue) { StringBuilder sb = new StringBuilder(); sb.Append(_STR); sb.Append(qualifierValue); sb.Append(_STR); return sb.ToString(); }
public string ShortenName(string name, int desiredLength) { int originalLength = name.Length; if (desiredLength <= _NUM || originalLength <= desiredLength) { return name; } int delta = originalLength - desiredLength; int startCut = desiredLength / _NUM; StringBuilder result = new StringBuilder(); result.Append(name.Substring(_NUM, startCut)); if ((startCut == _NUM || name[startCut - _NUM] != _STR) && (startCut + delta + _NUM == originalLength || name[startCut + delta + _NUM] != _STR)) { result.Append(_STR); } result.Append(name.Substring(startCut + delta + _NUM, originalLength - (startCut + delta + _NUM))); return result.ToString(); }
public static Color Blend(Color color1, Color color2, double weight) { double w2 = Math.Clamp(weight, 0, 1); double w1 = 1 - w2; int r = (int)Math.Round(w1 * color1.R + w2 * color2.R); int g = (int)Math.Round(w1 * color1.G + w2 * color2.G); int b = (int)Math.Round(w1 * color1.B + w2 * color2.B); int a = (int)Math.Round(w1 * color1.A + w2 * color2.A); return Color.FromArgb(a, r, g, b); }
public long Kstkeip() { return long.Parse(fields[_NUM]); }
private void DecideUILookAndFeel(MainOptions options) { try { bool systemPlaf = false; systemPlaf = options.SystemPlaf; string systemPlafReq = Environment.GetEnvironmentVariable("YOUR_ENV_VARIABLE_NAME"); if (systemPlafReq != null && systemPlafReq.Equals("YOUR_ENV_VARIABLE_NAME", StringComparison.OrdinalIgnoreCase)) { systemPlaf = true; } if (systemPlaf) { UIManager.SetLookAndFeel(UIManager.GetSystemLookAndFeelClassName()); } } catch (Exception exc) { Console.WriteLine(exc); } }
public static Bitmap ToBufferedImage(Image img, System.Drawing.Imaging.PixelFormat format) { if (img is Bitmap bitmap) { return bitmap; } Bitmap bimage = new Bitmap(img.Width, img.Height, format); using (Graphics bGr = Graphics.FromImage(bimage)) { bGr.DrawImage(img, Point.Empty); } return bimage; }
private JArray ReadArray() { JArray result = new JArray(); bool hasTrailingSeparator = _BOOL; while (_BOOL) { switch (NextCleanInternal()) { case -_NUM: throw SyntaxError(_STR); case _STR: if (hasTrailingSeparator) { result.Add(null); } return result; case _STR: case _STR: result.Add(null); hasTrailingSeparator = _BOOL; continue; default: pos--; break; } result.Add(NextValue()); switch (NextCleanInternal()) { case _STR: return result; case _STR: case _STR: hasTrailingSeparator = _BOOL; continue; default: throw SyntaxError(_STR); } } }
public static byte[] HexStringToByteArray(string strA) { using (var result = new System.IO.MemoryStream()) { byte sum = 0; bool nextCharIsUpper = true; for (int i = 0; i < strA.Length; i++) { char c = strA[i]; switch (char.ToUpper(c)) { case '0': if (nextCharIsUpper) { sum = 0; nextCharIsUpper = false; } else { sum |= 0; result.WriteByte(sum); nextCharIsUpper = true; } break; case '1': if (nextCharIsUpper) { sum = 0; nextCharIsUpper = false; } else { sum |= 1; result.WriteByte(sum); nextCharIsUpper = true; } break; case '2': if (nextCharIsUpper) { sum = 0; nextCharIsUpper = false; } else { sum |= 2; result.WriteByte(sum);
public List<Node> ListAvailableTerminals(Type type) { List<Node> result = new List<Node>(); foreach (Node node in availableNodes) { if (node.GetNumberOfArguments() == _NUM && type.IsAssignableFrom(node.GetReturnType())) { result.Add(node); } } return result; }
public void RemoveSensorSelectionListener(SensorSelectionListener listener) { listenerList.Remove(typeof(SensorSelectionListener), listener); }
public void Write(int c) { if (_output == null) throw new IOException(_STR); _output.Append((char)c); }
private static void TestDexClassLoader() { ClassLoader dexClassLoader = GetDexClassLoader(); Type anotherClass; try { anotherClass = dexClassLoader.LoadClass(_STR); } catch (ClassNotFoundException cnfe) { throw new InvalidOperationException(_STR); } object another; try { another = Activator.CreateInstance(anotherClass); } catch (MethodAccessException ie) { throw new InvalidOperationException(_STR, ie); } catch (TargetInvocationException ie) { throw new InvalidOperationException(_STR, ie); } dexClassLoader.GetResource(_STR); }
public void Register(GridCacheTtlManager mgr) { lock (mux) { if (cleanupWorker == null) StartCleanupWorker(); mgrs.Add(mgr); } }
public static System.Data.SqlTypes.SqlTime? ToSqlTime(int hour, int minute, int second) { DateTime newDate = new DateTime(DateTime.Now.Year, DateTime.Now.Month, DateTime.Now.Day, hour, minute, second); return new SqlTime(newDate.TimeOfDay); }
public void InitializeKeyStore() { try { var logger = (com.sun.identity.log.Logger)Logger.GetLogger(logName); ResetCurrentFileList(logName); AddToCurrentFileList(logName, logName, logName); string logPath = lmanager.GetProperty(LogConstants.LOG_LOCATION); if (!logPath.EndsWith(_STR)) logPath += _STR; string fileName = logName; string loggerFileName = logPath + PREFIX + _STR + fileName; string verifierFileName = logPath + PREFIX + _STR + fileName; Debug.Message(logName + _STR + loggerFileName); Debug.Message(logName + _STR + verifierFileName); helper.InitializeSecureLogHelper(loggerFileName, logPassword, verifierFileName, logPassword); Debug.Message(logName + _STR); helper.InitializeVerifier(verifierFileName, logPassword, verPassword); Debug.Message(logName + _STR); } catch (Exception e) { Debug.Error(logName + _STR, e); } }
private byte[] ImageDataToPlatformImageBytes(byte[] imageData, int width, int height, long format) { return imageData; // This is a placeholder implementation. The actual conversion logic should be added here. }
public void WriteExif(Bitmap bmap, Stream exifOutStream) { if (bmap == null || exifOutStream == null) { throw new ArgumentException(NULL_ARGUMENT_STRING); } Stream s = GetExifWriterStream(exifOutStream); bmap.Compress(Bitmap.CompressFormat.Jpeg, _NUM, s); s.Flush(); }
public static string CleanFolderStackingMarkers(string filename) { if (!string.IsNullOrEmpty(filename)) { Match m = folderStackingPattern.Match(filename); if (m.Success) { return m.Groups[_NUM].Value + m.Groups[_NUM].Value; } } return filename; }
public void Discard(ServiceRegistrar reg) { lock (registrars) { if (terminated) { throw new InvalidOperationException(_STR); } if (reg == null) return; SendDiscarded(reg, null); } }
public bool IsFinalState(int state) { return (state < _NUM) ? _BOOL : fFinalStateFlags[state]; }
public static string GenerateScaleMarkers(int proteinLength, int maxNumScaleMarkers) { if (maxNumScaleMarkers < _NUM) { maxNumScaleMarkers = _NUM; } int scale = CalcScale(proteinLength, maxNumScaleMarkers); StringBuilder sb = new StringBuilder(_STR); int index = _NUM; int numRemaining = proteinLength; while (index <= proteinLength) { index += scale; numRemaining -= scale; sb.Append(_STR); if (numRemaining > _NUM && numRemaining < scale) { if (numRemaining < (scale / _NUM)) { sb.Append(proteinLength); break; } } if (index >= proteinLength) { sb.Append(proteinLength); } else { sb.Append(index); } } return sb.ToString(); }
public void WriteFigTreeBlock(Dictionary<string, object> settings) { writer.WriteLine(_STR); foreach (var key in settings.Keys) { object value = settings[key]; writer.WriteLine(_STR + key + _STR + CreateString(value) + _STR); } writer.WriteLine(_STR); }
public int GetHashCode() { return font.GetHashCode() ^ glyphs.Length; }
public override bool Equals(object obj) { if (obj == this) { return true; } if (obj is not IDictionary) { return false; } var map = (IDictionary)obj; if (map.Count != this.Count) { return false; } var enumerator = map.GetEnumerator(); try { while (enumerator.MoveNext()) { var key = enumerator.Key; var value = enumerator.Value; if (value == null) { if (map[key] != null || map.Contains(key)) { return false; } } else { if (!value.Equals(map[key])) { return false; } } } } catch (InvalidCastException) { return false; } catch (ArgumentNullException) { return false; } return true; }
public override void DoctypeDecl(string rootElement, string publicId, string systemId, Augmentations augs) { fInDTD = _BOOL; try { if (fLexicalHandler != null) { fLexicalHandler.StartDTD(rootElement, publicId, systemId); } } catch (SAXException e) { throw new XNIException(e); } if (fDeclHandler != null) { fDeclaredAttrs = new SymbolHash(); } }
public void WriteExif(byte[] jpeg, string exifOutFileName) { if (jpeg == null || exifOutFileName == null) { throw new ArgumentException("NULL_ARGUMENT_STRING"); } Stream s = null; try { s = GetExifWriterStream(exifOutFileName); s.Write(jpeg, 0, jpeg.Length); s.Flush(); } catch (IOException e) { CloseSilently(s); throw; } finally { s?.Close(); } }
public void CleanStart() { using (var conn = GetConnection(_BOOL, _BOOL)) { if (conn == null) throw new InvalidOperationException(_STR); DropDatabase(conn); CreateUser(conn); CreateDatabase(conn); } // Connection will be closed automatically here }
public static TemplateModelException NewMethodArgInvalidValueException(string methodName, int argIdx, params object[] details) { return new TemplateModelException(methodName, _STR, argIdx + _NUM, _STR, details); }
public static byte[] CompressForZlib(string stringToCompress) { byte[] returnValues = null; try { returnValues = CompressForZlib(Encoding.UTF8.GetBytes(stringToCompress)); } catch (Exception ex) { Console.WriteLine(ex); } return returnValues; }
private void LoadMap(string extension, string mimeType) { if (!mimeTypeToExtensionMap.ContainsKey(mimeType)) { mimeTypeToExtensionMap[mimeType] = extension; } extensionToMimeTypeMap[extension] = mimeType; if (IsImageType(mimeType)) { imageMimeTypeSet.Add(mimeType); } }
public void StartDTD(string name, string publicId, string systemId) { // Add or remove a name of a name after the name of the name. }
private string ConvertTimestamp() { string result = Regex.Replace(timestampFormat, VALID_DATEFORMAT_CHAR_PATTERN + "_STR", "_STR"); result = Regex.Replace(result, Regex.Escape("_STR"), "_STR"); return result; }
public static string Encode(byte[] bytes) { int len = bytes.Length; StringBuilder encoded = new StringBuilder((len + _NUM) / _NUM * _NUM); int i = _NUM; int j = len; while (j >= _NUM) { encoded.Append(To64(((bytes[i] & _NUM) << _NUM) | ((bytes[i + _NUM] & _NUM) << _NUM) | (bytes[i + _NUM] & _NUM), _NUM)); i += _NUM; j -= _NUM; } if (j == _NUM) { encoded.Append(To64(((bytes[i] & _NUM) << _NUM) | (bytes[i + _NUM] & _NUM), _NUM)); } if (j == _NUM) { encoded.Append(To64((bytes[i] & _NUM), _NUM)); } return encoded.ToString(); }
public void Print(double v) { var outWriter = this.out; if (outWriter == null) return; try { string s = v.ToString(); outWriter.Write(s + Environment.NewLine); } catch (IOException e) { log.Log(LogLevel.Debug, e.ToString(), e); } }
public string ToString() { StringBuilder result = new StringBuilder(ipAddress.ToString()); result.Append(_STR); result.Append(extendedNetworkPrefix); return result.ToString(); }
private static bool ContainsChroot(string zkHost) { return zkHost.Contains(_STR); }
public static void OnDatabase(MongoClient client, string dbName, Action<MongoDatabase> dbOperation) { if (client.ListDatabaseNames().ToList().Contains(dbName)) { dbOperation(client.GetDatabase(dbName)); } }
protected int CreateHashCode() { int result = uri.GetHashCode() ^ prefix.GetHashCode(); if (result == _NUM) { result = _NUM; } return result; }
private void UpdateBaseMatrix(Drawable drawable) { ImageView imageView = GetImageView(); if (imageView == null || drawable == null) { return; } float viewWidth = imageView.Width; float viewHeight = imageView.Height; int drawableWidth = drawable.IntrinsicWidth; int drawableHeight = drawable.IntrinsicHeight; mBaseMatrix.Reset(); float widthScale = viewWidth / drawableWidth; float heightScale = viewHeight / drawableHeight; if (mScaleType == ScaleType.Center) { mBaseMatrix.PostTranslate((viewWidth - drawableWidth) / _NUM, (viewHeight - drawableHeight) / _NUM); } else if (mScaleType == ScaleType.CenterCrop) { float scale = Math.Max(widthScale, heightScale); mBaseMatrix.PostScale(scale, scale); mBaseMatrix.PostTranslate((viewWidth - drawableWidth * scale) / _NUM, (viewHeight - drawableHeight * scale) / _NUM); } else if (mScaleType == ScaleType.CenterInside) { float scale = Math.Min(_NUM, Math.Min(widthScale, hei
public static PlaceholderFragment NewInstance(int sectionNumber) { PlaceholderFragment fragment = new PlaceholderFragment(); Bundle args = new Bundle(); args.PutInt(ARG_SECTION_NUMBER, sectionNumber); fragment.Arguments = args; return fragment; }
public string ImportTrl(string directory, int adClientId, string adLanguage, string trlTable) { string fileName = Path.Combine(directory, trlTable + _STR + adLanguage + _STR); log.Info(fileName); FileInfo file = new FileInfo(fileName); if (!file.Exists) { string msg = _STR + fileName; log.Log(LogLevel.Severe, msg); return msg; } try { TranslationHandler handler = new TranslationHandler(adClientId); var factory = SAXParserFactory.NewInstance(); var parser = factory.NewSAXParser(); parser.Parse(file.FullName, handler); log.Info(_STR + handler.GetUpdateCount()); return Msg.GetMsg(m_ctx, _STR) + _STR + handler.GetUpdateCount(); } catch (Exception e) { log.Log(LogLevel.Severe, _STR, e); return e.ToString(); } }
public ResultFileReader(Problem problem, FileInfo file) { this.problem = problem; using (var reader = new StreamReader(file.OpenRead())) { line = reader.ReadLine(); } }
public override void OnFailure(IMqttToken asyncActionToken, Exception exception) { exception.PrintStackTrace(); Log.Error(_STR, _STR + exception.Message); OnDisconnect(_BOOL); }
public override bool Exclude(string identifier) { return blacklist.Contains(identifier); }
public static bool CheckCommunicationError(Exception exc) { Exception rootCause = SolrException.GetRootCause(exc); bool wasCommError = rootCause is ConnectException || rootCause is ConnectTimeoutException || rootCause is NoHttpResponseException || rootCause is SocketException; return wasCommError; }
public bool IsReliable() { return _bool; }
private void Push(int type) { if (outputStack == null) { outputStack = new int[_NUM]; } int n = outputStack.Length; if (outputStackTop >= n) { int[] t = new int[Math.Max(outputStackTop + _NUM, _NUM * n)]; Array.Copy(outputStack, _NUM, t, _NUM, n); outputStack = t; } outputStack[outputStackTop++] = type; int top = owner.inputStackTop + outputStackTop; if (top > owner.outputStackMax) { owner.outputStackMax = top; } }
private static string SHORT_Max_Plus() { long tempValue = short.MaxValue + _NUM; return tempValue.ToString(); }
public void FirePropertyChange(string name, object oldValue, object newValue) { beanContextChildSupport.FirePropertyChange(name, oldValue, newValue); }
public static string Encode(string value) { value = value.Replace(_STR, _STR); value = value.Replace(_STR, _STR); value = value.Replace(_STR, _STR); value = value.Replace(_STR, _STR); value = value.Replace(_STR, _STR); value = value.Replace(_STR, _STR); return value; }
public void CreateDatabaseEntitiesForStoragePolicyTesting() { CreateDatabaseEntitiesForStoragePolicyTesting( AbstractServiceTest.STORAGE_POLICY_NAMESPACE_CD, new List<string> { AbstractServiceTest.STORAGE_POLICY_RULE_TYPE }, AbstractServiceTest.BDEF_NAMESPACE, AbstractServiceTest.BDEF_NAME, new List<string> { AbstractServiceTest.FORMAT_FILE_TYPE_CODE }, new List<string> { AbstractServiceTest.STORAGE_NAME }, new List<string> { AbstractServiceTest.STORAGE_NAME_2 } ); }
private PDFPage CreatePage(int pageNum, PDFObject pageObj) { int rotation = _NUM; RectF mediabox = null; RectF cropbox = null; PDFObject mediaboxObj = GetInheritedValue(pageObj, _STR); if (mediaboxObj != null) { mediabox = ParseRect(mediaboxObj); } PDFObject cropboxObj = GetInheritedValue(pageObj, _STR); if (cropboxObj != null) { cropbox = ParseRect(cropboxObj); } PDFObject rotateObj = GetInheritedValue(pageObj, _STR); if (rotateObj != null) { rotation = rotateObj.GetIntValue(); } RectF bbox = (cropbox == null) ? mediabox : cropbox; return new PDFPage(pageNum, bbox, rotation, cache); }
static Dictionary<string, HashSet<object>> AddElementToMap(string key, HashSet<object> values, Dictionary<string, HashSet<object>> toMap) { if (key != null && toMap != null) { toMap[key] = values; } return toMap; }
public void SaveBootProp() { if (!bootProp.Equals(bootPropOrg)) { string propFile = jarFolder + _STR; using (var os = new FileStream(propFile, FileMode.Create, FileAccess.Write)) { bootProp.Store(os, _STR); } } }
private int Append(FileSystem fs, Configuration conf, Path src, StreamWriter writer, int currentRecordNumber) { using (var reader = new StreamReader(fs.Open(src))) { string line; while ((line = reader.ReadLine()) != null) { if (line.StartsWith(_STR)) { line = _STR + currentRecordNumber++; } writer.WriteLine(line); } } return currentRecordNumber; }
public PacketOutputStream WriteTimestampLength(Calendar calendar, Timestamp ts, bool fractionalSeconds) { AssureBufferCapacity(fractionalSeconds ? _NUM : _NUM); buffer.Put((byte)(fractionalSeconds ? _NUM : _NUM)); buffer.PutShort((short)calendar.Get(Calendar.Year)); buffer.Put((byte)((calendar.Get(Calendar.Month) + _NUM) & _NUM)); buffer.Put((byte)(calendar.Get(Calendar.DayOfMonth) & _NUM)); buffer.Put((byte)calendar.Get(Calendar.HourOfDay)); buffer.Put((byte)calendar.Get(Calendar.Minute)); buffer.Put((byte)calendar.Get(Calendar.Second)); if (fractionalSeconds) { buffer.PutInt(ts.GetNanos() / _NUM); } return this; }
public int Difference(string s1, string s2) { return SoundexUtils.Difference(this, s1, s2); }
public static string Morpha(string text, bool tags) { if (string.IsNullOrEmpty(text)) { return _STR; } string[] textParts = whitespace.Split(text); StringBuilder result = new StringBuilder(); try { foreach (string textPart in textParts) { Morpha morpha = new Morpha(new StringReader(textPart), tags); if (result.Length != _NUM) { result.Append(_STR); } result.Append(morpha.Next()); } } catch (Error) { return text; } catch (IOException) { return text; } return result.ToString(); }
public static void DeleteFile(FileInfo file) { if (!file.Delete()) { throw new AdeUsageException(FAILED_DELETING_FILE + file.FullName); } }
public Shape CreateCheckMark(int x, int y, int w, int h) { double xf = w / _NUM; double hf = h / _NUM; path.Reset(); path.MoveTo(x, y + _NUM * hf); path.LineTo(x + _NUM * xf, y + _NUM * hf); path.LineTo(x + _NUM * xf, y); path.LineTo(x + _NUM * xf, y); path.LineTo(x + _NUM * xf, y + _NUM * hf); path.ClosePath(); return path; }
public override void Initialize() { lock (this) { if (!mRootDirectory.Exists) { if (!mRootDirectory.CreateSubdirectory(mRootDirectory.Name).Exists) { VolleyLog.e(_STR, mRootDirectory.FullName); } return; } FileInfo[] files = mRootDirectory.GetFiles(); if (files == null) { return; } foreach (FileInfo file in files) { FileStream fis = null; try { fis = new FileStream(file.FullName, FileMode.Open); CacheHeader entry = CacheHeader.ReadHeader(fis); entry.Size = file.Length; PutEntry(entry.Key, entry); } catch (IOException) { if (file != null) { file.Delete(); } } finally { try { fis?.Close(); } catch (IOException) { } } } } }
public TCPChannelClient(ExecutorService executor, TCPChannelEvents eventListener, string ip, int port) { this.executor = executor; executorThreadCheck = new ThreadUtils.ThreadChecker(); executorThreadCheck.DetachThread(); this.eventListener = eventListener; IPAddress address; try { address = Dns.GetHostEntry(ip).AddressList[0]; // Simplified to get the first address } catch (SocketException) { ReportError(_STR); return; } if (IPAddress.IsLoopback(address) || address.Equals(IPAddress.Any)) { socket = new TCPSocketServer(address, port); } else { socket = new TCPSocketClient(address, port); } socket.Start(); }
protected void CutSelectedBean() { if (Debug.Debugging(_STR)) Debug.Output(_STR); if (selectedBean == null || selectedBeanLocation == null) { if (Debug.Debugging(_STR)) Debug.Output(_STR + selectedBean); if (Debug.Debugging(_STR)) Debug.Output(_STR + selectedBeanLocation); ClearSelection(); return; } try { using (var serBean = new MemoryStream()) { using (var oos = new BinaryFormatter()) { oos.Serialize(serBean, selectedBean); } } } catch (Exception e) { e.PrintStackTrace(); ClearSelection(); if (Debug.Debugging(_STR)) Debug.Output(_STR); return; } cutBean = selectedBean; selectedBeanBox.ShowCut(selectedBean); if (Debug.Debugging(_STR)) Debug.Output(_STR); }
public RemoverManager Track(Remover remover) { if (handlers == null) { handlers = new List<Remover>(); } handlers.Add(remover); return this; }
public void OnActionPerformed(System.EventArgs e) { var source = e.Source; if (!(source is ToolStripMenuItem)) return; var mi = (ToolStripMenuItem)source; string name = mi.Text; OMGraphicHandlerLayer targetLayer = (OMGraphicHandlerLayer)layers[name]; if (targetLayer == null) { Debug.Message(_STR, _STR + _STR + name); return; } targetLayer.DoAction((OMGraphic)transferData, new OMAction(OMAction.UPDATE_GRAPHIC_MASK)); }
private void AddEntry() { model.AddNewEntry(); removeButton.Enabled = _BOOL; }
private void EnsureSize() { if (children == EMPTY_CHILDREN) { children = new FPNode[_NUM]; return; } int newsize = children.Length == _NUM ? INITIAL_SIZE : (children.Length << _NUM); Array.Resize(ref children, newsize); }
public UUID(long mostSigBits, long leastSigBits) { this.mostSigBits = mostSigBits; this.leastSigBits = leastSigBits; Init(); }
public static PrettyPrint IndentWithSpaces(int number) { if (number < _NUM) { throw new ArgumentException(_STR); } char[] chars = new char[number]; Array.Fill(chars, _STR[0]); // Assuming _STR is a string and we use the first character return new PrettyPrint(chars); }
private static void RenderHandler(FacesContext context, UIComponent component, ICollection<ClientBehaviorContext.Parameter> parameters, string handlerName, object handlerValue, string behaviorEventName, string submitTarget, bool needsSubmit, bool includeExec) { ResponseWriter writer = context.GetResponseWriter(); string userHandler = GetNonEmptyUserHandler(handlerValue); List<ClientBehavior> behaviors = GetClientBehaviors(component, behaviorEventName); if (behaviors != null && behaviors.Count > _NUM && Util.ComponentIsDisabled(component)) { behaviors = null; } if (parameters == null) { parameters = new List<ClientBehaviorContext.Parameter>(); } string handler = null; switch (GetHandlerType(behaviors, parameters, userHandler, needsSubmit, includeExec)) { case HandlerType.USER_HANDLER_ONLY: handler = userHandler; break; case HandlerType.SINGLE_BEHAVIOR_ONLY: handler = GetSingleBehaviorHandler(context, component, behaviors[_NUM], parameters, behaviorEventName, submitTarget, needsSubmit); break; case HandlerType.SUBMIT_ONLY: handler = GetSubmitHandler(context, component, paramet
public string ConstructTSDBMetricName() { StringBuilder sb = new StringBuilder(GetScope()); if (!string.IsNullOrEmpty(_namespace)) { sb.Append(GetNamespace()); } return sb.ToString(); }
protected override void RegisterNewSelector() { lock (selector) { var keys = selector.Keys; Selector newSelector = null; if (selectorProvider == null) { newSelector = Selector.Open(); } else { newSelector = selectorProvider.OpenSelector(); } foreach (var key in keys) { var ch = key.Channel(); var session = (NioSession)key.Attachment(); var newKey = ch.Register(newSelector, key.InterestOps(), session); session.SetSelectionKey(newKey); } selector.Close(); selector = newSelector; } }
public void TestCase4() { byte[] aBytes = { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; byte[] bBytes = { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; int aSign = _NUM; int bSign = _NUM; byte[] rBytes = { _NUM, _NUM, _NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM, (byte)-_NUM, _NUM, _NUM, _NUM, (byte)-_NUM, _NUM, (byte)-_NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, (byte)-_NUM, (byte)-_NUM, (byte)-_NUM, (byte)-_NUM, (byte)-_NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger bNumber = new BigInteger(bSign
protected synchronized void Received(int responseCode, string stream, string json) { FollowerInfo result = ParseFollowers(stream, json); if (result != null) { NoError(stream); cached.Put(stream, result); if (type == Follower.Type.FOLLOWER) { listener.ReceivedFollowers(result); if (HasNewFollowers(result.Followers)) { listener.NewFollowers(result); } } else if (type == Follower.Type.SUBSCRIBER) { listener.ReceivedSubscribers(result); } requested.Add(stream); } else { string errorMessage = _STR; if (responseCode == _NUM) { errorMessage = _STR; Error(stream, _NUM); } else if (responseCode == _NUM) { errorMessage = _STR; Error(stream, _NUM); } else if (responseCode == _NUM || responseCode == _NUM) { errorMessage = _STR; Error(stream, _NUM); } else if (responseCode == _NUM) { errorMessage = _STR; Error(stream, _NUM
public static List<T> Select<T>(SqlConnection connection, string rawSqlQuery, RowProcessor<T> rowProcessor, params object[] parameters) { SqlCommand cmd = null; SqlDataReader reader = null; try { cmd = new SqlCommand(rawSqlQuery, connection); for (int index = _NUM; index < parameters.Length; index++) { JdbcUtils.BindParameter(cmd, index + _NUM, parameters[index]); } reader = cmd.ExecuteReader(); List<T> result = new List<T>(); while (reader.Read()) { result.Add(rowProcessor.Process(reader)); } return result; } finally { JdbcUtils.CloseReader(reader); JdbcUtils.CloseCommand(cmd); } }
public static long NowInNanos() { return System.Diagnostics.Stopwatch.GetTimestamp() * (1000000000L / System.Diagnostics.Stopwatch.Frequency); }
public void TestClone() { Format fm = new MockFormat(); Format fmc = (Format)fm.Clone(); Assert.AreEqual(fm.GetType(), fmc.GetType()); }
public Task<SyncReply> SendRequest(int xid, SyncMessage request) { EnsureConnected(); var future = new RemoteSyncFuture(xid, connectionGeneration); futureMap[xid] = future; if (futureMap.Count > MAX_PENDING_REQUESTS) { lock (futureNotify) { while (futureMap.Count > MAX_PENDING_REQUESTS) { Monitor.Wait(futureNotify); } } } channel.WriteAndFlush(request); return future; }
public static bool IsEmpty(string str) { return (str == null || str.Length == 0); }
private static readonly unsafe bool CompareAndSetWaitStatus(Node node, int expect, int update) { return Interop.CompareAndSwapInt(node, waitStatusOffset, expect, update); }
public void EnableDependency(Capability c) { if (DoNotCheckCapabilities()) { return; } if (c == Capability.NominalAttributes) { EnableDependency(Capability.BinaryAttributes); } else if (c == Capability.BinaryAttributes) { EnableDependency(Capability.UnaryAttributes); } else if (c == Capability.UnaryAttributes) { EnableDependency(Capability.EmptyNominalAttributes); } else if (c == Capability.NominalClass) { EnableDependency(Capability.BinaryClass); } m_Dependencies.Add(c); }
public IVariable[] ExtractRobotDebugVariables(int stackTraceId, Dictionary<string, object> newVariables) { var currentVariablesContext = FindCurrentVariablesContext(stackTraceId); var previousVariablesMap = InitPreviousVariablesState(currentVariablesContext); var nonGlobalVariablesMap = new LinkedList<IVariable>(); if (previousVariablesMap == null) { InitNewNonGlobalVariables(newVariables, nonGlobalVariablesMap); } else { InitVariablesComparingWithPreviousState(newVariables, previousVariablesMap, nonGlobalVariablesMap); } var currentVariablesList = CreateCurrentVariablesList(nonGlobalVariablesMap); SaveCurrentVariablesState(stackTraceId, currentVariablesContext, nonGlobalVariablesMap); return currentVariablesList.ToArray(); }
public ResourcesPoet AddInteger(string name, string value) { XmlElement boolElement = document.CreateElement(_STR); boolElement.SetAttribute(_STR, name); boolElement.AppendChild(document.CreateTextNode(value.ToString())); resourceElement.AppendChild(boolElement); return this; }
static bool CheckStandardUPCEANChecksum(string s) { int length = s.Length; if (length == _NUM) { return _BOOL; } int sum = _NUM; for (int i = length - _NUM; i >= _NUM; i -= _NUM) { int digit = s[i] - _STR; if (digit < _NUM || digit > _NUM) { throw new FormatException(); } sum += digit; } sum *= _NUM; for (int i = length - _NUM; i >= _NUM; i -= _NUM) { int digit = s[i] - _STR; if (digit < _NUM || digit > _NUM) { throw new FormatException(); } sum += digit; } return sum % _NUM == _NUM; }
public static string MapFullWidthLetterToHalfWidth(string text) { // Implementation to convert full-width characters to half-width tokens // This section should contain the logic for conversion }
private static void AssertCollectionEqualsNoOrder<T>(ICollection<T> expected, ICollection<T> actual) { string msg = string.Format(_STR, expected.ToString(), actual.ToString()); Assert.AreEqual(expected.Count, actual.Count, msg); foreach (T e in expected) { if (!actual.Contains(e)) { msg = string.Format(_STR + _STR, e, expected, actual); Assert.Fail(msg); } } }
private static bool HasResponseBody(int requestMethod, int responseCode) { return requestMethod != Request.Method.HEAD && !(HttpStatus.SC_CONTINUE <= responseCode && responseCode < HttpStatus.SC_OK) && responseCode != HttpStatus.SC_NO_CONTENT && responseCode != HttpStatus.SC_NOT_MODIFIED; }
public int AvailableInProcess() { return Math.Max(_NUM, maxInProcess - pending.Count); }
public void Add(double x) { Cell[] asArray; long b, v; int m; Cell a; if ((asArray = cells) != null || !CasBase(b = base, BitConverter.DoubleToInt64Bits(BitConverter.Int64BitsToDouble(b) + x))) { bool uncontended = _BOOL; if (asArray == null || (m = asArray.Length - _NUM) < _NUM || (a = asArray[GetProbe() & m]) == null || !(uncontended = a.Cas(v = a.Value, BitConverter.DoubleToInt64Bits(BitConverter.Int64BitsToDouble(v) + x)))) { DoubleAccumulate(x, null, uncontended); } } }
public bool ShouldExecuteAction() { if (delay <= _NUM) { return _BOOL; } long timePassed = DateTimeOffset.Now.ToUnixTimeMilliseconds() - lastActionExecuted; if (timePassed > delay * _NUM) { lastActionExecuted = DateTimeOffset.Now.ToUnixTimeMilliseconds(); return _BOOL; } return _BOOL; }
public static int MoveByWord(string text, int column, bool forward, bool returnCursorAtEnd) { int curColumn = column; int length = text.Length; int direction = forward ? 1 : -1; bool farWordEnd = (direction == 1 && returnCursorAtEnd) || (direction == -1 && !returnCursorAtEnd); bool foundEarlyMatch = false; if (!char.IsWhiteSpace(text[curColumn])) { curColumn = SkipNonWhitespaceSimilar(text, curColumn, forward); if (farWordEnd && curColumn - direction != column) { curColumn -= direction; foundEarlyMatch = true; } } if (!foundEarlyMatch && curColumn >= 0 && curColumn < length) { curColumn = SkipWhitespace(text, curColumn, forward); if (farWordEnd && curColumn >= 0 && curColumn < length) { curColumn = SkipNonWhitespaceSimilar(text, curColumn, forward) - direction; } } if (curColumn < 0 || curColumn >= length) { return -1; } return curColumn; }
protected void HandleOrDeferMessage(DistributionMessage msg) { lock (startupLock) { if (beingSick || playingDead) { if (msg.ContainsRegionContentChange() || msg is PartitionMessageWithDirectReply) { startupMessages.Add(new StartupEvent(msg)); return; } } if (!processingEvents) { startupMessages.Add(new StartupEvent(msg)); return; } } DispatchMessage(msg); }
public bool ZoneExportRemoveVolumes(List<NetworkZoningParam> zoningParams, ICollection<Uri> volumeURIs, string stepId) { NetworkZoningParam zoningParam = zoningParams[_NUM]; _log.Info(string.Format(_STR, zoningParam.GetExportGroupDisplay(), string.Join(", ", volumeURIs))); return DoZoneExportMasksDelete(zoningParams, volumeURIs, stepId); }
private void Shutdown() { if (nbestListWriter != null) { logger.Info(_STR); nbestListWriter.Close(); } if (alignmentWriter != null) { logger.Info(_STR); alignmentWriter.Close(); } }
public override void PaintIcon(Component c, Graphics g, int x, int y) { Painter painter = (Painter)UIManager.Get(prefix + _STR + key); if (painter != null) { JComponent jc = (c is JComponent) ? (JComponent)c : null; Graphics2D gfx = (Graphics2D)g; gfx.Translate(x, y); painter.Paint(gfx, jc, width, height); gfx.Translate(-x, -y); } }
protected void ZoomImageToPosition(float scale, float centerX, float centerY, long durationMs) { if (scale > GetMaxScale()) { scale = GetMaxScale(); } float oldScale = GetCurrentScale(); float deltaScale = scale - oldScale; Post(mZoomImageToPositionRunnable = new ZoomImageToPosition(this, durationMs, oldScale, deltaScale, centerX, centerY)); }
public List<Dictionary<string, string>> List(Database conn) { ResultSet rs = null; Statement statement = conn.CreateStatement(); List<Dictionary<string, string>> shardToChannels = new List<Dictionary<string, string>>(); try { rs = statement.ExecuteQuery(select); while (rs.Next()) { Dictionary<string, string> shard = new Dictionary<string, string>(); shard[ShardChannelTable.SHARD_ID_COL] = rs.GetString(ShardChannelTable.SHARD_ID_COL); shard[ShardChannelTable.CHANNEL_COL] = rs.GetString(ShardChannelTable.CHANNEL_COL); shardToChannels.Add(shard); } } finally { Close(rs); Close(statement); } return shardToChannels; }
public bool IsHidden(FileInfo f) { string name = f.Name; if (name != null && name != _STR && name[_NUM] == _STR[0]) { return true; } else { return false; } }
private bool ScrollViewCanScrollVertically(ScrollView scrollView, int direction) { int offset = Math.Max(_NUM, scrollView.ScrollY); int range = ComputeVerticalScrollRange(scrollView) - scrollView.Height; if (range == _NUM) return _BOOL; if (direction < _NUM) { return offset > _NUM; } else { return offset < range - _NUM; } }
public JarInfo LoadJar() { ZipInputStream zis = null; Manifest mf = null; bool empty = false; try { zis = new ZipInputStream(jarStream); ZipEntry ent = null; while ((ent = zis.GetNextEntry()) != null) { empty = false; string name = ent.Name; if (Manifest.IsManifestName(name)) { using (ByteArrayOutputStream baos = new ByteArrayOutputStream()) { byte[] buffer = new byte[4096]; // Assuming _NUM is predefined as 4096 int len; while ((len = zis.Read(buffer, 0, buffer.Length)) > 0) { baos.Write(buffer, 0, len); } byte[] buf = baos.ToArray(); mf = new Manifest(buf); } } } } catch (IOException ex) { throw; } catch (Exception th) { th.PrintStackTrace(); throw new IOException("Error occurred: " + th); } finally { if (zis != null) { try { zis.Close(
public void InvalidateTitleSortable() { foreach (var movie in new List<Movie>(movieList)) { movie.ClearTitleSortable(); } }
public void AddRow(Assignment head, double prob) { if (prob < _NUM || prob > _NUM) { return; } headVars.AddRange(head.GetVariables()); table[head] = prob; }
public byte[] CreateJarFromFileContent(string fileName, string content) { using (var byteArrayOutputStream = new MemoryStream()) using (var jarOutputStream = new System.IO.Compression.ZipArchive(byteArrayOutputStream, System.IO.Compression.ZipArchiveMode.Create, true)) { var entry = jarOutputStream.CreateEntry(fileName, System.IO.Compression.CompressionLevel.Optimal); using (var entryStream = entry.Open()) using (var writer = new StreamWriter(entryStream)) { writer.Write(content); } } return byteArrayOutputStream.ToArray(); }
private bool GoTo(long day, bool animate, bool setSelected, bool forceScroll) { if (setSelected) { mSelectedDay.SetTimeInMillis(day); } mTempDay.SetTimeInMillis(day); int position = GetPositionFromDay(day); View child; int i = _NUM; int top; do { child = GetChildAt(i++); if (child == null) { break; } top = child.GetTop(); } while (top < _NUM); int selectedPosition; if (child != null) { selectedPosition = GetPositionForView(child); } else { selectedPosition = _NUM; } if (setSelected) { mAdapter.SetSelectedDay(mSelectedDay); } if (position != selectedPosition || forceScroll) { SetMonthDisplayed(mTempDay); mPreviousScrollState = OnScrollListener.SCROLL_STATE_FLING; if (animate) { SmoothScrollToPositionFromTop(position, LIST_TOP_OFFSET, GOTO_SCROLL_DURATION); return _BOOL; } else
public bool Search(V v) { int h = hashMethod.Hash(v); LinkedList<V> list = table[h] as LinkedList<V>; if (list == null) { return false; } return list.Contains(v); }
public void CloseDatabaseConnection(IDbConnection conn) { try { if (conn != null) { conn.Close(); } } catch (SqlException sqle) { SubclassLogWrapper(_STR); } }
public override void MessageItemDetails(string strClass, string item, string description, string[] msgOption, int[] msgNumber, int defaultOption) { var options = new Dictionary<int, string>(msgOption.Length); for (int i = _NUM; i < msgOption.Length; i++) { options[msgNumber[i]] = msgOption[i]; } MessageItemDetails(strClass, description, item, options, defaultOption); }
public void AddListener(ColorMapListener listener) { listeners.Add(listener); }
protected void ComputePDists(Relation<O> relation, KNNQuery<O> knn, WritableDoubleDataStore pdists) { FiniteProgress prdsProgress = LOG.IsVerbose() ? new FiniteProgress(_STR, relation.Size(), LOG) : null; for (var iditer = relation.IterDBIDs(); iditer.Valid(); iditer.Advance()) { var neighbors = knn.GetKNNForDBID(iditer, kreach + _NUM); int ks = _NUM; double ssum = _NUM; for (var neighbor = neighbors.Iter(); neighbor.Valid() && ks < kreach; neighbor.Advance()) { if (DBIDUtil.Equal(neighbor, iditer)) { continue; } double d = neighbor.DoubleValue(); ssum += d * d; ks++; } double pdist = ks > _NUM ? Math.Sqrt(ssum / ks) : _NUM; pdists.PutDouble(iditer, pdist); LOG.IncrementProcessed(prdsProgress); } LOG.EnsureCompleted(prdsProgress); }
private static string AppendIfMissing(string str, string suffix, bool ignoreCase, params string[] suffixes) { if (str == null || string.IsNullOrEmpty(suffix) || EndsWith(str, suffix, ignoreCase)) { return str; } if (suffixes != null && suffixes.Length > 0) { foreach (var s in suffixes) { if (EndsWith(str, s, ignoreCase)) { return str; } } } return str + suffix; } private static bool EndsWith(string str, string suffix, bool ignoreCase) { if (str == null || suffix == null) { return false; } return str.EndsWith(suffix, ignoreCase ? StringComparison.OrdinalIgnoreCase : StringComparison.Ordinal); }
private JArray RequestAllFileSystems() { JArray ret = new JArray(); foreach (var fs in filesystems) { ret.Add(fs.GetRootEntry()); } return ret; }
public ExternalProblem(Process process) { this(process.StandardInput.BaseStream, process.StandardOutput.BaseStream); RedirectStream.Redirect(process.StandardError.BaseStream, Console.OpenStandardError()); }
protected static bool NetworkMonitorExist(string nwMonName) { string classMethod = _STR; if (debug.MessageEnabled()) { debug.Message(classMethod + _STR + nwMonName); } if (nwMonName == null || nwMonName.Length == _NUM) { if (debug.WarningEnabled()) { debug.Warning(classMethod + _STR); } return _BOOL; } HashSet<string> ntwStats = NetworkMonitor.GetInstanceNames(); string ss = nwMonName.ToLower(); return ntwStats.Contains(ss) ? _BOOL : _BOOL; }
protected bool ErrorRecovery(bool debug) { if (debug) DebugMessage(_STR); if (!FindRecoveryConfig(debug)) { if (debug) DebugMessage(_STR); return _BOOL; } ReadLookahead(); while (true) { if (debug) DebugMessage(_STR); if (TryParseAhead(debug)) { break; } if (lookahead[_NUM].sym == EOF_sym()) { if (debug) DebugMessage(_STR); return _BOOL; } if (debug) DebugMessage(_STR + lookahead[_NUM].sym); RestartLookahead(); } if (debug) DebugMessage(_STR); ParseLookahead(debug); return _BOOL; }
public void AndWith(List<QueryPredicate> predicates) { children.AddRange(predicates); }
public void AddRoll(MMRandom rng) { int result = rng.RandomInt(this.faces) + this.min; all.Add(result); this.total += result; if (keep != -_NUM && all.Count >= keep) { this.total = _NUM; all.Sort((x, y) => y.CompareTo(x)); // Sort in reverse order for (int i = _NUM; i < keep; i++) { this.total += all[i]; } } }
public bool CheckCanonicalUserOptions() { bool result; OptionHandler handler; string[] userOptions; string[] userOptionsCheck; Print(_STR); try { handler = GetDefaultHandler(); handler.SetOptions(GetUserOptions()); if (GetDebug()) { Print(_STR); } userOptions = handler.GetOptions(); if (GetDebug()) { Console.WriteLine(PrintOptions(userOptions)); } if (GetDebug()) { Console.WriteLine(_STR); } handler.SetOptions((string[])userOptions.Clone()); if (GetDebug()) { Console.WriteLine(_STR); } userOptionsCheck = handler.GetOptions(); CompareOptions(userOptions, userOptionsCheck); Console.WriteLine(_STR); result = _BOOL; } catch (Exception e) { Console.WriteLine(_STR); result = _BOOL; if (GetDebug()) { Console.WriteLine(e); } } return result; }
public static void CloseQuietly(IDisposable disposable) { if (disposable != null) { try { disposable.Dispose(); } catch (RuntimeException rethrown) { throw rethrown; } catch (Exception ignored) { } } }
public static void PushEncryptedMessage(TextSecureEnvelope envelope) { while (_BOOL) { try { queue.Put(envelope); return; } catch (InterruptedException e) { // Handle exception if necessary } } }
public static int RandomRangeInt(int min, int max) { return new Random().Next(min, max + 1); }
public void TestSimplePrematureClose() { Striterator iter = new Striterator(m_data.GetEnumerator()); int i = _NUM; while (iter.HasNext()) { iter.Next(); if (++i == _NUM) { iter.Close(); Assert.IsFalse(iter.HasNext()); } } Assert.IsFalse(iter.IsOpen()); Assert.AreEqual(i, _NUM); }
public void PushDrawList(PspGeList list) { lock (drawListQueue) { drawListQueue.Add(list); } }
private void PopulateTaskList(Volume source, Dictionary<BlockMirror, Volume> groupMirrorSourceMap, TaskList taskList, string taskId, ResourceOperationTypeEnum operationType) { HashSet<URI> groupSet = new HashSet<URI>(); AddTask(taskList, source, taskId, operationType); foreach (var entry in groupMirrorSourceMap) { BlockMirror mirror = entry.Key; Volume mirrorSource = entry.Value; if (source.IsInCG() && taskList.GetTaskList() != null) { groupSet.Add(mirrorSource.GetConsistencyGroup()); } } List<BlockConsistencyGroup> groups = _dbClient.QueryObject<BlockConsistencyGroup>(groupSet); foreach (BlockConsistencyGroup group in groups) { AddTask(taskList, group, taskId, operationType); } }
public static Tuple Max(IEnumerable<Tuple> tuples, string field, IComparer<object> cmp) { Tuple t = null; object min = null; using (var enumerator = tuples.GetEnumerator()) { if (enumerator.MoveNext()) { t = enumerator.Current; min = t.Get(field); } while (enumerator.MoveNext()) { var tmp = enumerator.Current; var obj = tmp.Get(field); if (cmp.Compare(obj, min) > 0) { t = tmp; min = obj; } } } return t; }
public string ClusterDefinitionsTipText() { return _STR; }
public void TestConstructorSignBytesPositive1() { byte[] aBytes = { _NUM, _NUM, _NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM, (byte)-_NUM }; int aSign = _NUM; byte[] rBytes = { _NUM, _NUM, _NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM, (byte)-_NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); byte[] resBytes = aNumber.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.True(resBytes[i] == rBytes[i]); } Assert.Equal(_STR, _NUM, aNumber.Sign); }
public void Fling(int startX, int startY, int velocityX, int velocityY, int minX, int maxX, int minY, int maxY, int overX, int overY) { if (mFlywheel && !IsFinished()) { float oldVelocityX = mScrollerX.CurrVelocity; float oldVelocityY = mScrollerY.CurrVelocity; if (Math.Sign(velocityX) == Math.Sign(oldVelocityX) && Math.Sign(velocityY) == Math.Sign(oldVelocityY)) { velocityX += oldVelocityX; velocityY += oldVelocityY; } } mMode = FLING_MODE; mScrollerX.Fling(startX, velocityX, minX, maxX, overX); mScrollerY.Fling(startY, velocityY, minY, maxY, overY); }
public Dictionary<string, object> ConvertDataToObjects(Dictionary<string, string> data) { var results = new Dictionary<string, object>(); if (data != null) { foreach (var key in data.Keys) { results[key] = data[key]; } } return results; }
private static char[] ZzUnpackCMap(string packed) { char[] map = new char[_NUM]; int i = _NUM; int j = _NUM; while (i < _NUM) { int count = packed[i++]; char value = packed[i++]; do map[j++] = value; while (--count > 0); } return map; }
public void AddListener(NavigatorListener listener) { listeners.Add(listener); }
public void CloseStream() { CarbonUtil.CloseStreams(stream); executorService.Shutdown(); }
public double Patience(int k, F f, int N) { double pf = P(f); BinomialDistribution dist = new BinomialDistribution(null, N, pf); double p0 = Math.Pow(_NUM - pf, N); return _NUM - (dist.CumulativeProbability(k - _NUM) - p0) / (_NUM - p0); }
using System.Collections.Generic; public static List<string> SeriesNameListFromDataArray(object[][] data) { int seriesCount = data.Length; List<string> seriesNameList = new List<string>(seriesCount); for (int i = _NUM; i < seriesCount; i++) { seriesNameList.Add(_STR + (i + _NUM)); } return seriesNameList; }
public override int Read(char[] buffer, int offset, int length) { EnsureOpen(); if (offset < _NUM || offset > buffer.Length || length < _NUM || (offset + length) > buffer.Length || (offset + length) < _NUM) { throw new IndexOutOfRangeException(); } else if (length == _NUM) { return _NUM; } if (pos >= count) { return -_NUM; } if (pos + length > count) { length = count - pos; } if (length <= _NUM) { return _NUM; } Array.Copy(buf, pos, buffer, offset, length); pos += length; return length; }
public static void CF6(double[] x, double[] f, double[] c, int nx) { double sum1 = _NUM; double sum2 = _NUM; double yj; for (int j = _NUM; j <= nx; j++) { if (j % _NUM == _NUM) { yj = x[j - _NUM] - _NUM * x[_NUM] * Math.Cos(_NUM * Math.PI * x[_NUM] + j * Math.PI / nx); sum1 += yj * yj; } else { yj = x[j - _NUM] - _NUM * x[_NUM] * Math.Sin(_NUM * Math.PI * x[_NUM] + j * Math.PI / nx); sum2 += yj * yj; } } f[_NUM] = x[_NUM] + sum1; f[_NUM] = (_NUM - x[_NUM]) * (_NUM - x[_NUM]) + sum2; c[_NUM] = x[_NUM] - _NUM * x[_NUM] * Math.Sin(_NUM *
public static void LogMessage(string tag, string msg, params object[] args) { if (sLevel > LEVEL_FATAL) { return; } if (args.Length > _NUM) { msg = string.Format(msg, args); } Log.wtf(tag, msg); }
private static void ExpandNumberAt(string numberString, int startIndex, WordRelation wordRelation) { ExpandNumber(numberString.Substring(startIndex, numberString.Length - startIndex), wordRelation); }
public static bool NullEquals(string s1, string s2) { return (s1 == null ? s2 == null : s1.Equals(s2)); }
public override void Run() { MultipleObjectsBundle data = generator.LoadData(); if (LOG.IsVerbose()) { LOG.Verbose(_STR); } try { if (outputFile.Exists() && LOG.IsVerbose()) { LOG.Verbose(_STR + outputFile + _STR + _STR); } using (StreamWriter outStream = new StreamWriter(outputFile, _BOOL)) { WriteClusters(outStream, data); } } catch (IOException e) { throw new AbortException(_STR, e); } if (LOG.IsVerbose()) { LOG.Verbose(_STR); } }
private bool UsedAllRule17Directors(HashSet<string> allocatedDirectors, PortAllocationContext context) { HashSet<string> rule17Directors = GetRule17Directors(context); foreach (string director in allocatedDirectors) { rule17Directors.Remove(director); } return rule17Directors.Count == 0; }
public void Stop() { lock (privateInstanceLock) { if (connectionAcceptThread == null) { return; } } isStopped.Set(_BOOL); try { connectionAcceptThread.Interrupt(); connectionAcceptThread.Join(); } catch (ThreadInterruptedException e) { // Handle exception if necessary } try { serverSocket.Close(); } catch (IOException e) { // Handle exception if necessary } }
private static string ExpandSystemIdStrictOn(string systemId, string baseSystemId) { URI systemURI = new URI(systemId, true); if (systemURI.IsAbsoluteURI()) { return systemId; } URI baseURI = null; if (string.IsNullOrEmpty(baseSystemId) || baseSystemId.Length == 0) { baseURI = GetUserDir(); } else { baseURI = new URI(baseSystemId, true); if (!baseURI.IsAbsoluteURI()) { baseURI.Absolutize(GetUserDir()); } } systemURI.Absolutize(baseURI); return systemURI.ToString(); }
public static void Free(DMessage msg) { int index = Size2Index(msg.GetSize()); msg.Clear(); if (index >= _NUM) { if (m_cache[index] == null) { m_cache[index] = msg; } } }
public bool EqualsIgnoreCase(StrBuilder other) { if (this == other) { return true; } if (this.size != other.size) { return false; } char[] thisBuf = this.buffer; char[] otherBuf = other.buffer; for (int i = size - 1; i >= 0; i--) { char c1 = thisBuf[i]; char c2 = otherBuf[i]; if (c1 != c2 && char.ToUpper(c1) != char.ToUpper(c2)) { return false; } } return true; }
protected static long? ConvertUuidToLong(Guid? uuid) { if (uuid == null) { return null; } long convertedUuid; if (uuid.Value.CompareTo(Guid.Empty) == 0) // Assuming _NUM refers to the comparison with an empty GUID { // For this example, we're assuming "version" means a check for a specific GUID convertedUuid = uuid.Value.GetHashCode(); // Using GetHashCode as a placeholder } else { convertedUuid = BitConverter.ToInt64(uuid.Value.ToByteArray(), 0); } return convertedUuid; }
public void AddVMArguments(string vmArgumentName, string vmArgumentValue) { VmArgumentData vmArg = new VmArgumentData(vmArgumentName, vmArgumentValue); vmSet.Add(vmArg); }
private void ApplyTo(ClassVisitor v, Field f) { if (Log.IsLoggingOn()) { Log.LogLine(string.Format(_STR, f.ToGenericString())); } v.Visit(f); }
public void TestCompareToEqualNeg() { byte[] aBytes = { _NUM, _NUM, _NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM }; byte[] bBytes = { _NUM, _NUM, _NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM }; int aSign = -_NUM; int bSign = -_NUM; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger bNumber = new BigInteger(bSign, bBytes); Assert.Equal(0, aNumber.CompareTo(bNumber)); }
public void TestScreenshot() { Log.Debug(LOG_TAG, _STR); ScreenshotStubActivity activity = GetActivity(); Debug.Assert(activity != null); DirectoryInfo screenshotDir = GetScreenshotDir(); NewScreenshotObserver observer = new NewScreenshotObserver(screenshotDir.FullName); observer.StartWatching(); TakeScreenshot(); if (observer.GetCreatedPath() == null) { lock (observer) { Monitor.Wait(observer, TimeSpan.FromSeconds(SCREEN_WAIT_TIME_SEC * _NUM)); } } Debug.Assert(observer.GetCreatedPath() != null, string.Format(_STR, SCREEN_WAIT_TIME_SEC)); FileInfo screenshotFile = new FileInfo(Path.Combine(screenshotDir.FullName, observer.GetCreatedPath())); try { Debug.Assert(screenshotFile.Exists, string.Format(_STR, screenshotFile.Name)); Debug.Assert(IsValidImage(screenshotFile), string.Format(_STR, screenshotFile.Name)); } finally { screenshotFile.Delete(); } }
public TaskResourceRep UnlinkTargetVolumesFromSnapshotSession(URI snapSessionURI, SnapshotSessionUnlinkTargetsParam param) { return UnlinkTargetVolumesFromSnapshotSession(snapSessionURI, param, OperationTypeEnum.UNLINK_SNAPSHOT_SESSION_TARGET); }
private List<DirectedEdge> Reverse(List<DirectedEdge> seq) { LinkedList<DirectedEdge> newSeq = new LinkedList<DirectedEdge>(); foreach (DirectedEdge de in seq) { newSeq.AddFirst(de.GetSym()); } return newSeq.ToList(); }
protected LocPathIterator ChangePartToRef(QName uniquePseudoVarName, WalkingIterator wi, int numSteps, bool isGlobal) { Variable var = new Variable(); var.SetQName(uniquePseudoVarName); var.SetIsGlobal(isGlobal); if (isGlobal) { ElemTemplateElement elem = GetElemFromExpression(wi); StylesheetRoot root = elem.GetStylesheetRoot(); List<Variable> vars = root.GetVariablesAndParamsComposed(); var.SetIndex(vars.Count - _NUM); } AxesWalker walker = wi.GetFirstWalker(); for (int i = _NUM; i < numSteps; i++) { Assertion(walker != null, _STR); walker = walker.GetNextWalker(); } if (walker != null) { FilterExprWalker few = new FilterExprWalker(wi); few.SetInnerExpression(var); few.ExprSetParent(wi); few.SetNextWalker(walker); walker.SetPrevWalker(few); wi.SetFirstWalker(few); return wi; } else { FilterExprIteratorSimple feis = new FilterExprIteratorSimple(var); f
[Obsolete] public override string ReadLine() { StringBuilder b = new StringBuilder(_NUM); int chr; while ((chr = Read()) >= _NUM) { if (chr != _STR) { b.Append((char)chr); } else { return b.ToString(); } } return b.ToString(); }
private void AddToScene(Node items) { collection.Add(items); }
public string DocumentationHomePageUrl() { return properties[_STR]; }
public static bool HasTaxonomyInfo(SequencesReader reader) { var taxonFile = new FileInfo(Path.Combine(reader.Path(), TAXONOMY_FILE)); var mappingFile = new FileInfo(Path.Combine(reader.Path(), TAXONOMY_TO_SEQUENCE_FILE)); if (taxonFile.Exists && mappingFile.Exists) { return true; } else if (taxonFile.Exists || mappingFile.Exists) { throw new NoTalkbackSlimException(_STR); } else { return false; } }
public void RemoveSelectionListener(SelectionListener listener) { CheckWidget(); if (listener == null) { throw new ArgumentNullException(nameof(listener)); } listOfSelectionListeners.Remove(listener); }
public void Replace(ClassNode type, int n) { Remove(n); Push(type); }
public void HandleButton1Request(RequestInvocationEvent event) { submitCycle = _BOOL; EntitiesModel model = (EntitiesModel)GetModel(); AMPropertySheet prop = (AMPropertySheet)GetChild(PROPERTY_ATTRIBUTE); string universalId = (string)GetPageSessionAttribute(UNIVERSAL_ID); try { var oldValues = model.GetAttributeValues(universalId, _BOOL); var values = prop.GetAttributeValues(oldValues, _BOOL, model); string curRealm = (string)GetPageSessionAttribute(AMAdminConstants.CURRENT_REALM); model.ModifyEntity(curRealm, universalId, values); SetInlineAlertMessage(CCAlert.TYPE_INFO, _STR, _STR); } catch (AMConsoleException e) { SetInlineAlertMessage(CCAlert.TYPE_ERROR, _STR, e.Message); } ForwardTo(); }
private static bool IsInsidePolygon(GeoPoint point, List<GeoPoint> polyPoints) { double latitude = point.GetLatitude(); double longitude = point.GetLongitude(); double sinLatitude = Math.Sin(latitude); double cosLatitude = Math.Cos(latitude); double sinLongitude = Math.Sin(longitude); double cosLongitude = Math.Cos(longitude); double arcDistance = _NUM; double? prevAngle = null; foreach (var polyPoint in polyPoints) { double? angle = ComputeAngle(polyPoint, sinLatitude, cosLatitude, sinLongitude, cosLongitude); if (angle == null) return false; if (prevAngle != null) { double angleDelta = angle.Value - prevAngle.Value; if (angleDelta < -Math.PI) angleDelta += Math.PI * _NUM; if (angleDelta > Math.PI) angleDelta -= Math.PI * _NUM; if (Math.Abs(angleDelta - Math.PI) < Vector.MINIMUM_RESOLUTION) return false; arcDistance += angleDelta; } prevAngle = angle; } if (prevAngle != null) { double? lastAngle = ComputeAngle(polyPoint
private Node DeleteMax(Node x) { if (x.Right == null) return x.Left; x.Right = DeleteMax(x.Right); x.Size = _NUM + Size(x.Left) + Size(x.Right); x.Height = _NUM + Math.Max(Height(x.Left), Height(x.Right)); return Balance(x); }
public void Clear() { var lock = this.lock; lock.Enter(); try { for (Node<E> f = first; f != null;) { f.item = null; Node<E> n = f.next; f.prev = null; f.next = null; f = n; } first = last = null; count = _NUM; notFull.SignalAll(); } finally { lock.Exit(); } }
protected virtual void OnProgress(int itemCount, int size) { }
private TreeNode(long nodeValue, SnmpMibAgent agent, TreeNode sup) { this.nodeValue = nodeValue; this.parent = sup; agents.Add(agent); }
public Week(DateTime time) : this(time, TimeZoneInfo.Local, CultureInfo.CurrentCulture) { }
public CodeAttribute CreateCode() { CodeAttribute code = new CodeAttribute(); for (int i = _NUM; i < _attributes.Count; i++) { Attribute attr = _attributes[i]; if (attr is CodeAttribute) return (CodeAttribute)attr; } return null; }
public BinaryOut(string filename) { try { FileStream fs = new FileStream(filename, FileMode.Create); outStream = new BufferedStream(fs); } catch (IOException e) { Console.WriteLine(e.StackTrace); } }
protected ObjectStreamClass ReadClassDescriptor() { ObjectStreamClass newClassDesc = new ObjectStreamClass(); string name = input.ReadString(); if (name.Length == _NUM) { throw new IOException(_STR); } newClassDesc.SetName(name); newClassDesc.SetSerialVersionUID(input.ReadInt64()); newClassDesc.SetFlags(input.ReadByte()); if (descriptorHandle == -_NUM) { descriptorHandle = NextHandle(); } RegisterObjectRead(newClassDesc, descriptorHandle, _BOOL); ReadFieldDescriptors(newClassDesc); return newClassDesc; }
public static bool CreateNewFile(FileInfo targetFile) { if (targetFile.Exists) targetFile.Delete(); try { targetFile.Create().Close(); return true; } catch (IOException) { return false; } }
public void TestZeroOne() { byte[] aBytes = { /* _NUM */ }; byte[] bBytes = { /* _NUM */ }; int aSign = /* _NUM */; int bSign = /* _NUM */; byte[] rBytes = { /* _NUM */ }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger bNumber = new BigInteger(bSign, bBytes); BigInteger result = aNumber | bNumber; byte[] resBytes = result.ToByteArray(); for (int i = /* _NUM */; i < resBytes.Length; i++) { Assert.True(resBytes[i] == rBytes[i]); } Assert.Equal(/* _STR */, /* _NUM */, result.Sign); }
protected int ExecutePrepareStatement(List<Column> columns, SqlCommand statement) { int bindNo = _NUM; foreach (Column c in columns) { SetColumnValue(statement, bindNo, c); bindNo++; } return statement.ExecuteNonQuery(); }
public Config(SamlAuthorityConfiguration samlAuthorityConfig, TokenRestrictions tokenRestrictions, ICollection<List<Certificate>> validCerts, long clockTolerance, ICollection<IDPConfig> inExternalIdps) { if (samlAuthorityConfig == null) throw new ArgumentNullException(nameof(samlAuthorityConfig)); if (tokenRestrictions == null) throw new ArgumentNullException(nameof(tokenRestrictions)); if (validCerts == null || validCerts.Count == 0) throw new ArgumentException("validCerts must not be empty."); List<Certificate> authorityCert = samlAuthorityConfig.GetSigningCertificateChain(); bool authorityCertInValidCerts = false; foreach (var currentChain in validCerts) { if (currentChain == null || currentChain.Count == 0) throw new ArgumentException("currentChain must not be empty."); if (currentChain.Any(cert => cert == null)) throw new ArgumentException("currentChain must not contain null elements."); if (!authorityCertInValidCerts && currentChain.SequenceEqual(authorityCert)) { authorityCertInValidCerts = true; } } if (!authorityCertInValidCerts) throw
public static void CheckNotEmpty(string str) { if (string.IsNullOrEmpty(str)) { throw new ArgumentNullException(); } }
protected void AddCommonComponent(XMLComponent component) { if (fCommonComponents.Contains(component)) { return; } fCommonComponents.Add(component); AddRecognizedParamsAndSetDefaults(component); }
public void CancelUnnamedTasks() { if (unnamedTaskExecutor != null) { unnamedTaskExecutor.ShutdownNow(); } }
public static double[] MinMax(List<double> values) { const int NUM = 2; // Assuming _NUM is intended to be a constant value if (values.Count == NUM) { return new double[NUM]; } double min = values[NUM]; double max = min; int length = values.Count; for (int i = NUM; i < length; i++) { double value = values[i]; min = Math.Min(min, value); max = Math.Max(max, value); } return new double[] { min, max }; }
public Criteria CreateCriteria() { Criteria criteria = CreateCriteriaInternal(); if (oredCriteria.Count == _NUM) { oredCriteria.Add(criteria); } return criteria; }
private char ReadEscapeCharacter() { if (pos == limit && !FillBuffer(_NUM)) { throw SyntaxError(_STR); } char escaped = buffer[pos++]; switch (escaped) { case _STR: if (pos + _NUM > limit && !FillBuffer(_NUM)) { throw SyntaxError(_STR); } char result = _NUM; for (int i = pos, end = i + _NUM; i < end; i++) { char c = buffer[i]; result <<= _NUM; if (c >= _STR && c <= _STR) { result += (c - _STR); } else if (c >= _STR && c <= _STR) { result += (c - _STR + _NUM); } else if (c >= _STR && c <= _STR) { result += (c - _STR + _NUM); } else { throw new NumberFormatException(_STR + new string(buffer, pos, _NUM)); } } pos += _NUM; return result; case _STR: return _
private void UpdateParamsForAuth(string[] authNames, List<KeyValuePair<string, string>> queryParams, Dictionary<string, string> headerParams) { foreach (string authName in authNames) { if (!authentications.TryGetValue(authName, out Authentication auth)) throw new Exception($"Authentication not found: {authName}"); auth.ApplyToParams(queryParams, headerParams); } }
private void FixSpannedWithSpaces(SpannableStringBuilder builder, int widthMeasureSpec, int heightMeasureSpec) { long startFix = DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond; // Get current time in milliseconds FixingResult result = AddSpacesAroundSpansUntilFixed(builder, widthMeasureSpec, heightMeasureSpec); if (result.Fixed) { RemoveUnneededSpaces(widthMeasureSpec, heightMeasureSpec, builder, result); } else { FallbackToString(widthMeasureSpec, heightMeasureSpec); } long fixDuration = DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond - startFix; // Calculate duration Logger.D(TAG, _STR + fixDuration); // Log the duration }
public EventsIntegrationTest() { SetResponseLogLengthLimit(_NUM); dateFormat = new SimpleDateFormat(_STR); Calendar cal = Calendar.GetInstance(); cal.Add(Calendar.Date, -_NUM); yesterday = dateFormat.Format(cal.Time) + _STR; cal = Calendar.GetInstance(); cal.Add(Calendar.Date, _NUM); today = dateFormat.Format(cal.Time) + _STR; cal = Calendar.GetInstance(); cal.Add(Calendar.Date, _NUM); tomorrow = dateFormat.Format(cal.Time) + _STR; cal = Calendar.GetInstance(); cal.Add(Calendar.Date, _NUM); tomorrowPlus3 = dateFormat.Format(cal.Time) + _STR; cal = Calendar.GetInstance(); cal.Add(Calendar.Date, -_NUM); yesterdayMinus3 = dateFormat.Format(cal.Time) + _STR; cal = Calendar.GetInstance(); cal.Add(Calendar.Date, _NUM); tomorrowPlus5 = dateFormat.Format(cal.Time) + _STR; cal = Calendar.GetInstance(); cal.Add(Calendar.Date, -_NUM); yesterdayMinus5 = dateFormat.Format(cal.Time) + _STR; experiment = ExperimentFactory.CreateExperiment();
private void RemoveBookmarkTrackingIcons() { if (trackingIcons != null) { for (var i = trackingIcons.GetEnumerator(); i.MoveNext(); ) { GutterIconImpl ti = (GutterIconImpl)i.Current; if (ti.GetIcon() == bookmarkIcon) { i.Remove(); } } } }
public SimpleMetricGroup(GroupName name, IEnumerable<Metric> metrics) { this(name, metrics.ToList()); }
public bool IsInside(Point point) { return bounds.Contains(point); }
private void ResolveProtocols(ClassLoader loader) { var serviceLoader = ServiceLoader.Load<ProtocolManagerFactory>(loader); LoadProtocolManagerFactories(serviceLoader); }
using System; using System.Collections.Generic; using System.Net; using System.Net.NetworkInformation; public static List<IPAddress> HostAddresses() { List<IPAddress> addrList = new List<IPAddress>(); NetworkInterface[] networkInterfaces = null; try { networkInterfaces = NetworkInterface.GetAllNetworkInterfaces(); } catch (Exception ex) { // Log the error (assuming a logging mechanism is available) Console.WriteLine("Error retrieving network interfaces: " + ex); } if (networkInterfaces != null) { foreach (var networkInterface in networkInterfaces) { try { if (networkInterface.OperationalStatus == OperationalStatus.Up) { IPAddress[] addresses = Dns.GetHostAddresses(networkInterface.Name); foreach (var address in addresses) { if (!IPAddress.IsLoopback(address) && address.IsIPv6LinkLocal == false) { addrList.Add(address); } } } } catch (Exception ex) { // Log the error (assuming a logging mechanism is available) Console.WriteLine("Error with network interface " + networkInterface.ToString() + ": " + ex);
public static int CalculateInSampleSize(BitmapFactory.Options options, int rqsW, int rqsH) { int height = options.OutHeight; int width = options.OutWidth; int inSampleSize = _NUM; if (rqsW == _NUM || rqsH == _NUM) return _NUM; if (height > rqsH || width > rqsW) { int heightRatio = (int)Math.Round((float)height / (float)rqsH); int widthRatio = (int)Math.Round((float)width / (float)rqsW); inSampleSize = heightRatio < widthRatio ? heightRatio : widthRatio; } return inSampleSize; }
public bool HasStatus(StatusID status) { return statuses.Contains(status); }
public override string ToString() { return _STR + _STR + instanceList + _STR + outcomeList + _STR + weightList + _STR + sequenceIds + _STR + sequencePositions + _STR + addingAnotherInstancesAllowed + _STR + totalNonNullFeaturesCount + _STR; }
static readonly object syncRoot = new object(); static void ComputePRF_SSLv3(byte[] output, byte[] secret, byte[] seed) { lock (syncRoot) { if (sha == null) { Init(); } int pos = _NUM; int iteration = _NUM; byte[] digest; while (pos < output.Length) { byte[] pref = new byte[iteration]; for (int i = 0; i < pref.Length; i++) { pref[i] = (byte)(_NUM + iteration++); } sha.Update(pref); sha.Update(secret); sha.Update(seed); md5.Update(secret); md5.Update(sha.Digest()); digest = md5.Digest(); if (pos + _NUM > output.Length) { Array.Copy(digest, _NUM, output, pos, output.Length - pos); pos = output.Length; } else { Array.Copy(digest, _NUM, output, pos, _NUM); pos += _NUM; } } } }
public void AddChannelMap(ChannelMap channelMap) { if (!mChannelMaps.Contains(channelMap)) { mChannelMaps.Add(channelMap); int index = mChannelMaps.IndexOf(channelMap); FireIntervalAdded(this, index, index); Broadcast(new ChannelMapEvent(channelMap, Event.ADD)); } }
public override bool Add(E o) { if (o == null) { throw new ArgumentNullException(); } if (Offer(o)) { return true; } throw new InvalidOperationException(); }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public object PutResource(object key, object value) { return objectCache[key] = value; }
public UidRange[] ParseUidRange() { CharacterValidator validator = new MessageSetCharValidator(); string nextWord = ConsumeWord(validator, _BOOL); int commaPos = nextWord.IndexOf(_STR); if (commaPos == -1) { return new UidRange[] { ParseUidRange(nextWord) }; } List<UidRange> rangeList = new List<UidRange>(); int pos = 0; while (commaPos != -1) { string range = nextWord.Substring(pos, commaPos - pos); UidRange set = ParseUidRange(range); rangeList.Add(set); pos = commaPos + 1; commaPos = nextWord.IndexOf(_STR, pos); } string finalRange = nextWord.Substring(pos); rangeList.Add(ParseUidRange(finalRange)); List<UidRange> merged = UidRange.MergeRanges(rangeList); return merged.ToArray(); }
private string ReplaceSuffix(string value, string toReplace, string changeTo) { if (value == null || toReplace == null || changeTo == null) { return value; } string vvalue = RemoveSuffix(value, toReplace); if (value.Equals(vvalue)) { return value; } else { return vvalue + changeTo; } }
private void ExecuteClaimedTask(ClaimedTask claimedTask) { if (!claimedTask.SetStartTime(DateTime.Now)) { _log.Info(_STR, claimedTask.GetTask()); return; } ScanRangeTask task = claimedTask.GetTask(); bool releaseTask = _BOOL; try { _scanWorkflow.RenewScanRangeTasks(new List<ScanRangeTask> { task }, QUEUE_RENEW_TTL); releaseTask = AsyncRangeScan(task); } finally { UnclaimTask(claimedTask, releaseTask); _backgroundService.Submit(_startScansIfAvailableRunnable); } }
private static bool CreateNaviDirectory() { var dir = new DirectoryInfo(ConfigHelper.GetConfigurationDirectory(Constants.COMPANY_NAME, Constants.PROJECT_NAME)); return dir.Exists || dir.Create() != null; }
public void UpdateButtonActionPerformed() { if (!ReadReceiveDelay()) { return; } if (!ReadPulseWidth()) { return; } if (!CheckConsistency()) { return; } if (curNode.GetNodeType() != nodeType) { curNode.SetNodeType(nodeType); } SetNodeParameters(); changedNode = _BOOL; editMode = _BOOL; curNode = null; addButton.Visible = _BOOL; editButton.Visible = _BOOL; deleteButton.Visible = _BOOL; doneButton.Visible = _BOOL; updateButton.Visible = _BOOL; cancelButton.Visible = _BOOL; nodeAddrField.Visible = _BOOL; nodeAddrStatic.Visible = _BOOL; statusText2.Text = stdStatus2; statusText3.Text = stdStatus3; statusText1.Text = rb.GetString(_STR) + _STR + nodeAddress.ToString(); errorInStatus1 = _BOOL; }
public static Class toClass(ClassFile cf, ClassLoader loader, ProtectionDomain domain) { try { byte[] b = toBytecode(cf); Method method; object[] args; if (domain == null) { method = defineClass1; args = new object[] { cf.getName(), b, _NUM, b.Length }; } else { method = defineClass2; args = new object[] { cf.getName(), b, _NUM, b.Length, domain }; } return toClass2(method, loader, args); } catch (RuntimeException e) { throw e; } catch (System.Reflection.TargetInvocationException e) { throw new CannotCompileException(e.InnerException); } catch (Exception e) { throw new CannotCompileException(e); } }
public IEnumerator<Target> TargetIterator() { return targetList.GetEnumerator(); }
private void FitSizeOfScrolledContent() { var p = scrollComposite.Size; main.Size = main.ComputeSize(p.Width, -1); // -1 for default height }
public int GetHashCode() { return name.GetHashCode(); }
private static Dictionary<string, SnmpOid> BuildPoolIndexMap(SnmpCachedData cached) { if (cached == null) return new Dictionary<string, SnmpOid>(); SnmpOid[] indexes = cached.Indexes; object[] datas = cached.Datas; int len = indexes.Length; Dictionary<string, SnmpOid> map = new Dictionary<string, SnmpOid>(len); for (int i = _NUM; i < len; i++) { SnmpOid index = indexes[i]; if (index == null) continue; MemoryPoolMXBean mpm = datas[i] as MemoryPoolMXBean; if (mpm == null) continue; string name = mpm.GetName(); if (name == null) continue; map[name] = index; } return map; }
public DCryptoStrength(JFrame parent) : base(parent, res.GetString(_STR), ModalityType.DOCUMENT_MODAL) { InitComponents(); }
private Component CreateSeparator() { var sep = new System.Windows.Forms.Splitter { Width = _NUM, Height = _NUM }; return sep; }
public void Add(T obj) { lock (mLock) { mList.Add(obj); } NotifyDataSetChanged(); }
public void Build(RealmResults<T> results) { int xIndex = _NUM; foreach (var obj in results) { mValues.Add(BuildEntryFromResultObject(obj, xIndex++)); } }
public byte[] GenerateSignature() { contentDigest.DoFinal(mDash, mDash.Length - hLen - sLen); if (sLen != _NUM) { random.NextBytes(salt); Array.Copy(salt, _NUM, mDash, mDash.Length - sLen, sLen); } byte[] h = new byte[hLen]; contentDigest.Update(mDash, _NUM, mDash.Length); contentDigest.DoFinal(h, _NUM); block[block.Length - sLen - _NUM - hLen - _NUM] = _NUM; Array.Copy(salt, _NUM, block, block.Length - sLen - hLen - _NUM, sLen); byte[] dbMask = MaskGeneratorFunction1(h, _NUM, h.Length, block.Length - hLen - _NUM); for (int i = _NUM; i != dbMask.Length; i++) { block[i] ^= dbMask[i]; } block[_NUM] &= (byte)(0xFF >> ((block.Length * 8) - emBits)); Array.Copy(h, _NUM, block, block.Length - hLen - _NUM
public static double[][] ComputeWeightMatrix(int quanth, int quants, int quantb) { int dim = quanth * quants * quantb; Debug.Assert(dim > _NUM); double[][] m = new double[dim][]; for (int i = 0; i < dim; i++) { m[i] = new double[dim]; } for (int x = _NUM; x < dim; x++) { int hx = x / (quantb * quants); int sx = (x / quantb) % quants; int bx = x % quantb; for (int y = x; y < dim; y++) { int hy = y / (quantb * quants); int sy = (y / quantb) % quants; int by = y % quantb; double chx = Math.Cos((hx + _NUM) / quanth * MathUtil.TWOPI); double chy = Math.Cos((hy + _NUM) / quanth * MathUtil.TWOPI); double shx = MathUtil.CosToSin((hx + _NUM) / qua
public void TestNegPosFirstLonger() { byte[] aBytes = { (byte)-_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)-_NUM, (byte)-_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)-_NUM, (byte)_NUM, (byte)_NUM, (byte)-_NUM, (byte)_NUM, (byte)_NUM, (byte)-_NUM, (byte)-_NUM }; byte[] bBytes = { (byte)-_NUM, (byte)-_NUM, (byte)-_NUM, (byte)-_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM }; int aSign = -_NUM; int bSign = _NUM; byte[] rBytes = { (byte)_NUM, (byte)-_NUM, (byte)-_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM
public override void Write(byte[] b, int off, int len) { if ((off < _NUM) || (off > b.Length) || (len < _NUM) || ((off + len) > b.Length) || ((off + len) < _NUM)) { throw new IndexOutOfRangeException(); } else if (len == _NUM) { return; } lock (this) { int newcount = count + len; int remaining = len; int inBufferPos = count - filledBufferSum; while (remaining > _NUM) { int part = Math.Min(remaining, currentBuffer.Length - inBufferPos); Array.Copy(b, off + len - remaining, currentBuffer, inBufferPos, part); remaining -= part; if (remaining > _NUM) { NeedNewBuffer(newcount); inBufferPos = _NUM; } } count = newcount; } }
public static void OpenFileIntent(Context context, File openFile) { if (context != null && openFile.Exists()) { try { Intent intent = GetFileIntent(context, openFile); context.StartActivity(intent); } catch (Exception e) { GlobalUtils.LogThis(TAG, _STR, e); } } }
public static SqlDateTime ToSqlDate(string date) { DateTime? newDate = ToDate(date, _STR); if (newDate.HasValue) { return new SqlDateTime(newDate.Value); } else { return null; } }
private void RebuildJournal() { if (journalWriter != null) { journalWriter.Close(); } using (var writer = new StreamWriter(new FileStream(journalFileTmp, FileMode.Create), Util.US_ASCII)) { writer.Write(MAGIC); writer.Write(_STR); writer.Write(VERSION_1); writer.Write(_STR); writer.Write(appVersion.ToString()); writer.Write(_STR); writer.Write(valueCount.ToString()); writer.Write(_STR); writer.Write(_STR); foreach (var entry in lruEntries.Values) { if (entry.currentEditor != null) { writer.Write(DIRTY + _STR + entry.key + _STR); } else { writer.Write(CLEAN + _STR + entry.key + entry.GetLengths() + _STR); } } } if (journalFile.Exists) { RenameTo(journalFile, journalFileBackup, _BOOL); } RenameTo(journalFileTmp, journalFile, _BOOL); journalFileBackup.Delete(); journalWriter = new StreamWriter(new FileStream(journalFile, FileMode.Create), Util.US_
public static int Round(float value) { const int _NUM = 23; // Number of fractional bits for float const int MAX_FLOAT_EXPONENT = 127; // Maximum exponent for normalized float int bits = BitConverter.ToInt32(BitConverter.GetBytes(value), 0); int biasedExp = (bits >> _NUM) & 0xFF; int shift = _NUM - _NUM + MAX_FLOAT_EXPONENT - biasedExp; if ((shift & -_NUM) == _NUM) { int extendedMantissa = _NUM | (bits & ((1 << _NUM) - 1)); if (bits < 0) { extendedMantissa = -extendedMantissa; } return (extendedMantissa >> shift) + (1 << _NUM); } else { return (int)value; } }
public static PlainText Plain(short text) { return Plain(int.ToString(text)); }
public ParameterAnnotationsAttribute Copy(ConstPool newCp, Dictionary<string, string> classnames) { Copier copier = new Copier(info, constPool, newCp, classnames); try { copier.Parameters(); return new ParameterAnnotationsAttribute(newCp, GetName(), copier.Close()); } catch (Exception e) { throw new RuntimeException(e.ToString()); } }
private string CreateComponentChanges() { var builder = new StringBuilder(); foreach (var serviceCatalogDiff in diffList) { builder.Append(CreateApiChanges(serviceCatalogDiff)); } return builder.ToString(); }
public static void It(string description, UnsafeBlock block) { It(description, Identity(), block); }
public static bool IsWritable(FileInfo file, bool makeDirs) { if (file == null) { Log.Error(typeof(FileUtils), "File is null."); return false; } string fileParentDir = file.DirectoryName; if (!string.IsNullOrEmpty(fileParentDir)) { DirectoryInfo fileDir = new DirectoryInfo(fileParentDir); if (!fileDir.Exists) { if (makeDirs) return MakeDirsForFile(file); else return false; } } bool isWritable = false; if (file.Exists) isWritable = file.IsWritable(); else { try { using (file.Create()) { } isWritable = true; } catch (IOException) { // Handle exception if needed } if (isWritable) isWritable = DeleteFile(file); } return isWritable; } private static bool DeleteFile(FileInfo file) { try { file.Delete(); return true; } catch (IOException) { return false; } }
public override string ToString() { return oid.ToString(); }
private static void CreateOrgAuthConfig(string realmName) { string classMethod = _STR; OrganizationConfigManager org = new OrganizationConfigManager(ssoToken, realmName); ServiceConfig orgConfig = org.GetServiceConfig(AUTH_SERVICE_NAME); if (orgConfig != null) { var aa = orgConfig.GetAttributes(); if (debug.MessageEnabled()) { debug.Message(classMethod + _STR + realmName); debug.Message(classMethod + _STR + aa); } string orgName = realmName; if (LDAPUtils.IsDN(realmName)) { orgName = LDAPUtils.RdnValueFromDn(realmName); } string authConfigName = orgName + _STR; string adminAuthConfigName = orgName + _STR; var authConfigAttrValue = (HashSet<string>)aa[ATTR_ORG_AUTH_MODULE]; if (debug.MessageEnabled()) { debug.Message(classMethod + _STR + authConfigAttrValue); } var newVal = new HashSet<string>(); if (authConfigAttrValue.Count != _NUM && !authConfigAttrValue.Contains(authConfigName)) { new
public void Read(ByteCodeParser input) { int length = input.ReadInt(); _maxStack = input.ReadShort(); _maxLocals = input.ReadShort(); int codeLength = input.ReadInt(); _code = new byte[codeLength]; input.Read(_code, _NUM, codeLength); int exnCount = input.ReadShort(); for (int i = _NUM; i < exnCount; i++) { ExceptionItem exn = new ExceptionItem(); exn.SetStart(input.ReadShort() & _NUM); exn.SetEnd(input.ReadShort() & _NUM); exn.SetHandler(input.ReadShort() & _NUM); exn.SetType(input.ReadShort() & _NUM); _exceptions.Add(exn); } int attrCount = input.ReadShort(); for (int i = _NUM; i < attrCount; i++) { Attribute attr = input.ParseAttribute(); _attributes.Add(attr); } }
public void TestSkip() { byte[] data = new byte[] { -_NUM, -_NUM, -_NUM, -_NUM, -_NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; TestInputStream tis = new TestInputStream(data); CipherInputStream cis = new CipherInputStream(tis, new NullCipher()); int expected = data.Length; byte[] result = new byte[expected]; int skipped = (int)cis.Skip(_NUM); int ind = skipped; int got = skipped + cis.Read(result, _NUM, _NUM); while (_BOOL) { for (int j = _NUM; j < got - ind; j++) { if (result[j] != data[ind + j]) { Fail(_STR + _STR + data[ind + j] + _STR + result[j]); } } if (got == expected) { break; } else if (got > expected) { Fail(_STR + _STR + _STR); } else { ind = got; got += cis.Read(result, _NUM
void AddString(int c) { if (strpos == str.Length) { char[] newstr = new char[str.Length + _NUM]; Array.Copy(str, _NUM, newstr, _NUM, str.Length); str = newstr; } str[strpos++] = (char)c; }
public override int GetHashCode() { return oid.GetHashCode(); }
public CholeskyDecomposition(Matrix arg) { double[][] A = arg.GetArray(); int n = arg.GetRowDimension(); L = new double[n][]; for (int i = 0; i < n; i++) { L[i] = new double[n]; } bool isspd = (arg.GetColumnDimension() == n); for (int j = 0; j < n; j++) { double[] Lrowj = L[j]; double d = 0; for (int k = 0; k < j; k++) { double[] Lrowk = L[k]; double s = 0; for (int i = 0; i < k; i++) { s += Lrowk[i] * Lrowj[i]; } Lrowj[k] = s = (A[j][k] - s) / L[k][k]; d += s * s; isspd = isspd && (A[k][j] == A[j][k]); } d = A[j][j] - d; isspd = isspd &&
protected void FindCandidateCrossings(S2Point a, S2Point b, List<int> candidateCrossings) { Preconditions.CheckState(indexComputed); List<S2CellId> cover = new List<S2CellId>(); GetCovering(a, b, _BOOL, cover); HashSet<int> uniqueSet = new HashSet<int>(); GetEdgesInParentCells(cover, uniqueSet); GetEdgesInChildrenCells(a, b, cover, uniqueSet); candidateCrossings.Clear(); candidateCrossings.AddRange(uniqueSet); }
public static _Fields FindByThriftId(int fieldId) { switch (fieldId) { case _NUM: return TRUE_AS_OF_SECS; case _NUM: return SOURCE; case _NUM: return SYSTEM; default: return null; } }
public RepositoryLocation(string repositoryName, string[] pathComponents) { if (string.IsNullOrEmpty(repositoryName)) { throw new MalformedRepositoryLocationException(_STR); } if (pathComponents == null) { throw new MalformedRepositoryLocationException(_STR); } foreach (var pathComp in pathComponents) { if (string.IsNullOrEmpty(pathComp)) { throw new MalformedRepositoryLocationException(_STR); } } this.repositoryName = repositoryName; this.path = pathComponents; }
public void AddProperty(string key, string value) { carbonProperties.SetProperty(key, value); }
protected JavaElementDelta CreateDeltaTree(IJavaElement element, JavaElementDelta delta) { JavaElementDelta childDelta = delta; List<IJavaElement> ancestors = GetAncestors(element); if (ancestors == null) { if (EqualsAndSameParent(delta.Element, Element)) { this.kind = delta.kind; this.changeFlags = delta.changeFlags; this.movedToHandle = delta.movedToHandle; this.movedFromHandle = delta.movedFromHandle; } } else { for (int i = _NUM, size = ancestors.Count; i < size; i++) { IJavaElement ancestor = ancestors[i]; JavaElementDelta ancestorDelta = new JavaElementDelta(ancestor); ancestorDelta.AddAffectedChild(childDelta); childDelta = ancestorDelta; } } return childDelta; }
public override string ToString() { return GetTitle(); }
public int Size() { if (hmap == null) { return _NUM; } return hmap.Count; }
public static string Replace(string inString, string oldPattern, string newPattern) { if (string.IsNullOrEmpty(inString) || string.IsNullOrEmpty(oldPattern) || newPattern == null) { return inString; } StringBuilder sb = new StringBuilder(); int pos = 0; int index = inString.IndexOf(oldPattern); int patLen = oldPattern.Length; while (index >= 0) { sb.Append(inString.Substring(pos, index - pos)); sb.Append(newPattern); pos = index + patLen; index = inString.IndexOf(oldPattern, pos); } sb.Append(inString.Substring(pos)); return sb.ToString(); }
public bool CoordinateInZone(Id<ActivityFacility> zoneID, Coord coordinate) { var point = MGC.XY2Point(coordinate.GetX(), coordinate.GetY()); return PointInZone(zoneID, point); }
public string AssociatorTipText() { return _STR; }
public XwavesLabelfileReader(TextReader reader) { this.reader = new BufferedReader(reader); ParseLabels(); reader.Close(); }
public static double ParseDoubleDefault(string s, double def) { if (s == null) { return def; } try { return double.Parse(s); } catch (FormatException) { return def; } }
public static void RegisterApp(int application, string appName) { if ((application & APP_ID_MASK) != application) { throw new InvalidAppIDValueException(application); } string oldApp = appIdMap.GetValueOrDefault(application); if (oldApp == null) { appIdMap[application] = appName; } else if (!oldApp.Equals(appName)) { throw new AppIDInUseException(application, oldApp, appName); } }
public bool PutProfile(Profile profile) { return PutProfile(profile, _BOOL); }
public void Print(char c) { writer.Print(c); }
public void InitBlockViews() { if (mWorkspaceView != null) { List<Block> rootBlocks = mWorkspace.GetRootBlocks(); ConnectionManager connManager = mWorkspace.GetConnectionManager(); for (int i = _NUM; i < rootBlocks.Count; i++) { BlockGroup bg = mViewFactory.BuildBlockGroupTree(rootBlocks[i], connManager, mTouchHandler); mWorkspaceView.AddView(bg); } } }
protected void ClearAllTrails(SSOTokenID tokenID) { bool removed; string key = tokenID.ToString(); lock (mapTokenIDs) { removed = mapTokenIDs.Remove(key); } }
public DNetscapeCaRevocationUrl(JDialog parent, byte[] value) : base(parent) { SetTitle(res.GetString(_STR)); InitComponents(); PrepopulateWithValue(value); }
private void WriteAttribute(string prefix, string namespaceUri, string attName, string attValue, System.Xml.XmlWriter xmlWriter) { if (xmlWriter.LookupPrefix(namespaceUri) == null) { xmlWriter.WriteStartAttribute(prefix, attName, namespaceUri); xmlWriter.WriteString(attValue); xmlWriter.WriteEndAttribute(); } }
public static int[] ParseNumberList(string listStr, int minVal, int maxVal, bool allowZero) { int[] values; if (listStr.IndexOf(",") < 0) { values = new int[1]; values[0] = ParseIntRange(listStr, minVal, maxVal, allowZero); } else { string[] valueStrs = listStr.Split(','); int len = valueStrs.Length; values = new int[len]; for (int i = 0; i < len; i++) { values[i] = ParseIntRange(valueStrs[i], minVal, maxVal, allowZero); } } return values; }
public DirectoryOrFileNotFoundException(string entity, string name) : base(string.Format(_errorMessage, entity, name)) { }
public void CloseStream() { CarbonUtil.CloseStreams(stream); executorService.Shutdown(); }
void Scramble() { var initialSize = GetSize(); int[] a = new int[initialSize.Height / _NUM]; double f = initialSize.Width / (double)a.Length; for (int i = a.Length - 1; i >= _NUM; i--) { a[i] = (int)(i * f); } for (int i = a.Length - 1; i >= _NUM; i--) { int j = (int)(i * new Random().NextDouble()); int t = a[i]; a[i] = a[j]; a[j] = t; } arr = a; }
private int ReadAnnotationValue(int v, char[] buf, string name, AnnotationVisitor av) { int i; if (av == null) { switch (b[v] & _NUM) { case _STR: return v + _NUM; case _STR: return ReadAnnotationValues(v + _NUM, buf, _BOOL, null); case _STR: return ReadAnnotationValues(v + _NUM, buf, _BOOL, null); default: return v + _NUM; } } switch (b[v++]) { case _STR: case _STR: case _STR: case _STR: av.Visit(name, ReadConst(ReadUnsignedShort(v), buf)); v += _NUM; break; case _STR: av.Visit(name, (byte)ReadInt(items[ReadUnsignedShort(v)])); v += _NUM; break; case _STR: av.Visit(name, ReadInt(items[ReadUnsignedShort(v)]) == _NUM ? false : true); v += _NUM; break; case _STR: av.Visit(name, (short)ReadInt(ite
public static SIPHeader ParseSIPHeader(string header) { int start = _NUM; int end = header.Length - _NUM; try { while (header[start] <= _NUM) start++; while (header[end] <= _NUM) end--; } catch (IndexOutOfRangeException) { throw new ParseException(_STR, _NUM); } StringBuilder buffer = new StringBuilder(end + _NUM); int i = start; int lineStart = start; bool endOfLine = _BOOL; while (i <= end) { char c = header[i]; if (c == _STR || c == _STR) { if (!endOfLine) { buffer.Append(header.Substring(lineStart, i - lineStart)); endOfLine = _BOOL; } } else { if (endOfLine) { endOfLine = _BOOL; if (c == _STR || c == _STR) { buffer.Append(_STR); lineStart = i + _NUM; } else { lineStart =
private static int ConvertSRGBToLinearRGB(int color) { float input, output; input = color / _NUM; if (input <= _NUM) { output = input / _NUM; } else { output = (float)Math.Pow((input + _NUM) / _NUM, _NUM); } return (int)Math.Round(output * _NUM); }
public void RecordBeginning() { string msg = _STR + mModuleName + _STR + mRunId; mUsageMessages.Add(msg); Diagnostic.DeveloperLog(msg); mClient.RecordBeginning(mModuleName, mRunId); }
static float RotateY(float pX, float pY, float cX, float cY, float angleInDegrees) { double angle = Math.PI * angleInDegrees / 180.0; return (float)(Math.Sin(angle) * (pX - cX) + Math.Cos(angle) * (pY - cY) + cY); }
public bool IsPronounceable(string word) { string lowerCaseWord = word.ToLower(); return prefixFSM.Accept(lowerCaseWord) && suffixFSM.Accept(lowerCaseWord); }
public void AddSplitEdges(List<Edge> edgeList) { AddEndpoints(); IEnumerator<EdgeIntersection> it = GetEnumerator(); EdgeIntersection eiPrev = it.MoveNext() ? it.Current : null; while (it.MoveNext()) { EdgeIntersection ei = it.Current; Edge newEdge = CreateSplitEdge(eiPrev, ei); edgeList.Add(newEdge); eiPrev = ei; } }
private IOUtils() { }
public MemBasedCache(int maxCacheSizeInBytes) { mMaxCacheSizeInBytes = maxCacheSizeInBytes; mDataEntries = new LinkedList<KeyValuePair<string, CacheHeader>>(); }
public void UpdateMaxTextWidths(float requiredWidth, float matchContentsWidth) { mMaxRequiredWidth = Math.Max(mMaxRequiredWidth, requiredWidth); mMaxMatchContentsWidth = Math.Max(mMaxMatchContentsWidth, matchContentsWidth); }
public void EnableOverview(bool b) { if (overviewItem != null) { overviewItem.Enabled = b; } }
public void MouseEntered(MouseEventArgs e) { if (Debug.Debugging(_STR)) { Debug.Output(GetID() + _STR); } base.MouseEnter(e); autoZoom = _BOOL; }
public PageOfCollections FetchPage(PageOfCollections page, SolrZkClient zkClient) { List<string> children = GetCollections(zkClient); page.Selected = children; if (page.Start == _NUM && page.Rows == -_NUM && page.Filter == null && children.Count > _NUM) { page.Rows = _NUM; page.Start = _NUM; } if (page.FilterType == FilterType.Name && page.Filter != null) { children = page.ApplyNameFilter(children); } if (page.FilterType != FilterType.Status) { page.SelectPage(children); } return page; }
public void Accept(AnnotationVisitor av) { if (av != null) { if (values != null) { for (int i = _NUM; i < values.Count; i += _NUM) { string name = (string)values[i]; object value = values[i + _NUM]; Accept(av, name, value); } } av.VisitEnd(); } }
public IdsQueryBuilder AddIds(params string[] ids) { values.AddRange(ids); return this; }
private void Stop(HttpRequest request, HttpResponse response) { StreamWriter outStream = new StreamWriter(response.Body); string label = request.Query["STR"]; Monitor mon = RemoveMon(label, null, DEFAULT_UNITS); if (mon == null) { outStream.WriteLine(ERROR + "STR"); } else { mon.Stop(); outStream.WriteLine(OK + "STR" + mon); } outStream.Flush(); }
public static string NormalizeUrl(string requestUrl) { if (string.IsNullOrEmpty(requestUrl) || requestUrl.Length == _NUM) { throw new OAuthException(_STR); } Uri uri; try { uri = new Uri(requestUrl); } catch (UriFormatException e) { throw new OAuthException(e); } string authority = uri.Authority; string scheme = uri.Scheme; if (string.IsNullOrEmpty(authority) || string.IsNullOrEmpty(scheme)) { throw new OAuthException(_STR); } authority = authority.ToLower(); scheme = scheme.ToLower(); if ((scheme.Equals(_STR) && uri.Port == _NUM) || (scheme.Equals(_STR) && uri.Port == _NUM)) { int index = authority.LastIndexOf(_STR); if (index >= _NUM) { authority = authority.Substring(_NUM, index); } } return scheme + _STR + authority + uri.AbsolutePath; }
public void Invoke(Stream inputStream, Stream outputStream, SerializerFactory serializerFactory) { bool isDebug = _BOOL; if (IsDebugInvoke()) { isDebug = _BOOL; using (var dbg = CreateDebugPrintWriter()) { var dIs = new HessianDebugInputStream(inputStream, dbg); dIs.StartTop2(); inputStream = dIs; var dOs = new HessianDebugOutputStream(outputStream, dbg); dOs.StartTop2(); outputStream = dOs; } } var header = _inputFactory.ReadHeader(inputStream); AbstractHessianInput inStream; AbstractHessianOutput outStream; switch (header) { case HeaderType.CALL_1_REPLY_1: inStream = _hessianFactory.CreateHessianInput(inputStream); outStream = _hessianFactory.CreateHessianOutput(outputStream); break; case HeaderType.CALL_1_REPLY_2: inStream = _hessianFactory.CreateHessianInput(inputStream); outStream = _hessianFactory.CreateHessian2Output(outputStream); break; case HeaderType.HESSI
private void CommitLocalTransaction() { if (_tx == null) { return; } if (_logger.IsLoggable(Level.Finest)) { _logger.Log(Level.Finest, _STR + _tx); } try { _tx.Commit(); } catch (Exception e) { if (_logger.IsLoggable(Level.Severe)) { _logger.Log(Level.Severe, _STR + _tx, e); } throw new CommitFailedException(e); } }
public static Entry AddObjectClass(Entry entry) { Attribute attribute = entry.GetAttribute(CoreTokenConstants.OBJECT_CLASS); if (attribute == null) { entry.AddAttribute(CoreTokenConstants.OBJECT_CLASS, CoreTokenConstants.FR_CORE_TOKEN); } return entry; }
public List<Boundary> PopulateArea(long wardId) { var hType = hierarchyTypeService.GetHierarchyTypeByName(hierarchyTypeName); List<Boundary> areaList = new List<Boundary>(); var childBoundaryType = boundaryTypeService.GetBoundaryTypeByNameAndHierarchyType(_STR, hType); var parentBoundary = boundaryService.GetBoundaryById(wardId); areaList = new List<Boundary>(crossHierarchyService.GetCrossHierarchyChildrens(parentBoundary, childBoundaryType)); LOGGER.Info(_STR + areaList.ToString()); return areaList; }
private static string ReadName(DataInputStream dis, byte[] data) { int c = dis.ReadUnsignedByte(); if ((c & _NUM) == _NUM) { c = ((c & _NUM) << _NUM) + dis.ReadUnsignedByte(); HashSet<int> jumps = new HashSet<int>(); jumps.Add(c); return ReadName(data, c, jumps); } if (c == _NUM) { return _STR; } byte[] b = new byte[c]; dis.ReadFully(b); string s = IDN.ToUnicode(System.Text.Encoding.UTF8.GetString(b)); string t = ReadName(dis, data); if (t.Length > _NUM) { s = s + _STR + t; } return s; }
public SimpleString Concat(char c) { byte[] bytes = new byte[data.Length + _NUM]; Array.Copy(data, _NUM, bytes, _NUM, data.Length); bytes[data.Length] = (byte)(c & _NUM); bytes[data.Length + _NUM] = (byte)((c >> _NUM) & _NUM); return new SimpleString(bytes); }
public static double ProbToLogOdds(double prob) { if (prob > _NUM || prob < _NUM) { throw new ArgumentException(_STR + _STR + prob); } double p = SMALL + (_NUM - _NUM * SMALL) * prob; return Math.Log(p / (_NUM - p)); }
private void SignalNotEmpty() { var takeLock = this.takeLock; takeLock.Lock(); try { notEmpty.Signal(); } finally { takeLock.Unlock(); } }
public void DeepFill(MaryNode specTree) { tree = specTree; numberOfLeaves = _NUM; SortNode(_NUM, tree); }
public int NodeCount() { return nodes == null ? _NUM : nodes.Count; }
public void AddToGlobalBlacklist(string host) { AddToGlobalBlacklist(host, DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() + this.globalBlacklistTimeout); }
public bool AddNode(Lop node) { if (nodes.Contains(node)) return true; nodes.Add(node); return true; }
private JArray RequestAllFileSystems() { JArray ret = new JArray(); foreach (var fs in filesystems) { ret.Add(fs.GetRootEntry()); } return ret; }
private void WriteObject(System.IO.ObjectOutputStream s) { s.DefaultWriteObject(); for (Node<K, V> n = FindFirst(); n != null; n = n.Next) { V v = n.GetValidValue(); if (v != null) { s.WriteObject(n.Key); s.WriteObject(v); } } s.WriteObject(null); }
public static double Sigma(double a) { return _NUM / (_NUM + Math.Exp(-a)); }
public void InsertOrRefresh(KBucketEntry newEntry) { if (newEntry == null) return; List<KBucketEntry> entriesRef = entries; foreach (KBucketEntry existing in entriesRef) { if (existing.Equals(newEntry)) { existing.MergeInTimestamps(newEntry); return; } if (existing.MatchIPorID(newEntry)) { DHT.LogInfo(_STR + newEntry + _STR + existing + _STR); return; } } if (newEntry.VerifiedReachable()) { if (entriesRef.Count < DHTConstants.MAX_ENTRIES_PER_BUCKET) { ModifyMainBucket(null, newEntry); return; } if (ReplaceBadEntry(newEntry)) return; KBucketEntry youngest = entriesRef[entriesRef.Count - _NUM]; if (youngest.GetCreationTime() > newEntry.GetCreationTime() || newEntry.GetRTT() * _NUM < youngest.GetRTT()) { ModifyMainBucket(youngest, newEntry); InsertInReplacementBucket(youngest); return; } } InsertInReplacementBucket(newEntry); }
public void Translate(double x, double y) { currentTransform.Translate(x, y); try { WriteTransform(new AffineTransform(_NUM, _NUM, _NUM, _NUM, x, y)); } catch (IOException e) { HandleException(e); } }
public static bool IsSupportedAddRPProtectionVirtualPoolChange(Volume volume, VirtualPool currentVpool, VirtualPool newVpool, DbClient dbClient, StringBuilder notSuppReasonBuff) { s_logger.Info(string.Format(_STR, currentVpool.GetLabel(), newVpool.GetLabel())); if (IsSameVirtualPool(currentVpool, newVpool, notSuppReasonBuff)) { return _BOOL; } if (volume.CheckForRp() || VirtualPool.VPoolSpecifiesProtection(currentVpool)) { notSuppReasonBuff.Append(_STR); return _BOOL; } if (!VirtualPool.VPoolSpecifiesHighAvailability(currentVpool) && VirtualPool.VPoolSpecifiesRPVPlex(newVpool)) { notSuppReasonBuff.Append(_STR); return _BOOL; } if (VirtualPool.VPoolSpecifiesHighAvailability(currentVpool) && !VirtualPool.VPoolSpecifiesHighAvailabilityDistributed(currentVpool) && VirtualPool.VPoolSpecifiesMetroPoint(newVpool)) { notSuppReasonBuff.Append(_STR + _STR); return _BOOL; } string[] include = new string[] { TYPE, VAR
private void WriteObject(ObjectOutputStream oos) { oos.DefaultWriteObject(); bool writeFont = (f != OMText.DEFAULT_FONT); oos.WriteBoolean(writeFont); if (writeFont) { oos.WriteObject(f.GetName()); oos.WriteInt(f.GetSize()); oos.WriteInt(f.GetStyle()); } WriteStroke(oos, stroke, OMGraphic.BASIC_STROKE); WriteStroke(oos, textMatteStroke, DEFAULT_TEXT_MATTE_STROKE); }
private static void WriteSpaces(TextWriter out, int amt) { while (amt > _NUM) { out.Write(_STR); amt--; } }
public static double RelativeOverlap(SpatialComparable box1, SpatialComparable box2) { int dim = AssertSameDimensionality(box1, box2); double overlap = 1.0; double vol1 = 1.0; double vol2 = 1.0; for (int i = 0; i < dim; i++) { double box1min = box1.GetMin(i); double box1max = box1.GetMax(i); double box2min = box2.GetMin(i); double box2max = box2.GetMax(i); double omax = Math.Min(box1max, box2max); double omin = Math.Max(box1min, box2min); if (omax <= omin) { return 0.0; } overlap *= omax - omin; vol1 *= box1max - box1min; vol2 *= box2max - box2min; } return overlap / (vol1 + vol2); }
protected void HandleAutoDraw() { if (IsToolItemSelected(ToolBarItemKey.AutoDraw)) { OnAutoDraw(); } }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
protected void LoadToHaveAtLeast(int minAvailable) { if (_inputStream == null) { throw ConstructError(_STR + minAvailable + _STR); } int amount = _inputEnd - _inputPtr; _currInputProcessed += _inputPtr; if (amount > _NUM && _inputPtr > _NUM) { Array.Copy(_inputBuffer, _inputPtr, _inputBuffer, _NUM, amount); _inputEnd = amount; } else { _inputEnd = _NUM; } _inputPtr = _NUM; while (_inputEnd < minAvailable) { int count = _inputStream.Read(_inputBuffer, _inputEnd, _inputBuffer.Length - _inputEnd); if (count < _NUM) { CloseInput(); if (count == _NUM) { throw new IOException(_STR + amount + _STR); } throw ConstructError(_STR + minAvailable + _STR + minAvailable + _STR); } _inputEnd += count; } }
public Z21Message(byte[] a, int l) : base(Encoding.UTF8.GetString(a)) { setBinary(_BOOL); }
private MethodDescriptor[] SortMethodDescriptors(MethodDescriptor[] methodDescriptors) { return methodSorter != null ? methodSorter.SortMethodDescriptors(methodDescriptors) : methodDescriptors; }
public static Properties ParsePropertyList(string list) { return ParsePropertyList(list, propertySeparators, keyValueSeparators); }
public bool PackageHasAnnotation(Attribute annotation) { try { Package pkg = type.Assembly.GetName().Name; if (pkg == null) { return false; } string className = pkg + "."; Type packageType = Type.GetType(className); var accessor = new AnnotationAccessor(supportedAnnotations, packageType, ignoreAnnotationFailure); return accessor.TypeHas(annotation); } catch (TypeLoadException) { return false; } }
private string BuildToolTip(CTaggedGraphNodesContainerNode node) { StringBuilder tooltip = new StringBuilder(_STR); bool first = _BOOL; foreach (var graphnode in node.GetGraphNodes()) { if (!first) { tooltip.Append(_STR); } tooltip.Append(CNodesDisplayString.GetDisplayString(graphnode)); first = _BOOL; } return tooltip.ToString() + _STR; }
public void MakeGraph(File linkGraph) { string temp212; int rowNum = _NUM; using (var br = new StreamReader(linkGraph.OpenReadStream())) { while ((temp212 = br.ReadLine()) != null) { string[] strs = temp212.Split(_STR); for (int i = _NUM; i < strs.Length; i++) { graph[rowNum][i] = double.Parse(strs[i]); } rowNum++; } } for (int i = _NUM; i < dataNum; i++) { for (int j = _NUM; j < dimension; j++) { W[i][j] = r.NextDouble(); H[j][i] = r.NextDouble(); } } for (int i = _NUM; i < dataNum; i++) { double sumW = _NUM; double sumH = _NUM; for (int j = _NUM; j < dimension; j++) { sumW += W[i][j] * W[i][j]; sumH += H[j][i] * H[j][i];
public void RemoveSwipeListener(SwipeListener listener) { if (mListeners == null) { return; } mListeners.Remove(listener); }
public bool RemoveOnItemClickListener(OnItemClickListener itemClickListener) { return clickListeners.Remove(itemClickListener); }
protected override int LookForSelectablePosition(int position, bool lookDown) { var adapter = mAdapter; if (adapter == null || IsInTouchMode()) { return INVALID_POSITION; } int count = adapter.GetCount(); if (!mAreAllItemsSelectable) { if (lookDown) { position = Math.Max(_NUM, position); while (position < count && !adapter.IsEnabled(position)) { position++; } } else { position = Math.Min(position, count - _NUM); while (position >= _NUM && !adapter.IsEnabled(position)) { position--; } } if (position < _NUM || position >= count) { return INVALID_POSITION; } return position; } else { if (position < _NUM || position >= count) { return INVALID_POSITION; } return position; } }
public static string PadRight(string s, int length) { int pad = length - s.Length; return pad > 0 ? s + new string(' ', pad) : s; }
private static string[] CollationMatchingRuleNames(List<string> localeNames, int numSuffix, string symbolicSuffix) { List<string> names = new List<string>(); foreach (string localeName in localeNames) { if (string.IsNullOrEmpty(symbolicSuffix)) { names.Add(localeName); } else { names.Add(localeName + "_" + numSuffix); names.Add(localeName + "_" + symbolicSuffix); } } return names.ToArray(); }
public static bool IsCacheSafe(Type clazz, ClassLoader classLoader) { if (clazz == null) throw new ArgumentNullException(nameof(clazz)); ClassLoader target = clazz.ClassLoader; if (target == null) return false; ClassLoader cur = classLoader; if (cur == target) return true; while (cur != null) { cur = cur.Parent; if (cur == target) return true; } return false; }
public void Write(StreamWriter outStream) { Write(outStream, table); }
public static Part From(string encoded, string decoded) { if (encoded == null) { return null; } if (encoded.Length == _NUM) { return EMPTY; } if (decoded == null) { return null; } if (decoded.Length == _NUM) { return EMPTY; } return new Part(encoded, decoded); }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
private int[] CreateEpochMonths(int epochDay, int minYear, int maxYear, Dictionary<int, int[]> years) { int numMonths = (maxYear - minYear + _NUM) * _NUM + _NUM; int epochMonth = _NUM; int[] epochMonths = new int[numMonths]; int minMonthLength = int.MaxValue; int maxMonthLength = int.MinValue; for (int year = minYear; year <= maxYear; year++) { int[] months = years[year]; for (int month = _NUM; month < _NUM; month++) { int length = months[month]; epochMonths[epochMonth++] = epochDay; if (length < _NUM || length > _NUM) { throw new ArgumentException(_STR + minYear); } epochDay += length; minMonthLength = Math.Min(minMonthLength, length); maxMonthLength = Math.Max(maxMonthLength, length); } } epochMonths[epochMonth++] = epochDay; if (epochMonth != epochMonths.Length) { throw new InvalidOperationException(_STR + epochMonth + _
private static string DescriptorToInternalName(string descriptor) { switch (descriptor[_NUM]) { case _STR: case _STR: case _STR: case _STR: case _STR: case _STR: case _STR: case _STR: case _STR: case _STR: return descriptor; case _STR: return ClassDescriptorToInternalName(descriptor); default: throw new ArgumentException(_STR + descriptor); } }
public Subscription Register(object mBean, MBeanDescription description) { return Register(mBean, description.GetMBeanName(GetNextId())); }
void CheckAfterUnmarshalled() { Assert.AreEqual(shortVal.Value, _NUM); Assert.AreEqual(longVal, _NUM); Assert.IsNull(aArr); Assert.IsNull(strVal); Assert.AreEqual(doubleVal, _NUM); }
public void Put(int key, E value) { int i = ContainerHelpers.BinarySearch(mKeys, mSize, key); if (i >= _NUM) { mValues[i] = value; } else { i = ~i; if (i < mSize && mValues[i] == DELETED) { mKeys[i] = key; mValues[i] = value; return; } if (mGarbage && mSize >= mKeys.Length) { Gc(); i = ~ContainerHelpers.BinarySearch(mKeys, mSize, key); } if (mSize >= mKeys.Length) { int n = ContainerHelpers.IdealIntArraySize(mSize + _NUM); int[] nkeys = new int[n]; E[] nvalues = new E[n]; Array.Copy(mKeys, _NUM, nkeys, _NUM, mKeys.Length); Array.Copy(mValues, _NUM, nvalues, _NUM, mValues.Length); mKeys = nkeys; mValues = nvalues; } if (mSize - i != _NUM) { Array.Copy(mKeys, i, mK
public override async Task<R> Collect<R>(Func<R> supplier, Action<R, T> accumulator, Action<R, R> combiner) { return await Task.Run(() => supplier()); }
protected object FromReflectionType(object value) { FieldDescriptor descriptor = GetDescriptor(); if (descriptor.IsRepeated()) { if (descriptor.GetJavaType() == FieldDescriptor.JavaType.Message || descriptor.GetJavaType() == FieldDescriptor.JavaType.Enum) { List<object> result = new List<object>(); foreach (var element in (IEnumerable<object>)value) { result.Add(SingularFromReflectionType(element)); } return result; } else { return value; } } else { return SingularFromReflectionType(value); } }
public void RegisterManufacturerSpecificBuilder(int companyId, ADManufacturerSpecificBuilder builder) { if (companyId < _NUM || _NUM < companyId) { string message = string.Format(_STR, companyId); throw new ArgumentException(message); } if (builder == null) { return; } int key = companyId; List<ADManufacturerSpecificBuilder> builders; if (!mMSBuilders.TryGetValue(key, out builders)) { builders = new List<ADManufacturerSpecificBuilder>(); mMSBuilders[key] = builders; } builders.Insert(_NUM, builder); }
public static ReilGraph CopyReilCode(Window parent, INaviCodeNode node) { var translator = new ReilTranslator<INaviInstruction>(); try { return translator.Translate(new StandardEnvironment(), node); } catch (InternalTranslationException e) { CUtilityFunctions.LogException(e); string message = _STR + _STR; string description = CUtilityFunctions.CreateDescription(string.Format(_STR, node.GetAddress()), new string[] { _STR }, new string[] { _STR + _STR }); NaviErrorDialog.Show(parent, message, description, e); } return null; }
private static void ApplyOverrides() { using (var stream = GetContentTypesPropertiesStream()) { if (stream == null) { return; } try { var overrides = new Properties(); overrides.Load(stream); foreach (DictionaryEntry entry in overrides) { string extension = (string)entry.Key; string mimeType = (string)entry.Value; Add(mimeType, extension); } } catch (IOException) { // Ignored } } }
public static string ToString(TextReader reader, long timeout) { StringWriter sw = new StringWriter(); Copy(ToBufferedReader(reader), sw, timeout); sw.Close(); return sw.ToString(); }
private static float ComputeSimilarity(Lane a, Lane b) { int same = _NUM; int diff = _NUM; int firstCoordinate = Math.Max(a.GetFirstNonGapPosition(), b.GetFirstNonGapPosition()); int lastCoordinate = Math.Min(a.GetLastNonGapPosition(), b.GetLastNonGapPosition()); for (int i = firstCoordinate; i <= lastCoordinate; i++) { char cha = a[i]; char chb = b[i]; if (char.IsLetter(cha) && char.IsLetter(chb)) { if (char.ToLower(cha) == char.ToLower(chb)) same++; else diff++; } } return Math.Max(same > _NUM ? _NUM : _NUM, same - _NUM * diff); }
private void ForceOverflow() { ForceOverflow(); }
public int Find(string str) { if (str == null) { return -1; } for (int i = 0; i < m_stringOffsets.Length; i++) { int offset = m_stringOffsets[i]; int length = GetShort(m_strings, offset); if (length != str.Length) { continue; } int j = 0; for (; j < length; j++) { offset += 2; // Assuming that getShort is similar to advancing by 2 bytes if (str[j] != (char)GetShort(m_strings, offset)) { break; } } if (j == length) { return i; } } return -1; }
public string PrepOperand(string label, DataType dt, ValueType vt, bool literal) { StringBuilder sb = new StringBuilder(); sb.Append(label); sb.Append(Lop.DATATYPE_PREFIX); sb.Append(dt); sb.Append(Lop.VVALUETYPE_PREFIX); sb.Append(vt); sb.Append(Lop.LITERAL_PREFIX); sb.Append(literal); return sb.ToString(); }
public static List<SpaceTime> DivideConquerBrownianBridge(MultivariateNormalDistribution normal, SpaceTime start, SpaceTime end, int depth, int maxTries, SpaceTimeRejector rejector) { List<SpaceTime> points = new List<SpaceTime>(); points.Add(start); points.Add(end); bool stop = true; if (DivideConquerBrownianBridge(normal, 0, points, depth, maxTries, rejector) == (0 << (depth - 0))) { return points; } stop = true; return null; }
public static EjbJarXmlVersion ValueOf(DocumentType docType) { if (docType == null) { throw new ArgumentNullException(nameof(docType)); } return ValueOf(docType.GetPublicId()); }
private bool MatchStrings(string pattern, string str, bool caseSensitive) { char[] patArr = pattern.ToCharArray(); char[] strArr = str.ToCharArray(); int patIdxStart = 0; // Assuming _NUM is 0 int patIdxEnd = patArr.Length - 1; // Assuming _NUM is 0 int strIdxStart = 0; // Assuming _NUM is 0 int strIdxEnd = strArr.Length - 1; // Assuming _NUM is 0 char ch; bool containsStar = false; // Assuming _BOOL is false foreach (char c in patArr) { if (c == '*') // Assuming _STR is '*' { containsStar = true; break; } } if (!containsStar) { if (patIdxEnd != strIdxEnd) { return false; // Assuming _BOOL is false } for (int i = 0; i <= patIdxEnd; i++) { ch = patArr[i]; if (ch != '*') // Assuming _STR is '*' { if (Differ
using System; using System.Collections.Generic; public static List<double> MergeCoords(List<double> x, List<double> y) { if (x.Count != y.Count) throw new ArgumentException("Input lists must have the same size."); List<double> ret = new List<double>(); for (int i = 0; i < x.Count; i++) { ret.Add(x[i]); ret.Add(y[i]); } return ret; }
public static void Print(int x) { Console.Write(x); Console.Out.Flush(); }
public void CopyText() { int end, start; end = selectedCharField.SelectionEnd; start = selectedCharField.SelectionStart; selectedCharField.SelectAll(); selectedCharField.Copy(); selectedCharField.Select(start, end); }
public void HandleButton1Request(RequestInvocationEvent event) { try { AuthPropertiesModel model = (AuthPropertiesModel)GetModel(); var original = model.GetValues(); AMPropertySheet ps = (AMPropertySheet)GetChild(PROPERTY_ATTRIBUTE); model.SetValues(ps.GetAttributeValues(original, _BOOL, model)); SetInlineAlertMessage(CCAlert.TYPE_INFO, _STR, _STR); } catch (AMConsoleException a) { SetInlineAlertMessage(CCAlert.TYPE_ERROR, _STR, a.Message); } ForwardTo(); }
private void BuildDescriptionPanel(Composite parent) { descriptionLabel = new StyledText(parent, SWT.READ_ONLY); descriptionLabel.Text = _STR; descriptionLabel.LayoutData = new GridData(GridData.FILL, GridData.FILL, _BOOL, _BOOL, _NUM, _NUM); }
public HttpMethodClient() { this(_NUM, _NUM, _NUM * _NUM); }
public ISO9796d2PSSSigner(AsymmetricBlockCipher cipher, Digest digest, int saltLength, bool implicit) { this.cipher = cipher; this.digest = digest; this.hLen = digest.GetDigestSize(); this.saltLength = saltLength; if (implicit) { trailer = TRAILER_IMPLICIT; } else { if (trailerMap.TryGetValue(digest.GetAlgorithmName(), out var trailerObj)) { trailer = trailerObj; } else { throw new ArgumentException(_STR); } } }
public string DecodeTextValue(byte[] data) { bool isCompressed = (data.Length > _NUM && data[_NUM] == TEXT_COMPRESSION_HEADER[_NUM] && data[_NUM] == TEXT_COMPRESSION_HEADER[_NUM]); if (isCompressed) { StringBuilder textBuf = new StringBuilder(data.Length); int dataStart = TEXT_COMPRESSION_HEADER.Length; int dataEnd = dataStart; bool inCompressedMode = _BOOL; while (dataEnd < data.Length) { if (data[dataEnd] == (byte)_NUM) { DecodeTextSegment(data, dataStart, dataEnd, inCompressedMode, textBuf); inCompressedMode = !inCompressedMode; ++dataEnd; dataStart = dataEnd; } else { ++dataEnd; } } DecodeTextSegment(data, dataStart, dataEnd, inCompressedMode, textBuf); return textBuf.ToString(); } return DecodeUncompressedText(data, GetCharset()); }
private HashSet<T> Extract<S, T>(ICollection<S> collection, Func<S, T> extractor) { var values = new HashSet<T>(collection.Count); foreach (var instance in collection) { values.Add(extractor(instance)); } return values; }
public static bool IsZTE() { return sBuildModel.StartsWith(_STR); }
public static string NormalizeToEncoding(string origString_, System.Text.Encoding encoding_) { string normString = origString_; var encoder = encoding_.GetEncoder(); if (!encoder.GetByteCount(origString_.ToCharArray(), 0, origString_.Length, true).Equals(origString_.Length)) { int length = origString_.Length; char[] normSeq = new char[length]; int charNum = 0; for (int offset = 0; offset < length;) { var replacement = NormalizeCodepoint(origString_, encoding_, offset); char? replacedChar = replacement.Item1; int codepoint = replacement.Item2; if (replacedChar.HasValue) { normSeq[charNum] = replacedChar.Value; charNum++; } offset += char.IsHighSurrogate(origString_[offset]) ? 2 : 1; } normString = new string(normSeq, 0, charNum); } return normString; }
private FastConcurrentSkipListMap.Node<K, V> LoNode() { if (lo == null) return m.FindFirst(); else if (loInclusive) return m.FindNear(lo, m.GT | m.EQ); else return m.FindNear(lo, m.GT); }
public int Size() { return m_sets.Count; }
public Line3D(Stack<Vector3> points, float thickness, int[] colors, bool createVBOs) { if (colors != null && colors.Length != points.Count) { throw new InvalidOperationException(_STR); } mPoints = points; mLineThickness = thickness; mColors = colors; Init(createVBOs); }
public static byte[] AsUnsignedByteArray(BigInteger value) { byte[] bytes = value.ToByteArray(); if (bytes[bytes.Length - 1] == 0) { byte[] tmp = new byte[bytes.Length - 1]; Array.Copy(bytes, 0, tmp, 0, tmp.Length); return tmp; } return bytes; }
public static float ApproximateLength(float[][] controlPoints) { float length = _NUM; for (int i = _NUM; i < controlPoints.Length - _NUM; i++) { float xDif = controlPoints[i + _NUM][0] - controlPoints[i][0]; float yDif = controlPoints[i + _NUM][1] - controlPoints[i][1]; float zDif = controlPoints[i + _NUM][2] - controlPoints[i][2]; length += (float)Math.Sqrt(xDif * xDif + yDif * yDif + zDif * zDif); } return length; }
protected int MapDragOperationFromModifiers(MouseEvent e) { int mods = e.GetModifiersEx(); int btns = mods & ButtonMask; if (!(btns == InputEvent.BUTTON1_DOWN_MASK || btns == InputEvent.BUTTON2_DOWN_MASK)) { return DnDConstants.ACTION_NONE; } return SunDragSourceContextPeer.ConvertModifiersToDropAction(mods, GetSourceActions()); }
public UpdateClause AddAssignment(Expression expression) { assignments.Add(new Assignment(expression)); return this; }
private bool StepValue() { while (_BOOL) { if (iter != null && iter.MoveNext()) { svcs = (List<object>)iter.Current; svcidx = svcs.Count; return _BOOL; } if (!StepClass()) return _BOOL; if (iter == null) return _BOOL; } return false; // Add this return to avoid falling through without a return value. }
private List<IconMarker> CreateIconMarkers() { var iconMarkers = new List<IconMarker>(LOCATIONS.Length); iconMarkers.Add(new IconMarker(LOCATIONS[_NUM], Resource.Drawable.bread, Resource.Drawable.bread_c)); iconMarkers.Add(new IconMarker(LOCATIONS[_NUM], Resource.Drawable.butcher, Resource.Drawable.butcher_c)); iconMarkers.Add(new IconMarker(LOCATIONS[_NUM], Resource.Drawable.fruits, Resource.Drawable.fruits_c)); iconMarkers.Add(new IconMarker(LOCATIONS[_NUM], Resource.Drawable.grocery, Resource.Drawable.grocery_c)); iconMarkers.Add(new IconMarker(LOCATIONS[_NUM], Resource.Drawable.patisserie, Resource.Drawable.patisserie_c)); return iconMarkers; }
public void HasNetworkConnection(NetworkRequestCheckListener listener) { if (HasNetworkConnection()) { TestNetworkRequest(listener); } else { listener.OnNoResponse(); } }
public void AssignThreadForSubscriber(object subscriber) { Looper looper = Looper.MyLooper(); if (looper != null) { mSubscribersDefaultThreads[new IdentityWeakReferenceKey(subscriber)] = looper != Looper.GetMainLooper() ? new Handler(looper) : mUiThreadHandler; } else { mSubscribersDefaultThreads.Remove(new IdentityWeakReferenceKey(subscriber)); } }
private void ValidateDynamicAttribute(HashSet<string> dynamicSet) { if (DEBUG.MessageEnabled()) { DEBUG.Message(_STR + _STR + string.Join(", ", dynamicSet)); } var responseAttrNames = new HashSet<string>(); var repoAttrNames = new HashSet<string>(); var responseAttrToRepoAttr = new Dictionary<string, string>(); if (DEBUG.MessageEnabled()) { DEBUG.Message(_STR + _STR + string.Join(", ", validDynamicAttrNames)); } var dynamicAttrs = (HashSet<string>)properties[DYNAMIC_ATTRIBUTE]; if (DEBUG.MessageEnabled()) { DEBUG.Message(_STR + _STR + string.Join(", ", dynamicAttrs)); } foreach (var attr in dynamicAttrs) { if (!validDynamicAttrNames.Contains(attr)) { if (DEBUG.WarningEnabled()) { DEBUG.Warning(_STR + _STR + _STR + attr); } continue; } var attrNames = ParseDynamicAttrName(attr); var responseAttrName = attrNames[_NUM]; var repoAttrName = attrNames[_NUM]; responseAttrNames.Add(responseAttrName); repoAttrNames.Add(repoAttrName);
public static bool TypeCheck(Type type, object instance) { return type.IsAssignableFrom(instance.GetType()) || IsWrapperInstance(type, instance); }
public synchronized void Init() { List<Warrant> tempList = new List<Warrant>(); List<string> systemNameList = _manager.GetSystemNameList(); IEnumerator<string> iter = systemNameList.GetEnumerator(); while (iter.MoveNext()) { Warrant w = _manager.GetBySystemName(iter.Current); if (!_warList.Contains(w)) { w.AddPropertyChangeListener(this); } else { _warList.Remove(w); } tempList.Add(w); } for (int i = _NUM; i < _warList.Count; i++) { Warrant w = _warList[i]; if (!_warNX.Contains(w)) { w.RemovePropertyChangeListener(this); } } for (int i = _NUM; i < _warNX.Count; i++) { tempList.Add(_warNX[i]); } _warList = tempList; }
public void AddCommand(Command cmd, int offset) { menuBar.AddCommand(cmd, offset); }
public bool Connect(string address) { if (mBluetoothAdapter == null || address == null) { Log.Warn(TAG, _STR); return _BOOL; } if (mBluetoothDeviceAddress != null && address.Equals(mBluetoothDeviceAddress) && mBluetoothGatt != null) { Log.Debug(TAG, _STR); if (mBluetoothGatt.Connect()) { mConnectionState = STATE_CONNECTING; return _BOOL; } else { return _BOOL; } } var device = mBluetoothAdapter.GetRemoteDevice(address); if (device == null) { Log.Warn(TAG, _STR); return _BOOL; } mBluetoothGatt = device.ConnectGatt(this, _BOOL, mGattCallback); Log.Debug(TAG, _STR); mBluetoothDeviceAddress = address; mConnectionState = STATE_CONNECTING; return _BOOL; }
private double NormalDens(double x, double mean, double stdDev) { double diff = x - mean; return (_NUM / (m_normConst * stdDev)) * Math.Exp(- (diff * diff / (_NUM * stdDev * stdDev))); }
private static void DrawShape(Graphics2D g, Shape s) { PathIterator it = s.GetPathIterator(new AffineTransform(), shapeFlatness); float[] lastMoveTo = new float[_NUM]; float[] f = new float[_NUM]; while (!it.IsDone()) { int res = it.CurrentSegment(f); switch (res) { case PathIterator.SEG_CLOSE: GLPanel.V(g, lastMoveTo[_NUM], lastMoveTo[_NUM]); break; case PathIterator.SEG_MOVETO: GLPanel.V(g, f[_NUM], f[_NUM]); Array.Copy(f, _NUM, lastMoveTo, _NUM, _NUM); break; case PathIterator.SEG_LINETO: GLPanel.V(g, f[_NUM], f[_NUM]); break; case PathIterator.SEG_CUBICTO: CubicCurve2D c = new CubicCurve2D.Float(lastMoveTo[_NUM], lastMoveTo[_NUM], f[_NUM], f[_NUM], f[_NUM], f[_NUM], f[_NUM], f[_NUM]); DrawShape(g, c); break;
protected override void TearDown() { try { NamingEnumeration<Binding> iter = context.ListBindings(_STR); while (iter.HasMore()) { Binding binding = iter.Next(); object connFactory = binding.GetObject(); if (connFactory is ActiveMQConnectionFactory) { // Handle ActiveMQConnectionFactory instance here } } } catch (NamingException ex) { // Handle NamingException } catch (JMSException ex) { // Handle JMSException } }
protected List<Uri> Load(Stream inputStream) { var factory = XmlReader.Create("yourXmlReaderInstance"); // Assuming an XML Reader object var groups = new List<Uri>(); using (var reader = XmlReader.Create(inputStream)) { // Implement your parsing logic here to fill the 'groups' list // This may involve calling methods on 'reader' or using an XML parser } return groups; }
public void LazySet(long newValue) { Unsafe.WriteUnaligned(ref valueOffset, newValue); }
private static List<object> CreateEqualityKey(Node node) { List<object> values = new List<object>(); values.Add(node.GetNodeType()); values.Add(node.GetNodeName()); values.Add(node.GetLocalName()); values.Add(node.GetNamespaceURI()); values.Add(node.GetPrefix()); values.Add(node.GetNodeValue()); for (Node child = node.GetFirstChild(); child != null; child = child.GetNextSibling()) { values.Add(child); } switch (node.GetNodeType()) { case Node.DOCUMENT_TYPE_NODE: DocumentTypeImpl doctype = (DocumentTypeImpl)node; values.Add(doctype.GetPublicId()); values.Add(doctype.GetSystemId()); values.Add(doctype.GetInternalSubset()); values.Add(doctype.GetEntities()); values.Add(doctype.GetNotations()); break; case Node.ELEMENT_NODE: Element element = (Element)node; values.Add(element.GetAttributes()); break; } return values; }
[Obsolete] public static string Collection2String(System.Collections.ICollection input, string separator) { if (input == null) { return null; } return Iterator2String(input.GetEnumerator(), separator); }
public static byte[] DecodeBase64(string base64Str) { return Convert.FromBase64String(base64Str); }
protected void RemoveAllPremoveDrops() { for (int i = premoves.Count - 1; i >= 0; i--) { if (premoves[i].IsPremoveDrop) { premoves.RemoveAt(i); } } }
public void TestClearBitZero() { byte[] aBytes = { _NUM }; int aSign = _NUM; int number = _NUM; byte[] rBytes = { _NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger result = aNumber.ClearBit(number); byte[] resBytes = result.ToByteArray(); for (int i = 0; i < resBytes.Length; i++) { Assert.IsTrue(resBytes[i] == rBytes[i]); } Assert.AreEqual(_STR, _NUM, result.Sign); }
public static string SayNumber(StringBuilder appendTo, double number) { if (number == double.MinValue) { throw new ArgumentException(_STR); } if (number < _NUM) { appendTo.Append(_STR); } double abs = Math.Abs(number); if (abs < POWER_THREE) { SaySimpleNumber(appendTo, (int)abs); } else if (abs < _NUM) { int thousand = (int)(abs % POWER_THREE); appendTo.Append(_STR); SaySimpleNumber(appendTo, thousand); } else if (abs < POWER_SIX) { int thousand = (int)(abs % POWER_SIX / POWER_THREE); SaySimpleNumber(appendTo, thousand); appendTo.Append(_STR); double remainder = abs - thousand * POWER_THREE; if (remainder > _NUM) { appendTo.Append(_STR); SayNumber(appendTo, remainder); } } else if (abs < POWER_NINE) { int million = (int)(abs % POWER_NINE / POWER_SIX
public void Stop() { _throttle.SetSpeedSetting(-_NUM); _throttle.SetSpeedSetting(_NUM); stopLabel.SetIcon(stopIcon); stopLabel.SetIconTextGap(_gap); Pack(); }
public void Encode(Stream outStream) { using (var tmp = new DerOutputStream()) { dnName.Encode(tmp); outStream.Write(tmp.ToArray(), 0, tmp.Length); } }
public void MakeDirty() { betaChanged = _BOOL; newMode = _BOOL; precisionChanged = _BOOL; regressionInterface.MakeDirty(instance); }
private List<E> ToArrayList() { List<E> list = new List<E>(); for (Node<E> p = First(); p != null; p = Succ(p)) { E item = p.Item; if (item != null) list.Add(item); } return list; }
public bool Remove(HttpConnection connection) { TimeValues times = connectionToTimes.Remove(connection); if (times == null) { log.Warn(_STR); return _BOOL; } else { return DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() <= times.TimeExpires; } }
public override IEnumerator<Option> ListOptions() { List<Option> options = new List<Option>(_NUM); options.Add(new Option(_STR, _STR, _NUM, _STR)); options.Add(new Option(_STR + _STR, _STR, _NUM, _STR)); options.Add(new Option(_STR, _STR, _NUM, _STR)); return options.GetEnumerator(); }
private List<string> Split(string prefix) { List<string> parts = new List<string>(); int bracketCount = _NUM; bool inQuotes = _BOOL; int lastIndex = _NUM; for (int i = _NUM; i < prefix.Length; i++) { char c = prefix[i]; if (c == _STR) { bracketCount++; continue; } else if (c == _STR) { inQuotes = !inQuotes; continue; } else if (c == _STR) { bracketCount--; if (bracketCount < _NUM) { throw new InvalidOperationException(_STR + prefix); } continue; } if (c == _STR && !inQuotes && bracketCount == _NUM) { parts.Add(prefix.Substring(lastIndex, i - lastIndex)); lastIndex = i + _NUM; } } if (lastIndex < prefix.Length - _NUM && !inQuotes && bracketCount == _NUM) { parts.Add(prefix.Substring(lastIndex)); } return parts; }
public static long LowerHexToUnsignedLong(string lowerHex) { int length = lowerHex.Length; if (length < _NUM || length > _NUM) throw IsntLowerHexLong(lowerHex); int i = length > _NUM ? length - _NUM : _NUM; long result = _NUM; for (; i < length; i++) { char c = lowerHex[i]; result <<= _NUM; if (c >= '0' && c <= '9') { result |= c - '0'; } else if (c >= 'a' && c <= 'f') { result |= c - 'a' + 10; } else { throw IsntLowerHexLong(lowerHex); } } return result; }
public static double SampleSkewStandardError(int size) { int n = size; return Math.Sqrt(_NUM * n * (n - _NUM) / ((n - _NUM) * (n + _NUM) * (n + _NUM))); }
public void Load(List<PolicyQualifierInfo> policyQualifierInfo) { PolicyQualifierInfo[] policyQualifierInfoArray = policyQualifierInfo.ToArray(); Array.Sort(policyQualifierInfoArray, new PolicyQualifierInfoComparator()); data = new object[policyQualifierInfoArray.Length, _NUM]; int i = _NUM; foreach (PolicyQualifierInfo policyQualInfo in policyQualifierInfoArray) { data[i, _NUM] = policyQualInfo; i++; } FireTableDataChanged(); }
public void RunScript(TextReader reader) { try { bool originalAutoCommit = connection.GetAutoCommit(); try { if (originalAutoCommit != this.autoCommit) { connection.SetAutoCommit(this.autoCommit); } RunScript(connection, reader); } finally { connection.SetAutoCommit(originalAutoCommit); } } catch (IOException e) { throw e; } catch (SQLException e) { throw e; } catch (Exception e) { throw new InvalidOperationException(_STR + e, e); } }
public double DoOperation() { double logq; NodeRef root = tree.GetRoot(); double oldTreeHeight = tree.GetNodeHeight(root); NodeRef i; do { i = tree.GetNode(MathUtils.NextInt(tree.GetNodeCount())); } while (root == i); NodeRef iP = tree.GetParent(i); NodeRef CiP = GetOtherChild(tree, iP, i); NodeRef PiP = tree.GetParent(iP); double delta = GetDelta(); double oldHeight = tree.GetNodeHeight(iP); double newHeight = oldHeight + delta; if (delta > _NUM) { if (PiP != null && tree.GetNodeHeight(PiP) < newHeight) { NodeRef newParent = PiP; NodeRef newChild = iP; while (tree.GetNodeHeight(newParent) < newHeight) { newChild = newParent; newParent = tree.GetParent(newParent); if (newParent == null) break; } tree.BeginTreeEdit(); if (tree.IsRoot(newChild)) { tree.RemoveChild(
public MarkerSegment FindMarkerSegment(Type cls, bool first) { if (first) { foreach (var seg in markerSequence) { if (cls.IsInstanceOfType(seg)) { return seg; } } } else { for (int i = markerSequence.Count - 1; i >= 0; i--) { var seg = markerSequence[i]; if (cls.IsInstanceOfType(seg)) { return seg; } } } return null; }
public Filterable<T> RemoveAll(params T[] values) { return RemoveAll(values.AsEnumerable()); }
public static Dictionary<string, object> CreateContentAssocMethod(DispatchContext dctx, Dictionary<string, object> rcontext) { var context = UtilMisc.MakeMapWritable(rcontext); var targetOperationList = ContentWorker.PrepTargetOperationList(context, _STR); var contentPurposeList = ContentWorker.PrepContentPurposeList(context); context[_STR] = targetOperationList; context[_STR] = contentPurposeList; Locale locale = (Locale)context[_STR]; var delegator = dctx.GetDelegator(); var dispatcher = dctx.GetDispatcher(); var result = new Dictionary<string, object>(); string contentIdFrom = (string)context[_STR]; string contentIdTo = (string)context[_STR]; string contentId = (string)context[_STR]; int contentIdCount = _NUM; if (UtilValidate.IsNotEmpty(contentIdFrom) ) contentIdCount++; if (UtilValidate.IsNotEmpty(contentIdTo)) contentIdCount++; if (UtilValidate.IsNotEmpty(contentId)) contentIdCount++; if (contentIdCount < _NUM) { Debug.LogError(_STR, _STR); ret
public void Reset(bool clear) { gotVersion = false; gotHeaderLength = false; gotHeader = false; gotBody = false; gotBodyBoundary = false; headerLength = 0; bodyLength = 0; bodyBytesReceived = 0; if (clear) { bufferOffset = 0; buffer.Clear(); bodyFile = null; if (bodyStream != null) { try { bodyStream.Close(); } catch (IOException e) { e.PrintStackTrace(); } bodyStream = null; } } }
void RemoveAt(int removeIndex) { object[] items = this.items; if (removeIndex == takeIndex) { items[takeIndex] = null; takeIndex = Inc(takeIndex); count--; if (itrs != null) itrs.ElementDequeued(); } else { int putIndex = this.putIndex; for (int i = removeIndex;;) { int next = Inc(i); if (next != putIndex) { items[i] = items[next]; i = next; } else { items[i] = null; this.putIndex = i; break; } } count--; if (itrs != null) itrs.RemovedAt(removeIndex); } notFull.Signal(); }
private void SaveAndClose(bool save) { content.Enabled = _BOOL; if (timer != null) { timer.Cancel(); timer = null; } if (timerNextSync != null) { timerNextSync.Cancel(); timerNextSync = null; } if (save) { Log.Debug(LOG_TAG, _STR); SaveData(null); } else { Log.Debug(LOG_TAG, _STR); } Intent data = new Intent(); data.SetAction(Intent.ActionView); data.PutExtra(PARAM_NOTE, note); data.PutExtra(PARAM_NOTE_POSITION, notePosition); SetResult(Result.Ok, data); Finish(); }
public static Uri AddMessage(ContentResolver resolver, string address, string body, string subject, long date, bool deliveryReport, long threadId) { Uri CONTENT_URI = Uri.Parse(_STR); return AddMessageToUri(resolver, CONTENT_URI, address, body, subject, date, _BOOL, deliveryReport, threadId); }
public static void BlockingSubscribePrint<T>(IObservable<T> observable, string name) { var latch = new CountdownEvent(_NUM); SubscribePrint(observable.Finally(() => latch.Signal()), name); latch.Wait(); }
public static double CalcNiceNumber(double range, bool round) { double niceFraction; double exponent = Math.Floor(Math.Log10(range)); double fraction = range / Math.Pow(_NUM, exponent); if (round) { if (fraction < _NUM) { niceFraction = _NUM; } else if (fraction < _NUM) { niceFraction = _NUM; } else if (fraction < _NUM) { niceFraction = _NUM; } else { niceFraction = _NUM; } } else { if (fraction <= _NUM) { niceFraction = _NUM; } else if (fraction <= _NUM) { niceFraction = _NUM; } else if (fraction <= _NUM) { niceFraction = _NUM; } else { niceFraction = _NUM; } } return niceFraction * Math.Pow(_NUM, exponent); }
private Object InternalReplace(Object k, Object v, Object cv) { int h = Spread(k.GetHashCode()); Object oldVal = null; Node[] tab = table; while (true) { Node f; int i, fh; Object fk; if (tab == null || (f = TabAt(tab, i = (tab.Length - _NUM) & h)) == null) break; if ((fh = f.hash) == MOVED) { if (fk is TreeBin) { TreeBin t = (TreeBin)fk; bool validated = _BOOL, deleted = _BOOL; t.Acquire(_NUM); try { if (TabAt(tab, i) == f) { validated = _BOOL; TreeNode p = t.GetTreeNode(h, k, t.root); if (p != null) { Object pv = p.val; if (cv == null || cv == pv || cv.Equals(pv)) { oldVal = pv; if ((p.val = v) == null) { deleted = _BOOL; t.DeleteTreeNode(p); } } }
private static bool CopyHeader(string name, string fromReq, StringBuilder buf) { int start = fromReq.IndexOf(name); if (start != -1) { int end = fromReq.IndexOf('\0', start); // Assuming _STR is a null character if (end != -1) { buf.Append(fromReq.Substring(start - 1, end - (start - 1))); // Assuming _NUM is 1 return true; } } return false; }
public void SendMetric(string name, double value) { logger.Debug(string.Format(_STR, name, value)); if (telemetryClient != null) { telemetryClient.TrackMetric(name, value); } }
public Document PutAll(IEnumerable<Field> fields, Predicate<string> acceptableFieldNames) { foreach (var field in fields) { if (acceptableFieldNames(field.GetName())) { SetValue(field.GetName(), field.GetValue()); } } return this; }
public static Uri FindResourceBase(string baseResource, ClassLoader loader) { Uri url = loader.GetResource(baseResource); return FindResourceBase(url, baseResource); }
public string ToEPL(EPStatementFormatter formatter) { using (StringWriter writer = new StringWriter()) { ToEPL(formatter, writer); return writer.ToString(); } }
public bool IsSpecified(int index) { if (index < _NUM || index >= mLength) { throw new IndexOutOfRangeException(_STR); } string str = mItems[(index << _NUM) + _NUM]; return (str != null) ? (str[_NUM] == _STR) : _BOOL; }
public StatArchiveReader(string archiveName) { this(new File[] { new File(archiveName) }, null, _BOOL); }
private static void InitAdbSocketAddr() { try { sAdbServerPort = GetAdbServerPort(); IPAddress hostAddr = Dns.GetHostEntry(DEFAULT_ADB_HOST).AddressList[0]; sSocketAddr = new IPEndPoint(hostAddr, sAdbServerPort); } catch (SocketException) { // Handle the exception or log if necessary } }
public int Read(long fileOffset, byte[] buffer, int offset, int length) { _file.Seek(fileOffset, SeekOrigin.Begin); return _file.Read(buffer, offset, length); }
private bool MatchesAnyTag(string tagName) { return tagNames.Contains(tagName); }
void Shutdown() { System.Windows.Forms.Application.Exit(); // destroy the UI thread }
public bool IsExpanded(int row) { TreeUI tree = GetUI(); if (tree != null) { TreePath path = tree.GetPathForRow(this, row); if (path != null) { bool? value = expandedState[path]; return value.HasValue && value.Value; } } return false; // Assuming _BOOL is equivalent to false }
private static int LabelEnd(string s) { int colonIndex = s.IndexOf(_STR); int semicolonIndex = s.IndexOf(_STR); if (semicolonIndex == -1 || colonIndex < semicolonIndex) { return colonIndex; } else { return -1; } }
public void AddListener(AnimatorListener listener) { if (mListeners == null) { mListeners = new List<AnimatorListener>(); } mListeners.Add(listener); }
public HttpMethodInfo(MethodInfo method, object handler, object[] args, MultivaluedMap<string, object> formParameters, Response responder) { this.method = method; this.handler = handler; this.args = (object[])args.Clone(); this.formParameters = formParameters; this.responder = responder; }
public static bool Equals(byte[][] field1, byte[][] field2) { int index1 = 0; int length1 = field1 == null ? 0 : field1.Length; int index2 = 0; int length2 = field2 == null ? 0 : field2.Length; while (true) { while (index1 < length1 && field1[index1] == null) { index1++; } while (index2 < length2 && field2[index2] == null) { index2++; } bool atEndOf1 = index1 >= length1; bool atEndOf2 = index2 >= length2; if (atEndOf1 && atEndOf2) { return true; } else if (atEndOf1 != atEndOf2) { return false; } else if (!StructuralComparisons.StructuralEqualityComparer.Equals(field1[index1], field2[index2])) { return false; } index1++; index2++; } }
private void DrawText(int x1, int y1, int s, bool e_or_n, Graphics g) { Color oldColor = g.Color; g.SetPaintMode(); g.Color = m_FontColor ?? Color.Black; string st; if (e_or_n) { Edge e = m_edges[s].m_edge; for (int noa = _NUM; (st = e.GetLine(noa)) != null; noa++) { g.DrawString(st, (m_edges[s].m_width - m_fontSize.StringWidth(st)) / _NUM + x1, y1 + (noa + _NUM) * m_fontSize.GetHeight()); } } else { Node e = m_nodes[s].m_node; for (int noa = _NUM; (st = e.GetLine(noa)) != null; noa++) { g.DrawString(st, (m_nodes[s].m_width - m_fontSize.StringWidth(st)) / _NUM + x1, y1 + (noa + _NUM) * m_fontSize.GetHeight()); } } g.Color = oldColor; }
public void Update(List<Race> races) { if (currentRace == null) { return; } if (races.Contains(currentRace)) { SetRace(races[races.IndexOf(currentRace)]); } }
public bool Required() { return _parameterMetadata.Contains(Metadata.REQUIRED); }
protected void SendDataToReceiver(ResultReceiver receiver, Intent originalIntent, object data) { if (receiver != null && data != null) { Bundle bundle = new Bundle(); bundle.PutParcelable(ServiceReceiver.EXTRA_ORIGINAL_INTENT, originalIntent); bundle.PutSerializable(ServiceReceiver.EXTRA_DATA, data); receiver.Send(ServiceReceiver.STATUS_DATA, bundle); } }
private static object MatchOrReplace(Context cx, Scriptable scope, Scriptable thisObj, object[] args, RegExpImpl reImpl, GlobData data, bool forceFlat) { NativeRegExp re; string str = ScriptRuntime.ToString(thisObj); data.str = str; Scriptable topScope = ScriptableObject.GetTopLevelScope(scope); if (args.Length == _NUM) { object compiled = NativeRegExp.CompileRE(cx, _STR, _STR, _BOOL); re = new NativeRegExp(topScope, compiled); } else if (args[_NUM] is NativeRegExp) { re = (NativeRegExp)args[_NUM]; } else { string src = ScriptRuntime.ToString(args[_NUM]); string opt; if (data.optarg < args.Length) { args[_NUM] = src; opt = ScriptRuntime.ToString(args[data.optarg]); } else { opt = null; } object compiled = NativeRegExp.CompileRE(cx, src, opt, forceFlat); re = new NativeRegExp(topScope, compiled); } d
public void TableSwitch(int[] keys, TableSwitchGenerator generator, bool useTable) { for (int i = _NUM; i < keys.Length; ++i) { if (keys[i] < keys[i - _NUM]) { throw new ArgumentException(_STR); } } Label def = newLabel(); Label end = newLabel(); if (keys.Length > _NUM) { int len = keys.Length; int min = keys[_NUM]; int max = keys[len - _NUM]; int range = max - min + _NUM; if (useTable) { Label[] labels = new Label[range]; Array.Fill(labels, def); for (int i = _NUM; i < len; ++i) { labels[keys[i] - min] = newLabel(); } mv.VisitTableSwitchInsn(min, max, def, labels); for (int i = _NUM; i < range; ++i) { Label label = labels[i]; if (label != def) { Mark(label); generator.GenerateCase(i + min, end); } }
public void Print(TextWriter output, int w, int d) { var format = new NumberFormatInfo { NumberDecimalDigits = d, NumberGroupSeparator = _BOOL ? "," : "", NumberDecimalSeparator = "." }; format.NumberDecimalDigits = d; Print(output, format, w + _NUM); }
public static HashSet<E> NewSetFromMap<E>(Dictionary<E, bool> map) { if (map.Count == 0) { return new HashSet<E>(map.Keys); } throw new ArgumentException(); }
public void RemoveBiomeType(BiomeDictionary.Type type) { List<BiomeGenBase> entryList = new List<BiomeGenBase>(BiomeDictionary.GetBiomesForType(type)); foreach (BiomeGenBase biome in entryList) { var iterator = allowedBiomes.GetEnumerator(); while (iterator.MoveNext()) { if (BiomeDictionary.AreBiomesEquivalent(iterator.Current.Biome, biome)) { iterator.Remove(); } } } }
static SizeRequirements CalculateTiledRequirements(LayoutIterator iter, SizeRequirements r) { long minimum = _NUM; long maximum = _NUM; long preferred = _NUM; int lastMargin = _NUM; int totalSpacing = _NUM; int n = iter.GetCount(); for (int i = _NUM; i < n; i++) { iter.SetIndex(i); int margin0 = lastMargin; int margin1 = (int)iter.GetLeadingCollapseSpan(); totalSpacing += Math.Max(margin0, margin1); preferred += (int)iter.GetPreferredSpan(_NUM); minimum += iter.GetMinimumSpan(_NUM); maximum += iter.GetMaximumSpan(_NUM); lastMargin = (int)iter.GetTrailingCollapseSpan(); } totalSpacing += lastMargin; totalSpacing += _NUM * iter.GetBorderWidth(); minimum += totalSpacing; preferred += totalSpacing; maximum += totalSpacing; if (r == null) { r = new SizeRequirements(); } r.minimum = (minimum > int.MaxValue) ? int.MaxValue : (int)minimum; r.preferred
public static void WritePaddedInteger(TextWriter outWriter, long value, int size) { int intValue = (int)value; if (intValue == value) { WritePaddedInteger(outWriter, intValue, size); } else if (size <= _NUM) { outWriter.Write(value.ToString()); } else { if (value < _NUM) { outWriter.Write(_STR); if (value != long.MinValue) { value = -value; } else { for (; size > _NUM; size--) { outWriter.Write(_STR); } outWriter.Write(_STR); return; } } int digits = (int)(Math.Log(value) / LOG_10) + _NUM; for (; size > digits; size--) { outWriter.Write(_STR); } outWriter.Write(value.ToString()); } }
private static LDAPFilter CreateOrFilter(FilterSet filterSet) { var list = filterSet.GetFilterGroup(); var filters = new List<RawFilter>(list.Count); foreach (var filter in list) { filters.Add(CreateFilter(filter)); } return LDAPFilter.CreateOrFilter(filters); }
private void SendBlob(string index, byte[] blob) { SendInstruction(new GuacamoleInstruction(_STR, index, Convert.ToBase64String(blob))); }
protected void DefineLabels() { labelsValues = CalcLabels(); if (handleValues) labels = GetLabelsFromValues(); else labels = GetLabelsFromData(); nLabels = labels.Count; }
public static HashSet<Interval> MergeIntervalToSet(HashSet<Interval> intervals, Interval intervalToMerge) { var copyOfOriginalSet = new HashSet<Interval>(intervals); copyOfOriginalSet.Add(intervalToMerge); return MergeIntervalSet(copyOfOriginalSet); }
public static string DropWhile(GString self, Func<string, bool> condition) { return DropWhile(self.ToString(), condition); }
public void AddNode(TopologicalNode node) { nodeList.Add(node); }
public void PrintText(string text) { view.Print(text, text.EndsWith(_STR)); foreach (var actionDelegate in actionDelegates) { actionDelegate.OnConsoleOutput(this); } }
public override void Trim() { if (counter < x.Length) { int[] y = new int[counter]; Array.Copy(x, _NUM, y, _NUM, counter); x = y; ResizeValues(counter); } }
private void Divide(int[] idx, double[] data, List<int[]> ret, int start, int end, int depth) { if (depth == _NUM) { int[] a = new int[end - start]; Array.Copy(idx, start, a, 0, end - start); Array.Sort(a); ret.Add(a); return; } int count = end - start; if (count == _NUM) { for (int j = _NUM << depth; j > _NUM; --j) { ret.Add(new int[_NUM]); } return; } double m = _NUM; for (int i = start; i < end; i++) { m += data[i]; } m /= count; int pos = Array.BinarySearch(data, start, end, m); if (pos >= _NUM) { int opt = (start + end) >> _NUM; while (data[pos] == m) { if (pos < opt) { pos++; } else if (pos > opt) { pos--; } else {
void AssertThreadsStayAlive(long millis, params Thread[] threads) { try { Thread.Sleep((int)millis); foreach (Thread thread in threads) { Debug.Assert(thread.IsAlive, "Thread is not alive"); } } catch (ThreadInterruptedException) { ThreadFail(_STR); } }
public AbstractWorkerManager(string id) { _id = id; _status = new WorkerManagerStatus(); SetExecutionMode(EXECUTION_MODE.NON_SERIAL); SetupExecutor(); }
public override void ApplyInline(double[] data, int pos, int len) { int i; double[] dataOut = new double[len]; if (len > real.Length) { throw new ArgumentException(_STR); } int middle = len / _NUM + len % _NUM; Array.Copy(data, _NUM, dataOut, _NUM, len); Array.Copy(dataOut, pos + middle, real, _NUM, len - middle); Array.Copy(dataOut, pos, real, real.Length - middle, middle); if (real.Length > len) { Array.Fill(real, _NUM, len - middle, real.Length - middle); } Array.Fill(imag, _NUM); FFT.Transform(real, imag, _BOOL); Process(real, imag); FFT.Transform(real, imag, _BOOL); Array.Copy(real, _NUM, dataOut, pos + middle, len - middle); Array.Copy(real, real.Length - middle, dataOut, pos, middle); double origAvgEnergy = SignalProcUtils.GetAverageSampleEnergy(data, len); for (i = _NUM; i < l
[OnMessage] public void OnMessage(string message, Session session) { CallInternal(_STR, session, message); }
public bool InsertVia(BrdViaInfo pViaInfo, PlaPointInt pLocation, NetNosList pNetNoArr, int pTraceClearanceClassNo, int[] pTracePenHalfwidthArr, int pMaxRecursionDepth, int pMaxViaRecursionDepth, int pPullTightAccuracy, int pPullTightTimeLimit) { ShoveFailClear(); ChangedAreaClear(); bool rOk = shoveViaAlgo.ShoveViaInsert(pViaInfo, pLocation, pNetNoArr, pTraceClearanceClassNo, pTracePenHalfwidthArr, pMaxRecursionDepth, pMaxViaRecursionDepth); if (!rOk) return _BOOL; NetNosList optNetNoArr = pMaxRecursionDepth <= _NUM ? pNetNoArr : NetNosList.EMPTY; TimeLimitStoppable tLimit = new TimeLimitStoppable(s_PREVENT_ENDLESS_LOOP); ChangedAreaOptimize(optNetNoArr, pPullTightAccuracy, null, tLimit, null); return _BOOL; }
bool ThresholdExceeded(HashSet<IBindingSet> distinctProjectionBuffer, int distinctProjectionBufferThreshold, List<IBindingSet> incomingBindingsBuffer, int incomingBindingsBufferThreshold) { return distinctProjectionBuffer.Count >= distinctProjectionBufferThreshold || incomingBindingsBuffer.Count >= incomingBindingsBufferThreshold; }
public static byte[] ToByteArray(string str) { int len = str.Length; string[] newStrArray = str.Split(new[] { _STR }, StringSplitOptions.None); byte[] ret = new byte[newStrArray.Length]; for (int i = _NUM; i < newStrArray.Length; i++) { int tmp = int.Parse(newStrArray[i]); ret[i] = (byte)(tmp - _NUM); } return ret; }
public static bool NullEquals(string s1, string s2) { return (s1 == null ? s2 == null : s1.Equals(s2)); }
private char[] FormatDigits(double x) { string sx; int i, j, k; int n1In; int n2In; int expon = _NUM; bool minusSign = _BOOL; if (x > _NUM) { sx = x.ToString(); } else if (x < _NUM) { sx = (-x).ToString(); minusSign = _BOOL; } else { sx = x.ToString(); if (sx[0] == _STR) { minusSign = _BOOL; sx = sx.Substring(1); } } int ePos = sx.IndexOf(_STR); int rPos = sx.IndexOf(_STR); n1In = rPos != -_NUM ? rPos : ePos != -_NUM ? ePos : sx.Length; if (rPos != -_NUM) { n2In = ePos != -_NUM ? ePos - rPos - _NUM : sx.Length - rPos - _NUM; } else { n2In = _NUM; } i
public int MaxLength() { FontMetrics fm = this.GetFontMetrics(this.GetFont()); int m = _NUM; int end = items.Count; for (int i = _NUM; i < end; i++) { int l = fm.StringWidth((string)items[i]); m = Math.Max(m, l); } return m; }
public void Write(char[] chars, int start, int length) { if (m_writer != null) { m_writer.Write(chars, start, length); } int lengthx3 = (length << _NUM) + length; if (lengthx3 >= buf_length) { FlushBuffer(); SetBufferSize(_NUM * lengthx3); } if (lengthx3 > buf_length - count) { FlushBuffer(); } int n = length + start; for (int i = start; i < n; i++) { char c = chars[i]; if (c < _NUM) { buf[count++] = (byte)(c); } else if (c < (1 << _NUM)) { buf[count++] = (byte)(_NUM + (c >> _NUM)); buf[count++] = (byte)(_NUM + (c & ((1 << _NUM) - 1))); } else { buf[count++] = (byte)(_NUM + (c >> (_NUM * 2))); buf[count++] = (byte)(_NUM + ((c >> _NUM) &
public PlaPointInt RoundToTheLeft(PlaDirection pDir) { PlaPointFloat dir = pDir.ToFloat(); double roundedX; if (dir.vY > _NUM) { roundedX = Math.Floor(vX); } else if (dir.vY < _NUM) { roundedX = Math.Ceiling(vX); } else { roundedX = Math.Round(vX); } double roundedY; if (dir.vX > _NUM) { roundedY = Math.Ceiling(vY); } else if (dir.vX < _NUM) { roundedY = Math.Floor(vY); } else { roundedY = Math.Round(vY); } return new PlaPointInt(roundedX, roundedY); }
protected HttpHost DetermineProxy(HttpHost target, HttpRequest request, HttpContext context) { ProxySelector psel = this.proxySelector; if (psel == null) psel = ProxySelector.GetDefault(); if (psel == null) return null; Uri targetURI; try { targetURI = new Uri(target.ToUri()); } catch (UriFormatException usx) { throw new HttpException(_STR + target, usx); } List<Proxy> proxies = psel.Select(targetURI); Proxy p = ChooseProxy(proxies, target, request, context); HttpHost result = null; if (p.Type == ProxyType.Http) { if (!(p.Address is IPEndPoint)) { throw new HttpException(_STR + p.Address); } var isa = (IPEndPoint)p.Address; result = new HttpHost(GetHost(isa), isa.Port); } return result; }
private void AddReference(int sourcePosition, int referencePosition) { if (srcAndRefPositions == null) { srcAndRefPositions = new int[_NUM]; } if (referenceCount >= srcAndRefPositions.Length) { int[] a = new int[srcAndRefPositions.Length + _NUM]; Array.Copy(srcAndRefPositions, _NUM, a, _NUM, srcAndRefPositions.Length); srcAndRefPositions = a; } srcAndRefPositions[referenceCount++] = sourcePosition; srcAndRefPositions[referenceCount++] = referencePosition; }
public object[] ToArray() { return elementData.Take(size).ToArray(); }
public bool IsRunning() { return mThread != null && mThread.IsAlive; }
public static byte[] UnwrapVCF(FileInfo sourceFile, FileInfo tmpFile) { ZipArchiveInputStream inStream = null; FileStream fileStream = null; string hmacString = null; try { inStream = new ZipArchiveInputStream(new FileStream(sourceFile.FullName, FileMode.Open)); inStream.GetNextEntry(); // Read the first entry fileStream = new FileStream(tmpFile.FullName, FileMode.Create); inStream.CopyTo(fileStream); // Copy the input stream to the temporary file inStream.GetNextEntry(); // Read the next entry hmacString = inStream.Entry.Name; // Get the name of the current entry return Utils.HexToBytes(hmacString); // Convert hex string to byte array } catch (StringIndexOutOfRangeException e) { Logger.Error($"{_STR}{hmacString}{_STR}", e); throw; } catch (Exception e) { Logger.Error(_STR, e); throw; } finally { fileStream?.Flush(); fileStream?.Close(); inStream?.Close(); } }
public bool RegisterUser(string username, string password, string uri) { if (CheckUsernameExists(username)) { return false; } StoreUser(username, password, uri); return true; }
public void SELECT(params string[] columns) { if (columns == null) { throw new ArgumentNullException(nameof(columns), "Columns cannot be null."); } if (columns.Length == _NUM) { throw new ArgumentException("Invalid number of columns.", nameof(columns)); } StringBuilder builder = new StringBuilder(_STR); for (int i = _NUM; i < columns.Length; i++) { builder.Append(columns[i]); if (i != (columns.Length - _NUM)) { builder.Append(_STR); } } sql = builder.ToString(); }
public static MBeanInfo TestCompliance(Type baseClass, Type mbeanInterface) { if (mbeanInterface == null) { mbeanInterface = GetStandardMBeanInterface(baseClass); } ReflectUtil.CheckPackageAccess(mbeanInterface); var introspector = StandardMBeanIntrospector.Instance; return GetClassMBeanInfo(introspector, baseClass, mbeanInterface); }
public static HashSet<string> ToStringSet(TemplateSequenceModel seqModel) { HashSet<string> set = new HashSet<string>(); for (int i = _NUM; i < seqModel.Size(); i++) { set.Add(GetAsStringNonEscaping((TemplateScalarModel)seqModel.Get(i))); } return set; }
public JKSSignatureToken(Stream ksStream, string ksPassword) { try { keyStore = KeyStore.GetInstance(KeyStore.DefaultType); password = (ksPassword == null) ? null : ksPassword.ToCharArray(); keyStore.Load(ksStream, password); } catch (Exception e) { throw new DSSException(e); } finally { if (ksStream != null) { try { ksStream.Close(); } catch (IOException e) { logger.Error(e.Message, e); } } } }
protected virtual void WriteLocation(string loc) { hadAnnotations |= (loc != null); locOut.WriteObject(loc); }
protected int Offset(int vtableOffset) { int vtable = bb_pos - bb.GetInt(bb_pos); return vtableOffset < bb.GetShort(vtable) ? bb.GetShort(vtable + vtableOffset) : _NUM; }
public static string SelectText(XPathExpression expr, XmlNode context) { try { return (string)expr.Evaluate(context); } catch (XPathExpressionException e) { throw new XmlException(e.Message, e); } }
public static HttpHeaders ToArmeria(io.netty.handler.codec.http.HttpHeaders inHeaders) { if (inHeaders.IsEmpty()) { return HttpHeaders.EMPTY_HEADERS; } var out = new DefaultHttpHeaders(_BOOL, inHeaders.Size()); ToArmeria(inHeaders, out); return out; }
public static int CalculateRMSLevel(short[] audioData, int numframes) { long lSum = 0; int numread = 0; foreach (short s in audioData) { lSum += s; numread++; if (numread == numframes) break; } double dAvg = (double)lSum / numframes; double sumMeanSquare = 0; numread = 0; foreach (short anAudioData in audioData) { sumMeanSquare += Math.Pow(anAudioData - dAvg, 2); numread++; if (numread == numframes) break; } double averageMeanSquare = sumMeanSquare / numframes; return (int)(Math.Pow(averageMeanSquare, 0.5) + 0); }
private void InitProgram() { GL.UseProgram(this.program); vec3ArrayUniform = GL.GetUniformLocation(this.program, _STR); chosenUniform = GL.GetUniformLocation(this.program, _STR); GL.UseProgram(_NUM); }
public bool EngineContainsAlias(string alias) { return entries.ContainsKey(alias.ToLower(System.Globalization.CultureInfo.InvariantCulture)); }
public void InvertSelectedRelations() { var selection = viewer.GetSelection(); if (!(selection is IStructuredSelection structuredSelection)) { return; } var inverse = ComputeInverseRelations(GetTableRelations(), structuredSelection); var nextSelection = new StructuredSelection(inverse.ToArray()); viewer.SetSelection(nextSelection, _BOOL); }
public void TestFloatValueNeg() { string a = _STR; decimal aNumber = decimal.Parse(a); float result = -_NUM; Assert.True(aNumber == (decimal)result); }
public void BindKeyStore(KeyStoreService keyStoreService) { this.keyStore = keyStoreService; }
protected void DrawConnectorCenters(Canvas c) { List<Connection> connections = mBlock.GetAllConnections(); Paint paint = new Paint(); paint.SetStyle(Paint.Style.FILL); for (int i = _NUM; i < connections.Count; i++) { Connection conn = connections[i]; if (conn.InDragMode()) { if (conn.IsConnected()) { paint.SetColor(Color.RED); } else { paint.SetColor(Color.MAGENTA); } } else { if (conn.IsConnected()) { paint.SetColor(Color.GREEN); } else { paint.SetColor(Color.CYAN); } } mTempWorkspacePoint.Set(conn.GetPosition().x - mBlock.GetPosition().x, conn.GetPosition().y - mBlock.GetPosition().y); mHelper.WorkspaceToVirtualViewDelta(mTempWorkspacePoint, mTempConnectionPosition); if (mHelper.UseRtl()) { mTempConnectionPosition.x += mBlockViewSize.x; } c.DrawCircle(mTempConnectionPosition.x, mTempConnectionPosition.y, _NUM, paint
private static bool IsMerge(InstructionHandle handle) { if (handle.HasTargeters()) { InstructionTargeter[] targeterList = handle.GetTargeters(); foreach (InstructionTargeter targeter in targeterList) { if (targeter is BranchInstruction) { return true; } } } return false; }
private void LoadTrustManager() { lock (this) { try { var tmf = TrustManagerFactory.GetInstance(X509_ALGORITHM); tmf.Init(keystore); foreach (var trustManager in tmf.GetTrustManagers()) { if (trustManager is X509TrustManager x509TrustManager) { defaultViPRTrustManager = x509TrustManager; log.Debug(_STR); break; } } log.Info(_STR, defaultViPRTrustManager.GetAcceptedIssuers().Length); } catch (GeneralSecurityException e) { log.Error(e.Message, e); } } }
private bool IsOutsideDocElem() { return m_docFrag == null && m_elemStack.Count == _NUM && (m_currentNode == null || m_currentNode.NodeType == NodeType.Document); }
public ThreadPool(string name, int poolSize) { this.poolSize = poolSize; this.poolName = name; taskList = new LinkedList<IRunnable>(); threads = new WorkerThread[poolSize]; CreateThreads(); }
private static object InvokeOrDie(MethodInfo method, object obj, params object[] parameters) { try { return method.Invoke(obj, parameters); } catch (TargetInvocationException e) { var cause = e.InnerException; if (cause is RuntimeException) { throw (RuntimeException)cause; } else if (cause is Exception) { throw new Exception(cause.Message, cause); } else { throw new Exception("An error occurred", cause); } } }
public void Clear() { this.normal = null; this.depth = _NUM; }
public string Name() { return theName; }
public void AddHelperTextColor(int color) { if (!helperTextColors.Contains(color)) { helperTextColors.Add(color); VerifyPasswordStrength(); } }
public void AdvanceToNextMinute() { }
public ListBasedTokenStream(AttributeSource attributeSource, List<AttributeSource> tokens) : base(attributeSource.GetAttributeFactory()) { this.tokens = tokens; AddAttributes(attributeSource); }
[SuppressMessage("Warning", "STR")] protected Type ResolveClass(ObjectStreamClass classDesc) { string cname = classDesc.GetName(); return ClassFinder.ResolveClass(cname, this.loader); }
public Dictionary<string, object> MakeValid(Dictionary<string, object> source, string mode) { return MakeValid(source, mode, _BOOL, null); }
public static int Find(byte[] a, int fromIndex, int toIndex, byte[] key) { int result = -1; int sublen = key.Length; int maxpos, first, sp = 0; maxpos = Math.Min(toIndex, a.Length) - sublen; for (first = fromIndex; sp != sublen && first <= maxpos; first++) { first = Array.IndexOf(a, key[0], first, maxpos - first + 1); if (first == -1 || first > maxpos) { break; } for (sp = 0; sp < sublen; sp++) { if (a[first + sp] != key[sp]) { sp = sublen; // break the loop } } } if (sublen == 0) { result = -1; } else if (sp == sublen) { result = first - 1; } return result; }
private void AddSyntheticEdge(Collection<GraphEdge> result, GraphEdge original, GraphNode head, GraphNode tail) { result.Add(new GraphEdge(head, tail, original.GetRelation())); }
public void AddStates(State[] s) { for (int i = _NUM; i < s.Length; i++) { states.Add(s[i]); } }
private synchronized void ReadObject(System.IO.Stream s) { using (var reader = new System.IO.BinaryReader(s)) { // Assuming a method to read the default object state // similar to Java's defaultReadObject() DefaultReadObject(reader); Init(GetMask(actions)); } }
private static byte[] WindowsRegEnumKeyEx1(int hKey, int subKeyIndex, int maxKeyLength) { byte[] result = WindowsRegEnumKeyEx(hKey, subKeyIndex, maxKeyLength); if (result != null) { return result; } else { long sleepTime = INIT_SLEEP_TIME; for (int i = _NUM; i < MAX_ATTEMPTS; i++) { try { Thread.Sleep((int)sleepTime); } catch (ThreadInterruptedException) { return result; } sleepTime *= _NUM; result = WindowsRegEnumKeyEx(hKey, subKeyIndex, maxKeyLength); if (result != null) { return result; } } } return result; }
public Tasker AddTask(Task task) { tasks.Add(task); lastAddedTask = task; return this; }
private void InitComputeProgram() { GL.UseProgram(computeProgram); IntBuffer workGroupSize = BufferUtils.CreateIntBuffer(_NUM); GL.GetProgramiv(computeProgram, GL.GL_COMPUTE_WORK_GROUP_SIZE, workGroupSize); workGroupSizeX = workGroupSize.Get(_NUM); workGroupSizeY = workGroupSize.Get(_NUM); timeUniform = GL.GetUniformLocation(computeProgram, _STR); blendFactorUniform = GL.GetUniformLocation(computeProgram, _STR); bounceCountUniform = GL.GetUniformLocation(computeProgram, _STR); IntBuffer params = BufferUtils.CreateIntBuffer(_NUM); int loc = GL.GetUniformLocation(computeProgram, _STR); GL.GetUniformiv(computeProgram, loc, params); framebufferImageBinding = params.Get(_NUM); loc = GL.GetUniformLocation(computeProgram, _STR); GL.GetUniformiv(computeProgram, loc, params); worldPositionImageBinding = params.Get(_NUM); loc = GL.GetUniformLocation(computeProgram, _STR); GL.GetUniformiv(computeProgram, loc, params); worldNormalImageBinding = params.Get(_NUM
public void Sort() { ThrowIfImmutable(); if (!sorted) { Array.Sort(values, _NUM, size); sorted = true; } }
public static object ObjectFromByteBuffer(byte[] buffer) { if (buffer == null) return null; using (var inStream = new MemoryStream(buffer)) using (var in = new ObjectInputStreamExt(inStream)) { object retval = in.ReadObject(); return retval; } }
public string GenerateGroupName(string policyName, HashSet<string> existingGroupNames, string parentGroupName) { int count = _NUM; string format = null; while (count <= existingGroupNames.Count) { if (_NUM == count) { format = string.Format(_STR, policyName); } else { format = string.Format(_STR, policyName, count); } string generatedGroupName = Generate(parentGroupName, format, SmisConstants.MASK_NAME_DELIMITER, SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH); if (!existingGroupNames.Contains(generatedGroupName)) { return generatedGroupName; } count++; } return Generate(parentGroupName, string.Format(_STR, policyName), SmisConstants.MASK_NAME_DELIMITER, SmisConstants.MAX_STORAGE_GROUP_NAME_LENGTH); }
public static void AssertColumnTypes(SqlDataReader reader, int[] expectedTypes) { int actualCols = reader.FieldCount; if (expectedTypes.Length != actualCols) { throw new ArgumentException("Expected types length does not match the actual column count."); } for (int i = 0; i < actualCols; i++) { SqlDbType actualType = reader.GetFieldType(i); if ((int)actualType != expectedTypes[i]) { throw new ArgumentException($"Column type mismatch at index {i}: expected {expectedTypes[i]}, actual {actualType}"); } } }
public DefaultActionGroup(params AnAction[] actions) : this(actions.ToList()) { }
public int Add(T dl, int row) { _list.Insert(row, dl); FireTableRowsInserted(row, row); return row; }
private void PushTerm(BytesRef text) { int limit = Math.Min(lastTerm.Length, text.Length); int pos = _NUM; while (pos < limit && lastTerm.ByteAt(pos) == text.Bytes[text.Offset + pos]) { pos++; } for (int i = lastTerm.Length - _NUM; i >= pos; i--) { int prefixTopSize = pending.Size() - prefixStarts[i]; if (prefixTopSize >= minItemsInBlock) { WriteBlocks(i + _NUM, prefixTopSize); prefixStarts[i] -= prefixTopSize - _NUM; } } if (prefixStarts.Length < text.Length) { prefixStarts = ArrayUtil.Grow(prefixStarts, text.Length); } for (int i = pos; i < text.Length; i++) { prefixStarts[i] = pending.Size(); } lastTerm.CopyBytes(text); }
public NumericLiteral(object x) { if (x is Number) { m_number = (Number)x; m_type = TypeLib.GetPrimitiveType(m_number.GetType()); } else { throw new ArgumentException(_STR); } }
private bool IsMineshafterPresent() { try { Type.GetType(_STR); return _BOOL; } catch { return _BOOL; } }
protected override void OnMeasure(int widthMeasureSpec, int heightMeasureSpec) { int widthMode = MeasureSpec.GetMode(widthMeasureSpec); int heightMode = MeasureSpec.GetMode(heightMeasureSpec); int maxWidth = MeasureSpec.GetSize(widthMeasureSpec); int maxHeight = MeasureSpec.GetSize(heightMeasureSpec); if (widthMode == MeasureSpecMode.Unspecified) maxWidth = int.MaxValue; if (heightMode == MeasureSpecMode.Unspecified) maxHeight = int.MaxValue; int paddingLeft = PaddingLeft; int paddingTop = PaddingTop; int paddingRight = PaddingRight; int paddingBottom = PaddingBottom; int maxRightBound = maxWidth - paddingRight; int maxBottomBound = maxHeight - paddingBottom; int left, top, right, bottom; int rightBound = paddingLeft; int maxRightNoPadding = rightBound; int bottomBound; int lastMaxBottom = paddingTop; int maxBottom = lastMaxBottom; int childWidth, childHeight; int lineStartIndex = 0; int lineEndIndex; rectList.Clear(); int childCount = ChildCount; fo
private bool CompareAndSetHead(Node update) { return Unsafe.CompareAndSwapObject(this, headOffset, null, update); }
private void EnsureBufferCapacity(int desiredCapacity) { int capacity = pixelBuffer.Length; while (capacity < desiredCapacity) { capacity *= _NUM; } if (capacity > pixelBuffer.Length) { pixelBuffer = new byte[capacity]; } }
protected HashSet<DependencyKind> RemoveDependency(Node n) { HashSet<DependencyKind> removedKinds = new HashSet<DependencyKind>(); foreach (DependencyKind dk in Enum.GetValues(typeof(DependencyKind))) { if (!deps.TryGetValue(dk, out HashSet<Node> depsByKind)) continue; if (depsByKind.Remove(n)) { removedKinds.Add(dk); } } return removedKinds; }
public static ConcurrentDictionary<K, V> NewConcurrentMapWithAggressiveConcurrency<K, V>() { return new ConcurrentDictionary<K, V>(Environment.ProcessorCount, _NUM, aggressiveConcurrencyLevel); }
public override bool ConnectionAllowed(string eventName) { if (m_listenee != null || !eventName.Equals(_STR)) { return _BOOL; } return _BOOL; }
protected char SkipAllWhitespace(TextReader reader) { char c; do { c = (char)reader.Read(); } while (char.IsWhiteSpace(c) && c != (char)-_NUM); return c; }
public IEnumerator<Attribute> EnumerateLiteralResultAttributes() { return m_avts == null ? null : m_avts.GetEnumerator(); }
public Dictionary<string, string> Parse(string str, char separator) { if (str == null) { return new Dictionary<string, string>(); } return Parse(str.ToCharArray(), separator); }
public PriorityQueue(IEnumerable<E> collection) { if (collection is PriorityQueue<E> priorityQueue) { GetFromPriorityQueue(priorityQueue); } else if (collection is SortedSet<E> sortedSet) { GetFromSortedSet(sortedSet); } else { InitSize(collection); AddAll(collection); } }
private string ResourceId() { return string.IsNullOrEmpty(subSchemaPath) ? null : LastSchemaNodeName(); }
private long AcquireWrite(bool interruptible, long deadline) { WNode node = null, p; for (int spins = -_NUM;;) { long m, s, ns; if ((m = (s = state) & ABITS) == _NUM) { if (U.CompareAndSwapLong(this, STATE, s, ns = s + WBIT)) return ns; } else if (spins < _NUM) spins = (m == WBIT && wtail == whead) ? SPINS : _NUM; else if (spins > _NUM) { if (LockSupport.NextSecondarySeed() >= _NUM) --spins; } else if ((p = wtail) == null) { WNode hd = new WNode(WMODE, null); if (U.CompareAndSwapObject(this, WHEAD, null, hd)) wtail = hd; } else if (node == null) node = new WNode(WMODE, p); else if (node.prev != p) node.prev = p; else if (U.CompareAndSwapObject(this, WTA
public override bool IsInitial() { return init; }
public static string Denormalize(string input) { if (lineSeparator == null) { StringWriter sw = new StringWriter(); try { using (BufferedWriter bw = new BufferedWriter(sw)) { bw.NewLine(); bw.Flush(); lineSeparator = sw.ToString(); } } catch (IOException) { lineSeparator = string.Empty; } } int len = input.Length; if (len < 1) // Assuming _NUM is 1 { return input; } StringBuilder sb = new StringBuilder((1 * len) / 1); // Assuming _NUM is 1 int i = 1; // Assuming _NUM is 1 CharSequence cs = input; // You may need to handle GString if it has a specific implementation while (i < len) { char ch = cs[i++]; switch (ch) { case '\r': sb.Append(lineSeparator); if (i < len && cs[i] == '\n') { ++i; } break; case '\n': sb.Append(lineSeparator
public static void PerformSaveAs(string schemaPrefixFileName, string selFilePath, ContainerConfig containerConfig) { try { string fileWithDefaultConfiguration = CreateContainerSchemaFile(schemaPrefixFileName, selFilePath); UpdateFile(containerConfig, fileWithDefaultConfiguration, schemaPrefixFileName); } catch (Exception e) { Console.WriteLine(e); // Print the exception details } }
public bool IsAborted() { return isAborted.Value; }
public void Append(int key, E value) { if (mSize != _NUM && key <= mKeys[mSize - _NUM]) { Put(key, value); return; } if (mGarbage && mSize >= mKeys.Length) { Gc(); } int pos = mSize; if (pos >= mKeys.Length) { int n = IdealIntArraySize(pos + _NUM); int[] nkeys = new int[n]; E[] nvalues = new E[n]; Array.Copy(mKeys, _NUM, nkeys, _NUM, mKeys.Length); Array.Copy(mValues, _NUM, nvalues, _NUM, mValues.Length); mKeys = nkeys; mValues = nvalues; } mKeys[pos] = key; mValues[pos] = value; mSize = pos + _NUM; }
public void TestSkip() { byte[] data = new byte[_NUM * _NUM]; byte[] gzipped = GZIPOutputStreamTest.Gzip(data); using (GZipInputStream inStream = new GZipInputStream(new MemoryStream(gzipped))) { long totalSkipped = _NUM; long count; do { count = inStream.Skip(long.MaxValue); totalSkipped += count; } while (count > _NUM); Assert.AreEqual(data.Length, totalSkipped); } }
private void Support_TestWebData(string path, string type) { FileInfo file = new FileInfo(path); long testLength = file.Length; long testLastModified = file.LastWriteTime.Ticks; string testName = file.Name; string testType = type; bool testDir = file.Attributes.HasFlag(FileAttributes.Directory); var outStream = new MemoryStream(); FileStream inStream = null; try { inStream = new FileStream(file.FullName, FileMode.Open, FileAccess.Read); byte[] buffer = new byte[_NUM]; // Assuming _NUM is defined elsewhere int bytesRead; while ((bytesRead = inStream.Read(buffer, 0, buffer.Length)) > 0) { outStream.Write(buffer, 0, bytesRead); } outStream.Flush(); byte[] test0Data = outStream.ToArray(); bool test0DataAvailable = true; // Assuming _BOOL implies true } catch (Exception e) { Console.WriteLine(e); } finally { if (inStream != null) inStream.Close(); if (outStream != null) outStream.Cl
public static void Print(bool x) { Console.Write(x); Console.Out.Flush(); }
public IpcSharedMemorySpace(string tokFileName, int writerPid, int readerPid, int size, bool reader, IgniteLogger parent) { if (size <= _NUM) throw new ArgumentException(_STR); log = parent.GetLogger(typeof(IpcSharedMemorySpace)); opSize = size; shmemPtr = IpcSharedMemoryUtils.AllocateSystemResources(tokFileName, size, DEBUG && log.IsDebugEnabled()); shmemId = IpcSharedMemoryUtils.SharedMemoryId(shmemPtr); semId = IpcSharedMemoryUtils.SemaphoreId(shmemPtr); isReader = reader; this.tokFileName = tokFileName; this.readerPid = readerPid; this.writerPid = writerPid; if (DEBUG && log.IsDebugEnabled()) log.Debug(_STR + this); }
public override void Close() { try { if (connection != null) { connection.Close(); } } catch (SqlException e) { Console.WriteLine(e); } }
public Version AddQualifier(string qualifier) { List<string> newQualifiers = new List<string>(this.qualifiers); newQualifiers.Add(qualifier); return new Version(major, minor, patch, newQualifiers.ToArray()); }
public int LoadSigned16(int addr) { return LoadSigned16(addr, AccessSource.Code); }
public static string ArrayToHexString(byte[] array) { return ArrayToHexString(array, _NUM, array.Length); }
public static void UnregisterBaggageHandler(BaggageHandler handler) { handlers.Remove(handler); }
public DefaultHeatMapDataset(int xSamples, int ySamples, double minX, double maxX, double minY, double maxY) { if (xSamples < _NUM) { throw new ArgumentException(_STR); } if (ySamples < _NUM) { throw new ArgumentException(_STR); } if (double.IsInfinity(minX) || double.IsNaN(minX)) { throw new ArgumentException(_STR); } if (double.IsInfinity(maxX) || double.IsNaN(maxX)) { throw new ArgumentException(_STR); } if (double.IsInfinity(minY) || double.IsNaN(minY)) { throw new ArgumentException(_STR); } if (double.IsInfinity(maxY) || double.IsNaN(maxY)) { throw new ArgumentException(_STR); } this.xSamples = xSamples; this.ySamples = ySamples; this.minX = minX; this.maxX = maxX; this.minY = minY; this.maxY = maxY; this.zValues = new double[xSamples][]; for (in
public static void AssertEqualsAnyOrder(EventBean[][] expected, EventBean[][] actual) { if (CompareArraySize(expected, actual)) { return; } int numMatches = 0; bool[] foundReceived = new bool[actual.Length]; foreach (var expectedObject in expected) { bool found = false; for (int i = 0; i < actual.Length; i++) { if (foundReceived[i]) { continue; } bool match = CompareEqualsExactOrder(actual[i], expectedObject); if (match) { found = true; numMatches++; foundReceived[i] = true; break; } } if (!found) { Log.Error("Expected not found: " + string.Join(", ", expectedObject)); Log.Error("Actual: " + string.Join(", ", actual)); } ScopeTestHelper.AssertTrue(found); } ScopeTestHelper.AssertEquals(numMatches, expected.Length); }
private void CollectText() { if (textNodeCount > _NUM) { firstTextNode.Text = textBuffer.ToString(); } textNodeCount = _NUM; }
using System; public static class AnnotationHelper { public static T Unproxy<T>(T annotation) where T : Attribute { Func<object, object> unproxyFunction = GetUnproxyFunction(annotation.GetType()); return (T)unproxyFunction(annotation); } private static Func<object, object> GetUnproxyFunction(Type annotationType) { // Implementation for obtaining the unproxy function based on the annotation type. throw new NotImplementedException(); } }
public static List<Node> ParseExpression(Context context, HashSet<string> configNamespaces, string text) { return ParseExpression(context, configNamespaces, text, _NUM, _BOOL); }
public void AddTickMarkSection(Section section) { if (section == null) return; tickMarkSections.Add(section); tickMarkSections.Sort(new SectionComparator()); FireUpdateEvent(REDRAW_EVENT); }
protected static double CalcQ_i(double f, double lambda) { return lambda * Math.Exp(-lambda * f); }
void Flush() { printStream.Flush(); }
public CharBuffer Delete(int start, int end) { int length = Length(); if (start < _NUM || end < start || length < start) throw new StringIndexOutOfBoundsException(); end = Math.Min(length, end); int tail = length - end; char[] buffer = Buffer(); for (int i = _NUM; i < tail; i++) { buffer[start + i] = buffer[end + i]; } Length(length - (end - start)); return this; }
public void AddPlotter(Plotter plotter) { plotters.Add(plotter); }
public Node<K, V> FindNear(K kkey, int rel) { Comparable<K> key = Comparable(kkey); for (;;) { Node<K, V> b = FindPredecessor(key); Node<K, V> n = b.Next; for (;;) { if (n == null) return (rel & LT) == _NUM || b.IsBaseHeader() ? null : b; Node<K, V> f = n.Next; if (n != b.Next) break; object v = n.Value; if (v == null) { n.HelpDelete(b, f); break; } if (v == n || b.Value == null) break; int c = key.CompareTo(n.Key); if ((c == _NUM && (rel & EQ) != _NUM) || (c < _NUM && (rel & LT) == _NUM)) return n; if (c <= _NUM && (rel & LT) != _NUM) return b.IsBaseHeader() ? null : b; b = n; n = f; } } }
public void AddListener(SpeedrunsLiveListener listener) { listeners.Add(listener); }
public void WriteExif(Bitmap bmap, Stream exifOutStream) { if (bmap == null || exifOutStream == null) { throw new ArgumentException(NULL_ARGUMENT_STRING); } using (Stream s = GetExifWriterStream(exifOutStream)) { bmap.Compress(Bitmap.CompressFormat.Jpeg, _NUM, s); s.Flush(); } }
public bool Find(int start) { if (start < _NUM || start > input.Length) { throw new IndexOutOfRangeException(_STR + start + _STR + input.Length); } lock (this) { matchFound = FindImpl(address, input, start, matchOffsets); } return matchFound; }
public int Action(string fault, string action) { int? current = Get(fault); if (!current.HasValue) throw new ArgumentException(fault); bool no = action.StartsWith(_STR); if (no) action = action.Substring(_NUM); int? bit = GetAction(action); if (!bit.HasValue) throw new ArgumentException(action); int old = current.Value; int mask = bit.Value; int n = old & (~mask); n = no ? n : (n | mask); Put(fault, n); return n; }
public static bool ContainsWhitespace(string str) { if (string.IsNullOrEmpty(str)) { return true; } int strLen = str.Length; for (int i = 0; i < strLen; i++) { if (char.IsWhiteSpace(str[i])) { return true; } } return false; }
public bool HasUnsupportedCriticalExtension() { var extns = GetCriticalExtensionOids(); if (extns == null) { return _BOOL; } extns.Remove(RFC3280CertPathUtilities.ISSUING_DISTRIBUTION_POINT); extns.Remove(RFC3280CertPathUtilities.DELTA_CRL_INDICATOR); return extns.Count > 0; }
public static T DecodeFromBase64<T>(Coder<T> coder, string encodedValue) { byte[] decodedBytes = Convert.FromBase64String(encodedValue); using (var stream = new MemoryStream(decodedBytes)) { return DecodeFromSafeStream(coder, stream, Coder.Context.OUTER); } }
public void Validate(HashSet<string> setData) { foreach (var item in setData) { PerformValidation(item); } }
public string Add(params object[] values) { double result = _NUM; for (int i = _NUM; i < values.Length; i++) { result += FunctionHandler.GetDouble(values[i]); } return result.ToString(); }
public List<string> ListMyDBs(string owner, bool restricted) { SqlConnection conn = null; try { conn = GetConnection(); return ListMyDBs(conn, owner, restricted); } catch (Exception ex) { logger.Log(LogLevel.Error, ex, "Error retrieving databases"); } finally { DBUtils.Close(conn); } return null; }
protected void DoFunction(float[] inputs, int inputOffset, float[] outputs, int outputOffset) { float input = inputs[inputOffset]; for (int i = _NUM; i < GetNumOutputs(); i++) { outputs[i + outputOffset] = GetC0(i) + (float)(Math.Pow(input, GetN()) * (GetC1(i) - GetC0(i))); } }
public void Put(string key, long value) { if (key != null) { urlParams[key] = value.ToString(); } }
public int Compare(object o1, object o2) { return comparator.Compare(o1, o2); }
public void AddCheckBoxActionListener(EventHandler<EventArgs> eventHandler) { m_enableDistributedExperiment.CheckedChanged += eventHandler; }
private Rect CalcBounds(int index, Paint paint) { Rect bounds = new Rect(); string title = GetTitle(index); bounds.Right = (int)paint.MeasureText(title, 0, title.Length); bounds.Bottom = (int)(paint.Descent() - paint.Ascent()); return bounds; }
public GF256Poly AddOrSubtract(GF256Poly other) { if (!field.Equals(other.field)) { throw new ArgumentException(_STR); } if (IsZero()) { return other; } if (other.IsZero()) { return this; } int[] smallerCoefficients = coefficients; int[] largerCoefficients = other.coefficients; if (smallerCoefficients.Length > largerCoefficients.Length) { int[] temp = smallerCoefficients; smallerCoefficients = largerCoefficients; largerCoefficients = temp; } int[] sumDiff = new int[largerCoefficients.Length]; int lengthDiff = largerCoefficients.Length - smallerCoefficients.Length; Array.Copy(largerCoefficients, 0, sumDiff, 0, lengthDiff); for (int i = lengthDiff; i < largerCoefficients.Length; i++) { sumDiff[i] = GF256.AddOrSubtract(smallerCoefficients[i - lengthDiff], largerCoefficients[i]); } return new GF256Poly(field, sumDiff); }
public override string ToString() { StringBuilder sb = new StringBuilder(); sb.Append(type); sb.Append(_STR); sb.Append(subType); foreach (var name in attributes.Keys) { if (inferredCharset && ATTR_CHARSET.Equals(name)) { continue; } sb.Append(_STR); sb.Append(name); sb.Append(_STR); string value = attributes[name]; Match tokenMatcher = TOKEN_PATTERN.Match(value); if (tokenMatcher.Success) { sb.Append(value); } else { sb.Append(_STR + value + _STR); } } return sb.ToString(); }
public static long FirstFieldOffset(Type clazz) { long minSize = RoundUpTo8(HeaderSize(clazz)); while (clazz != typeof(object)) { var fields = clazz.GetFields(System.Reflection.BindingFlags.DeclaredOnly | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Static); foreach (var f in fields) { if (!f.IsStatic) { long offset = Unsafe.Add(ref System.Runtime.InteropServices.MemoryMarshal.GetReference(new Span<byte>(new byte[sizeof(long)])), 0); // Placeholder for actual field offset calculation if (offset < minSize) { minSize = offset; } } } clazz = clazz.BaseType; } return minSize; }
private void FitImageToView() { Drawable drawable = GetDrawable(); if (drawable == null || drawable.GetIntrinsicWidth() == _NUM || drawable.GetIntrinsicHeight() == _NUM) { return; } if (matrix == null || prevMatrix == null) { return; } int drawableWidth = drawable.GetIntrinsicWidth(); int drawableHeight = drawable.GetIntrinsicHeight(); float scaleX = (float)viewWidth / drawableWidth; float scaleY = (float)viewHeight / drawableHeight; switch (mScaleType) { case ScaleType.CENTER: scaleX = scaleY = _NUM; break; case ScaleType.CENTER_CROP: scaleX = scaleY = Math.Max(scaleX, scaleY); break; case ScaleType.CENTER_INSIDE: scaleX = scaleY = Math.Min(_NUM, Math.Min(scaleX, scaleY)); // Fall through to FIT_CENTER case case ScaleType.FIT_CENTER: scaleX = scaleY = Math.Min(scaleX, scaleY); break; case ScaleType.FIT_XY: break; default: throw new NotSupportedException(_
public static void W(string tag, string msg, params object[] args) { if (sLevel > LEVEL_WARNING) return; if (args.Length > _NUM) { msg = string.Format(msg, args); } Log.W(tag, msg); }
private int ProcessPollFds() { if (pollFds[_NUM].Revents == POLLIN) { byte[] buffer = new byte[_NUM]; while (IoBridge.Read(wakeupIn, buffer, _NUM, _NUM) > _NUM) { } } int readyKeyCount = _NUM; for (int i = _NUM; i < pollFds.Count; ++i) { StructPollfd pollFd = pollFds[i]; if (pollFd.Revents == _NUM) { continue; } if (pollFd.Fd == null) { break; } SelectionKeyImpl key = (SelectionKeyImpl)pollFd.UserData; pollFd.Fd = null; pollFd.UserData = null; int ops = key.InterestOpsNoCheck(); int selectedOps = _NUM; if ((pollFd.Revents & POLLHUP) != _NUM) { selectedOps |= ops; } if ((pollFd.Revents & POLLIN) != _NUM) { selectedOps |= ops & (OP_ACCEPT | OP_READ); } if
public V ExtractFirst() { if (Size() > _NUM) { if (IsScript()) { V ret = jsArray[_NUM]; jsArray.RemoveAt(_NUM); return ret; } else { return javaArray.RemoveAt(_NUM); } } return default(V); }
public override void OnActionPerformed(ActionEventArgs event) { string command = event.ActionCommand; if (command.Equals(_STR)) { AttemptLabelFontSelection(); } else if (command.Equals(_STR)) { AttemptModifyLabelPaint(); } else if (command.Equals(_STR)) { AttemptTickLabelFontSelection(); } }
[AndroidOnly(_STR)] public void TestUnwrapByteBuffer() { string host = _STR; int port = _NUM; ByteBuffer bbs = ByteBuffer.Allocate(_NUM); ByteBuffer[] bbd = { ByteBuffer.Allocate(_NUM), ByteBuffer.Allocate(_NUM), ByteBuffer.Allocate(_NUM) }; SSLEngine sse = GetEngine(host, port); try { sse.Unwrap(bbs, bbd); Fail(_STR); } catch (IllegalStateException iobe) { } catch (Exception e) { Fail(e + _STR); } }
public static void UpgradeServerInstance(SSOToken ssoToken, string instanceName, string instanceId, Dictionary<string, string> upgradedValues) { ServiceConfig sc = GetServerConfig(ssoToken, instanceName); if (sc != null) { var map = sc.GetAttributes(); map.Remove(ATTR_PARENT_SITE_ID); var newSet = GetPropertiesSet(upgradedValues); map[ATTR_SERVER_CONFIG] = newSet; sc.SetAttributes(map); } else { throw new ConfigurationException(_STR + _STR); } }
public static T Instance<T>() where T : new() { try { return new T(); } catch (Exception e) { throw new InvalidOperationException("Failed to create an instance.", e); } }
private void Pop(string desc) { char c = desc[_NUM]; if (c == _STR) { Pop((Type.GetArgumentsAndReturnSizes(desc) >> _NUM) - _NUM); } else if (c == _STR || c == _STR) { Pop(_NUM); } else { Pop(_NUM); } }
public GenericSipMsrpSession CreateMsrpSession(ContactId contact, string featureTag, string[] acceptTypes, string[] acceptWrappedTypes) { if (sLogger.IsActivated()) { sLogger.Info(_STR + contact); } return new OriginatingSipMsrpSession(this, contact, featureTag, mRcsSettings, DateTimeOffset.Now.ToUnixTimeMilliseconds(), mContactManager, acceptTypes, acceptWrappedTypes); }
public ForumPostConfig Create(ForumPostConfig config) { config.AddCredentials(this); string xml = POST(this.url + _STR, config.ToXML()); XElement root = Parse(xml); if (root == null) { return null; } try { ForumPostConfig post = new ForumPostConfig(); post.ParseXML(root); return post; } catch (Exception exception) { this.exception = SDKException.ParseFailure(exception); throw this.exception; } }
protected void DrawMark(Graphics g2, float x, float y, Color color) { RectangleF bounds = mark.GetBounds(); float w = bounds.Width; float h = bounds.Height; x -= w / _NUM; y -= h / _NUM; g2.TranslateTransform(x, y); if (color == null) { if (markFillPaint != null) { g2.FillRectangle(new SolidBrush(markFillPaint), bounds); } } else { using (Brush brush = new SolidBrush(color)) { g2.FillRectangle(brush, bounds); } } g2.DrawRectangle(new Pen(markPaint, markStroke.Width), bounds.X, bounds.Y, w, h); g2.TranslateTransform(-x, -y); RectangleF rect = new RectangleF(x, y, w, h); markBounds.Add(rect); }
public void ComponentResized(ComponentEvent e) { if (logger.IsLoggable(Level.Fine)) { logger.Fine(_STR + GetWidth() + _STR + GetHeight()); } projection.SetWidth(GetWidth()); projection.SetHeight(GetHeight()); FireProjectionChanged(); }
public string ToString() { var buf = new StringBuilder(); for (StepPattern pat = this; pat != null; pat = pat.m_relativePathPattern) { if (pat != this) buf.Append(_STR); buf.Append(Axis.GetNames(pat.m_axis)); buf.Append(_STR); if (_NUM == pat.m_whatToShow) { buf.Append(_STR); } else if (DTMFilter.SHOW_BYFUNCTION == pat.m_whatToShow) { buf.Append(_STR); } else if (DTMFilter.SHOW_ALL == pat.m_whatToShow) { buf.Append(_STR); } else if (DTMFilter.SHOW_TEXT == pat.m_whatToShow) { buf.Append(_STR); } else if (DTMFilter.SHOW_PROCESSING_INSTRUCTION == pat.m_whatToShow) { buf.Append(_STR); if (pat.m_name != null) { buf.Append(pat.m_name); } buf.Append(_STR); } else if (DTMFilter.SHOW_COMMENT == pat.m_whatToShow)
public static string ByteArrayToHexString(byte[] block, int offset, int length) { var buf = new System.Text.StringBuilder(); int len = block.Length; length = length + offset; if (len < length) { length = len; } for (int i = _NUM + offset; i < length; i++) { Byte2Hex(block[i], buf); if (i < length - _NUM) { buf.Append(_STR); } } return buf.ToString(); }
private void ChangeValue(AbstractStorageLabel<object> label, object newValue) { if (!Equals(label.GetValue(), newValue)) { lock (labelEditListeners) { foreach (var listener in labelEditListeners) { listener.PreLabelValueChange(label); } } label.SetValue(newValue); lock (labelEditListeners) { foreach (var listener in labelEditListeners) { listener.PostLabelValueChange(label); } } } }
public void Write(byte[] b, int offset, int length) { if (entry.GetMethod() == DEFLATED) { if (length > _NUM) { if (!def.Finished()) { def.SetInput(b, offset, length); while (!def.NeedsInput()) { Deflate(); } } } } else { WriteOut(b, offset, length); written += length; } crc.Update(b, offset, length); }
public void UpdatePoint(float x, float y) { if (Math.Sqrt(x * x + y * y) > _NUM) { listener?.OnAngleChangedListener(GetAngle(x, -y)); } }
public void QuietlyJoin() { DoJoin(); }
public override int ClampViewPositionHorizontal(View child, int left, int dx) { if (mDraggedView == null) { return _NUM; } int leftBound = _NUM - MAX_OVERFLOW - (mColumnSizeSide / _NUM); int rightBound = GetWidth() + MAX_OVERFLOW + (mColumnSizeSide / _NUM); return Math.Min(Math.Max(left, leftBound), rightBound); }
public HttpRequestWrapper(HttpRequest request) : base(request) { }
private int ConvertToPanelX(double xval) { double temp = (xval - m_minX) / m_rangeX; temp = temp * m_panelWidth; return (int)temp; }
public void Forward(HttpServerRequest request) { Forward(request, null); }
private HashSet<string> PrimaryKeys(MySqlCommand cmd, string owner, string table) { HashSet<string> pkCols = new HashSet<string>(); cmd.Parameters.AddWithValue("@owner", owner); cmd.Parameters.AddWithValue("@table", table); using (MySqlDataReader pkRs = cmd.ExecuteReader()) { while (pkRs.Read()) { pkCols.Add(pkRs.GetString(0)); // Assuming the primary key is in the first column } } return pkCols; }
public static long ReadUINT32(Stream stream) { long result = 0; for (int i = 0; i <= 24; i += 8) { result |= (long)stream.ReadByte() << i; } return result; }
private Token ToPrefixToken(ILeafNode leaf) { Lexer lexer = new InternalN4JSLexer(); string text = leaf.GetText(); string prefix = text.Substring(_NUM, endOffset - leaf.GetTotalOffset()); ANTLRStringStream stream = new ANTLRStringStream(prefix); lexer.SetCharStream(stream); Token nextToken = lexer.NextToken(); return new CommonToken(nextToken.Type, nextToken.Text); }
protected void Add(CSVRecord record) { records.Add( record ?? throw new ArgumentNullException(nameof(record)) ); }
private void ScheduledEnqueueSend() { schedulerQueueSize.DecrementAndGet(); scheduled.Set(_BOOL); EnqueueSendWithErrorLogging(); }
private E AwaitMatch(Node s, Node pred, E e, bool timed, long nanos) { long deadline = timed ? DateTime.Now.Ticks * 100 : long.MaxValue; Thread w = Thread.CurrentThread; int spins = -1; ThreadLocalRandom randomYields = null; while (true) { object item = s.Item; if (!item.Equals(e)) { s.ForgetContents(); return LinkedTransferQueue<E>.Cast(item); } if ((w.IsInterrupted() || (timed && nanos <= 0)) && s.CompareAndSetItem(e, s)) { Unsplice(pred, s); return e; } if (spins < 0) { if ((spins = SpinsFor(pred, s.IsData)) > 0) randomYields = ThreadLocalRandom.Current; } else if (spins > 0) { --spins; if (randomYields.Next(CHAINED_SPINS) == 0) Thread.Yield(); } else if (s.Waiter == null) { s.Waiter = w; } e
public static string Join(char[] self, string separator) { StringBuilder buffer = new StringBuilder(); bool first = true; if (separator == null) separator = string.Empty; foreach (char next in self) { if (first) { first = false; } else { buffer.Append(separator); } buffer.Append(next); } return buffer.ToString(); }
private BindingAmp<T> FindObjectBinding<T>(Key<T> key) { if (key == null) throw new ArgumentNullException(nameof(key)); if (key.Qualifiers.Length != _NUM) throw new ArgumentException(); return (BindingAmp<T>)FindBinding(Key.Of(typeof(object), key.Qualifiers[_NUM])); }
private void InitComputeProgram() { GL.UseProgram(computeProgram); IntPtr workGroupSize = Marshal.AllocHGlobal(sizeof(int) * _NUM); GL.GetProgramiv(computeProgram, GLES30.GL_COMPUTE_WORK_GROUP_SIZE, workGroupSize); workGroupSizeX = Marshal.ReadInt32(workGroupSize, 0); workGroupSizeY = Marshal.ReadInt32(workGroupSize, sizeof(int)); timeUniform = GL.GetUniformLocation(computeProgram, _STR); blendFactorUniform = GL.GetUniformLocation(computeProgram, _STR); lightRadiusUniform = GL.GetUniformLocation(computeProgram, _STR); IntPtr props = Marshal.AllocHGlobal(sizeof(int) * _NUM); IntPtr params = Marshal.AllocHGlobal(sizeof(int) * _NUM); Marshal.WriteInt32(props, _NUM * sizeof(int), GL.GL_BUFFER_BINDING); int objectsResourceIndex = GL.GetProgramResourceIndex(computeProgram, GL.GL_SHADER_STORAGE_BLOCK, _STR); GL.GetProgramResourceiv(computeProgram, GL.GL_SHADER_STORAGE_BLOCK, objectsResourceIndex, props, null, params); objectsSsboBinding = Marshal.ReadIn
public bool IfTaskCompletedSuccessOrFailureFromResponse(ResponseOnSingleRequest myResponse) { bool isCompleted = false; // Assuming _BOOL is false in C# try { if (myResponse == null || myResponse.IsFailObtainResponse()) { return isCompleted; } string responseBody = myResponse.GetResponseBody(); if (System.Text.RegularExpressions.Regex.IsMatch(responseBody, successRegex) || System.Text.RegularExpressions.Regex.IsMatch(responseBody, failureRegex)) { isCompleted = true; // Assuming _BOOL is true in C# } } catch (Exception t) { logger.Error(_STR + t); } return isCompleted; }
public void CenterHorizontal(List<int> nodes) { if (m_bNeedsUndoAction) { AddUndoAction(new CenterHorizontalAction(nodes)); } int nMinY = -_NUM; int nMaxY = -_NUM; for (int iNode = _NUM; iNode < nodes.Count; iNode++) { int nY = GetPositionY(nodes[iNode]); if (nY < nMinY || iNode == _NUM) { nMinY = nY; } if (nY > nMaxY || iNode == _NUM) { nMaxY = nY; } } for (int iNode = _NUM; iNode < nodes.Count; iNode++) { int nNode = nodes[iNode]; m_nPositionY[nNode] = (nMinY + nMaxY) / _NUM; } }
protected void AppendText(string text) { if (text != null) { textBody.Append(text); } }
public void OnRestoreInstanceState(Bundle savedInstanceState) { mSelectedPositions.AddRange(savedInstanceState.GetIntegerArrayList(TAG)); Log.Debug(TAG, _STR + mSelectedPositions); }
public Hour(int hour, Day day) { ParamChecks.NullNotPermitted(day, _STR); this.hour = (byte)hour; this.day = day; Peg(Calendar.GetInstance()); }
public void Undo() { if (--m_tempUndoIndex < _NUM) { m_tempUndoIndex = m_tempUndoFiles.Length - _NUM; } if (m_tempUndoFiles[m_tempUndoIndex] != null) { AbstractFileLoader loader = ConverterUtils.GetLoaderForFile(m_tempUndoFiles[m_tempUndoIndex]); try { loader.SetFile(m_tempUndoFiles[m_tempUndoIndex]); SetInstancesFromFile(loader); } catch (Exception e) { e.PrintStackTrace(); m_Log.LogMessage(e.ToString()); MessageBox.Show(_STR + e.ToString(), _STR, MessageBoxButtons.OK, MessageBoxIcon.Error); } m_tempUndoFiles[m_tempUndoIndex] = null; } int temp = m_tempUndoIndex - _NUM; if (temp < _NUM) { temp = m_tempUndoFiles.Length - _NUM; } m_UndoBut.Enabled = m_tempUndoFiles[temp] != null; }
public static bool IsConnectedUsingWifi() { var context = Application.Context; var connectivityManager = (ConnectivityManager)context.GetSystemService(Context.ConnectivityService); var networkInfo = connectivityManager.ActiveNetworkInfo; return networkInfo != null && networkInfo.IsConnected && networkInfo.Type == ConnectivityType.Wifi; }
public void Close() { if (writer != null) { writer.FlushBuffer(); } }
public bool IsEmpty() { return extOrdering.IsEmpty(); }
public Process(FileInfo file, ProgressListener progressListener) { this.processLocation = new FileProcessLocation(file); InitContext(); StreamReader inStream = null; try { inStream = new StreamReader(new FileStream(file.FullName, FileMode.Open), Encoding.UTF8); ReadProcess(inStream, progressListener); } catch (IOException e) { throw e; } finally { if (inStream != null) { inStream.Close(); } } }
public static string ExtractMusicIDFromMediaID(string mediaID) { int pos = mediaID.IndexOf(LEAF_SEPARATOR); if (pos >= _NUM) { return mediaID.Substring(pos + _NUM); } return null; }
public void TestGetScope() { Identity i = new IdentityStub(_STR); Assert.IsNull(i.GetScope()); IdentityScope s = IdentityScope.GetSystemScope(); Identity i2 = new IdentityStub(_STR, s); Assert.AreSame(s, i2.GetScope()); }
public object[] BuildParameters(object[] firstParameters, MethodInfo method, Type annotationType) { int parametersLength = method.GetParameters().Length; if (firstParameters.Length > _NUM && parametersLength < _NUM) { throw new RepositoryMethodException(string.Format(_STR, annotationType)); } int parametersToResolve = parametersLength - firstParameters.Length; object[] additionalParameters = new object[parametersToResolve]; for (int i = firstParameters.Length; i < parametersLength; i++) { additionalParameters[i - firstParameters.Length] = parameterProvider.Provide(method, i); } return Concatenate(firstParameters, additionalParameters); }
public override bool Contains(S2Cell cell) { return Contains(cell.Id()); }
public SimplexNoiseGenerator(Random rand) : base(rand) { offsetW = rand.NextDouble() * _NUM; }
public static long[] Values(Long?[] array) { long[] dest = new long[array.Length]; for (int i = 0; i < array.Length; i++) { Long? v = array[i]; if (v.HasValue) { dest[i] = v.Value; } } return dest; }
public override void ProcessNewLines(string[] lines) { foreach (string line in lines) { if (line.StartsWith(_STR)) { continue; } if (line.Contains(_STR)) { myIsFileMissing = _BOOL; return; } string[] values = line.Split(new[] { LINE_SPLIT_REGEX }, StringSplitOptions.None); if (values.Length < INDEX_OF_TX_BYTES) { continue; } try { int lineUid = int.Parse(values[INDEX_OF_UID]); if (myUid == lineUid) { int tempRxBytes = int.Parse(values[INDEX_OF_RX_BYTES]); int tempTxBytes = int.Parse(values[INDEX_OF_TX_BYTES]); if (tempRxBytes < _NUM || tempTxBytes < _NUM) { LOG.Warning(string.Format(_STR, tempRxBytes, tempTxBytes, line)); continue; } myRxBytes += tempRxBytes; myTxBytes += tempTxBytes; } } catch (FormatException) { LOG.Warning(string.Format(_STR, values[INDEX_OF_UID], values[INDEX_OF_RX_BY
protected void InitLookup() { m_lookup = new Dictionary<string, int>(); for (int i = _NUM; i < m_names.Length; ++i) { m_lookup[m_names[i]] = i; } }
public string ToString() { string str = _STR; string followedBy = _STR; int lastType = -_NUM; string lastString = _STR; int singlesCount = _NUM; foreach (FormatConstraint constraint in formatConstraints) { if (constraint.count == FormatConstraint.COUNT_EXACTLY_ONE) { if (lastType != -_NUM) { if (lastType != constraint.type) { str += followedBy + singlesCount + lastString; followedBy = _STR; singlesCount = _NUM; lastType = constraint.type; lastString = constraint.ToString(); } else { singlesCount++; } } else { lastType = constraint.type; lastString = constraint.ToString(); singlesCount = _NUM; } } else { if (lastType != -_NUM) { str += followedBy + singlesCount + lastString; followedBy = _STR; lastType = -_NUM; singlesCount = _NUM; lastString = _STR; } str += followedBy + constra
public void ReadData(DataInput din) { din.ReadShort(); count = din.ReadUnsignedShort(); registers = new InputRegister[count]; for (int i = _NUM; i < count; i++) { registers[i] = new SimpleInputRegister(din.ReadShort()); } }
public void AdjustIndentation(int delta) { if (delta < _NUM) { indentationLevel = Math.Max(_NUM, indentationLevel + delta); } else { indentationLevel += delta; } }
public int Capacity() { return capacity.Get(); }
protected static Token DoCodeString() { StringBuilder result = new StringBuilder(); Advance(); Advance(); while (!(nextChar == _STR && nextChar2 == _STR)) { if (nextChar == EOF_CHAR) { EmitError(_STR); break; } result.Append((char)nextChar); Advance(); } Advance(); Advance(); return new StrToken(sym.CODE_STRING, result.ToString()); }
public string Random(object omin, object omax) { int min = FunctionHandler.GetInt(omin); int max = FunctionHandler.GetInt(omax); if (max > min) { return new Random().Next(min, max).ToString(); } return string.Empty; // Assuming _STR is an empty string }
public void TestReopen01() { IRawStore store = new SimpleMemoryRawStore(); BTree btree; { IndexMetadata md = new IndexMetadata(Guid.NewGuid()); md.SetBranchingFactor(_NUM); btree = BTree.Create(store, md); } Assert.IsTrue(btree.IsOpen()); btree.Close(); Assert.IsFalse(btree.IsOpen()); try { btree.Close(); Assert.Fail(_STR + typeof(IllegalStateException).Name); } catch (IllegalStateException ex) { if (log.IsInfoEnabled) log.Info(_STR + ex); } Assert.IsNotNull(btree.GetRoot()); Assert.IsTrue(btree.IsOpen()); }
public static FileInfo SearchPaths(IEnumerable<FileInfo> paths, string relFile) { foreach (var path in paths) { var f = new FileInfo(Path.Combine(path.FullName, relFile)); if (f.Exists) { return path; } } return null; }
public bool HasUnsupportedCriticalExtension() { var extns = GetCriticalExtensionOIDs(); return extns != null && extns.Count > 0; }
private static string DoNormalize(string filename, char separator, bool keepSeparator) { if (filename == null) { return null; } int size = filename.Length; if (size == _NUM) { return filename; } int prefix = GetPrefixLength(filename); if (prefix < _NUM) { return null; } char[] array = new char[size + _NUM]; filename.CopyTo(_NUM, array, _NUM, size - _NUM); char otherSeparator = (separator == SYSTEM_SEPARATOR) ? OTHER_SEPARATOR : SYSTEM_SEPARATOR; for (int i = _NUM; i < array.Length; i++) { if (array[i] == otherSeparator) { array[i] = separator; } } bool lastIsDirectory = _BOOL; if (array[size - _NUM] != separator) { array[size++] = separator; lastIsDirectory = _BOOL; } for (int i = prefix + _NUM; i < size; i++) { if (array[i] == separator && array[i - _NUM] == separator)
public override StringBuilder Format(double value, StringBuilder buffer, FieldPosition field) { for (int i = choiceLimits.Length - _NUM; i >= _NUM; i--) { if (choiceLimits[i] <= value) { return buffer.Append(choiceFormats[i]); } } return choiceFormats.Length == _NUM ? buffer : buffer.Append(choiceFormats[_NUM]); }
private void LoadConfigurationFromJvmParameters() { string repositoryProperty = System.getProperty(REPOSITORY_PROPERTY); if (repositoryProperty != null) { string[] repositoryIpHost = repositoryProperty.Split(new string[] { _STR }, StringSplitOptions.None); if (repositoryIpHost.Length == _NUM) { string repositoryIp = repositoryIpHost[_NUM]; string repositoryPort = repositoryIpHost[_NUM]; if (!string.IsNullOrWhiteSpace(repositoryIp) && !string.IsNullOrWhiteSpace(repositoryPort)) { log.Info(_STR + repositoryIp + _STR + repositoryPort); try { int port = int.Parse(repositoryPort); SetRepository(repositoryIp, port); } catch (Exception e) { log.Warn(_STR, e); } } } } string agentName = System.getProperty(AGENT_NAME_PROPERTY); if (!string.IsNullOrWhiteSpace(agentName)) { try { log.Info(_STR + agentName); SetAgentName(agentName); } catch (Exception e) { log.Warn(_STR, e); }
public bool SoftSignin() { if (url == null) { throw new InvalidOperationException(_STR); } CheckResolveHost(); if (sessionId != null) { if (CheckAuthorized(GetAuthCheckUrl(sessionId))) { LOGGER.Fine(_STR + sessionId); return true; } else { sessionId = null; } } long id = LoadSessionId(); if (id == _NUM) { return true; } bool authorized = CheckAuthorized(GetAuthCheckUrl(id)); if (authorized) { LOGGER.Info(_STR + id); this.sessionId = id; } return authorized; }
private void TestViewAlterAndCommandCache() { DeleteDb(_STR); using (var conn = GetConnection(_STR)) { using (var stat = conn.CreateCommand()) { stat.CommandText = _STR; stat.ExecuteNonQuery(); stat.CommandText = _STR; stat.ExecuteNonQuery(); stat.CommandText = _STR; stat.ExecuteNonQuery(); stat.CommandText = _STR; stat.ExecuteNonQuery(); stat.CommandText = _STR; stat.ExecuteNonQuery(); using (var rs = stat.ExecuteReader()) { Assert.IsTrue(rs.Read()); Assert.AreEqual(_NUM, rs.GetInt32(_NUM)); } stat.CommandText = _STR; using (var rs = stat.ExecuteReader()) { Assert.IsTrue(rs.Read()); Assert.AreEqual(_NUM, rs.GetInt32(_NUM)); } } } DeleteDb(_STR); }
protected static bool ApproxUnit(StringBuilder sbuf, int amount, int size, string name) { int count = amount / size; int remainder; if (count == _NUM) { return _BOOL; } remainder = amount - (count * size); if (remainder >= (size * _NUM / _NUM)) { count++; sbuf.Append(count); } else if (remainder >= (size * _NUM / _NUM)) { count++; sbuf.Append(_STR); sbuf.Append(count); } else if (remainder >= (size * _NUM / _NUM)) { sbuf.Append(_STR); sbuf.Append(count); sbuf.Append(_STR); count = _NUM; } else if (remainder >= (size * _NUM / _NUM)) { sbuf.Append(_STR); sbuf.Append(count); } else { sbuf.Append(count); } sbuf.Append(_STR); sbuf.Append(Grammar.PluralNoun(count, name)); return _BOOL; }
public static XElement CreateElement(XDocument doc, string tag, string nsURI, string prefix) { string qName = string.IsNullOrEmpty(prefix) ? tag : prefix + ":" + tag; return new XElement(XName.Get(qName, nsURI)); }
public static void ModifyFile(string filePath, Func<string, string> modifier) { string content = System.IO.File.ReadAllText(filePath, System.Text.Encoding.UTF8); string result = modifier(content); System.IO.File.WriteAllText(filePath, result, System.Text.Encoding.UTF8); }
private void State2() { int[] selectionIds = ReadList(new File(filePrefix + _STR)); int[] archivedIds = ReadList(new File(filePrefix + _STR)); int[] variationIds = new int[lambda]; if (selectionIds.Length != mu) { throw new IOException(_STR); } UpdatePopulation(archivedIds); ClearFile(new File(filePrefix + _STR)); ClearFile(new File(filePrefix + _STR)); List<Solution> offspring = new List<Solution>(); for (int i = _NUM; i < mu; i += variation.GetArity()) { Solution[] parents = new Solution[variation.GetArity()]; for (int j = _NUM; j < variation.GetArity(); j++) { parents[j] = solutions[selectionIds[i + j]]; } offspring.AddRange(variation.Evolve(parents)); } if (offspring.Count != lambda) { throw new IOException(_STR); } EvaluateAll(offspring); for (int i = _NUM; i < lambda; i++) { variationIds[i] = AddToPopulation(offsprin
public void TestListOptions() { if (m_OptionTester.GetOptionHandler() != null) { if (!m_OptionTester.CheckListOptions()) { Fail(_STR); } } }
protected double LLToWorldReturningLon(double lat, double lon, Point2D lp) { double phi_deg = lat; double phi = ProjMath.DegToRad(phi_deg); double lamba_deg = lon; double lamba = ProjMath.DegToRad(lamba_deg); double dlamda = lamba - lamdaf; if (dlamda > Math.PI) { dlamda -= MoreMath.TWO_PI_D; } else if (dlamda < -Math.PI) { dlamda += MoreMath.TWO_PI_D; } double e = ellps.ecc; double r = _NUM; if (!MoreMath.ApproximatelyEqual(Math.Abs(phi), MoreMath.HALF_PI, EPS10)) { double t = lambTsfn(phi, Math.Sin(phi), e); r = ellps.radius * F * Math.Pow(t, n); } double theta = n * dlamda; double easting = falseEasting + r * Math.Sin(theta - alpha); double northing = falseNorthing + rf - r * Math.Cos(theta - alpha);
protected override void NotifySizeChanged(float width, float height, int orientation) { }
protected bool RemoveTurntable(LayoutTurntable o) { if (!noWarnTurntable) { int selectedValue = MessageBox.Show(Bundle.GetMessage(_STR), rb.GetString(_STR), MessageBoxButtons.YesNoCancel, MessageBoxIcon.Question); if (selectedValue == DialogResult.Cancel) { return false; } if (selectedValue == DialogResult.No) { noWarnTurntable = true; } } if (selectedObject == o) { selectedObject = null; } if (prevSelectedObject == o) { prevSelectedObject = null; } for (int j = 0; j < o.GetNumberRays(); j++) { TrackSegment t = o.GetRayConnectOrdered(j); if (t != null) { SubstituteAnchor(o.GetRayCoordsIndexed(j), o, t); } } for (int i = 0; i < turntableList.Count; i++) { LayoutTurntable lx = turntableList[i]; if (lx == o) { turntableList.RemoveAt(i); o.Remove(
public override void EndElement(string ns, string lName, string qName) { string name = string.IsNullOrEmpty(lName) || lName.Length == _NUM ? qName : lName; Rule r = (Rule)RULES.Match(match); if (r != null) { r.End(name); } int slash = match.LastIndexOf(_STR); if (slash >= _NUM) { match = match.Substring(_NUM, slash - _NUM); } else { match = _STR; } }
public INDArray AsMatrix(BufferedImage image) { if (channels == _NUM) { return ToBgr(image); } else { image = ScalingIfNeed(image, _BOOL); int w = image.Width; int h = image.Height; INDArray ret = Nd4j.Create(h, w); for (int i = _NUM; i < h; i++) { for (int j = _NUM; j < w; j++) { ret.PutScalar(new int[] { i, j }, image.GetRGB(i, j)); } } return ret; } }
public FileSystemUtils() : base() { }
public int ScheduledQueueSize() { return schedulerQueueSize.Get(); }
public DGeneralNameChooser(JFrame parent, string title, GeneralName generalName) : base(parent, title, ModalityType.DocumentModal) { InitComponents(generalName); }
public void DestroyScene() { ClearAnimations(); ClearCameras(); ClearLights(); ClearPlugins(); ClearChildren(); ClearFrameCallbacks(); }
private static Platform FindPlatform() { try { try { Type.GetType(_STR); } catch (TypeLoadException) { Type.GetType(_STR); } var setUseSessionTickets = new OptionalMethod<Socket>(null, _STR, typeof(bool)); var setHostname = new OptionalMethod<Socket>(null, _STR, typeof(string)); MethodInfo trafficStatsTagSocket = null; MethodInfo trafficStatsUntagSocket = null; OptionalMethod<Socket> getAlpnSelectedProtocol = null; OptionalMethod<Socket> setAlpnProtocols = null; try { Type trafficStats = Type.GetType(_STR); trafficStatsTagSocket = trafficStats.GetMethod(_STR, new[] { typeof(Socket) }); trafficStatsUntagSocket = trafficStats.GetMethod(_STR, new[] { typeof(Socket) }); try { Type.GetType(_STR); getAlpnSelectedProtocol = new OptionalMethod<byte[]>(typeof(byte[]), _STR); setAlpnProtocols = new OptionalMethod<Socket>(null, _STR, typeof(byte[])); } catch (TypeL
private void AddLimitedMitreJoin(LineSegment offset0, LineSegment offset1, double distance, double mitreLimit) { Coordinate basePt = offset0.P1; double ang0 = Angle.Angle(basePt, offset0.P0); double ang1 = Angle.Angle(basePt, offset1.P1); double angDiff = Angle.AngleBetweenOriented(offset0.P0, basePt, offset1.P1); double angDiffHalf = angDiff / _NUM; double midAng = Angle.Normalize(ang0 + angDiffHalf); double mitreMidAng = Angle.Normalize(midAng + Math.PI); double mitreDist = mitreLimit * distance; double bevelDelta = mitreDist * Math.Abs(Math.Sin(angDiffHalf)); double bevelHalfLen = distance - bevelDelta; double bevelMidX = basePt.X + mitreDist * Math.Cos(mitreMidAng); double bevelMidY = basePt.Y + mitreDist * Math.Sin(mitreMidAng); Coordinate bevelMidPt = new Coordinate(bevelMidX, bevelMidY); LineSegment mitreMidLine = new LineSegment(basePt, bevelMidPt
static byte[] DiscardNonBase64(byte[] data) { byte[] groomedData = new byte[data.Length]; int bytesCopied = _NUM; for (int i = _NUM; i < data.Length; i++) { if (IsBase64(data[i])) { groomedData[bytesCopied++] = data[i]; } } byte[] packedData = new byte[bytesCopied]; Array.Copy(groomedData, _NUM, packedData, _NUM, bytesCopied); return packedData; }
public void TestMultiplyDiffScalePosNeg() { string a = _STR; int aScale = _NUM; string b = _STR; int bScale = -_NUM; string c = _STR; int cScale = _NUM; BigDecimal aNumber = new BigDecimal(new BigInteger(a), aScale); BigDecimal bNumber = new BigDecimal(new BigInteger(b), bScale); BigDecimal result = aNumber.Multiply(bNumber); Assert.AreEqual(c, result.ToString()); Assert.AreEqual(cScale, result.Scale()); }
private static long LimitDuration(long leaseDuration, long limit) { if (leaseDuration == Lease.ANY || leaseDuration > limit) { leaseDuration = limit; } else if (leaseDuration < _NUM) { throw new ArgumentException(_STR); } return leaseDuration; }
static string PathToCookiePath(string path) { if (path == null) { return _STR; } int lastSlash = path.LastIndexOf(_STR); return path.Substring(_NUM, lastSlash + _NUM); }
public static string FormatSimpleDecimal(double d) { return simpleFormat.Format(d); }
protected AbstractCategoryItemLabelGenerator(string labelFormat, DateTimeFormatInfo formatter) { ParamChecks.NullNotPermitted(labelFormat, _STR); ParamChecks.NullNotPermitted(formatter, _STR); this.labelFormat = labelFormat; this.numberFormat = null; this.percentFormat = NumberFormat.PercentInstance(); this.dateFormat = formatter; this.nullValueString = _STR; }
public void DelItems(int s, int e) { bool hsbWasVisible = hsbVis; bool vsbWasVisible = vsbVis; int oldLastDisplayed = LastItemDisplayed(); if (log.IsLoggable(PlatformLogger.Level.FINE)) { log.Fine(_STR + s + _STR + e); } if (log.IsLoggable(PlatformLogger.Level.FINEST)) { log.Finest(_STR + oldLastDisplayed + _STR + ItemsInWindow() + _STR + items.Count); } if (items.Count == _NUM) { return; } if (s > e) { int tmp = s; s = e; e = tmp; } if (s < _NUM) { s = _NUM; } if (e >= items.Count) { e = items.Count - _NUM; } bool repaintNeeded = (s >= GetFirstVisibleItem() && s <= GetLastVisibleItem()); for (int i = s; i <= e; i++) { items.RemoveAt(s); int j = PosIn
static long MakeId(SnmpOid oid) { long id = _NUM; long[] arcs = oid.LongValue(_BOOL); id |= arcs[_NUM] << _NUM; id |= arcs[_NUM] << _NUM; id |= arcs[_NUM] << _NUM; id |= arcs[_NUM] << _NUM; id |= arcs[_NUM] << _NUM; id |= arcs[_NUM] << _NUM; id |= arcs[_NUM] << _NUM; id |= arcs[_NUM]; return id; }
private void CacheAttribute(string attrId, byte[][] values) { string cacheKey = name + _STR + attrId; valueCache[cacheKey] = values; }
void Read(TextReader policy) { if (!(policy is BufferedReader)) { policy = new BufferedReader(policy); } StreamTokenizer st = new StreamTokenizer(policy); st.ResetSyntax(); st.WordChars(_STR, _STR); st.WordChars(_STR, _STR); st.WordChars(_STR, _STR); st.WordChars(_STR, _STR); st.WordChars(_STR, _STR); st.WordChars(_STR, _STR); st.WordChars(_NUM + _NUM, _NUM); st.WhitespaceChars(_NUM, _STR); st.CommentChar(_STR); st.QuoteChar(_STR); st.QuoteChar(_STR); st.LowerCaseMode(_BOOL); st.OrdinaryChar(_STR); st.SlashSlashComments(_BOOL); st.SlashStarComments(_BOOL); st.ParseNumbers(); Hashtable processedPermissions = null; lookahead = st.NextToken(); while (lookahead != StreamTokenizer.TT_EOF) { if (Peek(_STR)) { GrantEntry ge = ParseGrantEntry(processedPermissions); if (ge != null) { gr
protected void InjectIntoVolumeInformationContainer(Dictionary<string, HashSet<string>> volumeInformation, string infoKey, string altKey, CimInstance volumeInstance) { object value = GetCimPropertyValue(volumeInstance, infoKey); if (value == null) { value = GetCimPropertyValue(volumeInstance, altKey); } string characteristicName = SupportedVolumeInformation.GetVolumeInformation(infoKey); if (value != null && characteristicName != null) { var valueSet = new HashSet<string>(); if (value is string stringValue) { valueSet.Add(stringValue); } else if (value is string[] stringArray) { foreach (var item in stringArray) { valueSet.Add(item); } } volumeInformation[characteristicName] = valueSet; } }
public override void OnDetachedFromRecyclerView(RecyclerView recyclerView) { base.OnDetachedFromRecyclerView(recyclerView); mAttachedRecyclerViewPool.Remove(recyclerView); }
private void LoadFile(string filename, params AbstractFileLoader[] loaders) { ArffSortedTableModel model; this.m_Filename = filename; CreateTitle(); if (filename.Equals(_STR)) { model = null; } else { model = new ArffSortedTableModel(filename, loaders); model.SetShowAttributeIndex(GetShowAttributeIndex()); } m_TableArff.SetModel(model); SetChanged(_BOOL); CreateName(); }
private void DestinationTypeChanged() { if (m_Exp == null) return; string str = _STR; if (m_ResultsDestinationCBox.SelectedItem == DEST_DATABASE_TEXT) { m_ResultsDestinationPathLabel.Text = _STR; str = m_destinationDatabaseURL; m_BrowseDestinationButton.Enabled = _BOOL; m_BrowseDestinationButton.Text = _STR; } else { m_ResultsDestinationPathLabel.Text = _STR; if (m_ResultsDestinationCBox.SelectedItem == DEST_ARFF_TEXT || m_ResultsDestinationCBox.SelectedItem == DEST_CSV_TEXT) { int ind = m_destinationFilename.LastIndexOf(_STR); if (ind > -_NUM) { m_destinationFilename = m_destinationFilename.Substring(0, ind) + _STR; } } str = m_destinationFilename; if (m_ResultsDestinationCBox.SelectedItem == DEST_ARFF_TEXT || m_ResultsDestinationCBox.SelectedItem == DEST_CSV_TEXT) { int ind = str.LastIndexOf(_STR); if (ind > -_NUM) { str =
public static Stream TryGzipInput(Stream input) { if (!input.CanSeek) { const int NUM = 2; // substitute with appropriate value byte[] magic = new byte[NUM]; var pb = new PushbackStream(input, NUM); pb.Read(magic, 0, NUM); pb.Unread(magic, 0, NUM); if (magic[0] == 0x1F && magic[1] == 0x8B) // GZIP magic numbers { return new GZipStream(pb, CompressionMode.Decompress); } return input; } input.Position = 0; byte[] header = new byte[2]; input.Read(header, 0, 2); input.Position = 0; // Reset the stream position bool isGzip = (header[0] == 0x1F && header[1] == 0x8B); if (isGzip) { return new GZipStream(input, CompressionMode.Decompress); } return input; }
public override int GetHashCode() { return location != null ? location.GetHashCode() : _NUM; }
using System; using System.Net; public static Query NewPrefixQuery(string field, IPAddress value, int prefixLength) { if (value == null) { throw new ArgumentException("Value cannot be null."); } if (prefixLength < 0 || prefixLength > 8 * value.GetAddressBytes().Length) { throw new ArgumentException($"Invalid prefixLength: {prefixLength}."); } byte[] lower = value.GetAddressBytes(); byte[] upper = value.GetAddressBytes(); const int num = 8; // Assuming _NUM is 8, as an example for bytes. for (int i = prefixLength; i < num * lower.Length; i++) { int m = num << (num - (i & (num - 1))); lower[i >> 3] &= (byte)~m; upper[i >> 3] |= (byte)m; } try { return NewRangeQuery(field, new IPAddress(lower), new IPAddress(upper)); } catch (Exception e) { throw new InvalidOperationException("Failed to create range query.", e); } } // Placeholder for the
public static Subject CreateAMIdentitySubject(PolicyManager pm, AMIdentity user) { SubjectTypeManager mgr = pm.GetSubjectTypeManager(); Subject subject = mgr.GetSubject(_STR); HashSet<string> set = new HashSet<string>(); set.Add(user.GetUniversalId()); subject.SetValues(set); return subject; }
protected void ExpandFor(int index, double d) { if (index < size) return; int oldSize = size; int capacity = vector.Length; size = index + _NUM; if (capacity >= size) return; while (capacity < size) { capacity *= _NUM; } double[] t = new double[capacity]; Array.Copy(vector, _NUM, t, _NUM, oldSize); if (d != _NUM) { Array.Fill(t, d, oldSize, size - oldSize); } vector = t; }
private void DoNormalCommandLineList(List<string> commandLineList, List<string> jointOptions, Path classpath) { commandLineList.Add(_STR); commandLineList.Add(classpath.ToString()); if (jointCompilation) { commandLineList.Add(_STR); commandLineList.AddRange(jointOptions); } if (destDir != null) { commandLineList.Add(_STR); commandLineList.Add(destDir.Path); } if (encoding != null) { commandLineList.Add(_STR); commandLineList.Add(encoding); } if (stacktrace) { commandLineList.Add(_STR); } if (parameters) { commandLineList.Add(_STR); } if (useIndy) { commandLineList.Add(_STR); } if (scriptBaseClass != null) { commandLineList.Add(_STR); commandLineList.Add(scriptBaseClass); } if (configscript != null) { commandLineList.Add(_STR); commandLineList.Add(configscript); } }
private void LoadHexImage(IHex hex) { lock (this) { hexTileset.AssignMatch(hex, boardview); hexTileset.TrackHexImages(hex, tracker); } }
public void Triangulate(PointSet ps) { _triangulations.Clear(); _triangulations.Add(ps); Start(); }
public string Base64UrlEncode(byte[] data) { string encodedData = Convert.ToBase64String(data) .Replace("+", "-") .Replace("/", "_") .TrimEnd('='); return encodedData; }
private void WriteJavaFieldSpec(JavaFieldSpec spec, XmlDocument document, XmlElement parentElement) { XmlElement parameter = document.CreateElement(_STR); parentElement.AppendChild(parameter); parameter.SetAttribute(_STR, spec.GetPackageName()); parameter.SetAttribute(_STR, spec.GetClassName()); parameter.SetAttribute(_STR, spec.GetFieldName()); }
private void ReadObject(Stream s) { var formatter = new BinaryFormatter(); formatter.Deserialize(s); Init(GetMask(actions)); }
public override void Parse(TextReader reader, string baseURI) { if (reader == null) { throw new ArgumentException(_STR); } if (baseURI == null) { throw new ArgumentException(_STR); } InputSource inputSource = new InputSource(reader) { SystemId = baseURI }; Parse(inputSource); }
private string ExcludeDestinationStatement(string text) { int idx = -1; if ((idx = text.IndexOf(_STR)) != -1) { text = text.Substring(0, idx); } return text; }
static byte[] DiscardNonBase64(byte[] data) { byte[] groomedData = new byte[data.Length]; int bytesCopied = _NUM; for (int i = _NUM; i < data.Length; i++) { if (IsBase64(data[i])) { groomedData[bytesCopied++] = data[i]; } } byte[] packedData = new byte[bytesCopied]; Array.Copy(groomedData, _NUM, packedData, _NUM, bytesCopied); return packedData; }
protected static string AddEscapes(string str) { StringBuilder retval = new StringBuilder(); char ch; for (int i = _NUM; i < str.Length; i++) { switch (str[i]) { case _NUM: continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; default: if ((ch = str[i]) < _NUM || ch > _NUM) { string s = _STR + Convert.ToString(ch, _NUM); retval.Append(_STR + s.Substring(s.Length - _NUM, _NUM)); } else { retval.Append(ch); } continue; } } return retval.ToString(); }
public static void AddFile(string s) { var f = new FileInfo(s); AddFile(f); }
using System; using System.Collections.Generic; public class InsertHandler<T> { public void Insert(int rowIndex, params T[] newItems) { Insert(rowIndex, new List<T>(newItems)); } private void Insert(int rowIndex, List<T> newItems) { // Implementation for inserting the new items at the specified rowIndex } }
[Obsolete] public void Put(IEnumerable<int> data) { foreach (int value in data) { min = value < min ? value : min; max = value > max ? value : max; } }
public IntBuffer MajorVersionBuffer() { int[] holder = new int[_NUM]; holder[_NUM - 1] = GetMajorVersion(); IntBuffer ib = IntBuffer.Wrap(holder); ib.Limit = _NUM; return ib; }
public CreateIndexRequest Source(XContentBuilder source) { return Source(source.Bytes()); }
public static byte[] CreateDataToSign(byte[] digest) { byte[] prefix = GetDigestInfoPrefix(digest); byte[] digestInfo = new byte[prefix.Length + digest.Length]; Array.Copy(prefix, 0, digestInfo, 0, prefix.Length); Array.Copy(digest, 0, digestInfo, prefix.Length, digest.Length); return digestInfo; }
public HttpRequest IfModifiedSince(long value) { connection.SetIfModifiedSince(value); return this; }
public static string TmpJournal() { var file = Code.WrapThrow(null); file.DeleteOnExit(); return file.FullName; }
public void Push(float value) { int bits = BitConverter.ToInt32(BitConverter.GetBytes(value), 0); if (bits == _NUM || bits == _NUM || bits == _NUM) { mv.VisitInsn(Opcodes.FCONST_0 + (int)value); } else { mv.VisitLdcInsn(value); } }
public static object NewInstance(Type type, int[] dims) { const int _NUM = 1; // Assuming _NUM is defined as 1 if (dims.Length == _NUM) { dims = new int[] { _NUM }; } return Array.CreateInstance(type, dims); }
private static void DecodeAnsiX12Segment(BitSource bits, StringBuilder result) { int[] cValues = new int[_NUM]; do { if (bits.Available() == _NUM) return; int firstByte = bits.ReadBits(_NUM); if (firstByte == _NUM) return; ParseTwoBytes(firstByte, bits.ReadBits(_NUM), cValues); for (int i = _NUM; i < _NUM; i++) { int cValue = cValues[i]; if (cValue == _NUM) { result.Append(_STR); } else if (cValue == _NUM) { result.Append(_STR); } else if (cValue == _NUM) { result.Append(_STR); } else if (cValue == _NUM) { result.Append(_STR); } else if (cValue < _NUM) { result.Append((char)(cValue + _NUM)); } else if (cValue < _NUM) { result.Append((char)(cValue + _NUM)); } else { throw FormatException.
public void PlayTogether(ICollection<Animator> items) { if (items != null && items.Count > _NUM) { mNeedsSort = _BOOL; Builder builder = null; foreach (Animator anim in items) { if (builder == null) { builder = Play(anim); } else { builder.With(anim); } } } }
protected static void PrintErrorMessage(Exception e) { if (e is AbortException) { LoggingConfiguration.SetVerbose(Level.Verbose); LOG.Verbose(e.Message); } else if (e is UnspecifiedParameterException || e is ParameterException) { LOG.Error(e.Message); } else { LOG.Exception(e); } }
public string RequestStatistics() { sb.Length = _NUM; MakeStringBuffer(sb); return sb.ToString(); }
private void ApplyL1Reg(double eta_t, Vec x) { if (lambda1 > _NUM) { l1U += eta_t * lambda1; for (int k = _NUM; k < ws.Length; k++) { Vec w_k = ws[k]; double[] l1Q_k = l1Q[k]; foreach (IndexValue iv in x) { int i = iv.GetIndex(); double z = w_k.Get(i); double newW_i = _NUM; if (z > _NUM) newW_i = Math.Max(_NUM, z - (l1U + l1Q_k[i])); else if (z < _NUM) newW_i = Math.Min(_NUM, z + (l1U - l1Q_k[i])); l1Q_k[i] += (newW_i - z); w_k.Set(i, newW_i); } } } }
public override void KeyPressed(KeyEventArgs e) { lock (keyLock) { keysDown.Add(e.KeyCode); } }
public static string SlurpURLNoExceptions(Uri url, string encoding) { try { return SlurpURL(url, encoding); } catch (Exception e) { Console.WriteLine(e); return null; } }
public static MoveParticipant[] LoadMoveParticipants(RefactoringStatus status, RefactoringProcessor processor, object element, MoveArguments arguments, IParticipantDescriptorFilter filter, string[] affectedNatures, SharableParticipants shared) { RefactoringParticipant[] participants = fgMoveExtensions.GetParticipants(status, processor, element, arguments, filter, affectedNatures, shared); MoveParticipant[] result = new MoveParticipant[participants.Length]; Array.Copy(participants, _NUM, result, _NUM, participants.Length); return result; }
private long[] DeterminePreferenceVector(Relation<V> relation, ModifiableDBIDs[] neighborIDs, StringBuilder msg) { if (strategy.Equals(Strategy.APRIORI)) { return DeterminePreferenceVectorByApriori(relation, neighborIDs, msg); } else if (strategy.Equals(Strategy.MAX_INTERSECTION)) { return DeterminePreferenceVectorByMaxIntersection(neighborIDs, msg); } else { throw new InvalidOperationException(_STR); } }
private void PaintForegroundDisabled(Graphics g, int width, int height) { var s = DecodeArrowPath(width, height); g.FillShape(s, disabledColor); }
public void TestFlipBitNegativeInside1() { byte[] aBytes = { _NUM, (byte)-_NUM, _NUM, _NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, _NUM, _NUM, (byte)-_NUM, _NUM, _NUM }; int aSign = -_NUM; int number = _NUM; byte[] rBytes = { (byte)-_NUM, _NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, (byte)-_NUM, (byte)-_NUM, (byte)-_NUM, (byte)-_NUM, _NUM, _NUM, (byte)-_NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger result = aNumber.FlipBit(number); byte[] resBytes = result.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.IsTrue(resBytes[i] == rBytes[i]); } Assert.AreEqual(-_NUM, result.Sign); }
private void OnUser(TLAbsUser absUser) { User currentUser = null; User user = null; if (absUser is TLUser tlUser) { if (tlUser.IsMutualContact()) { currentUser = (User)databaseManager.GetUserById(tlUser.GetId()); user = OnUserContact(currentUser, tlUser); } else if (tlUser.IsDeleted()) { currentUser = (User)databaseManager.GetUserById(tlUser.GetId()); user = OnUserDelete(currentUser, tlUser); } else if (tlUser.IsContact()) { currentUser = (User)databaseManager.GetUserById(tlUser.GetId()); user = OnUserRequest(currentUser, tlUser); } else if (tlUser.IsSelf() || !tlUser.IsBot()) { currentUser = (User)databaseManager.GetUserById(tlUser.GetId()); user = OnUserForeign(currentUser, tlUser); } else { BotLogger.Info(LOGTAG, _STR); } } if (currentUser == null && u
public override bool HasNext() { log.Log(LogLevel.Debug, _STR); bool result = (nextEvent != null); log.Log(LogLevel.Debug, _STR, result); return result; }
public override void Close() { try { if (connection != null) { connection.Close(); } } catch (SqlException e) { Console.WriteLine(e); // You can replace this with any appropriate logging mechanism } }
public static XMPMeta ExtractXMPMeta(Stream is) { List<Section> sections = Parse(is, _BOOL); if (sections == null) { return null; } foreach (var section in sections) { if (HasXMPHeader(section.Data)) { int end = GetXMPContentEnd(section.Data); byte[] buffer = new byte[end - XMP_HEADER_SIZE]; Array.Copy(section.Data, XMP_HEADER_SIZE, buffer, 0, buffer.Length); try { XMPMeta result = XMPMetaFactory.ParseFromBuffer(buffer); return result; } catch (XMPException e) { Log.Debug(TAG, _STR, e); return null; } } } return null; }
private void Initialize(ModelValidator validator, MClient client) { if (client == null) m_globalValidators.Add(validator); m_validators.Add(validator); validator.Initialize(this, client); }
void CrossOver(BayesNetRepresentation other) { bool[] bits = new bool[m_bits.Length]; for (int i = _NUM; i < m_bits.Length; i++) { bits[i] = m_bits[i]; } int iCrossOverPoint = m_bits.Length; do { for (int i = iCrossOverPoint; i < m_bits.Length; i++) { m_bits[i] = bits[i]; } iCrossOverPoint = new Random().Next(m_bits.Length); for (int i = iCrossOverPoint; i < m_bits.Length; i++) { m_bits[i] = other.m_bits[i]; } } while (HasCycles()); CalcGlobalScore(); }
public void Reset() { EngineReset(); state = INITIAL; }
public Perspective CreateUserPerspective(string name, bool show) { Perspective perspective = model.AddPerspective(name, _BOOL); perspective.Store(context); if (show) { ShowPerspective(name); } return perspective; }
public static double Phred(double error) { return -_NUM * Math.Log10(error); }
public static string Of(CtClass type) { StringBuilder sbuf = new StringBuilder(); ToDescriptor(sbuf, type); return sbuf.ToString(); }
public abstract string Encode();
[SafeVarargs] public final Token<TokenType> Expect(params TokenType[] expected) { if (HasType(expected)) return this; throw new SimpleParserException(line, column, _STR + string.Join(", ", expected) + _STR + ToString()); }
public void TestUpdate3() { int newValue1 = -_NUM; int newValue2 = -_NUM; string updateQuery = _STR + DatabaseCreator.TEST_TABLE1 + _STR + newValue1 + _STR + newValue2; try { int num = statement.ExecuteNonQuery(updateQuery); Assert.AreEqual(_STR, numberOfRecords, num); string selectQuery = _STR + DatabaseCreator.TEST_TABLE1; using (var result = statement.ExecuteReader(selectQuery)) { while (result.Read()) { // Process results if needed } } } catch (SqlException e) { Assert.Fail(_STR + e.Message); } }
public void TestSetNull() { using (var stmt = connection.CreateCommand()) { stmt.CommandText = _STR; stmt.Parameters.Add(new SqlParameter($"param{_NUM}", _NUM)); // Assuming _NUM is the parameter index or name. stmt.Parameters.Add(new SqlParameter($"param{_NUM}", DBNull.Value)); // Sets a parameter to null (byte array) stmt.ExecuteNonQuery(); stmt.Parameters.Clear(); stmt.Parameters.Add(new SqlParameter($"param{_NUM}", _NUM)); // Re-adding the parameter stmt.Parameters.Add(new SqlParameter($"param{_NUM}", null)); // Sets a parameter to null (binary stream) stmt.ExecuteNonQuery(); stmt.Parameters.Clear(); stmt.Parameters.Add(new SqlParameter($"param{_NUM}", _NUM)); // Re-adding the parameter stmt.Parameters.Add(new SqlParameter($"param{_NUM}", DBNull.Value)); // Sets a parameter to null (string) stmt.ExecuteNonQuery(); } }
[Obsolete] public bool IsAssignableFrom(Type from) { if (from == null) { return false; // Assuming _BOOL is equivalent to false } if (type.Equals(from)) { return true; // Assuming _BOOL is equivalent to true } if (type is Type) { return rawType.IsAssignableFrom(GsonTypes.GetRawType(from)); } else if (type is ParameterizedType) { return IsAssignableFrom(from, (ParameterizedType)type, new Dictionary<string, Type>()); } else if (type is GenericArrayType) { return rawType.IsAssignableFrom(GsonTypes.GetRawType(from)) && IsAssignableFrom(from, (GenericArrayType)type); } else { throw BuildUnexpectedTypeError(type, typeof(Class), typeof(ParameterizedType), typeof(GenericArrayType)); } }
public EgDemandDetails InsertPenalty(decimal? chqBouncePenalty, Module module) { EgDemandDetails demandDetail = null; if (chqBouncePenalty.HasValue && chqBouncePenalty.Value > 0) { Installment currInstallment = GetCurrentInstallment(module); EgDemandReasonMaster egDemandReasonMaster = demandGenericDao.GetDemandReasonMasterByCode(DEMANDRSN_CODE_CHQ_BOUNCE_PENALTY, module); if (egDemandReasonMaster == null) throw new ApplicationRuntimeException(_STR); EgDemandReason egDemandReason = demandGenericDao.GetDmdReasonByDmdReasonMsterInstallAndMod(egDemandReasonMaster, currInstallment, module); if (egDemandReason == null) throw new ApplicationRuntimeException(_STR); demandDetail = EgDemandDetails.FromReasonAndAmounts(chqBouncePenalty.Value, egDemandReason, 0); } return demandDetail; }
public SampleInfo(ByteBuffer bb) { numberOfChannels = bb.GetInt32(); sampleRate = bb.GetInt32(); coeffMin = bb.GetSingle(); coeffRange = bb.GetSingle(); postEmphasis = bb.GetSingle(); residualFold = bb.GetInt32(); }
public void HandleMaintenance(Operation maintOp) { PerformPendingRequestMaintenance(); CheckAndScheduleSynchronization(this.cachedGroupState.MembershipUpdateTimeMicros); maintOp.Complete(); }
public void Clear() { oredCriteria.Clear(); orderByClause = null; distinct = _BOOL; }
public T Time<T>(Func<T> event) { var startTime = clock.Tick(); try { return event(); } finally { Update(clock.Tick() - startTime); } }
public static bool IsPostJDK7(string bytecodeVersion) { return bytecodeVersion == JDK7 || bytecodeVersion == JDK8; }
public PutIndexTemplateRequest Mapping(string type, params object[] source) { Mapping(type, PutMappingRequest.BuildFromSimplifiedDef(type, source)); return this; }
private static char[] UnpackCMap(string packed) { char[] map = new char[_NUM]; int i = _NUM; int j = _NUM; while (i < _NUM) { int count = packed[i++]; char value = packed[i++]; do { map[j++] = value; } while (--count > 0); } return map; }
private Stream FindTemplate(string path, string template) { try { var file = new FileInfo(Path.Combine(path, template)); if (file.Exists && file.Length > 0) { return new FileStream(file.FullName, FileMode.Open, FileAccess.Read, FileShare.Read); } else { return null; } } catch (FileNotFoundException) { return null; } }
public override synchronized void Initialize() { if (!mRootDirectory.Exists()) { if (!mRootDirectory.CreateSubdirectory()) { VolleyLog.e(_STR, mRootDirectory.FullName); } return; } FileInfo[] files = mRootDirectory.GetFiles(); if (files == null) { return; } foreach (FileInfo file in files) { BufferedInputStream fis = null; try { fis = new BufferedInputStream(new FileStream(file.FullName, FileMode.Open)); CacheHeader entry = CacheHeader.ReadHeader(fis); entry.Size = file.Length; PutEntry(entry.Key, entry); } catch (IOException) { if (file != null) { file.Delete(); } } finally { try { if (fis != null) { fis.Close(); } } catch (IOException ignored) { } } } }
public void AddListener(CircularProgressViewListener listener) { if (listener != null) { listeners.Add(listener); } }
public SiteStatusCheckThreadImpl() : base() { urlCheckers = new Dictionary<string, object>(); }
public override void Render(int type, Graphics2D g2, float scaling, bool isFormGlyph) { glyphDisplay.SetScalingValues(_NUM, _NUM, scaling); float oldGlyphScale = glyphScale; if (isFormGlyph) { glyphScale = scaling * glyphScale; } AffineTransform aff = null; if (glyphScale != _NUM) { aff = g2.GetTransform(); g2.Scale(glyphScale, glyphScale); } glyphDisplay.SetG2(g2); glyphDisplay.Paint(null, null, null); if (aff != null) { g2.SetTransform(aff); } glyphScale = oldGlyphScale; }
void RemoveVetoableChangeListener(string propertyName, VetoableChangeListener inVcl) { beanContextChildSupport.RemoveVetoableChangeListener(propertyName, inVcl); }
private void WriteAttribute(string prefix, string namespaceURI, string attName, string attValue, System.Xml.XmlWriter xmlWriter) { if (xmlWriter.LookupPrefix(namespaceURI) == null) { xmlWriter.WriteStartAttribute(attName, namespaceURI); xmlWriter.WriteNamespace(prefix, namespaceURI); xmlWriter.WriteEndAttribute(); } xmlWriter.WriteStartAttribute(attName, namespaceURI); xmlWriter.WriteString(attValue); xmlWriter.WriteEndAttribute(); }
public List<string> Reset(List<string> replace) { List<string> copy = new List<string>(retainedVars); retainedVars.Clear(); if (replace != null) { retainedVars.AddRange(replace); } return copy; }
protected void Release() { AppContext tempAppContext = null; lock (grabReleaseSynchronizer) { if (usageCount > _NUM) { --usageCount; } else { lock (threadGroupSynchronizer) { tempAppContext = ResetAppContext(); } } } if (tempAppContext != null) { try { tempAppContext.Dispose(); } catch (ThreadStateException e) { // Handle exception if necessary } } }
public synchronized void DeleteAllTables() { List<string> tableNames = new List<string>(tableLookup.Keys); foreach (string s in tableNames) { DeleteTable(s); } }
public PetCategory FindOne(string id) { log.Debug(_STR, id); PetCategory petCategory = petCategoryRepository.FindOne(Guid.Parse(id)); return petCategory; }
private void MarkRemovedDefaultSessionToken(string site, string token) { if (removedDefaultTokens == null) removedDefaultTokens = new Dictionary<string, HashSet<string>>(); HashSet<string> removedSet; if (!removedDefaultTokens.TryGetValue(site, out removedSet)) { removedSet = new HashSet<string>(); removedDefaultTokens[site] = removedSet; } removedSet.Add(token); }
private Dictionary<Uri, Dictionary<Uri, Dictionary<string, List<Uri>>>> CreateDeviceToCGMapFromDescriptors(List<VolumeDescriptor> addDescriptors, List<VolumeDescriptor> removeDescriptors) { var deviceToCGMap = new Dictionary<Uri, Dictionary<Uri, Dictionary<string, List<Uri>>>>(); foreach (var descr in addDescriptors) { var deviceURI = descr.GetDeviceURI(); if (!deviceToCGMap.TryGetValue(deviceURI, out var volumesToUpdateByCG)) { volumesToUpdateByCG = new Dictionary<Uri, Dictionary<string, List<Uri>>>(); deviceToCGMap[deviceURI] = volumesToUpdateByCG; } var consistencyGroupURI = descr.GetConsistencyGroupURI(); if (!volumesToUpdateByCG.TryGetValue(consistencyGroupURI, out var volumesToUpdate)) { volumesToUpdate = new Dictionary<string, List<Uri>>(); volumesToUpdateByCG[consistencyGroupURI] = volumesToUpdate; } if (!volumesToUpdate.TryGetValue(ADD_VOLUMES_TO_CG_KEY, out var volumesToAdd)) { volumesToAdd = new List<
public Exchange(Request request, Origin origin) { this.currentRequest = request; this.origin = origin; this.timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); }
public static float ComputeDiscardAlpha(float amount, float range) { if (Math.Abs(amount) < _NUM) return _NUM; float t = amount / range; t = Math.Clamp(t, -_NUM, _NUM); return _NUM - Math.Abs(t); }
public static DateTimeOffset UnixTimeToFileTime(long utime) { return DateTimeOffset.FromUnixTimeSeconds(utime); }
public static CipherTextIvMac Encrypt(string plaintext, SecretKeys secretKeys, string encoding) { byte[] plaintextBytes = System.Text.Encoding.GetEncoding(encoding).GetBytes(plaintext); return Encrypt(plaintextBytes, secretKeys); }
public void RemoveAddress(AddressEntity address) { if (!IsNewAddressAvailable()) { addresses.Remove(address); } }
protected override void OnMeasure(int widthMeasureSpec, int heightMeasureSpec) { MeasureSpecMode widthSpecMode = MeasureSpec.GetMode(widthMeasureSpec); MeasureSpecMode heightSpecMode = MeasureSpec.GetMode(heightMeasureSpec); int parentWidth = MeasureSpec.GetSize(widthMeasureSpec); int parentHeight = MeasureSpec.GetSize(heightMeasureSpec); bool resizeWidth = widthSpecMode != MeasureSpecMode.Exactly; bool resizeHeight = heightSpecMode != MeasureSpecMode.Exactly; int width = parentWidth; int height = parentHeight; if (sWidth > _NUM && sHeight > _NUM) { if (resizeWidth && resizeHeight) { width = sWidth(); height = sHeight(); } else if (resizeHeight) { height = (int)((sHeight() / (double)sWidth()) * width); } else if (resizeWidth) { width = (int)((sWidth() / (double)sHeight()) * height); } } width = Math.Max(width, GetSuggestedMinimumWidth()); height = Math.Max(height, GetSuggestedMinimumHeight()); SetMeasuredDimension(wid
protected void FireEndElement(string name) { if (m_tracer != null) { FlushMyWriter(); m_tracer.FireGenerateEvent(SerializerTrace.EVENTTYPE_ENDELEMENT, name, null); } }
private bool VerifyMigrateFromProductHome(string migrateFromProductHome) { if (migrateFromProductHome == null || migrateFromProductHome.Length == _NUM) { Debug.Log(_STR + _STR); Console.WriteLine(LocalizedMessage.Get(LOC_HR_MSG_MIGRATE_NONE_FOUND)); return _BOOL; } if (!migrateFromProductHome.Equals(ConfigUtil.GetHomePath())) { Debug.Log(_STR + _STR + migrateFromProductHome + _STR + ConfigUtil.GetHomePath()); string translateFile = migrateFromProductHome + MigrateFromInstFinderStore.GetRelativeTranslateFile(); if (!FileUtils.IsFileValid(translateFile)) { Console.WriteLine(LocalizedMessage.Get(LOC_HR_MSG_MIGRATE_NONE_FOUND)); return _BOOL; } } else { Debug.Log(_STR + _STR); throw new InstallException(LocalizedMessage.Get(LOC_DR_ERR_PRODUCT_ALREADY_MIGRATED)); } return _BOOL; }
public Spanned[] History() { int i = _NUM; Spanned[] array = new Spanned[history.Count]; foreach (string s in history) { if (s != null) { array[i] = Html.FromHtml(s); i++; } } return array; }
public static string Format(string message, object[] arguments) { return string.Format(message, arguments); }
private void InsertProsodySettings(Utterance utterance, Element element) { Element prosody = (Element)DomUtils.GetAncestor(element, MaryXML.PROSODY); if (prosody == null) { return; } Element voice = (Element)DomUtils.GetAncestor(element, MaryXML.VOICE); if (voice != null && DomUtils.IsAncestor(prosody, voice)) { return; } Element paragraph = (Element)DomUtils.GetAncestor(element, MaryXML.PARAGRAPH); if (paragraph != null && DomUtils.IsAncestor(prosody, paragraph)) { return; } foreach (string att in PROSODY_ATTRIBUTES) { string val = prosody.GetAttribute(att); if (!val.Equals(_STR)) { utterance.SetString(att, val); } } }
public static bool CreateFolder(Context mContext, string path, string folderName) { var sdCardRoot = System.IO.Path.Combine(path, folderName); if (!System.IO.Directory.Exists(sdCardRoot)) { System.IO.Directory.CreateDirectory(sdCardRoot); return true; } return false; }
private void TranslateMatrixAfterRotate(int axis, float trans, float prevImageSize, float imageSize, int prevViewSize, int viewSize, int drawableSize) { if (imageSize < viewSize) { m[axis] = (viewSize - (drawableSize * m[Matrix.MSCALE_X])) * _NUM; } else if (trans > _NUM) { m[axis] = -((imageSize - viewSize) * _NUM); } else { float percentage = (Math.Abs(trans) + (_NUM * prevViewSize)) / prevImageSize; m[axis] = -((percentage * imageSize) - (viewSize * _NUM)); } }
private string CreateTickerText(string title, string body) { var spannableStringBuilder = new System.Text.StringBuilder(); spannableStringBuilder.Append(title); spannableStringBuilder.Append(_STR); spannableStringBuilder.Append(body); // In C#, there isn't a direct equivalent to SpannableStringBuilder and its spans // However, you can format strings using other methods if necessary // Assuming _NUM is the position where you want to style text (not exactly the same but similar) // Bold logic can be added based on how you want to present it in a GUI, e.g., using rich text controls // Here, we'll just return the complete text for simplicity without styling return spannableStringBuilder.ToString(); }
private void AddProtocolIfNotExists(HashSet<string> protocols, string protocolType) { if (!protocols.Contains(protocolType)) { protocols.Add(protocolType); } }
public string ToString() { var result = new StringBuilder(); result.Append(_STR); result.Append(klazz.Name); result.Append(_STR); for (int i = _NUM; i < elements.Length; ++i) { if (i != _NUM) { result.Append(_STR); } result.Append(elements[i]); } result.Append(_STR); return result.ToString(); }
void Add(object key) { table[key] = key; }
public Configuration LoadConfigFromResource(Resource resource) { PropertiesConfiguration result = new PropertiesConfiguration(); try { result.Load(resource.GetInputStream()); return result; } catch (ConfigurationException e) { LOG.Error(string.Format(CONFIGURATION_LOAD_ERROR, resource.GetFilename()), e); throw new SystemConfigException(string.Format(CONFIGURATION_LOAD_ERROR, resource.GetFilename()), e); } catch (IOException e) { LOG.Error(string.Format(CONFIGURATION_LOAD_ERROR, resource.GetFilename()), e); throw new SystemConfigException(string.Format(CONFIGURATION_LOAD_ERROR, resource.GetFilename()), e); } }
public void Log(string filename, int lineNumber, string method, string tag, int level, string message) { var lm = new LogMessage(LogMessage.LOGMSG_TYPE_LOG, nextSequenceNumber.GetAndIncrement()); lm.AddInt16(level, LogMessage.PART_KEY_LEVEL); if (filename != null) { lm.AddString(filename, LogMessage.PART_KEY_FILENAME); if (lineNumber != _NUM) { lm.AddInt32(lineNumber, LogMessage.PART_KEY_LINENUMBER); } } if (method != null) { lm.AddString(method, LogMessage.PART_KEY_FUNCTIONNAME); } if (!string.IsNullOrEmpty(tag)) { lm.AddString(tag, LogMessage.PART_KEY_TAG); } lm.AddString(message, LogMessage.PART_KEY_MESSAGE); Log(lm); }
protected Size2D DrawVertical(Graphics2D g2, Rectangle2D chartArea) { double startX; double topSpace = _NUM; double bottomSpace = _NUM; double leftSpace = _NUM; double rightSpace = _NUM; double w = GetWidth(); double h = GetHeight(); RectangleInsets padding = GetPadding(); if (padding != null) { topSpace = padding.CalculateTopOutset(h); bottomSpace = padding.CalculateBottomOutset(h); leftSpace = padding.CalculateLeftOutset(w); rightSpace = padding.CalculateRightOutset(w); } if (GetPosition() == RectangleEdge.LEFT) { startX = chartArea.GetX() + leftSpace; } else { startX = chartArea.GetMaxX() - rightSpace - w; } VerticalAlignment alignment = GetVerticalAlignment(); double startY = _NUM; if (alignment == VerticalAlignment.CENTER) { startY = chartArea.GetMinY() + topSpace + chartArea.GetHeight() / _NUM - h / _NUM; } else i
private static PublicKey ConstructPublicKey(byte[] encodedKey, string encodedKeyAlgorithm) { PublicKey key = null; try { var keyFactory = KeyFactory.GetInstance(encodedKeyAlgorithm, "SunJCE"); var keySpec = new X509EncodedKeySpec(encodedKey); key = keyFactory.GeneratePublic(keySpec); } catch (NoSuchAlgorithmException nsae) { try { var keyFactory = KeyFactory.GetInstance(encodedKeyAlgorithm); var keySpec = new X509EncodedKeySpec(encodedKey); key = keyFactory.GeneratePublic(keySpec); } catch (NoSuchAlgorithmException nsae2) { throw new NoSuchAlgorithmException($"Algorithm not found: {encodedKeyAlgorithm}"); } catch (InvalidKeySpecException ikse2) { var ike = new InvalidKeyException("Invalid key specification."); ike.InitCause(ikse2); throw ike; } } catch (InvalidKeySpecException ikse) { var ike = new InvalidKeyException("Invalid key specification."); ike.InitCause(ikse); throw ike; } return key; }
public int NumHits(string query) { if (!m_hitCountCache.TryGetValue(query, out int count)) { var hits = Search(query); count = hits.Length; m_hitCountCache[query] = count; } return count; }
public static bool ExpressionIsTrue(double leftSide, Operator operator, double rightSide) { string expression = leftSide + operator.GetMathematicalOperator() + rightSide; return ExpressionIsTrue(expression); }
public MockResponse AddHeader(string name, object value) { return AddHeader(name + _STR + value.ToString()); }
public override Task<Optional<T>> MaxAsync(Comparator<T> comparator) { return Task.Run(() => (Optional<T>)null); }
public void Println(char v) { TextWriter outWriter = this.out; if (outWriter == null) return; try { outWriter.Write(v); outWriter.Write(_newline, 0, _newline.Length); } catch (IOException e) { log.Log(Level.Fine, e.ToString(), e); } }
public void TestWriteCorrectRejectionEmptyRecord() { IRawStore store = GetStore(); try { try { store.Write(new byte[] { }); Fail(_STR + typeof(ArgumentException).FullName); } catch (ArgumentException ex) { if (log.IsInfoEnabled) log.Info(_STR + ex); } try { byte[] buf = new byte[_NUM]; // Set position to the limit of the buffer, equivalent to ByteBuffer's position limit(). store.Write(new ArraySegment<byte>(buf, buf.Length, 0)); // The writing operation simulates buffer with position at limit. Fail(_STR + typeof(ArgumentException).FullName); } catch (ArgumentException ex) { if (log.IsInfoEnabled) log.Info(_STR + ex); } } finally { store.Destroy(); } }
public void Commit() { lock (mutex) { var temp = workingIntervals; workingIntervals = new ConcurrentDictionary<Column, HashSet<Interval>>(); availableIntervalsRef.Set(new ReadOnlyDictionary<Column, HashSet<Interval>>(temp.ToDictionary(entry => entry.Key, entry => new HashSet<Interval>(entry.Value)))); base.Columns = new HashSet<Column>(temp.Keys); } }
public void TestUpdate7() { string updateQuery = _STR + DatabaseCreator.TEST_TABLE1 + _STR + DatabaseCreator.TEST_TABLE2 + _STR; try { int num = statement.ExecuteNonQuery(updateQuery); int expectedUpdated = _NUM; Assert.AreEqual(expectedUpdated, num, _STR); string selectQuery = _STR + DatabaseCreator.TEST_TABLE1; using (var result = statement.ExecuteReader(selectQuery)) { while (result.Read()) { // do nothing, just iterate through results } } } catch (SqlException e) { Assert.Fail(_STR + e.Message); } }
public static string ExtractIndentString(string line, int tabWidth, int indentWidth) { const int _NUM = 0; // Assuming _NUM is defined as 0 const char _STR = '\t'; // Assuming _STR is defined as a tab character if (tabWidth < _NUM || indentWidth < _NUM || line == null) { throw new ArgumentException(); } int size = line.Length; int end = _NUM; int spaceEquivs = _NUM; int characters = _NUM; for (int i = _NUM; i < size; i++) { char c = line[i]; if (c == _STR) { spaceEquivs = CalculateSpaceEquivalents(tabWidth, spaceEquivs); characters++; } else if (IsIndentChar(c)) { spaceEquivs++; characters++; } else { break; } if (spaceEquivs >= indentWidth) { end += characters; characters = _NUM; if (indentWidth == _NUM) { spaceEquivs = _NUM; } else
private static string DoGetFullPath(string filename, bool includeSeparator) { if (filename == null) { return null; } int prefix = GetPrefixLength(filename); if (prefix < _NUM) { return null; } if (prefix >= filename.Length) { return includeSeparator ? GetPrefix(filename) : filename; } int index = IndexOfLastSeparator(filename); if (index < _NUM) { return filename.Substring(_NUM, prefix); } int end = index + (includeSeparator ? _NUM : _NUM); if (end == _NUM) { end++; } return filename.Substring(_NUM, end); }
private void PreInsert(MkMaxEntry q, MkMaxEntry nodeEntry, KNNHeap knns_q) { if (LOG.IsDebugging()) { LOG.DebugFine(_STR + q + _STR + nodeEntry + _STR); } double knnDist_q = knns_q.GetKNNDistance(); MkMaxTreeNode<O> node = GetNode(nodeEntry); double knnDist_node = _NUM; if (node.IsLeaf()) { for (int i = _NUM; i < node.GetNumEntries(); i++) { MkMaxEntry p = node.GetEntry(i); double dist_pq = Distance(p.GetRoutingObjectID(), q.GetRoutingObjectID()); if (dist_pq <= knnDist_q) { knns_q.Insert(dist_pq, p.GetRoutingObjectID()); if (knns_q.Size() >= GetKmax()) { knnDist_q = knns_q.GetKNNDistance(); q.SetKnnDistance(knnDist_q); } } if (dist_pq <= p.GetKnnDistance()) { KNNList knns_p = knnq.
private static bool AddIfMatches(List<string> container, string statusLine, char x, char y) { if (Matches(statusLine, x, y)) { string filename = statusLine.Substring(_NUM); if (!container.Contains(filename)) { container.Add(filename); } return _BOOL; } return _BOOL; }
public void TestDivideRoundHalfDownNeg2() { string a = _STR; int aScale = _NUM; string b = _STR; int bScale = _NUM; string c = _STR; int resScale = -_NUM; decimal aNumber = decimal.Parse(a) / (decimal)Math.Pow(10, aScale); decimal bNumber = decimal.Parse(b) / (decimal)Math.Pow(10, bScale); decimal result = Math.Round(aNumber / bNumber, resScale, MidpointRounding.ToZero); // mimic ROUND_HALF_DOWN Assert.AreEqual(c, result.ToString()); Assert.AreEqual(resScale, BitConverter.GetBytes(decimal.GetBits(result)[3])[2]); }
public static string EncodeFromString(string plain, string charset) { return Encode(Encoding.GetEncoding(charset).GetBytes(plain)); }
public void Slide(SLIDE slide) { if (slide == SLIDE.UP) { if (!IsPanelShown()) { int position = _NUM; if (items != null) { position = items.Count / _NUM; } SlideUp(position); } } else { HidePanelPickerUI(); } }
public DrawerBuilder AddStickyDrawerItems(params IDrawerItem[] stickyDrawerItems) { if (this.mStickyDrawerItems == null) { this.mStickyDrawerItems = new List<IDrawerItem>(); } this.mStickyDrawerItems.AddRange(IdDistributor.CheckIds(stickyDrawerItems)); return this; }
public bool IsDebuggingFinest() { return logger.IsLoggable(LogLevel.Finest); }
private static void Sort1(int[] x, int off, int len) { if (len < _NUM) { for (int i = off; i < len + off; i++) for (int j = i; j > off && x[j - _NUM] > x[j]; j--) Swap(x, j, j - _NUM); return; } int m = off + (len >> _NUM); if (len > _NUM) { int l = off; int n = off + len - _NUM; if (len > _NUM) { int s = len / _NUM; l = Med3(x, l, l + s, l + _NUM * s); m = Med3(x, m - s, m, m + s); n = Med3(x, n - _NUM * s, n - s, n); } m = Med3(x, l, m, n); } int v = x[m]; int a = off, b = a, c = off + len - _NUM, d = c; while (true)
public void Reset() { ns.RemoveAll(); ks.Length = _NUM; cur = tt.Root; Run(); }
[LayoutlibDelegate] static float Sin(float angle) { return (float)Math.Sin(angle); }
public static void RenderFlattenedAnnotation(PdfObject form, DynamicVectorRenderer current, int pageNumber, int rotation) { var image = AnnotationFactory.GetIcon(form); if (image != null) { var gs = new GraphicsState(); int iconHeight = image.Height; int iconWidth = image.Width; float[] rect = form.GetFloatArray(PdfDictionary.Rect); if (form.GetParameterConstant(PdfDictionary.Subtype) == PdfDictionary.Text) { rect[_NUM] += iconWidth; rect[_NUM] -= iconHeight; form.SetFloatArray(PdfDictionary.Rect, rect); } switch (rotation % _NUM) { case _NUM: gs.CTM = new float[][] { new float[] { iconWidth, _NUM, _NUM }, new float[] { _NUM, iconHeight, _NUM }, new float[] { _NUM, _NUM, _NUM } }; gs.X = rect[_NUM]; gs.Y = rect[_NUM] - iconHeight; gs.CTM[_NUM][_NUM] = rect[_NUM]; gs.CTM[_NUM][_NUM] = rect[_NUM
public byte[] ExtractData(byte[] stegoData, string stegoFileName, byte[] origSigData) { return null; }
public static string MakeRelatedSessionID(string encryptedID, SessionID prototype) { prototype.ParseSessionString(); return MakeSessionID(encryptedID, prototype.GetExtension(), prototype.Tail); }
public static GeneralPath CardinalSpline(float[] pts, int start, int npoints, float slack, bool closed) { GeneralPath path = new GeneralPath(); path.moveTo(pts[start], pts[start + _NUM]); return CardinalSpline(path, pts, start, npoints, slack, closed, _NUM, _NUM); }
public static Automaton Determinize(Automaton a, int maxDeterminizedStates) { if (a.IsDeterministic()) { return a; } if (a.GetNumStates() <= _NUM) { return a; } var builder = new Automaton.Builder(); var initialSet = new SortedIntSet.FrozenIntSet(_NUM, _NUM); builder.CreateState(); var workList = new LinkedList<SortedIntSet.FrozenIntSet>(); var newState = new Dictionary<SortedIntSet.FrozenIntSet, int>(); workList.AddLast(initialSet); builder.SetAccept(_NUM, a.IsAccept(_NUM)); newState[initialSet] = _NUM; var points = new PointTransitionSet(); var statesSet = new SortedIntSet(_NUM); var transition = new Transition(); while (workList.Count > _NUM) { var s = workList.First.Value; workList.RemoveFirst(); for (int i = _NUM; i < s.Values.Length; i++) { int s0 = s.Values[i]; int numTransitions = a.GetNumTransitions(s0
public bool Matches(string seq) { return queue.RegionMatches(_BOOL, pos, seq, _NUM, seq.Length); }
private bool FindRoot(ODEStateInterpolator interpolator, double ta, double ga, double tb, double gb) { Check(ga == _NUM || gb == _NUM || (ga > _NUM && gb < _NUM) || (ga < _NUM && gb > _NUM)); UnivariateFunction f = null; double beforeRootT = double.NaN, beforeRootG = double.NaN; double afterRootT = ta, afterRootG = _NUM; if (ta == tb) { beforeRootT = ta; beforeRootG = ga; afterRootT = ShiftedBy(beforeRootT, convergence); afterRootG = f.Value(afterRootT); } else if (ga != _NUM && gb == _NUM) { beforeRootT = tb; beforeRootG = gb; afterRootT = ShiftedBy(beforeRootT, convergence); afterRootG = f.Value(afterRootT); } else if (ga != _NUM) { double newGa = f.Value(ta); if (ga > _NUM != newGa > _NUM) { beforeRootT =
public static int Compare(IComparable c1, IComparable c2, bool nullGreater) { if (c1 == c2) { return _NUM; } else if (c1 == null) { return nullGreater ? _NUM : -_NUM; } else if (c2 == null) { return nullGreater ? -_NUM : _NUM; } return c1.CompareTo(c2); }
public bool CheckRootBySuperUserApk() { FileInfo suApk = new FileInfo(SU_APK); return suApk != null && suApk.Exists; }
int AddExpression(Expression expression) { // Method call to find the index of the expression in a single expression. // Implementation goes here... }
public bool TrackMotionScroll(int deltaY, int incrementalDeltaY) { int childCount = GetChildCount(); if (childCount == _NUM) { return _BOOL; } int firstTop = GetScrollChildTop(); int lastBottom = GetScrollChildBottom(); Rect listPadding = mListPadding; int end = GetHeight() - listPadding.bottom; int spaceAbove = listPadding.top - GetFillChildTop(); int spaceBelow = GetFillChildBottom() - end; int height = GetHeight() - GetPaddingBottom() - GetPaddingTop(); if (deltaY < _NUM) { deltaY = Math.Max(-(height - _NUM), deltaY); } else { deltaY = Math.Min(height - _NUM, deltaY); } if (incrementalDeltaY < _NUM) { incrementalDeltaY = Math.Max(-(height - _NUM), incrementalDeltaY); } else { incrementalDeltaY = Math.Min(height - _NUM, incrementalDeltaY); } int firstPosition = mFirstPosition; if (firstPosition == _NUM && firstTop
using System; using System.Collections.Generic; using System.Threading.Tasks; public static class SyncRest { public static async Task<E> SyncRestMethod<E>(IEnumerator<object> iterator, Func<Task<E>> task) { if (iterator.MoveNext()) { lock (iterator.Current) { return await SyncRestMethod(iterator, task); } } else { return await task(); } } }
private static Component FindByName(Container root, string componentName) { if (verbose) { Log(_STR + root + _STR + componentName + _STR); } int count = root.ComponentCount; for (int iter = _NUM; iter < count; iter++) { Component c = root.GetComponentAt(iter); string n = c.Name; if (n != null && n.Equals(componentName)) { return c; } if (c is Container) { c = FindByName((Container)c, componentName); if (c != null) { return c; } } } return null; }
public bool IsFingerprint(ClassTemplate classTemplate) { return fingerprintClass.Equals(classTemplate.GetImplementingClass()); }
public void WriteField(string name, float value) { WriteField(name, value.ToString()); }
private List<string> ExtractColumnKeys(string line) { List<string> keys = new List<string>(); int fieldIndex = _NUM; int start = _NUM; for (int i = _NUM; i < line.Length; i++) { if (line[i] == this.fieldDelimiter) { if (fieldIndex > _NUM) { string key = line.Substring(start, i - start); keys.Add(RemoveStringDelimiters(key)); } start = i + _NUM; fieldIndex++; } } string lastKey = line.Substring(start, line.Length - start); keys.Add(RemoveStringDelimiters(lastKey)); return keys; }
protected void DrawRhombus(int x, int y, int w, int h, Color fillColor, Paint fillPaint, Color penColor, bool shadow) { int halfWidth = w / _NUM; int halfHeight = h / _NUM; Polygon rhombus = new Polygon(); rhombus.AddPoint(x + halfWidth, y); rhombus.AddPoint(x + w, y + halfHeight); rhombus.AddPoint(x + halfWidth, y + h); rhombus.AddPoint(x, y + halfHeight); DrawPolygon(rhombus, fillColor, fillPaint, penColor, shadow); }
private void ConvertAndFillByteBufferListToByteArrayList(List<byte[]> dictionaryValues, List<Byte[]>.ByteBuffer> dictionaryValueBufferList) { foreach (var buffer in dictionaryValueBufferList) { int length = buffer.Limit(); byte[] value = new byte[length]; buffer.Get(value, 0, value.Length); dictionaryValues.Add(value); } }
using System; public static class ObjectFactory { public static object Instantiate(Type sibling, string className) { var assembly = sibling.Assembly; var cls = assembly.GetType(className); if (cls == null) { throw new TypeLoadException($"Type '{className}' not found."); } return Activator.CreateInstance(cls); } }
private byte[] GenerateDerivedKey(int bytesNeeded) { byte[] buf = new byte[digest.GetDigestSize()]; byte[] key = new byte[bytesNeeded]; int offset = _NUM; while (true) { digest.Update(password, _NUM, password.Length); digest.Update(salt, _NUM, salt.Length); digest.DoFinal(buf, _NUM); int len = (bytesNeeded > buf.Length) ? buf.Length : bytesNeeded; Array.Copy(buf, _NUM, key, offset, len); offset += len; bytesNeeded -= len; if (bytesNeeded == _NUM) { break; } digest.Reset(); digest.Update(buf, _NUM, buf.Length); } return key; }
public void TestSystemRunFinalizationReturnsEvenIfQueueIsNonEmpty() { AtomicInteger count = new AtomicInteger(); AtomicBoolean keepGoing = new AtomicBoolean(_BOOL); CreateChainedFinalizer(count, keepGoing); while (count.Get() == _NUM) { Thread.Sleep(_NUM); FinalizationTester.InduceFinalization(); } keepGoing.Set(_BOOL); Assert.IsTrue(count.Get() > _NUM); }
public synchronized void Show(Bundle options) { if (DEBUG) Log.Debug(TAG, _STR + mKeyguardView); bool enableScreenRotation = ShouldEnableScreenRotation(); MaybeCreateKeyguardLocked(enableScreenRotation, _BOOL, options); MaybeEnableScreenRotation(enableScreenRotation); int visFlags = View.STATUS_BAR_DISABLE_HOME; if (DEBUG) Log.Verbose(TAG, _STR + visFlags.ToString("X") + _STR); mKeyguardHost.SetSystemUiVisibility(visFlags); mViewManager.UpdateViewLayout(mKeyguardHost, mWindowLayoutParams); mKeyguardHost.Visibility = View.VISIBLE; mKeyguardView.Show(); mKeyguardView.RequestFocus(); }
public static int ComputeStringWidth(Graphics graphics, Font font, string str) { using (var fontMetrics = graphics.MeasureString(str, font)) { return (int)fontMetrics.Width; } }
private bool PassesSanityCheck(AccessibilityEvent event) { var afterText = GetEventText(event); var beforeText = event.GetBeforeText(); if (event.GetAddedCount() == _NUM && event.GetRemovedCount() == beforeText.Length) { return _BOOL; } if (afterText == null || beforeText == null) { return _BOOL; } int diff = event.GetAddedCount() - event.GetRemovedCount(); return (beforeText.Length + diff) == afterText.Length; }
public void ActionPerformed(ActionEvent ae) { string command = ae.ActionCommand; if (command == DisplayPaletteCmd) { if (Debug.Debugging(_STR)) { Debug.Output(GetName() + _STR); } ShowPalette(); } else if (command == HidePaletteCmd) { if (Debug.Debugging(_STR)) { Debug.Output(GetName() + _STR); } HidePalette(); } else if (command == DisplayPropertiesCmd) { Inspector inspector = new Inspector(); inspector.InspectPropertyConsumer(this); } }
public static string ToString(DateTime? data) { return data == null ? _STR : data.Value.ToString(_STR); }
[JsonCreator] public DataSourceMetadata(string name, Dictionary<string, string> properties, List<DataSegment> segments) { this.name = name; this.properties = new ReadOnlyDictionary<string, string>(properties); this.segments = new ReadOnlyCollection<DataSegment>(segments); }
public Email CreateEmail(string value) { EmailField emailImpl = new EmailField(); try { emailImpl.SetValue(value); } catch (SdpException s) { s.PrintStackTrace(); } return emailImpl; }
public AddressLookup(string serverUrl, string serialNo, string password) { this.serverUrl = serverUrl.Trim(); this.clientID = serialNo.Trim(); this.accessCode = password.Trim(); }
public void AddChangeListener(ChangeListener l) { m_ChangeListeners.Add(l); }
public Node(string permission, bool value, bool overrideValue, long expireAt, string server, string world, ContextSet contexts) { if (permission == null || permission.Equals(_STR)) { throw new ArgumentException(_STR); } if (server != null && (server.Equals(_STR, StringComparison.OrdinalIgnoreCase) || server.Equals(_STR))) { server = null; } if (world != null && world.Equals(_STR)) { world = null; } if (world != null && server == null) { server = _STR; } this.permission = permission; this.value = value; this.overrideValue = overrideValue; this.expireAt = expireAt; this.server = server; this.world = world; this.contexts = contexts == null ? ContextSet.Empty() : contexts.MakeImmutable(); }
public Cell(int rowspan, int colspan) { this.rowspan = Math.Max(rowspan, _NUM); this.colspan = Math.Max(colspan, _NUM); }
private void InitializeLocalAndTargetInfo() { targetSiteInfo = coordinator.GetTargetInfo<SiteInfo>(); if (targetSiteInfo == null) { targetSiteInfo = new SiteInfo(); try { coordinator.SetTargetInfo(targetSiteInfo, _BOOL); log.Info(_STR, targetSiteInfo); } catch (CoordinatorClientException e) { log.Info(_STR); RetrySleep(); throw e; } } localVdcPropInfo = localRepository.GetVdcPropertyInfo(); string localConfigVersion = localVdcPropInfo.GetProperty(VdcConfigUtil.VDC_CONFIG_VERSION); coordinator.SetNodeSessionScopeInfo(new VdcConfigVersion(localConfigVersion)); targetVdcPropInfo = LoadVdcConfig(); if (IsGeoUpgradeFromPreYoda()) { log.Info(_STR); localVdcPropInfo.AddProperty(VdcConfigUtil.VDC_CONFIG_VERSION, targetSiteInfo.GetVdcConfigVersion().ToString()); localRepository.SetVdcPropertyInfo(localVdcPropInfo); } else { if (localVdcPropInfo.GetProperty(VdcConfigUtil.VDC_CONFIG_VERS
public override void OpenElement(string tagName) { XMLElement newElement = new XMLElement(); newElement.SetName(tagName); current.AddChild(newElement); stack.Push(current); current = newElement; }
public Format(string pFormatString) { string[] formatVars = pFormatString.Split(new string[] { _STR }, StringSplitOptions.None); mId = int.Parse(formatVars[_NUM]); }
public bool Equals(object interval) { if (intervals == null) { return false; } return intervals.Contains(interval); }
public static string RelativeToAbsolute(string baseURL, string relativeURL) { const string _STR = "://"; if (relativeURL.StartsWith(_STR)) { return GetURLProtocol(baseURL) + _STR + GetURLHost(baseURL) + relativeURL; } else { return GetURLProtocol(baseURL) + _STR + GetURLHost(baseURL) + GetURLBasePath(baseURL) + relativeURL; } }
public void Start() { if (SetState(new HashSet<TaskState> { TaskState.INITIAL, TaskState.QUEUED }, TaskState.RUNNING)) { DHT.LogDebug(_STR + ToString()); startTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); try { serializedUpdate.Run(); } catch (Exception e) { DHT.Log(e, LogLevel.Error); } } }
public JournalIndex(IRawStore store, Checkpoint checkpoint, IndexMetadata metadata, bool readOnly) : base(store, checkpoint, metadata, readOnly) { }
private void AccessBreakpointInstruction(List<Instruction> instructions, int lineNumber, int op, BPINSTRUCTION_STATUS status) { for (int i = _NUM; i < instructions.Count; i++) { Instruction currInst = instructions[i]; if (op == _NUM) { if (currInst is MRJobInstruction currMRInst) { if (currMRInst.FindMRInstructions(lineNumber)) { BreakPointInstruction breakpoint = new BreakPointInstruction(); breakpoint.SetLocation(currInst); breakpoint.SetInstID(instID++); breakpoint.SetBPInstructionLocation(location); instructions.Insert(i, breakpoint); DMLBreakpointManager.InsertBreakpoint(breakpoint, lineNumber); return; } } else if (currInst is CPInstruction || currInst is SPInstruction) { if (currInst.GetLineNum() == lineNumber) { BreakPointInstruction breakpoint = new BreakPointInstruction(); breakpoint.SetLocation(currInst); breakpoint.SetInstID(instID++); breakpoint.SetBPInstructionLocation(location); instructions.Insert(i, breakpoint); DMLBreakpointManager.InsertBreakpoint(breakpoint, lineNumber); return; } } else i
private void CloseFile() { if (plogStream != null) { try { plogStream.Close(); logger.Info(_STR + plogFilename + _STR); } catch (IOException e) { logger.Warn(_STR + plogFilename); } finally { plogStream = null; } } }
public void NextToken() { previousLine = line; previousColumn = column; while (pos < matcher.RegionStart) { if (text[pos] == _STR) { ++line; column = _NUM; } else { ++column; } ++pos; } if (matcher.RegionStart == matcher.RegionEnd) { currentToken = _STR; } else { matcher.UsePattern(TOKEN); if (matcher.LookingAt()) { currentToken = matcher.Group(); matcher.Region(matcher.End(), matcher.RegionEnd); } else { currentToken = text[pos].ToString(); matcher.Region(pos + _NUM, matcher.RegionEnd); } } SkipWhitespace(); }
private void ParseFirstConsonant() { var enumerator = alFirstConsonants.GetEnumerator(); while (enumerator.MoveNext()) { string strFirstCon = (string)enumerator.Current; if (strSyllable.StartsWith(strFirstCon, iCurPos)) { strFirstConsonant = strFirstCon; iCurPos += strFirstCon.Length; return; } } strFirstConsonant = ZERO; }
private BuddyPanelController() { buddyPanel = new FlowLayoutPanel(); buddyPanel.SetLayout(new VerticalLayout()); model = new BuddyListModel(); var list = new BuddyPanel(model); buddyPanel.Add(list, LayoutExpand.ExpandX); }
private void RemoveGapsWithEdgeConcentration(int[] nodesLevel) { int temp = m_nodes.Count; int temp2 = graphMatrix[_NUM].Length; int tempCnt = _NUM; for (int n = _NUM; n < temp; n++) { for (int i = _NUM; i < temp2; i++) { if (graphMatrix[n][i] > _NUM) { if (nodesLevel[i] > nodesLevel[n] + _NUM) { int tempLevel = nodesLevel[n]; bool tempNodePresent = _BOOL; int k = temp; int tempnode = n; while (tempLevel < nodesLevel[i] - _NUM) { tempNodePresent = _BOOL; for (; k < graphMatrix.Length; k++) { if (graphMatrix[tempnode][k] > _NUM) { tempNodePresent = _BOOL; break; } } if (tempNodePresent) { tempnode = k; k += _NUM; tempLevel++; } else { if (tempnode != n)
public static byte[] AsUnsignedByteArray(BigInteger value) { byte[] bytes = value.ToByteArray(); if (bytes[bytes.Length - 1] == 0) { byte[] tmp = new byte[bytes.Length - 1]; Array.Copy(bytes, 0, tmp, 0, tmp.Length); return tmp; } return bytes; }
using System; using System.IO; public static TestResult ExecJavac(string toCompile, string dir, string jflexTestVersion) { Project p = new Project(); Javac javac = new Javac(); Path path = new Path(p, dir); javac.SetProject(p); javac.SetSrcdir(path); javac.SetDestdir(dir); javac.SetTarget(javaVersion); javac.SetSource(javaVersion); javac.SetSourcepath(new Path(p, _STR)); javac.SetIncludes(toCompile); Path classPath = javac.CreateClasspath(); classPath.SetPath(System.GetProperty(_STR) + _STR + jflexTestVersion + _STR + jflexTestVersion + _STR); using (MemoryStream outStream = new MemoryStream()) using (PrintStream outSafe = System.err) { System.SetErr(new PrintStream(outStream)); try { javac.Execute(); return new TestResult(System.Text.Encoding.UTF8.GetString(outStream.ToArray()), _BOOL); } catch (BuildException e) { return new TestResult(e.ToString() + System.GetProperty(_STR) + Sys
private bool ParkAndCheckInterrupt() { Thread.Sleep(Timeout.Infinite); // This simulates the blocking behavior return Thread.CurrentThread.InterruptionStatus == Thread.InterruptionStatus.Set; // Check if the thread was interrupted }
public static CLPlatform[] ListGPUPoweredPlatforms() { CLPlatform[] platforms = ListPlatforms(); List<CLPlatform> outPlatforms = new List<CLPlatform>(platforms.Length); foreach (CLPlatform platform in platforms) { if (platform.ListGPUDevices(_BOOL).Length > _NUM) { outPlatforms.Add(platform); } } return outPlatforms.ToArray(); }
public ActionRequestHelper DependsOn(ActionRequestHelper dependency) { mDependencies.Add(dependency); return this; }
static bool IsDate(object obj) { return obj is DateTime && obj.GetType() == typeof(DateTime); }
public static string ToXml(Config toConvert, bool prettyXml) { string retVal = string.Empty; using (var writer = new StringWriter()) { ToXml(toConvert, writer, prettyXml); retVal = writer.ToString(); return retVal; } }
private static List<Vector2D> BuildQuadrilateral(params Vector2D[] points) { List<Vector2D> quadrilateral = new List<Vector2D>(); foreach (Vector2D p in points) { if (!quadrilateral.Contains(p)) { quadrilateral.Add(p); } } return quadrilateral; }
private void HeapifyUp(int twoPos, IComparable cur) { while (twoPos > _NUM) { int parent = (twoPos - _NUM) >> _NUM; IComparable par = twoHeap[parent]; if (cur.CompareTo(par) <= 0) { break; } twoHeap[twoPos] = par; twoPos = parent; } twoHeap[twoPos] = cur; }
public void Insert(string key, char val) { int len = key.Length + _NUM; if (freenode + len > eq.Length) { RedimNodeArrays(eq.Length + BLOCK_SIZE); } char[] strkey = new char[len--]; key.CopyTo(_NUM, strkey, _NUM, len - _NUM); strkey[len] = '\0'; // This assumes that _NUM is equivalent to a similar null terminator in your context root = Insert(root, strkey, _NUM, val); }
void FullyUnlock() { takeLock.Unlock(); putLock.Unlock(); }
private static bool IsSubFormat(string filename) { foreach (string ext in SUB_EXTENSIONS) { if (filename.Contains(_STR + ext)) { return _BOOL; } } return _BOOL; }
void Write(Environment env, BinaryWriter out, ConstantPool tab) { out.Write((byte)ConstantType.CONSTANT_NAMEANDTYPE); out.Write((ushort)tab.Index(name)); out.Write((ushort)tab.Index(type)); }
public static void InitializeProperties(Properties properties, bool reset, bool withDefaults) { Properties defaultProp = null; if (withDefaults) { SSOToken appToken = AccessController.DoPrivileged(AdminTokenAction.GetInstance()); defaultProp = ServerConfiguration.GetDefaults(appToken); } PropertiesHolder oldProps; PropertiesHolder newProps; do { oldProps = propertiesHolderRef.Get(); Properties combined = new Properties(); if (defaultProp != null) { combined.PutAll(defaultProp); } if (!reset) { combined.PutAll(oldProps.Properties); } combined.PutAll(properties); newProps = new PropertiesHolder(Maps.FromProperties(combined)); } while (!propertiesHolderRef.CompareAndSet(oldProps, newProps)); }
public void AddNetworkListener(NetworkListener listener) { networkListeners.Add(listener); }
public static void AppendContentPrefix(HttpRequest request, StringBuilder urlBuffer) { AppendContentPrefix(request, urlBuffer, null); }
public void AddErrorListener(ErrorListener errorListener) { if (errorListeners == null) { errorListeners = new List<ErrorListener>(); } errorListeners.Add(errorListener); }
private void ValidateClassName(string className) { string nvalue = className.Trim(); if (!Regex.IsMatch(nvalue, CLASS_RE)) { throw new PropertyException("Illegal property value", this, className); } }
public static void ImportBaseTypes(CConnection connection, int rawModuleId, int moduleId) { string query = _STR + CTableNames.BASE_TYPES_TABLE + _STR + moduleId + _STR + _STR + string.Format(CTableNames.RAW_BASE_TYPES, rawModuleId); connection.ExecuteUpdate(query, _BOOL); string updateSequence = string.Format(_STR + _STR, CTableNames.BASE_TYPES_TABLE, CTableNames.BASE_TYPES_TABLE); connection.ExecuteQuery(updateSequence, _BOOL); }
using System; using Weka.Core; // Assuming the Weka core library is accessible in C# public class MatrixReader { private Element m_CurrentNode; private const bool DEBUG = true; private const string ATT_NAME = "name"; // Assuming ATT_NAME is defined [SuppressWarnings("old")] public object ReadMatrixOld(Element node) { Matrix matrix; Matrix matrixNew; if (DEBUG) { Trace(new Exception(), node.GetAttribute(ATT_NAME)); } m_CurrentNode = node; matrixNew = (Matrix)ReadMatrix(node); matrix = new Matrix(matrixNew.GetArrayCopy()); return matrix; } private object ReadMatrix(Element node) { // Implementation of ReadMatrix goes here throw new NotImplementedException(); } private void Trace(Exception ex, string attributeName) { // Implementation of Trace goes here Console.WriteLine($"Trace: {attributeName}, Exception: {ex.Message}"); } }
public void RecordFileSystemOperation(DbClient dbClient, OperationTypeEnum opType, Operation.Status status, params object[] extParam) { try { bool opStatus = (Operation.Status.Ready == status) ? _BOOL : _BOOL; string evType = opType.GetEvType(opStatus); string evDesc = opType.GetDescription(); string opStage = AuditLogManager.AUDITOP_END; _logger.Info(_STR, opType.ToString(), evType.ToString() + _STR + evDesc); URI uri = (URI)extParam[_NUM]; RecordBourneFileSystemEvent(dbClient, evType, status, evDesc, uri); AuditFile(dbClient, opType, opStatus, opStage, uri.ToString()); } catch (Exception e) { _logger.Error(_STR, opType.ToString(), e); } }
public CoreTokenException(int errorCode) { this.errorCode = errorCode; this.message = GetLocalizedMessage(CultureInfo.CurrentCulture); }
public DExamineSsl(JFrame parent, KseFrame kseFrame) : base(parent, res.GetString(_STR), Dialog.ModalityType.DocumentModal) { this.kseFrame = kseFrame; InitComponents(); }
private static List<string> ComputeDynamicVMArgs(IJavaProject javaProject) { List<string> out = new List<string>(); string devJarPath = MaybeGetDevJarPath(javaProject); if (devJarPath.Length > _NUM) { out.Add(_STR + devJarPath + _STR); } return out; }
static void Normalize(StringBuilder number) { string normalizedNumber = Normalize(number.ToString()); number.Remove(0, number.Length); number.Append(normalizedNumber); }
public double[] SkipTo(int index) { if (index == _NUM) { Array.Fill(x, _NUM); } else { int i = index - _NUM; long grayCode = i ^ (i >> _NUM); for (int j = _NUM; j < dimension; j++) { long result = _NUM; for (int k = _NUM; k <= BITS; k++) { long shift = grayCode >> (k - _NUM); if (shift == _NUM) { break; } long ik = shift & _NUM; result ^= ik * direction[j][k]; } x[j] = result; } } count = index; return NextVector(); }
public void RemoveOrganizationConfiguration(string orgName, string groupName, bool checkLegacyMode) { if (string.IsNullOrEmpty(groupName) || groupName.Length == 0) { groupName = SMSUtils.DEFAULT; } string orgdn = DNMapper.OrgNameToDN(orgName); ValidateSCM(); string odn = scm.ConstructServiceConfigDN(groupName, CreateServiceConfig.ORG_CONFIG_NODE, orgdn); CachedSMSEntry cEntry = CachedSMSEntry.GetInstance(token, odn); if (cEntry.IsNewEntry()) { return; } if (checkLegacyMode && ServiceManager.IsCoexistenceMode() && groupName.Equals(SMSUtils.DEFAULT, StringComparison.OrdinalIgnoreCase)) { OrgConfigViaAMSDK amsdk = new OrgConfigViaAMSDK(token, DNMapper.RealmNameToAMSDKName(orgdn), orgdn); amsdk.UnassignService(serviceName); } if (!cEntry.IsNewEntry()) { SMSEntry entry = cEntry.GetClonedSMSEntry(); entry.Delete(token); cEntry.Refresh(entry); } }
public void RemoveGroupListener(GroupListener listener) { groupListeners.Remove(listener); }
public SetChangelogMapping(string source, string taskName, int changelogPartitionNumber) : base(source) { SetType(TYPE); SetKey(taskName); PutMessageValue(CHANGELOG_VALUE_KEY, changelogPartitionNumber.ToString()); }
protected override string ExtractKey(string name) { string key = Unescape(name.Substring(_NUM, name.Length - _NUM)); return key.Equals(_STR) ? null : key; }
private static float Spacing(MotionEventParams eventParams) { float x = eventParams.GetX(_NUM) - eventParams.GetX(_NUM); float y = eventParams.GetY(_NUM) - eventParams.GetY(_NUM); return (float)Math.Sqrt(x * x + y * y); }
public static void TransformStringMap<K, V>(Dictionary<string, string> original, Dictionary<K, V> map, Type keyClass, Type valueClass) { MethodInfo parseKeyMethod = FindParseMethod(keyClass); MethodInfo parseValueMethod = FindParseMethod(valueClass); if (parseKeyMethod != null && parseValueMethod != null) { foreach (var toTransformEntry in original) { try { object transformedKey = parseKeyMethod.Invoke(null, new object[] { toTransformEntry.Key }); object transformedValue = parseValueMethod.Invoke(null, new object[] { toTransformEntry.Value }); if (keyClass.IsAssignableFrom(transformedKey.GetType()) && valueClass.IsAssignableFrom(transformedValue.GetType())) { map.Add((K)transformedKey, (V)transformedValue); } } catch (Exception e) { throw new PreferenceException(_STR + keyClass.FullName + _STR + valueClass.FullName + _STR, e); } } } else if (parseKeyMethod == null) { throw new PreferenceException(_STR + keyClass.FullName + _STR + va
public bool GrabInput() { if (grabLog.IsLoggable(PlatformLogger.Level.FINE)) { grabLog.Fine(_STR, this); } XToolkit.AwtLock(); try { if (XAwtState.GetGrabWindow() == this && XAwtState.IsManualGrab()) { grabLog.Fine(_STR); return _BOOL; } XBaseWindow prevGrabWindow = XAwtState.GetGrabWindow(); int eventMask = (int)(XConstants.ButtonPressMask | XConstants.ButtonReleaseMask | XConstants.EnterWindowMask | XConstants.LeaveWindowMask | XConstants.PointerMotionMask | XConstants.ButtonMotionMask); int ownerEvents = _NUM; if (!XToolkit.GetSunAwtDisableGrab()) { int ptrGrab = XlibWrapper.XGrabPointer(XToolkit.GetDisplay(), GetContentWindow(), ownerEvents, eventMask, XConstants.GrabModeAsync, XConstants.GrabModeAsync, XConstants.None, (XWM.IsMotif() ? XToolkit.ArrowCursor : XConstants.None), XConstants.CurrentTime); if (ptrGrab != XConstants.GrabSuccess) { XlibWrappe
public ComponentManager(ICollection<Sequence> generalSeeds) { HashSet<Sequence> seedSet = new HashSet<Sequence>(generalSeeds); this.gralSeeds = new ReadOnlyCollection<Sequence>(seedSet.ToList()); gralComponents = new SequenceCollection(seedSet); }
public synchronized void DeleteObservers() { observers.Clear(); }
public static byte[] Unsynchronize(byte[] source) { using (var input = new MemoryStream(source)) using (var output = new MemoryStream(source.Length)) { int count = _NUM; while (input.Position < input.Length - _NUM) { int firstByte = input.ReadByte(); count++; output.WriteByte((byte)firstByte); if ((firstByte & MPEGFrameHeader.SYNC_BYTE1) == MPEGFrameHeader.SYNC_BYTE1) { if (input.Position < input.Length - _NUM) { input.Position--; // Simulating mark and reset int secondByte = input.ReadByte(); if ((secondByte & MPEGFrameHeader.SYNC_BYTE2) == MPEGFrameHeader.SYNC_BYTE2) { if (logger.IsLoggable(Level.FINEST)) { logger.Finest(_STR + count); } output.WriteByte((byte)_NUM); } else if (secondByte == _NUM) { if (logger.IsLoggable(Level.FINEST)) { logger.Finest(_STR + count); } output.WriteByte((byte)_NUM); } input.Posit
private byte[] CalculateGeneralEncryptionKey(byte[] userPassword, byte[] firstDocIdValue, int keyBitLength, int revision, byte[] oValue, int pValue, bool encryptMetadata) { byte[] paddedPassword = PadPassword(userPassword); using (var md5 = MD5.Create()) { md5.Initialize(); md5.TransformBlock(paddedPassword, 0, paddedPassword.Length, null, 0); md5.TransformBlock(oValue, 0, oValue.Length, null, 0); md5.TransformBlock(new byte[] { (byte)(pValue & _NUM) }, 0, 1, null, 0); md5.TransformBlock(new byte[] { (byte)((pValue >> _NUM) & _NUM) }, 0, 1, null, 0); md5.TransformBlock(new byte[] { (byte)((pValue >> _NUM) & _NUM) }, 0, 1, null, 0); md5.TransformBlock(new byte[] { (byte)(pValue >> _NUM) }, 0, 1, null, 0); if (firstDocIdValue != null)
public MessageCapture(Logger logger, bool captureEntity) : this(logger, captureEntity, _BOOL) { }
public static byte[] Unzip(byte[] input) { using (var outStream = new MemoryStream(EXPECTED_COMPRESSION_RATIO * input.Length)) using (var inStream = new GZipStream(new MemoryStream(input), CompressionMode.Decompress)) { byte[] buffer = new byte[BUF_SIZE]; int size; while ((size = inStream.Read(buffer, 0, buffer.Length)) > _NUM) { outStream.Write(buffer, _NUM, size - _NUM); } return outStream.ToArray(); } }
public static void InsertIntoCombo(ComboBox combo, object item) { var model = (MutableComboBoxModel)combo.Model; if (model.Size == _NUM) { model.InsertElementAt(item, _NUM); return; } var o = model.GetElementAt(_NUM); if (o.Equals(item)) { return; } model.RemoveElement(item); model.InsertElementAt(item, _NUM); combo.SelectedIndex = _NUM; }
public synchronized object CoEntryPause(int thisCoroutine) { if (!m_activeIDs[thisCoroutine]) throw new NoSuchMethodException(); while (m_nextCoroutine != thisCoroutine) { try { Monitor.Wait(this); } catch (ThreadInterruptedException e) { // Handle interruption } } return m_yield; }
private bool PythonErrorIn(string output) { bool isError = false; string[] outputMultiline = output.Split(new string[] { "\n" }, StringSplitOptions.None); foreach (string row in outputMultiline) { if (errorInLastLine.IsMatch(row)) { isError = true; break; } } return isError; }
public static string NumberToString(object number) { if (number == null) { throw new JSONException("_STR"); } double doubleValue = Convert.ToDouble(number); JSON.CheckDouble(doubleValue); if (number.Equals(-0.0)) { return "_STR"; } long longValue = Convert.ToInt64(number); if (doubleValue == (double)longValue) { return longValue.ToString(); } return number.ToString(); }
public static Dictionary<string, string> StrToMap(string str, string delim, bool trim, string pairsSeparator) { if (str == null) return null; Dictionary<string, string> decodedMap = new Dictionary<string, string>(); var elements = str.Split(new[] { delim }, StringSplitOptions.RemoveEmptyEntries); pairsSeparator = pairsSeparator ?? _STR; foreach (var s in elements) { var e = s.Split(new[] { pairsSeparator }, StringSplitOptions.None); if (e.Length != _NUM) continue; string name = e[_NUM]; string value = e[_NUM]; if (trim) { name = name?.Trim(); value = value?.Trim(); } try { decodedMap[Uri.UnescapeDataString(name)] = Uri.UnescapeDataString(value); } catch (Exception e1) { Debug.LogError(e1); } } return decodedMap; }
public void DoStressTest(TempTripleStore tmp, InferenceEngine inf, int ntrials, int D, int N) { AbstractTripleStore store = inf.database; AssertSameGraphs(tmp, store); for (int trial = _NUM; trial < ntrials; trial++) { MDC.Put(_STR, _STR + trial); RetractAndAssert(inf, store, _NUM, D, N); AssertSameGraphs(tmp, store); MDC.Remove(_STR); } }
public virtual ISet<T> KeySet() { return new ReadOnlySet<T>(map.Keys); }
public void OnStart() { if (mAudioMirrorBuffer == null) { mAudioMirrorBuffer = new byte[_NUM]; } if (mStreamer != null) { mStreamer.Start(); } if (mInsecureStreamer != null) { mInsecureStreamer.Start(); } }
public class PropagationImp { private bool serial_; private Stack<CompositeTransaction> lineage_; private long timeout_; public PropagationImp(Stack<CompositeTransaction> lineage, bool serial, long timeout) { serial_ = serial; lineage_ = new Stack<CompositeTransaction>(lineage); timeout_ = timeout; } }
public NativeRunner(File eclipsec) { this.eclipsec = eclipsec ?? throw new ArgumentNullException(nameof(eclipsec)); }
private static string Indent(int height) { return CoreBaseBOp.Indent(height); }
public static Calendar ReduceCalendar(Calendar calendar) { calendar.Set(Calendar.Millisecond, _NUM); calendar.Set(Calendar.Second, _NUM); calendar.Set(Calendar.Minute, _NUM); calendar.Set(Calendar.Hour, _NUM); calendar.Set(Calendar.HourOfDay, _NUM); return calendar; }
public static string Surround(string str, string prefix, string suffix) { if (str.StartsWith(prefix)) { str = prefix + str; } if (str.EndsWith(suffix)) { str += suffix; } return str; }
public static Coordinate PtNotInList(Coordinate[] testPts, Coordinate[] pts) { for (int i = _NUM; i < testPts.Length; i++) { Coordinate testPt = testPts[i]; if (!IsInList(testPt, pts)) return testPt; } return null; }
public static string TrimOrPad(string str, int length, char padChar) { string result; if (str == null) { result = string.Empty; // Assuming _STR is an empty string } else { result = str; } if (result.Length > length) { return result.Substring(0, length); } while (result.Length < length) { result += padChar; } return result; }
void ScheduleToTimerPool() { if (sessionPollerPool.IsPollingEnabled()) { long timeoutTime = (session.GetLatestRefreshTime() + (session.GetMaxIdleTime() * _NUM)) * _NUM; if (sessionPollerPool.GetCacheBasedPolling()) { timeoutTime = Math.Min((session.GetLatestRefreshTime() + (session.GetMaxCachingTime() * _NUM)) * _NUM, timeoutTime); } RescheduleIfWillTimeOutBeforeExecution(timeoutTime); } else { if (sessionPollerPool.IsSessionCleanupEnabled() && WillExpire(session.GetMaxSessionTime())) { long timeoutTime = (session.GetLatestRefreshTime() + (session.GetMaxSessionTime() * _NUM)) * _NUM; RescheduleIfWillTimeOutBeforeExecution(timeoutTime); } } }
public void ResetPolicy() { mPreferences.PutString(PREF_LAST_RESPONSE, Policy.RETRY.ToString()); SetRetryUntil(DEFAULT_RETRY_UNTIL); SetMaxRetries(DEFAULT_MAX_RETRIES); SetRetryCount(long.Parse(DEFAULT_RETRY_COUNT)); SetValidityTimestamp(DEFAULT_VALIDITY_TIMESTAMP); mPreferences.Commit(); }
public CipherParameters Decrypt(byte[] inBytes, int keyLen) { return Decrypt(inBytes, _NUM, inBytes.Length, keyLen); }
private static void LogOsInfo() { Logger.AppendLog(_STR + Cfg.GetOs()); Logger.AppendLog(_STR + Os.GetOsName()); Logger.AppendLog(_STR + Os.Platform()); Logger.AppendLog(_STR + System.GetProperty(_STR)); Logger.AppendLog(_STR + HostInfo.AvailableCpus()); Logger.AppendLog(_STR + HostInfo.GetMaxMemory() + _STR); }
private void BeforeValue() { if (stack.Count == 0) { return; } Scope context = Peek(); if (context == Scope.EMPTY_ARRAY) { ReplaceTop(Scope.NONEMPTY_ARRAY); NewLine(); } else if (context == Scope.NONEMPTY_ARRAY) { output.Append(_STR); NewLine(); } else if (context == Scope.DANGLING_KEY) { output.Append(indent == null ? _STR : _STR); ReplaceTop(Scope.NONEMPTY_OBJECT); } else if (context != Scope.NULL) { throw new JSONException(_STR); } }
public static byte[] Hash(string input) { if (!string.IsNullOrEmpty(input)) { try { byte[] inputBytes = System.Text.Encoding.UTF8.GetBytes(input); return Hash(inputBytes); } catch (System.Text.EncoderFallbackException e) { Console.Error.WriteLine($"{input} - {e.Message}"); } } return null; }
public static string GenerateTransportZoneNativeGuid(string transportType, string deviceType, string fabricId) { return string.Format(_STR, transportType, _deviceTypeMap[deviceType], fabricId); }
public void TestAddServletWithNameAndJspFile() { string xml = WEBAPP_TEST_HEADER + _STR + _STR; WebXml webXml = WebXmlIo.ParseWebXml(new MemoryStream(Encoding.UTF8.GetBytes(xml)), GetEntityResolver()); WebXmlUtils.AddJspFile(webXml, _STR, _STR); Assert.IsTrue(WebXmlUtils.HasServlet(webXml, _STR)); }
public override bool Equals(object other) { return object.Equals(this.value, other); }
public static void Error(string msg, Exception t) { debugInst.Debug(IDebug.ERROR, msg, t); }
public void RemoveEventListener(SIPTransactionEventListener oldListener) { eventListeners.Remove(oldListener); }
public static ExecutionSystem NewExecutionSystem(Uri uri, IDictionary<string, object> env) { return NewExecutionSystem(uri, env, null); }
public static bool IsCommand(IElementType type) { return type == SQFTypes.COMMAND_TOKEN || type == SQFTypes.COMMAND || type == SQFTypes.CASE || type == SQFTypes.CASE_COMMAND; }
public void Send(XTraceReport report) { outgoing.Offer(report); }
public static bool StartsWithConcatenation(string str, params string[] prefixes) { int offset = 0; foreach (string prefix in prefixes) { int prefixLen = prefix.Length; if (!str.StartsWith(prefix, offset)) { return false; } offset += prefixLen; } return true; }
private static int DetermineConsecutiveDigitCount(string msg, int startpos) { int count = _NUM; // Assuming _NUM is defined elsewhere int len = msg.Length; int idx = startpos; if (idx < len) { char ch = msg[idx]; while (IsDigit(ch) && idx < len) { count++; idx++; if (idx < len) { ch = msg[idx]; } } } return count; } private static bool IsDigit(char ch) { return char.IsDigit(ch); }
public void TestOrderedByDatatype() { int lastType = int.MinValue; while (typeInfoRs.Read()) { string name = typeInfoRs.GetString(_STR); int type = typeInfoRs.GetInt32(_STR); Assert.True(type >= lastType, $"{_STR}{type}{_STR}{name}{_STR}{lastType}"); lastType = type; } }
private int MeasureShort(int measureSpec) { int result; int specMode = MeasureSpec.GetMode(measureSpec); int specSize = MeasureSpec.GetSize(measureSpec); if (specMode == MeasureSpec.EXACTLY) { result = specSize; } else { result = (int)(_NUM * mRadius + GetPaddingTop() + GetPaddingBottom() + _NUM); if (specMode == MeasureSpec.AT_MOST) { result = Math.Min(result, specSize); } } return result; }
public bool FireMapMouseClicked(MouseEvent evt) { if (DEBUG) { logger.Fine(_STR); } clickHappened = _BOOL; bool consumed = _BOOL; evt = new MapMouseEvent(GetParentMode(), evt); if (priorityListener != null && evt.ClickCount > _NUM) { priorityListener.MouseClicked(evt); consumed = _BOOL; } priorityListener = null; if (proxy == null || evt.IsShiftDown() || (proxyDistributionMask & PROXY_DISTRIB_MOUSE_CLICKED) > _NUM) { var it = GetIterator(); while (it.MoveNext() && !consumed) { MapMouseListener target = it.Current; consumed = target.MouseClicked(evt) && consumeEvents; if (consumed) { priorityListener = target; } } } bool ignoreConsumed = !consumed || (consumed && ((proxyDistributionMask & PROXY_ACK_CONSUMED_MOUSE_CLICKED) == _NUM)); if (proxy != null && ignoreConsumed && !evt.IsShiftDown()) { proxy.MouseClicked(evt); consumed = _BOOL;
public static string FormatSqlValues(params string[] values) { var builder = new StringBuilder(); for (int i = _NUM; i < values.Length; i++) { if (i > _NUM) { builder.Append(_STR); } builder.Append(_STR); builder.Append(EscapeSqlString(values[i])); builder.Append(_STR); } builder.Append(_STR); return builder.ToString(); }
private void EmitClass(DocComment comment) { string tagName = (comment.GetType() == DocComment.Class) ? _STR : _STR; xml.Append(_STR); xml.Append(tagName); xml.Append(_STR); xml.Append(comment.GetName()); xml.Append(_STR); xml.Append(comment.GetFullname()); string sourceFile = comment.GetSourceFile(); if (sourceFile != null) { xml.Append(_STR); xml.Append(sourceFile); } xml.Append(_STR); xml.Append(comment.GetNamespace()); xml.Append(_STR); xml.Append(comment.GetAccess()); xml.Append(_STR); if (comment.GetType() == DocComment.Interface) { string[] baseClasses = comment.GetBaseclasses(); if (baseClasses != null) { xml.Append(_STR); for (int i = _NUM; i < baseClasses.Length; i++) { string baseClass = baseClasses[i]; if (baseClass != null) { if (i != _NUM) xml.Append(_STR); xml.Append(baseClass); } } xml.Append(_STR); } }
protected void PaintContentBorderTopEdge(Graphics g, int x, int y, int w, int h, bool drawBroken, Rectangle selRect, bool isContentBorderPainted) { if (isContentBorderPainted) { g.Color = selectHighlight; g.FillRectangle(new SolidBrush(g.Color), x, y, w - _NUM, _NUM); } }
public void AnalyzeAllItAndWriteResults() { RunResultsLoader runDir = new RunResultsLoader(runDirectory, null); StreamWriter stream; try { stream = new StreamWriter(Path.Combine(outputDir, _STR)); } catch (FileNotFoundException e) { e.PrintStackTrace(); return; } string header = _STR; stream.WriteLine(header); double totalTTIt; double[] avgRouteTTsIt; int[] routeUsersIt; for (int i = _NUM; i <= lastIteration; i++) { log.Info(_STR + i + _STR + lastIteration + _STR); string eventsFilename = runDir.GetEventsFilename(i); EventsManager eventsManager = new EventsManagerImpl(); TtAnalyzeBraess handler = new TtAnalyzeBraess(); eventsManager.AddHandler(handler); MatsimEventsReader reader = new MatsimEventsReader(eventsManager); reader.ReadFile(eventsFilename); totalTTIt = handler.GetTotalTT(); avgRouteTTsIt = handler.CalculateAvgRouteTTs(); routeUsersIt = handler.GetRouteUsers(); StringBuilder lin
public int ExecuteUpdate(string sql) { return Util.TruncateAndConvertToInt(ExecuteLargeUpdate(sql)); }
public static long CurrentThreadTimeMillis() { return DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); }
public static Entry MakeEntry(List<string> ldifLines) { return MakeEntry(ldifLines.ToArray()); }
void ClearParserHighlights() { for (int i = _NUM; i < parserHighlights.Count; i++) { object tag = parserHighlights[i]; if (tag is LayeredHighlightInfo lhi) { if (lhi.Width > _NUM && lhi.Height > _NUM) { textArea.Invalidate(new Rectangle(lhi.X, lhi.Y, lhi.Width, lhi.Height)); } } else if (tag is HighlightInfo info) { TextUI ui = textArea.GetUI(); ui.DamageRange(textArea, info.GetStartOffset(), info.GetEndOffset()); } } parserHighlights.Clear(); }
public override short ReadShort() { dis.ReadFully(work, _NUM, _NUM); return (short)((work[_NUM] & _NUM) << _NUM | (work[_NUM] & _NUM)); }
public int Format(int val, byte[] buf, int off, int len) { if (val == int.MinValue) { if (len > ByteFormatter.NUMBER_BASE) { return Format(_STR, buf, off, len); } else { TruncationFiller(buf, off, len); return off + len; } } int pos = Math.Abs(val); int ndig = _NUM; int dmax = ByteFormatter.NUMBER_BASE; while (ndig < ByteFormatter.NUMBER_BASE && pos >= dmax) { ndig++; dmax *= ByteFormatter.NUMBER_BASE; } if (val < _NUM) { ndig++; } if (ndig > len || ndig > buf.Length - off) { TruncationFiller(buf, off, len); return off + len; } off += ndig; int xoff = off - _NUM; do { buf[xoff] = ByteFormatter.DIGITS[pos % ByteFormatter.NUMBER_BASE]; xoff--; pos /= ByteFormatter.NUMBER_BASE;
public void Append(char[] c) { int maxLength = buffer.Length - pos; if (c.Length < maxLength) { Array.Copy(c, 0, buffer, pos, c.Length); pos += c.Length; } else { Array.Copy(c, 0, buffer, pos, maxLength); curr.next = new Entity(buffer); curr = curr.next; length += buffer.Length; buffer = new char[(buffer.Length > c.Length - maxLength) ? buffer.Length : c.Length - maxLength]; if (c.Length > maxLength) { Array.Copy(c, maxLength, buffer, 0, c.Length - maxLength); pos = c.Length - maxLength; } else { pos = 0; } } }
public static bool HasPermission(Security security, GenericValue userLogin, GenericValue orderHeader) { if (userLogin == null || orderHeader == null) return _BOOL; if (security.HasEntityPermission(_STR, _STR, userLogin)) { return _BOOL; } else if (security.HasEntityPermission(_STR, _STR, userLogin)) { List<GenericValue> orderRoles = null; try { orderRoles = orderHeader.GetRelated(_STR, UtilMisc.ToMap(_STR, userLogin.GetString(_STR)), null, _BOOL); } catch (GenericEntityException e) { Debug.LogError(e, _STR, module); } if (UtilValidate.IsNotEmpty(orderRoles)) { return _BOOL; } } return _BOOL; }
private bool IsAnnotation() { return implInterfaces.Contains(_STR); }
public bool IsExceptionHandlerEquivalent(BasicBlock other) { if (exceptionHandlers != other.exceptionHandlers) { var e1 = GetExceptionHandlers().GetEnumerator(); var e2 = other.GetExceptionHandlers().GetEnumerator(); while (e1.MoveNext()) { if (!e2.MoveNext()) return false; if (e1.Current != e2.Current) return false; } if (e2.MoveNext()) return false; } return true; }
public int GetHashCode() { return name.GetHashCode(); }
public int Checksum() { return CalculateChecksum(compile_checksum.ToString()); }
public bool LongLabel() { return fState.LongLabel; }
public SecretBlock(Mario player, Group parent, int stageZone, float xPos, float yPos, float yoloWidth, Image[] hitState) { base(BLOCK_COLLISION_DATA, xPos, yPos, _NUM, _NUM, null); this.hitState = hitState[_NUM]; yoloView = new ImageView(hitState[_NUM]); yoloView.FitWidth = yoloWidth; this.parent = parent; zone = stageZone; }
private Socket OpenDataConnection(string cmd) { Socket clientSocket; if (passiveMode) { try { return OpenPassiveDataConnection(cmd); } catch (FtpProtocolException e) { string errmsg = e.Message; if (!errmsg.StartsWith(_STR) && !errmsg.StartsWith(_STR)) { throw; } } } ServerSocket portSocket; IPAddress myAddress; string portCmd; if (proxy != null && proxy.Type == ProxyType.SOCKS) { throw new FtpProtocolException(_STR); } portSocket = new ServerSocket(_NUM, _NUM, server.GetLocalAddress()); try { myAddress = portSocket.Address; if (myAddress.IsAnyLocalAddress()) { myAddress = server.GetLocalAddress(); } portCmd = _STR + (myAddress is IPAddressV6 ? _STR : _STR) + _STR + myAddress.ToString() + _STR + portSocket.LocalPort + _STR; if (!IssueCommand(portCmd) || !IssueCommand(cmd)) { portCmd = _STR;
public static bool InstallNormal(Context context, string filePath) { Intent intent = new Intent(Intent.ActionView); FileInfo file = new FileInfo(filePath); if (!file.Exists || !file.Attributes.HasFlag(FileAttributes.Normal) || file.Length <= _NUM) { return _BOOL; } intent.SetDataAndType(Android.Net.Uri.Parse(_STR + filePath), _STR); intent.AddFlags(ActivityFlags.NewTask); context.StartActivity(intent); return _BOOL; }
private void CreateInsertList(IItem item, List<IItem> tempList, List<IItem> insertList, int depth, ref int removed) { if (!tempList.Contains(item)) { tempList.Add(item); if (depth == _NUM) { insertList.Add(item); } if (item.GetItems() != null) { depth++; foreach (IItem child in item.GetItems()) { CreateInsertList(child, tempList, insertList, depth, ref removed); } } } else { insertList.Remove(item); removed++; } }
public int ReadOutlineFileMetadata(PdfObject outlinesObj, PdfObjectReader currentPdfFile) { int count = outlinesObj.GetInt(PdfDictionary.Count); PdfObject firstObj = outlinesObj.GetDictionary(PdfDictionary.First); currentPdfFile.CheckResolved(firstObj); if (firstObj != null) { var root = OutlineDataXML.CreateElement(_STR); OutlineDataXML.AppendChild(root); int level = _NUM; ReadOutlineLevel(root, currentPdfFile, firstObj, level, _BOOL); } return count; }
private int DecodeRunLength(int k) { if ((k & _NUM) == _NUM) { return ((k >> _NUM) & _NUM) ^ _NUM; } else { return BitOperations.LeadingZeroCount((uint)(k << (p + (_NUM - sp)))) + _NUM; } }
private static byte[] StreamToBytes(Stream inputStream, int length) { byte[] bytes = new byte[length]; int count; int pos = 0; while (pos < length && ( (count = inputStream.Read(bytes, pos, length - pos)) != 0)) { pos += count; } if (pos != length) { throw new IOException($"Could not read {length} bytes, only read {pos} bytes."); } return bytes; }
private bool DecodeHandshake(ByteBuffer socketBufferNew) { ByteBuffer socketBuffer; if (tmpHandshakeBytes.Capacity == _NUM) { socketBuffer = socketBufferNew; } else { if (tmpHandshakeBytes.Remaining < socketBufferNew.Remaining) { ByteBuffer buf = ByteBuffer.Allocate(tmpHandshakeBytes.Capacity + socketBufferNew.Remaining); tmpHandshakeBytes.Flip(); buf.Put(tmpHandshakeBytes); tmpHandshakeBytes = buf; } tmpHandshakeBytes.Put(socketBufferNew); tmpHandshakeBytes.Flip(); socketBuffer = tmpHandshakeBytes; } socketBuffer.Mark(); try { if (draft == null) { HandshakeState isFlashEdgeCase = IsFlashEdgeCase(socketBuffer); if (isFlashEdgeCase == HandshakeState.Matched) { try { Write(ByteBuffer.Wrap(CharsetFunctions.Utf8Bytes(wsl.GetFlashPolicy(this)))); Close(CloseFrame.FLASHPOLICY, _STR); } catch (InvalidDataException e) { Close(CloseFrame.ABNORMAL_CLOSE, _STR, _BOOL);
public NoDuplicateValueGlobalConstraint(params AbstractParameter<object, object>[] parameters) { this.parameters = parameters.ToList(); }
public RhythmOverlay InflateOverlay(string configString) { var configStrings = configString.Split(new[] { _STR }, StringSplitOptions.None).ToList(); return InflateOverlayInternal(configStrings, new Dictionary<string, string>(), _NUM); }
public static RevocationHash BruteForceHash(byte[] seed, byte[] target, int maxChildTries, int maxSiblingTries) { for (int i = _NUM; i < maxChildTries; i++) { for (int j = _NUM; j < maxSiblingTries; j++) { RevocationHash test = HashDerivation.CalculateRevocationHash(seed, _NUM, j); if (test.GetSecretHash().SequenceEqual(target)) { return new RevocationHash(i, j, test.GetSecret(), test.GetSecretHash()); } } seed = Tools.HashSecret(seed); } return null; }
public FancyLoader(ClassLoader parent) : base(parent) { try { mDexClass = parent.LoadClass(_STR); } catch (ClassNotFoundException cnfe) { // Handle exception if necessary } }
public bool IsSourceModified(Resource resource) { bool modified = _BOOL; string fileName = resource.GetName(); string path = (string)templatePaths[fileName]; FileInfo currentFile = null; for (int i = _NUM; currentFile == null && i < paths.Count; i++) { string testPath = (string)paths[i]; FileInfo testFile = new FileInfo(Path.Combine(testPath, fileName)); if (testFile.Exists) { currentFile = testFile; } } FileInfo file = new FileInfo(Path.Combine(path, fileName)); if (currentFile == null || !file.Exists) { // Do nothing } else if (currentFile.FullName == file.FullName && file.Exists) { modified = (file.LastWriteTimeUtc != resource.GetLastModified()); } return modified; }
protected void Flip(BufferCapabilities.FlipContents flipAction) { if (peer != null) { Image backBuffer = GetBackBuffer(); if (backBuffer != null) { peer.Flip(_NUM, _NUM, backBuffer.Width, backBuffer.Height, flipAction); } } else { throw new InvalidOperationException(_STR); } }
protected void LoadValue(string sValue) { try { value = byte.Parse(sValue.Trim()); } catch (FormatException) { RevertToDefault(); } }
public static Dictionary<string, string> AllNamespaces(SOAPElement ele) { var nsList = new SortedDictionary<string, string>(); log.Trace(_STR + ele.NodeName); AllNamespaces(ele, nsList); log.Trace(_STR + nsList); return nsList; }
private void DrawHook(Canvas canvas) { Path hookPath = new Path(); double sweepAngle = Math.PI / _NUM * _NUM; float y = (float)Math.Sin(sweepAngle) * GetBigCircleRadius() + rectF.Height / _NUM; float x = (float)Math.Cos(sweepAngle) * GetBigCircleRadius() + rectF.Width / _NUM; float i = GetBigCircleRadius() / _NUM; hookPath.AddRoundRect(new RectF(i + i / _NUM, i + i / _NUM, i + i / _NUM + _NUM, i + i + i / _NUM), _NUM, _NUM, Path.Direction.Ccw); hookPath.AddRoundRect(new RectF(i + i / _NUM, (i + i + i / _NUM) - _NUM, i + i / _NUM + i + i, i + i + i / _NUM + _NUM), _NUM, _NUM, Path.Direction.Ccw); Matrix matrix = new Matrix(); matrix.Reset(); int restoreCount = canvas.GetSaveCount(); hookPath.Close(); canvas.Rotate(-_NUM, rectF.CenterX
public static byte[] ToByteArray(Bitmap bitmap, Bitmap.CompressFormat format, int quality) { using (var outStream = new MemoryStream()) { bitmap.Compress(format, quality, outStream); return outStream.ToArray(); } }
public void ContinueButtonActionPerformed(System.EventArgs e) { if (testRunning && testSuspended) { testSuspended = false; // Assuming _BOOL is false if (wrapTest) { statusText1.Text = ""; // Assuming _STR is an empty string statusText1.Visible = true; // Assuming _BOOL is true } } }
[HLEFunction(nid: _NUM, version: _NUM)] public int SceNetAdhocPtpFlush(int id, int timeout, int nonblock) { return _NUM; }
public void Reset() { displayCache.Clear(); cachedID.Clear(); }
private void CopyDirectory(DirectoryInfo source, DirectoryInfo dest) { foreach (var file in source.GetFileSystemInfos()) { var sourceFile = new FileInfo(Path.Combine(source.FullName, file.Name)); var destFile = new FileInfo(Path.Combine(dest.FullName, file.Name)); if (file.Attributes.HasFlag(FileAttributes.Directory)) { destFile.Create(); // Create the directory CopyDirectory(new DirectoryInfo(sourceFile.FullName), new DirectoryInfo(destFile.FullName)); } else { CopyFile(sourceFile, destFile); } } }
private readonly object _lock = new object(); private void RebuildJournal() { lock (_lock) { if (mJournalWriter != null) { mJournalWriter.Close(); } using (var writer = new StreamWriter(new FileStream(mJournalFileTmp, FileMode.Create), new UTF8Encoding(), IO_BUFFER_SIZE)) { writer.Write(MAGIC); writer.Write(_STR); writer.Write(VERSION_1); writer.Write(_STR); writer.Write(mAppVersion.ToString()); writer.Write(_STR); writer.Write(_STR); foreach (var cacheEntry in mLruEntries.Values) { if (cacheEntry.IsUnderEdit()) { writer.Write(sACTION_LIST[ACTION_DIRTY] + _STR + cacheEntry.GetKey() + _STR + cacheEntry.GetSize() + _STR); } else { writer.Write(sACTION_LIST[ACTION_CLEAN] + _STR + cacheEntry.GetKey() + _STR + cacheEntry.GetSize() + _STR); } } } File.Move(mJournalFileTmp.FullName, mJournalFile.FullName); mJournalWriter = new StreamWri
private void RecordLogData() { try { int size = mRecordingData.Count; if (size == _NUM) { return; } List<string> recordingData = new List<string>(mRecordingData); DirectoryInfo logDir = Constants.GetRecordDir(this); logDir.Create(); FileInfo logFile = new FileInfo(Path.Combine(logDir.FullName, mRecordingFilename)); using (StreamWriter logFileWriter = new StreamWriter(logFile.FullName, _BOOL)) { for (int i = _NUM; i < size; i++) { logFileWriter.Write(recordingData[i] + _STR); mRecordingData.RemoveAt(_NUM); } } } catch (Exception e) { Console.WriteLine($"{LOG_TAG}: {_STR}{e.ToString()}"); } }
private static List<Command> LoadRewrites(string str) { if (str == null) throw new ArgumentNullException(nameof(str)); List<Command> commands = new List<Command>(); foreach (string line in str.Split(new[] { _STR }, StringSplitOptions.None)) { AddLine(commands, line); } return commands; }
public override IEnumerator<Option> ListOptions() { List<Option> newList = new List<Option>(_NUM); newList.Add(new Option(_STR, _STR, _NUM, _STR)); newList.Add(new Option(_STR, _STR, _NUM, _STR)); newList.Add(new Option(_STR, _STR, _NUM, _STR)); newList.Add(new Option(_STR, _STR, _NUM, _STR)); newList.AddRange(super.ListOptions()); return newList.GetEnumerator(); }
public override StateConnection OnCloseRead() { ConnectionProtocol request = Request(); if (request != null) { request.OnCloseRead(); } _sequenceClose.Set(_sequenceRead.Get()); if (_sequenceFlush.Get() < _sequenceClose.Get()) { _isClosePending.Set(_BOOL); if (_sequenceFlush.Get() < _sequenceClose.Get()) { return StateConnection.CLOSE_READ_S; } else { _isClosePending.Set(_BOOL); return StateConnection.CLOSE; } } else { return StateConnection.CLOSE; } }
private Dictionary<Guid, int[]> Reducers(Collection<ClusterNode> top, Dictionary<Guid, Collection<HadoopInputSplit>> mappers, int reducerCnt) { int totalWeight = _NUM; List<WeightedNode> nodes = new List<WeightedNode>(top.Count); foreach (var node in top) { var split = mappers.ContainsKey(node.Id) ? mappers[node.Id] : null; int weight = ReducerNodeWeight(node, split != null ? split.Count : _NUM); nodes.Add(new WeightedNode(node.Id, weight, weight)); totalWeight += weight; } int totalAdjustedWeight = _NUM; foreach (var node in nodes) { node.FloatWeight = ((float)node.Weight * reducerCnt) / totalWeight; node.Weight = (int)Math.Round(node.FloatWeight); totalAdjustedWeight += node.Weight; } nodes.Sort(); if (totalAdjustedWeight > reducerCnt) { var iter = nodes.Skip(nodes.Count - _NUM).ToList().AsEnumerable().Reverse().GetEnumerator(); while (totalAdjustedWeight != reducerCnt) { if (!iter.MoveN
public void HttpRequest(HttpRequestEvent e) { string request = e.GetRequest(); if (Debug.Debugging(_STR)) { Debug.Output(_STR + request + _STR); } if (request[_NUM] == _STR) { request = request.Substring(_NUM, request.Length); } int index = _NUM; index = request.IndexOf(_STR); if (index != -_NUM) { request = request.Substring(index + _NUM, request.Length); Debug.Message(_STR, _STR); } else { Debug.Message(_STR, _STR); } try { iServer.HandleRequest(request, e.GetOutputStream()); } catch (IOException ioe) { Debug.Error(_STR + ioe.Message); } catch (MapRequestFormatException exception) { string message = _STR + exception.Message + _STR + ErrorMessage; HttpConnection.WriteHttpResponse(e.GetOutputStream(), HttpConnection.CONTENT_PLAIN, message); } }
public void TestConstructorBytesNegative2() { byte[] aBytes = { (byte)-_NUM, (byte)_NUM, (byte)_NUM }; byte[] rBytes = { (byte)-_NUM, (byte)_NUM, (byte)_NUM }; BigInteger aNumber = new BigInteger(aBytes); byte[] resBytes = aNumber.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.IsTrue(resBytes[i] == rBytes[i]); } Assert.AreEqual(-_NUM, aNumber.Sign); }
public string Format(double val) { var df = GetDoubleFormat(); if (df != null) { return df.Format(val); } return val.ToString(); }
public void RemovePositions(Collection<int> positions) { List<int> positionsList = new List<int>(positions); positionsList.Sort(); positionsList.Reverse(); foreach (int position in positionsList) { mItems.RemoveAt(position); } NotifyDataSetChanged(); }
private void ResetShapeBounds() { var rrect = (RoundRectangle2D.Double)shape; rrect.SetRoundRect(_NUM, _NUM, GetBounds().Width - _NUM, GetBounds().Height - _NUM, _NUM, _NUM); }
public static Colour? AttemptToGetAsColour(string part) { Colour? col = null; try { col = (Colour)Enum.Parse(typeof(Colour), part.ToUpper()); } catch { // Ignored } return col; }
public List<Move> RemoveNonOptimal(Position pos, List<Move> moveList) { List<Move> optimalMoves = new List<Move>(); List<Move> unknownMoves = new List<Move>(); const int MATE0 = _NUM; int bestScore = -_NUM; UndoInfo ui = new UndoInfo(); foreach (Move m in moveList) { pos.MakeMove(m, ui); int pliesToDraw = Math.Max(_NUM - pos.HalfMoveClock, _NUM); GtbProbeResult res = GtbProbe(pos); pos.UnmakeMove(m, ui); if (res.Result == GtbProbeResult.UNKNOWN) { unknownMoves.Add(m); } else { int wScore; if (res.Result == GtbProbeResult.WMATE) { if (res.PliesToMate <= pliesToDraw) wScore = MATE0 - res.PliesToMate; else wScore = _NUM; } else if (res.Result == GtbProbeResult.BMATE) { if (res.PliesToMate <= plie
public int Rank() { double eps = Math.Pow(_NUM, -_NUM); double tol = Math.Max(m, n) * s[_NUM] * eps; int r = _NUM; for (int i = _NUM; i < s.Length; i++) { if (s[i] > tol) { r++; } } return r; }
protected void OnPageScrolled(int position, float offset, int offsetPixels) { if (mDecorChildCount > _NUM) { int scrollX = GetScrollX(); int paddingLeft = GetPaddingLeft(); int paddingRight = GetPaddingRight(); int width = GetWidth(); int childCount = GetChildCount(); for (int i = _NUM; i < childCount; i++) { View child = GetChildAt(i); LayoutParams lp = (LayoutParams)child.LayoutParameters; if (!lp.IsDecor) continue; int hgrav = lp.Gravity & Gravity.HorizontalGravityMask; int childLeft = _NUM; switch (hgrav) { default: childLeft = paddingLeft; break; case Gravity.Left: childLeft = paddingLeft; paddingLeft += child.Width; break; case Gravity.CenterHorizontal: childLeft = Math.Max((width - child.MeasuredWidth) / _NUM, paddingLeft); break; case Gravity.Right: childLeft = width - paddingRight - child.MeasuredWidth; paddingRight += child.MeasuredWidth; break; } childLeft
public static void ExecuteRandomModifiableVariableModification(ModifiableVariableHolder obj) { Field field = obj.GetRandomModifiableVariableField(); ExecuteModifiableVariableModification(obj, field); }
public static bool Save(FileInfo file, string content) { bool result; StreamWriter writer = null; try { writer = new StreamWriter(file.FullName); writer.Write(content); writer.Flush(); result = true; } catch (Exception e) { Console.WriteLine(e); result = false; } finally { if (writer != null) { try { writer.Close(); } catch (Exception e) { } } } return result; }
private void DeleteOldTemp(FileInfo fileCfg) { StreamReader reader = null; try { int count = _NUM; reader = new StreamReader(fileCfg.FullName); string sLine; while ((sLine = reader.ReadLine()) != null) { FileInfo file = new FileInfo(sLine); if (!file.Exists) { continue; } if (file.Delete()) { count++; } else { hsDeleteOnExit.Add(file); } } LogDebug(LogArea.CONFIG, _STR, count, fileCfg.FullName); } catch (IOException e) { // Handle exception if necessary } finally { reader?.Close(); } }
public void ProposeTree() { NodeRef i; double oldMinAge, newMinAge, newRange, oldRange, newAge, q; const int nodeCount = tree.GetNodeCount(); do { i = tree.GetNode(MathUtils.NextInt(nodeCount)); } while (tree.GetRoot() == i); NodeRef iP = tree.GetParent(i); NodeRef j = tree.GetNode(MathUtils.NextInt(nodeCount)); NodeRef k = tree.GetParent(j); while ((k != null && tree.GetNodeHeight(k) <= tree.GetNodeHeight(i)) || (i == j)) { j = tree.GetNode(MathUtils.NextInt(nodeCount)); k = tree.GetParent(j); } if (j == tree.GetRoot() || iP == tree.GetRoot()) { throw new OperatorFailedException(_STR); } if (k == iP || j == iP || k == i) { throw new OperatorFailedException(_STR); } NodeRef CiP = GetOtherChild(tree, iP, i); NodeRef PiP = tree.GetParent(iP);
public void Flush() { var cxn = tlTx.Get(); if (cxn != null) { Code.WrapThrow(null); } }
public override Bitmap JPEGToRGBImage(byte[] data, int ww, int hh, int pX, int pY) { Bitmap image = null; Raster ras = JPEGDecoder.GetRasterFromJPEG(data, _STR); if (ras != null) { ras = CleanupRaster(ras, pX, pY, componentCount); int w = ras.Width; int h = ras.Height; DataBufferByte rgb = (DataBufferByte)ras.DataBuffer; image = CreateImage(w, h, rgb.Data); } return image; }
public void Despawn(VisibleObject obj) { Despawn(obj, _BOOL); }
public string EventTopic(string eventId) { if (eventId == null) { eventId = _STR; } return evtTopic.Replace(_STR, eventId); }
public MatchResult Match() { if (!matchSuccessful) { throw new InvalidOperationException(); } return matcher.ToMatchResult(); }
using System.IO.Compression; public static void CreateProjectConstraint(ZipArchive zip, Project aProject, RepositoryService aRepository) { foreach (var entry in zip.Entries) { string entryName = NormalizeEntryName(entry); if (entryName.StartsWith(CONSTRAINTS)) { string filename = Path.GetFileName(entry.Name); ConstraintSet constraintSet = new ConstraintSet(); constraintSet.SetProject(aProject); constraintSet.SetName(filename); aRepository.CreateConstraintSet(constraintSet); using (var entryStream = entry.Open()) { aRepository.WriteConstraintSet(constraintSet, entryStream); } LOG.Info(_STR + filename + _STR + aProject.GetName() + _STR + aProject.GetId() + _STR); } } }
private static readonly object syncLock = new object(); private static void ComputePRF_SSLv3(byte[] output, byte[] secret, byte[] seed) { lock (syncLock) { if (sha == null) { Init(); } int pos = _NUM; int iteration = _NUM; byte[] digest; while (pos < output.Length) { byte[] pref = new byte[iteration]; Array.Fill(pref, (byte)(_NUM + iteration++)); sha.Update(pref); sha.Update(secret); sha.Update(seed); md5.Update(secret); md5.Update(sha.Digest()); digest = md5.Digest(); if (pos + _NUM > output.Length) { Array.Copy(digest, _NUM, output, pos, output.Length - pos); pos = output.Length; } else { Array.Copy(digest, _NUM, output, pos, _NUM); pos += _NUM; } } } }
public string Decode(string pString) { if (pString == null) { return null; } try { return Decode(pString, GetDefaultCharset()); } catch (System.Text.EncoderFallbackException e) { throw new DecoderException(e.Message); } }
public Operation CopyTo(Extent target) { BlockTransformExtent extent = new BlockTransformExtent(original, transform, worldData.GetBlockRegistry()); ForwardExtentCopy copy = new ForwardExtentCopy(extent, original.GetRegion(), original.GetOrigin(), target, original.GetOrigin()); copy.SetTransform(transform); return copy; }
[CallerSensitive] public Type ForClass() { if (cl == null) { return null; } RequireInitialized(); if (SecurityManager.GetSecurityManager() != null) { Type caller = Reflection.GetCallerClass(); if (ReflectUtil.NeedsPackageAccessCheck(caller.GetClassLoader(), cl.GetClassLoader())) { ReflectUtil.CheckPackageAccess(cl); } } return cl; }
private void PathStyleHelper(string style, string offset) { if (style == null) { return; } if (style.Equals(_STR)) { strokePaint.SetPathEffect(null); return; } string[] tokens = style.Split(new[] { _STR }, StringSplitOptions.RemoveEmptyEntries); int count = tokens.Length; float[] intervals = new float[(count & _NUM) == _NUM ? count * _NUM : count]; float max = _NUM; float current = _NUM; int i = _NUM; foreach (var token in tokens) { intervals[i++] = current = ToFloat(token, current); max += current; } for (int start = _NUM; i < intervals.Length; i++, start++) { max += intervals[i] = intervals[start]; } float off = _NUM; if (offset != null) { try { off = float.Parse(offset) % max; } catch (FormatException) { // Ignore parsing error } } strokePaint.SetPathEffect(new DashPathEffect(intervals, off));
private float ColorToAngle(int color) { float[] colors = new float[_NUM]; Color.ColorToHSV(color, colors); return (float)(Math.PI / 180 * -colors[_NUM - 1]); }
private Size ParseOldBoundedSize(string token, bool setMax) { int semicolonIndex = token.IndexOf(_STR); string sizeToken1 = token.Substring(_NUM, semicolonIndex); string sizeToken2 = token.Substring(semicolonIndex + _NUM, token.Length - _NUM); Size size1 = ParseAtomicSize(sizeToken1); Size size2 = ParseAtomicSize(sizeToken2); if (IsConstant(size1)) { if (size2 is Sizes.ComponentSize) { return new BoundedSize(size2, setMax ? null : size1, setMax ? size1 : null); } throw new ArgumentException(_STR); } if (IsConstant(size2)) { return new BoundedSize(size1, setMax ? null : size2, setMax ? size2 : null); } throw new ArgumentException(_STR); }
public Builder AddEncodedQueryParameter(string encodedName, string encodedValue) { if (encodedName == null) throw new ArgumentException("Encoded name cannot be null"); if (encodedQueryNamesAndValues == null) encodedQueryNamesAndValues = new List<string>(); encodedQueryNamesAndValues.Add(Canonicalize(encodedName, QUERY_COMPONENT_ENCODE_SET, true, true)); encodedQueryNamesAndValues.Add(encodedValue != null ? Canonicalize(encodedValue, QUERY_COMPONENT_ENCODE_SET, true, true) : null); return this; }
private static a CreateImageLink(string AD_Language, string name, string js_command, bool enabled, bool pressed) { a img = new a(_STR, CreateImage(AD_Language, name)); if (!pressed || !enabled) img.SetID(_STR); else img.SetID(_STR); if (js_command == null) js_command = _STR; if (js_command.Length > _NUM && enabled) { if (js_command.StartsWith(_STR)) img.SetOnClick(js_command); else img.SetOnClick(_STR + name + _STR + js_command + _STR); } img.SetClass(_STR); img.SetOnMouseOver(_STR + name + _STR); img.SetOnMouseOut(_STR); img.SetOnBlur(_STR); return img; }
public Namespace(PrincipalUser creator, string qualifier, PrincipalUser owner, HashSet<PrincipalUser> users) : base(creator) { SetQualifier(qualifier); SetOwner(owner); if (users != null && users.Count > 0) { SetUsers(users); } AddUser(owner); }
public int DecrementAndGet() { return Interlocked.Add(ref unsafeValue, -_NUM) - _NUM; }
public void Update(long dt, float ratioY) { double step = _NUM * Math.PI / POINTS_PER_CIRCLE; angle += dt * BUBBLE_D_ANGLE; float fromX = startX + (float)( _NUM * Math.Sin(angle) ); float toX = fromX + size; float fromY = this.fromY + dt * speed; float toY = fromY + size; centerY += dt * virtualSpeed; getColor()[_NUM] = (TOP_Y - centerY / TOP_Y); vertexBuffer.Put(_NUM, Utils.NormalizeGl(_NUM, fromX, toX)); vertexBuffer.Put(_NUM, Utils.NormalizeGl(centerY * ratioY, fromY, toY)); for (int i = _NUM; i <= POINTS_PER_CIRCLE; i++) { vertexBuffer.Put(COORDS_PER_VERTEX * i, Utils.NormalizeGl((float)Math.Sin(-Math.PI + step * i), fromX, toX)); vertexBuffer.Put(COORDS_PER_VERTEX * i + _NUM, Utils.NormalizeGl((float)Math.Cos(-Math.PI + step * i) * ratioY, fro
public void Clear() { if (Gwt.IsScript()) { jsArray.Clear(); } else { javaArray.Clear(); } }
void FullyLock() { putLock.Lock(); takeLock.Lock(); }
public override void Clear() { var files = mRootDirectory.GetFiles(); if (files != null) { foreach (var file in files) { file.Delete(); } } mEntries.Clear(); VolleyLog.D(_STR); }
private void UpdatePodcastPublicationDateAndLastMediaUrl(Episode episode, Podcast podcast) { DateTime? podcastPublicationDate = podcast.GetPublicationDate(); bool episodePubDateIsMoreRecent = episode.GetPublicationDate() != null && (!podcastPublicationDate.HasValue || podcastPublicationDate < episode.GetPublicationDate()); if (episodePubDateIsMoreRecent) { podcast.SetPublicationDate(episode.GetPublicationDate()); podcast.SetLastEpisodeMediaUrl(episode.GetMediaUrl()); } }
private void RemoveOurUIs() { foreach (string uiName in UI_LIST) { uiDefaults.Remove(uiName + _STR); } }
public void MakeImmutable() { // Method implementation for validating a write set against the current ground state and ensuring that writes are not detected by the isolated view. }
public static KNNQuery<O> PrecomputedKNNQuery<O>(Database database, Relation<O> relation, DistanceQuery<O> dq, int k) { KNNQuery<O> knnq = database.GetKNNQuery(dq, k, DatabaseQuery.HINT_HEAVY_USE, DatabaseQuery.HINT_OPTIMIZED_ONLY, DatabaseQuery.HINT_NO_CACHE); if (knnq is PreprocessorKNNQuery) { return knnq; } var preproc = new MaterializeKNNPreprocessor<O>(relation, dq.GetDistanceFunction(), k); preproc.Initialize(); return preproc.GetKNNQuery(dq, k); }
public static SortedSet<int> AdjustPosition(HashSet<int> positions, int startPosition, int endPosition, int adjustBy) { SortedSet<int> newPositions = new SortedSet<int>(); foreach (int entry in positions) { int position = entry; if (position < startPosition || position > endPosition) { newPositions.Add(position); } else if (adjustBy > _NUM) { newPositions.Add(position + adjustBy); } else if (adjustBy < _NUM) { if (position > startPosition + adjustBy && position <= startPosition) { // Do nothing } else { newPositions.Add(position + adjustBy); } } } return newPositions; }
private static void AddId(StringBuilder buf, byte[] id) { buf.Append(_STR); bool backslash = _BOOL; foreach (byte b in id) { buf.Append((char)(b & _NUM)); if (b == _STR && backslash) { buf.Append(_STR); } else { backslash = (b == _STR); } } buf.Append(_STR); }
private ResolvedMigration CreateAvailableMigration(int version) { ResolvedMigration migration = new ResolvedMigration(); migration.SetVersion(MigrationVersion.FromVersion(version.ToString())); migration.SetDescription(_STR); migration.SetScript(_STR); migration.SetType(MigrationType.CQL); return migration; }
public void Comment(string data) { m_docIsEmpty = _BOOL; int length = data.Length; if (length > m_charsBuff.Length) { m_charsBuff = new char[length * _NUM + _NUM]; } data.CopyTo(0, m_charsBuff, 0, length); Comment(m_charsBuff, 0, length); }
public bool DrawImage(Image img, Matrix xform, IImageObserver observer) { if (img == null) { return _BOOL; } if (xform == null || xform.IsIdentity()) { return DrawImage(img, _NUM, _NUM, null, observer); } if (IsHiDPIImage(img)) { int w = img.Width; int h = img.Height; Matrix tx = new Matrix(xform); // Make a copy of the transform Transform(xform); bool result = DrawHiDPIImage(img, _NUM, _NUM, w, h, _NUM, _NUM, w, h, null, observer); xform.SetTransform(tx); // Restore the original transform InvalidateTransform(); return result; } try { return imagepipe.TransformImage(this, img, xform, observer); } catch (InvalidPipeException) { try { RevalidateAll(); return imagepipe.TransformImage(this, img, xform, observer); } catch (InvalidPipeException) { return _BOOL; } } final
public void BeginDisplay(DisplayEvent event) { base.BeginDisplay(event, _BOOL); ResetButtonState(TBL_BUTTON_DELETE); AgentsModel model = (AgentsModel)GetModel(); string agentType = GetDisplayIDType(); object[] param = { agentType }; ptModel.SetPageTitleText(model.GetLocalizedString(_STR + agentType)); ptModel.SetPageTitleHelpMessage(model.GetLocalizedString(_STR + agentType + _STR)); tblModel.SetTitle(string.Format(model.GetLocalizedString(_STR), param)); tblModel.SetTitleLabel(string.Format(model.GetLocalizedString(_STR), param)); tblModel.SetSummary(string.Format(model.GetLocalizedString(_STR), param)); tblGroupModel.SetTitle(string.Format(model.GetLocalizedString(_STR), param)); tblGroupModel.SetTitleLabel(string.Format(model.GetLocalizedString(_STR), param)); tblGroupModel.SetSummary(string.Format(model.GetLocalizedString(_STR), param)); GetAgentNames(); CCButton b = (CCButton)GetChild(TBL_BUTTON_DELETE); b.SetDisabled(_BOOL); b = (CCButton)GetChild(TBL_BUTTON_DELETE_GROUP); b.SetDisabled(_BOOL); }
public void SelectAll() { Array.Fill(selArray, _BOOL); }
public NvpBuilder AddRaw(string name, string value) { npv[name] = value; return this; }
public override int Length() { return set.Count; }
public long ReadUnsignedInt() { mPosition += _NUM; d.ReadFully(w, _NUM, _NUM); return ((long)(w[_NUM]) << _NUM | (w[_NUM] & _NUM) << _NUM | (w[_NUM] & _NUM) << _NUM | (w[_NUM] & _NUM)) & _NUM; }
public List<CountryRO> ViewAddressCountryOptions(ShoppingCart cart, Shop shop, string addressType) { var countries = addressBookFacade.GetAllCountries(shop.Code, addressType); return Map(countries, typeof(CountryRO), typeof(Country)); }
public void AddPauseListener(AnimatorPauseListener listener) { if (mPauseListeners == null) { mPauseListeners = new List<AnimatorPauseListener>(); } mPauseListeners.Add(listener); }
public override void MakeImmutable() { if (mutable) { if (attrs != null) { foreach (var attr in attrs) { attr.MakeImmutable(); } attrs = attrs.AsReadOnly(); } if (encAttrs != null) { encAttrs = encAttrs.AsReadOnly(); } mutable = false; } }
public override bool BatchFinished() { if (GetInputFormat() == null) { throw new InvalidOperationException(_STR); } Instances toFilter = GetInputFormat(); if (!IsFirstBatchDone()) { Instances toFilterIgnoringAttributes = RemoveIgnored(toFilter); FileInfo file = GetSerializedClustererFile(); if (!file.Attributes.HasFlag(FileAttributes.Directory)) { using (ObjectInputStream ois = new ObjectInputStream(new FileStream(file.FullName, FileMode.Open))) { m_ActualClusterer = (Clusterer)ois.ReadObject(); Instances header = null; try { header = (Instances)ois.ReadObject(); } catch (Exception e) { // Handle exception if necessary } if (header != null && !header.EqualHeaders(toFilterIgnoringAttributes)) { throw new WekaException(_STR + header.EqualHeadersMsg(toFilterIgnoringAttributes)); } } } else { m_ActualClusterer = AbstractClusterer.MakeCopy(m_Clusterer); m_ActualClusterer.BuildClusterer(toFilterIgnoringAttributes); } Instances filtered = new Instan
public void AddComponent(T component) { components.Add(component); }
public static UiResult OpenUrl(Uri uri) { return OpenUrl(uri.ToString()); }
public void InvalidateLine(int line) { int y = textArea.LineToY(line) + fm.GetMaxDescent() + fm.GetLeading(); Repaint(_NUM, y, GetWidth(), fm.GetHeight()); }
public ByteBandedRaster(SampleModel sampleModel, Point origin) : this( sampleModel, sampleModel.CreateDataBuffer(), new Rectangle(origin.X, origin.Y, sampleModel.GetWidth(), sampleModel.GetHeight()), origin, null) { }
private void Initialize(Uri other) { m_scheme = other.Scheme; m_userinfo = other.UserInfo; m_host = other.Host; m_port = other.Port; m_path = other.AbsolutePath; m_queryString = other.Query; m_fragment = other.Fragment; }
public void PlayTogether(IEnumerable<Animator> items) { if (items != null && items.Count() > _NUM) { mNeedsSort = _BOOL; Builder builder = null; foreach (var anim in items) { if (builder == null) { builder = Play(anim); } else { builder.With(anim); } } } }
private E UnlinkLast() { Node<E> l = last; if (l == null) return default(E); Node<E> p = l.prev; E item = l.item; l.item = default(E); l.prev = l; last = p; if (p == null) first = null; else p.next = null; --count; notFull.Signal(); return item; }
static bool IsRefreshNotificationRegistered(NotificationListener client, RefreshNotificationType type) { bool isRegistered = false; Dictionary<RefreshNotificationType, int> notifications = null; lock (refreshClients) { notifications = refreshClients[client] as Dictionary<RefreshNotificationType, int>; } if (notifications != null) { if (notifications.TryGetValue(type, out int timerNotificationId)) { isRegistered = true; } } return isRegistered; }
private ICollection<string> ReadProcessOutput(Process proc) { using (var rdr = new StreamReader(proc.StandardOutput.BaseStream)) { var res = new List<string>(); string s; while ((s = rdr.ReadLine()) != null) { res.Add(s); } return res; } }
public void FillHeaderAndFooter(HttpRequest request, HttpResponse response, Dictionary<string, object> dataModel) { FillHeader(request, response, dataModel); FillFooter(dataModel); }
public void AddOperand(ISpacePredicate operand) { if (_operandsList == null) { _operandsList = new List<ISpacePredicate>(); } _operandsList.Add(operand); }
public static string Decode(string s, Type t) { if (s == null) { throw new ArgumentException(); } int n = s.Length; if (n == _NUM) { return s; } if (s.IndexOf(_STR) < _NUM) { if (t == Type.QUERY_PARAM) { if (s.IndexOf(_STR) < _NUM) { return s; } } else { return s; } } else { if (n < _NUM) { throw new ArgumentException(_STR); } if (s[n - _NUM] == _STR) { throw new ArgumentException(_STR + (n - _NUM)); } } if (t == null) { return Decode(s, n); } switch (t) { case Type.HOST: return DecodeHost(s, n); case Type.QUERY_PARAM: return DecodeQueryParam(s, n); default: return Decode(s, n); } }
public decimal CalculateTotalCollectedAmt(BillReceiptInfo bri, List<EgBillDetails> billDetList) { return bri.GetTotalAmount(); }
public void Skip(int count) { int skipCount = Math.Min(limit - position, count); while (_BOOL) { position += skipCount; count -= skipCount; if (count == 0) break; skipCount = Math.Min(count, capacity); Require(skipCount); } }
public void TestConcurrentModificationInsert() { BTree btree; { IndexMetadata md = new IndexMetadata(Guid.NewGuid()); md.SetBranchingFactor(_NUM); btree = BTree.Create(new SimpleMemoryRawStore(), md); btree.Insert(_NUM, _STR); btree.Insert(_NUM, _STR); btree.Insert(_NUM, _STR); } { ITupleCursor2<string> cursor = NewCursor(btree); Assert.AreEqual(new TestTuple<string>(_NUM, _STR), cursor.Seek(_NUM)); Assert.AreEqual(new TestTuple<string>(_NUM, _STR), cursor.Tuple()); btree.Insert(_NUM, _STR); Assert.AreEqual(TestKeyBuilder.AsSortKey(_NUM), cursor.CurrentKey()); Assert.AreEqual(new TestTuple<string>(_NUM, _STR), cursor.Tuple()); Assert.AreEqual(new TestTuple<string>(_NUM, _STR), cursor.Prior()); Assert.AreEqual(new TestTuple<string>(_NUM, _STR), cursor.Tuple()); btree.Remove(_NUM); Assert.IsNull(cursor.Tuple()); Assert.AreEqual(TestKeyBuilder.AsSortKey(_NUM), cursor.CurrentKey()); Assert.AreEqual(new T
public void RemoveAllIms() { ims.Clear(); }
static string EscapeStringForASCII(string s) { string outStr = string.Empty; char[] cArray = s.ToCharArray(); for (int i = 0; i < cArray.Length; i++) { char c = cArray[i]; if (c > 127) { outStr += "\\u"; string hex = ((int)c).ToString("x"); while (hex.Length < 4) hex = "0" + hex; outStr += hex; } else if (c == '\\') { outStr += "\\\\"; } else if (c == '\"') { outStr += "\\\""; } else if (c == '\'') { outStr += "\\\'"; } else if (c == '\n') { outStr += "\\n"; } else if (c == '\r') { outStr += "\\r"; } else if (c == '\t') { outStr += "\\t"; } else { outStr += c; } } return outStr; }
public void CopyReader(string encoding, TextReader reader) { base.SetContentEncoding(encoding); string s = ReadString(reader); content = System.Text.Encoding.GetEncoding(encoding).GetBytes(s); }
private void ClearDictionaryCache() { var dictionaryCaches = surrogateKeyGen.GetDictionaryCaches(); var reverseDictionaries = new List<Dictionary>(dictionaryCaches.Values); for (int i = _NUM; i < reverseDictionaries.Count; i++) { var dictionary = reverseDictionaries[i]; dictionary.Clear(); } }
public static string ToTypeString(object[] arguments, int maxSize) { const string _STR = ""; // Assuming _STR represents an empty string const int _NUM = 0; // Assuming _NUM represents 0 if (arguments == null) { return _STR; } StringBuilder argBuf = new StringBuilder(); for (int i = _NUM; i < arguments.Length; i++) { if (maxSize != -_NUM && argBuf.Length > maxSize) { argBuf.Append(_STR); break; } else { if (i > _NUM) { argBuf.Append(_STR); } argBuf.Append(arguments[i] != null ? TypeName(arguments[i]) : _STR); } } return argBuf.ToString(); } private static string TypeName(object obj) { return obj.GetType().Name; // Example implementation of typeName }
public bool RenameFile(FileInfo oldFile, FileInfo newFile) { lock (fileCache) { if (oldFile.MoveTo(newFile.FullName) != null) { ValidateFileCache(); return true; } return false; } }
public Task ExecuteAsync(CameraCommand command) { if (mClosed) { return Task.FromResult((object)null); } lock (mLock) { if (mExecutor == null) { mExecutor = mExecutorProvider.Get(); } CheckNotNull(mExecutor); return mExecutor.Submit(new CommandRunnable(command)); } }
public static EnumSet<KindName> KindNames(int kind) { EnumSet<KindName> kinds = EnumSet.NoneOf<KindName>(); if ((kind & VAL) != _NUM) kinds.Add(( (kind & VAL) == VAR ) ? KindName.VAR : KindName.VAL); if ((kind & MTH) != _NUM) kinds.Add(KindName.METHOD); if ((kind & TYP) != _NUM) kinds.Add(KindName.CLASS); if ((kind & PCK) != _NUM) kinds.Add(KindName.PACKAGE); return kinds; }
public int Length() { return text.Length; }
public static string SerializeDigestResponse(Dictionary<string, string> paramMap) { StringBuilder sb = new StringBuilder(_STR); bool prefixComma = _BOOL; foreach (var entry in paramMap) { if (prefixComma) { sb.Append(_STR); } else { prefixComma = _BOOL; } sb.Append(entry.Key); sb.Append(_STR); sb.Append(entry.Value); } return sb.ToString(); }
public void PopulateCombos(Activity activity, Listener listener) { List<string> services = GetServices(activity.PackageManager); PopulateCombos(activity, services, listener); }
protected JsonEncoding FindEncoding(MediaType mediaType, IDictionary<string, IList<object>> httpHeaders) { return JsonEncoding.UTF8; }
using System.Drawing; public static Bitmap ConvertImage(Bitmap image) { switch (image.PixelFormat) { case System.Drawing.Imaging.PixelFormat.Format32bppArgb: return image; case System.Drawing.Imaging.PixelFormat.Format32bppRgb: // Note: C# does not have a direct equivalent to coerceData, so this step is skipped. return image; } Bitmap convertedImage = new Bitmap(image.Width, image.Height, System.Drawing.Imaging.PixelFormat.Format32bppArgb); using (Graphics g = Graphics.FromImage(convertedImage)) { g.Clear(Color.FromArgb(255, 255, 255, 255)); // Replace _NUM with appropriate alpha values and color values g.DrawImage(image, 0, 0); } return convertedImage; }
public long Start() { long startTime = DateTimeOffset.Now.ToUnixTimeMilliseconds(); return startTime; }
public void Next() { if (iterator.HasNext()) { View currentView = iterator.Next(); if (IsUsingDefaultListener()) currentView.SetOnClickListener(null); if (iterator.NextIndex() < mViews.Count) { View nextView = mViews[iterator.NextIndex()]; if (IsUsingDefaultListener()) nextView.SetOnClickListener(listener); ControllerAnimator animator = GetDefaultForwardAnimation(); animator.SetOldView(currentView); animator.SetNewView(nextView); currentView.StartAnimation(animator); if (iterator.NextIndex() == mViews.Count - _NUM) { if (HasControllerListener()) mListener.OnEndReached(); } } else { if (mLoop) { iterator = mViews.ListIterator(); View nextView = mViews[_NUM]; if (mUseDefaultListener) nextView.SetOnClickListener(listener); ControllerAnimator animator = GetDefaultForwardAnimation(); animator.SetOldView(currentView); animator.SetNewView(nextView); currentView.StartAnimation(animator); } } } }
private bool IsHHSign(string str) { bool sign = false; // Assuming _BOOL is false as the default try { char r = (char)int.Parse(str); } catch (FormatException) { sign = false; // Assuming _BOOL is false on exception } return sign; }
public void SimulateMethod(SootMethod method, ReferenceVariable thisVar, ReferenceVariable returnVar, ReferenceVariable[] params) { string subSignature = method.GetSubSignature(); if (subSignature.Equals("_STR")) { SunMiscUnsafeAllocateInstance(method, thisVar, returnVar, params); return; } DefaultMethod(method, thisVar, returnVar, params); return; }
public void CacheResolvedMethod(Type clas, Type[] types, MethodInfo method) { if (Interpreter.DEBUG) Interpreter.Debug(_STR + clas + _STR + method); SignatureKey sk = new SignatureKey(clas, method.Name, types); if (method.IsStatic) resolvedStaticMethods[sk] = method; else resolvedObjectMethods[sk] = method; }
public void TestSetBitTopPositive() { byte[] aBytes = { _NUM, -_NUM, _NUM, _NUM, -_NUM, _NUM, _NUM }; int aSign = _NUM; int number = _NUM; byte[] rBytes = { _NUM, -_NUM, _NUM, -_NUM, _NUM, _NUM, -_NUM, _NUM, _NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger result = aNumber.SetBit(number); byte[] resBytes = result.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.True(resBytes[i] == rBytes[i]); } Assert.Equal(_NUM, result.Sign); }
private void DestroyBeans(Dictionary<string, object> viewMap, Dictionary<string, ViewScopeContextObject> contextMap) { List<string> removalNameList = new List<string>(); if (contextMap != null) { foreach (var entry in contextMap) { string passivationCapableId = entry.Key; Contextual contextual = beanManager.GetPassivationCapableBean(passivationCapableId); ViewScopeContextObject contextObject = entry.Value; CreationalContext creationalContext = beanManager.CreateCreationalContext(contextual); contextual.Destroy(viewMap[contextObject.Name], creationalContext); removalNameList.Add(contextObject.Name); } foreach (var name in removalNameList) { viewMap.Remove(name); } contextMap.Clear(); } }
public static void Close(System.IO.Stream outputStream) { if (outputStream == null) { return; } try { outputStream.Close(); } catch (System.IO.IOException) { // Handle exception as needed } }
public Node Item(int index) { return (nodes != null && index < nodes.Count) ? (Node)nodes[index] : null; }
private int CharToVisibleWidth(char c, JdkConstants.FontStyle fontType, int currentX) { if (c == _STR) { return _NUM; } if (c == _STR) { return EditorUtil.NextTabStop(currentX, this) - currentX; } return EditorUtil.CharWidth(c, fontType, this); }
public static void CreateDir(string targetPath) { var targetDir = new DirectoryInfo(targetPath); if (!targetDir.Exists && !targetDir.Create().Exists && !targetDir.Exists) { throw new AdeUsageException(_STR + targetDir.FullName); } }
public GTSEncoder(long baseTimestamp) { this.baseTimestamp = baseTimestamp; this.stream = new MemoryStream(); this.wrappingKey = null; }
public static string Encode(Coordinate[] coords) { long lastLat = _NUM; long lastLng = _NUM; StringBuilder result = new StringBuilder(); foreach (var point in coords) { long lat = (long)Math.Round(point.Y * _NUM); long lng = (long)Math.Round(point.X * _NUM); long dLat = lat - lastLat; long dLng = lng - lastLng; Encode(dLat, result); Encode(dLng, result); lastLat = lat; lastLng = lng; } return result.ToString(); }
private void ExtractWeightValues(List<Synapse> synapses) { int exWeights = _NUM; int inWeights = _NUM; foreach (var s in synapses) { double w = s.GetStrength(); if (w > _NUM) { exWeights++; } else { inWeights++; } } weights[_NUM] = new double[exWeights]; weights[_NUM] = new double[inWeights]; exWeights = _NUM; inWeights = _NUM; if (weights[_NUM].Length != _NUM) { foreach (var s in synapses) { double w = s.GetStrength(); if (w > _NUM) { weights[_NUM][exWeights++] = w; } else { weights[_NUM][inWeights++] = w; } } } }
public override void Close() { try { Flush(); } catch (AMLogException ale) { Debug.Error(tableName + _STR + ale.Message); } if (conn != null) { try { conn.Close(); } catch (SQLException ce) { Debug.Error(tableName + _STR, ce); } } StopBufferTimer(); }
public bool Contains(List<int> hashes) { IEnumerator<int> ni = hashes.GetEnumerator(); for (int i = _NUM; i < hashFunctions; ++i) { if (!TestBit((ni.Current & _NUM) % (filter.Length * _NUM))) { return _BOOL; } ni.MoveNext(); } return _BOOL; }
private void EnsureCapacity(int additionalData) { if ((this.position + additionalData) > this.byteBuffer.Length) { int newLength = (int)(this.byteBuffer.Length * _NUM); if (newLength < (this.byteBuffer.Length + additionalData)) { newLength = this.byteBuffer.Length + (int)(additionalData * _NUM); } if (newLength < this.byteBuffer.Length) { newLength = this.byteBuffer.Length + additionalData; } byte[] newBytes = new byte[newLength]; Array.Copy(this.byteBuffer, _NUM, newBytes, _NUM, this.byteBuffer.Length); this.byteBuffer = newBytes; } }
public bool IsValidNumber(PhoneNumber number) { string regionCode = GetRegionCodeForNumber(number); return IsValidNumberForRegion(number, regionCode); }
private string TrimUrl(string uri) { if (uri == null) return _STR; if (uri.EndsWith(_STR)) uri = uri.Substring(_NUM, uri.Length - _NUM); return uri; }
public Pair<int, List<long>> Next() { try { classesProcessed++; int key = iterator.Next(); long pos = classificationBlockRMA2.GetPos(key); int count = classificationBlockRMA2.GetSum(key); classDumpReader.Seek(pos); List<long> list = new List<long>(); for (int i = _NUM; i < count; i++) { list.Add(classDumpReader.ReadLong()); } return new Pair<int, List<long>>(key, list); } catch (Exception e) { Basic.Caught(e); error = _BOOL; return null; } }
public static string AddAlpha(string originalColor, double alpha) { long alphaFixed = (long)Math.Round(alpha * _NUM); string alphaHex = alphaFixed.ToString("x"); if (alphaHex.Length == _NUM) { alphaHex = _STR + alphaHex; } originalColor = originalColor.Replace(_STR, _STR + alphaHex); return originalColor; }
public void Stop() { server.Stop(_NUM); }
protected DateTimeData Parse(string str, int durationType) { int len = str.Length; DateTimeData date = new DateTimeData(str, this); int start = _NUM; char c = str[start++]; if (c != _STR && c != _STR) { throw new SchemaDateTimeException(); } else { date.utc = (c == _STR) ? _STR : _NUM; if (c == _STR && str[start++] != _STR) { throw new SchemaDateTimeException(); } } int negate = _NUM; if (date.utc == _STR) { negate = -_NUM; } bool designator = _BOOL; int endDate = IndexOf(str, start, len, _STR); if (endDate == -_NUM) { endDate = len; } else if (durationType == YEARMONTHDURATION_TYPE) { throw new SchemaDateTimeException(); } int end = IndexOf(str, start, endDate, _STR); if (end != -_NUM) {
private void CopyIntoLocalState(Operand[] localState) { this.localState = new Operand[localState.Length]; Array.Copy(localState, _NUM, this.localState, _NUM, localState.Length); SetLocalKnown(); }
private Dictionary<string, DBObject> LoadDBObjects(Type objectClass) { Dictionary<string, DBObject> objectMap = new Dictionary<string, DBObject>(); DBObject dbObject = new DBObject(this, objectClass); string objectToLoad = s_logger.LocalizeMessage(_STR); string objectsToLoad = s_logger.LocalizeMessage(_STR); string sqlLoadHeaders = null; string sqlLoadContents = null; if (dbObject != null) { objectToLoad = dbObject.GetObjectType(); objectsToLoad = dbObject.GetObjectTypes(); sqlLoadHeaders = dbObject.GetLoadHeaderSQL(); sqlLoadContents = dbObject.GetLoadContentSQL(); } s_logger.Log(LogLevel.Fine, _STR, new object[] { objectsToLoad, GetDirection() }); PreparedStatementWrapper stmtLoadHeaders = SetPreparedStatement(sqlLoadHeaders); PreparedStatementWrapper stmtLoadContents = SetPreparedStatement(sqlLoadContents); int counter = _NUM; if (dbObject != null) { string sql = dbObject.GetLoadObjectSQL(); Statement stmt = SetStatement(); ResultSet rs = ExecuteQuery(stmt, sql); while (
protected object AttemptReadResponse(Connection cnx) { Message msg = CreateResponseMessage(); if (msg != null) { msg.SetComms(cnx.GetSocket(), cnx.GetInputStream(), cnx.GetOutputStream(), cnx.GetCommBuffer(), cnx.GetStats()); if (msg is ChunkedMessage) { try { return ProcessResponse(msg, cnx); } finally { msg.UnsetComms(); ProcessSecureBytes(cnx, msg); } } else { try { msg.Recv(); } finally { msg.UnsetComms(); ProcessSecureBytes(cnx, msg); } return ProcessResponse(msg, cnx); } } else { return null; } }
public synchronized bool Add(E e, bool hasNext) { while (mInternalQueue.Count >= mMaxSize && !mClosed) { Monitor.PulseAll(this); try { Monitor.Wait(this, TIMEOUT); } catch (ThreadInterruptedException e1) { mClosed = true; ProgramState.CheckAbort(); throw new InvalidOperationException("Error occurred", e1); } ProgramState.CheckAbort(); } if (mClosed) { return false; } bool wasEmpty = mInternalQueue.Count == 0; mHasNext = hasNext; mInternalQueue.Add(e); if (wasEmpty) { Monitor.PulseAll(this); } return true; }
public TranslatableComponent() { }
public void AddPart(int index, PduPart part) { if (part == null) { throw new ArgumentNullException(); } PutPartToMaps(part); mParts.Insert(index, part); }
public StrBuilder Insert(int index, bool value) { ValidateIndex(index); if (value) { EnsureCapacity(size + _NUM); Array.Copy(buffer, index, buffer, index + _NUM, size - index); buffer[index++] = _STR; buffer[index++] = _STR; buffer[index++] = _STR; buffer[index] = _STR; size += _NUM; } else { EnsureCapacity(size + _NUM); Array.Copy(buffer, index, buffer, index + _NUM, size - index); buffer[index++] = _STR; buffer[index++] = _STR; buffer[index++] = _STR; buffer[index++] = _STR; buffer[index] = _STR; size += _NUM; } return this; }
public bool HasNatureAndWeapon(Nature nature, string weapon) { return this.nature == nature && ((weapon == null && this.weapon == null) || (weapon != null && weapon.Equals(this.weapon))); }
public void Dump(string infoMsg) { storage.GetOnlineMembers(); storage.GetOfflineMembers(); storage.GetOfflineAndEqualMembers(); storage.GetMyInitializingID(); storage.GetMyPersistentID(); StringBuilder buf = new StringBuilder(_NUM); if (infoMsg != null) { buf.Append(infoMsg); buf.Append(_STR); } buf.Append(_STR); buf.Append(storage.GetMyPersistentID()); buf.Append(_STR); buf.Append(storage.GetMyInitializingID()); buf.Append(_STR); foreach (PersistentMemberID id in storage.GetOnlineMembers()) { buf.Append(_STR); buf.Append(id); buf.Append(_STR); } buf.Append(_STR); foreach (PersistentMemberID id in storage.GetOfflineMembers()) { buf.Append(_STR); buf.Append(id); buf.Append(_STR); } buf.Append(_STR); foreach (PersistentMemberID id in storage.GetOfflineAndEqualMembers()) { buf.Append(_STR); buf.Append(id); buf.Append(_STR); } logger.Debug(buf.ToString()); }
private Node<K, V> FindNode(object key) { if (key == null) throw new ArgumentNullException(); Comparator<? super K> cmp = comparator; outer: for (;;) { for (Node<K, V> b = FindPredecessor(key, cmp), n = b.next;;) { object v; int c; if (n == null) break outer; Node<K, V> f = n.next; if (n != b.next) break; if ((v = n.value) == null) { n.HelpDelete(b, f); break; } if (b.value == null || v == n) break; if ((c = Cpr(cmp, key, n.key)) == _NUM) return n; if (c < _NUM) break outer; b = n; n = f; } } return null; }
public static Sort ParseSort(long timestampSec, IndexState state, List<object> fields, List<string> sortFieldNames, Dictionary<string, FieldDef> dynamicFields) { List<SortField> sortFields = new List<SortField>(); foreach (var _sub in fields) { Request sub = (Request)_sub; string fieldName = sub.GetString(_STR); SortField sf; if (sortFieldNames != null) { sortFieldNames.Add(fieldName); } if (fieldName.Equals(_STR)) { sf = SortField.FIELD_DOC; } else if (fieldName.Equals(_STR)) { sf = SortField.FIELD_SCORE; } else { FieldDef fd; if (dynamicFields != null) { dynamicFields.TryGetValue(fieldName, out fd); } else { fd = null; } if (fd == null) { fd = state.GetField(fieldName); } if (fd == null) { sub.Fail(_STR, _STR + fieldName + _STR);
public synchronized void Open() { }
private Optional<TypeConversion> FindConversionFromDbValue(Type source, Type target) { if (IsAssignable(target, source)) { return Optional.Of(TypeConversion.Identity()); } Optional<TypeConversion> directConversion = typeConversionRegistry.FindConversionFromDbValue(source, target); if (directConversion.IsPresent()) { return directConversion; } Optional<TypeConversion> arrayConversion = FindArrayConversion(source, target); if (arrayConversion.IsPresent()) { return arrayConversion; } Optional<TypeConversion> optionalConversion = FindOptionalConversion(source, target); if (optionalConversion.IsPresent()) { return optionalConversion; } Optional<TypeConversion> enumConversion = FindEnumConversion(target); if (enumConversion.IsPresent()) { return enumConversion; } return Optional.Empty(); }
private bool AdvanceApiUpTo(SortedSet<AreaPanelInfo> sortedApiTree, AreaPanelInfo api, int time) { AreaPanel ap = api.Ap(); TimeTree rootTt = ap.GetTimeTree(); TimeTree tt = rootTt.GetEncompassingTimeTreeOrMaxTimeTreeBeforeTime(time, true); if (tt == null || tt.Id == api.CurrTtId) return true; sortedApiTree.Remove(api); if (api.SetTt(tt, int.MaxValue)) { sortedApiTree.Add(api); } return true; }
[HttpPost] [Route("{_STR}/{_STR}")] public ActionResult<RestWrapper> Update([FromForm] UserRoles userRoles, IFormFileCollection files, [FromServices] IModelValidatorFactory modelValidatorFactory, [FromServices] IUserRolesDAO userRolesDAO, [FromServices] ILogger<YourController> logger, ClaimsPrincipal principal) { RestWrapper restWrapper = null; var validationResults = new List<ValidationResult>(); var validationContext = new ValidationContext(userRoles); bool isValid = Validator.TryValidateObject(userRoles, validationContext, validationResults, true); if (!isValid) { var bindingResultError = new BindingResultError(); return bindingResultError.ErrorMessage(validationResults); } try { var jpaUserRoles = new UserRoles(); jpaUserRoles.UserRoleId = userRoles.UserRoleId; jpaUserRoles.Role = userRoles.Role; var users = new Users(); users.Username = userRoles.Username; jpaUserRoles.Users = users; userRolesDAO.Update(jpaUserRoles); restWrapper = new RestWrapper(userRo
private void SendRequestOption() { string request = _STR + mParameters.host + _STR + mParameters.port + mParameters.path + _STR + AddHeaders(); Console.WriteLine(request.Substring(_NUM, request.IndexOf(_STR))); mOutputStream.Write(System.Text.Encoding.UTF8.GetBytes(request), 0, request.Length); Response.ParseResponse(mBufferedReader); }
public override Result DoComparisonTest(Properties properties) { long timeout = long.Parse(properties.GetProperty(TestOptions.TIMEOUT)); int nresources = int.Parse(properties.GetProperty(TestOptions.NRESOURCES)); int minLocks = int.Parse(properties.GetProperty(TestOptions.MIN_LOCKS)); int maxLocks = int.Parse(properties.GetProperty(TestOptions.MAX_LOCKS)); int ntrials = int.Parse(properties.GetProperty(TestOptions.NTRIALS)); int keyLen = int.Parse(properties.GetProperty(TestOptions.KEYLEN)); int nops = int.Parse(properties.GetProperty(TestOptions.NOPS)); double failureRate = double.Parse(properties.GetProperty(TestOptions.FAILURE_RATE)); Result result = DoConcurrentClientTest(journal, timeout, nresources, minLocks, maxLocks, ntrials, keyLen, nops, failureRate); return result; }
public static void PrintThreadInfo(StreamWriter stream, string title) { const int STACK_DEPTH = _NUM; bool contention = threadBean.IsThreadContentionMonitoringEnabled(); long[] threadIds = threadBean.GetAllThreadIds(); stream.WriteLine(_STR + title); stream.WriteLine(threadIds.Length + _STR); foreach (long tid in threadIds) { ThreadInfo info = threadBean.GetThreadInfo(tid, STACK_DEPTH); if (info == null) { stream.WriteLine(_STR); continue; } stream.WriteLine(_STR + GetTaskName(info.GetThreadId(), info.GetThreadName()) + _STR); ThreadState state = info.GetThreadState(); stream.WriteLine(_STR + state); stream.WriteLine(_STR + info.GetBlockedCount()); stream.WriteLine(_STR + info.GetWaitedCount()); if (contention) { stream.WriteLine(_STR + info.GetBlockedTime()); stream.WriteLine(_STR + info.GetWaitedTime()); } if (state == ThreadState.Waiting) { stream.WriteLine(_STR + info.GetLockName()); } e
public void AddDelete(IResource delete) { if (fDelete == null) { fDelete = new List<IResource>(_NUM); } fDelete.Add(delete); if (fIgnoreCount == _NUM) { InternalAdd(new DeleteDescription(delete)); } }
public static double Max(double a, double b) { if (a > b) { return a; } if (a < b) { return b; } if (a != b) { return double.NaN; } long bits = BitConverter.DoubleToInt64Bits(a); if (bits == _NUM) // Note: _NUM needs to be defined or replaced with appropriate logic if needed { return b; } return a; }
public void AddContainer(ImageContainer container) { mContainers.Add(container); }
public override void WriteExternal(IObjectOutput out) { base.WriteExternal(out); out.WriteObject(approximation); }
public void Add(string methodName, List<Expression> parameters) { chain.Add(new DotExpressionItem(methodName, parameters, _BOOL)); }
public static Request Request() { return threadLocal.Value; }
public static string CreateHash(string password) { return CreateHash(password.ToCharArray()); }
private void ScheduleCommercial(int length) { long? delay = commercialDelay.GetSettingValue(); if (delay == null) { SetCommercialResult(_STR); ClearCommercialButtonsSelection(); } else { scheduledCommercialTime = DateTimeOffset.Now.ToUnixTimeMilliseconds() + delay.Value * _NUM; scheduledCommercialLength = length; Update(); } }
public int GetHashCode() { long bits = BitConverter.DoubleToInt64Bits(m00); bits = bits * _NUM + BitConverter.DoubleToInt64Bits(m01); bits = bits * _NUM + BitConverter.DoubleToInt64Bits(m02); bits = bits * _NUM + BitConverter.DoubleToInt64Bits(m10); bits = bits * _NUM + BitConverter.DoubleToInt64Bits(m11); bits = bits * _NUM + BitConverter.DoubleToInt64Bits(m12); return (int)bits ^ (int)(bits >> _NUM); }
public void Unsubscribe(AWSIotMessage message) { try { UnsubscribeTopic(message); } catch (AwsIotRetryableException e) { if (client.GetMaxOfflineQueueSize() > _NUM && unsubscribeQueue.Count < client.GetMaxOfflineQueueSize()) { unsubscribeQueue.Add(message); } else { LOGGER.Info(_STR + message.GetTopic()); throw new AWSIotException(e); } } }
public static bool IsDigitalUnix() { return osName.IndexOf(_STR) > -_NUM; }
public void ClientDisconnect() { try { OutHttpApp responseStream = _responseStream; if (responseStream != null) { responseStream.Close(); } } catch (Exception e) { log.Log(LogLevel.Finer, e.ToString(), e); } ConnectionTcp conn = ConnTcp(); if (conn != null) { conn.ClientDisconnect(); } KillKeepalive(_STR); }
public bool EndsWith(Name n) { if (n is CompoundName) { return impl.EndsWith(n.Size(), n.GetAll()); } else { return _BOOL; } }
private int CalculateTotalHeight(float starSize, int numberOfStars, float starsSeparation, bool padding) { return (int)Math.Round(starSize) + (padding ? GetPaddingTop() + GetPaddingBottom() : _NUM); }
private static bool IsRegex(string s) { try { System.Text.RegularExpressions.Regex.Match("", s); } catch (System.Text.RegularExpressions.RegexParseException) { return false; } return true; }
private static bool HasSpecializedHandlerIntents(Context context, Intent intent) { try { PackageManager pm = context.PackageManager; var handlers = pm.QueryIntentActivities(intent, PackageInfoFlags.MatchDefaultOnly); if (handlers == null || handlers.Count == _NUM) { return _BOOL; } foreach (var resolveInfo in handlers) { var filter = resolveInfo.Filter; if (filter == null) continue; if (filter.CountDataAuthorities() == _NUM || filter.CountDataPaths() == _NUM) continue; if (resolveInfo.ActivityInfo == null) continue; return _BOOL; } } catch (RuntimeException e) { Log.Error(TAG, _STR); } return _BOOL; }
public static void Flush() { ClearBuffer(); try { out.Flush(); } catch (IOException e) { e.PrintStackTrace(); } }
private string AttachFooterToText(string content) { var builder = new StringBuilder(content); EnsureTrailingCarriageReturn(content, builder); builder.Append(GetFooterText()); return builder.ToString(); }
public static Sentence Make(Connective connective, params Sentence[] children) { return Make(connective, children.ToList()); }
public void TestIsStatePreserved1() { byte[] encodedKey = new byte[] { (byte)_NUM, (byte)_NUM, (byte)_NUM, (byte)_NUM }; EncodedKeySpec meks = new MyEncodedKeySpec(encodedKey); encodedKey[_NUM] = (byte)_NUM; byte[] ek = meks.GetEncoded(); Assert.IsTrue(ek[_NUM] == (byte)_NUM); }
public void Init() { init = _BOOL; foreach (var mapName in store.GetMapNames()) { if (mapName.StartsWith(_STR)) { var temp = OpenTempMap(mapName); store.RemoveMap(temp); } } lock (undoLog) { if (undoLog.Count > _NUM) { foreach (var key in undoLog.Keys) { int transactionId = GetTransactionId(key); openTransactions.Set(transactionId); } } } }
public static TDoubleDoubleHashMap CreateCumulativeHistogram(TDoubleDoubleHashMap histogram) { double[] keys = histogram.Keys(); Array.Sort(keys); double sum = _NUM; foreach (double key in keys) { double val = histogram.Get(key); sum += val; histogram.Put(key, sum); } return histogram; }
public synchronized void UpdateIconsForPkg(string packageName, UserHandleCompat user) { RemoveIconsForPkg(packageName, user); try { PackageInfo info = mPackageManager.GetPackageInfo(packageName, PackageInfoFlags.GetUninstalledPackages); long userSerial = mUserManager.GetSerialNumberForUser(user); foreach (var app in mLauncherApps.GetActivityList(packageName, user)) { AddIconToDBAndMemCache(app, info, userSerial); } } catch (NameNotFoundException e) { Log.Debug(TAG, _STR, e); return; } }
protected DateTimeData Parse(string str) { DateTimeData date = new DateTimeData(str, this); int len = str.Length; int end = IndexOf(str, _NUM, len, _STR); int dateEnd = GetDate(str, _NUM, end, date); GetTime(str, end + _NUM, len, date); if (dateEnd != end) { throw new Exception(str + _STR + _STR); } ValidateDateTime(date); SaveUnnormalized(date); if (date.Utc != _NUM && date.Utc != _STR) { Normalize(date); } return date; }
void AddAttributeValues(string attrName, HashSet<object> values) { if (attrName != null && values != null && values.Count > 0) { var attrs = GetAttributes(); HashSet<object> origValues = attrs.ContainsKey(attrName) ? (HashSet<object>)attrs[attrName] : null; HashSet<object> newValues = new HashSet<object>(values); if (origValues != null && origValues.Count > 0) { newValues.UnionWith(origValues); } var newAttrs = new Dictionary<string, HashSet<object>>(); newAttrs[attrName] = newValues; SetAttributes(newAttrs); } }
public void TestParkUntil3() { var barrier = new CyclicBarrier(_NUM); var parker = new Parker(barrier, _BOOL, _NUM); var parkerThread = new Thread(parker.Run); UNSAFE.Unpark(parkerThread); parkerThread.Start(); parker.AssertDurationIsInRange(_NUM); parkerThread.Join(); }
public SegmentManager CommitIndex(long commitIndex) { this.commitIndex = Math.Max(this.commitIndex, commitIndex); return this; }
public void FinishFragments() { foreach (var comment in closingFragments) { FinishFragment(comment); } closingFragments.Clear(); }
private void WriteUtf8Segments(byte[] utf8, int offset, int totalLen) { do { int len = Math.Min(_outputMaxContiguous, totalLen); WriteUtf8Segment(utf8, offset, len); offset += len; totalLen -= len; } while (totalLen > _NUM); }
public static string HexToStringNoException(string data) { try { return ConversionUtils.ArrayToString(Hex.DecodeHex(data.ToCharArray())); } catch (DecoderException e) { return _STR; } }
public ICollection<Node> MatchingScenariosAndExamples(Feature feature) { var allScenarios = feature.GetScenarioDefinitions(); var matchingScenariosAndExamples = new List<Node>(); foreach (var scenario in allScenarios) { var allTagsForScenario = new HashSet<Tag>(scenario.GetTags()); allTagsForScenario.UnionWith(feature.GetTags()); if (scenario is ScenarioOutline scenarioOutline) { matchingScenariosAndExamples.AddRange(MatchingExamples(scenarioOutline, allTagsForScenario)); } else { if (Matches(allTagsForScenario)) { matchingScenariosAndExamples.Add(scenario); } } } return matchingScenariosAndExamples; }
private bool Traverse(Tree tree, NodeRef node, int[] operatorNumber, bool flip) { bool update = _BOOL; int nodeNum = node.GetNumber(); NodeRef parent = tree.GetParent(node); if (operatorNumber != null) { operatorNumber[_NUM] = -_NUM; } if (parent != null && updateNode[nodeNum]) { double branchRate = branchRateModel.GetBranchRate(tree, node); double branchTime = branchRate * (tree.GetNodeHeight(parent) - tree.GetNodeHeight(node)); if (branchTime < _NUM) { throw new Exception(_STR + branchTime); } if (flip) { matrixBufferHelper.FlipOffset(nodeNum); } int eigenIndex = _NUM; int updateCount = branchUpdateCount[eigenIndex]; matrixUpdateIndices[eigenIndex][updateCount] = matrixBufferHelper.GetOffsetIndex(nodeNum); branchLengths[eigenIndex][updateCount] = branchTime; branchUpdateCount[eigenIndex]++; update = _BOOL; } if (!tree.IsExternal(node)) { NodeRef child1 = tree.GetChild(node, _NUM);
public static string RateToSpeed(double rate) { return rate.ToString("0") + _STR + GENERAL_UNIT_KBPSEC; }
public long Next() { long result = -_NUM; if (cache < _NUM && bufferElements > _NUM) { result = GetNextFromBuffer(); bufferElements--; } else { result = cache; cache = -_NUM; } if (cs.Count > 0) { long first = cs.First(); if (result > first || result == -_NUM) { cs.Remove(first); cache = result; result = first; } } if (result == -_NUM) { throw new NoSuchElementException(); } Assert.Check(previous < result, EC.GENERAL); previous = result; readElements++; return result; }
public bool IsSetQueueSize() { return __isset_bit_vector.Get(__QUEUESIZE_ISSET_ID); }
public void RequestContactCapabilities(HashSet<ContactId> contacts) { if (mApi == null) { throw new RcsServiceNotAvailableException(); } if (contacts == null || contacts.Count == 0) { throw new RcsIllegalArgumentException("_STR"); } try { mApi.RequestContactCapabilities2(new List<ContactId>(contacts)); } catch (Exception e) { RcsIllegalArgumentException.AssertException(e); RcsServiceNotRegisteredException.AssertException(e); throw new RcsGenericException(e); } }
private static string ToString(double coeff) { string c = coeff.ToString(); if (c.EndsWith(_STR)) { return c.Substring(_NUM, c.Length - _NUM); } else { return c; } }
public static IndexCreatedEvent CreateTestIndexCreationStatusWithBulkDataHit() { var toReturn = new IndexCreatedEvent(Guid.NewGuid(), DateTime.Now, DateTime.Now, CreateTestIndexWithBulkDataHit(), _NUM, _NUM); toReturn.CalculateValues(); return toReturn; }
public bool Validate(string value, string rule) { return value.Equals(rule, StringComparison.OrdinalIgnoreCase); }
public string FindURIFromDoc(int owner) { int n = m_sourceTree.Count; for (int i = _NUM; i < n; i++) { SourceTree sTree = (SourceTree)m_sourceTree[i]; if (owner == sTree.m_root) return sTree.m_url; } return null; }
public static int Random(int start, int end) { Random random = new Random(); return start + random.Next(end - start + 1); }
private void Pop(string desc) { char c = desc[_NUM]; if (c == _STR) { Pop((Type.GetArgumentsAndReturnSizes(desc) >> _NUM) - _NUM); } else if (c == _STR || c == _STR) { Pop(_NUM); } else { Pop(_NUM); } }
public bool Offer(E event, int taskId) { AssertNotDone(); if (predicate.Match(event)) { this.matched[taskId] = true; foreach (bool match in matched) { if (!match) return true; } responseQueue.Put(new EventHolder(event)); done = true; return true; } else return true; }
private void Push(int type) { if (outputStack == null) { outputStack = new int[_NUM]; } int n = outputStack.Length; if (outputStackTop >= n) { int[] t = new int[Math.Max(outputStackTop + _NUM, _NUM * n)]; Array.Copy(outputStack, _NUM, t, _NUM, n); outputStack = t; } outputStack[outputStackTop++] = type; int top = owner.inputStackTop + outputStackTop; if (top > owner.outputStackMax) { owner.outputStackMax = top; } }
private static AlgorithmParameterSpec AlgorithmParameterSpec() { var random = new System.Security.Cryptography.RNGCryptoServiceProvider(); var bytes = new byte[CcAes.BLOCK]; random.GetBytes(bytes); return new IvParameterSpec(bytes); }
static ZoneOffsetTransitionRule ReadExternal(DataInput in) { int data = in.ReadInt(); Month month = Month.Of(data >> _NUM); int dom = ((data & (_NUM << _NUM)) >> _NUM) - _NUM; int dowByte = (data & (_NUM << _NUM)) >> _NUM; DayOfWeek? dow = dowByte == _NUM ? (DayOfWeek?)null : DayOfWeek.Of(dowByte); int timeByte = (data & (_NUM << _NUM)) >> _NUM; TimeDefinition defn = (TimeDefinition)(data & (_NUM << _NUM)) >> _NUM; int stdByte = (data & (_NUM << _NUM)) >> _NUM; int beforeByte = (data & (_NUM << _NUM)) >> _NUM; int afterByte = (data & _NUM); LocalTime time = timeByte == _NUM ? LocalTime.OfSecondOfDay(in.ReadInt()) : LocalTime.Of(timeByte % _NUM, _NUM); ZoneOffset std = stdByte == _NUM ? ZoneOffset.OfTotalSeconds(in.ReadInt()) : ZoneOffset.OfTotalSeconds((stdByte - _N
protected bool IsTokenChar(char ch) { if (char.IsLetterOrDigit(ch)) return true; if (char.IsControl(ch)) return true; if (IsHttpSeparator(ch)) return true; return false; }
public void DrawLinesAndPoints(Graphics g, List<ComparableLabel> orderedDateSet, Dictionary<ComparableLabel, int> dataPoints, long yMaxMark) { int sectionWidth = this.graphWidth / orderedDateSet.Count; int xOffset = sectionWidth / _NUM; int yPrevValue; int yCurrentValue; float prevOffsetPerc; float currentOffsetPerc; g.SetColor(this.lineColor); for (int i = _NUM; i < orderedDateSet.Count; i++) { if (i != _NUM) { yPrevValue = dataPoints[orderedDateSet[i - _NUM]]; yCurrentValue = dataPoints[orderedDateSet[i]]; prevOffsetPerc = yPrevValue / (float)yMaxMark; currentOffsetPerc = yCurrentValue / (float)yMaxMark; g.DrawLine(this.graphLeft + (i - _NUM) * sectionWidth + xOffset, this.graphBottom - (int)Math.Round(prevOffsetPerc * this.graphHeight), this.graphLeft + i * sectionWidth + xOffset, (int)Math.Round(this.graphBottom - currentOffsetPerc * this.graphHeight));
public void ElementType(string name, int model, int memberOf, int flags) { ElementType e = new ElementType(name, model, memberOf, flags, this); theElementTypes[name.ToLower()] = e; if (memberOf == M_ROOT) theRoot = e; }
public static string MakeLogTag(Type cls) { return MakeLogTag(cls.Name); }
public void Println(string s) { Writer out = this.out; if (out == null) return; try { if (s == null) out.Write(_nullChars, _NUM, _nullChars.Length); else out.Write(s, _NUM, s.Length); out.Write(_newline, _NUM, _newline.Length); } catch (IOException e) { log.Log(Level.FINE, e.ToString(), e); } }
private static Uri RefragUri(Uri uri, string frag) { return new Uri(uri.GetLeftPart(UriPartial.Path) + "#" + frag); }
public override void Paint(PaintContext ppc) { Paint paint = GetPaint(); if (paint != null) { Graphics2D g2 = ppc.GetGraphics(); Bounds bounds = GetUnionOfChildrenBounds(null); if (fillBackground) { g2.SetPaint(backgroundColor); g2.FillRect((int)bounds.GetX() - outlinePadding, (int)bounds.GetY() - outlinePadding, (int)bounds.GetWidth() + _NUM * outlinePadding, (int)bounds.GetHeight() + _NUM * outlinePadding); } if (drawOutline) { g2.SetPaint(lineColor); g2.DrawRoundRect((int)bounds.GetX() - outlinePadding, (int)bounds.GetY() - outlinePadding, (int)bounds.GetWidth() + _NUM * outlinePadding, (int)bounds.GetHeight() + _NUM * outlinePadding, ROUNDING_WIDTH_HEIGHT, ROUNDING_WIDTH_HEIGHT); } } }
public sealed byte[] ToByteArray() { using (var baos = new MemoryStream()) using (var dos = new BinaryWriter(baos)) { try { game.WriteToStream(dos); dos.Flush(); return baos.ToArray(); } catch (IOException) { return null; } } }
public void AddImport(PsiElement importable, PsiFile file, PyImportElement importElement) { myImports.Add(new ImportCandidateHolder(importable, file, importElement, null)); }
protected void DrawArrowHead(Graphics g, int x, int y, int sgn) { g.SmoothingMode = System.Drawing.Drawing2D.SmoothingMode.AntiAlias; // Assuming similar stroke settings int size = GetArrowSize(); // Assume GetArrowSize() retrieves the arrow size switch (headType) { case ArrowHeadType.Closed: using (var p = new System.Drawing.Drawing2D.GraphicsPath()) { p.AddPolygon(new[] { new System.Drawing.Point(x, y), new System.Drawing.Point(x + sgn * size, y - size), new System.Drawing.Point(x + sgn * size, y + size), new System.Drawing.Point(x, y) }); g.FillPath(System.Drawing.Brushes.Black, p); } break; case ArrowHeadType.Open: g.DrawLine(Pens.Black, x, y, x + sgn * size, y - size); g.DrawLine(Pens.Black, x, y, x + sgn * size, y + size); break; case ArrowHeadType.Rounded: int left = sgn == -1 ? x - size :
public void ClassLoaderInit(DynamicClassLoader loader) { EnvLoaderListener listener = _listenerRef.Get(); if (listener != null) { listener.ClassLoaderInit(loader); } }
private object[] UnmarshalParametersChecked(DeserializationChecker checker, Method method, MarshalInputStream inStream) { int callID = methodCallIDCount.GetAndIncrement(); MyChecker myChecker = new MyChecker(checker, method, callID); inStream.SetStreamChecker(myChecker); try { Type[] types = method.GetParameterTypes(); object[] values = new object[types.Length]; for (int i = _NUM; i < types.Length; i++) { myChecker.SetIndex(i); values[i] = UnmarshalValue(types[i], inStream); } myChecker.End(callID); return values; } finally { inStream.SetStreamChecker(null); } }
private void LoadDataFromService() { List<ExceptionSensorData> exData = null; if (fromDate != null && toDate != null) { exData = dataAccessService.GetUngroupedExceptionOverview(template, limit, fromDate, toDate, resultComparator); } else { exData = dataAccessService.GetUngroupedExceptionOverview(template, limit, resultComparator); } exceptionSensorData.Clear(); if (exData != null) { exceptionSensorData.AddRange(exData); } }
public static string CreateResourceName(string resource, CultureInfo locale, bool removeExtension) { string resourceName = resource; if (removeExtension) { if (resourceName.EndsWith(_STR)) { resourceName = resourceName.Replace(_STR, string.Empty); } else if (resourceName.EndsWith(_STR)) { resourceName = resourceName.Replace(_STR, string.Empty); } } if (locale != null) { if (!string.IsNullOrEmpty(locale.ToString())) { resourceName = resourceName + _STR + locale; } } return resourceName; }
public static string ToString(object[] objects, Displayable renderer) { if (objects == null) return string.Empty; var buffer = new System.Text.StringBuilder(); const int NUM = 4; for (int i = NUM; i < objects.Length; i++) { if (i > NUM) buffer.Append(", "); buffer.Append(renderer.DisplayString(objects[i])); } return buffer.ToString(); }
void DrawIcon(Graphics g, int ax, int ay, int aw, int ah, float align, Component c) { int gap = isLeftToRight ? -(img.GetIconWidth() + bulletgap) : (aw + bulletgap); int x = ax + gap; int y = Math.Max(ay, ay + (int)(align * ah) - img.GetIconHeight()); img.PaintIcon(c, g, x, y); }
public int SyncQuery(string query) { long start = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); int modified = Execute(_STR, UPDATE_COUNT_RESPONSE, query); Log.Debug(_STR, DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - start, modified); return modified; }
public static void FullReset() { ResetRuntime(); lock (readProperties) { readProperties.Clear(); } }
private Bitmap ToBufferedImage(Image image) { if (image is Bitmap bitmap) { return bitmap; } if (image is Metafile metafile) { // Note: Metafile does not have an equivalent of VolatileImage // in C#. This is a direct representation of the concept. // Custom handling for Metafile could be added if necessary. return ConvertMetafileToBitmap(metafile); } // Create a Bitmap with the same size as the original image Bitmap bufferedImage = new Bitmap(image.Width, image.Height); using (Graphics g = Graphics.FromImage(bufferedImage)) { g.DrawImage(image, 0, 0); } return bufferedImage; } // Example conversion for Metafile to Bitmap (this is just a placeholder). private Bitmap ConvertMetafileToBitmap(Metafile metafile) { // This method would contain logic to convert Metafile to Bitmap. throw new NotImplementedException(); }
using System.IO; public static void WriteByteArrayToFile(FileInfo file, byte[] data, bool append) { using (var stream = new FileStream(file.FullName, append ? FileMode.Append : FileMode.Create)) { stream.Write(data, 0, data.Length); } }
public bool IsCancelled() { if (cancelled) { Pass(_STR, cancelled); } else { Fail(_STR); } return cancelled; }
public void Remove(DirectedEdge de) { outEdges.Remove(de); }
public override bool EventGeneratable(string eventName) { if (m_listenee == null) { return _BOOL; } if (eventName != _STR && eventName != _STR) { return _BOOL; } if (m_listenee is DataSource) { if (m_listenee is EventConstraints ec) { return ec.EventGeneratable(eventName); } } if (m_listenee is TrainingSetProducer) { if (m_listenee is EventConstraints ec) { if (eventName != _STR) { return _BOOL; } if (!ec.EventGeneratable(_STR)) { return _BOOL; } } } if (m_listenee is TestSetProducer) { if (m_listenee is EventConstraints ec) { if (eventName != _STR) { return _BOOL; } if (!ec.EventGeneratable(_STR)) { return _BOOL; } } } return _BOOL; }
protected override void OnMessageOnProducerThread(T msg) { _lock.Lock(); try { if (_pending.IsEmpty) { _queue.Schedule(_flushRunnable, _interval, _timeUnit); } _pending.Add(msg); } finally { _lock.Unlock(); } }
public Builder UntilDate(DateTime date) { untilDate = QUERY_DATE.Format(date); return this; }
private bool IsInThumbRange(float touchX, double normalizedThumbValue) { return Math.Abs(touchX - NormalizedToScreen(normalizedThumbValue)) <= mThumbHalfWidth; }
public static void CleanupAllFiles(FileSystem fileSystem, string baseUri) { try { if (fileSystem != null) { Path rootDir = new Path(baseUri); FileStatus[] files = fileSystem.ListStatus(rootDir); foreach (FileStatus file in files) { fileSystem.Delete(file.GetPath(), true); } } } catch (Exception e) { LOG.Error("An error occurred during cleanup."); // replace _STR with a meaningful message } }
public override bool CanBeCollidedWith() { return _BOOL; }
public void Update(long duration, TimeUnit unit) { Update(unit.ToNanos(duration)); }
public FileStream OpenRead() { if (mBackupName.Exists()) { mBaseName.Delete(); mBackupName.MoveTo(mBaseName.FullName); } return new FileStream(mBaseName.FullName, FileMode.Open, FileAccess.Read); }
public void Submit(string queueName, DispatcherTask dispatcherTask) { lock (syncRoot) { if (!currentTasksMap.TryGetValue(queueName, out DispatcherTaskRunner currentTaskRunner)) { currentTaskRunner = new DispatcherTaskRunner(queueName, dispatcherTask); currentTasksMap[queueName] = currentTaskRunner; executorService.Execute(currentTaskRunner); } else { EnqueueNextTask(queueName, dispatcherTask); } } }
public static ExecutorService CreateTaskDistributor() { return Executors.NewCachedThreadPool(CreateThreadFactory(Thread.NormPriority, _STR)); }
public void Dump(TextWriter writer) { using (var pw = new PrintWriter(new BufferedWriter(writer))) { pw.Println(_STR); pw.Println(_STR); pw.Println(_STR + (int)audioFormat.SampleRate); pw.Println(_STR + samples.Length / _NUM); pw.Println(_STR + audioFormat.Channels); if (samples != null) { for (int i = _NUM; i < samples.Length; i += _NUM) { pw.Println(WaveUtils.BytesToShort(samples[i], samples[i + _NUM])); } } pw.Flush(); } }
public void AddFieldBuffered(VEditor editor, GridField mField) { wrap = mField != null ? !mField.IsSameLine() : _BOOL; if (prevEditor != null && prevField != null) AddField(prevEditor, prevField); prevEditor = editor; prevField = mField; }
public ExpandRoomFreespaceIncomplete AddIncompleteExpansionRoom(ShapeTile p_shape, int p_layer, ShapeTile p_contained_shape) { ExpandRoomFreespaceIncomplete newRoom = new ExpandRoomFreespaceIncomplete(p_shape, p_layer, p_contained_shape); incompleteExpansionRooms.Add(newRoom); return newRoom; }
static double ComputeDesiredEllipsoidMagnitude(PlanetModel planetModel, double x, double y, double z) { return _NUM / Math.Sqrt(x * x * planetModel.InverseAbSquared + y * y * planetModel.InverseAbSquared + z * z * planetModel.InverseCSquared); }
public static string Trim(string s) { if (s == null) { return null; } return Regex.Replace(s, @"^\s+|\s+$", string.Empty); }
private void ValidateVNXFileSMISProviderMandatoryDetails(StorageSystemRequestParam param) { ArgValidator.CheckFieldValidIP(param.GetSmisProviderIP(), _STR); ArgValidator.CheckFieldNotNull(param.GetSmisPortNumber(), _STR); ArgValidator.CheckFieldRange(param.GetSmisPortNumber(), _NUM, _NUM, _STR); ArgValidator.CheckFieldNotEmpty(param.GetSmisUserName(), _STR); ArgValidator.CheckFieldNotEmpty(param.GetSmisPassword(), _STR); }
private static NSObject ParseObject(Node n) { string type = n.NodeName; if (type.Equals(_STR)) { var dict = new NSDictionary(); var children = FilterElementNodes(n.ChildNodes); for (int i = _NUM; i < children.Count; i += _NUM) { var key = children[i]; var val = children[i + _NUM]; string keyString = GetNodeTextContents(key); dict.Put(keyString, ParseObject(val)); } return dict; } else if (type.Equals(_STR)) { var children = FilterElementNodes(n.ChildNodes); var array = new NSArray(children.Count); for (int i = _NUM; i < children.Count; i++) { array.SetValue(i, ParseObject(children[i])); } return array; } else if (type.Equals(_STR)) { return new NSNumber(_BOOL); } else if (type.Equals(_STR)) { return new NSNumber(_BOOL); } else if (type.Equals(_STR)) { return new NSNumber(GetNodeTextContents(n)); } else if (type.Equ
public void CreateAccrualBasedJournalEntriesAndReversalsForLoanCharges(Office office, string currencyCode, int accountTypeToBeDebited, int accountTypeToBeCredited, long loanProductId, long loanId, string transactionId, DateTime transactionDate, decimal totalAmount, bool isReversal, List<ChargePaymentDTO> chargePaymentDTOs) { GLAccount receivableAccount = GetLinkedGLAccountForLoanCharges(loanProductId, accountTypeToBeDebited, null); var creditDetailsMap = new Dictionary<GLAccount, decimal>(); foreach (var chargePaymentDTO in chargePaymentDTOs) { long chargeId = chargePaymentDTO.GetChargeId(); GLAccount chargeSpecificAccount = GetLinkedGLAccountForLoanCharges(loanProductId, accountTypeToBeCredited, chargeId); decimal chargeSpecificAmount = chargePaymentDTO.GetAmount(); if (creditDetailsMap.ContainsKey(chargeSpecificAccount)) { decimal existingAmount = creditDetailsMap[chargeSpecificAccount]; chargeSpecificAmount += existingAmount; } creditDetailsMap[chargeSpecificAccount] = chargeSpecificAmount; } decimal totalCredi
private ArtLocateResult CalculateNextTrace(bool layerChanged, bool atFanoutEnd) { List<PlaPointFloat> cornerList = new List<PlaPointFloat>(); cornerList.Add(currentFromPoint); if (!atFanoutEnd) { PlaPointFloat adjustedStartCorner = AdjustStartCorner(); if (adjustedStartCorner != currentFromPoint) { PlaPointFloat addCorner = CalculateAdditionalCorner(currentFromPoint, adjustedStartCorner, _BOOL, angleRestriction); cornerList.Add(addCorner); cornerList.Add(adjustedStartCorner); previousFromPoint = currentFromPoint; currentFromPoint = adjustedStartCorner; } } PlaPointFloat prevCorner = currentFromPoint; for (int cLimit = _NUM; cLimit < _NUM; cLimit++) { ICollection<PlaPointFloat> nextCorners = CalculateNextTraceCorners(); if (nextCorners.Count == 0) break; foreach (PlaPointFloat currNextCorner in nextCorners) { if (currNextCorner == prevCorner) continue; cornerList.Add(currNextCorner); previousFromPoint = currentFromPoint; currentFromPoint = currN
public static Byte[] ToByteBuffer<T>(T obj) { using (var bos = new MemoryStream()) { using (var oos = new BinaryFormatter()) { oos.Serialize(bos, obj); } return bos.ToArray(); } }
async Task WriteBytesAsync(ChannelHandlerContext ctx, byte[] bytes) { await ctx.WriteAndFlushAsync(bytes); }
protected override Sensor CreateNewSensor(string systemName, string userName) { if (log.IsDebugEnabled) { log.Debug(_STR + systemName + _STR + userName); } Sensor s; string sName = SerialAddress.NormalizeSystemName(systemName); if (sName.Equals(_STR)) { log.Error(_STR + systemName); return null; } s = GetBySystemName(sName); if (s != null) { log.Error(_STR + systemName); return null; } string altName = SerialAddress.ConvertSystemNameToAlternate(sName); s = GetBySystemName(altName); if (s != null) { log.Error(_STR + systemName + _STR + altName + _STR); return null; } int bit = SerialAddress.GetBitFromSystemName(sName); if (bit <= _NUM || bit >= SENSORSPERNODE) { log.Error(_STR + bit.ToString() + _STR + (SENSORSPERNODE - _NUM).ToString()); return null; }
private double[] Max(double[] distances1, double[] distances2) { if (distances1.Length != distances2.Length) { throw new InvalidOperationException("Arrays must be of the same length."); } double[] result = new double[distances1.Length]; for (int i = 0; i < distances1.Length; i++) { result[i] = Math.Max(distances1[i], distances2[i]); } return result; }
public void FillShape(PointF[] points, Graphics graphics, Color color, double translucencyFactor) { if (color == null) return; Graphics2D g2 = (Graphics2D)graphics; Polygon drawPolygon = new Polygon(); for (int index = _NUM; index < points.Length; index++) { Point2D currCorner = coordinateTransform.BoardToScreen(points[index]); drawPolygon.AddPoint((int)Math.Round(currCorner.X), (int)Math.Round(currCorner.Y)); } g2.Color = color; SetTranslucency(g2, translucencyFactor); g2.SetRenderingHint(RenderingHints.KeyAntialiasing, RenderingHints.ValueAntialiasOn); g2.Fill(drawPolygon); }
public void WriteExif(Stream jpegStream, Stream exifOutStream) { if (jpegStream == null || exifOutStream == null) { throw new ArgumentException(NULL_ARGUMENT_STRING); } Stream s = GetExifWriterStream(exifOutStream); DoExifStreamIO(jpegStream, s); s.Flush(); }
private static void DecodeBase256Segment(BitSource bits, StringBuilder result, ICollection<byte[]> byteSegments) { int codewordPosition = _NUM + bits.ByteOffset; int d1 = Unrandomize255State(bits.ReadBits(_NUM), codewordPosition++); int count; if (d1 == _NUM) { count = bits.Available() / _NUM; } else if (d1 < _NUM) { count = d1; } else { count = _NUM * (d1 - _NUM) + Unrandomize255State(bits.ReadBits(_NUM), codewordPosition++); } if (count < _NUM) { throw FormatException.GetFormatInstance(); } byte[] bytes = new byte[count]; for (int i = _NUM; i < count; i++) { if (bits.Available() < _NUM) { throw FormatException.GetFormatInstance(); } bytes[i] = (byte)Unrandomize255State(bits.ReadBits(_NUM), codewordPosition++); } byteSegments.Add(bytes); try { result.Append(Encoding.UTF8.
public void GoToCurrentDay() { int monthDifference = FlexibleCalendarHelper.GetMonthDifference(displayYear, displayMonth); Calendar cal = Calendar.GetInstance(); selectedDateItem.SetDay(cal.Get(CalendarField.DayOfMonth)); selectedDateItem.SetMonth(cal.Get(CalendarField.Month)); selectedDateItem.SetYear(cal.Get(CalendarField.Year)); if (disableAutoDateSelection) { this.userSelectedItem = selectedDateItem.Clone(); } if (monthDifference != _NUM) { resetAdapters = _BOOL; if (monthDifference < _NUM) { monthInfPagerAdapter.SetFakeCount(lastPosition); monthInfPagerAdapter.NotifyDataSetChanged(); } shouldOverrideComputedDate = _BOOL; MoveToPosition(monthDifference); } else { FlexibleCalendarGridAdapter currentlyVisibleAdapter = monthViewPagerAdapter.GetMonthAdapterAtPosition(lastPosition % MonthViewPagerAdapter.VIEWS_IN_PAGER); currentlyVisibleAdapter.NotifyDataSetChanged(); } }
public static byte[] ToIPv4AddressBytes(int ipAddress) { const int _NUM = 8; // Assuming _NUM is 8 based on common bit manipulation for IPv4 return new byte[] { (byte)(ipAddress >> 24), (byte)(ipAddress >> 16), (byte)(ipAddress >> 8), (byte)ipAddress }; }
public bool IsValidTemplate() { return IsValidTemplate(template); }
public object Take() { throw new NotSupportedException(); }
public static double NormalCdf(double y) { double f, h; int j; double dcphi, x, z, f1, f2, f3, f4, f5; x = y; if (Math.Abs(x) > _NUM) { dcphi = _NUM; } else { j = (int)Math.Floor(Math.Abs(x) * _NUM + _NUM); z = j * _NUM; h = Math.Abs(x) - z; f = r[j]; f1 = f * z - _NUM; f2 = f + z * f1; f3 = f1 * _NUM + z * f2; f4 = f2 * _NUM + z * f3; f5 = f3 * _NUM + z * f4; dcphi = f + h * (f1 * _NUM + h * (f2 * _NUM + h * (f3 * _NUM + h * (f4 * _NUM + h * f5))) / _NUM); dcphi = dcphi * _NUM * Math.Exp(x
private void Destroy() { if (log.IsLoggable(LogLevel.Finest)) { log.Finest(this + _STR); } try { _socket.ForceShutdown(); } catch (Exception) { // Ignore exceptions } try { CloseConnection(); } catch (Exception e) { log.Log(LogLevel.Finer, e.ToString(), e); } _port.RemoveConnection(this); }
private int Atom() { int ret = Node(RE.OP_ATOM, _NUM); int lenAtom = _NUM; while (idx < len) { if ((idx + _NUM) < len) { char c = pattern[idx + _NUM]; if (pattern[idx] == _STR) { int idxEscape = idx; Escape(); if (idx < len) { c = pattern[idx]; } idx = idxEscape; } switch (c) { case _STR: case _STR: case _STR: case _STR: if (lenAtom != _NUM) break; break; } } switch (pattern[idx]) { case _STR: case _STR: case _STR: case _STR: case _STR: case _STR: case _STR: case _STR: break; case _STR: case _STR: case _STR: case _STR: if (lenAtom == _NUM) SyntaxError(_STR); break; case _STR: int idxBeforeEscape = idx; int
public override void DrawItem(Graphics2D g2, CategoryItemRendererState state, Rectangle2D dataArea, CategoryPlot plot, CategoryAxis domainAxis, ValueAxis rangeAxis, CategoryDataset dataset, int row, int column, int pass) { int visibleRow = state.GetVisibleSeriesIndex(row); if (visibleRow < _NUM) { return; } Number dataValue = dataset.GetValue(row, column); if (dataValue == null) { return; } double value = dataValue.DoubleValue(); PlotOrientation orientation = plot.GetOrientation(); double barW0 = CalculateBarW0(plot, orientation, dataArea, domainAxis, state, visibleRow, column); RectangleEdge edge = plot.GetRangeAxisEdge(); double barL = rangeAxis.ValueToJava2D(value, dataArea, edge); Line2D line; double x, y; if (orientation.IsHorizontal()) { x = barL; y = barW0 + state.GetBarWidth() / _NUM; line = new Line2D.Double(barL, barW0, barL, barW0 + st
public static Func<List<T>> From<T>(ICollection<string> commandLineUdids, Func<T, ICloud.MBSBackup> mbsBackup, Func<ICloud.MBSBackup, string> formatter, Printer outPrinter, Stream inStream) { return commandLineUdids.Count == 0 ? new User(mbsBackup, outPrinter, inStream, formatter) : new Udid(mbsBackup, outPrinter, inStream, commandLineUdids.ToList()); }
public bool IsNetworkConnected() { var connectivityManager = (ConnectivityManager)GetSystemService(ConnectivityService); var networkInfo = connectivityManager.ActiveNetworkInfo; return networkInfo != null && networkInfo.IsConnectedOrConnecting; }
public override void OnTabClosing(long time, int id) { Reset(); ForceAnimationToFinish(); TabModel model = mTabModelSelector.GetModelForTabId(id); if (model != null) { mClosedTab = CreateLayoutTab(id, model.IsIncognito(), NO_CLOSE_BUTTON, NO_TITLE); mClosedTab.SetBorderAlpha(_NUM); mLayoutTabs = new LayoutTab[] { mClosedTab }; UpdateCacheVisibleIds(new List<int> { id }); } else { mLayoutTabs = null; mClosedTab = null; } base.OnTabClosing(time, id); }
public void Put(string name, string supported, string authScheme, string level, bool isDefault) { SAMLv2AuthContext c = new SAMLv2AuthContext(); c.Name = name; c.Supported = supported; if (authScheme.Length != _NUM && authScheme != null) { int index = authScheme.LastIndexOf(_STR); c.Value = authScheme.Substring(index + _NUM); c.Key = authScheme.Substring(_NUM, index); } else { c.Value = _STR; c.Key = _STR; } c.Level = level; c.IsDefault = isDefault; collections.Put(name, c); }
public void Close(LsServerPacket closePacket, bool forced) { lock (guard) { if (IsWriteDisabled()) { return; } log.Debug(_STR + closePacket + _STR); pendingClose = _BOOL; isForcedClosing = forced; sendMsgQueue.Clear(); sendMsgQueue.AddLast(closePacket); EnableWriteInterest(); } }
private void ReplaceCollapsedEdges() { List<Edge> newEdges = new List<Edge>(); foreach (var e in edgeList.ToList()) { if (e.IsCollapsed()) { edgeList.Remove(e); newEdges.Add(e.GetCollapsedEdge()); } } edgeList.AddRange(newEdges); }
private int ReadAnnotationValue(int v, char[] buf, string name, AnnotationVisitor av) { int i; if (av == null) { switch (b[v] & _NUM) { case _STR: return v + _NUM; case _STR: return ReadAnnotationValues(v + _NUM, buf, _BOOL, null); case _STR: return ReadAnnotationValues(v + _NUM, buf, _BOOL, null); default: return v + _NUM; } } switch (b[v++ & _NUM]) { case _STR: case _STR: case _STR: case _STR: av.Visit(name, ReadConst(ReadUnsignedShort(v), buf)); v += _NUM; break; case _STR: av.Visit(name, (byte)ReadInt(items[ReadUnsignedShort(v)])); v += _NUM; break; case _STR: av.Visit(name, ReadInt(items[ReadUnsignedShort(v)]) == _NUM ? false : true); v += _NUM; break; case _STR: av.Visit(n
public void TimingEvent(float fraction) { current.x = (int)(start.x + (end.x - start.x) * fraction); current.y = (int)(start.y + (end.y - start.y) * fraction); track.SetCarPosition(current); }
public SeaGlassTitlePane(JRootPane rootPane, SeaGlassRootPaneUI ui) { this.rootPane = rootPane; this.rootPaneUI = ui; rootParent = (RootPaneContainer)rootPane.Parent; InstallTitlePane(); }
public override string ToString() { StringBuilder s = new StringBuilder(); foreach (Item item in this) { s.Append(item + _STR); } return s.ToString(); }
public void WriteLong(long value) { CheckWritePrimitiveTypes(); primitiveTypes.WriteLong(value); }
public static Uri FindContainerXml(string containerName) { Uri containerNameUrl = null; string containerNameFilePath = Constants.Container.CONTAINER_CONFIG_DIRECTORY + _STR + containerName + _STR; containerNameUrl = GetResourceUrl(containerNameFilePath); if (containerNameUrl != null) { if (_logger.IsLoggable(LogLevel.Information)) { _logger.LogInformation(_STR + containerNameUrl + _STR); } } return containerNameUrl; }
public static List<string> ExpandWildcards(IEnumerable<FileInfo> dirs, List<string> names, Backend forBackend) { List<string> result = new List<string>(names.Count); foreach (string name in names) { ExpandWildcard(result, dirs, name, forBackend); } return result; }
public static Encoding GetEncoding(string charsetName) { return GetEncoding(charsetName, null); }
public NSNumber(int i) { doubleValue = longValue = i; type = Type.INTEGER; }
public static void Dump(string message, StackTrace[] stackTrace) { Dump(message, stackTrace.ToList()); }
public void ExecQuery(string sql, ExecQueryCallbackFunctionIF aListener) { if (_connection == null) { GetConnection(); } try { if (Debug.VerboseOn()) { Debug.LogVerbose(_STR + sql, module); } ExecuteQuery(sql); bool keepGoing = _BOOL; while (keepGoing && _rs.Next()) { keepGoing = aListener.ProcessNextRow(_rs); } if (_manualTX) { _connection.Commit(); } } catch (SqlException sqle) { Debug.LogWarning(_STR + sql + _STR, module); Debug.LogWarning(sqle.Message, module); throw new GenericEntityException(_STR + sql, sqle); } finally { Close(); } }
private Name CacheName(string sig) { StringBuilder buf = new StringBuilder(); if (sig.StartsWith(_STR)) { buf.Append(_STR); while (sig.StartsWith(_STR)) { buf.Append(target.SyntheticNameChar()); sig = sig.Substring(_NUM); } if (sig.StartsWith(_STR)) { sig = sig.Substring(_NUM, sig.Length - _NUM); } } else { buf.Append(_STR + target.SyntheticNameChar()); } buf.Append(sig.Replace(_STR, target.SyntheticNameChar())); return names.FromString(buf.ToString()); }
public override bool IsSet(int featureID) { switch (featureID) { case EipPackage.CONDITIONAL_ROUTE__CONDITION: return CONDITION_DEFAULT == null ? condition != null : !CONDITION_DEFAULT.Equals(condition); case EipPackage.CONDITIONAL_ROUTE__CHANNEL: return channel != null; } return base.IsSet(featureID); }
public static string MapLibraryName(string libname) { // Creates a default tool from a <unk> to a target, e.g. "<unk>", "application", "application", "application". return libname; // Add actual mapping logic as needed. }
public Matcher Next() { ReadAhead(); if (matches == null) { throw new NoSuchElementException(); } Matcher matcher = matches.Next(); if (discard) { Pattern pattern = matcher.Pattern(); for (int n = _NUM; n < patterns.Length; n++) { if (patterns[n] == pattern) { patterns[n] = null; break; } } } return matcher; }
[CalledOnlyBy(AmidstThread.FRAGMENT_LOADER)] public void ProcessQueues() { Dimension dimension = dimensionSetting.Get(); UpdateLayerManager(dimension); ProcessRecycleQueue(); Fragment fragment; while ((fragment = loadingQueue.Poll()) != null) { LoadFragment(dimension, fragment); dimension = dimensionSetting.Get(); UpdateLayerManager(dimension); ProcessRecycleQueue(); } layerManager.ClearInvalidatedLayers(); }
private FieldDeclaration AddPrivateField(Type typeClass, string name) { return AddField(typeClass, name, Modifier.PRIVATE); }
void ReconstructPrivateSubrs(int font, IndexBaseItem[] fdPrivateBase, OffsetItem[] fdSubrs) { for (int i = _NUM; i < fonts[font].fdprivateLengths.Length; i++) { if (fdSubrs[i] != null && fonts[font].PrivateSubrsOffset[i] >= _NUM) { OutputList.AddLast(new SubrMarkerItem(fdSubrs[i], fdPrivateBase[i])); if (NewLSubrsIndex[i] != null) OutputList.AddLast(new RangeItem(new RandomAccessFileOrArray(rasFactory.CreateSource(NewLSubrsIndex[i])), _NUM, NewLSubrsIndex[i].Length)); } } }
public bool MatchChomp(string seq) { if (Matches(seq)) { pos += seq.Length; return _BOOL; } else { return _BOOL; } }
public void InitGL() { mEglCore = new EglCore(null, EglCore.FLAG_RECORDABLE | EglCore.FLAG_TRY_GLES3); mWindowSurface = new WindowSurface(mEglCore, mSurfaceTexture); mWindowSurface.MakeCurrent(); mRecordSurface = new WindowSurface(mEglCore, mMediaRecorder.GetSurface(), _BOOL); InitGLComponents(); }
void Clear() { if (mViewTypeCount == _NUM) { var scrap = mCurrentScrap; int scrapCount = scrap.Count; for (int i = _NUM; i < scrapCount; i++) { RemoveDetachedView(scrap[ scrapCount - _NUM - i ], _BOOL); scrap.RemoveAt(scrapCount - _NUM - i); } } else { int typeCount = mViewTypeCount; for (int i = _NUM; i < typeCount; i++) { var scrap = mScrapViews[i]; int scrapCount = scrap.Count; for (int j = _NUM; j < scrapCount; j++) { RemoveDetachedView(scrap[scrapCount - _NUM - j], _BOOL); scrap.RemoveAt(scrapCount - _NUM - j); } } } if (mTransientStateViews != null) { mTransientStateViews.Clear(); } }
protected void ContributeTokenRequestParameters(QueryString bodyParameters) { // Method to write one more information vertically. }
public int Read(char[] cbuf, int off, int len) { int k; if (position >= document.Length) { return -_NUM; } k = len; if ((position + k) >= document.Length) { k = document.Length - (int)position; } if (off + k >= cbuf.Length) { k = cbuf.Length - off; } try { document.GetText((int)position, k, segment); position += k; Array.Copy(segment.Array, segment.Offset, cbuf, off, k); return k; } catch (BadLocationException ble) { return -_NUM; } }
public Builder AddLenient(string line) { int index = line.IndexOf(_STR, _NUM); if (index != -_NUM) { return AddLenient(line.Substring(_NUM, index), line.Substring(index + _NUM)); } else if (line.StartsWith(_STR)) { return AddLenient(_STR, line.Substring(_NUM)); } else { return AddLenient(_STR, line); } }
public static void MergeNodeChildren(TreeNode node) { DefaultMutableTreeNode masterNode = (DefaultMutableTreeNode)node; for (int i = _NUM; i < masterNode.GetChildCount(); i++) { DefaultMutableTreeNode child = (DefaultMutableTreeNode)masterNode.GetChildAt(i); if (!child.IsLeaf()) { MergeHelpUtilities.MergeNodeChildren(DEFAULT_MERGE_TYPE, child); } } }
public void TestNegateNegative() { string a = _STR; int aScale = _NUM; string c = _STR; int cScale = _NUM; var aNumber = new BigDecimal(new BigInteger(a), aScale); var cNumber = new BigDecimal(new BigInteger(c), cScale); Assert.Equals(_STR, cNumber, aNumber.Negate()); }
private static object CreateAndBindItem(ParameterAccess parameters, Type itemType) { try { var value = Activator.CreateInstance(itemType); Bind(value, parameters); return value; } catch (InstantiationException e) { throw new BindingException(_STR + itemType, e); } catch (IllegalAccessException e) { throw new BindingException(_STR + itemType, e); } }
public SimpleSetupPanel(Experiment exp) : this() { SetExperiment(exp); }
public static void AddListener(Listener listener) { listeners.AddLast(listener); }
private static void ProcessArgs(string[] args) { for (int i = _NUM; i < args.Length; i++) { string arg = args[i]; if (arg.Equals(_STR_1)) { outputDir = args[++i]; } else if (arg.Equals(_STR_2)) { unicodeData = args[++i]; } else if (arg.Equals(_STR_3)) { language = args[++i]; } else if (arg.Equals(_STR_4)) { country = args[++i]; } else if (arg.Equals(_STR_5)) { valiant = args[++i]; } else { Usage(); } } localeName = GetLocaleName(); }
public static bool IsZoningRequired(DbClient dbClient, VirtualArray nh) { if (nh.GetAutoSanZoning() == BOOL_TRUE) { log.Info(STR + nh.GetLabel()); return BOOL_TRUE; } return NetworkUtil.AreNetworkSystemDiscovered(dbClient); }
private void InitXMLTree() { UpdateFilteredTokens(); var elements = GetElements(GetFilteredTokens()); if (elements.Count > _NUM) { throw new Exception(_STR); } SetRootElement((XMLElement)elements[_NUM]); }
public bool HasNameValue(string name) { return nameValueMap.ContainsKey(name.ToLower()); }
public bool StartsWith(CharSeq prefix) { return str.StartsWith(prefix.str); }
public bool ContainsWindow(Type windowClass) { return (GetWindow(windowClass) != null); }
protected void FirePropertyChange(string propertyName, long oldValue, long newValue) { FirePropertyChange(propertyName, oldValue, newValue); }
public void FadeToLayer(int index) { mTransitionState = TRANSITION_STARTING; Array.Fill(mIsLayerOn, _BOOL); mIsLayerOn[index] = _BOOL; InvalidateSelf(); }
private void FitImageToView() { Drawable drawable = GetDrawable(); if (drawable == null || drawable.GetIntrinsicWidth() == _NUM || drawable.GetIntrinsicHeight() == _NUM) { return; } if (matrix == null || prevMatrix == null) { return; } int drawableWidth = drawable.GetIntrinsicWidth(); int drawableHeight = drawable.GetIntrinsicHeight(); float scaleX = (float)viewWidth / drawableWidth; float scaleY = (float)viewHeight / drawableHeight; switch (mScaleType) { case ScaleType.CENTER: scaleX = scaleY = _NUM; break; case ScaleType.CENTER_CROP: scaleX = scaleY = Math.Max(scaleX, scaleY); break; case ScaleType.CENTER_INSIDE: scaleX = scaleY = Math.Min(_NUM, Math.Min(scaleX, scaleY)); break; case ScaleType.FIT_CENTER: scaleX = scaleY = Math.Min(scaleX, scaleY); break; case ScaleType.FIT_XY: break; default: throw new NotSupportedException(_STR); } float redund
public static int HashCode(bool[] field) { return field == null || field.Length == _NUM ? _NUM : field.GetHashCode(); }
public AbstractSurfaceObject(AbstractSurfaceObject source) : base(source) { this.visible = source.visible; this.uniqueId = NextUniqueId(); this.lastModifiedTime = DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond; // equivalent to System.currentTimeMillis() this.enableBatchPicking = source.enableBatchPicking; }
public SootMethodAndClass ParseSootMethodString(string parseString) { if (!parseString.StartsWith(_STR) || !parseString.EndsWith(_STR)) { throw new ArgumentException(_STR + parseString + _STR); } string name = _STR; string className = _STR; string returnType = _STR; Regex regex = new Regex(_STR); Match match = regex.Match(parseString); if (match.Success) { className = match.Groups[_NUM].Value; } regex = new Regex(_STR); match = regex.Match(parseString); if (match.Success) { returnType = match.Groups[_NUM].Value; parseString = parseString.Substring(match.Index + match.Length); } regex = new Regex(_STR); match = regex.Match(parseString); if (match.Success) { name = match.Groups[_NUM].Value; } List<string> paramList = new List<string>(); regex = new Regex(_STR); match = regex.Match(parseString); if (match.Success) { string params = match.Groups[_NUM].Value; foreach (str
private void CreateNewReviewTask(TaskRepository repository, TaskData taskData) { var repo = AppraisePluginUtils.GetGitRepoForRepository(repository); AppraisePluginReviewClient client; try { client = new AppraisePluginReviewClient(repository); } catch (GitClientException e1) { throw new CoreException(new Status(IStatus.ERROR, AppraiseConnectorPlugin.PLUGIN_ID, _STR)); } string currentBranch; try { currentBranch = repo.GetFullBranch(); } catch (IOException e) { throw new CoreException(new Status(IStatus.ERROR, AppraiseConnectorPlugin.PLUGIN_ID, _STR, e)); } if (MASTER_REF.Equals(currentBranch)) { throw new CoreException(new Status(IStatus.ERROR, AppraiseConnectorPlugin.PLUGIN_ID, _STR)); } SetAttributeValue(taskData, schema.REQUESTER, repository.GetUserName()); SetAttributeValue(taskData, schema.TARGET_REF, MASTER_REF); SetAttributeValue(taskData, schema.REVIEW_REF, currentBranch); RevCommit reviewCommit; try { reviewCommit = client.GetReviewCommit(currentBra
public bool IsCritical() { return _BOOL; }
public override void Startup() { Log.Debug(Mary.LOG, _STR); List<string> voiceNames = MaryProperties.GetList(_STR); foreach (string voiceName in voiceNames) { long time = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); Voice unitSelVoice = new UnitSelectionVoice(voiceName, this); Log.Debug(Mary.LOG, _STR + unitSelVoice + _STR); Voice.RegisterVoice(unitSelVoice); long newTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - time; Log.Information(Mary.LOG, _STR + voiceName + _STR + newTime + _STR); } Log.Information(Mary.LOG, _STR); }
public int FindStartOfColumn(int column) { if (column == mColumns) return GetSpaceUsed(); int currentColumn = _NUM; int currentCharIndex = _NUM; while (_BOOL) { int newCharIndex = currentCharIndex; char c = mText[newCharIndex++]; bool isHigh = char.IsHighSurrogate(c); int codePoint = isHigh ? char.ConvertToUtf32(c, mText[newCharIndex++]) : c; int wcwidth = WcWidth.Width(codePoint); if (wcwidth > _NUM) { currentColumn += wcwidth; if (currentColumn == column) { while (newCharIndex < mSpaceUsed) { if (char.IsHighSurrogate(mText[newCharIndex])) { if (WcWidth.Width(char.ConvertToUtf32(mText[newCharIndex], mText[newCharIndex + _NUM])) <= _NUM) { newCharIndex += _NUM; } else { break; } } else if (WcWidth.Width(mText[newCharIndex]) <= _NUM) { newCharIn
private TripSchedule RerouteTripSchedule(TripSchedule originalSchedule) { TripSchedule schedule = originalSchedule.Clone(); schedule.Arrivals = new int[newPatternLength]; schedule.Departures = new int[newPatternLength]; int prevOutputDeparture = _NUM; for (int ss = _NUM, ts = _NUM; ts < newPatternLength; ss++, ts++) { if ((ss == insertBeginIndex - _NUM) || (ss == _NUM && insertBeginIndex == _NUM)) { int hopTime = originalSchedule.Arrivals[ss]; if (ss > _NUM) hopTime -= originalSchedule.Departures[ss - _NUM]; schedule.Arrivals[ts] = prevOutputDeparture + hopTime; schedule.Departures[ts] = schedule.Arrivals[ts] + dwellTimes[_NUM]; prevOutputDeparture = schedule.Departures[ts]; ts++; for (int hop = _NUM, dwell = _NUM; dwell < dwellTimes.Length; hop++, dwell++) { schedule.Arrivals[ts] = prevOutputDeparture + hopTimes[hop]; schedule.Departures[ts] = schedule.Arrivals
public static Color Decode(string color, Color defaultColor) { if (color == null) { return defaultColor; } Color c = GetNamedColor(color); if (c == null) { try { c = ColorTranslator.FromHtml(color); } catch (FormatException) { return defaultColor; } } return c; }
public static LinkedList<MaryModule> ModulesRequiredForProcessing(MaryDataType sourceType, MaryDataType targetType, Locale locale, Voice voice) { if (!registrationComplete) throw new InvalidOperationException(_STR); if (sourceType == null) throw new ArgumentNullException(nameof(sourceType), _STR); if (targetType == null) throw new ArgumentNullException(nameof(targetType), _STR); LinkedList<MaryDataType> seenTypes = new LinkedList<MaryDataType>(); seenTypes.AddLast(sourceType); return ModulesRequiredForProcessing(sourceType, targetType, locale, voice, seenTypes); }
public double Distance(Vector o) { return Math.Sqrt(NumberConversions.Square(x - o.x) + NumberConversions.Square(y - o.y) + NumberConversions.Square(z - o.z)); }
public static long CalculateElapsedGC() { long timeMillis = _NUM; foreach (var gcbean in gcbeans) { timeMillis += gcbean.GetCollectionTime(); } return timeMillis; }
public void Close() { // Flush and close the underlying System.IO.TextWriter. // This method applies to stream serializers, not SAX handlers. }
public static int AddDistinctList<V>(List<V> sourceList, List<V> entryList) { if (sourceList == null || entryList == null || entryList.Count == 0) { return -1; } int sourceCount = sourceList.Count; foreach (V entry in entryList) { if (!sourceList.Contains(entry)) { sourceList.Add(entry); } } return sourceList.Count - sourceCount; }
public void StartObject(int numFields) { NotNested(); if (vtable == null || vtable.Length < numFields) { vtable = new int[numFields]; } vtableInUse = numFields; Array.Fill(vtable, _NUM, vtableInUse, _NUM); nested = _BOOL; objectStart = Offset(); }
private Dictionary<string, string> ProduceStream(string topic) { List<ProducerRecord<string, string>> messages = new List<ProducerRecord<string, string>>(EVENT_CNT); Dictionary<string, string> keyValMap = new Dictionary<string, string>(); for (int evt = _NUM; evt < EVENT_CNT; evt++) { long runtime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); string key = topic + _STR + evt.ToString(); string msg = runtime.ToString() + evt.ToString(); messages.Add(new ProducerRecord<string, string>(topic, key, msg)); keyValMap[key] = msg; } kafkaBroker.SendMessages(messages); return keyValMap; }
public static string StringOfChar(char ch, int count) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < count; i++) { buf.Append(ch); } return buf.ToString(); }
private void AddConnectionView(Connection connection) { PlatformImpl.RunAndWait(null); }
public static void Trim(CharSequence aText, int[] aSpan) { int begin = aSpan[_NUM]; int end = aSpan[_NUM] - _NUM; CharSequence data = aText; while (begin < (data.Length - _NUM) && TrimChar(data[begin])) { begin++; } while (end > _NUM && TrimChar(data[end])) { end--; } end++; aSpan[_NUM] = begin; aSpan[_NUM] = end; }
public void AddScriptFinishedListener(ScriptExecutionListener listener) { m_FinishedListeners.Add(listener); }
public void OnConsumeFinished(Purchase purchase, IabResult result) { // Associate with a derived key to indicate that no takes. }
public void TestGetPutByteArray() { const int size = _NUM; IDataRecord buf = new FixedByteArrayBuffer(size); Assert.AreEqual((byte)_NUM, buf.GetByte(_NUM)); Assert.AreEqual((byte)_NUM, buf.GetByte(size - _NUM)); int pos = _NUM; for (int i = _NUM; i < LIMIT; i++) { byte[] expected = new byte[r.Next(size - _NUM)]; r.NextBytes(expected); buf.Put(pos, expected); Assert.AreEqual(_NUM, BytesUtil.CompareBytesWithLenAndOffset(_NUM, expected.Length, expected, pos, expected.Length, buf.Array())); byte[] actual = new byte[expected.Length]; buf.Get(pos, actual); Assert.IsTrue(BytesUtil.BytesEqual(expected, actual)); } Assert.AreEqual((byte)_NUM, buf.GetByte(_NUM)); Assert.AreEqual((byte)_NUM, buf.GetByte(pos + size - _NUM)); }
public static double[] ConcatAllDouble(params double[][] arrays) { int totalLength = 0; int subArrayCount = arrays.Length; for (int i = 0; i < subArrayCount; ++i) { totalLength += arrays[i].Length; } double[] result = new double[totalLength]; int offset = 0; for (int i = 0; i < subArrayCount; ++i) { Array.Copy(arrays[i], 0, result, offset, arrays[i].Length); offset += arrays[i].Length; } return result; }
private T[] EnsureCapacity(int minCapacity) { if (tmp.Length < minCapacity) { int newSize = minCapacity; newSize |= newSize >> _NUM; newSize |= newSize >> _NUM; newSize |= newSize >> _NUM; newSize |= newSize >> _NUM; newSize |= newSize >> _NUM; newSize++; if (newSize < _NUM) newSize = minCapacity; else newSize = Math.Min(newSize, a.Length >> _NUM); T[] newArray = new T[newSize]; tmp = newArray; } return tmp; }
public void Add(string category, double minValue, double maxValue) { lock (this) { base.Add(category, minValue); mMaxValues.Add(maxValue); } }
public void CONT(int sessionNumber) { this.maxSessionNumber = Math.Max(this.maxSessionNumber, sessionNumber); testElements.Add(new ContinuationElement(sessionNumber)); }
public static double CalcRotationAngleInDegrees(PointF centerPt, PointF targetPt) { double theta = Math.Atan2(targetPt.Y - centerPt.Y, targetPt.X - centerPt.X); double angle = theta * (180.0 / Math.PI); if (angle < 0) { angle += 360; } return angle; }
public int CountIn(string sequence) { int count = _NUM; for (int i = _NUM; i < sequence.Length; i++) { if (Matches(sequence[i])) { count++; } } return count; }
public DeltaCRLIndicatorExtension(int crlNum) : base(PKIXExtensions.DeltaCRLIndicator_Id, _BOOL, new BigInteger(crlNum), NAME, LABEL) { }
public static void V(string tag, string s, params object[] args) { if (LOG.VERBOSE >= LOGLEVEL) { Log.V(tag, string.Format(s, args)); } }
private static double CalcLogProb(int numAppear, double mu) { double sigma = CalcSigmaFromMu(mu); double logNumAppear = Math.Log(numAppear); double overMu = Math.Max(logNumAppear - mu, _NUM); double res = -(_NUM / _NUM) * (overMu * overMu) / (sigma * sigma) - s_logSqrtTwoPi - Math.Log(sigma); Debug.Assert(res <= _NUM); return res; }
public SoftwarePIDController WithTolerance(double tolerance) { target = target.WithTolerance(Math.Abs(tolerance)); return this; }
protected void DragDropFinished(bool success, int operations, int x, int y) { var eventArgs = new DragSourceDropEvent(GetDragSourceContext(), operations & SourceActions, success, x, y); var dispatcher = new EventDispatcher(DISPATCH_FINISH, eventArgs); SunToolkit.InvokeLaterOnAppContext(SunToolkit.TargetToAppContext(GetComponent()), dispatcher); StartSecondaryEventLoop(); SetNativeContext(_NUM); DragImage = null; DragImageOffset = null; }
public override byte[] Write(InternalLog log) { byte[] rowkey = RowkeyBuilder.BuildRowkey(log); Put p = new Put(rowkey); PopulateColumnValues(p, log); tbl.Put(p); List<byte[]> indexRowkeys = log.GetIndexRowkeys(); if (indexRowkeys != null) { WriteIndexes(rowkey, indexRowkeys); } return rowkey; }
private void InsertIntoDynamicTable(int index, Header entry) { headerList.Add(entry); int delta = entry.HpackSize; if (index != -_NUM) { delta -= dynamicTable[DynamicTableIndex(index)].HpackSize; } if (delta > maxDynamicTableByteCount) { ClearDynamicTable(); return; } int bytesToRecover = (dynamicTableByteCount + delta) - maxDynamicTableByteCount; int entriesEvicted = EvictToRecoverBytes(bytesToRecover); if (index == -_NUM) { if (headerCount + _NUM > dynamicTable.Length) { Header[] doubled = new Header[dynamicTable.Length * _NUM]; Array.Copy(dynamicTable, _NUM, doubled, dynamicTable.Length, dynamicTable.Length); nextHeaderIndex = dynamicTable.Length - _NUM; dynamicTable = doubled; } index = nextHeaderIndex--; dynamicTable[index] = entry; headerCount++; } else { index += DynamicTableIndex(index) + entriesEvicted; dynamicTable[index] = entry; } dynamicTableByteCount += delt
protected static string ExtractSecretAccessKey(string s3uri) { return s3uri.Substring(s3uri.IndexOf(_STR, s3uri.IndexOf(_STR) + _NUM) + _NUM, s3uri.IndexOf(_STR)); }
private void Dial(string contactInformation, bool makeTheCall, bool usePhoneSpeaker) { if (contactInformation == _STR) { string lastRecipient = RecipientCmd.GetLastRecipientNumber(); string lastRecipientName = RecipientCmd.GetLastRecipientName(); if (lastRecipient != null) { DoDial(lastRecipientName, lastRecipient, makeTheCall, usePhoneSpeaker); } else { Send(_STR); } } else { ResolvedContact resolvedContact = mContactsResolver.ResolveContact(contactInformation, ContactsResolver.TYPE_ALL); if (resolvedContact == null) { Send(R.String.chat_no_match_for, contactInformation); } else if (resolvedContact.IsDistinct()) { DoDial(resolvedContact.GetName(), resolvedContact.GetNumber(), makeTheCall, usePhoneSpeaker); } else { AskForMoreDetails(resolvedContact.GetCandidates()); } } }
public void AddSafeClass(SootClass clz) { safeClasses.Add(clz.GetName()); }
private bool ActiveListHasRoom() { int maxDownloads = _NUM; return mActiveList.Count < maxDownloads; }
public static double ParseTime(string time, char separator) { if (string.IsNullOrEmpty(time) || time.Length == 0 || time.Equals("Str")) { return Time.UNDEFINED_TIME; } bool isNegative = (time[0] == 'Str'); string[] strings = isNegative ? StringUtils.Explode(time.Substring(1), separator) : StringUtils.Explode(time, separator); double seconds = 0; if (strings.Length == 1) { seconds = Math.Abs(double.Parse(strings[0])); } else if (strings.Length == 2) { int h = int.Parse(strings[0]); int m = int.Parse(strings[1]); if (m < 0 || m > 59) { throw new ArgumentException("Invalid time format: " + time); } seconds = Math.Abs(h) * 3600 + m * 60; } else if (strings.Length == 3) { int h = int.Parse(strings[0]); int m = int.Parse(strings[1]); double s = double.Parse(strings[2]); if (m < 0 ||
public bool IsRunning() { return this.running; }
protected static Dictionary<string, Step> Parse<T>(string resource) where T : RSLPStemmerBase { try { using (var stream = typeof(T).GetResourceStream(resource)) using (var reader = new StreamReader(stream, Encoding.UTF8)) { var steps = new Dictionary<string, Step>(); string step; while ((step = reader.ReadLine()) != null) { var s = ParseStep(reader, step); steps[s.Name] = s; } return steps; } } catch (IOException e) { throw new RuntimeException(e); } }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public string BetToString() { var sb = new System.Text.StringBuilder(); sb.Append(amount); sb.Append(_STR); sb.Append(itemName); sb.Append(_STR); sb.Append(target); return sb.ToString(); }
public void TestNonEmptyJournal() { var outFile = Path.GetTempFileName(); try { var src = GetStore(GetProperties()); try { if (!(src.GetBufferStrategy() is IHABufferStrategy)) { return; } src.Write(GetRandomData(_NUM)); src.Commit(); try { var snapshotFactory = new MySnapshotFactory(GetName(), _BOOL); var task = src.Snapshot(snapshotFactory); var snapshotResult = task.Result; // Assuming Task.Result is used to get the result var snapshotFile = snapshotResult.GetFile(); try { var tmp = OpenSnapshot(snapshotResult); Assert.AreEqual(src.GetRootBlockView(), tmp.GetRootBlockView()); tmp.Destroy(); } finally { if (snapshotFile.Exists) { snapshotFile.Delete(); } } } catch (ArgumentException ex) { Log.Info(_STR + ex); } } finally { src.Destroy(); } } finally { File.Delete(outFile); } }
private bool CheckMatchIp(Dictionary<string, object> rows) { bool matchEther = false; string val = rows.TryGetValue(StaticFlowEntryPusher.COLUMN_DL_TYPE, out var value) ? value as string : null; if (val != null) { int type = 0; if (val.StartsWith("0x")) { type = Convert.ToInt32(val.Substring(2), 16); } else { try { type = Convert.ToInt32(val); } catch (FormatException) { // Handle format exception if needed } } if (type == 0) matchEther = true; } if ((rows.ContainsKey(StaticFlowEntryPusher.COLUMN_NW_DST) || rows.ContainsKey(StaticFlowEntryPusher.COLUMN_NW_SRC) || rows.ContainsKey(StaticFlowEntryPusher.COLUMN_NW_PROTO) || rows.ContainsKey(StaticFlowEntryPusher.COLUMN_NW_TOS)) && matchEther == true) { return true; } return false; }
public static double PowQuick(double value, double power) { if (USE_JDK_MATH) { return STRICT_MATH ? StrictMath.Pow(value, power) : Math.Pow(value, power); } return FastMath.Exp(power * FastMath.LogQuick(value)); }
private string ClassToEntryPath(Type clazz) { string name = ""; Type parent; while ((parent = clazz.DeclaringType) != null) { name = clazz.Name + name; clazz = parent; } return ClassNameToEntryPath(clazz.FullName + name); }
public static string Write(POSMikheevCounter counter) { return POSBaseLineCounter.Write(counter); }
private Dictionary<string, AnnotationMirror> AnnosInPackage(PackageElement packageElement) { return CreateImportedAnnotationsMap(ElementFilter.TypesIn(packageElement.GetEnclosedElements())); }
public OsmElement PasteFrom() { List<Way> ways = storage.GetWays(); List<Node> nodes = storage.GetNodes(); if (mode == Mode.CUT) { Reset(); if (ways != null && ways.Count == _NUM) { Way w = ways[_NUM]; w.SetState(savedState); foreach (Node nd in w.GetNodes()) { Log.d(_STR, _STR + nd.GetOsmId()); nd.SetState(savedNdState[nd]); } return w; } else if (nodes != null && nodes.Count == _NUM) { Node n = nodes[_NUM]; n.SetState(savedState); return n; } } else { if (ways != null && ways.Count == _NUM) { return ways[_NUM]; } else if (nodes != null && nodes.Count == _NUM) { return nodes[_NUM]; } } return null; }
public void UpdateCursor() { updatePending.Set(_BOOL); UpdateCursorImpl(); }
public static bool IsMiddleMouseButton(MouseEventArgs anEvent) { return ((anEvent.Modifiers & MouseEvent.BUTTON2_DOWN_MASK) != 0 || anEvent.Button == MouseButtons.Middle); }
public void AddSuccessMessage(string successMessage) { successMessageList.Add(successMessage); }
private void StartStoppedChanged() { clock.SetStartStopped(startStoppedCheckBox.Checked); changed = true; }
public void Close() { try { DebugMessage(_STR, _STR); if (Debugging(_STR)) { System.Threading.Thread.Sleep(_NUM); } if (inputStream != null) { inputStream.Close(); } } catch (Exception e) { e.PrintStackTrace(); } inputStream = null; }
public static long? NextLogSegmentSequenceNumber(List<LogSegmentMetadata> segmentListDesc) { int lastAssignedLogSegmentIdx = -_NUM; long? lastAssignedLogSegmentSeqNo = null; long? nextLogSegmentSeqNo = null; for (int i = _NUM; i < segmentListDesc.Count; i++) { LogSegmentMetadata metadata = segmentListDesc[i]; if (LogSegmentMetadata.SupportsLogSegmentSequenceNo(metadata.GetVersion())) { lastAssignedLogSegmentSeqNo = metadata.GetLogSegmentSequenceNumber(); lastAssignedLogSegmentIdx = i; break; } } if (lastAssignedLogSegmentSeqNo.HasValue) { nextLogSegmentSeqNo = lastAssignedLogSegmentSeqNo.Value + lastAssignedLogSegmentIdx + _NUM; } return nextLogSegmentSeqNo; }
private void ReadBinary(LittleEndianDataInputStream dis) { RajLog.i(_STR); dis.Skip(_NUM); int facetCount = dis.ReadInt(); float[] verticesArr = new float[facetCount * _NUM]; float[] normalsArr = new float[facetCount * _NUM]; int[] indicesArr = new int[facetCount * _NUM]; float[] tempNorms = new float[_NUM]; int vertPos = _NUM, normPos = _NUM; for (int i = _NUM; i < indicesArr.Length; i++) { indicesArr[i] = i; } while (dis.Available() > _NUM) { for (int j = 0; j < _NUM; j++) { tempNorms[j] = dis.ReadFloat(); if (float.IsNaN(tempNorms[j]) || float.IsInfinity(tempNorms[j])) { RajLog.w(_STR); tempNorms[0] = _NUM; tempNorms[1] = _NUM; tempNorms[2] = _NUM; break; } } for (in
public static void AssertSpecificLang(string specificLang) { if (string.IsNullOrEmpty(specificLang) || specificLang.Length == _NUM) { throw new XMPException(_STR, XMPError.BADPARAM); } }
public int OnBlockExploded() { return (int)(fuseTime / _NUM + new Random().NextDouble() * fuseTime / _NUM); }
public override bool HasQueuedReaderThreads() { return readerLock.HasQueuedThreads(); }
public long InactiveTimeMillis() { return DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - lastTimeMillis; }
public static void Check(bool cond, object value) { if (!cond) { throw new ArgumentException(value.ToString()); } }
public void AddDefinition(ICOSDefinition cosDef) { if (!(cosDef is DirectCOSDefinition)) { string msg = i18n.GetString(IUMSConstants.INVALID_COSDEFINITION); throw new UMSException(msg); } string[] cosAttributes = cosDef.GetCOSAttributes(); var aList = new List<string>(ICOSDefinition.qualifiers); for (int i = _NUM; i < cosAttributes.Length; i++) { string cosAttribute = null; string qualifier = null; var st = new StringTokenizer(cosAttributes[i]); if (st.HasMoreTokens()) { cosAttribute = st.NextToken(); } if (cosAttribute == null) { string msg = i18n.GetString(IUMSConstants.INVALID_COS_ATTRIBUTE_QUALIFIER); throw new UMSException(msg); } if (st.HasMoreTokens()) { qualifier = st.NextToken(); } if (qualifier == null) { qualifier = ICOSDefinition.qualifiers[ICOSDefinition.DEFAULT]; cosDef.RemoveCOSAttribute(cosAttribute); cosDef.AddCOSAttribute(cosAttribute, ICOSDefinition.DEFAULT); } if
public static SourceDataQuality FromXml(XElement domElement) { var fields = domElement.Elements(); SourceDataQuality result = new SourceDataQuality(); foreach (var fieldNode in fields) { string fieldName = fieldNode.Name.LocalName; string fieldValueString = fieldNode.Value.Trim(); if (fieldName == XML_ELEMENT_QUALITY_CODE) { result.QualityCode = short.Parse(fieldValueString); } else if (fieldName == XML_ELEMENT_QUALITY_DESC) { result.Description = fieldValueString; } } return result; }
public QName ToQName(Type outputClass) { string localPart; string namespaceUri; if (Attribute.IsDefined(outputClass, typeof(XmlRootElementAttribute))) { var annotation = (XmlRootElementAttribute)Attribute.GetCustomAttribute(outputClass, typeof(XmlRootElementAttribute)); localPart = annotation.ElementName; namespaceUri = annotation.Namespace; } else if (Attribute.IsDefined(outputClass, typeof(XmlTypeAttribute))) { var annotation = (XmlTypeAttribute)Attribute.GetCustomAttribute(outputClass, typeof(XmlTypeAttribute)); localPart = annotation.TypeName; namespaceUri = annotation.Namespace; } else { throw new ArgumentException($"Class '{outputClass}' does not have the necessary XML attributes."); } if (localPart == JAXB_DEFAULT_ANNOTATION_VALUE) { localPart = ClassUtils.GetShortNameAsProperty(outputClass); } if (namespaceUri == JAXB_DEFAULT_ANNOTATION_VALUE) { var outputClassPackage = outputClass.Namespace; if (!string.IsNullOrEmpty(outputClassPackage) && Attribute.IsDefined(Assembly.GetExecutingAssembly().GetCustomAttributes(typeof(XmlSchemaAttribute), false) as Type[], typeof(
private void AdjustBottom(RectF rect, float bottom, RectF bounds, int viewHeight, float snapMargin, float aspectRatio, bool leftMoves, bool rightMoves) { float newBottom = bottom; if (newBottom > viewHeight) { newBottom = viewHeight + (newBottom - viewHeight) / _NUM; mTouchOffset.y -= (newBottom - viewHeight) / _NUM; } if (newBottom > bounds.bottom) { mTouchOffset.y -= (newBottom - bounds.bottom) / _NUM; } if (bounds.bottom - newBottom < snapMargin) { newBottom = bounds.bottom; } if (newBottom - rect.top < mMinCropHeight) { newBottom = rect.top + mMinCropHeight; } if (newBottom - rect.top > mMaxCropHeight) { newBottom = rect.top + mMaxCropHeight; } if (bounds.bottom - newBottom < snapMargin) { newBottom = bounds.bottom; } if (aspectRatio > _NUM) { float newWidth = (newBottom - rect.top) * asp
private static string GenerateJWT(string secret, string jwtID, string iss, int? ttl, Dictionary<string, string> claims) { try { return SignJWT(secret, jwtID, ttl, iss, claims); } catch (JOSEException e) { e.PrintStackTrace(); throw new HmacException(_STR, e); } }
public void ExportSymbols(string[] exportNames, Symbol[] symbols) { if (exportedSymbols == null) { exportedSymbols = new List<ExportedSymbol>(); } for (int i = _NUM; i < exportNames.Length && i < symbols.Length; i++) { exportedSymbols.Add(new ExportedSymbol(symbols[i], exportNames[i])); } }
static bool IsFulfilling(int m) { return (m & FULFILLING) != _NUM; }
public override void AddDataSourceListener(DataSourceListener dsl) { lock (m_dataSourceListeners) { m_dataSourceListeners.Add(dsl); if (m_format != null) { var e = new DataSetEvent(this, m_format); dsl.AcceptDataSet(e); } } }
public static AnnotationMirror FindEffectiveAnnotationInHierarchy(QualifierHierarchy qualifierHierarchy, AnnotatedTypeMirror toSearch, AnnotationMirror top) { return FindEffectiveAnnotationInHierarchy(qualifierHierarchy, toSearch, top, _BOOL); }
public bool ToFail() { LifecycleState state; lock (this) { state = _state; if (state.IsAfterDestroying()) { return _BOOL; } _state = FAILED; _lastChangeTime = CurrentTime.CurrentTime(); } if (_log != null && _log.IsLoggable(_level)) { _log.Log(_level, _STR + _name); } NotifyListeners(state, FAILED); _failCount++; return _BOOL; }
private static void Read(Stream inStream, byte[] buf, int pos, int n) { int read = 0; int res; while (read < n) { res = inStream.Read(buf, read + pos, n - read); if (res > 0) { read += res; } else { throw new IOException($"Unable to read {read} of {n} bytes."); } } }
public double Evaluate(VectorInstance x, VectorInstance y) { VectorInstance diff = x.Subtract(y); double result = -m_gamma * diff.DotProduct(diff); return Math.Exp(result); }
void ParseFinish() { mChildren = mCurrentGroup.GetChildren(); }
void CancelIncludedOnly() { if (!_showAllInput) { _inputAllButton.DoClick(); } if (!_showAllOutput) { _outputAllButton.DoClick(); } if (!_showAllAlign) { _alignAllButton.DoClick(); } }
public List<Entry> KillAll(bool rootIncluded) { List<Entry> killed = new List<Entry>(rootIncluded ? entries.Count : entries.Count - _NUM); Entry entry; for (int i = entries.Count - _NUM; i > (rootIncluded ? -_NUM : _NUM); i--) { entry = entries[i]; if (entry.dead) continue; entry.dead = _BOOL; if (i != _NUM) { killed.Add(entry); } } return killed; }
public static void CreateErrorDialog(string title, string message) { var alert = new System.Windows.Forms.MessageBox(); System.Windows.Forms.MessageBox.Show(message, title, System.Windows.Forms.MessageBoxButtons.OK, System.Windows.Forms.MessageBoxIcon.Error); }
public static string CheckIndexHeaderSuffix(DataInput inStream, string expectedSuffix) { int suffixLength = inStream.ReadByte() & NUM; byte[] suffixBytes = new byte[suffixLength]; inStream.ReadBytes(suffixBytes, NUM, suffixBytes.Length); string suffix = System.Text.Encoding.UTF8.GetString(suffixBytes, NUM, suffixBytes.Length); if (!suffix.Equals(expectedSuffix)) { throw new CorruptIndexException(STR + expectedSuffix + STR + suffix, inStream); } return suffix; }
protected void Tag(string tag, List<string> names, List<string> values, int nattr, bool close) { Spacing(); m_out.Print(_STR); m_out.Print(tag); for (int i = _NUM; i < nattr; ++i) { m_out.Print(_STR); m_out.Print(names[i]); m_out.Print(_STR); m_out.Print(_STR); EscapeString(values[i]); m_out.Print(_STR); } if (close) m_out.Print(_STR); m_out.Print(_STR); println(); if (!close) { m_tagStack.Add(tag); } }
public static string ParseDiskString(string input) { string delims = _STR; string[] tokens = input.Split(new[] { delims }, StringSplitOptions.None); return tokens[_NUM]; }
protected void DrawCloud(int x, int y, int w, int h, Color fillColor, Paint fillPaint, Color penColor, bool shadow) { using (GraphicsPath path = new GraphicsPath()) { path.StartFigure(); path.AddBezier(x + _NUM * w, y + _NUM * h, x + _NUM * w, y + _NUM * h, x, y + _NUM * h, x + _NUM * w, y + _NUM * h); path.AddBezier(x, y + _NUM * h, x + _NUM * w, y + _NUM * h, x + _NUM * w, y + _NUM * h); path.AddBezier(x + _NUM * w, y + h, x + _NUM * w, y + h, x + _NUM * w, y + _NUM * h); path.AddBezier(x + w, y + _NUM * h, x + w, y + _NUM * h, x + _NUM * w, y + _NUM * h); path.AddBezier(x + w, y + _NUM * h, x + _NUM * w, y + _
private static bool IsTrusted(object obj, TrustVerifier.Context ctx) { var saved = state.Get(); try { state.Set(obj); return ctx.IsTrustedObject(obj); } finally { state.Set(saved); } }
public static PersistentSearchRequestControl NewControl(bool isCritical, bool changesOnly, bool returnECs, params PersistentSearchChangeType[] changeTypes) { if (changeTypes == null) { throw new ArgumentNullException(nameof(changeTypes)); } return NewControl(isCritical, changesOnly, returnECs, changeTypes.ToList()); }
private void ConnectEqualized(SynapseGroup synapseGroup) { currentOrderingIndices = new int[sourceNeurons.Length]; int numConnectsPerSrc; int expectedNumSyns; if (synapseGroup.IsRecurrent() && !selfConnectionAllowed) { numConnectsPerSrc = (int)(connectionDensity * (sourceNeurons.Length - _NUM)); } else { numConnectsPerSrc = (int)(connectionDensity * targetNeurons.Length); } expectedNumSyns = numConnectsPerSrc * sourceNeurons.Length; synapseGroup.PreAllocateSynapses(expectedNumSyns); for (int i = _NUM, n = sourceNeurons.Length; i < n; i++) { currentOrderingIndices[i] = numConnectsPerSrc; Neuron src = sourceNeurons[i]; Neuron tar; for (int j = _NUM; j < numConnectsPerSrc; j++) { tar = targetNeurons[sparseOrdering[i][j]]; Synapse s = new Synapse(src, tar); synapseGroup.AddNewSynapse(s); } } }
public static int Multiply(char left, char right) { return (int)left * (int)right; }
public static string Normalize(string self) { const char _STR = ' '; // Assuming _STR is a space character const int _NUM = 0; // Assuming _NUM is zero int nx = self.IndexOf(_STR); if (nx < _NUM) { return self; } int len = self.Length; StringBuilder sb = new StringBuilder(len); int i = _NUM; do { sb.Append(self.Substring(i, nx - i)); sb.Append(_STR); if ((i = nx + _NUM) >= len) break; if (self[i] == _STR) { if (++i >= len) break; } nx = self.IndexOf(_STR, i); } while (nx > _NUM); sb.Append(self.Substring(i, len - i)); return sb.ToString(); }
public void AddZoneChangeListener(ZoneChangeListener listener) { zoneChangeListeners.Add(listener); }
public void Write(int b) { if (m_store == null) { throw new InvalidOperationException(ERR_NO_STORE); } if (m_isSaved) { throw new InvalidOperationException(ERR_ALREADY_SAVED); } if (m_count == m_blobThreshold && !m_writingHdr) { if (m_blobHeader == null) { m_blobHeader = new List<int>(); } int curAddr = (int)m_store.Alloc(m_buf, m_count, m_context); m_blobHeader.Add(curAddr); m_count = _NUM; } m_buf[m_count++] = (byte)b; m_bytesWritten++; }
public StartListener(object resource) { _resource = resource; }
public List<T> AsFlatList() { List<T> list = new List<T>(); for (int i = _NUM; i < GetRowCount(); i++) { for (int j = _NUM; j < GetColumnCount(); j++) { list.Add(GetLogicalValueAt(i, j)); } } return list; }
[Beta] public void Reset() { schedulersHook.Set(null); }
public static string HashKeyForDisk(string key) { string cacheKey; try { using (var mDigest = System.Security.Cryptography.MessageDigest.Create("SHA256")) // Assuming _STR is "SHA256" { mDigest.TransformBlock(System.Text.Encoding.UTF8.GetBytes(key), 0, key.Length, null, 0); cacheKey = BitConverter.ToString(mDigest.TransformFinalBlock(new byte[0], 0, 0)).Replace("-", "").ToLowerInvariant(); } } catch (System.Security.Cryptography.CryptographicException) { cacheKey = key.GetHashCode().ToString(); } return cacheKey; }
public void RecordTimestamp() { long curTimestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); if (usedFields > _NUM) { long diff = curTimestamp - lastValue; if (usedFields == diffs.Length) { long removedValue = diffs[curPosition]; diffs[curPosition] = diff; CalculateNewAverage(removedValue, diff, _BOOL); ShiftEnd(); } else { CalculateNewAverage(_NUM, diff, _BOOL); diffs[curPosition] = diff; ShiftEnd(); } } else if (lastValue != -_NUM) { long diff = curTimestamp - lastValue; currentAverage = _NUM; diffs[curPosition] = diff; CalculateNewAverage(_NUM, diff, _BOOL); ShiftEnd(); } lastValue = curTimestamp; }
[AfterMethod] public void TearDown() { Throwable t = threadFailure.GetAndSet(null); if (t != null) { if (t is Error) throw (Error)t; else if (t is RuntimeException) throw (RuntimeException)t; else if (t is Exception) throw (Exception)t; else { var afe = new AssertionFailedError(t.ToString()); afe.InitCause(t); throw afe; } } if (Thread.CurrentThread.Interrupted()) TearDownFail(_STR); CheckForkJoinPoolThreadLeaks(); }
public void Parse(string input) { if (input == null) { throw new ArgumentNullException(_STR); } int bufferSize = Math.Max(MIN_BUFFER_SIZE, Math.Min(DEFAULT_BUFFER_SIZE, input.Length)); try { Parse(new StringReader(input), bufferSize); } catch (IOException exception) { throw new InvalidOperationException(exception.Message, exception); } }
protected double DefaultMaxRadius() { return Math.Sqrt(_NUM); }
public char[] ToCharArray() { char[] newValue = new char[count]; Array.Copy(buf, _NUM, newValue, _NUM, count); return newValue; }
protected override int SizePendingWorkers() { return _pendingWorkers.Count; }
public void Insert(Component component, int index) { if (index < _NUM) { throw new ArgumentException(_STR); } int nitems = GetComponentCount(); List<Component> tempItems = new List<Component>(); for (int i = index; i < nitems; i++) { tempItems.Add(GetComponent(index)); Remove(index); } Add(component); foreach (Component tempItem in tempItems) { Add(tempItem); } }
public static List<string> Unescape(string source, char escapeChar, char[] specialCharacters, char splitCharacter, int splitLimit) { List<string> result = new List<string>(); StringBuilder b = new StringBuilder(); bool readEscape = false; int indexCount = -1; for (int i = 0; i < source.Length; i++) { char c = source[i]; indexCount++; if (readEscape) { bool found = false; if (c == splitCharacter) { found = true; b.Append(c); } else if (c == escapeChar) { found = true; b.Append(c); } else { foreach (char s in specialCharacters) { if (s == c) { found = true; b.Append(c); break; } } } if (!found) { throw new ArgumentException($"Invalid character {c} in source string {source}"); } readEscape = false; } else if (c == escapeChar) { readEscape = true; } else if
protected int DrawLegend(Canvas canvas, DefaultRenderer renderer, string[] titles, int left, int right, int y, int width, int height, int legendSize, Paint paint, bool calculate) { float size = _NUM; if (renderer.IsShowLegend()) { float currentX = left; float currentY = y + height - legendSize + size; paint.SetTextAlign(Align.LEFT); paint.SetTextSize(renderer.GetLegendTextSize()); int sLength = Math.Min(titles.Length, renderer.GetSeriesRendererCount()); for (int i = _NUM; i < sLength; i++) { SimpleSeriesRenderer r = renderer.GetSeriesRendererAt(i); float lineSize = GetLegendShapeWidth(i); if (r.IsShowLegendItem()) { string text = titles[i]; if (titles.Length == renderer.GetSeriesRendererCount()) { paint.SetColor(r.GetColor()); } else { paint.SetColor(Color.LTGRAY); } float[] widths = new float[text.Length]; paint.GetTextWidths(text, widths); float sum = _NUM; foreach (float value in width
public override string Append(string path, Stream inputStream) { string response = null; EnsureValidToken(); string spec = string.Format(_STR, UrlUtil.EncodePath(path), this.principal); string redirectUrl = null; HttpWebRequest request = (HttpWebRequest)authenticatedURL.OpenConnection(new Uri(new Uri(httpfsUrl), spec), token); request.Method = _STR; request.AllowAutoRedirect = false; using (HttpWebResponse conn = (HttpWebResponse)request.GetResponse()) { Logger.Info(_STR + conn.Headers[_STR]); response = Result(conn, true); if (conn.StatusCode == HttpStatusCode.Redirect) { redirectUrl = conn.Headers[_STR]; } } if (redirectUrl != null) { HttpWebRequest redirectRequest = (HttpWebRequest)authenticatedURL.OpenConnection(new Uri(redirectUrl), token); redirectRequest.Method = _STR; redirectRequest.AllowWriteStreamBuffering = true; redirectRequest.AllowReadStreamBuffering = true; redirectRequest.UseDefaultCredentials = false; redirectRequest.Headers[_STR] = _STR; int size = (int)inputStr
public EconomyConcurrentHashMap(IDictionary<K, V> dictionary, IHashEntryHandler<K, V> handler) : this(Math.Max((int)(dictionary.Count / DEFAULT_LOAD_FACTOR) + _NUM, DEFAULT_INITIAL_CAPACITY), DEFAULT_LOAD_FACTOR, DEFAULT_CONCURRENCY_LEVEL, handler) { PutAll(dictionary); }
void AddRule(string[] selector, AttributeSet declaration, bool isLinked) { int n = selector.Length; StringBuilder sb = new StringBuilder(); sb.Append(selector[_NUM]); for (int counter = _NUM; counter < n; counter++) { sb.Append(_STR); sb.Append(selector[counter]); } string selectorName = sb.ToString(); Style rule = GetStyle(selectorName); if (rule == null) { Style altRule = AddStyle(selectorName, null); lock (this) { SelectorMapping mapping = GetRootSelectorMapping(); for (int i = n - _NUM; i >= _NUM; i--) { mapping = mapping.GetChildSelectorMapping(selector[i], _BOOL); } rule = mapping.GetStyle(); if (rule == null) { rule = altRule; mapping.SetStyle(rule); RefreshResolvedRules(selectorName, selector, rule, mapping.GetSpecificity()); } } } if (isLinked) { rule = GetLinkedStyle(rule); } rule.AddAttributes(declaration); }
public Builder AppendReadData(byte[] data) { System.Diagnostics.Debug.Assert(data != null && data.Length > _NUM); segments.Add(new Segment(data, null)); return this; }
private bool IsLatestDssKeystore(TSLParserResult parseResult) { List<string> englishSchemeInformationURIs = parseResult.GetEnglishSchemeInformationURIs(); return englishSchemeInformationURIs.Contains(ojUrl); }
private readonly object _lock = new object(); private string resourceBundleName; private ResourceBundle resourceBundle; private void InitResourceBundle(string resourceBundleName) { lock (_lock) { string current = this.resourceBundleName; if (current != null) { if (current.Equals(resourceBundleName)) { return; } else { throw new ArgumentException($"Resource bundle name conflict: {resourceBundleName} vs {current}"); } } if (resourceBundleName != null) { this.resourceBundle = LoadResourceBundle(resourceBundleName); this.resourceBundleName = resourceBundleName; } } }
public LayerGraphicWarehouseSupport() { InitDrawingAttributes(); graphics = new OMGraphicList(); graphics.SetTraverseMode(OMGraphicList.TraverseMode.LastAddedOnTop); }
public bool MatchesNamingConvention() { return Regex.IsMatch(packageName, JAVA_PACKAGE_CONVENTION); }
void RememberFactory(string host, RMISocketFactory factory) { lock (successTable) { while (hostList.Count >= MaxRememberedHosts) { successTable.Remove(hostList[_NUM]); hostList.RemoveAt(_NUM); } hostList.Add(host); successTable[host] = factory; } }
public void Put(string key, long value) { if (key != null) { urlParams[key] = value.ToString(); } }
public char Next() { return pos < in.Length ? in[pos++] : '\0'; }
private KeyValuePair<K, V>? DoRemoveFirstEntry<K, V>() { for (Node<K, V> b = head.node, n;;) { n = b.next; if (n == null) return null; Node<K, V> f = n.next; if (n != b.next) continue; object v = n.value; if (v == null) { n.HelpDelete(b, f); continue; } if (!n.CasValue(v, null)) continue; if (!n.AppendMarker(f) || !b.CasNext(n, f)) FindFirst(); ClearIndexToFirst(); return new KeyValuePair<K, V>(n.key, (V)v); } }
public ComputeTaskCancelledException(Exception cause) : base(cause.Message, cause) { }
public static int Normalize(char[] src, int srcStart, int srcLimit, char[] dest, int destStart, int destLimit, Mode mode, int options) { int length = mode.Normalize(src, srcStart, srcLimit, dest, destStart, destLimit, options); if (length <= (destLimit - destStart)) { return length; } else { throw new IndexOutOfRangeException(length.ToString()); } }
private void RemoveObsoleteElements(List<string> names, Dictionary<string, View> sharedElements, List<string> elementsToRemove) { if (elementsToRemove.Count > _NUM) { names.RemoveAll(name => elementsToRemove.Contains(name)); foreach (var elementToRemove in elementsToRemove) { sharedElements.Remove(elementToRemove); } } }
public bool IsHighlightWithInvisibleEdge() { return highlightWithInvisibleEdge; }
public void RemoveAction(NetworkUpdateAction action) { actionList.Remove(action); foreach (var listener in listeners) { listener.ActionRemoved(action); } }
public static double BufferDistanceError(int quadSegs) { double alpha = Math.PI / _NUM / quadSegs; return _NUM - Math.Cos(alpha / _NUM); }
public KeyValuePair<string, string> Next() { try { currentHeaderPosition = nextHeaderPosition; string readHeader = nextLine; nextHeaderPosition += readHeader.Length + endOfLineBytes; readHeader = _STR + readHeader.Substring(_NUM); string readSequence = r.ReadLine(); nextHeaderPosition += readSequence.Length + endOfLineBytes; string comments = r.ReadLine(); nextHeaderPosition += comments.Length + endOfLineBytes; if (comments.StartsWith(_STR)) { string qualityValues = r.ReadLine(); nextHeaderPosition += qualityValues.Length + endOfLineBytes; } nextLine = r.ReadLine(); return new KeyValuePair<string, string>(readHeader, readSequence); } catch (IOException e) { Basic.Caught(e); } return default(KeyValuePair<string, string>); }
public void Add(Character character) { elements.Add(character == null ? JsonNull.Instance : new JsonPrimitive(character)); }
public static bool IsValidIfd(int ifdId) { return ifdId == IfdId.TYPE_IFD_0 || ifdId == IfdId.TYPE_IFD_1 || ifdId == IfdId.TYPE_IFD_EXIF || ifdId == IfdId.TYPE_IFD_INTEROPERABILITY || ifdId == IfdId.TYPE_IFD_GPS; }
public void RemoveChild(Group theGroup) { mChildren.Remove(theGroup); }
protected StoragePort CheckPortExistsInDB(string nativeGuid) { StoragePort port = null; var portInDB = CustomQueryUtility.GetActiveStoragePortByNativeGuid(_dbClient, nativeGuid); if (portInDB != null && portInDB.Count > 0) { port = portInDB[_NUM]; } return port; }
public void AppendSplitElement(Fragment aSplit) { splits.Add(aSplit); }
public IEnumerator EnumerateLiteralResultAttributes() { return m_avts == null ? null : m_avts.GetEnumerator(); }
public OsmHandler(MapBuilder meConsumer) { osmElementProcessor = new OsmElementProcessor(null, meConsumer); }
public void Close() { FlushBits(); out.Close(); }
public RespokeDirectConnection DirectConnection() { if (directConnectionReference != null) { return directConnectionReference.Get(); } else { return null; } }
private string AppendNationalNumber(string nationalNumber) { int prefixBeforeNationalNumberLength = prefixBeforeNationalNumber.Length; if (shouldAddSpaceAfterNationalPrefix && prefixBeforeNationalNumberLength > _NUM && prefixBeforeNationalNumber[prefixBeforeNationalNumberLength - _NUM] != SEPARATOR_BEFORE_NATIONAL_NUMBER) { return prefixBeforeNationalNumber + SEPARATOR_BEFORE_NATIONAL_NUMBER + nationalNumber; } else { return prefixBeforeNationalNumber + nationalNumber; } }
public void Cut() { Copy(); DeleteSelectedObjects(); }
public void Stop() { SetLedOn(_BOOL); if (blinkFuture != null) { blinkFuture.Cancel(_BOOL); } if (blinkService != null) { blinkService.ShutdownNow(); } }
public synchronized void Release() { index.Clear(); }
public void Configure() { if (cmdPrefix != null) { prefix = cmdPrefix.Split(_STR); } }
protected void WriteTransform(AffineTransform t) { pageStream.Matrix(t); }
public void TestSignumPositive() { string a = _STR; int aScale = _NUM; decimal aNumber = decimal.Parse(a) * (decimal)Math.Pow(10, -aScale); Assert.AreEqual(_STR, _NUM, Math.Sign(aNumber)); }
public PainterChain PrependPainter(Painter p) { Painter[] newChain = new Painter[chain.Length + _NUM]; System.Array.Copy(chain, _NUM, newChain, _NUM, chain.Length); newChain[_NUM] = p; return new PainterChain(newChain); }
private Operator.Kind? ParseOperator(TokenStream tokens) { if (tokens.Has(_STR)) { tokens.Next(); tokens.Expect(_STR); return Operator.Kind.EQUALS; } if (tokens.Has(_STR)) { tokens.Next(); tokens.Expect(_STR); return Operator.Kind.NOT_EQUALS; } if (tokens.Has(_STR)) { tokens.Next(); if (tokens.Has(_STR)) { tokens.Next(); return Operator.Kind.LESS_EQUAL; } return Operator.Kind.LESS; } if (tokens.Has(_STR)) { tokens.Next(); if (tokens.Has(_STR)) { tokens.Next(); return Operator.Kind.GREATER_EQUAL; } return Operator.Kind.GREATER; } return null; }
public override bool DragTo(Selector obj, Selector destObj, int steps) { return DragTo(device.FindObject(obj.ToUiSelector()), destObj, steps); }
private void QueueUpSyncs(Cursor contactsCursor) { ContactSyncEntry syncEntry = null; while (contactsCursor.MoveNext()) { if (syncEntry == null) { syncEntry = new ContactSyncEntry(UPLOAD_BATCH_SIZE); } string number = contactsCursor.GetString(contactsCursor.GetColumnIndex(ContactsContract.CommonDataKinds.Phone.Number)); string name = contactsCursor.GetString(contactsCursor.GetColumnIndex(ContactsContract.CommonDataKinds.Phone.DisplayName)); if (!string.IsNullOrEmpty(number)) { syncEntry.AddNumber(NumberToNational(number)); syncEntry.AddName(name); if (syncEntry.IsFull()) { Logger.D(TAG, _STR); mSyncQueue.Add(syncEntry); syncEntry = null; } } } }
public synchronized void RemoveSeries(int index) { mSeries.RemoveAt(index); }
public static void AddGlue(JComponent b, int layout) { b.Add(GetAxis(b, layout) == BoxLayout.X_AXIS ? Box.CreateHorizontalGlue() : Box.CreateVerticalGlue()); }
public static void WriteResultToFile(Result result, string fname) { using (StreamWriter writer = new StreamWriter(fname)) { writer.Write(result.ToString()); } }
private JMXProvider() { }
protected void WriteBlockletInfoToFile(List<BlockletInfoColumnar> infoList, FileChannel channel, string filePath) { try { long currentPosition = channel.Size(); CarbonFooterWriter writer = new CarbonFooterWriter(filePath); FileFooter convertFileMeta = CarbonMetadataUtil.ConvertFileFooter(infoList, localCardinality.Length, localCardinality, thriftColumnSchemaList, segmentProperties); FillBlockIndexInfoDetails(infoList, convertFileMeta.NumRows, filePath, currentPosition); writer.WriteFooter(convertFileMeta, currentPosition); } catch (IOException e) { throw new CarbonDataWriterException(_STR, e); } }
private static void RenderTree(Tree tree, int indent, bool parentLabelNull, bool firstSibling, bool leftSiblingPreTerminal, bool topLevel, StringBuilder sb) { bool suppressIndent = parentLabelNull || (firstSibling && tree.IsPreTerminal()) || (leftSiblingPreTerminal && tree.IsPreTerminal()); if (suppressIndent) { sb.Append(_STR); } else { if (!topLevel) { sb.Append(_STR); } for (int i = _NUM; i < indent; i++) { sb.Append(_STR); } } if (tree.IsLeaf() || tree.IsPreTerminal()) { RenderFlat(tree, sb); return; } sb.Append(_STR); sb.Append(tree.GetLabel()); RenderChildren(tree.GetChildren(), indent + _NUM, _BOOL, sb); sb.Append(_STR); }
public static StringBuilder ReplaceRegex(StringBuilder original, string regex, string replace, bool caseInsensitive) { RegexOptions options = caseInsensitive ? RegexOptions.IgnoreCase : RegexOptions.None; Regex pattern = new Regex(regex, options); StringBuilder newSB = new StringBuilder(); MatchCollection matches = pattern.Matches(original.ToString()); int lastIndex = 0; foreach (Match match in matches) { newSB.Append(original.ToString(), lastIndex, match.Index - lastIndex); newSB.Append(replace); lastIndex = match.Index + match.Length; } newSB.Append(original.ToString(), lastIndex, original.Length - lastIndex); return newSB; }
public bool EqualsChars(string a, int ai, string b, int bi, bool ignoreCase) { char ca = a[ai]; char cb = b[bi]; if (ignoreCase) { ca = char.ToUpper(ca); cb = char.ToUpper(cb); } return ca == cb; }
private void AdjustBackingFileLength(byte[] buffer, long index) { if (buffer == null || buffer.Length == _NUM) { throw new IOException(_STR); } long newsize = fHeader.HeaderSize() + (index * CHUNK_ENC_SIZE) + CHUNK_IV_SIZE + buffer.Length + CHUNK_TLEN; if (newsize > RealLength()) { backingRandomAccessFile.SetLength(newsize); } }
private static ICollection<ICollection<DsnNetPin>> CreateOrderedSubnets(ICollection<DsnNetPin> pinList) { var result = new List<ICollection<DsnNetPin>>(); if (pinList.Count == 0) { return result; } using (var enumerator = pinList.GetEnumerator()) { if (!enumerator.MoveNext()) { return result; } DsnNetPin prevPin = enumerator.Current; while (enumerator.MoveNext()) { DsnNetPin nextPin = enumerator.Current; var currSubnetPinList = new SortedSet<DsnNetPin> { prevPin, nextPin }; result.Add(currSubnetPinList); prevPin = nextPin; } } return result; }
public override void Run(int connID, string[] args) { if (args.Length == _NUM) { server.SendServerChat(connID, _STR); server.SendServerChat(connID, _STR); server.SendServerChat(connID, _STR); server.SendServerChat(connID, _STR); server.SendServerChat(connID, _STR); server.SendServerChat(connID, _STR); server.SendServerChat(connID, _STR); server.SendServerChat(connID, _STR); server.SendServerChat(connID, _STR); } try { if (args.Length > _NUM) { string cmd = args[_NUM]; if (cmd.Equals(_STR, StringComparison.OrdinalIgnoreCase)) { if (args.Length > _NUM) { int id = int.Parse(args[_NUM]); server.SendServerChat(connID, strListNetwork(connID, id, _BOOL)); } else { server.SendServerChat(connID, strListNetworks(connID, _BOOL)); } } else if (cmd.Equals(_STR, StringComparison.OrdinalIgnoreCase)) {
private char[] ParseEntityReference() { int pos = strpos; char ch = ReadCh(); if (ch == _STR) { int n = _NUM; ch = ReadCh(); if ((ch >= _STR && ch <= _STR) || ch == _STR || ch == _STR) { if (ch >= _STR && ch <= _STR) { while (ch >= _STR && ch <= _STR) { n = (n * _NUM) + ch - _STR; ch = ReadCh(); } } else { ch = ReadCh(); char lch = char.ToLower(ch); while ((lch >= _STR && lch <= _STR) || (lch >= _STR && lch <= _STR)) { if (lch >= _STR && lch <= _STR) { n = (n * _NUM) + lch - _STR; } else { n = (n * _NUM) + lch - _STR + _NUM; } ch = ReadCh(); lch = char.ToLower
private static string CreateJsMethodInvocationExpression(string methodName, bool isStatic, params string[] paramNames) { StringBuilder sb = new StringBuilder(); sb.Append(isStatic ? WND : THIS); sb.Append(_STR); sb.Append(methodName); sb.Append(_STR); for (int i = _NUM; i < paramNames.Length; i++) { if (i != _NUM) { sb.Append(_STR); } sb.Append(paramNames[i]); } sb.Append(_STR); return sb.ToString(); }
public void DoDoubleClickAction() { DoDoubleClickAction(null); }
public static Node SerializableInstance() { return new GraphNode(_STR); }
protected void DropTables(List<string> dropTableNames, SQLiteDatabase db) { if (dropTableNames != null && dropTableNames.Count > 0) { string[] dropTableSQLs = new string[dropTableNames.Count]; for (int i = _NUM; i < dropTableSQLs.Length; i++) { dropTableSQLs[i] = GenerateDropTableSQL(dropTableNames[i]); } Execute(dropTableSQLs, db); } }
private Segment CreateDiskSegment(SegmentDescriptor descriptor) { File segmentFile = SegmentFile.CreateSegmentFile(name, storage.Directory(), descriptor.Id(), descriptor.Version()); Buffer buffer = FileBuffer.Allocate(segmentFile, Math.Min(DEFAULT_BUFFER_SIZE, descriptor.MaxSegmentSize()), int.MaxValue); descriptor.CopyTo(buffer); Segment segment = new Segment(new SegmentFile(segmentFile), buffer.Slice(), descriptor, CreateIndex(descriptor), new OffsetPredicate(), serializer.Clone(), this); LOGGER.Debug(_STR, segment); return segment; }
public bool Exists(string email) { foreach (var person in people) { if (email.Equals(person.GetEmail())) { return true; } } return false; }
public synchronized bool RemoveAll(ICollection<object> collection) { object[] elements = GetArray(); int len = elements.Length; if (len != _NUM) { int newlen = _NUM; object[] temp = new object[len]; for (int i = _NUM; i < len; ++i) { object element = elements[i]; if (!collection.Contains(element)) { temp[newlen++] = element; } } if (newlen != len) { SetArray(CopyOfRange(temp, _NUM, newlen)); return _BOOL; } } return _BOOL; }
public long ConvertPolarStereographicToGeodetic(double Easting, double Northing) { double dy = _NUM, dx = _NUM; double rho = _NUM; double t; double PHI, sin_PHI; double tempPHI = _NUM; double essin; double pow_es; double delta_radius; long Error_Code = POLAR_NO_ERROR; double min_easting = Polar_False_Easting - Polar_Delta_Easting; double max_easting = Polar_False_Easting + Polar_Delta_Easting; double min_northing = Polar_False_Northing - Polar_Delta_Northing; double max_northing = Polar_False_Northing + Polar_Delta_Northing; if (Easting > max_easting || Easting < min_easting) { Error_Code |= POLAR_EASTING_ERROR; } if (Northing > max_northing || Northing < min_northing) { Error_Code |= POLAR_NORTHING_ERROR; } if (Error_Code == POLAR_NO_ERROR) { dy = Northing - Polar_Fa
public void AssertURIEquals(string assertID, string scheme, string path, string host, string file, string name, string query, string fragment, bool? isAbsolute, string actual) { AssertNotNull(assertID, actual); string uri = actual; int lastPound = actual.LastIndexOf("#"); string actualFragment = string.Empty; if (lastPound != -1) { uri = actual.Substring(0, lastPound); actualFragment = actual.Substring(lastPound + 1); } if (fragment != null) { AssertEquals(assertID, fragment, actualFragment); } int lastQuestion = uri.LastIndexOf("?"); string actualQuery = string.Empty; if (lastQuestion != -1) { uri = actual.Substring(0, lastQuestion); actualQuery = actual.Substring(lastQuestion + 1); } if (query != null) { AssertEquals(assertID, query, actualQuery); } int firstColon = uri.IndexOf(":"); int firstSlash = uri.IndexOf("/"); string actualPath = uri; string actualScheme = string.Empty; if (firstColon
private double MaxIgnoreNaN(double a, double b) { if (double.IsNaN(a)) { return b; } if (double.IsNaN(b)) { return a; } else { return Math.Max(a, b); } }
public void CrabDownDirBlockForModification(BlockId blk) { lockTbl.XLock(blk, txNum); writtenIndexBlks.Add(blk); }
private static void RemoveReferenceToConnection(HttpConnectionWithReference connection) { lock (REFERENCE_TO_CONNECTION_SOURCE) { REFERENCE_TO_CONNECTION_SOURCE.Remove(connection.Reference); } }
public bool MatchesWord() { return !IsEmpty() && char.IsLetterOrDigit(queue[pos]); }
public VacuumEnvironment() { Random r = new Random(); envState = new VacuumEnvironmentState( _NUM == r.Next(_NUM) ? LocationState.Clean : LocationState.Dirty, _NUM == r.Next(_NUM) ? LocationState.Clean : LocationState.Dirty ); }
public void Generate(BatchEnvironment env, ClassDefinition cdef, DirectoryInfo destDir) { RemoteClass remoteClass = RemoteClass.ForClass(env, cdef); if (remoteClass == null) return; RMIGenerator gen; try { gen = new RMIGenerator(env, cdef, destDir, remoteClass, version); } catch (ClassNotFoundException e) { env.Error(_NUM, _STR, e.Name); return; } gen.Generate(); }
public BaseViewHolder AddOnLongClickListener(int viewId) { itemChildLongClickViewIds.Add(viewId); return this; }
public void Remove(CreatureRespawnPoint point) { respawnPoints.Remove(point); }
public Photo(File d, File f) { ExtendedExifInterface exif = new ExtendedExifInterface(f.ToString()); string lonStr = exif.GetAttribute(ExifInterface.TAG_GPS_LONGITUDE); if (lonStr == null) { throw new IOException(_STR); } float lonf = ConvertToDegree(lonStr); string lonRef = exif.GetAttribute(ExifInterface.TAG_GPS_LONGITUDE_REF); if (lonRef != null && !lonRef.Equals(_STR)) { lonf = -lonf; } float latf = ConvertToDegree(exif.GetAttribute(ExifInterface.TAG_GPS_LATITUDE)); string latRef = exif.GetAttribute(ExifInterface.TAG_GPS_LATITUDE_REF); if (latRef != null && !latRef.Equals(_STR)) { latf = -latf; } lat = (int)(latf * _NUM); lon = (int)(lonf * _NUM); Log.Debug(_STR, _STR + lat + _STR + lon); ref = d.AbsolutePath + _STR + f.Name; string dir = exif.GetAttribute(ExtendedExifInterf
public static long BytesToLong(byte[] bytes) { const int _NUM = 8; // Assuming _NUM is defined as 8 based on the context of long type using (var buffer = new MemoryStream()) { buffer.Write(bytes, _NUM, _NUM); buffer.Position = 0; using (var reader = new BinaryReader(buffer)) { return reader.ReadInt64(); } } }
protected int UnicodeEscapeLexer() { int ret = _NUM; int c = in.Read(); StringBuilder code = new StringBuilder(); try { for (int i = _NUM; i < _NUM; i++) { c = in.Read(); if (IsEndOfFile(c) || IsEndOfLine(c)) { throw new FormatException(_STR); } code.Append((char)c); } ret = int.Parse(code.ToString(), NumberStyles.None); } catch (FormatException e) { throw new IOException(_STR + GetLineNumber() + _STR + code.ToString() + _STR + e.ToString()); } return ret; }
public override void MouseEnter(MouseEventArgs evt) { delegate.MouseMove(evt); }
public static string RemoveFormatting(string line) { int length = line.Length; StringBuilder buffer = new StringBuilder(); for (int i = _NUM; i < length; i++) { char ch = line[i]; if (ch != _STR && ch != _STR && ch != _STR && ch != _STR) { buffer.Append(ch); } } return buffer.ToString(); }
public void TestNegPosFirstShorter() { string numA = _STR; string numB = _STR; string res = _STR; BigInteger aNumber = BigInteger.Parse(numA); BigInteger bNumber = BigInteger.Parse(numB); BigInteger result = BigInteger.Xor(aNumber, bNumber); Assert.True(res.Equals(result.ToString())); }
public void Print() { object[] iterChargingTimes = chargingTimes.ToArray(); Array.Sort(iterChargingTimes); for (int i = _NUM; i < iterChargingTimes.Length; i++) { ChargeLog curItem = (ChargeLog)iterChargingTimes[i]; curItem.Print(); } }
public bool IsEmpty() { return rdns.IsEmpty(); }
private void WriteLocalCSV(MedtronicSensorRecord mostRecentData, Context context) { try { if (mostRecentData == null || mostRecentData.bGValue == null) log.Debug(_STR); else log.Debug(_STR + mostRecentData.bGValue); using (var stream = new FileStream(Path.Combine(context.GetFilesDir(), _STR), FileMode.Create)) using (var oos = new ObjectOutputStream(stream)) { oos.WriteObject(mostRecentData); oos.Flush(); } } catch (Exception e) { Log.Error(TAG, _STR, e); log.Error(_STR, e); } }
public ServiceConfig CreateOrganizationConfig(string orgName, Dictionary<string, object> attrs) { ValidateSSM(); ServiceSchemaImpl ss = ssm.GetSchema(SchemaType.ORGANIZATION); if (ss == null) { string[] args = { serviceName }; throw new SMSException(IUMSConstants.UMS_BUNDLE_NAME, _STR, args); } string orgdn = DNMapper.OrgNameToDN(orgName); CreateServiceConfig.CheckBaseNodesForOrg(token, orgdn, serviceName, version); string orgDN = scm.ConstructServiceConfigDN(SMSUtils.DEFAULT, CreateServiceConfig.ORG_CONFIG_NODE, orgdn); try { CachedSMSEntry cEntry = CachedSMSEntry.GetInstance(token, orgDN); if (cEntry.IsDirty()) { cEntry.Refresh(); } if (cEntry.IsNewEntry()) { CreateServiceConfig.CreateSubConfigEntry(token, orgDN, ss, null, null, attrs, orgName); if (ServiceManager.IsCoexistenceMode()) { string smsDN = DNMapper.OrgNameToDN(orgName); OrgConfigVi
public void DeleteAuthenticationDomain(string realm, string cotName) { string[] param = { realm, cotName }; LogEvent(_STR, param); try { CircleOfTrustManager manager = GetCircleOfTrustManager(); manager.DeleteCircleOfTrust(realm, cotName); LogEvent(_STR, param); } catch (COTException e) { string strError = GetErrorString(e); string[] paramsEx = { realm, cotName, strError }; LogEvent(_STR, paramsEx); throw new AMConsoleException(strError); } }
protected void AddSourceCodeRemark(TestSolution testSolution, Element element, string messageCode, EvidenceElement evidenceElement) { if (evidenceElement != null) { var evidenceElementList = new List<EvidenceElement> { evidenceElement }; processRemarkService.AddSourceCodeRemarkOnElement(testSolution, element, messageCode, evidenceElementList); } else { processRemarkService.AddSourceCodeRemarkOnElement(testSolution, element, messageCode); } }
void EventPreModify(ActionType type, long position, bool isSingle) { if (type != currentActionType || !isSingle || (DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond) - previousTime > MERGE_TIME || (type == ActionType.INSERT || type == ActionType.OVERWRITE) && ActionExclusiveEnd() != position || (type == ActionType.DELETE && ActionPosition() != position && ActionPosition() - _NUM != position)) { StartAction(type, isSingle); } else { isBackspace = ActionPosition() > position; } if (isSingle && type == ActionType.INSERT) { UpdateNewRange(position); previousTime = DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond; } }
private byte[] DecodePEM(Stream inStream, byte[] boundarySuffix) { int ch; for (int i = _NUM; i < PEM_BEGIN.Length; ++i) { if (PEM_BEGIN[i] != (ch = inStream.ReadByte())) { throw new IOException(_STR + (boundarySuffix == null ? _STR : System.Text.Encoding.UTF8.GetString(boundarySuffix)) + _STR); } } if (boundarySuffix == null) { while ((ch = inStream.ReadByte()) != _STR) { if (ch == -1) { throw new IOException(_STR); } } } else { for (int i = _NUM; i < boundarySuffix.Length; i++) { if (boundarySuffix[i] != inStream.ReadByte()) { throw new IOException(_STR + System.Text.Encoding.UTF8.GetString(boundarySuffix) + _STR); } } if ((ch = inStream.ReadByte()) == _STR) { ch = inStream.ReadByte(); } if (ch != _STR) { throw new IOException(_STR + _STR);
public async Task SaveAsync(DocumentEntity entity, Action<DocumentEntity> callback) { try { // Set data to entity handler // (Implementation code goes here) // Invoke the callback with the entity callback(entity); } catch (ExecuteAsyncQueryException ex) { // Handle ExecuteAsyncQueryException throw; } catch (NotSupportedException ex) { // Handle UnsupportedOperationException throw; } }
public bool MarkSupported() { return fInputStream.MarkSupported(); }
private static int EncodeText(CharSequence msg, int startpos, int count, StringBuilder sb, int initialSubmode) { StringBuilder tmp = new StringBuilder(count); int submode = initialSubmode; int idx = _NUM; while (true) { char ch = msg.charAt(startpos + idx); switch (submode) { case SUBMODE_ALPHA: if (IsAlphaUpper(ch)) { if (ch == _STR) { tmp.Append((char)_NUM); } else { tmp.Append((char)(ch - _NUM)); } } else { if (IsAlphaLower(ch)) { submode = SUBMODE_LOWER; tmp.Append((char)_NUM); continue; } else if (IsMixed(ch)) { submode = SUBMODE_MIXED; tmp.Append((char)_NUM); continue; } else { tmp.Append((char)_NUM); tmp.Append((char)PUNCTUATION[ch]); break; } } break; case SUBMODE_LOWER: if
public string ResolveParentRelationName(string parentName, object parent, string childName, object child) { return parentName; }
public ByteColumn(int nrows, int capacity, byte defaultValue) { if (capacity < nrows) { throw new ArgumentException("Capacity must be greater than or equal to number of rows."); } m_values = new byte[capacity]; Array.Fill(m_values, defaultValue); m_size = nrows; }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public RelNode ConvertSelect(SqlSelect select, bool top) { var selectScope = validator.GetWhereScope(select); var bb = CreateBlackboard(selectScope, null, top); ConvertSelectImpl(bb, select); return bb.Root; }
public static object ExecuteScript(string filePath, string functionName, Dictionary<string, object> context) { return ExecuteScript(filePath, functionName, context, new object[] { context }); }
public XercesHTML2DocumentBuilderFactory(DocumentBuilderSetting[] settings) { try { var classLoader = System.Reflection.Assembly.GetExecutingAssembly().GetType().Assembly.GetType().Assembly.GetLoader(); var htmlBuilderClass = classLoader.LoadClass(_STR); var htmlBuilderConstructor = htmlBuilderClass.GetConstructor(Type.EmptyTypes); getHTMLDocumentMethod = htmlBuilderClass.GetMethod(_STR, Type.EmptyTypes); var htmlDOMImpl = classLoader.LoadClass(_STR); var method = htmlDOMImpl.GetMethod(_STR, Type.EmptyTypes); domImpl = (DOMImplementation)method.Invoke(null, null); var saxFactoryClass = classLoader.LoadClass(_STR); factory = (SAXParserFactory)saxFactoryClass.CreateInstance(); } catch (TargetInvocationException ex) { throw new DOMTestIncompatibleException(ex.InnerException, null); } catch (Exception ex) { throw new DOMTestIncompatibleException(ex, null); } if (settings != null) { for (int i = _NUM; i < settings.Length; i++) { // Additional processing for settings can be added here if needed
private static string FormatSampleRate(int rate) { return MHZ_FORMATTER.Format((double)rate / _NUM); }
public bool IsClosed() { return closed.Get(); }
void Start() { this.running = _BOOL; Thread thread = new Thread(new ThreadStart(this.Run)) { IsBackground = _BOOL }; thread.Name = _STR + this.GetHashCode(); thread.Start(); }
public TypeSimplifier(Types typeUtils, string packageName, HashSet<TypeMirror> types, TypeMirror baseType) { this.typeUtils = typeUtils; var typesPlusBase = new HashSet<TypeMirror>(types); if (baseType != null) { typesPlusBase.Add(baseType); } var referenced = ReferencedClassTypes(typeUtils, typesPlusBase); var defined = NonPrivateDeclaredTypes(typeUtils, baseType); this.imports = FindImports(typeUtils, packageName, referenced, defined); }
public static byte[] Escape(byte[] bytes) { byte[] temp = new byte[_NUM * bytes.Length]; int currentPosition = _NUM; foreach (byte b in bytes) { if (b == ESCAPE_CHAR) { temp[currentPosition++] = ESCAPE_CHAR; temp[currentPosition++] = REPLACEMENT_CHAR; } else if (b == DELIMITER) { temp[currentPosition++] = ESCAPE_CHAR; temp[currentPosition++] = ESCAPE_CHAR; } else { temp[currentPosition++] = b; } } byte[] escaped = new byte[currentPosition]; Array.Copy(temp, _NUM, escaped, _NUM, currentPosition); return escaped; }
public string Name() { // Returns a string representation of this native listener. // Implementation of native function should be here. }
protected void DrawChartValuesText(Canvas canvas, XYSeries series, XYSeriesRenderer renderer, Paint paint, List<float> points, int seriesIndex, int startIndex) { if (points.Count > _NUM) { float previousPointX = points[_NUM]; float previousPointY = points[_NUM]; for (int k = _NUM; k < points.Count; k += _NUM) { if (k == _NUM) { if (Math.Abs(points[_NUM] - points[_NUM]) > renderer.GetDisplayChartValuesDistance() || Math.Abs(points[_NUM + 1] - points[_NUM + 1]) > renderer.GetDisplayChartValuesDistance()) { DrawText(canvas, GetLabel(renderer.GetChartValuesFormat(), series.GetY(startIndex)), points[_NUM], points[_NUM + 1] - renderer.GetChartValuesSpacing(), paint, _NUM); DrawText(canvas, GetLabel(renderer.GetChartValuesFormat(), series.GetY(startIndex + _NUM)), points[_NUM], points[_NUM + 1] - renderer.GetChartValuesSpacing(), paint, _NUM); previousPointX = points[_NUM]; previousPointY = points[_NU
public static string ToString(Document hostDoc) { try { StringWriter outWriter = new StringWriter(); DOMSource domSource = new DOMSource(hostDoc); StreamResult streamResult = new StreamResult(outWriter); TransformerFactory transformerFactory = TransformerFactory.NewInstance(); Transformer serializer = transformerFactory.NewTransformer(); serializer.SetOutputProperty(OutputKeys.Encoding, ENC.Name()); serializer.SetOutputProperty(OutputKeys.Method, _STR); serializer.SetOutputProperty(OutputKeys.Indent, _STR); serializer.SetOutputProperty(OutputKeys.DoctypePublic, HtmlDomUtil.HTML_STRICT); serializer.Transform(domSource, streamResult); return outWriter.ToString(); } catch (TransformerException e) { IOException ioException = new IOException(_STR); ioException.InitCause(e); throw ioException; } }
public MongoClient ClientForMembers(params ServerAddress[] seeds) { List<ServerAddress> addresses = new List<ServerAddress>(); foreach (ServerAddress seedAddress in seeds) { if (seedAddress != null) { addresses.Add(seedAddress); } } return ClientForMembers(addresses); }
public static bool StringToBooleanValue(string str) { str = str.Trim().ToLower(); if (str == _STR || str == _STR) return _BOOL; else if (str == _STR || str == _STR) return _BOOL; throw new CasterException(_STR + str + _STR); }
public bool HasMoreWork() { return workList.Count > 0; }
protected synchronized void EngineSetSeed(byte[] seed) { if (seed == null) { throw new ArgumentNullException(nameof(seed)); } if (state == NEXT_BYTES) { Array.Copy(copies, HASHCOPY_OFFSET, this.seed, HASH_OFFSET, EXTRAFRAME_OFFSET); } state = SET_SEED; if (seed.Length != _NUM) { UpdateSeed(seed); } }
public void GenerateClassFile(Stream os) { var cw = new SootASMClassWriter(ClassWriter.ComputeFrames); cv = cw; GenerateByteCode(); try { os.Write(cw.ToByteArray(), 0, cw.ToByteArray().Length); } catch (IOException e) { throw new InvalidOperationException(_STR, e); } }
private static bool UseCompactFontFormat(Dictionary<string, object> args, int compatibilityVersion) { string value = args.ContainsKey("EMBEDASCFF") ? args["EMBEDASCFF"] as string : null; bool useCFF = false; if (compatibilityVersion < MxmlConfiguration.VERSION_4_0) { useCFF = false; } if (value != null) { useCFF = bool.Parse(value.Trim()); } return useCFF; }
public static void Main(string[] args) { new GeneratorTester(args); }
private string RemoveBinding(string feature) { if (joshuaConfiguration.moses) { if (feature.StartsWith(_STR) || feature.StartsWith(_STR)) return feature.Replace(_STR, _STR); } return feature; }
public static int CalcTextHeight(Paint paint, string demoText) { var r = new Rectangle(); paint.GetTextBounds(demoText, 0, demoText.Length, r); return r.Height; }
private void CheckShutdown() { lock (mux) { if (isBeingShutdown) throw new RejectedExecutionException(_STR); } }
public void Clear() { oredCriteria.Clear(); orderByClause = null; distinct = _BOOL; }
private static void CheckQueueForDependenciesAndExecuteUnblockedTasks() { List<ProgressThread> toRemove = new List<ProgressThread>(); lock (LOCK) { foreach (ProgressThread pg in queuedThreads) { if (!pg.IsBlockedByDependencies()) { if (!pg.IsWaiting()) { toRemove.Add(pg); EXECUTOR.Execute(pg.MakeWrapper()); } } } } foreach (ProgressThread pg in toRemove) { lock (LOCK) { queuedThreads.Remove(pg); } } }
private static short CallShortMethodV(JNIEnvironment env, int objJREF, int methodID, Address argAddress) { if (traceJNI) { VM.sysWrite(_STR); } RuntimeEntrypoints.CheckJNICountDownToGC(); try { object obj = env.GetJNIRef(objJREF); object returnObj = JNIHelpers.InvokeWithVarArg(obj, methodID, argAddress, TypeReference.Short, _BOOL); return Reflection.UnwrapShort(returnObj); } catch (Exception unexpected) { if (traceJNI) { unexpected.PrintStackTrace(System.err); } env.RecordException(unexpected); return _NUM; } }
public static void DrawVerticalMarginIndicator(Graphics g, string text, int x, int y1, int y2) { if (y1 > y2) { int temp = y1; y1 = y2; y2 = temp; } if (text == null) { g.DrawLine(Pens.Black, x, y1, x, y2); g.DrawLine(Pens.Black, x, y1, x - CONNECTION_ARROW_SIZE, y1 + CONNECTION_ARROW_SIZE); g.DrawLine(Pens.Black, x, y1, x + CONNECTION_ARROW_SIZE, y1 + CONNECTION_ARROW_SIZE); g.DrawLine(Pens.Black, x, y2, x - CONNECTION_ARROW_SIZE, y2 - CONNECTION_ARROW_SIZE); g.DrawLine(Pens.Black, x, y2, x + CONNECTION_ARROW_SIZE, y2 - CONNECTION_ARROW_SIZE); return; } using (var c = new Canvas()) { var fm = c.GetFontMetrics(sFont); g.DrawString(text, sFont, Brushes.Black, x - fm.StringWidth(text) / NUM, y2 - ((y2 - y1) - (fm.Hei
public void FireIndexedPropertyChange(string propertyName, int index, bool oldValue, bool newValue) { if (oldValue != newValue) { FireIndexedPropertyChange(propertyName, index, oldValue, newValue); } }
protected void RemoveMarkers() { for (int i = markerImage.Count; i > _NUM; i--) { LocoIcon il = markerImage[i - _NUM]; if (il != null && il.IsActive()) { markerImage.RemoveAt(i - _NUM); il.Remove(); il.Dispose(); SetDirty(_BOOL); } } base.RemoveMarkers(); Repaint(); }
public IElementType CaptureString() { CharSequence buffer = GetBuffer(); int currentPosition = GetTokenEnd(); SetTokenStart(currentPosition); int bufferEnd = GetBufferEnd(); char openQuote = buffer.CharAt(currentPosition); char closeQuote = RegexBlock.GetQuoteCloseChar(openQuote); bool quotesDiffer = openQuote != closeQuote; bool isEscaped = false; // Assuming _BOOL is false initially int quotesDepth = 0; // Assuming _NUM is 0 initially currentPosition++; while (currentPosition < bufferEnd) { char currentChar = buffer.CharAt(currentPosition); if (!isEscaped && quotesDepth == 0 && currentChar == closeQuote) { break; } if (!isEscaped && quotesDiffer) { if (currentChar == openQuote) { quotesDepth++; } else if (currentChar == closeQuote) { quotesDepth--; } } isEscaped = !isEscaped && currentChar == '\\'; // Assuming _STR is '\\' currentPosition++; } if (currentPosition < bufferEnd) { curr
public static string ToLocalizedInteger(long value) { return value.ToString("X"); }
public void TestParseClientHandshake() { for (int splitPos = _NUM; splitPos < _NUM; splitPos++) { log.Info(_STR + splitPos); ByteBuffer tmp = ClientHandshakePacket(); ByteBuffer[] split = Split(tmp, splitPos); GridNioSession ses = new MockNioSession(); ses.AddMeta(MARSHALLER.Ordinal(), new GridClientOptimizedMarshaller()); GridTcpRestParser parser = new GridTcpRestParser(_BOOL); List<GridClientMessage> lst = new List<GridClientMessage>(_NUM); foreach (ByteBuffer buf in split) { GridClientMessage r; while (buf.HasRemaining && (r = parser.Decode(ses, buf)) != null) { lst.Add(r); } Assert.True(buf.Remaining == _NUM, _STR); } Assert.Equal(_NUM, lst.Count); GridClientHandshakeRequest req = (GridClientHandshakeRequest)lst.First(); Assert.NotNull(req); Assert.Equal(U.BytesToShort(new byte[] { _NUM, _NUM }, _NUM), req.Version()); } }
public void Initialize(Context context, HapticFeedbackController hapticFeedbackController, int initialHoursOfDay, int initialMinutes, bool is24HourMode) { if (mTimeInitialized) { Log.Error(TAG, _STR); return; } mHapticFeedbackController = hapticFeedbackController; mIs24HourMode = is24HourMode; mHideAmPm = mAccessibilityManager.IsTouchExplorationEnabled() ? _BOOL : mIs24HourMode; mCircleView.Initialize(context, mHideAmPm); mCircleView.Invalidate(); if (!mHideAmPm) { mAmPmCirclesView.Initialize(context, initialHoursOfDay < _NUM ? AM : PM); mAmPmCirclesView.Invalidate(); } Resources res = context.Resources; int[] hours = { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; int[] hours_24 = { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM
public void RunTest() { Document doc; NodeList elementList; Node nameNode; CharacterData child; string childData; doc = (Document)Load(_STR, _BOOL); elementList = doc.GetElementsByTagName(_STR); nameNode = elementList.Item(_NUM); child = (CharacterData)nameNode.FirstChild; child.DeleteData(_NUM, _NUM); childData = child.Data; Assert.AreEqual(_STR, _STR, childData); }
void CheckFrameValue(object value) { if (value == Opcodes.TOP || value == Opcodes.INTEGER || value == Opcodes.FLOAT || value == Opcodes.LONG || value == Opcodes.DOUBLE || value == Opcodes.NULL || value == Opcodes.UNINITIALIZED_THIS) { return; } if (value is string) { CheckInternalName((string)value, _STR); return; } if (!(value is Label)) { throw new ArgumentException(_STR + value); } else { usedLabels.Add((Label)value); } }
protected void SqrtLayout(VisualTable labels) { Rectangle2D b = GetLayoutBounds(); double breadth = GetBreadth(b); double span = m_hi - m_lo; double splo = MathLib.SafeSqrt(m_prevlo); double spspan = MathLib.SafeSqrt(m_prevhi) - splo; double vlo = Math.Pow(_NUM, Math.Floor(MathLib.SafeLog10(m_lo))); double slo = MathLib.SafeSqrt(m_lo); double sspan = MathLib.SafeSqrt(m_hi) - slo; var iter = labels.Tuples(); while (iter.MoveNext()) { VisualItem item = (VisualItem)iter.Current; Reset(item); double v = item.GetDouble(VALUE); double x = span == _NUM ? _NUM : ((MathLib.SafeSqrt(v) - slo) / sspan) * breadth; Set(item, x, b); } Index index = labels.Index(VALUE); double step = GetLinearStep(span, breadth / span); if (step == _NUM) step = _NUM; for (double x,
public static Template Create(string value) { if (Settings.IsFunction(value)) { return new FunctionalTemplate(value); } if (Graph.IsRelational(value)) { try { return new RelationalTemplate(value); } catch (Exception e) { log.Warning(_STR + value + _STR); return new StringTemplate(value); } } else if (RegexTemplate.IsPossibleRegex(value)) { try { if (ArithmeticTemplate.IsArithmeticExpression(value)) { return new ArithmeticTemplate(value); } return new RegexTemplate(value); } catch (PatternSyntaxException e) { log.Warning(_STR + value + _STR); return new StringTemplate(value); } } else { return new StringTemplate(value); } }
protected bool CustomShouldTakeFocus() { if (customArea is Label) { return _BOOL; } if (customArea is CLabel) { return (customArea.GetStyle() & SWT.NO_FOCUS) > _NUM; } return _BOOL; }
public void Init(PrivateKey key) { try { if (signature != null) { signature.InitSign(key); } else if (cipher != null) { cipher.Init(Cipher.ENCRYPT_MODE, key); } } catch (InvalidKeyException e) { throw new AlertException(AlertProtocol.BAD_CERTIFICATE, new SSLException(_STR, e)); } }
private Dictionary<string, List<Zone>> SelectZonesForInitiatorsAndPorts(NetworkLite network, Dictionary<string, List<Zone>> wwnToZones, Dictionary<string, StoragePort> initiatorPortsMap) { var filteredMap = new Dictionary<string, List<Zone>>(); Zone zone = null; List<Zone> zones = null; foreach (var initiatorWwn in wwnToZones.Keys) { foreach (var portWwn in initiatorPortsMap.Keys) { zone = _networkScheduler.SelectExistingZoneForInitiatorPort(network, initiatorWwn, portWwn, wwnToZones[initiatorWwn]); if (zone != null) { if (!filteredMap.TryGetValue(initiatorWwn, out zones)) { zones = new List<Zone>(); filteredMap[initiatorWwn] = zones; } zones.Add(zone); } } } return filteredMap; }
public static bool IsExtension(string filename, ICollection<string> extensions) { if (filename == null) return false; if (extensions == null || extensions.Count == 0) return IndexOfExtension(filename) == -1; string fileExt = GetExtension(filename); foreach (string extension in extensions) { if (fileExt.Equals(extension)) return true; } return false; }
private void WriteJarPostResource(XmlElement postResourceEl, string path) { postResourceEl.SetAttribute(_STR, JAR_RESOURCE_SET); postResourceEl.SetAttribute(_STR, path.Replace(_STR, _STR)); }
public void CloseFile() { file.Close(); file = null; }
public TypedEventListener(EventListener<E> wrappedListener, Type eventClass) { this.eventClass = eventClass; this.wrappedListener = wrappedListener; }
public static List<Node> ChildNodeList(Node node) { if (node == null) return null; List<Node> nodes = new List<Node>(); do { if (node.NodeType == NodeType.Element || node.NodeType == NodeType.Comment) { nodes.Add(node); } } while ((node = node.NextSibling) != null); return nodes; }
public static Corleone Context(string jobContext) { if (jobContext == null || jobContext.Equals(_STR)) { throw new ArgumentException(_STR); } contexts.Clear(); contexts.Add(jobContext); return GetInstance(); }
protected void Init() { char[] codes = chars.ToCharArray(); indices = new int[codes.Length]; advances = new int[codes.Length]; double maxAscent = _NUM; double maxDescent = _NUM; double scale = size * SWFConstants.TWIPS / _NUM; for (int i = _NUM; i < codes.Length; i++) { int code = (int)codes[i]; int[] index = new int[_NUM]; FontDefinition.Glyph glyph = GetGlyph(code, index); indices[i] = index[_NUM]; if (glyph != null) { Shape shape = glyph.GetShape(); double[] outline = shape.GetBoundingRectangle(); double x1 = outline[_NUM] * scale; double y1 = outline[_NUM] * scale; double x2 = outline[_NUM] * scale; double y2 = outline[_NUM] * scale; if (maxAscent < -y1) { maxAscent = -y1; } if (maxDescent < y2) { maxDescent = y2; }
public static double Info(int[] counts) { int total = _NUM; double x = _NUM; foreach (int count in counts) { x -= XLogX(count); total += count; } return x + XLogX(total); } private static double XLogX(int value) { if (value == 0) return 0; // To handle log(0) case return value * Math.Log(value); }
public void AddMethod(SootMethod m) { CheckLevel(SIGNATURES); if (m.IsDeclared()) { throw new InvalidOperationException(_STR + m.GetName()); } if (subSigToMethods.ContainsKey(m.GetNumberedSubSignature())) { throw new InvalidOperationException(_STR + m.GetSubSignature() + _STR + this + _STR); } subSigToMethods[m.GetNumberedSubSignature()] = m; methodList.Add(m); m.SetDeclared(_BOOL); m.SetDeclaringClass(this); }
public void AddSwipeListener(SwipeListener listener) { if (mListeners == null) { mListeners = new List<SwipeListener>(); } mListeners.Add(listener); }
public void Clear() { var lockObject = this.lockObject; lock (lockObject) { for (Node<E> f = first; f != null;) { f.item = default(E); Node<E> n = f.next; f.prev = null; f.next = null; f = n; } first = last = null; count = _NUM; notFull.SignalAll(); } }
private void AddReplicationFactor(Operation op) { op.AddRequestHeader(Operation.REPLICATION_QUORUM_HEADER, Operation.REPLICATION_QUORUM_HEADER_VALUE_ALL); }
private static Frame ShowInitialSplash() { Frame splashFrame = null; Image image = null; Uri imageUri = GetChosenSplashUrl(); if (imageUri != null) { try { image = Image.FromFile(imageUri.LocalPath); } catch (IOException e) { Console.WriteLine(e); } if (image != null) { splashFrame = AWTSplashWindow.Splash(image); } } return splashFrame; }
protected void DecodeLineSuffix(PushbackStream inStream, Stream outStream) { int c; while (_BOOL) { c = inStream.ReadByte(); if (c == -_NUM) { throw new EndOfStreamException(); } if (c == _STR) { break; } if (c == _STR) { c = inStream.ReadByte(); if (c != _STR && c != -_NUM) { inStream.Unread(c); } break; } } }
public void AddTransaction(SIPServerTransaction serverTransaction) { if (IsLoggingEnabled()) { stackLogger.LogDebug(_STR + serverTransaction); } serverTransaction.Map(); AddTransactionHash(serverTransaction); }
private float Spacing(MotionEvent event) { float x = event.GetX(_NUM) - event.GetX(_NUM); float y = event.GetY(_NUM) - event.GetY(_NUM); return (float)Math.Sqrt(x * x + y * y); }
public bool ContainsPoly(SootMethod method) { return GetMethod(method) != null; }
public JKTagMapping(string sourceQName, string targetQName, JKNamespace namespace) { logger.Info(string.Format(_STR, sourceQName, targetQName)); this.sourceQName = sourceQName; this.targetQName = targetQName; this.namespace = namespace; this.auto = _BOOL; }
private void SelectAttributeSetInstance() { int m_warehouse_id = GetM_Warehouse_ID(); int m_product_id = GetM_Product_ID(); if (m_product_id <= _NUM) return; MProduct product = MProduct.Get(GetCtx(), m_product_id); MWarehouse wh = MWarehouse.Get(GetCtx(), m_warehouse_id); string title = product.GetTranslation(MProduct.COLUMNNAME_Name) + _STR + wh.GetTranslation(MWarehouse.COLUMNNAME_Name); PAttributeInstance pai = new PAttributeInstance(m_frame, title, m_warehouse_id, _NUM, m_product_id, _NUM); if (pai.GetM_AttributeSetInstance_ID() != -_NUM) { fAttrSetInstance_ID.SetText(pai.GetM_AttributeSetInstanceName()); fAttrSetInstance_ID.SetValue(pai.GetM_AttributeSetInstance_ID()); } else { fAttrSetInstance_ID.SetValue(_NUM); } }
private void EnsureFileOpen() { if (savingDisabled) { Log.Error(TAG, _STR); return; } if (saveFileStream != null) return; var saveFile = new File(ctx.GetFilesDir(), SAVEFILE); try { FileOutputStream fileOutput = null; DataOutputStream out = null; if (saveFile.Exists()) { fileOutput = ctx.OpenFileOutput(SAVEFILE, FileCreationMode.Append); out = new DataOutputStream(new BufferedOutputStream(fileOutput)); } else { fileOutput = ctx.OpenFileOutput(SAVEFILE, FileCreationMode.Private); out = new DataOutputStream(new BufferedOutputStream(fileOutput)); out.WriteInt(TrackPoint.FORMAT_VERSION); savedTrackPoints = _NUM; } saveFileStream = out; } catch (Exception e) { MarkSavingBroken(_STR, e); } }
public void TestCanonicalizingCache() { var properties = GetProperties(); properties.SetProperty(AbstractTransactionService.Options.MIN_RELEASE_AGE, _STR); var journal = new Journal(properties); try { long commitTime0 = journal.Commit(); Debug.Assert(commitTime0 != _NUM); ICommitRecord commitRecord0 = journal.GetCommitRecord(commitTime0); Debug.Assert(commitRecord0.Equals(journal.GetCommitRecord())); journal.Write(ByteBuffer.Wrap(new byte[] { _NUM, _NUM, _NUM })); long commitTime1 = journal.Commit(); Debug.Assert(commitTime1 != _NUM); ICommitRecord commitRecord1 = journal.GetCommitRecord(commitTime1); Debug.Assert(commitRecord1.Equals(journal.GetCommitRecord())); Debug.Assert(commitRecord0 == journal.GetCommitRecord(commitTime1 - _NUM)); Debug.Assert(commitRecord1 == journal.GetCommitRecord(commitTime1 + _NUM)); Debug.Assert(commitRecord1 == journal.GetCommitRecord(commitTime1 + _NUM)); } finally { journal.Destroy(); } }
public static void Print(object x) { Console.WriteLine(x); Console.Out.Flush(); }
public override void Stop(Action arg0) { Stop(); arg0(); }
protected int Read(Stream inputStream, byte[] buffer, char divider) { int index = 0; int readByte; do { readByte = inputStream.ReadByte(); if (readByte == -1 || readByte == (byte)divider) { return index; } buffer[index] = (byte)readByte; index++; } while (index < buffer.Length); return index; }
private static void GenerateGraphFile(TransMeta transMeta, string graphFile) { DataOutputStream dos = null; try { string xml = transMeta.GetXML(); dos = new DataOutputStream(new FileStream(graphFile, FileMode.Create)); dos.Write(Encoding.GetEncoding(CarbonCommonConstants.DEFAULT_CHARSET).GetBytes(xml), 0, xml.Length); } catch (KettleException kettleException) { throw new GraphGeneratorException(_STR, kettleException); } catch (FileNotFoundException e) { throw new GraphGeneratorException(_STR, e); } catch (UnsupportedEncodingException ue) { throw new GraphGeneratorException(_STR, ue); } catch (IOException ioe) { throw new GraphGeneratorException(_STR, ioe); } finally { if (dos != null) { try { dos.Close(); } catch (IOException e) { var message = e.Message; } } } }
public static void CloseOutputStream(Stream stream, string tag) { if (stream != null) { try { stream.Close(); } catch (IOException e) { Console.WriteLine($"{tag}: {_STR} {e}"); } } }
private void TestMultiStatement() { var s = MVStore.Open(null); var ts = new TransactionStore(s); ts.Init(); Transaction tx; TransactionMap<string, string> m; long startUpdate; tx = ts.Begin(); startUpdate = tx.SetSavepoint(); m = tx.OpenMap(_STR); m.SetSavepoint(startUpdate); startUpdate = tx.SetSavepoint(); m.SetSavepoint(startUpdate); Assert.IsTrue(m.TrySet(_STR, _STR, _BOOL)); Assert.IsTrue(m.TrySet(_STR, _STR, _BOOL)); Assert.IsNull(m.Get(_STR)); Assert.IsNull(m.Get(_STR)); startUpdate = tx.SetSavepoint(); m.SetSavepoint(startUpdate); Assert.AreEqual(_STR, m.Get(_STR)); Assert.AreEqual(_STR, m.Get(_STR)); Assert.AreEqual(_STR, m.Get(_STR)); Assert.IsTrue(m.TrySet(_STR, null, _BOOL)); Assert.IsTrue(m.TrySet(_STR, _STR, _BOOL)); Assert.AreEqual(_STR, m.Get(_STR)); Assert.IsTrue(m.TrySe
public void AddPropertyChangeListener(string propertyName, PropertyChangeListener inPcl) { beanContextChildSupport.AddPropertyChangeListener(propertyName, inPcl); }
public void CreateEntityConfig(string realm, FederationConfigElement config) { string federationId = config.GetFederationID(); if (federationId == null) { debug.Error(_STR + _STR); string[] data = { realm }; LogUtil.Error(LogLevel.INFO, LogUtil.NO_ENTITY_ID_CREATE_ENTITY_CONFIG, data, null); throw new WSFederationMetaException(_STR, null); } if (realm == null) { realm = _STR; } string[] objs = { federationId, realm }; try { var attrs = WSFederationMetaUtils.ConvertJAXBToAttrMap(ATTR_ENTITY_CONFIG, config); var oldAttrs = configInst.GetConfiguration(realm, federationId); if (oldAttrs == null) { LogUtil.Error(LogLevel.INFO, LogUtil.NO_ENTITY_DESCRIPTOR_CREATE_ENTITY_CONFIG, objs, null); throw new WSFederationMetaException(_STR, objs); } var oldValues = oldAttrs[ATTR_ENTITY_CONFIG] as HashSet<object>; if (oldValues != null && oldValues.Count > 0) { LogUtil.Error(LogLevel.INFO,
public bool IsExpired() { return this.ttl < DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); }
private void LoadUserInfoIntoActionBar() { if (!string.IsNullOrEmpty(mWithUserImage)) { Utils.LoadCircularImage(GetActivity(), mWithImageView, mWithUserImage, AvatarBitmapTransformation.AvatarSize.NORMAL); } }
public static Direction DirectionForArrowKey(KeyEvent e) { int index = Math.Max(_NUM, Math.Min(e.KeyCode, KeyEvent.VK_DOWN) - KeyEvent.VK_LEFT); return Direction.Values()[index]; }
public TraceGraph(Collection<Span> spans) { this.spansByParent = new SpansByParent(spans); this.spansByTracerId = new SpansByTracerId(spans); }
public bool IsPersistent() { return m_persist; }
using System; public static DateTime? ToDate(string monthStr, string dayStr, string yearStr, string hourStr, string minuteStr, string secondStr) { int month, day, year, hour, minute, second; try { month = int.Parse(monthStr); day = int.Parse(dayStr); year = int.Parse(yearStr); hour = int.Parse(hourStr); minute = int.Parse(minuteStr); second = int.Parse(secondStr); } catch { return null; } return new DateTime(year, month, day, hour, minute, second); }
protected void HandleMesosFailure(string taskId) { int attempt = TaskUtils.GetAttemptForTaskId(taskId); BaseContainer container = containersInfo[TaskUtils.GetContainerIndexForTaskId(taskId)]; bool hasAttemptsLeft = attempt < container.Retries; if (hasAttemptsLeft) { LOG.Warning(string.Format(_STR, container.Name, attempt + _NUM)); string newTaskId = TaskUtils.GetTaskId(container.Name, attempt + _NUM); ScheduleNewTask(newTaskId); } else { LOG.Severe(_STR + attempt); } }
private void UpdateLtp(SingleChannelElement sce) { IndividualChannelStream ics = sce.ics; float[] saved = sce.saved; float[] savedLtp = sce.coeffs; readonly float[] lwindow = ics.useKbWindow[_NUM] ? ff_aac_kbd_long_1024 : ff_sine_1024; readonly float[] swindow = ics.useKbWindow[_NUM] ? ff_aac_kbd_short_128 : ff_sine_128; if (ics.windowSequence[_NUM] == EIGHT_SHORT_SEQUENCE) { Array.Copy(saved, _NUM, savedLtp, _NUM, _NUM); Array.Fill(savedLtp, _NUM, _NUM + _NUM, _NUM); FloatDSP.VectorFmulReverse(savedLtp, _NUM, ac.bufMdct, _NUM, swindow, _NUM, _NUM); for (int i = _NUM; i < _NUM; i++) { savedLtp[i + _NUM] = ac.bufMdct[_NUM - i] * swindow[_NUM - i]; } } else if (ics.windowSequence[_NUM]
public static FileInfo FindConfigInWorkingDirectory() { foreach (var suffix in SUFFIXES) { var configFile = new FileInfo(Path.Combine(Environment.CurrentDirectory, PREFIX + suffix)); if (configFile.Exists) { return configFile; } } return null; }
public override void DrawRangeMarker(Graphics2D g2, XYPlot plot, ValueAxis rangeAxis, Marker marker, Rectangle2D dataArea) { if (marker is ValueMarker vm) { double value = vm.GetValue(); Range range = rangeAxis.GetRange(); if (!range.Contains(value)) { return; } double v = rangeAxis.ValueToJava2D(value, dataArea, plot.GetRangeAxisEdge()); PlotOrientation orientation = plot.GetOrientation(); Line2D line = null; if (orientation == PlotOrientation.HORIZONTAL) { line = new Line2D.Double(v, dataArea.GetMinY(), v, dataArea.GetMaxY()); } else if (orientation == PlotOrientation.VERTICAL) { line = new Line2D.Double(dataArea.GetMinX(), v, dataArea.GetMaxX(), v); } else { throw new InvalidOperationException(_STR); } Composite originalComposite = g2.GetComposite(); g2.SetComposite(AlphaComposite.GetInstance(AlphaComposite.SRC_OVER, marker.GetAlpha())); g2.SetPaint(marker.GetPaint());
protected bool AttemptToAddWord(Word word) { double additionalLength = word.GetWordWidth(); additionalLength += words.Count > 0 ? spaceSize : -1; // Assuming _NUM is -1 if (currentLineLength + additionalLength <= maxLength || maxLength == -1) // Assuming _NUM is -1 { words.Add(word); currentLineLength += additionalLength; return true; // Assuming _BOOL is true } else { return false; // Assuming _BOOL is false } }
public override bool OnPreferenceClick(Preference preference) { if (preference == mPlayExample) { GetSampleText(); return true; } return false; }
public void ReadWwwAuthenticateHeader(string header) { if (header != null) { mIsDigestAuthentication = header.StartsWith(HttpDigestMd5Authentication.HTTP_DIGEST_SCHEMA); if (!mIsDigestAuthentication) { return; } string value = GetValue(header, _STR); mDigest.SetRealm(value); value = GetValue(header, _STR); mDigest.SetOpaque(value); value = GetValue(header, _STR); mDigest.SetQop(value); value = GetValue(header, _STR); mDigest.SetNextnonce(value); } }
public static string ValueOf(bool? value) { return value.HasValue ? value.Value.ToString() : null; }
public void TestSendReceive() { messages.Clear(); for (int i = _NUM; i < data.Length; i++) { var message = session.CreateTextMessage(data[i]); message.SetStringProperty(_STR, data[i]); message.SetIntProperty(_STR, i); if (verbose) { if (LOG.IsDebugEnabled()) { LOG.Debug(_STR + message + _STR + data[i]); } } SendToProducer(producer, producerDestination, message); MessageSent(); } AssertMessagesAreReceived(); LOG.Info(_STR + data.Length + _STR); }
public void AddLive(bool live) { query.Append(_STR + live); }
public static string ToString(Uri uri, Encoding encoding) { return ToString(uri.ToString(), encoding); }
public bool Exists(string key) { return Exists(key, _BOOL); }
public AllocationSite(int line, int column) { lock (sites) { this.id = sites.Count; sites.Add(this); } this.line = line; this.column = column; }
public bool DrawImage(Image img, Graphics.Transform xform, IImageObserver obs) { return mGraphics.DrawImage(img, xform, obs); }
public static int ParseInt(char[] digitChars, int offset, int len) { int num = digitChars[offset] - _STR; len += offset; if (++offset < len) { num = (num * _NUM) + (digitChars[offset] - _STR); if (++offset < len) { num = (num * _NUM) + (digitChars[offset] - _STR); if (++offset < len) { num = (num * _NUM) + (digitChars[offset] - _STR); if (++offset < len) { num = (num * _NUM) + (digitChars[offset] - _STR); if (++offset < len) { num = (num * _NUM) + (digitChars[offset] - _STR); if (++offset < len) { num = (num * _NUM) + (digitChars[offset] - _STR); if (++offset < len) { num = (num * _NUM) + (digitChars[offset] - _STR); if (++offset < len) { num = (num * _NUM) + (digitCh
public ActivityMonitorSample() { InitializeComponent(); ownerARadio.ActionCommand = _STR; ownerBRadio.ActionCommand = _STR; ownerCRadio.ActionCommand = _STR; indicatorA.SetActivityOwner(_STR); indicatorB.SetActivityOwner(_STR); indicatorC.SetActivityOwner(_STR); JActivityWindow.GetInstance(); }
public static LatLon[] GreatCircleExtremeLocations(LatLon location, Angle azimuth) { if (location == null) { throw new ArgumentException("Location cannot be null"); } if (azimuth == null) { throw new ArgumentException("Azimuth cannot be null"); } double lat0 = location.Latitude.Radians; double az = azimuth.Radians; double tanDistance = -Math.Tan(lat0) / Math.Cos(az); double distance = Math.Atan(tanDistance); Angle extremeDistance1 = Angle.FromRadians(distance + (Math.PI / _NUM)); Angle extremeDistance2 = Angle.FromRadians(distance - (Math.PI / _NUM)); return new LatLon[] { GreatCircleEndPosition(location, azimuth, extremeDistance1), GreatCircleEndPosition(location, azimuth, extremeDistance2) }; }
private void InitCheckbox(CheckBoxPreference checkbox, bool checked, bool enabled) { checkbox.SetChecked(checked); checkbox.SetEnabled(enabled); }
private void PaintCheckIconEnabledAndSelected(Graphics g, int width, int height) { Shape s = shapeGenerator.CreateCheckMark(_NUM, _NUM, width, height); g.FillShape(s, iconEnabledSelected); }
public static int FindURISplitIndex(string uri) { int uriLength = uri.Length; int idx = uriLength - _NUM; for (; idx >= _NUM; idx--) { if (!TurtleUtil.IsNameChar(uri[idx])) { break; } } idx++; for (; idx < uriLength; idx++) { if (TurtleUtil.IsNameStartChar(uri[idx])) { break; } } if (!TurtleUtil.IsNameEndChar(uri[uriLength - _NUM])) { return -_NUM; } if (idx > _NUM && idx < uriLength) { return idx; } return -_NUM; }
private void WriteLog(string cmd) { try { if (m_writer == null) { var file = Path.GetTempFileName(); m_writer = new StreamWriter(file); log.Info(file.ToString()); } m_writer.WriteLine(cmd); m_writer.Flush(); } catch (Exception e) { log.Severe(e.ToString()); } }
public void Reload(string why) { mFullPhotoPaths = mRootDir.List(MediaScanner.JPG_FILENAME_FILTER); if (mFullPhotoPaths != null && mFullPhotoPaths.Length == _NUM) { mFullPhotoPaths = null; Log.Debug(Global.LOG_CONTEXT, mDebugPrefix + why + _STR + mRootDir + _STR + _NUM); } else if (mFullPhotoPaths != null) { if (Global.debugEnabled) { Log.Debug(Global.LOG_CONTEXT, mDebugPrefix + why + _STR + mRootDir + _STR + mFullPhotoPaths.Length); } string parentDirString = mRootDir.GetAbsolutePath(); for (int i = _NUM; i < mFullPhotoPaths.Length; i++) { mFullPhotoPaths[i] = parentDirString + _STR + mFullPhotoPaths[i]; } } }
public DNSRecord(string name, DNSRecordType type, DNSRecordClass recordClass, bool unique, int ttl) : base(name, type, recordClass, unique) { this._ttl = ttl; this._created = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); }
public static string Block(IEnumerable<string> rows) { return Block(string.Join(Environment.NewLine, rows)); }
protected void AddContentSpecToElement(XMLElementDecl elementDecl) { if (fDepth == _NUM || (fDepth == _NUM && elementDecl.Type == XMLElementDecl.TYPE_MIXED) && fNodeIndexStack != null) { if (elementDecl.Type == XMLElementDecl.TYPE_MIXED) { int pcdata = AddUniqueLeafNode(null); if (fNodeIndexStack[_NUM] == -_NUM) { fNodeIndexStack[_NUM] = pcdata; } else { fNodeIndexStack[_NUM] = AddContentSpecNode(XMLContentSpec.CONTENTSPECNODE_CHOICE, pcdata, fNodeIndexStack[_NUM]); } } SetContentSpecIndex(fCurrentElementIndex, fNodeIndexStack[fDepth]); } }
private void GrowSpine() { spine = new int[(spine.Length << _NUM) + _NUM]; threshold = (int)(spine.Length * loadFactor); Array.Fill(spine, -_NUM); for (int i = _NUM; i < size; i++) { Insert(objs[i], i); } }
public void Reconnect() { if (opened && !allowConnectionRecovery) { return; } ReconnectWaitThread thread = new ReconnectWaitThread(); thread.Start(); try { thread.Join(); } catch (ThreadInterruptedException e) { log.Error(_STR + e.Message); } if (!opened) { log.Error(_STR); } else { log.Info(_STR + GetCurrentPortName()); ResetupConnection(); } }
public IReadOnlyCollection<GridPortRecord> Records() { lock (recs) { return new ReadOnlyCollection<GridPortRecord>(new List<GridPortRecord>(recs)); } }
public override string ToString() { return buf.ToString(); }
public bool HasChangeEvent(string name) { if (var != null) { List<MetaData> mdList = var.GetMetaData(StandardDefs.MD_CHANGEEVENT); if (mdList != null) { for (int i = _NUM, size = mdList.Count; i < size; i++) { MetaData md = mdList[i]; if (name.Equals(md.GetValue(_NUM))) { return _BOOL; } } } } return _BOOL; }
protected void ResetXML11() { int count = fXML11Components.Count; for (int i = _NUM; i < count; i++) { XMLComponent c = (XMLComponent)fXML11Components[i]; c.Reset(this); } }
public float DistanceToOtherCircle(Circle circle) { return (float)Math.Abs(Math.Sqrt(Math.Pow(circle.Center.X - Center.X, _NUM) + Math.Pow(circle.Center.Y - Center.Y, _NUM))); }
public SimpleCommand(string commandName, params string[] args) { this(commandName, (Argument)null); List<Argument> argList = new List<Argument>(); foreach (string arg in args) { argList.Add(new Argument(arg)); } _arguments = argList.ToArray(); }
private void Grow() { m_allocatedSize *= _NUM; bool[] newVector = new bool[m_allocatedSize]; Array.Copy(m_values, _NUM, newVector, _NUM, m_index + _NUM); m_values = newVector; }
public string ConvertToLowerCase(string table) { return table.ToLower(); }
public PickingGraphMousePlugin(int selectionModifiers, int addToSelectionModifiers) { base(selectionModifiers); this.addToSelectionModifiers = addToSelectionModifiers; this.lensPaintable = new LensPaintable(); this.cursor = Cursors.Hand; }
public int[] BreadthFirstSearch(int initialValue, IBFSTraversable<N> traversable, int firstValue, IIntegerBfsNextValueIterator<N> nextValueIterator, List<int> sourcesIndex) { int[] results = new int[nodes.Length]; Array.Fill(results, initialValue); bool[] alreadyScanned = new bool[nodes.Length]; Array.Fill(alreadyScanned, false); HashSet<int> currentNodesIndex = new HashSet<int>(sourcesIndex); IterativeIntegerBreadthFirstSearch(results, alreadyScanned, currentNodesIndex, firstValue, _NUM, traversable, nextValueIterator); return results; }
public ViewRefRender(ViewRender<T> view, Type type, int priority) { if (view == null) throw new ArgumentNullException(nameof(view)); _view = view; _type = type; _priority = priority; }
public void CheckNumberArgs(int argNum) { if (argNum < _NUM) { ReportWrongNumberArgs(); } }
private bool Announce(string[] groups) { if (dataPackets == null || !lastLocator.Equals(myLocator) || !lastGroups.SequenceEqual(groups)) { List<DatagramPacket> packets = new List<DatagramPacket>(); Discovery disco; try { disco = GetDiscovery(multicastAnnouncementConstraints.ChooseProtocolVersion()); } catch (DiscoveryProtocolException e) { throw new AssertionException(e); } EncodeIterator ei = disco.EncodeMulticastAnnouncement(new MulticastAnnouncement(announcementSeqNo++, myLocator.GetHost(), myLocator.GetPort(), groups, myServiceID), multicastAnnouncementConstraints.GetMulticastMaxPacketSize(DEFAULT_MAX_PACKET_SIZE), multicastAnnouncementConstraints.GetUnfulfilledConstraints()); while (ei.HasNext()) { try { packets.AddRange(ei.Next()); } catch (Exception e) { logger.Log((e is UnsupportedConstraintException) ? Levels.HANDLED : Level.INFO, _STR + _STR, e); } } lastLocator = myLocator; lastGroups = groups; dataPackets = packets.ToArray(); } try { Send(dataPackets); } catc
public DrawingAttributes() { propertyChangeSupport = new PropertyChangeSupport(this); }
public void Close() { scanner.Close(); }
static void CreatePolicyTree(string configName, string configId, ServiceConfigManager scm, string org) { try { ServiceConfig pConfig = scm.GetOrganizationConfig(org, null); if (pConfig == null) { scm.CreateOrganizationConfig(org, null); pConfig = scm.GetOrganizationConfig(org, null); } pConfig.AddSubConfig(configName, configId, _NUM, null); } catch (ServiceAlreadyExistsException se) { if (debug.MessageEnabled()) { debug.Message(_STR + configName + _STR + configId + _STR + org); } } catch (SMSException e) { string[] objs = { org }; if (e.GetExceptionCode() == SMSException.STATUS_NO_PERMISSION) { throw new NoPermissionException(ResBundleUtils.RbName, _STR, null); } else { throw new PolicyException(ResBundleUtils.RbName, _STR, objs, e); } } }
private void RollbackMethodForCreateSnapshot(bool isSnapshotCreated, bool isDummyLunPathAdded, HDSApiClient hdsApiClient, StorageSystem storage, Uri snapshot) { if (isDummyLunPathAdded) { log.Info(_STR); hdsProtectionOperations.RemoveDummyLunPath(storage, snapshot); } if (isSnapshotCreated) { log.Info(_STR); BlockSnapshot snapshotObj = dbClient.QueryObject<BlockSnapshot>(snapshot); string systemObjectID = HDSUtils.GetSystemObjectID(storage); string logicalUnitObjId = HDSUtils.GetLogicalUnitObjectId(snapshotObj.NativeId, storage); hdsApiClient.DeleteSnapshotVolume(systemObjectID, logicalUnitObjId, storage.Model); } }
public static int ConvertStringToTimeSeconds(string time) { int result = 0; // Assuming _NUM is replaced with 0 if (time.EndsWith("h")) // Assuming _STR for hours is "h" { int hoursToAdd = int.Parse(time.TrimEnd('h')); result = (60 * 60) * hoursToAdd; // 60 * 60 for conversion from hours to seconds } else if (time.EndsWith("m")) // Assuming _STR for minutes is "m" { int minsToAdd = int.Parse(time.TrimEnd('m')); result = 60 * minsToAdd; // 60 for conversion from minutes to seconds } else if (time.EndsWith("s")) // Assuming _STR for seconds is "s" { int secsToAdd = int.Parse(time.TrimEnd('s')); result = secsToAdd; // Seconds remain the same } return result; }
public void Detach(AppCompatActivity activity) { attrViewMaps.Remove(activity.GetHashCode()); }
public void ReadPrefs(SharedPreferences settings, ActionFactory factory) { bool visible = _BOOL; string actionId = settings.GetString(_STR + name + _STR, _STR); mainAction = factory.GetAction(actionId); if (mainAction != null) visible = _BOOL; menuActions.Clear(); for (int i = _NUM; i < maxMenuActions; i++) { actionId = settings.GetString(_STR + name + _STR + (i + _NUM), _STR); UIAction a = factory.GetAction(actionId); if (a != null) visible = _BOOL; menuActions.Add(a); } if (button != null) button.Visibility = visible ? View.VISIBLE : View.GONE; }
public bool AddToActiveList(DownloadInfoRunnable downloadInfoRunnable) { return ActiveListHasRoom() && mActiveList.Add(downloadInfoRunnable); }
private void AddExprToTLA(TLAExpr expr) { var sv = expr.ToStringVector(); var exprMapping = expr.ToMappingVector(); int indent = tlacodeNextLine.Length; int nextLine = _NUM; if (indent != _NUM) { MappingObject.ShiftMappingVector(exprMapping, indent); tlacodeNextLine += (string)sv[_NUM]; mappingVectorNextLine.AddRange((List<object>)exprMapping[_NUM]); nextLine = _NUM; if (sv.Count > _NUM) { EndCurrentLineOfTLA(); } } if (sv.Count > _NUM) { string spaces = NSpaces(indent); while (nextLine < sv.Count - _NUM) { tlacode.Add(spaces + (string)sv[nextLine]); mappingVector.Add((List<object>)exprMapping[nextLine]); nextLine++; } tlacodeNextLine = spaces + (string)sv[nextLine]; mappingVectorNextLine = (List<object>)exprMapping[nextLine]; } else if (indent == _NUM) { tlacodeNextLine +
private bool IsUpperCaseCamelCaseHunk(string hunk) { if (hunk.Length < _NUM) return _BOOL; for (int i = _NUM; i < hunk.Length; i++) { if (!IsLegalChar(hunk[i])) return _BOOL; } return _BOOL; }
void AddFillComponents(Panel panel, int[] cols, int[] rows) { Size filler = new Size(_NUM, _NUM); bool filledCell11 = _BOOL; CellConstraints cc = new CellConstraints(); if (cols.Length > _NUM && rows.Length > _NUM) { if (cols[_NUM] == _NUM && rows[_NUM] == _NUM) { panel.Controls.Add(Box.CreateRigidArea(filler), cc.xy(_NUM, _NUM)); filledCell11 = _BOOL; } } for (int index = _NUM; index < cols.Length; index++) { if (cols[index] == _NUM && filledCell11) { continue; } panel.Controls.Add(Box.CreateRigidArea(filler), cc.xy(cols[index], _NUM)); } for (int index = _NUM; index < rows.Length; index++) { if (rows[index] == _NUM && filledCell11) { continue; } panel.Controls.Add(Box.CreateRigidArea(filler), cc.xy(_NUM, rows[index])); } }
public void Type(string inputString) { for (int i = _NUM; i < inputString.Length; i++) { char c = inputString[i]; Type(c); } }
public bool ProvidesIdentifier() { return _BOOL; }
static void RemoveRedundantAffix(TranslatorUtils.IContain iContain, List<string> strList) { if (strList.Count <= _NUM) { return; } int w = _NUM; foreach (var str in strList) { if (w == _NUM || !iContain.ContainFunc(str, strList[w - _NUM])) { strList[w] = str; w++; } } strList = strList.GetRange(_NUM, w - _NUM); }
public static int NextInt(int n) { Random random = GetRandom(); int value = random.Next(n); if (!_isTest) _freeRandomList.Free(random); return value; }
protected void DoResumeUpdates() { Calendar cal = Calendar.GetInstance(Locale.Default); mFirstDayOfWeek = cal.FirstDayOfWeek - _NUM; mShowWeekNumber = _BOOL; UpdateHeader(); GoTo(mSelectedDay.ToMillis(_BOOL), _BOOL, _BOOL, _BOOL); mAdapter.SetSelectedDay(mSelectedDay); mTodayUpdater.Run(); }
private void StoreLastUsed() { Put(LAST_USE, (int)(DateTime.UtcNow.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds / _NUM)); }
private bool CanContain(ElementContainmentInfo child, ElementContainmentInfo top, int topIndex) { int childTypes = child.Types; int contents = top.Contents; int transparencyAllowed = childTypes & (top.TransparentToContents & ~contents); for (int containerIndex = topIndex - _NUM; transparencyAllowed != _NUM; --containerIndex) { if (containerIndex < _NUM) { contents |= transparencyAllowed; break; } ElementContainmentInfo container = openElements[containerIndex]; contents |= transparencyAllowed & container.Contents; transparencyAllowed = transparencyAllowed & container.TransparentToContents & ~contents; } return (contents & childTypes) != _NUM; }
public static int[] ExtractArcs(ASN1ObjectIdentifier oid) { string oidStr = oid.GetId(); string[] tokens = oidStr.Split(new[] { _STR }, StringSplitOptions.RemoveEmptyEntries); int arcCount = tokens.Length; int[] arcs = new int[arcCount]; bool expectDelimiter = _BOOL; int i = _NUM; for (int j = 0; j < tokens.Length; j++) { string token = tokens[j]; if (expectDelimiter && (!token.Equals(_STR) || j + 1 < tokens.Length)) { throw new InvalidObjectIdException(res.GetString(_STR)); } else if (!expectDelimiter) { try { arcs[i] = int.Parse(token); if (arcs[i] < _NUM) { throw new InvalidObjectIdException(res.GetString(_STR)); } i++; } catch (FormatException) { throw new InvalidObjectIdException(res.GetString(_STR)); } } expectDelimiter = !expectDelimiter; } return arcs; }
public void TestIsDuplicateString() { int count = _NUM; ActiveMQMessageAudit audit = new ActiveMQMessageAudit(); IdGenerator idGen = new IdGenerator(); List<string> list = new List<string>(); for (int i = _NUM; i < count; i++) { string id = idGen.GenerateId(); list.Add(id); Assert.IsFalse(audit.IsDuplicate(id)); } List<string> windowList = list.GetRange(list.Count - _NUM - audit.GetAuditDepth(), _NUM); foreach (string id in windowList) { Assert.IsTrue(audit.IsDuplicate(id), _STR + id); } }
protected void UpdateStatsForConditionalDensityEstimator(ConditionalDensityEstimator classifier, Instance classMissing, double classValue) { if (m_PriorEstimator == null) { SetNumericPriorsFromBuffer(); } m_SumSchemeEntropy -= classifier.LogDensity(classMissing, classValue) * classMissing.Weight() / Utils.Log2; m_SumPriorEntropy -= m_PriorEstimator.LogDensity(classValue) * classMissing.Weight() / Utils.Log2; }
public override bool Accept(FileInfo file) { if (file != null) { if (file.Attributes.HasFlag(FileAttributes.Directory)) { return _BOOL; } string extension = GetExtension(file); if (extension != null && filters.ContainsKey(extension)) { return _BOOL; } } return _BOOL; }
public void TestCase3() { byte[] aBytes = { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; byte[] bBytes = { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; byte[] rBytes = { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; int aSign = _NUM; int bSign = -_NUM; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger bNumber = new BigInteger(bSign, bBytes); BigInteger result = BigInteger.Add(aNumber, bNumber); byte[] resBytes = result.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.True(resBytes[i] == rBytes[i]); } Assert.Equals(_STR, _NUM, result.Sign); }
public PollResult StartPoll(PollController conn) { if (!_lifecycle.IsActive()) { log.Warning(this + _STR); return PollResult.CLOSED; } SocketBar socket = conn.GetSocket(); if (socket == null) { log.Warning(this + _STR + conn); return PollResult.CLOSED; } SelectableChannel selChannel = socket.SelectableChannel(); if (selChannel == null) { log.Warning(this + _STR + socket); return PollResult.CLOSED; } _connectionCount.IncrementAndGet(); _activeCount.IncrementAndGet(); _registerQueue.Offer(conn); return PollResult.START; }
public override void IncrementAccessCount() { accessCount.Increment(); }
public ClusterPolicy CreateClusterPolicy(string clusterMemberName) { long time1 = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); if (_clusterPolicies == null) { _clusterMemberNames = GetClusterMemberNames(); if (_clusterMemberNames != null && _clusterMemberNames.Length > _NUM) { _clusterPolicies = new Dictionary<string, ClusterPolicy>(); ClusterPolicy[] tempPolicy = new ClusterPolicy[_clusterMemberNames.Length]; for (int i = _NUM; i < _clusterMemberNames.Length; i++) { tempPolicy[i] = CreateClusterPolicyInternal(_clusterMemberNames[i]); } List<ReplicationPolicy> selectedReplPolicies = new List<ReplicationPolicy>(_clusterMemberNames.Length); HashSet<string> selectedReplGroupNames = new HashSet<string>(); for (int i = _NUM; i < tempPolicy.Length; i++) { if (tempPolicy[i].m_ReplicationPolicy != null && !selectedReplGroupNames.Contains(tempPolicy[i].m_ReplicationPolicy.m_ReplicationGroupName)) { selectedReplPolicies.Add(tempPolicy[i].m_ReplicationPolicy); selec
public static bool CompareDoubles(double a, double b) { const double EPSILON = 1e-10; // Adjust EPSILON as needed if (double.IsNaN(a) && double.IsNaN(b)) return true; if (!double.IsInfinity(a) && !double.IsInfinity(b)) return Math.Abs(a - b) <= EPSILON; return a == b; }
public static byte[] BitmapToByte(Bitmap bitmap) { using (var ms = new MemoryStream()) { bitmap.Save(ms, System.Drawing.Imaging.ImageFormat.Png); return ms.ToArray(); } }
public ConfigureCoerceiveParsingDialog_NB(CoerciveParsing coerciveParsing) { this.coerciveParsing = coerciveParsing; InitComponents(); IterateModel numberOfTagsIterator = coerciveParsing.GetNumberOfTagsIterator(); configureIterateModel_NB2.SetStartAt(numberOfTagsIterator.GetStartAt().ToString()); configureIterateModel_NB2.SetStopAt(numberOfTagsIterator.GetStopAt().ToString()); configureIterateModel_NB2.SetIncrement(numberOfTagsIterator.GetIncrement().ToString()); configureIterateModel_NB2.SetIterateStrategie(numberOfTagsIterator.GetIterateStrategie()); List<string> tagNames = new List<string>(coerciveParsing.GetTagNames()); configureStringList_NB1.SetStringList(tagNames); }
public static double LogOfBase(double number, int baseValue) { return Math.Log(number) / Math.Log(baseValue); }
public Entry EditEntry(User user, string id, string note, string quotation, bool isPublic, long? modTime, bool isAdmin, Errors errors) { if (modTime == null) { Errors.Add(errors, errorMessages.ErrorModTimeIsNull()); return null; } if (user == null) { Errors.Add(errors, errorMessages.ErrorUserIsNull()); return null; } if (!string.IsNullOrEmpty(id) && !idGenerator.IsIdWellFormed(id)) { Errors.Add(errors, errorMessages.ErrorIdIsInvalid()); return null; } var entry = GetEntryById(id); if (entry == null) { Errors.Add(errors, errorMessages.ErrorTheEntryCouldNotBeFound()); return null; } if (!CanUserModifyEntry(user, entry, isAdmin)) { Errors.Add(errors, errorMessages.ErrorTheUserIsNotEntitledToModifyTheEntry()); return null; } if (note != null) { note = CleanUpText(note); } if (entry.IsNotebook()) { entry.SetNotebookTitle(note); } else
public static void UF6(double[] x, double[] f, int nx) { int count1 = _NUM; int count2 = _NUM; double sum1 = _NUM; double sum2 = _NUM; double prod1 = _NUM; double prod2 = _NUM; double yj; double hj; double pj; double N = _NUM; double E = _NUM; for (int j = _NUM; j <= nx; j++) { yj = x[j - _NUM] - Math.Sin(_NUM * Math.PI * x[_NUM] + j * Math.PI / nx); pj = Math.Cos(_NUM * yj * Math.PI / Math.Sqrt(j + _NUM)); if (j % _NUM == _NUM) { sum2 += yj * yj; prod2 *= pj; count2++; } else { sum1 += yj * yj; prod1 *= pj; count1++; } } hj = _NUM * (_NUM / N + E) * Math.Sin(_NUM * N * Math.PI * x[_
public FileSaverDescriptor(string title, string description, params string[] extensions) { base(_BOOL, _BOOL, _BOOL, _BOOL, _BOOL, _BOOL); SetTitle(title); SetDescription(description); this.extensions = new List<string>(extensions); }
protected int ReadBlock() { blockSize = Read(); int n = _NUM; if (blockSize > _NUM) { try { int count; while (n < blockSize) { count = blockSize - n; rawData.Get(block, n, count); n += count; } } catch (Exception e) { Log.Warn(TAG, _STR, e); status = STATUS_FORMAT_ERROR; } } return n; }
public void AddRun(Run run) { runs.Add(run); run.SetId(runIdCounter++); }
void CopyInto(Converter[] converters) { Array.Copy(iConverters, _NUM, converters, _NUM, iConverters.Length); }
public override bool AddOutputSensor(string sensorName, int state) { OutputSensor outputSensor = new OutputSensor(sensorName); if (!outputSensor.SetState(state)) { return false; } _outputSensorList.Add(outputSensor); return true; }
public void Init(SocketChannel channel) { _channel = channel; _readBuffer.Clear(); _readBuffer.Flip(); _needsFlush = _BOOL; }
public void Reset() { Console.WriteLine(_STR); mCurrentPlayer.Reset(); mNextPlayer.Reset(); mQueue = new List<YourType>(); mQueueIndex = _NUM; mRequestedSeekPosition = _NUM; mPlayWhenPrepared = _BOOL; }
public Expected<T> IfPresent(Action<T> consumer) { if (this.value != null) { consumer(this.value); } return this; }
protected void SendIntensity(double intensity) { if (log.IsDebugEnabled()) { log.Debug(_STR + intensity + _STR + _STR + lastOutputStep + _STR + maxDimStep); } int newStep = (int)Math.Round(intensity * maxDimStep); if ((newStep < _NUM) || (newStep > maxDimStep)) { log.Error(_STR + newStep + _STR + intensity); } if (newStep == _NUM) { if (log.IsDebugEnabled()) { log.Debug(_STR + intensity + _STR); } return; } X10Sequence out = new X10Sequence(); out.AddExtData(housecode, devicecode, X10Sequence.EXTCMD_DIM, newStep); tc.SendX10Sequence(out, null); lastOutputStep = newStep; if (log.IsDebugEnabled()) { log.Debug(_STR + intensity + _STR + X10Sequence.HouseValueToText(housecode) + _STR + devicecode + _STR + newStep); } }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public static float ReadFloat() { return scanner.NextFloat(); }
public GlowScheduler(GlowServer server, WorldScheduler worlds) { this.server = server; this.worlds = worlds; inTickTaskCondition = worlds.GetAdvanceCondition(); tickEndRun = null; primaryThread = Thread.CurrentThread; }
public void TestFill() { int val = int.MaxValue; int[] d = new int[_NUM]; Array.Fill(d, val, _NUM, d.Length - _NUM); for (int i = _NUM; i < _NUM; i++) { Assert.IsTrue(!(d[i] == val), _STR); } for (int i = _NUM; i < d.Length; i++) { Assert.IsTrue(d[i] == val, _STR); } try { Array.Fill(d, val, _NUM, _NUM); Assert.Fail(_STR); } catch (ArgumentException) { } try { Array.Fill(d, val, -_NUM, _NUM); Assert.Fail(_STR); } catch (IndexOutOfRangeException) { } try { Array.Fill(d, val, _NUM, d.Length + _NUM); Assert.Fail(_STR); } catch (IndexOutOfRangeException) { } }
private int CalculateLayoutWidth(int widthSize, int mode) { InitResourcesIfNecessary(); itemsLayout.LayoutParameters = new LayoutParams(LayoutParams.WrapContent, LayoutParams.WrapContent); itemsLayout.Measure(MeasureSpec.MakeMeasureSpec(widthSize, MeasureSpec.Unspecified), MeasureSpec.MakeMeasureSpec(_NUM, MeasureSpec.Unspecified)); int width = itemsLayout.MeasuredWidth; if (mode == MeasureSpec.Exactly) { width = widthSize; } else { width += _NUM * PADDING; width = Math.Max(width, GetSuggestedMinimumWidth()); if (mode == MeasureSpec.AtMost && widthSize < width) { width = widthSize; } } itemsLayout.Measure(MeasureSpec.MakeMeasureSpec(width - _NUM * PADDING, MeasureSpec.Exactly), MeasureSpec.MakeMeasureSpec(_NUM, MeasureSpec.Unspecified)); return width; }
public void Delete() { Close(); Utils.DeleteContents(directory); }
public override bool Execute(PsiElement pe, ResolveState state) { if (pe is PsiVariable pvar) { if (!myStaticSensitiveFlag || !myStaticScopeFlag || pvar.HasModifierProperty(PsiModifier.STATIC)) { if (Check(pvar, state)) { myResultList.Add(pvar); } } } return _BOOL; }
public void Characters(char[] ch, int start, int length) { try { StopTerminator(); if (w == null) return; int end = start + length; for (int i = start; i < end; i++) { char c = ch[i]; switch (c) { case _STR: w.Write(_STR); break; case _STR: w.Write(_STR); break; case _STR: w.Write(_STR); break; case _STR: case _STR: case _STR: w.Write(c); break; default: if (CanEncode(c)) { w.Write(c); } else { w.Write(_STR); w.Write(c.ToString()); w.Write(_STR); } break; } } } catch (IOException e) { throw new SAXException(e); } }
public static string ToHumanReadableString(string iso8601Duration) { string str = string.Empty; if (Regex.IsMatch(iso8601Duration, _STR)) { str = _STR; } else { string hours = GetHours(iso8601Duration); string minutes = GetMinutes(iso8601Duration); string seconds = GetSeconds(iso8601Duration); if (hours != null) { str = hours; if (minutes != null && minutes.Length == _NUM) { minutes = _STR + minutes; } } if (string.IsNullOrEmpty(str)) str = minutes; else str += _STR + minutes; if (string.IsNullOrEmpty(str)) str = seconds; else str += _STR + seconds; } return str; }
public IChatMessage SendMessage(string text) { if (string.IsNullOrEmpty(text)) { throw new ServerApiIllegalArgumentException(_STR); } int messageLength = text.Length; int maxMessageLength = mRcsSettings.GetMaxGroupChatMessageLength(); if (messageLength > maxMessageLength) { throw new ServerApiIllegalArgumentException(_STR + messageLength + _STR + maxMessageLength + _STR); } if (!IsAllowedToSendMessage()) { throw new ServerApiPermissionDeniedException(_STR); } try { mImService.RemoveGroupChatComposingStatus(mChatId); long timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); var msg = ChatUtils.CreateTextMessage(null, text, timestamp, timestamp); var persistedStorage = new ChatMessagePersistedStorageAccessor(mMessagingLog, msg.GetMessageId(), msg.GetRemoteContact(), text, msg.GetMimeType(), mChatId, Direction.OUTGOING); AddOutgoingGroupChatMessage(msg, Content.Status.QUEUED, Content.ReasonCode.UNSPECIFIED); if (!mChatService.IsGroupC
public override string ToString() { return ToString(value); }
void Remove(TcpServerThread t) { running.Remove(t); }
public DockNodeEventHandler(Node node) { this.node = node; }
private int ReadSourceToLog(Settings settings) { string sourceToLog = settings.Get(INDEX_INDEXING_SLOWLOG_MAX_SOURCE_CHARS_TO_LOG, _STR); try { return int.Parse(sourceToLog, System.Globalization.NumberStyles.Integer); } catch (FormatException) { return bool.Parse(sourceToLog) ? int.MaxValue : _NUM; } }
private void DeleteCurrentLicenseFileOnDisk() { FileInfo licenseFile = new FileInfo(LicenseConstants.LICENSE_FILE_PATH); if (licenseFile.Exists) { licenseFile.Delete(); } }
[Obsolete] public static NetworkParameters TestNet() { return TestNet3Params.Get(); }
public override void Run() { lock (mSync) { mRequestStop = true; mRequestDrain = _NUM; Monitor.Pulse(mSync); } bool isRunning = true; bool localRequestStop; bool localRequestDrain; while (isRunning) { lock (mSync) { localRequestStop = mRequestStop; localRequestDrain = (mRequestDrain > _NUM); if (localRequestDrain) mRequestDrain--; } if (localRequestStop) { Drain(); SignalEndOfInputStream(); Drain(); Release(); break; } if (localRequestDrain) { Drain(); } else { lock (mSync) { try { Monitor.Wait(mSync); } catch (ThreadInterruptedException) { break; } } } } if (DEBUG) Log.Debug(TAG, _STR); lock (mSync) { mRequestStop = true; mIsCapturing = true; } }
public void ReadFromStream(BinaryReader dis, int version) { event = dis.ReadString(); site = dis.ReadString(); date = dis.ReadString(); round = dis.ReadString(); white = dis.ReadString(); black = dis.ReadString(); startPos = TextIO.ReadFEN(dis.ReadString()); currentPos = new Position(startPos); timeControl = dis.ReadString(); if (version >= _NUM) { whiteTimeControl = dis.ReadString(); blackTimeControl = dis.ReadString(); } else { whiteTimeControl = _STR; blackTimeControl = _STR; } int nTags = dis.ReadInt32(); tagPairs.Clear(); for (int i = _NUM; i < nTags; i++) { TagPair tp = new TagPair(); tp.tagName = dis.ReadString(); tp.tagValue = dis.ReadString(); tagPairs.Add(tp); } rootNode = new Node(); Node.ReadFromStream(dis, rootNode); currentNode = rootNode; int pathLen = dis.ReadInt32(); for (int i
public Rect UpdateFastScrollerBounds(BaseRecyclerView rv, int lastTouchY) { mInvalidateRect.Set(mBgBounds); if (IsVisible()) { int edgePadding = rv.GetMaxScrollbarWidth(); int bgPadding = (mBgOriginalSize - mTextBounds.Height) / _NUM; int bgHeight = mBgOriginalSize; int bgWidth = Math.Max(mBgOriginalSize, mTextBounds.Width + (_NUM * bgPadding)); if (Utilities.IsRtl(mRes)) { mBgBounds.Left = rv.GetBackgroundPadding().Left + (_NUM * rv.GetMaxScrollbarWidth()); mBgBounds.Right = mBgBounds.Left + bgWidth; } else { mBgBounds.Right = rv.GetWidth() - rv.GetBackgroundPadding().Right - (_NUM * rv.GetMaxScrollbarWidth()); mBgBounds.Left = mBgBounds.Right - bgWidth; } mBgBounds.Top = lastTouchY - (int)(FAST_SCROLL_OVERLAY_Y_OFFSET_FACTOR * bgHeight); mBgBounds.Top = Math.Max(edgePadding, Math.Min(mBgBounds.Top, rv.GetHeight() - edgePadding - bgHeight));
public DNetscapeCaPolicyUrl(Form parent) : base(parent) { Text = res.GetString(_STR); InitializeComponents(); }
public bool TextboxKeyTyped(char character, int keyCode) { if (!isFocused) return _BOOL; else if (GuiScreen.IsEndKey(keyCode)) { SetCursorPositionEnd(); SetSelectionPos(_NUM); return _BOOL; } else if (GuiScreen.IsCopyKey(keyCode)) { GuiScreen.SetClipboardString(GetSelectedText()); return _BOOL; } else if (GuiScreen.IsPasteKey(keyCode)) { if (isEnabled) WriteText(GuiScreen.GetClipboardString()); return _BOOL; } else if (GuiScreen.IsCutKey(keyCode)) { GuiScreen.SetClipboardString(GetSelectedText()); if (isEnabled) WriteText(_STR); return _BOOL; } else switch (keyCode) { case _NUM: if (GuiScreen.IsCtrlKeyDown()) { if (isEnabled) DeleteWords(-_NUM); } else if (isEnabled) DeleteFromCursor(-_NUM); return _BOOL; case _NUM: if (GuiScreen.IsShiftKeyDown()) SetSelectionPos(_NUM); else SetCursorPosit
protected int MatchBitap(string text, string pattern, int loc) { Debug.Assert(Match_MaxBits == _NUM || pattern.Length <= Match_MaxBits, _STR); var s = MatchAlphabet(pattern); double scoreThreshold = Match_Threshold; int bestLoc = text.IndexOf(pattern, loc); if (bestLoc != -_NUM) { scoreThreshold = Math.Min(MatchBitapScore(_NUM, bestLoc, loc, pattern), scoreThreshold); bestLoc = text.LastIndexOf(pattern, loc + pattern.Length); if (bestLoc != -_NUM) { scoreThreshold = Math.Min(MatchBitapScore(_NUM, bestLoc, loc, pattern), scoreThreshold); } } int matchmask = _NUM << (pattern.Length - _NUM); bestLoc = -_NUM; int binMin, binMid; int binMax = pattern.Length + text.Length; int[] lastRd = new int[_NUM]; for (int d = _NUM; d < pattern.Length; d++) { binMin = _NUM; binMid = binMax; while (binMin < binMid)
public static Path CreateDirectory(Path parent, string folderName) { var directory = new DirectoryInfo(Path.Combine(parent.ToString(), folderName)); if (!directory.Exists) { if (!directory.Create().Exists) { throw new InvalidOperationException($"Failed to create directory: {parent}{Path.DirectorySeparatorChar}{folderName}"); } } directory.DeleteOnExit(); return directory.FullName.ToPath(); }
public static bool IsWindows8() { return osName.IndexOf(_STR) > -_NUM && (osVersion.Equals(_STR) || osVersion.Equals(_STR)); }
protected HashSet<FunctionInterface> FindUnusedFunctions(HashSet<UnitInterface> units) { HashSet<FunctionInterface> allFunctions = new HashSet<FunctionInterface>(); HashSet<FunctionInterface> usedFunctions = new HashSet<FunctionInterface>(); foreach (UnitInterface unit in units) { List<FunctionInterface> unitFunctions = GetUnitFunctions(unit); allFunctions.UnionWith(unitFunctions); foreach (FunctionInterface unitFunction in unitFunctions) { foreach (FunctionInterface usedFunction in unitFunction.GetCalledFunctions()) { usedFunctions.Add(usedFunction); } } } allFunctions.ExceptWith(usedFunctions); return allFunctions; }
private static void AddItemsToList(int startIndex, int endIndex) { for (int i = startIndex; i < endIndex; i++) { values.Add(i); } }
public static synchronized List<Proxy> NoProxyList() { if (noProxyList == null) { List<Proxy> list = new List<Proxy>(_NUM); list.Add(Proxy.NO_PROXY); noProxyList = list.AsReadOnly(); } return noProxyList; }
public void AddIncludes(string[] definitions) { AddStrings(INCLUDES, definitions); AddStrings(linker_more, INCLUDES, definitions); newLinkerOptionsAfterCompile.Add(INCLUDES); }
protected void Add(double value, int group) { if (group < _NUM || group >= numberOfGroups) { throw new ArgumentException(); } data.Add(new RankedObservation(value, group)); }
public void TallyVariant(VcfHeader header, VcfRecord rec) { TallyVariant(rec, header.GetSampleNames()); }
public int Read(byte[] buffer, int offset, int count) { if (closed) { throw new IOException(_STR); } if (eof) { return -_NUM; } if (pos >= chunkSize) { NextChunk(); if (eof) { return -_NUM; } } count = Math.Min(count, chunkSize - pos); int readCount = in.Read(buffer, offset, count); pos += readCount; return readCount; }
public LDIFEntryReader(params string[] ldifLines) : base(ldifLines.ToList()) { }
public void UpdatePersonInfo() { this.leftPerson = person2LeavingPersonInfo[this.personId]; this.enteredPerson = person2EnteringPersonInfo[this.personId]; }
public MyMap Remove(int position) { MyMap mm = null; if (position >= _NUM && position < GetItemCount()) { mm = myMaps.RemoveAt(position); NotifyItemRemoved(position); } return mm; }
public void PresentLicenses(bool preAccept) { LicenseSet licenses = licenseModule.GetRequiredLicenses(); if (preAccept) { licenses.AcceptAll(); } else { foreach (License license in licenses) { if (license.IsAccepted()) { continue; } user.Show(_STR); user.Show(license.GetLicenseText()); string input = user.Ask(_STR); if (input != null && input.ToLower().StartsWith(YES.ToLower())) { license.Accept(); } else { license.Reject(); } } } }
public void AddGeoKey(XTIFFField geoKey) { geoKeyIndex[geoKey.GetTag()] = geoKey; hasGeoKeys = true; }
public static GeoTimeSerie Detect(GeoTimeSerie gts, int alphabetSize, int wordLen, int windowLen, ICollection<string> patterns, bool standardizePAA) { GeoTimeSerie gtsPatterns = GTSHelper.BSAX(gts, alphabetSize, wordLen, windowLen, standardizePAA); GTSHelper.Sort(gtsPatterns); GeoTimeSerie detected = new GeoTimeSerie(gts.LastBucket, gts.BucketCount, gts.BucketSpan, _NUM); detected.SetMetadata(gts.GetMetadata()); int lastidx = -_NUM; for (int i = _NUM; i < gtsPatterns.Values; i++) { if (!patterns.Contains(gtsPatterns.StringValues[i])) { continue; } for (int j = _NUM; j < windowLen; j++) { if (i + j > lastidx) { lastidx = i + j; GTSHelper.SetValue(detected, GTSHelper.TickAtIndex(gts, lastidx), GTSHelper.LocationAtIndex(gts, lastidx), GTSHelper.ElevationAtIndex(gts, lastidx), GTSHelper.Va
private StringBuilder DebugDumpCandidates(StringBuilder msg, List<Itemset> candidates, VectorFieldTypeInformation<BitVector> meta) { msg.Append(_STR); foreach (var itemset in candidates) { msg.Append(_STR); itemset.AppendTo(msg, meta); msg.Append(_STR); } return msg; }
public static void WriteBooleanArrayXml(bool[] val, string name, XmlSerializer out) { if (val == null) { out.StartTag(null, _STR); out.EndTag(null, _STR); return; } out.StartTag(null, _STR); if (name != null) { out.Attribute(null, _STR, name); } int N = val.Length; out.Attribute(null, _STR, N.ToString()); for (int i = _NUM; i < N; i++) { out.StartTag(null, _STR); out.Attribute(null, _STR, val[i].ToString()); out.EndTag(null, _STR); } out.EndTag(null, _STR); }
public void AddOutboundRule(OutboundRule outboundRule) { outboundRule.SetId(outboundRuleIdCounter++); outboundRules.Add(outboundRule); }
public Skype(string username, string password) { this.username = username; this.password = password; }
private void StopDrag(MotionEvent ev) { mTouchMode = TOUCH_MODE_IDLE; bool commitChange = ev.Action == MotionEventActions.Up && IsEnabled(); bool oldState = IsChecked(); bool newState; if (commitChange) { mVelocityTracker.ComputeCurrentVelocity(_NUM); float xvel = mVelocityTracker.GetXVelocity(); if (Math.Abs(xvel) > mMinFlingVelocity) { newState = ViewUtils.IsLayoutRtl(this) ? (xvel < _NUM) : (xvel > _NUM); } else { newState = GetTargetCheckedState(); } } else { newState = oldState; } if (newState != oldState) { PlaySoundEffect(SoundEffectConstants.Click); } SetChecked(newState); CancelSuperTouch(ev); }
private void AddFlags(int newFlags) { flags = GetLayoutFlags() | newFlags; }
public static string MatchCertificate(KeyStore keyStore, X509Certificate cert) { try { foreach (string alias in keyStore.Aliases()) { if (keyStore.IsCertificateEntry(alias)) { X509Certificate compCert = X509CertUtil.ConvertCertificate(keyStore.GetCertificate(alias)); if (cert.Equals(compCert)) { return alias; } } } return null; } catch (KeyStoreException ex) { throw new CryptoException(res.GetString(_STR), ex); } }
void PurgeLastArticles(int amountToPurge) { if (!IsDBAvailable()) return; long time = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); string query = _STR + TABLE_ARTICLES + _STR + (Utils.ARTICLE_LIMIT - amountToPurge + _STR); SafelyDeleteArticles(query, null); Console.WriteLine(TAG + _STR + (DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - time) + _STR); }
public void ReclaimViews(List<View> views) { int childCount = GetChildCount(); RecyclerListener listener = mRecycler.mRecyclerListener; for (int i = _NUM; i < childCount; i++) { View child = GetChildAt(i); TwoWayAbsListView.LayoutParams lp = (TwoWayAbsListView.LayoutParams)child.LayoutParameters; if (lp != null && mRecycler.ShouldRecycleViewType(lp.ViewType)) { views.Add(child); listener?.OnMovedToScrapHeap(child); } } mRecycler.ReclaimScrapViews(views); RemoveAllViewsInLayout(); }
public ProxyVerifier(TxnManager serverProxy, Guid proxyID) { if (!(serverProxy is RemoteMethodControl)) { throw new NotSupportedException(_STR); } else if (!(serverProxy is TrustEquivalence)) { throw new NotSupportedException(_STR + _STR); } else if (proxyID == Guid.Empty) { throw new ArgumentException(_STR); } this.serverProxy = (RemoteMethodControl)serverProxy; this.proxyID = proxyID; }
public void Paint(Graphics g) { g.TranslateTransform(_NUM, translateY); base.Paint(g); }
private void BeforeKey() { Scope context = Peek(); if (context == Scope.NONEMPTY_OBJECT) { Out.Append(_STR); } else if (context != Scope.EMPTY_OBJECT) { throw new JSONException(_STR); } Newline(); ReplaceTop(Scope.DANGLING_KEY); }
public static void Transfer(Stream input, Stream output, int bufferSize) { byte[] buffer = new byte[bufferSize]; int bytesRead; while ((bytesRead = input.Read(buffer, 0, buffer.Length)) > 0) { output.Write(buffer, 0, bytesRead); } }
public void TestFileDirectory() { var properties = LoadProperties(_STR); Assert.AreEqual(_STR, properties.GetProperty(_STR)); }
private static long AddAndCheck(long a, long b, Localizable pattern) { const long _NUM = /* assign the appropriate value for _NUM */; long result = a + b; if (!((a ^ b) < _NUM || (a ^ result) >= _NUM)) { throw new MathRuntimeException(pattern, a, b); } return result; }
private void SerializeCompactRDFGeneralQualifier(int indent, XMPNode node) { Write(_STR); WriteNewline(); SerializeCanonicalRDFProperty(node, _BOOL, _BOOL, indent + _NUM); foreach (var qualifier in node.IterateQualifier()) { SerializeCanonicalRDFProperty(qualifier, _BOOL, _BOOL, indent + _NUM); } }
private JCheckBox AddCheckbox(string text, Container container) { var checkbox = new JCheckBox(text); checkbox.AlignmentX = Component.LEFT_ALIGNMENT; checkbox.Border = BorderFactory.CreateEmptyBorder(_NUM, _NUM, _NUM, _NUM); container.Add(checkbox); return checkbox; }
public override void DrawBackground(Graphics2D g2, CategoryPlot plot, Rectangle2D dataArea) { float x0 = (float)dataArea.X; float x1 = x0 + (float)Math.Abs(this.xOffset); float x3 = (float)dataArea.MaxX; float x2 = x3 - (float)Math.Abs(this.xOffset); float y0 = (float)dataArea.MaxY; float y1 = y0 - (float)Math.Abs(this.yOffset); float y3 = (float)dataArea.MinY; float y2 = y3 + (float)Math.Abs(this.yOffset); GeneralPath clip = new GeneralPath(); clip.MoveTo(x0, y0); clip.LineTo(x0, y2); clip.LineTo(x1, y3); clip.LineTo(x3, y3); clip.LineTo(x3, y1); clip.LineTo(x2, y0); clip.ClosePath(); Composite originalComposite = g2.Composite; g2.Composite = AlphaComposite.GetInstance(AlphaComposite.SrcOver, plot.BackgroundAlpha); Paint backgroundPaint = plot.BackgroundPaint; if (backgro
public void Push() { state.cliprgn = g.GetClipBounds(); stack.Push(state); state = (GraphicsState)state.Clone(); }
public static void DropIndex(SqlConnection conn, string schema, string table) { Init(conn); using (SqlCommand prep = new SqlCommand(_STR + SCHEMA + _STR, conn)) { prep.Parameters.AddWithValue(_NUM, schema); prep.Parameters.AddWithValue(_NUM, table); using (SqlDataReader rs = prep.ExecuteReader()) { if (!rs.Read()) { return; } int indexId = rs.GetInt32(_NUM); prep.CommandText = _STR + SCHEMA + _STR; prep.Parameters.Clear(); prep.Parameters.AddWithValue(_NUM, indexId); prep.ExecuteNonQuery(); CreateOrDropTrigger(conn, schema, table, _BOOL); prep.CommandText = _STR + SCHEMA + _STR; while (_BOOL) { prep.Parameters.Clear(); prep.Parameters.AddWithValue(_NUM, indexId); int deleted = prep.ExecuteNonQuery(); if (deleted == _NUM) { break; } } prep.CommandText = _STR + SCHEMA + _STR + _STR + SCHEMA + _STR; while (_BOOL) {
public E Peek() { if (IsEmpty()) { return default(E); } return elements[_NUM]; }
public synchronized int Add(IAudioProcessor processor) { processors.Add(processor); BuildFinalProcessor(); return processors.IndexOf(processor); }
public ScriptBuilder Data(int index, byte[] data) { byte[] copy = new byte[data.Length]; Array.Copy(data, copy, data.Length); int opcode; if (data.Length == _NUM) { opcode = OP_0; } else if (data.Length == _NUM) { byte b = data[_NUM]; if (b >= _NUM && b <= _NUM) opcode = Script.EncodeToOpN(b); else opcode = _NUM; } else if (data.Length < OP_PUSHDATA1) { opcode = data.Length; } else if (data.Length < _NUM) { opcode = OP_PUSHDATA1; } else if (data.Length < _NUM) { opcode = OP_PUSHDATA2; } else { throw new InvalidOperationException(_STR); } return AddChunk(index, new ScriptChunk(opcode, copy)); }
public void Initialize(Dictionary<string, object> configParams) { string delimiterConfig = configParams.TryGetValue(PolicyConfig.RESOURCE_COMPARATOR_DELIMITER, out var delimiterValue) ? (string)delimiterValue : null; if (delimiterConfig != null) { this.delimiter = delimiterConfig; } string caseConfig = configParams.TryGetValue(PolicyConfig.RESOURCE_COMPARATOR_CASE_SENSITIVE, out var caseValue) ? (string)caseValue : null; if (caseConfig != null) { if (caseConfig.Equals(_STR)) { this.caseSensitive = _BOOL; } else if (caseConfig.Equals(_STR)) { this.caseSensitive = _BOOL; } else { this.caseSensitive = _BOOL; } } string wildcardConfig = configParams.TryGetValue(PolicyConfig.RESOURCE_COMPARATOR_WILDCARD, out var wildcardValue) ? (string)wildcardValue : null; if (wildcardConfig != null) { this.wildcard = wildcardConfig; } string oneLevelWildcardConfig = configParams.TryGetValue(PolicyConfig.RESOURCE_COMPARATOR_ONE_LEVE
protected void DeleteLeastUsedEntry() { try { poolLock.Lock(); BasicPoolEntry entry = freeConnections.Remove(); if (entry != null) { DeleteEntry(entry); } else if (log.IsDebugEnabled) { log.Debug(_STR); } } finally { poolLock.Unlock(); } }
private string ConvertLessThanOneThousand(int number) { string soFar; if (number % _NUM < _NUM) { soFar = numNames[number % _NUM]; number /= _NUM; } else { soFar = numNames[number % _NUM]; number /= _NUM; string s = number.ToString(); if (s.EndsWith(_STR) && !soFar.Equals(_STR)) soFar = _STR + soFar.Trim(); else if (soFar.Equals(_STR)) soFar = tensNames[number % _NUM] + soFar; else soFar = tensNames[number % _NUM] + _STR + soFar; number /= _NUM; } if (number == _NUM) return tensNames[number % _NUM] + soFar; if (number > _NUM) soFar = _STR + soFar; if (number == _NUM && !soFar.Equals(_STR)) number = _NUM; return numNames[number] + _STR + soFar; }
public static bool IsEmbeddedBase64Image(string uri) { return (uri != null && uri.StartsWith(_STR)); }
void ChangeState(int newState) { int oldState; lock (stateLock) { if (state == newState) return; oldState = state; state = newState; Monitor.PulseAll(stateLock); } SendStateChangeNotification(oldState, newState); }
private int ParseLinkLabel() { string m = Match(LINK_LABEL); return m == null ? _NUM : m.Length; }
private static void InsertCommentsInNode(Node node, List<Comment> commentsToAttribute) { if (commentsToAttribute.Count == _NUM) return; List<Node> children = node.GetChildrenNodes(); PositionUtils.SortByBeginPosition(children); foreach (Node child in children) { List<Comment> commentsInsideChild = new List<Comment>(); foreach (Comment c in commentsToAttribute) { if (PositionUtils.NodeContains(child, c, _doNotConsiderAnnotationsAsNodeStartForCodeAttribution)) { commentsInsideChild.Add(c); } } commentsToAttribute.RemoveAll(c => commentsInsideChild.Contains(c)); InsertCommentsInNode(child, commentsInsideChild); } List<Comment> attributedComments = new List<Comment>(); foreach (Comment comment in commentsToAttribute) { if (comment.IsLineComment()) { foreach (Node child in children) { if (child.GetEndLine() == comment.GetBeginLine()) { if (AttributeLineCommentToNodeOrChild(child, comment.AsLineComment())) { attributedComments.Add(comment); } } } } } Comment previousComment = null; attributedComments = new List<Comment>();
public static string ReadFileAsString(FileInfo file) { return ReadFileAsString(file.FullName); }
protected void OnException(WroRuntimeException e) { throw e; }
public synchronized void CheckAccess(LicenseCheckerCallback callback) { if (mPolicy.AllowAccess()) { Log.Info(TAG, _STR); callback.Allow(Policy.LICENSED); } else { LicenseValidator validator = new LicenseValidator(mPolicy, new NullDeviceLimiter(), callback, GenerateNonce(), mPackageName, mVersionCode); if (mService == null) { Log.Info(TAG, _STR); try { bool bindResult = mContext.BindService(new Intent(Convert.ToBase64String(Encoding.UTF8.GetBytes(_STR))), this, Bind.AutoCreate); if (bindResult) { mPendingChecks.Enqueue(validator); } else { Log.Error(TAG, _STR); HandleServiceConnectionError(validator); } } catch (SecurityException) { callback.ApplicationError(LicenseCheckerCallback.ERROR_MISSING_PERMISSION); } catch (Base64DecoderException e) { e.PrintStackTrace(); } } else { mPendingChecks.Enqueue(validator); RunChecks(); } } }
public void Close() { if (!isOpen) return; Log.Debug(TAG, _STR); loadingLock.Lock(); try { Save(); if (saveFileStream != null) { SavingHelper.Close(saveFileStream); saveFileStream = null; } savingDisabled = _BOOL; isOpen = _BOOL; Log.Information(TAG, _STR); } finally { loadingLock.Unlock(); } }
protected int SelectOperator() { lastUpdate++; if (lastUpdate >= UPDATE_WINDOW || probabilities == null) { lastUpdate = _NUM; probabilities = GetOperatorProbabilities(); } double rand = PRNG.NextDouble(); double sum = _NUM; for (int i = _NUM; i < operators.Count; i++) { sum += probabilities[i]; if (sum > rand) { return i; } } throw new InvalidOperationException(); }
public override List<string> ChunkString(string sToChunk) { int[] iRes = SplitPointsByDelimiterList(sToChunk, GetDelimiters()); string[] sRes = SplitStringByDelimiterPoints(sToChunk, iRes); return new List<string>(sRes); }
public static string ConvertBooleanArrToString(bool[] noDictionaryDimsMapping) { StringBuilder builder = new StringBuilder(); int index = _NUM; for (; index < noDictionaryDimsMapping.Length; index++) { builder.Append(noDictionaryDimsMapping[index]); builder.Append(CarbonCommonConstants.COMA_SPC_CHARACTER); } int lastIndex = builder.ToString().LastIndexOf(CarbonCommonConstants.COMA_SPC_CHARACTER); string str = -_NUM != lastIndex ? builder.ToString().Substring(_NUM, lastIndex) : builder.ToString(); return str; }
public ByteBuffer DecodeBufferToByteBuffer(string inputString) { return ByteBuffer.Wrap(DecodeBuffer(inputString)); }
public void Clear() { m_Model.Clear(); SetButtons(null); }
public static int Brighter(int c) { int r = Red(c), g = Green(c), b = Blue(c); int i = (int)(_NUM / (_NUM - scale)); if (r == _NUM && g == _NUM && b == _NUM) { return Rgba(i, i, i, Alpha(c)); } if (r > _NUM && r < i) r = i; if (g > _NUM && g < i) g = i; if (b > _NUM && b < i) b = i; return Rgba(Math.Min(_NUM, (int)(r / scale)), Math.Min(_NUM, (int)(g / scale)), Math.Min(_NUM, (int)(b / scale)), Alpha(c)); }
public void Shutdown() { running = _BOOL; if (networkThreads != null) { foreach (NetworkThread n in networkThreads) { n.Stopped = _BOOL; } } networkThreads = null; lock (LOCK) { Monitor.PulseAll(LOCK); } }
public SerialMessage(byte[] a) : base(a.ToString()) { SetBinary(true); }
public void Completed(int bytesTransferred, bool canInvokeDirect) { if (bytesTransferred == _NUM) { bytesTransferred = -_NUM; } else { UpdateBuffers(bytesTransferred); } ReleaseBuffers(); lock (result) { if (result.IsDone()) return; EnableReading(); if (scatteringRead) { result.SetResult((V)(long)bytesTransferred); } else { result.SetResult((V)(int)bytesTransferred); } } if (canInvokeDirect) { Invoker.InvokeUnchecked(result); } else { Invoker.Invoke(result); } }
public void WriteGolomb(int divisor, int value) { int q = value / divisor; for (int i = _NUM; i < q; i++) { WriteBit(_NUM); } WriteBit(_NUM); int r = value - q * divisor; int bit = _NUM - BitOperations.Log2((uint)(divisor - _NUM)); if (r < ((_NUM << bit) - divisor)) { bit--; } else { r += (_NUM << bit) - divisor; } for (; bit >= _NUM; bit--) { WriteBit((r >> bit) & _NUM); } }
public void AddForce(Force f) { if (f.IsItemForce()) { if (iforces.Length == iflen) { Force[] newf = new Force[iflen + _NUM]; Array.Copy(iforces, _NUM, newf, _NUM, iforces.Length); iforces = newf; } iforces[iflen++] = f; } if (f.IsSpringForce()) { if (sforces.Length == sflen) { Force[] newf = new Force[sflen + _NUM]; Array.Copy(sforces, _NUM, newf, _NUM, sforces.Length); sforces = newf; } sforces[sflen++] = f; } }
private static MetricValue NumberToMetricValue(Number elem) { if (elem == null) return MetricValue.EMPTY; string num = elem.ToString(); try { return MetricValue.FromIntValue(long.Parse(num)); } catch (FormatException ex) { } try { return MetricValue.FromDblValue(double.Parse(num)); } catch (FormatException ex) { } return MetricValue.FromStrValue(num); }
public bool Overlaps(string sequence, int start, int end) { if (start == MISSING || end == MISSING || end < start) { throw new ArgumentException(); } if (!mSequence.Equals(sequence)) { return _BOOL; } if ((mEnd != MISSING && start >= mEnd) || (end <= mStart)) { return _BOOL; } return _BOOL; }
public OkapiBM25(double k1, double b) { if (double.IsNaN(k1) || double.IsInfinity(k1) || k1 < _NUM) { throw new ArgumentException(_STR + k1); } this.k1 = k1; if (double.IsNaN(b) || b < _NUM || b > _NUM) { throw new ArgumentException(_STR + b); } this.b = b; }
protected void Prepare() { foreach (ProcessInfoParameter para in GetParameter()) { string name = para.GetParameterName(); if (para.GetParameter() == null) continue; else if (name.Equals(PARAM_M_Warehouse_ID)) p_M_Warehouse_ID = para.GetParameterAsInt(); else log.Log(Level.SEVERE, _STR + name); } p_C_Invoice_ID = GetRecord_ID(); }
public bool IsConfigured() { LOG.Debug(_STR + url); return url != null && !string.IsNullOrEmpty(url); }
public static string[] CommaDelimitedListToStringArray(string str) { return DelimitedListToStringArray(str, ","); }
public override byte[] ReadByteArray(string filePath, long offset, int length) { FileStream fileStream = UpdateCache(filePath); byte[] byteBuffer = Read(fileStream, length, offset); return byteBuffer; }
private static void FatalError(JNIEnvironment env, IntPtr messageAddress) { if (traceJNI) VM.sysWrite(_STR); RuntimeEntrypoints.CheckJNICountDownToGC(); try { VM.sysWrite(JNIGenericHelpers.CreateStringFromC(messageAddress)); Environment.Exit(EXIT_STATUS_JNI_TROUBLE); } catch (Exception unexpected) { if (traceJNI) Console.Error.WriteLine(unexpected); Environment.Exit(EXIT_STATUS_RECURSIVELY_SHUTTING_DOWN); } }
public bool MakeBackupFile(string directory, FileInfo file) { if (file == null) { log.Info(_STR); } else if (file.CanWrite) { string backupFullName = Path.Combine(directory, CreateFileNameWithDate(file.Name)); if (log.IsDebugEnabled) { log.Debug(_STR + backupFullName); } FileInfo backupFile = FindFile(backupFullName); if (backupFile != null) { if (backupFile.Delete()) { if (log.IsDebugEnabled) { log.Debug(_STR + backupFullName); } } } else { backupFile = new FileInfo(backupFullName); } DirectoryInfo parentDir = backupFile.Directory; if (!parentDir.Exists) { if (log.IsDebugEnabled) { log.Debug(_STR + parentDir.Name); } if (!parentDir.Create()) { log.Error(_STR); return _BOOL; } } if (file.MoveTo(backupFullName) != null) { if (log.IsDebugEnabled) { log.Debu
public void PushPair(int v1, int v2) { if (m_map == null) { m_map = new int[m_blocksize]; m_mapSize = m_blocksize; } else { if ((m_firstFree + _NUM) >= m_mapSize) { m_mapSize += m_blocksize; int[] newMap = new int[m_mapSize]; Array.Copy(m_map, _NUM, newMap, _NUM, m_firstFree); m_map = newMap; } } m_map[m_firstFree] = v1; m_map[m_firstFree + _NUM] = v2; m_firstFree += _NUM; }
public void RemoveStorage() { logger.Debug(_STR + dataDirSpec.GetAbsolutePath()); processHelper.Exec(_STR, rmCmd); }
private void AppendContainerConfig(DockerSlaveTemplate slaveTemplate, CreateContainerCmd containerConfig) { var labels = containerConfig.GetLabels(); if (labels == null) { labels = new Dictionary<string, string>(); } labels[DOCKER_CLOUD_LABEL] = GetDisplayName(); labels[DOCKER_TEMPLATE_LABEL] = slaveTemplate.GetId(); containerConfig.WithLabels(labels); }
public ReadOnlyGameSettings() { }
public void DeleteUsers(HashSet<string> users) { foreach (var userDN in users) { AMUser user = new AMUserImpl(base.Token, userDN); user.Delete(); } }
public override bool Accept(FileInfo file) { string name = file.Name; foreach (string wildcard in wildcards) { if (FilenameUtils.WildcardMatch(name, wildcard, caseSensitivity)) { return true; } } return false; }
public void RemoveRegion(Region r) { regions.Remove(r); }
public static void SilentCloseInputStream(Stream inputStream) { try { if (inputStream != null) { inputStream.Close(); } } catch (Exception e) { Log.Warning(LOG_TAG, _STR, e); } }
public override void StartElement(string uri, string localName, string qName, Attributes attributes) { if (requestID == null && localName.Equals(_STR)) { requestID = attributes.GetValue(_STR); } base.StartElement(uri, localName, qName, attributes); }
public void Stop(int timeout) { if (!isclosed.CompareAndSet(_BOOL, _BOOL)) { return; } List<WebSocket> socketsToClose; lock (connections) { socketsToClose = new List<WebSocket>(connections); } foreach (WebSocket ws in socketsToClose) { ws.Close(CloseFrame.GOING_AWAY); } lock (this) { if (selectorthread != null) { if (Thread.CurrentThread != selectorthread) { if (socketsToClose.Count > _NUM) { selectorthread.Join(timeout); } selectorthread.Interrupt(); selectorthread.Join(); } } } }
public Storage() : this(new File(GetTemporaryStorageDirectoryString())) { }
protected void CalculateItemWidth(CategoryPlot plot, Rectangle dataArea, int rendererIndex, CategoryItemRendererState state) { CategoryAxis domainAxis = GetDomainAxis(plot, rendererIndex); CategoryDataset dataset = plot.GetDataset(rendererIndex); if (dataset != null) { int columns = dataset.GetColumnCount(); int rows = state.GetVisibleSeriesCount() >= _NUM ? state.GetVisibleSeriesCount() : dataset.GetRowCount(); double space = _NUM; PlotOrientation orientation = plot.GetOrientation(); if (orientation == PlotOrientation.Horizontal) { space = dataArea.Height; } else if (orientation == PlotOrientation.Vertical) { space = dataArea.Width; } double maxWidth = space * GetMaximumItemWidth(); double categoryMargin = _NUM; double currentItemMargin = _NUM; if (columns > _NUM) { categoryMargin = domainAxis.GetCategoryMargin(); } if (rows > _NUM) { currentItemMargin = GetItemMargin(); } double used = space * (1 - domainAxis.GetLowerMargin() - domainAxis.GetUpperMargin() - categoryMargin - currentI
[RequiresPermission(Manifest.Permission.Camera)] public CameraSource Start() { lock (mCameraLock) { if (mCamera != null) { return this; } mCamera = CreateCamera(); if (Build.VERSION.SdkInt >= BuildVersionCodes.Honeycomb) { mDummySurfaceTexture = new SurfaceTexture(DUMMY_TEXTURE_NAME); mCamera.SetPreviewTexture(mDummySurfaceTexture); } else { mDummySurfaceView = new SurfaceView(mContext); mCamera.SetPreviewDisplay(mDummySurfaceView.Holder); } mCamera.StartPreview(); isSafeToTakePicture = true; mProcessingThread = new Thread(mFrameProcessor); mFrameProcessor.SetActive(true); mProcessingThread.Start(); } return this; }
public void AddBreakpointListener(BreakpointListener listener) { breakpointListeners.Add(listener); }
public void Update(Graphics g) { if (IsShowing()) { if (!(peer is LightweightPeer)) { g.ClearRect(_NUM, _NUM, width, height); } Paint(g); } }
private void ReleaseWaiters(int phase) { QNode q; Thread t; AtomicReference<QNode> head = (phase & _NUM) == _NUM ? evenQ : oddQ; while ((q = head.Value) != null && q.phase != (int)(root.state >> PHASE_SHIFT)) { if (head.CompareAndSet(q, q.next) && (t = q.thread) != null) { q.thread = null; LockSupport.Unpark(t); } } }
public static DateTimeFormatInfo ToDateTimeFormat(string dateTimeFormat, TimeZoneInfo timeZone, CultureInfo culture) { DateTimeFormatInfo df = null; if (string.IsNullOrEmpty(dateTimeFormat)) { df = new DateTimeFormatInfo { ShortDatePattern = "d", LongTimePattern = "t" }; // Example patterns } else { df = new DateTimeFormatInfo(); // You would typically set specific patterns based on dateTimeFormat // Here you would add the logic to handle the dateTimeFormat and culture } // Set TimeZoneInfo if applicable - note that .NET does not apply timezone directly to DateTimeFormatInfo return df; }
public static void PrintStackTrace(Exception e) { try { System.Diagnostics.Debug.Print(e.ToString()); } catch (Exception f) { e.PrintStackTrace(); } }
public override void VisitType(TypeElement e, Void p) { Scan(e.GetTypeParameters(), p); CheckCamelCase(e, _BOOL); base.VisitType(e, p); }
public Block(bool multiPush) : this(multiPush, _STR, null, new List<string> { _STR, _STR }) { }
private double Poisson(double x) { return Math.Exp(-m_Lambda + (x * Math.Log(m_Lambda)) - LogFac(x)); }
protected Expression FindExpression(string source) { if (source != null && source.Length > _NUM) { source = source.Trim(); if (source.Length == _NUM) { return null; } string leftSide = source; string rightSide = null; Connector op = FindOp(leftSide); if (op != null) { rightSide = op.GetRightSide(leftSide); leftSide = leftSide.Substring(_NUM, op.SourceLoc); Expression leftExpression = FindExpression(leftSide); Expression rightExpression = FindExpression(rightSide); if (leftExpression != null) { op.AddExpr(leftExpression); } if (rightExpression != null) { op.AddExpr(rightExpression); } return op; } op = FindMiniOp(leftSide); if (op != null) { rightSide = op.GetRightSide(leftSide); leftSide = leftSide.Substring(_NUM, op.SourceLoc); Expression leftExpression = FindExpression(leftSide); Expression rightExpression = FindExpression(rightSide); if (leftExpression != null) { op.AddExpr(leftExpression); } i
void PutChannel(StoredClientChannel channel) { PutChannel(channel, _BOOL); }
private void DeleteFilesInDir(DirectoryInfo dir) { foreach (FileInfo child in dir.GetFiles()) { child.Delete(); } }
public static void PipeInputToOutputStream(Stream input, FileInfo fileOut, bool ignoreErrors) { if (fileOut == null) { Logger.Error(_STR); if (!ignoreErrors) { throw new IOException(_STR); } } else { DirectoryInfo parent = fileOut.Directory; if (parent != null && !parent.Exists) { parent.Create(); } FileStream fileStream = null; try { fileStream = new FileStream(fileOut.FullName, FileMode.Create, FileAccess.Write); PipeInputToOutputStream(input, fileStream, _BOOL, ignoreErrors); } catch (IOException e) { fileStream?.Close(); if (fileStream != null) { try { fileStream.Close(); } catch (IOException ex) { Logger.Error(_STR, ex.Message); } } if (!ignoreErrors) { throw e; } } } }
[System.Diagnostics.CodeAnalysis.SuppressMessage("CodeQuality", "IDE0051:Remove unused private members", Justification = "_STR")] public void Release() { Debug.Assert(mProcessingThread.State == System.Threading.ThreadState.Stopped); mDetector.Release(); mDetector = null; }
public static string TrimLeadingCharacter(string str, char leadingCharacter) { if (string.IsNullOrEmpty(str)) { return str; } var sb = new StringBuilder(str); const int _NUM = 0; // Assuming _NUM is defined as 0 based on its usage in the Java code while (sb.Length > _NUM && sb[_NUM] == leadingCharacter) { sb.Remove(_NUM, 1); } return sb.ToString(); }
public E Take() { var lockObj = this.lock; lockObj.LockInterruptibly(); long t = Now(); TenantQueue.Item item = null; try { for (;;) { TenantQueue q = NextQueue(t); if (q == null) { available.Await(); } else { long delay = q.Next - t; if (delay <= _NUM) { item = q.Poll(t); return item == null ? default(E) : item.Element; } else if (leader != null) { available.Await(); } else { Thread currentThread = Thread.CurrentThread; leader = currentThread; try { available.AwaitNanos(delay); } finally { if (leader == currentThread) leader = null; } } } t = System.nanoTime(); } } finally { if (leader == null && HasNext()) available.Signal(); lockObj.Unlock(); Done(item, t); }
public bool ThreadSafeTimeout(long delayTime, TimeUnit unit, Action action) { bool scheduled = false; Thread currentThread = Thread.CurrentThread; if (currentThread.Equals(dutyThread)) { timerWheel.NewTimeout(delayTime, unit, null); } else { scheduled = actions.TryAdd(null); } return scheduled; }
void Submit(ProcessAndDisplayImageTask task) { InitExecutorsIfNeed(); taskExecutorForCachedImages.Execute(task); }
void AddAttributeSelection(string exp) { int index = exp.IndexOf(_STR); string value = null; int constraint = AttString.EQUALS; if (index != -_NUM) { if (index == _NUM) { SetTagId(TAG_CSS_ILLEGAL_SELECTOR); return; } int opIndex = index; char c = exp[index - _NUM]; if (c == _STR) { constraint = AttString.CONTAINS_WORD; opIndex--; } else if (c == _STR) { constraint = AttString.BEGINS_WITH; opIndex--; } value = exp.Substring(index + _NUM); if ((value.StartsWith(_STR) && value.EndsWith(_STR)) || (value.StartsWith(_STR) && value.EndsWith(_STR))) { value = value.Substring(_NUM, value.Length - _NUM); } exp = exp.Substring(_NUM, opIndex); } if (attributeSelections == null) { attributeSelections = new List<AttString>(); } attributeSelections.Add(new AttString(exp, constraint, value)
private void CreateLeftOver() { int lineLengthBytes = currentLastBytePos + _NUM; if (lineLengthBytes > _NUM) { leftOver = new byte[lineLengthBytes]; Array.Copy(data, _NUM, leftOver, _NUM, lineLengthBytes); } else { leftOver = null; } currentLastBytePos = -_NUM; }
public Value Sample() { int index = sampler.Next(actionValues.Count); if (actionValuesAsArray == null) { actionValuesAsArray = actionValues.ToArray(); } return actionValuesAsArray[index]; }
public override void ChannelClosed(ChannelHandlerContext channelHandlerContext, ChannelStateEvent channelStateEvent) { currConns.DecrementAndGet(); channelGroup.Remove(channelHandlerContext.Channel); }
private static void ConfigureHeadLessSimulation() { System.SetProperty(_STR, _STR); GAMA.SetHeadLessMode(); }
public static bool IsNextWindow(Uri id) { return id == null || NEXT.Equals(id); }
public static bool IsVisible(Type clazz, ClassLoader classLoader) { if (classLoader == null) { return _BOOL; // Assuming _BOOL is a predefined boolean variable } try { Type actualClass = classLoader.LoadClass(clazz.FullName); return clazz == actualClass; } catch (ClassNotFoundException ex) { return _BOOL; // Assuming _BOOL is a predefined boolean variable } }
public byte[] Remove(QueueEvent queueEvent) { TimerContext time = stats.Time(dir + _STR); try { string path = queueEvent.GetId(); string responsePath = dir + _STR + response_prefix + path.Substring(path.LastIndexOf(_STR) + _NUM); if (zookeeper.Exists(responsePath, _BOOL)) { zookeeper.SetData(responsePath, queueEvent.GetBytes(), _BOOL); } byte[] data = zookeeper.GetData(path, null, null, _BOOL); zookeeper.Delete(path, -_NUM, _BOOL); return data; } finally { time.Stop(); } }
public PropertyXMLBuilder(ServiceSchema serviceSchema, AMModel model, HashSet<AttributeSchema> attributeSchemas) { this.model = model; this.serviceName = serviceSchema.GetServiceName(); GetServiceResourceBundle(serviceSchema); if (serviceBundle != null) { mapTypeToAttributeSchema = new Dictionary<string, HashSet<AttributeSchema>>(attributeSchemas.Count * _NUM); mapTypeToAttributeSchema.Add(NULL_TYPE, attributeSchemas); } }
public bool Is(string arg, bool allowAbbr) { if (name.Equals(arg, StringComparison.OrdinalIgnoreCase)) { return _BOOL; } if (allowAbbr && arg.Length == _NUM) { if (arg[_NUM] == c) { return _BOOL; } } return _BOOL; }
public static void AddAll(List<string> list, string[] array) { foreach (string item in array) { list.Add(item); } }
void Remove(SuperCardToast superCardToast) { mList.Remove(superCardToast); }
public void TestVmstatHeaderAndDataParse() { var pattern = VMStatCollector.Pattern; var header = _STR; var data = _STR; var fields = pattern.Split(header.Trim(), _NUM); for (int i = _NUM; i < fields.Length; i++) { if (log.IsInfoEnabled) log.Info(_STR + i + _STR + fields[i] + _STR); } AssertField(header, fields, _NUM, _STR); AssertField(header, fields, _NUM, _STR); AssertField(header, fields, _NUM, _STR); AssertField(header, fields, _NUM, _STR); AssertField(header, fields, _NUM, _STR); AssertField(header, fields, _NUM, _STR); AssertField(header, fields, _NUM, _STR); AssertField(header, fields, _NUM, _STR); fields = pattern.Split(data.Trim(), _NUM); AssertField(data, fields, _NUM, _STR); AssertField(data, fields, _NUM, _STR); AssertField(data, fields, _NUM, _STR); AssertField(da
public static SecretKeys GenerateKeyFromPassword(string password, string salt) { return GenerateKeyFromPassword(password, Convert.FromBase64String(salt)); }
private string PartiallyEscapeAssertionValue(string assertionValue) { StringBuilder sb = new StringBuilder(assertionValue.Length); for (int j = _NUM; j < assertionValue.Length; j++) { char c = assertionValue[j]; if (c == _STR) { sb.Append(c); } else { sb.Append(Filter.EscapeAssertionValue(c.ToString())); } } return sb.ToString(); }
protected bool FilterLeftoverView(ViewGroup parent, int childIndex) { parent.RemoveAt(childIndex); return _BOOL; }
protected bool DeclAlreadyDeclared(string prefix) { int startDecls = m_contextIndexes.Peek(); var prefixMappings = m_prefixMappings; int nDecls = prefixMappings.Count; for (int i = startDecls; i < nDecls; i += _NUM) { string prefixDecl = (string)prefixMappings[i]; if (prefixDecl == null) continue; if (prefixDecl.Equals(prefix)) return _BOOL; } return _BOOL; }
public override void Step(MessageLogger logger) { try { AddAgent(); env.Step(); } catch (Exception e) { Console.WriteLine(e); } }
public static AttackStatus CalculatePhysicalStatus(Creature attacker, Creature attacked, bool isMainHand) { return CalculatePhysicalStatus(attacker, attacked, isMainHand, _NUM, _NUM, _BOOL, _BOOL); }
public T VertexProcessor(BiConsumer<Vertex, Dictionary<string, object>> vertexProcessor) { this.vertexProcessor = vertexProcessor != null ? (BiConsumer<Vertex, Dictionary<string, object>>)vertexProcessor : null; return (T)this; }
private readonly object lockObject = new object(); public bool Release() { lock (lockObject) { Debug.Log(_STR); if (state == State.BUSY) { state = State.IDLE; idleSince = DateTimeOffset.Now.ToUnixTimeMilliseconds(); return true; } else { return true; } } }
private void ValidateReplicaAvailability(Slice slice, string shard, string collectionName, int count) { if (slice != null) { var allReplicasForShard = slice.GetReplicas(); if (allReplicasForShard == null) { throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, _STR + shard + _STR + collectionName); } if (allReplicasForShard.Count == _NUM) { throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, _STR + shard + _STR + collectionName + _STR); } if (allReplicasForShard.Count <= count) { throw new SolrException(SolrException.ErrorCode.BAD_REQUEST, _STR + shard + _STR + collectionName + _STR + count + _STR + allReplicasForShard.Count + _STR); } } }
public ClassDeclaration AsClass() { throw new NotSupportedException(string.Format(_STR, this)); }
private static string PartitionSpecToName(Dictionary<string, string> spec) { StringBuilder sb = new StringBuilder(); foreach (var entry in spec) { if (sb.Length != _NUM) { sb.Append(_STR); } sb.Append(entry.Key + _STR + entry.Value); } return sb.ToString(); }
public static StreamReader ToInputStream(CharSequence input, Encoding encoding) { return new StreamReader(new MemoryStream(Encoding.GetBytes(input.ToString())), encoding); }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public void TestHitEndAfterFind() { HitEndTest(_BOOL, _STR, _STR, _STR, _BOOL); HitEndTest(_BOOL, _STR, _STR, _STR, _BOOL); HitEndTest(_BOOL, _STR, _STR, _STR, _BOOL); HitEndTest(_BOOL, _STR, _STR, _STR, _BOOL); HitEndTest(_BOOL, _STR, _STR, _STR, _BOOL); HitEndTest(_BOOL, _STR, _STR, _STR, _BOOL); string floatRegex = GetHexFloatRegex(); HitEndTest(_BOOL, _STR, floatRegex, BitConverter.DoubleToString(-_NUM), _BOOL); HitEndTest(_BOOL, _STR, floatRegex, _STR + BitConverter.DoubleToString(double.NaN) + _STR, _BOOL); HitEndTest(_BOOL, _STR, floatRegex, BitConverter.DoubleToString(-_NUM) + _STR, _BOOL); HitEndTest(_BOOL, _STR, floatRegex, _STR + BitConverter.DoubleToString(double.MinValue) + _STR, _BOOL);
[HttpDelete("{chequeID}")] [Transaction] public void DeleteCheque(long chequeID) { chequeRepository.Delete(chequeID); photoRepository.DeleteByChequeId(chequeID.ToString()); }
public static double PartialCorrelation(TetradMatrix submatrix) { try { TetradMatrix inverse = submatrix.Inverse(); double a = -_NUM * inverse.Get(_NUM, _NUM); double v0 = inverse.Get(_NUM, _NUM); double v1 = inverse.Get(_NUM, _NUM); double b = Math.Sqrt(v0 * v1); return a / b; } catch (Exception e) { Console.WriteLine(e); return double.NaN; } }
public void AddColumn(string name, string expr) { Expression ex = ExpressionParser.Parse(expr); Exception t = ExpressionParser.GetError(); if (t != null) { throw new InvalidOperationException(t.Message, t); } else { AddColumn(name, ex); } }
public void AddPutAndGetTimeNanos(long duration) { putTimeNanos.AddAndGet(duration); getTimeNanos.AddAndGet(duration); if (delegate != null) { delegate.AddPutAndGetTimeNanos(duration); } }
private float CheckSaturationValid(float val) { float tempval = val; if (val > _NUM) { tempval = _NUM; } if (val < _NUM) { tempval = _NUM; } return tempval; }
public string Parse(string cellStr, int layoutConstant) { return cellStr.Split(LayoutConstants.CELL_PTRN)[layoutConstant]; }
public void PseudoPropertyChange(string propName, object oldValue, object newValue) { if (log.IsDebugEnabled) { log.Debug(_STR + GetSystemName() + _STR + propName + _STR + newValue.ToString()); } FirePropertyChange(propName, oldValue, newValue); }
public static string RunCmd(DirectoryInfo directory, List<string> cmd, string errorMessage) { var processStartInfo = new ProcessStartInfo { FileName = cmd[0], Arguments = string.Join(" ", cmd.Skip(1)), WorkingDirectory = directory.FullName, RedirectStandardOutput = true, RedirectStandardError = true, UseShellExecute = false, CreateNoWindow = true }; using (var process = new Process { StartInfo = processStartInfo }) { var outputBuilder = new StringBuilder(); process.Start(); using (var reader = process.StandardOutput) { string line; while ((line = reader.ReadLine()) != null) { logger.Info(line); outputBuilder.AppendLine(line); } } process.WaitForExit(); int exitValue = process.ExitCode; if (exitValue != 0) { throw new Exception($"{errorMessage} {exitValue} {outputBuilder.ToString()}"); } return outputBuilder.ToString(); } }
public override SelectableChannel SelectableChannel() { return socketChannel; }
public void TestConstructorIIIIII() { DateTime d1 = new DateTime(_NUM, _NUM, _NUM, _NUM, _NUM, _NUM); DateTime d2 = new DateTime(_NUM + TimeZoneInfo.Local.GetAdjustmentRules()[0].DaylightDelta.Ticks + _NUM * _NUM * _NUM + _NUM * _NUM + _NUM); Assert.True(d1.Equals(d2), _STR); }
public static string FromTag(ByteArrayTag tag) { StringBuilder builder = new StringBuilder(); builder.Append(ARRAY_START); bool start = true; foreach (byte value in tag.GetValue()) { ByteTag b = new ByteTag(value); if (start) { start = false; } else { builder.Append(ELEMENT_SEPERATOR); } builder.Append(FromTag(b)); } builder.Append(ARRAY_END); return builder.ToString(); }
protected override void AddChooserFilters(OpenFileDialog chooser) { var filter = new FileDialogCustomFilter(Bundle.GetMessage(_STR, _STR), _STR, _STR); chooser.Filters.Add(new FileDialogCustomFilter(_STR, _STR)); chooser.Filters.Add(new FileDialogCustomFilter(_STR, _STR)); chooser.Filters.Add(filter); chooser.FilterIndex = chooser.Filters.Count - 1; // Set the filter to the last one added. }
private static byte[] WindowsRegEnumValue1(int hKey, int valueIndex, int maxValueNameLength) { byte[] result = WindowsRegEnumValue(hKey, valueIndex, maxValueNameLength); if (result != null) { return result; } else { long sleepTime = INIT_SLEEP_TIME; for (int i = _NUM; i < MAX_ATTEMPTS; i++) { try { Thread.Sleep((int)sleepTime); } catch (ThreadInterruptedException e) { return result; } sleepTime *= _NUM; result = WindowsRegEnumValue(hKey, valueIndex, maxValueNameLength); if (result != null) { return result; } } } return result; }
public static DateTime ParseRfc822(string str) { DateTime date; lock (dateTimeFormat822) { try { date = dateTimeFormat822.Parse(str); } catch (FormatException e) { throw new FormatException(e.Message); } } return date; }
public void TestEmptyIndex() { IndexSearcher empty = new IndexSearcher(new MultiReader()); Query query = new TermQuery(new Term(_STR, _STR)); Sort sort = new Sort(); TopDocs td = empty.Search(query, _NUM, sort, _BOOL, _BOOL); Assert.AreEqual(_NUM, td.TotalHits); sort.SetSort(SortField.FIELD_DOC); td = empty.Search(query, _NUM, sort, _BOOL, _BOOL); Assert.AreEqual(_NUM, td.TotalHits); sort.SetSort(new SortField(_STR, SortFieldType.INT), SortField.FIELD_DOC); td = empty.Search(query, _NUM, sort, _BOOL, _BOOL); Assert.AreEqual(_NUM, td.TotalHits); sort.SetSort(new SortField(_STR, SortFieldType.STRING, _BOOL), SortField.FIELD_DOC); td = empty.Search(query, _NUM, sort, _BOOL, _BOOL); Assert.AreEqual(_NUM, td.TotalHits); sort.SetSort(new SortField(_STR, SortFieldType.STRING_VAL, _BOOL), SortField.FIELD_DOC); td = empty.Search(query, _NUM, so
public Model ValidateModel(Dataset dataset, Uri shapesGraphUri, Resource minSeverity, bool validateShapes, Func<RDFNode, string> labelFunction, ProgressMonitor monitor) { if (dataset.GetDefaultModel() == null) { throw new ArgumentException(_STR); } Model shapesModel = dataset.GetNamedModel(shapesGraphUri.ToString()); if (monitor != null) { monitor.SubTask(_STR); } List<Property> constraintProperties = SHACLUtil.GetAllConstraintProperties(validateShapes); Dictionary<Resource, List<SHConstraint>> map = BuildShape2ConstraintsMap(shapesModel, dataset.GetDefaultModel(), constraintProperties, validateShapes); if (monitor != null) { monitor.SubTask(_STR); } if (monitor != null) { monitor.BeginTask(_STR + map.Count + _STR, map.Count); } Model results = JenaUtil.CreateMemoryModel(); results.SetNsPrefixes(dataset.GetDefaultModel()); foreach (Resource shape in map.Keys) { foreach (SHConstraint constraint in map[shape]) { ValidateConstraintForShape(dataset, shapesGraphUri, minSeverity, constraint, shape, results, la
public PdfPage AddAnnotation(PdfAnnotation annotation) { return AddAnnotation(-_NUM, annotation, _BOOL); }
public static string FindPreferredIDP(string realm, HttpRequest request) { if (request == null) { return null; } string succinctID = request.Query[IFSConstants.PROVIDER_ID_KEY]; if (string.IsNullOrEmpty(succinctID) || succinctID.Length == _NUM) { debug.Message(_STR); return null; } succinctID = succinctID.Trim(); string preferredSuccinctId = null; var tokens = succinctID.Split(new[] { _STR }, StringSplitOptions.None); for (int i = 0; i < tokens.Length; i++) { preferredSuccinctId = tokens[i]; if (preferredSuccinctId.Length < _NUM && (i + 1) < tokens.Length) { preferredSuccinctId += _STR + tokens[i + 1]; } } preferredSuccinctId = SAMLUtils.ByteArrayToString(Convert.FromBase64String(preferredSuccinctId)); return GetProviderIDFromSuccinctID(realm, preferredSuccinctId); }
private void CheckAndCreateDirectory(string directoryName) { try { var dir = new DirectoryInfo(directoryName); if (!dir.Exists && dir.Create() != null) { _logger.Debug(_STR); } } catch (Exception ex) { _logger.Error(_STR, ex.Message); } }
public void AssertValuesWith(params Action<T>[] expectations) { if (!valuesStorage) { throw new InvalidOperationException(_STR); } int expectedValueCount = expectations.Length; if (expectedValueCount != values.Count) { throw new AssertionException(_STR + expectedValueCount + _STR + valueCount); } for (int i = _NUM; i < expectedValueCount; i++) { Action<T> consumer = expectations[i]; T actualValue = values[i]; consumer(actualValue); } }
private bool JournalRebuildRequired() { const int REDUNDANT_OP_COMPACT_THRESHOLD = _NUM; return redundantOpCount >= REDUNDANT_OP_COMPACT_THRESHOLD && redundantOpCount >= lruEntries.Count; }
public int FindEventPositionNearestTime(Time time, long id) { if (mRowInfo == null) { return _NUM; } long millis = time.ToMillis(_BOOL); long minDistance = int.MaxValue; long idFoundMinDistance = int.MaxValue; int minIndex = _NUM; int idFoundMinIndex = _NUM; int eventInTimeIndex = -_NUM; int allDayEventInTimeIndex = -_NUM; int allDayEventDay = _NUM; int minDay = _NUM; bool idFound = _BOOL; int len = mRowInfo.Count; for (int index = _NUM; index < len; index++) { RowInfo row = mRowInfo[index]; if (row.mType == TYPE_DAY) { continue; } if (row.mEventId == id) { if (row.mEventStartTimeMilli == millis) { return index; } long distance = Math.Abs(millis - row.mEventStartTimeMilli); if (distance < idFoundMinDistance) { idFoundMinDistance = distance;
public void PrintLine(float v) { string s = v.ToString(); Write(s, _NUM, s.Length); PrintLine(); }
private static TranslationResult ExtractRegister(ITranslationEnvironment environment, long offset, string subRegister) { var instructions = new List<ReilInstruction>(); string parentRegister = GetParentRegister(subRegister); OperandSize archSize = environment.GetArchitectureSize(); if (IsHigher8BitRegister(subRegister)) { string maskResult = environment.GetNextVariableString(); string shiftResult = environment.GetNextVariableString(); instructions.Add(ReilHelpers.CreateAnd(offset, archSize, parentRegister, OperandSize.WORD, _STR, OperandSize.WORD, maskResult)); instructions.Add(ReilHelpers.CreateBsh(offset + _NUM, OperandSize.WORD, maskResult, OperandSize.WORD, _STR, OperandSize.BYTE, shiftResult)); return new TranslationResult(shiftResult, OperandSize.BYTE, TranslationResultType.REGISTER, null, instructions, offset); } else { OperandSize subRegisterSize = GetRegisterSize(subRegister); string mask = string.ValueOf(TranslationHelpers.GetAllBitsMask(subRegisterSize)); string result = environment.GetNextVariableString(); instructions.Add(ReilHelpers.CreateAnd(offset, archSize, parentRegister, subRegisterS
public void OnLoginFailure(Dictionary<string, string> requestParamsMap, HttpRequest req, HttpResponse res) { Debug.Message(_STR); }
public Interceptor[] BuildMethodInterceptors(MethodInfo method) { var before = method.GetCustomAttribute<Interceptors>(); return before != null ? CreateInterceptors(before) : NULL_INTERCEPTOR_ARRAY; }
protected string BuildQualifierRegex(string qualifierValue) { StringBuilder sb = new StringBuilder(); sb.Append(_STR); sb.Append(qualifierValue); sb.Append(_STR); return sb.ToString(); }
private static void LookForChanges(DataObject left, DataObject right, Dictionary<string, Change> changes, HashSet<string> included, HashSet<string> excluded, HashSet<string> contained) { Type refClass = left.GetType(); MethodInfo[] methods = refClass.GetMethods(); foreach (MethodInfo method in methods) { bool contain = false; NameAttribute nameAnn = (NameAttribute)Attribute.GetCustomAttribute(method, typeof(NameAttribute)); if (nameAnn == null) continue; string key = nameAnn.Value; if (contained != null && contained.Contains(key)) { contain = true; } else if (included != null && !included.Contains(key)) { continue; } if (excluded.Contains(key)) { continue; } Type type = method.ReturnType; try { object obja = method.Invoke(left, null); object objb = method.Invoke(right, null); if (type == typeof(StringSet)) { if (contain) { AnalyzeNewStringSetContainsOldStringSetValues((StringSet)obja, (StringSet)objb, key, changes); }
static void RemoveAllPhis(IR ir) { for (Instruction s = ir.FirstInstructionInCodeOrder(), sentinel = ir.LastInstructionInCodeOrder(), nextInstr = null; s != sentinel; s = nextInstr) { nextInstr = s.NextInstructionInCodeOrder(); if (Phi.Conforms(s)) { s.Remove(); } } }
protected int CountToken(string token, string target) { int tokenIndex = -1; int count = 0; while (tokenIndex != -1) { tokenIndex = target.IndexOf(token, tokenIndex + 1); if (tokenIndex > -1) { count++; } } return count; }
private Dictionary<TestCase, HashSet<TestFitnessFunction>> InitializeCoverageMapFromTests(List<TestCase> tests) { var testToGoals = new Dictionary<TestCase, HashSet<TestFitnessFunction>>(); foreach (var test in tests) { testToGoals[test] = FilterSupportedGoals(new HashSet<TestFitnessFunction>(test.GetCoveredGoals())); } return testToGoals; }
public Interceptor[] BuildRouteInterceptors(Interceptor[] defaultInters, Interceptor[] resourceInters, Type resourceClass, Interceptor[] methodInters, MethodInfo method) { List<Interceptor> allInters = new List<Interceptor>(); foreach (Interceptor defaultInter in defaultInters) { allInters.Add(defaultInter); } foreach (Interceptor resourceInter in resourceInters) { allInters.Add(resourceInter); } foreach (Interceptor methodInter in methodInters) { allInters.Add(methodInter); } Type[] resourceClears = GetResourceClears(resourceClass); Type[] methodClears = GetMethodClears(method); if ((resourceClears != null && resourceClears.Length > _NUM) || (methodClears != null && methodClears.Length > _NUM)) { for (int i = _NUM; i < allInters.Count; i++) { i = ClearInterceptor(allInters, resourceClears, i); i = ClearInterceptor(allInters, methodClears, i); } } return
public static bool CheckGMLFootprint(string footprint) { try { var configuration = new GMLConfiguration(); var parser = new Parser(configuration); var geom = (Geometry)parser.Parse(new InputSource(new StringReader(footprint))); if (!geom.IsEmpty() && !geom.IsValid()) { logger.Error(_STR); return _BOOL; } } catch (Exception e) { logger.Error(_STR + e.Message); return _BOOL; } return _BOOL; }
public static void Main(string[] args) { double preBuffer = double.Parse(args[_NUM]); double postBuffer = double.Parse(args[_NUM]); Run(args[_NUM], args[_NUM], args[_NUM], args[_NUM], preBuffer, postBuffer); }
public static double Quantile(double p, double k, double theta, double shift) { return Math.Exp(GammaDistribution.Quantile(p, k, theta)) + shift; }
public static CipherParameters MakePBEMacParameters(BCPBEKey pbeKey, AlgorithmParameterSpec spec) { if (spec == null || !(spec is PBEParameterSpec)) { throw new ArgumentException(_STR); } PBEParameterSpec pbeParam = (PBEParameterSpec)spec; PBEParametersGenerator generator = MakePBEGenerator(pbeKey.GetType(), pbeKey.GetDigest()); byte[] key = pbeKey.GetEncoded(); CipherParameters param; if (pbeKey.ShouldTryWrongPKCS12()) { key = new byte[_NUM]; } generator.Init(key, pbeParam.GetSalt(), pbeParam.GetIterationCount()); param = generator.GenerateDerivedMacParameters(pbeKey.GetKeySize()); for (int i = _NUM; i != key.Length; i++) { key[i] = _NUM; } return param; }
public OrionEditorInit(TextEditorConfiguration configuration, CodeAssistantFactory codeAssistantFactory, QuickAssistAssistant quickAssist, OrionEditorPresenter textEditor) { this.configuration = configuration; this.codeAssistantFactory = codeAssistantFactory; this.quickAssist = quickAssist; this.textEditor = textEditor; }
unsafe void PutByte(int offset, byte value) { *((byte*)(address + offset)) = value; }
public void AddValidationError(string error) { validationErrors.Add(error); }
public static void ParseOptionSettingTo(string optionSetting, Dictionary<string, string> dst) { int eqIndex = optionSetting.IndexOf('='); if (eqIndex == -1) { throw new InternalError("Invalid option setting: " + optionSetting); } dst[optionSetting.Substring(0, eqIndex)] = optionSetting.Substring(eqIndex + 1); }
public BigInteger GenerateClientCredentials(byte[] salt, byte[] identity, byte[] password) { this.x = SRP6Util.CalculateX(digest, N, salt, identity, password); this.a = SelectPrivateValue(); this.A = BigInteger.ModPow(g, a, N); return A; }
public void Build(SolrCore core, SolrIndexSearcher searcher) { LOG.Info(_STR + name + _STR); dictionary = dictionaryFactory.Create(core, searcher); lookup.Build(dictionary); if (storeDir != null) { File target = GetStoreFile(); using (FileStream fileStream = new FileStream(target.FullName, FileMode.Create)) { if (!lookup.Store(fileStream)) { LOG.Error(_STR); } else { LOG.Info(_STR + target.FullName); } } } }
public void Start(string json) { guidedTourSteps.Clear(); var configuration = dtoFactory.CreateDtoFromJson<GuidedTourConfiguration>(json); log.SetDebugMode(configuration.GetDebugMode()); this.guidedTourSteps = configuration.GetSteps(); this.tourName = configuration.GetName(); if (string.IsNullOrEmpty(this.tourName)) { tourName = _STR; } this.hasWelcomeStep = configuration.GetHasWelcomeStep(); StartTour(); }
private void Connect() { var jmxUrl = new JMXServiceURL(string.Format(fmtUrl, host, port)); var env = new Dictionary<string, object>(); if (username != null) { var creds = new string[] { username, password }; env[JMXConnector.CREDENTIALS] = creds; } env[_STR] = GetRMIClientSocketFactory(); jmxc = JMXConnectorFactory.Connect(jmxUrl, env); mbeanServerConn = jmxc.GetMBeanServerConnection(); try { ObjectName name = new ObjectName(ssObjName); ssProxy = JMX.NewMBeanProxy(mbeanServerConn, name, typeof(StorageServiceMBean)); name = new ObjectName(MessagingService.MBEAN_NAME); msProxy = JMX.NewMBeanProxy(mbeanServerConn, name, typeof(MessagingServiceMBean)); name = new ObjectName(StreamManagerMBean.OBJECT_NAME); streamProxy = JMX.NewMBeanProxy(mbeanServerConn, name, typeof(StreamManagerMBean)); name = new ObjectName(CompactionManager.MBEAN_OBJECT_NAME); compactionProx
private static void RunRandomTest(int wordLength, int bytePadding, int wordCount) { long seed = RandomLong(); Random random = new Random((int)seed); Random verificationRandom = new Random((int)seed); long wordMask; if (wordLength == _NUM) { wordMask = ~_NUM; } else { wordMask = (_NUM << wordLength) - _NUM; } var serializer = new BigEndianAscendingWordSerializer(wordLength, wordCount, bytePadding); for (int i = _NUM; i < wordCount; i++) { long value = random.NextInt64() & wordMask; serializer.WriteWord(value); } byte[] bytes = serializer.GetBytes(); var deserializer = new BigEndianAscendingWordDeserializer(wordLength, bytePadding, bytes); Assert.AreEqual(deserializer.TotalWordCount(), wordCount); for (int i = _NUM; i < wordCount; i++) { Assert.AreEqual(deserializer.ReadWord(), (verificationRandom.NextInt64() & wordMask)); } }
public void AddListener(T listener) { if (listener == null) { throw new ArgumentNullException(nameof(listener)); } listeners.Add(listener); }
public static MaildirMessageName CreateUniqueName(MaildirFolder parentFolder, long size) { string timestamp = DateTimeOffset.Now.ToUnixTimeMilliseconds().ToString(); timestamp = timestamp.Substring(_NUM, timestamp.Length - _NUM); StringBuilder uniquePart = new StringBuilder(); uniquePart.Append(new Random().Next(int.MinValue, int.MaxValue).ToString("x")); // Convert to hex string uniquePart.Append(timestamp.Substring(timestamp.Length - _NUM)); uniquePart.Append(processName); uniquePart.Append(GetNextDeliveryNumber()); string sizeString = _STR + size.ToString(); string fullName = timestamp + _STR + uniquePart.ToString() + _STR + currentHostname + sizeString; MaildirMessageName uniqueName = new MaildirMessageName(parentFolder, fullName); uniqueName.Timestamp = timestamp; uniqueName.UniqueString = uniquePart.ToString(); uniqueName.Hostname = currentHostname; uniqueName.SizeString = sizeString; uniqueName.IsSplit = _BOOL; uniqueName.Size = size; return uniqueName; }
private float ClampMagnitude(float value, float absMin, float absMax) { float absValue = Math.Abs(value); if (absValue < absMin) return _NUM; if (absValue > absMax) return value > 0 ? absMax : -absMax; return value; }
public override void HandleClick(int x, int y, PlotRenderingInfo info) { }
private void AdjustBCIndex(Instruction barrier) { NormalMethod source = barrier.Position().Method; if (source.IsForOsrSpecialization()) { barrier.AdjustBytecodeIndex(-source.GetOsrPrologueLength()); } }
public override string ToString() { StringBuilder result = new StringBuilder(_NUM); result.Append(_STR); result.Append(_STR); return result.ToString(); }
public static long[] Interpose(long[] vector, int vectorLen, int offset, int len) { long[] updated = Create(vectorLen + len); int idx = offset >> _NUM; Array.Copy(vector, _NUM, updated, _NUM, idx); if (idx < vector.Length) { int delta = offset & _NUM; updated[idx] |= vector[idx] & MaskBelow(delta); } Copy(vector, offset, updated, offset + len, vectorLen - offset); return updated; }
public static DirectoryInfo CreateTemporaryDirectory(string prefix) { while (true) // Replace _BOOL with true for an infinite loop as an example { string candidateName = prefix + new Random().Next(); DirectoryInfo result = new DirectoryInfo(Path.Combine(Path.GetTempPath(), candidateName)); if (result.Create() != null) { return result; } } }
public async Task SynchronizeAllAuthDataAsync() { Dictionary<string, Dictionary<string, string>> authData; lock (mutex) { if (!IsCurrentUser()) { return Task.CompletedTask; } authData = GetAuthData(); } List<Task> tasks = new List<Task>(authData.Count); foreach (var authType in authData.Keys) { tasks.Add(SynchronizeAuthDataAsync(authType)); } await Task.WhenAll(tasks); }
public static Element CreateElementInEncryptionSpace(Document doc, string elementName) { if (doc == null) { throw new InvalidOperationException(_STR); } if (string.IsNullOrEmpty(xencPrefix)) { return doc.CreateElementNS(EncryptionConstants.EncryptionSpecNS, elementName); } return doc.CreateElementNS(EncryptionConstants.EncryptionSpecNS, xencPrefix + _STR + elementName); }
void ScrapActiveViews() { View[] activeViews = mActiveViews; bool multipleScraps = mViewTypeCount > _NUM; List<View> scrapViews = mCurrentScrap; int count = activeViews.Length; for (int i = count - _NUM; i >= _NUM; i--) { View victim = activeViews[i]; if (victim != null) { LayoutParams lp = (LayoutParams)victim.GetLayoutParams(); activeViews[i] = null; bool scrapHasTransientState = ViewCompat.HasTransientState(victim); int viewType = lp.ViewType; if (!ShouldRecycleViewType(viewType) || scrapHasTransientState) { if (viewType != ITEM_VIEW_TYPE_HEADER_OR_FOOTER || scrapHasTransientState) { RemoveDetachedView(victim, _BOOL); } if (scrapHasTransientState) { if (mTransientStateViews == null) { mTransientStateViews = new SparseArrayCompat<View>(); } mTransientStateViews.Put(mFirstActivePosition + i, victim); } continue; } if (multipleScr
private void DrawWind(Canvas canvas, float y, float xOffset) { float cof = (mScreenWidth + xOffset) / (LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT); float time = mLoadingAnimationTime; if (mLastAnimationTime - mLoadingAnimationTime > _NUM) { mInverseDirection = _BOOL; time = (LOADING_ANIMATION_COEFFICIENT / SLOW_DOWN_ANIMATION_COEFFICIENT) - mLoadingAnimationTime; } else { mNewWindSet = _BOOL; mInverseDirection = _BOOL; } float x = (mScreenWidth - (time * cof)) + xOffset - mWindLineWidth; float xEnd = x + mWindLineWidth; canvas.DrawLine(x, y, xEnd, y, mWindPaint); }
private bool HasProxySettings(Properties settings) { string proxyHost = settings.GetProperty(_STR, null); return proxyHost != null && proxyHost.Length > _NUM; }
public bool EqualsDefault() { return BitConverter.DoubleToInt64Bits(value) == _NUM; }
public static Dictionary<string, string> ParseKeyAndValueToMap(string source, bool ignoreSpace) { return ParseKeyAndValueToMap(source, DEFAULT_KEY_AND_VALUE_SEPARATOR, DEFAULT_KEY_AND_VALUE_PAIR_SEPARATOR, ignoreSpace); }
protected override void OnSizeChanged(int width, int height, int previousWidth, int previousHeight) { base.OnSizeChanged(width, height, previousWidth, previousHeight); SetupBounds(width, height); SetupPaints(); Invalidate(); }
private void NeedNewBuffer(int newCount) { if (currentBufferIndex < buffers.Count - _NUM) { filledBufferSum += currentBuffer.Length; currentBufferIndex++; currentBuffer = buffers[currentBufferIndex]; } else { int newBufferSize; if (currentBuffer == null) { newBufferSize = newCount; filledBufferSum = _NUM; } else { newBufferSize = Math.Max(currentBuffer.Length << _NUM, newCount - filledBufferSum); filledBufferSum += currentBuffer.Length; } currentBufferIndex++; currentBuffer = new byte[newBufferSize]; buffers.Add(currentBuffer); } }
public static WebsiteAddress Create(string originOrHostOrPattern) { if (string.IsNullOrEmpty(originOrHostOrPattern)) { return null; } if (originOrHostOrPattern.StartsWith(ANY_SUBDOMAIN_PATTERN)) { string origin = null; string scheme = null; string host = originOrHostOrPattern.Substring(ANY_SUBDOMAIN_PATTERN.Length); bool omitProtocolAndPort = _BOOL; return new WebsiteAddress(originOrHostOrPattern, origin, scheme, host, omitProtocolAndPort); } if (originOrHostOrPattern.IndexOf(SCHEME_SUFFIX) != -_NUM) { Uri uri = new Uri(originOrHostOrPattern); string origin = TrimTrailingBackslash(originOrHostOrPattern); bool omitProtocolAndPort = HTTP_SCHEME.Equals(uri.Scheme) && (uri.Port == -_NUM || uri.Port == _NUM); return new WebsiteAddress(originOrHostOrPattern, origin, uri.Scheme, uri.Host, omitProtocolAndPort); } string originDefault = null; string schemeDefault = null; bool omitProtocolAndPortDefault = _BOOL; return new WebsiteAddress(ori
public void TestFilter001() { var baseFile = Path.GetTempFileName(); try { var basename = baseFile; var logFilter = new NameAndExtensionFilter(basename, _STR); AssertSameFiles(new File[] { }, logFilter.GetFiles()); } finally { File.Delete(baseFile); } }
public void ResetTeleMissileAttacks() { pendingTeleMissileAttacks.Clear(); }
public int AddPadding(byte[] input, int inputOffset) { byte code = (byte)(input.Length - inputOffset); Random random = new Random(); while (inputOffset < (input.Length - _NUM)) { input[inputOffset] = (byte)random.Next(); inputOffset++; } input[inputOffset] = code; return code; }
public void AddCommands(PDFPage page, Matrix extra) { lock (commands) { AddPush(); if (extra != null) { AddXform(extra); } commands.AddRange(page.GetCommands()); AddPop(); } UpdateImages(); }
public string ToString() { StringBuilder sb = new StringBuilder(); string[] separator = new string[2] { "", "" }; int n = rows.Length; for (int i = 0; i < n; i++) { separator[1] = ""; for (int j = 0; j <= i; j++) { sb.Append(separator); sb.Append(rows[i][j]); separator[1] = ""; } sb.Append(""); sb.Append(""); } return sb.ToString(); }
public void AddLast(StatementSequence statements) { if (statements != null) { sequence.AddRange(statements.sequence); } }
private void NotifyActivityStateChanged(Bundle bundle) { if (mRecords.Count > 0) { Debug.WriteLine(TAG + _STR + mRecords.Count); lock (mRecords) { var iterator = mRecords.GetEnumerator(); while (iterator.MoveNext()) { Record record = iterator.Current; FmRadioListener listener = record.mCallback; if (listener == null) { iterator.Dispose(); iterator = mRecords.Where(r => r != record).ToList().GetEnumerator(); return; } listener.OnCallBack(bundle); } } } }
public double Elasticity(double spot) { double val = Value(); double del = Delta(spot); if (val > Constants.QL_EPSILON) return del / val * spot; else if (Math.Abs(del) < Constants.QL_EPSILON) return _NUM; else if (del > _NUM) return double.MaxValue; else return double.MinValue; }
private byte[] EntityToBytes(HttpEntity entity, Request request) { using (var bytes = new PooledByteArrayOutputStream(mPool, (int)entity.ContentLength)) { byte[] buffer = null; try { using (var inputStream = entity.Content) { if (inputStream == null) { throw new ServerError(); } buffer = mPool.GetBuffer(_NUM); int progress = _NUM; int count; while ((count = inputStream.Read(buffer, 0, buffer.Length)) != -1) { bytes.Write(buffer, 0, count); progress += count; request.ProgressUpdate(progress); } return bytes.ToArray(); } } finally { try { entity.ConsumeContent(); } catch (IOException e) { VinciLog.Debug(_STR); } mPool.ReturnBuffer(buffer); } } }
public Foo FetchByUuid_First(string uuid, IComparer<Foo> orderByComparator) { List<Foo> list = FindByUuid(uuid, _NUM, _NUM, orderByComparator); if (list.Count > 0) { return list[_NUM]; } return null; }
public static float RoundDecimal(float value) { return RoundDecimal(value, (float)Math.Log10(INT_PRECISION)); }
public RunnerImpl(RunnerLocalizationConstant locale, RunnerCounter runnerCounter, GetEnvironmentsUtil util, RunOptions runOptions, Scope environmentScope, string environmentName) { this.runOptions = runOptions; this.ram = runOptions.GetMemorySize(); this.title = RUNNER_NAME + runnerCounter.GetRunnerNumber() + (environmentName == null ? _STR : _STR + GetCorrectName(environmentName)); this.activeTab = locale.RunnerTabConsole(); this.status = IN_QUEUE; this.scope = environmentScope; creationTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); string environmentId = runOptions.GetEnvironmentId(); if (environmentId == null || environmentId.StartsWith(_STR)) { this.type = util.GetType(); } else { this.type = util.GetCorrectCategoryName(runOptions.GetEnvironmentId()); } if (environmentId != null) { runOptions.SetEnvironmentId(environmentId); } }
public string GlobalInfo() { return _STR + _STR; }
public static bool IsWindowsMe() { return osName.IndexOf(_STR) > -_NUM && osVersion.Equals(_STR); }
private string DateToString(DateTime? input) { if (input == null) { return null; } else { return input.Value.ToString(); } }
private static int ComponentSize(Component component, FormSpec formSpec, int cellSize, FormLayout.Measure minMeasure, FormLayout.Measure prefMeasure) { if (formSpec == null) { return prefMeasure.SizeOf(component); } else if (formSpec.GetSize() == Sizes.MINIMUM) { return minMeasure.SizeOf(component); } else if (formSpec.GetSize() == Sizes.PREFERRED) { return prefMeasure.SizeOf(component); } else { return Math.Min(cellSize, prefMeasure.SizeOf(component)); } }
protected void Start(long curPrimaryGen) { if (state.Equals(_STR) == _BOOL) { throw new InvalidOperationException(_STR); } Message(_STR); try { string segmentsFileName = SegmentInfos.GetLastCommitSegmentsFileName(dir); long maxPendingGen = -_NUM; foreach (var fileName in dir.ListAll()) { if (fileName.StartsWith(IndexFileNames.PENDING_SEGMENTS)) { long gen = long.Parse(fileName.Substring(IndexFileNames.PENDING_SEGMENTS.Length + _NUM), System.Globalization.NumberStyles.HexNumber); if (gen > maxPendingGen) { maxPendingGen = gen; } } } SegmentInfos infos; if (segmentsFileName == null) { infos = new SegmentInfos(); Message(_STR); } else { Message(_STR + segmentsFileName); infos = SegmentInfos.ReadCommit(dir, segmentsFileName); Message(_STR + infos.ToString() + _STR + infos.GetVersion()); var indexFiles = infos.Files(_BOOL); lastCommitFiles.Add(segmentsFileName); lastCommitFiles.AddRa
public static bool IsSameElementType(ASTNode node1, ASTNode node2) { return node1 != null && node2 != null && node1.GetElementType() == node2.GetElementType(); }
public LogMessage ReadNextLogMessage() { try { if (reader == null) { return null; } while (_BOOL) { string line = reader.ReadLine(); if (line == null) { Close(); if (currentLog != null && MatchRegex(currentLog)) { IncrementLogCount(currentLog); return currentLog; } return null; } fileLineNumber++; LogMessage nextLog = null; if (parser != null) { nextLog = parser.ParseLine(line, request); } else { foreach (LogParser parser in parserTable) { nextLog = parser.ParseLine(line, request); if (!nextLog.IsContinuation()) { this.parser = parser; break; } } if (nextLog == null || nextLog.IsContinuation()) { status.AppendInfo(this.filePath, fileLineNumber); continue; } } if (nextLog.IsContinuation()) { if (currentLog != null) { currentLog.AppendMessage(LogUtil.StringToBytes(line)); } } else
public void AppendDataTo(StringBuilder stringBuilder) { stringBuilder.Append(buffer); }
private static bool HasResponseBody(int requestMethod, int responseCode) { return requestMethod != Request.Method.HEAD && !(HttpStatus.SC_CONTINUE <= responseCode && responseCode < HttpStatus.SC_OK) && responseCode != HttpStatus.SC_NO_CONTENT && responseCode != HttpStatus.SC_NOT_MODIFIED; }
private void LoadBinary(BinaryReader reader) { if (reader.ReadInt32() != MAGIC) { throw new Exception(_STR); } if (reader.ReadInt32() != VERSION) { throw new Exception(_STR); } continuityWeight = reader.ReadInt32(); optimalCoupling = reader.ReadInt32(); extendSelections = reader.ReadInt32(); joinMethod = reader.ReadInt32(); joinWeightShift = reader.ReadInt32(); int weightLength = reader.ReadInt32(); joinWeights = new int[weightLength]; for (int i = _NUM; i < joinWeights.Length; i++) { joinWeights[i] = reader.ReadInt32(); } int unitsLength = reader.ReadInt32(); units = new DatabaseClusterUnit[unitsLength]; for (int i = _NUM; i < units.Length; i++) { units[i] = new DatabaseClusterUnit(reader); } int unitTypesLength = reader.ReadInt32(); unitTypes = new UnitType[unitTypesLength]; for (int i = _NUM; i < unitTypes.Length; i++) { u
public static string ToString(long l) { if (l < NUMBERS_MIN || l > NUMBERS_MAX) { return l.ToString("D" + _NUM); } return NUMBERS[(int)l]; }
public override void Reset() { pos = _NUM; }
private static char[] ZzUnpackCMap(string packed) { char[] map = new char[_NUM]; int i = _NUM; int j = _NUM; while (i < _NUM) { int count = packed[i++]; char value = packed[i++]; do { map[j++] = value; } while (--count > 0); } return map; }
public static int ReadSingleByte(Stream input) { byte[] buffer = new byte[_NUM]; int result = input.Read(buffer, 0, _NUM); return (result != -_NUM) ? buffer[0] & _NUM : -_NUM; }
public static void Write(string filePath, string data) { Write(filePath, data, System.Text.Encoding.Default); }
protected bool IsIDPProxyEnabled(FSAuthnRequest authnRequest) { if (authnRequest.GetMinorVersion() != IFSConstants.FF_12_PROTOCOL_MINOR_VERSION) { return _BOOL; } FSScoping scoping = authnRequest.GetScoping(); if (scoping != null && scoping.GetProxyCount() == _NUM) { return _BOOL; } string enabledString = IDFFMetaUtils.GetFirstAttributeValueFromConfig(spConfig, IFSConstants.ENABLE_IDP_PROXY); if (enabledString != null && enabledString.Equals(_STR, StringComparison.OrdinalIgnoreCase)) { return _BOOL; } else { return _BOOL; } }
private void CompileProlog(ObjectId prolog, DirectoryInfo tempDir) { FileInfo tempRules = CopyToTempFile(prolog, tempDir); try { Compiler comp = new Compiler(); comp.PrologToJavaSource(tempRules.FullName, tempDir.FullName); } finally { tempRules.Delete(); } }
public Spring RemoveAllListeners() { mListeners.Clear(); return this; }
public SelectionInputDialog(Window owner, string key, bool editable, T[] selectionValues, T initialSelectionValue, InputValidator<T> inputValidator, params object[] keyArguments) { this(owner, key, selectionValues, initialSelectionValue, inputValidator, keyArguments); comboBox.IsEditable = editable; }
public void Build(SolrCore core, SolrIndexSearcher searcher) { Log.Info(_STR); dictionary = dictionaryFactory.Create(core, searcher); lookup.Build(dictionary); if (storeDir != null) { var target = new File(Path.Combine(storeDir, factory.StoreFileName())); if (!lookup.Store(new FileStream(target.FullName, FileMode.Create))) { Log.Error(_STR); } else { Log.Info(_STR + target.FullName); } } }
public static string ConvertClassNameToResourcePath(string className) { if (className == null) throw new ArgumentNullException(nameof(className)); return className.Replace("_", "/"); }
public void CreateUri(string scheme, string schemeSpecificPart, string fragment) { StringBuilder uri = new StringBuilder(); if (scheme != null) { uri.Append(scheme); uri.Append(":"); // _STR is assumed to be ":" } if (schemeSpecificPart != null) { AllLegalEncoder.AppendEncoded(uri, schemeSpecificPart); } if (fragment != null) { uri.Append("#"); // _STR is assumed to be "#" AllLegalEncoder.AppendEncoded(uri, fragment); } ParseUri(uri.ToString(), true); // Assuming _BOOL corresponds to true }
private int AddToPopulation(Solution solution) { int id = NextFreeId(); solutions[id] = solution; return id; }
public byte[] ToByteArray() { return buf.Take(cnt).ToArray(); }
public async Task CreateDiskAsync(string projectId, DiskCreateSpec diskCreateSpec, Action<Task> responseCallback) { var path = string.Format(_STR, GetBasePath(), projectId); await CreateObjectAsync(path, SerializeObjectAsJson(diskCreateSpec), responseCallback); }
public override bool DomainMatch(string host, string domain) { return host.EndsWith(domain); }
public synchronized void DisableAttribute(string name) { enabledAttributes.Remove(name); }
public Criteria CreateCriteria() { Criteria criteria = CreateCriteriaInternal(); if (oredCriteria.Count == _NUM) { oredCriteria.Add(criteria); } return criteria; }
public void Push(Handle handle) { mv.VisitLdcInsn(handle); }
[Obsolete] public static string EncodePostBody(Dictionary<string, object> parameters, string boundary) { if (parameters == null) return string.Empty; StringBuilder sb = new StringBuilder(); foreach (var key in parameters.Keys) { var parameter = parameters[key]; if (!(parameter is string)) continue; sb.Append($"\"{key}\"{parameter}"); sb.Append($"\"\"{boundary}\"\""); } return sb.ToString(); }
public static IFitsHeader Lookup(string key) { int keyLength = key.Length; if (keyLength > _NUM && char.IsDigit(key[keyLength - _NUM])) { StringBuilder builder = new StringBuilder(); for (int index = _NUM; index < keyLength; index++) { char character = key[index]; if (char.IsDigit(character)) { if (builder.Length > 0 && builder[builder.Length - _NUM] != _STR) { builder.Append(_STR); } } else { builder.Append(character); } } return STANDARD_KEYS[builder.ToString()]; } return STANDARD_KEYS[key]; }
private static void AssertChangeEvents( ICollection<PortChangeEvent> earlyEvents, ICollection<PortChangeEvent> lateEvents, ICollection<PortChangeEvent> anytimeEvents, ICollection<PortChangeEvent> actualEvents) { string inputDesc = string.Format("{0}{1}{2}{3}", earlyEvents, lateEvents, anytimeEvents, actualEvents); var early = new List<PortChangeEvent>(earlyEvents); var late = new List<PortChangeEvent>(lateEvents); var any = new List<PortChangeEvent>(anytimeEvents); foreach (var ev in early) { Assert.IsFalse(late.Contains(ev), _STR); Assert.IsFalse(any.Contains(ev), _STR); } foreach (var ev in late) { Assert.IsFalse(early.Contains(ev), _STR); Assert.IsFalse(any.Contains(ev), _STR); } foreach (var ev in any) { Assert.IsFalse(early.Contains(ev), _STR); Assert.IsFalse(late.Contains(ev), _STR); } foreach (var a in actualEvents) { if (early.Remove(a)) continue;
public override void Write(Kryo kryo, Output output) { int size = index.Count; output.WriteInt(size + _NUM, _BOOL); for (int i = _NUM; i < size; ++i) { string s = index[i]; if (s == null) { throw new InvalidOperationException(_STR + i.ToString()); } output.WriteString(s); } }
public readonly ObjectProperty<Control> ToggleNodeProperty() { return this.toggleNode; }
private static int DecodeOctets(int i, ByteBuffer bb, StringBuilder sb) { if (bb.Limit() == _NUM && (bb.Get(_NUM) & _NUM) < _NUM) { sb.Append((char)bb.Get(_NUM)); return i + _NUM; } else { CharBuffer cb = UTF8Charset.Decode(bb); sb.Append(cb.ToString()); return i + bb.Limit() * _NUM - _NUM; } }
public ArrayFieldVector(FieldVector<T> v1, T[] v2) { if (v1 == null) throw new ArgumentNullException(nameof(v1)); if (v2 == null) throw new ArgumentNullException(nameof(v2)); field = v1.GetField(); T[] v1Data = (v1 is ArrayFieldVector<T> arrayFieldVector) ? arrayFieldVector.data : v1.ToArray(); data = MathArrays.BuildArray(field, v1Data.Length + v2.Length); Array.Copy(v1Data, 0, data, 0, v1Data.Length); Array.Copy(v2, 0, data, v1Data.Length, v2.Length); }
public void Reverse() { var animators = mAnimatedVectorState.mAnimators; int size = animators.Count; for (int i = _NUM; i < size; i++) { Animator animator = animators[i]; if (CanReverse(animator)) { Reverse(animator); } else { Log.Warning(LOG_TAG, _STR); } } }
public void Start() { if (sLogger.IsActivated()) { sLogger.Info(_STR); } mCleanupExecutor = Executors.NewSingleThreadExecutor(); if (!mObserverIsRegistered) { mContactsContractObserver = new ContactsContractObserver(new Handler()); mContactsContractCursor = mContentResolver.Query(Phone.ContentUri, null, null, null, null); CursorUtil.AssertCursorIsNotNull(mContactsContractCursor, Phone.ContentUri); mContactsContractCursor.RegisterContentObserver(mContactsContractObserver); mObserverIsRegistered = true; } }
protected void FireVetoableChange(string propertyName, double oldValue, double newValue) { FireVetoableChange(propertyName, oldValue, newValue); }
public void TestLMDirichlet() { float p = (FREQ + _NUM * (TOTAL_TERM_FREQ + _NUM) / (NUMBER_OF_FIELD_TOKENS + _NUM)) / (DOC_LEN + _NUM); float a = _NUM / (DOC_LEN + _NUM); float gold = (float)(Math.Log(p / (a * (TOTAL_TERM_FREQ + _NUM) / (NUMBER_OF_FIELD_TOKENS + _NUM))) + Math.Log(a)); CorrectnessTestCore(new LMDirichletSimilarity(), gold); }
public void OnSinksReceived(string sourceUrn, List<MediaSink> sinks) { mSinks[sourceUrn] = sinks; NativeOnSinksReceived(mNativeMediaRouterAndroid, sourceUrn, sinks.Count); }
public User ToEntity(UserDTO dto) { return ToEntity(dto, _NUM); }
protected void WriteExternalForeignKeyDropStmt(Table table, ForeignKey foreignKey, StringBuilder ddl) { WriteTableAlterStmt(table, ddl); ddl.Append(_STR); PrintIdentifier(GetForeignKeyName(table, foreignKey), ddl); PrintEndOfStatement(ddl); }
public void Obtain(long timeoutMs) { long quitTime = DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond + timeoutMs; if (fileLock != null && fileLock.IsValid()) { return; } do { try { fileLock = fileToLock.TryLock(); return; } catch (OverlappingFileLockException) { Thread.Sleep(_NUM); } } while (DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond < quitTime); throw new TimeoutException(); }
[Obsolete] public void PointToData(Data o) { o.FillHeader(this); }
protected virtual VirtualFile[] CollectAffectedFiles(Project project, VirtualFile[] files) { List<VirtualFile> affectedFiles = new List<VirtualFile>(files.Length); ProjectLevelVcsManager projectLevelVcsManager = ProjectLevelVcsManager.GetInstance(project); foreach (VirtualFile file in files) { if (!file.IsDirectory() && projectLevelVcsManager.GetVcsFor(file) is GitVcs) { affectedFiles.Add(file); } else if (file.IsDirectory() && IsRecursive()) { AddChildren(project, affectedFiles, file); } } return VfsUtilCore.ToVirtualFileArray(affectedFiles); }
public void UpdatePosition(Particle particle, long elapsedTime) { Vector3f speed = particle.GetSpeed(); float delta = elapsedTime / _NUM; float dx = speed.x * delta; float dy = speed.y * delta; float dz = speed.z * delta; Vector3f pos = particle.GetPosition(); particle.SetPosition(pos.x + dx, pos.y + dy, pos.z + dz); }
protected void Update(int length) { tickLabelValues.Clear(); tickLabels.Clear(); tickLabelPositions.Clear(); if (scale.IsLogScaleEnabled()) { UpdateTickLabelForLogScale(length); } else { UpdateTickLabelForLinearScale(length); } UpdateTickVisibility(); UpdateTickLabelMaxLengthAndHeight(); }
private static bool IsWithinBounds(VisualPosition targetPosition, VisualPosition startPosition, VisualPosition endPosition) { return targetPosition.Line >= startPosition.Line && targetPosition.Line <= endPosition.Line && targetPosition.Column >= startPosition.Column && targetPosition.Column <= endPosition.Column; }
public static void AssertStatementIndicesConsistent(AbstractTripleStore db, int maxErrors) { if (log.IsInfoEnabled) { log.Info(_STR); } var nErrs = new AtomicInteger(_NUM); int from, to; if (db.GetSPOKeyArity() == _NUM) { from = SPOKeyOrder.FIRST_TRIPLE_INDEX; to = SPOKeyOrder.LAST_TRIPLE_INDEX; } else { from = SPOKeyOrder.FIRST_QUAD_INDEX; to = SPOKeyOrder.LAST_QUAD_INDEX; } for (int i = from; i <= to; i++) { for (int j = from; j <= to; j++) { if (i <= j) { continue; } AssertSameStatements(db, SPOKeyOrder.ValueOf(i), SPOKeyOrder.ValueOf(j), nErrs, maxErrors); } } Assert.Equal(_NUM, nErrs.Get()); }
public void Show(int itemId) { map.Add(itemId); navigation.InvalidateBadge(itemId); }
public Options Put(string option, int? value) { if (value == null) { return Remove(option); } options[option] = value.Value.ToString(); return this; }
private int DetermineTargetPage(int currentPage, float pageOffset, int velocity, int deltaX) { int targetPage; if (Math.Abs(deltaX) > flingDistance && Math.Abs(velocity) > minimumVelocity) { if (virtualPos < _NUM) { targetPage = velocity > _NUM ? currentPage : currentPage + _NUM; } else { targetPage = velocity > _NUM ? currentPage + _NUM : currentPage; } } else { float truncator = currentPage >= currentItem ? _NUM : _NUM; targetPage = (int)(currentPage + pageOffset + truncator); } if (items.Count > _NUM) { ItemInfo firstItem = items[_NUM]; ItemInfo lastItem = items[items.Count - _NUM]; targetPage = Math.Max(firstItem.position, Math.Min(targetPage, lastItem.position)); } if (targetPage > currentPage && onCardChangeListener != null) { onCardChangeListener.OnCardDismissed(currentPage, virtualPos > _NUM); } return targetPage; }
protected string Form(ObjectMatrix1D matrix, int index, Former formatter) { object value = matrix.Get(index); if (value == null) return _STR; return value.ToString(); }
public void Clone(Vector3f source) { Array.Copy(source.points, _NUM, points, _NUM, _NUM); }
public void Disable(BluetoothAdapter adapter) { int mask = (BluetoothReceiver.STATE_TURNING_OFF_FLAG | BluetoothReceiver.STATE_OFF_FLAG | BluetoothReceiver.SCAN_MODE_NONE_FLAG); long start = -_NUM; BluetoothReceiver receiver = GetBluetoothReceiver(mask); int state = adapter.GetState(); switch (state) { case BluetoothAdapter.STATE_OFF: Assert.False(adapter.IsEnabled()); RemoveReceiver(receiver); return; case BluetoothAdapter.STATE_TURNING_ON: Assert.False(adapter.IsEnabled()); start = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); break; case BluetoothAdapter.STATE_ON: Assert.True(adapter.IsEnabled()); start = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); Assert.True(adapter.Disable()); break; case BluetoothAdapter.STATE_TURNING_OFF: Assert.False(adapter.IsEnabled()); mask = _NUM; break; default: RemoveReceiver(receiver); Fail(string.Format(_STR, state)); return; } long s = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); while (DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() - s < ENABLE_DISABLE_TIMEOUT) { state = adapter.GetSt
public static string ToRegex(string glob, string separator) { if (separator == null) throw new ArgumentNullException(nameof(separator)); if (separator.Length != 1) throw new ArgumentException("Separator must be exactly one character.", nameof(separator)); return ToRegex(glob, separator[0]); }
protected void ForceNoLoss(bool value) { }
public static string[] SplitWithoutEscaped(string str, char separatorChar, bool retainEmpty) { int len = str.Length; if (len == 0) { return new string[0]; } List<string> list = new List<string>(); int i = 0, start = 0; bool match = false; while (i < len) { if (str[i] == '\\') { match = true; i += 1; } else if (str[i] == separatorChar) { if (retainEmpty || match) { list.Add(str.Substring(start, i - start)); match = false; } start = ++i; } else { match = false; i++; } } if (retainEmpty || match) { list.Add(str.Substring(start, i - start)); } return list.ToArray(); }
private static Dictionary<BasicBlockPair, HashSet<Register>> FindSplitPoints(IR ir, LiveAnalysis live, LSTGraph lst) { var result = new Dictionary<BasicBlockPair, HashSet<Register>>(_NUM); foreach (var node in lst.EnumerateNodes()) { BasicBlock header = node.GetHeader(); BitVector loop = node.GetLoop(); if (loop == null) continue; foreach (var bb in header.GetIn()) { if (loop.Get(bb.GetNumber())) continue; var liveRegisters = live.GetLiveRegistersOnEdge(bb, header); foreach (var r in liveRegisters) { if (r.IsSymbolic()) { var s = FindOrCreateSplitSet(result, bb, header); s.Add(r); } } } for (int i = _NUM; i < loop.Length; i++) { if (loop.Get(i)) { BasicBlock bb = ir.GetBasicBlock(i); foreach (var dest in bb.GetNormalOut()) { if (loop.Get(dest.GetNumber())) continue; var liveRegisters = live.GetLiveRegistersOnEdge(bb, dest);
public void TestSplitEscapedSemicolons() { Properties inner = PropertyUtils.SplitPropertiesOnSemicolon(PropertyUtils.EscapeBackSlashesIfNotNull(_STR)); Assert.AreEqual(_NUM, inner.Count); Assert.AreEqual(_STR, inner[_STR]); Assert.AreEqual(_STR, inner[_STR]); Assert.AreEqual(_STR, inner[_STR]); Assert.AreEqual(_STR, inner[_STR]); }
public static void RemoveObjectAtOffset(object[] sourceArray, object[] destinationArray, int offset) { Array.Copy(sourceArray, 0, destinationArray, 0, offset); Array.Copy(sourceArray, offset, destinationArray, offset, sourceArray.Length - offset); }
public DictionaryAdapter(Context context, string dbPath, string dbName, string defaultTable) { mContext = context; mDbName = dbName; mDefaultTable = defaultTable; mDbPath = dbPath; mDbFile = Path.Combine(dbPath, dbName); if (File.Exists(mDbFile)) { Open(); } }
public bool IsTabAssociatedWithNonDestroyedActivity(bool isIncognito, int tabId) { List<WeakReference<Activity>> activities = ApplicationStatus.GetRunningActivities(); foreach (var weakRef in activities) { Activity activity = weakRef.Get(); if (activity != null && IsValidActivity(isIncognito, activity.Intent) && GetTabIdFromIntent(activity.Intent) == tabId && !IsActivityDestroyed(activity)) { return true; } } return false; }
public HttpStreamWrapper(HttpStream stream) { _stream = stream; }
public bool HandleFile(FileInfo file) { if (DEBUG) { logger.LogInformation(_STR + file.FullName); } filenames.Add(file); return _BOOL; }
public bool LooksLikeNumberComing() { if (n >= s.Length) return _BOOL; return Char.IsDigit(s[n]); }
public PartialHull(IPoint first, IPoint second) { points.Add(first); points.Add(second); }
public void AddSwipeListener(SwipeListener listener) { if (mListeners == null) { mListeners = new List<SwipeListener>(); } mListeners.Add(listener); }
public short ReadShort() { return primitiveTypes.ReadShort(); }
public void Print(int inum) { Console.WriteLine(inum.ToString()); }
public static ZyProximityNode<NodeType> CreateProximityNode<NodeType>(Graph2D graph, ZyGraphNode<NodeType> attachedNode, int degree, bool isIncoming) where NodeType : IViewNode<object> { Preconditions.CheckNotNull(graph, _STR); Preconditions.CheckNotNull(attachedNode, _STR); var labelContent = new ZyLabelContent(null); labelContent.AddLineContent(new ZyLineContent(degree.ToString(), new Font(_STR, FontStyle.Regular, _NUM), null)); var realizer = new ZyProximityNodeRealizer<NodeType>(labelContent); var node = graph.CreateNode(realizer); var infoNode = new ZyProximityNode<NodeType>(node, realizer, (ZyGraphNode<NodeType>)attachedNode, isIncoming); var data = new ZyNodeData<ZyProximityNode<NodeType>>(infoNode); realizer.SetUserData(data); return infoNode; }
public static bool IsZoningRequired(DbClient dbClient, Uri varrayUri) { if (varrayUri != null) { VirtualArray nh = dbClient.QueryObject<VirtualArray>(varrayUri); if (nh != null) { return IsZoningRequired(dbClient, nh); } } return _BOOL; }
public void Reply(List<string> responseHeaders, bool out) { Debug.Assert(!Monitor.IsEntered(this)); bool outFinished = false; lock (this) { if (responseHeaders == null) { throw new ArgumentNullException("responseHeaders"); } if (IsLocallyInitiated()) { throw new InvalidOperationException("The stream is locally initiated."); } if (this.responseHeaders != null) { throw new InvalidOperationException("Response headers already set."); } this.responseHeaders = responseHeaders; if (!out) { this.out.finished = true; outFinished = true; } } connection.WriteSynReply(id, outFinished, responseHeaders); }
protected CCAnimation(string name, float delay, List<CCSpriteFrame> frames) { delay_ = delay; name_ = name; frames_ = new List<CCSpriteFrame>(); if (frames != null) { frames_.AddRange(frames); } }
private void NavigateToDump() { TreePath currentPath = tree.SelectedPath; tree.SelectedPath = currentPath.ParentPath; tree.ScrollPathToVisible(currentPath.ParentPath); }
public synchronized void AddMessages(List<SmsMmsMessage> newMessages) { if (newMessages != null) { messages.InsertRange(_NUM, newMessages); UpdateMessageCount(); } }
public static Cache.Entry MakeRandomCacheEntry(byte[] data, bool isExpired, bool needsRefresh) { Random random = new Random(); Cache.Entry entry = new Cache.Entry(); if (data != null) { entry.data = data; } else { entry.data = new byte[random.Next(_NUM)]; } entry.etag = random.NextInt64().ToString(); entry.serverDate = random.NextInt64(); entry.ttl = isExpired ? _NUM : long.MaxValue; entry.softTtl = needsRefresh ? _NUM : long.MaxValue; return entry; }
public int Swap() { if (!egl.eglSwapBuffers(eglDisplay, eglSurface)) { return egl.eglGetError(); } return EGL10.EGL_SUCCESS; }
public static List<List<string>> Windows(string words, int windowSize) { var tokens = words.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries); var list = new List<string>(tokens); return Windows(list, windowSize); }
protected void DrawCenterText(Canvas canvas) { var centerText = mChart.GetCenterText(); if (mChart.IsDrawCenterTextEnabled() && centerText != null) { MPPointF center = mChart.GetCenterCircleBox(); MPPointF offset = mChart.GetCenterTextOffset(); float x = center.x + offset.x; float y = center.y + offset.y; float innerRadius = (mChart.IsDrawHoleEnabled() && !mChart.IsDrawSlicesUnderHoleEnabled()) ? mChart.GetRadius() * (mChart.GetHoleRadius() / _NUM) : mChart.GetRadius(); RectF holeRect = mRectBuffer[_NUM]; holeRect.left = x - innerRadius; holeRect.top = y - innerRadius; holeRect.right = x + innerRadius; holeRect.bottom = y + innerRadius; RectF boundingRect = mRectBuffer[_NUM]; boundingRect.Set(holeRect); float radiusPercent = mChart.GetCenterTextRadiusPercent() / _NUM; if (radiusPercent > _NUM) { boundingRect.Inset((boundingRect.width() - boundingRect.width(
public static string BuildPath(JsonPath jsonPath) { List<string> urlParts = new LinkedList<string>(); JsonPath currentJsonPath = jsonPath; string pathPart; do { if (currentJsonPath is RelationshipsPath) { pathPart = RELATIONSHIP_MARK + SEPARATOR + currentJsonPath.GetElementName(); } else if (currentJsonPath is FieldPath) { pathPart = currentJsonPath.GetElementName(); } else { pathPart = currentJsonPath.GetElementName(); if (currentJsonPath.GetIds() != null) { pathPart += SEPARATOR + MergeIds(currentJsonPath.GetIds()); } } urlParts.Add(pathPart); currentJsonPath = currentJsonPath.GetParentResource(); } while (currentJsonPath != null); urlParts.Reverse(); return SEPARATOR + string.Join(SEPARATOR, urlParts) + SEPARATOR; }
protected void GroupFrames(List<Frame> frames, List<Group> groups, bool isDchum) { Frame frame; Group group; int groupCount; int nFrames = frames.Count; Debug.Message(_STR, _STR); for (int i = _NUM; i < nFrames; i++) { Debug.Message(_STR, _STR); frame = frames[i]; if (!frame.Marked) { groupCount = groups.Count; group = new Group { Left = maxSide / _NUM, Right = group.Left + _NUM, Top = maxSide / _NUM, Bottom = group.Top + _NUM }; group.HorizPos[group.Top] = frame.Top; group.HorizPos[group.Bottom] = frame.Bottom; group.VertPos[group.Left] = frame.Left; group.VertPos[group.Right] = frame.Right; group.HInterval = frame.HInterval; group.VInterval = frame.VInterval; group.HResolution = frame.HResolution; group.VResolution = frame.VResolution; group.Scale = frame.Scale; group.Zone = frame.Zone; group.Cib = frame.Ci
private static object Add(object array, int index, object element, Type type) { const int _NUM = 1; const string _STR = "Index out of bounds: "; if (array == null) { if (index != _NUM) { throw new IndexOutOfRangeException(_STR + index); } Array joinedArray = Array.CreateInstance(type, _NUM); Array.SetValue(joinedArray, element, _NUM); return joinedArray; } int length = Array.GetLength(array, 0); if (index > length || index < _NUM) { throw new IndexOutOfRangeException(_STR + index + _STR + length); } Array result = Array.CreateInstance(type, length + _NUM); Array.Copy(array, 0, result, 0, index); Array.SetValue(result, element, index); if (index < length) { Array.Copy(array, index, result, index + _NUM, length - index); } return result; }
public double DoubleValue() { return d.DoubleValue(); }
public string ToMatlab() { StringBuilder result = new StringBuilder(); result.Append(_STR); for (int i = _NUM; i < GetRowDimension(); i++) { if (i > _NUM) { result.Append(_STR); } for (int n = _NUM; n < GetColumnDimension(); n++) { if (n > _NUM) { result.Append(_STR); } result.Append(Get(i, n).ToString()); } } result.Append(_STR); return result.ToString(); }
public FileInputReader(FileInfo file) { if (Debug.Debugging(_STR)) { Debug.Output(_STR + file.FullName); } name = file.Name; absolutePath = file.FullName; inputFile = Init(file); }
public static ObjectOutputStream NewObjectOutputStream(string path) { var fileStream = new FileStream(path, FileMode.Create, FileAccess.Write); return new ObjectOutputStream(fileStream); }
public override HashSet<K> KeySet() { HashSet<K> set = new HashSet<K>(); foreach (Segment<K, V> s in segments) { set.UnionWith(s.KeySet()); } return set; }
private void UpdateBaseMatrix(Drawable d) { ImageView imageView = GetImageView(); if (imageView == null || d == null) { return; } float viewWidth = imageView.Width; float viewHeight = imageView.Height; int drawableWidth = d.IntrinsicWidth; int drawableHeight = d.IntrinsicHeight; mBaseMatrix.Reset(); float widthScale = viewWidth / drawableWidth; float heightScale = viewHeight / drawableHeight; if (mScaleType == ScaleType.Center) { mBaseMatrix.PostTranslate((viewWidth - drawableWidth) / _NUM, (viewHeight - drawableHeight) / _NUM); } else if (mScaleType == ScaleType.CenterCrop) { float scale = Math.Max(widthScale, heightScale); mBaseMatrix.PostScale(scale, scale); mBaseMatrix.PostTranslate((viewWidth - drawableWidth * scale) / _NUM, (viewHeight - drawableHeight * scale) / _NUM); } else if (mScaleType == ScaleType.CenterInside) { float scale = Math.Min(_NUM, Math.Min(widthSc
public void Add(CertificateValidity certificateValidity) { certificateValidityList.Add(certificateValidity); }
public void AddPolicyListener(PolicyListener policyListener) { policyCache.AddPolicyListener(policyListener); }
public static Result Verify(string sid, string code) { string id = _STR + sid; Code c = (Code)Cache.Get(id); if (c == null) { log.Warn(_STR + sid); return Result.BadCode; } else if (!X.IsSame(code, c.Code)) { log.Warn(_STR + c.Code + _STR + code); return Result.BadCode; } else if (c.Expired < DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()) { log.Warn(_STR + c.Expired); return Result.Expired; } return Result.Ok; }
private ScriptEngine NewScriptEngine(FileInfo file) { string filename = file.Name; int index = filename.LastIndexOf(_STR); if (index < _NUM || index >= filename.Length - _NUM) { throw new ScriptException(_STR); } string extension = filename.Substring(index + _NUM); ScriptEngineManager manager = new ScriptEngineManager(); ScriptEngine engine = manager.GetEngineByExtension(extension); if (engine == null) { throw new ScriptException(_STR + extension); } return engine; }
protected static INaviRawModule FindRawModule(int rawModuleId, List<INaviRawModule> rawModules) { if (rawModuleId <= _NUM) throw new ArgumentException(_STR, nameof(rawModuleId)); if (rawModules == null) throw new ArgumentNullException(nameof(rawModules)); foreach (var rawModule in rawModules) { if (rawModule.GetId() == rawModuleId) { return rawModule; } } throw new InvalidOperationException(_STR); }
public static object ExtractTypeChecked(List<object> args, int i, Type clazz, Func<List<object>, object> extractFunc) { if (args.Count < i + _NUM) { return null; } else if (clazz.IsInstanceOfType(args[i])) { return extractFunc(args); } else { return null; } }
public override JapaneseDate DateYearDay(int prolepticYear, int dayOfYear) { return new JapaneseDate(LocalDate.FromYearDay(prolepticYear, dayOfYear)); }
private Tuple<Entry, char[]> RecoverEntry(KeyStore ks, string alias, char[] pstore, char[] pkey) { if (ks.ContainsAlias(alias) == _BOOL) { MessageFormat form = new MessageFormat(rb.GetString(_STR)); object[] source = { alias }; throw new Exception(form.Format(source)); } PasswordProtection pp = null; Entry entry; try { entry = ks.GetEntry(alias, pp); pkey = null; } catch (UnrecoverableEntryException une) { if (P11KEYSTORE.Equals(ks.GetType(), StringComparison.OrdinalIgnoreCase) || KeyStoreUtil.IsWindowsKeyStore(ks.GetType())) { throw une; } if (pkey != null) { pp = new PasswordProtection(pkey); entry = ks.GetEntry(alias, pp); } else { try { pp = new PasswordProtection(pstore); entry = ks.GetEntry(alias, pp); pkey = pstore; } catch (UnrecoverableEntryException une2) { if (P12KEYSTORE.Equals
private URLClassLoader NewLoader(URL baseUrl) { return new URLClassLoader(new URL[] { baseUrl }); }
public void TestMinUnequal1() { string a = _STR; int aScale = _NUM; string b = _STR; int bScale = _NUM; string c = _STR; int cScale = _NUM; var aNumber = new BigDecimal(new BigInteger(a), aScale); var bNumber = new BigDecimal(new BigInteger(b), bScale); var cNumber = new BigDecimal(new BigInteger(c), cScale); Assert.AreEqual(_STR, cNumber, aNumber.Min(bNumber)); }
public Wiser() { this.server = new SMTPServer(new SimpleMessageListenerAdapter(this)); }
protected static int[] Concat(int[] arr, params int[] obj) { int[] newArr; if (arr == null || arr.Length == 0) newArr = obj; else { newArr = new int[arr.Length + obj.Length]; Array.Copy(arr, newArr, arr.Length); Array.Copy(obj, 0, newArr, arr.Length, obj.Length); } return newArr; }
public void TruckCamera(float size) { MoveToPosition( -(targetXoff + (size * Math.Sin(Math.ToRadians(zrot - _NUM)))), -(targetYoff + (size * Math.Cos(Math.ToRadians(zrot - _NUM)))) ); }
public static byte[] Decode2(string encoded) { if (encoded == null) { return null; } char[] base64Data = encoded.ToCharArray(); int len = RemoveWhiteSpace(base64Data); if (len % FOURBYTE != _NUM) { return null; } int numberQuadruple = len / FOURBYTE; if (numberQuadruple == _NUM) { return new byte[_NUM]; } byte[] decodedData = null; byte b1 = _NUM, b2 = _NUM, b3 = _NUM, b4 = _NUM; char d1 = _NUM, d2 = _NUM, d3 = _NUM, d4 = _NUM; int i = _NUM; int encodedIndex = _NUM; int dataIndex = _NUM; decodedData = new byte[numberQuadruple * _NUM]; for (; i < numberQuadruple - _NUM; i++) { if (!IsData((d1 = base64Data[dataIndex++])) || !IsData((d2 = base64Data[dataIndex++])) ||
public void Shutdown() { scheduledExecutorService.ShutdownNow(); }
public Builder Clear() { localeBuilder.Clear(); return this; }
public static string Deflate(string previous, string current) { if (previous == null) return current; var buf = new StringBuilder(); int start1 = _NUM; int start2 = _NUM; while (start1 < previous.Length && start2 < current.Length) { int end1 = start1; int end2 = start2; while (end1 <= previous.Length && end2 <= current.Length) { int c1 = (end1 < previous.Length ? previous[end1] : _STR); int c2 = (end2 < current.Length ? current[end2] : _STR); if (c1 == c2) { if (c1 == _STR) { buf.Append(_STR); break; } else { end1++; end2++; } } else { while (end1 < previous.Length && previous[end1] != _STR) { end1++; } while (end2 < current.Length && current[end2] != _STR) { end2++; } for (int i = start2;
protected int SplitListIndex(List<KeyValuePair<double, int>> S) { return S.Count / _NUM; }
public static void E(string tag, string msg, params object[] args) { if (sLevel > LEVEL_ERROR) { return; } if (args.Length > _NUM) { msg = string.Format(msg, args); } Log.E(tag, msg); }
public static void AddPropertyChangeListener(PropertyChangeListener listener) { lock (listeners) { if (!listeners.Contains(listener)) { listeners.Add(listener); } } }
private static void CleanDirectory(DirectoryInfo path) { if (path == null) return; if (path.Exists) { foreach (var file in path.GetFiles()) { file.Delete(); } foreach (var dir in path.GetDirectories()) { CleanDirectory(dir); } path.Delete(); } }
private GridCacheVersion MinVersion(IEnumerable<IgniteTxEntry> entries, GridCacheVersion min, IgniteInternalTx tx) { foreach (var txEntry in entries) { var cached = txEntry.Cached(); Debug.Assert(txEntry.IsRead() || !cached.Obsolete(tx.XidVersion()), _STR + cached + _STR + tx + _STR); foreach (var cand in cached.RemoteMvccSnapshot()) { if (min == null || cand.Version().IsLess(min)) { min = cand.Version(); } } } return min; }
public DimensionedScalar(string fieldValue) { if (string.IsNullOrEmpty(fieldValue)) { throw new ArgumentException("Field value cannot be null or empty", nameof(fieldValue)); } var matcher = PATTERN.Match(fieldValue); if (matcher.Success) { string name = matcher.Groups[1].Value; // Assuming _NUM is 1 for the name string dimensions = matcher.Groups[2].Value; // Assuming _NUM is 2 for the dimensions string value = matcher.Groups[3].Value; // Assuming _NUM is 3 for the value SetName(name); SetValue(value); this.dimensions = new Dimensions(dimensions); } else { throw new DictionaryException($"Invalid field value: {fieldValue}"); } }
public void Characters(char[] ch, int start, int length) { m_valueBuffer.Append(ch, start, length); }
protected double ComputeStdDev(Instance inst, Matrix k) { double kappa = m_kernel.Eval(-_NUM, -_NUM, inst) + m_deltaSquared; double s = _NUM; int n = m_L.Length; for (int i = _NUM; i < n; i++) { double t = _NUM; for (int j = _NUM; j < n; j++) { t -= k.Get(j, _NUM) * (i > j ? m_L[i][j] : m_L[j][i]); } s += t * k.Get(i, _NUM); } double sigma = m_delta; if (kappa > s) { sigma = Math.Sqrt(kappa - s); } return sigma; }
protected virtual void Initialize(Properties p) { }
public void Add(int index, int element) { CheckRangeIncludingEndpoint(index); EnsureCapacity(size + _NUM); int numToMove = size - index; Array.Copy(array, index, array, index + _NUM, numToMove); array[index] = element; size++; }
public MultiplexManager(params DataStore[] dataStores) { this.dataStores = new List<DataStore>(dataStores); }
public bool MatchesRawNamePattern(object item) { string prefix = patternMatcher.GetPattern(); string text = GetElementName(item); if (text == null) return _BOOL; int textLength = text.Length; int prefixLength = prefix.Length; if (textLength < prefixLength) { return _BOOL; } for (int i = prefixLength - _NUM; i >= _NUM; i--) { if (char.ToLower(prefix[i]) != char.ToLower(text[i])) return _BOOL; } return _BOOL; }
public static T ValueOrDefault<T>(T value, T defaultValue) { return value == null ? defaultValue : value; }
protected abstract int CompareToLastMsg(Pair<K, V> tupleKeyValue, Pair<byte[], byte[]> lastReceivedKeyValue);
public void PaintComponent(Graphics g) { g.DrawImage(track, _NUM, _NUM, null); Graphics2D g2d = (Graphics2D)g.Create(); g2d.Translate(carPosition.X, carPosition.Y); g2d.Rotate(Math.PI / 180 * carRotation); // Convert degrees to radians g2d.Translate(-carPosition.X, -carPosition.Y); g2d.DrawImage(car, carPosition.X - carWHalf, carPosition.Y - carHHalf, null); }
public static System.Data.SqlTypes.SqlTime toSqlTime(string time) { DateTime? newDate = toDate(time); if (newDate.HasValue) { return new System.Data.SqlTypes.SqlTime(newDate.Value); } else { return null; } }
private void ParseMenu(XmlPullParser parser, AttributeSet attrs, SublimeMenu menu) { MenuState menuState = new MenuState(menu); int eventType = parser.EventType; string tagName; bool lookingForEndOfUnknownTag = false; string unknownTagName = null; do { if (eventType == XmlPullParser.StartTag) { tagName = parser.Name; if (tagName.Equals(XML_MENU)) { eventType = parser.Next(); break; } throw new RuntimeException("Unexpected tag: " + tagName); } eventType = parser.Next(); } while (eventType != XmlPullParser.EndDocument); bool reachedEndOfMenu = false; while (!reachedEndOfMenu) { switch (eventType) { case XmlPullParser.StartTag: if (lookingForEndOfUnknownTag) { break; } tagName = parser.Name; if (tagName.Equals(XML_GROUP)) { if (menuState.GroupId != MenuState.DefaultGroupId) { throw new RuntimeException("Invalid group state."); } menuSt
public static double CrossTrackDistanceRad(double lat1, double lon1, double lat2, double lon2, double latQ, double lonQ) { const double _NUM = 1.0; // Replace with the appropriate value based on the original Java code context double dlon12 = lon2 - lon1; double dlon1Q = lonQ - lon1; double dlat1Q = latQ - lat1; double clat1 = Math.Cos(lat1); double slat1 = Math.Sin(lat1); double clatQ = Math.Cos(latQ); double slatQ = Math.Sin(latQ); double clat2 = Math.Cos(lat2); double slat2 = Math.Sin(lat2); double slat = Math.Sin(dlat1Q * _NUM); double slon = Math.Sin(dlon1Q * _NUM); double a = slat * slat + slon * slon * clat1 * clatQ; double angDist1Q = _NUM * Math.Atan2(Math.Sqrt(a), Math.Sqrt(_NUM - a)); double sdlon12 = Math.Sin(dlo
public string ChooseServerAlias(string keyType, X509Certificate2[] issuers, Socket socket) { return defaultX509KM.ChooseServerAlias(keyType, issuers, socket); }
public static double Pdf(double x, double shape, double scale, double factor) { const double _NUM = 1e-10; // Example value for _NUM, set according to your needs if (x <= _NUM) return _NUM; double a = Math.Exp(shape * Math.Log(scale) - (shape + _NUM) * Math.Log(x) - (scale / x) - GammaFunction.LnGamma(shape)); return factor * a; }
public string Charge(Properties ctx, int windowNo, GridTab mTab, GridField mField, object value) { int? C_Charge_ID = value as int?; if (C_Charge_ID == null || C_Charge_ID.Value == _NUM) return _STR; string sql = _STR; using (var pstmt = DB.PrepareStatement(sql, null)) { pstmt.SetInt(_NUM, C_Charge_ID.Value); using (var rs = pstmt.ExecuteQuery()) { if (rs.Next()) { mTab.SetValue(_STR, rs.GetBigDecimal(_NUM)); } } } return Tax(ctx, windowNo, mTab, mField, value); }
protected Actor[] Parse() { var actors = new List<Actor>(); InvokePreListeners(actors); var builder = new StringBuilder(); while (templateReader.HasNextCharacter()) { char character = templateReader.NextCharacter(); if (character == syntax.GetArgumentOpening()) { ProcessArgument(); } else if (character == syntax.GetTagOpening()) { if (IsNextCharacterCommentOpening()) { ProcessComment(); continue; } if (currentParentTag != null) { currentParentTag.HandleDataBetweenTags(builder); } builder.Clear(); ProcessTag(builder); } else { builder.Append(character); } } if (currentParentTag != null) { ThrowError(_STR + currentParentTag.GetTagName() + _STR); } InvokePortListeners(actors); return actors.ToArray(); }
public void TestABandCBBrokerNetwork() { BridgeBrokers(_STR, _STR); BridgeBrokers(_STR, _STR); StartAllBrokers(); var dest = CreateDestination(_STR, _BOOL); var clientA = CreateConsumer(_STR, dest); var clientB = CreateConsumer(_STR, dest); var clientC = CreateConsumer(_STR, dest); Thread.Sleep(_NUM); SendMessages(_STR, dest, MESSAGE_COUNT); SendMessages(_STR, dest, MESSAGE_COUNT); SendMessages(_STR, dest, MESSAGE_COUNT); var msgsA = GetConsumerMessages(_STR, clientA); var msgsB = GetConsumerMessages(_STR, clientB); var msgsC = GetConsumerMessages(_STR, clientC); msgsA.WaitForMessagesToArrive(MESSAGE_COUNT); msgsB.WaitForMessagesToArrive(MESSAGE_COUNT * _NUM); msgsC.WaitForMessagesToArrive(MESSAGE_COUNT); Assert.AreEqual(MESSAGE_COUNT, msgsA.GetMessageCount()); Assert.AreEqual(MESSAGE_COUNT * _NUM, msgsB.GetMessageCount()); Assert.AreEq
public void Flush() { WspUtil.WriteUint8(os_, _NUM); WritePublicIdentifier(os_, publicID_); WspUtil.WriteUintvar(os_, WapConstants.MIB_ENUM_UTF_8); WriteStringTable(os_); wbxmlBody_.Close(); wbxmlBody_.WriteTo(os_); os_.Flush(); }
public static void Discard() { current.Remove(); }
private Token ToASIToken(ILeafNode leaf) { if (leaf.IsHidden()) { return NewSemicolonToken(leaf); } else { if (!leafNodes.HasNext()) { int tokenType = tokenTypeMapper.GetInternalTokenType(leaf); int semicolonTokenType = tokenTypeMapper.GetInternalTokenType(semicolon); if (tokenType == semicolonTokenType) { return new CommonToken(semicolonTokenType, leaf.GetText()); } if (leaf.GetTotalEndOffset() == endOffset) { leafNodes = Iterators.EmptyIterator(); return new CommonToken(tokenType, leaf.GetText()); } next = new CommonToken(semicolonTokenType, leaf.GetText()); return new CommonToken(tokenType, leaf.GetText()); } else if (leaf.GetGrammarElement() == rightCurlyInBlock || leaf.GetGrammarElement() == rightCurlyInArrowExpression) { int tokenType = tokenTypeMapper.GetInternalTokenType(leaf); next = new CommonToken(tokenType); return new CommonToken(tokenTypeMapper.GetInternalTokenType(semicolon), leaf.GetText()); }
public override PacketBuffer Write(PacketBuffer buf) { values.ForEach(value => { /* Perform write operation here */ }); return buf; }
public void RegisterFileType(FileType type, params string[] defaultAssociatedExtensions) { List<FileNameMatcher> matchers = new List<FileNameMatcher>(); if (defaultAssociatedExtensions != null) { foreach (string extension in defaultAssociatedExtensions) { matchers.Add(new ExtensionFileNameMatcher(extension)); } } RegisterFileType(type, matchers); }
public int ParseInt(string localeFormattedInteger) { return int.Parse(localeFormattedInteger); }
public static RequestSecurityTokenResponse ParseXML(string xml) { var doc = XMLUtils.ToDomDocument(xml, debug); var root = doc.DocumentElement; return new RequestSecurityTokenResponse(root); }
public override void RequestResources(SamzaResourceRequest resourceRequest) { const int DEFAULT_PRIORITY = NUM; log.Info(STR + resourceRequest.GetPreferredHost() + STR + resourceRequest.GetContainerID()); int memoryMb = resourceRequest.GetMemoryMB(); int cpuCores = resourceRequest.GetNumCores(); string containerLabel = yarnConfig.GetContainerLabel(); string preferredHost = resourceRequest.GetPreferredHost(); Resource capability = Resource.NewInstance(memoryMb, cpuCores); Priority priority = Priority.NewInstance(DEFAULT_PRIORITY); AMRMClient.ContainerRequest issuedRequest; if (preferredHost.Equals(STR)) { log.Info(STR + preferredHost); issuedRequest = new AMRMClient.ContainerRequest(capability, null, null, priority, BOOL, containerLabel); } else { log.Info(STR + preferredHost); issuedRequest = new AMRMClient.ContainerRequest(capability, new string[] { preferredHost }, null, priority, BOOL, containerLabel); } lock (lockObj) { requestsMap[resourceRequest] = issuedRequest; amClient.AddContainerRequest(issuedRequest); } }
private IEnumerable<ExtractedItemsCollection> FilterItemsByLevel(Player player, List<ExtractedItemsCollection> itemsCollections) { int playerLevel = player.GetLevel(); List<ExtractedItemsCollection> result = new List<ExtractedItemsCollection>(); foreach (var collection in itemsCollections) { if (collection.GetMinLevel() > playerLevel) { continue; } if (collection.GetMaxLevel() > _NUM && collection.GetMaxLevel() < playerLevel) { continue; } result.Add(collection); } return result; }
private string PrintDFormat(string sx) { int nLeadingZeros = _NUM; int nBlanks = _NUM, n = _NUM; int i = _NUM; int jFirst; bool neg = sx[_NUM] == _STR; if (sx.Equals(_STR) && precisionSet && precision == _NUM) { sx = _STR; } if (!neg) { if (precisionSet && sx.Length < precision) { nLeadingZeros = precision - sx.Length; } } else { if (precisionSet && (sx.Length - _NUM) < precision) { nLeadingZeros = precision - sx.Length + _NUM; } } if (nLeadingZeros < _NUM) { nLeadingZeros = _NUM; } if (fieldWidthSet) { nBlanks = fieldWidth - nLeadingZeros - sx.Length; if (!neg && (leadingSign || leadingSpace)) { nBlanks--; } } if (nBlanks < _NUM) { nBlanks = _NUM; } n
private void DrawHost(Graphics g) { Coord loc = node.GetLocation(); if (drawCoverage && node.IsRadioActive()) { List<NetworkInterface> interfaces = new List<NetworkInterface>(node.GetInterfaces()); foreach (NetworkInterface ni in interfaces) { double range = ni.GetTransmitRange(); EllipseF coverage = new EllipseF(scale(loc.GetX() - range), scale(loc.GetY() - range), scale(range * _NUM), scale(range * _NUM)); g.FillEllipse(new SolidBrush(rangeColor), coverage); } } if (drawConnections) { g.FillRectangle(new SolidBrush(conColor), 0, 0, 0, 0); Coord c1 = node.GetLocation(); List<Connection> conList = new List<Connection>(node.GetConnections()); foreach (Connection c in conList) { DTNHost otherNode = c.GetOtherNode(node); if (otherNode == null) continue; Coord c2 = otherNode.GetLocation(); g.DrawLine(new Pen(conColor), scale(c1.GetX()), scale(c1.GetY()), scale(c2.GetX()), scale(c2.
public static int BinarySearchFloor(long[] a, long key, bool inclusive, bool stayInBounds) { int index = Array.BinarySearch(a, key); index = index < 0 ? - (index + 1) : (inclusive ? index : (index - 1)); return stayInBounds ? Math.Max(0, index) : index; }
public bool Add(Symbol sym) { if (sym == null) throw new ArgumentNullException(nameof(sym)); Symbol previous = _all[sym.Name()]; _all[sym.Name()] = sym; return previous == null; }
protected static string AddEscapes(string str) { StringBuilder retval = new StringBuilder(); char ch; for (int i = _NUM; i < str.Length; i++) { switch (str[i]) { case _NUM: continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; case _STR: retval.Append(_STR); continue; default: if ((ch = str[i]) < _NUM || ch > _NUM) { string s = _STR + Convert.ToString(ch, _NUM); retval.Append(_STR + s.Substring(s.Length - _NUM)); } else { retval.Append(ch); } continue; } } return retval.ToString(); }
public int Size() { if (GWT.IsScript()) { return jsArray.Count; } else { return javaArray.Count; } }
public bool Intersects(PlanetModel planetModel, Plane q, GeoPoint[] notablePoints, GeoPoint[] moreNotablePoints, Membership[] bounds, params Membership[] moreBounds) { if (IsNumericallyIdentical(q)) { foreach (GeoPoint p in notablePoints) { if (MeetsAllBounds(p, bounds, moreBounds)) { return true; } } foreach (GeoPoint p in moreNotablePoints) { if (MeetsAllBounds(p, bounds, moreBounds)) { return true; } } return true; } double lineVectorX = y * q.z - z * q.y; double lineVectorY = z * q.x - x * q.z; double lineVectorZ = x * q.y - y * q.x; if (Math.Abs(lineVectorX) < MINIMUM_RESOLUTION && Math.Abs(lineVectorY) < MINIMUM_RESOLUTION && Math.Abs(lineVectorZ) < MINIMUM_RESOLUTION) { return true; } double x0, y0, z0; double denomYZ = this.y * q.z - this.z *
public static long LongFromBase64(string value) { int pos = _NUM; long longVal = base64Values[value[pos++]]; int len = value.Length; while (pos < len) { longVal <<= _NUM; longVal |= base64Values[value[pos++]]; } return longVal; }
public List<LocalTime> Bottom(int n) { List<LocalTime> bottom = new List<LocalTime>(); int[] values = data.ToIntArray(); Array.Sort(values); // Assuming quick sort is to be replaced with built-in sort for (int i = _NUM; i < n && i < values.Length; i++) { bottom.Add(PackedLocalTime.AsLocalTime(values[i])); } return bottom; }
public double SumOutlinkAuthorityScore(Page page) { List<string> outLinks = page.GetOutlinks(); double authScore = _NUM; for (int i = _NUM; i < outLinks.Count; i++) { Page outLink = pTable[outLinks[i]]; if (outLink != null) { authScore += outLink.Authority; } } return authScore; }
public synchronized void End() { graphicsToBeDrawn.Close(); if (currentGraphics != null) { graphicsDrawn.Append(currentGraphics); } graphicsDrawn.CloseWhenEmpty(); if (printerJobThread != null && printerJobThread.IsAlive) { try { printerJobThread.Join(); } catch (ThreadInterruptedException e) { // Handle exception as needed } } }
public List<FileStatus> Browse(string filePath) { try { LOG.Info(_STR + filePath + _STR + hdfsEndPoint); Configuration config = CreateConfig(); using (FileSystem hdfsFileSystem = GetFileSystem(config)) { Path path = new Path(filePath); FileStatus[] listStatus = hdfsFileSystem.ListStatus(path); return listStatus.ToList(); } } catch (Exception ex) { LOG.Error(_STR + filePath, ex.Message); throw new Exception(_STR + ex.Message); } }
public void Append(CharSequence s) { text.Append(s); }
public EipModelWizardInitialObjectCreationPage(string pageId) : base(pageId) { }
private void UnwrapData() { if (log.IsDebugEnabled) { log.Debug(_STR); } inNetBuf.Flip(); SSLEngineResult res = Unwrap0(); inNetBuf.Compact(); CheckStatus(res); RenegotiateIfNeeded(res); }
public bool IsAttributeSpecified(int attributeHandle) { int type = GetNodeType(attributeHandle); if (DTM.ATTRIBUTE_NODE == type) { Attr attr = (Attr)GetNode(attributeHandle); return attr.GetSpecified(); } return _BOOL; }
private static void CheckPermission() { var sm = System.Security.SecurityManager.Current; if (sm != null) { sm.CheckPermission(new JodaTimePermission(_STR)); } }
private void StorePassword(string password) { if (isStore && sharedState != null) { sharedState.Put(GetPwdKey(), password); } }
public void Or(Criteria criteria) { oredCriteria.Add(criteria); }
void DeleteChild(PolicyNode childNode) { if (isImmutable) { throw new InvalidOperationException(_STR); } mChildren.Remove(childNode); }
void AddFillComponents(Container panel, int[] cols, int[] rows) { Dimension filler = new Dimension(_NUM, _NUM); bool filledCell11 = _BOOL; CellConstraints cc = new CellConstraints(); if (cols.Length > _NUM && rows.Length > _NUM) { if (cols[_NUM] == _NUM && rows[_NUM] == _NUM) { panel.Add(Box.CreateRigidArea(filler), cc.XY(_NUM, _NUM)); filledCell11 = _BOOL; } } for (int index = _NUM; index < cols.Length; index++) { if (cols[index] == _NUM && filledCell11) { continue; } panel.Add(Box.CreateRigidArea(filler), cc.XY(cols[index], _NUM)); } for (int index = _NUM; index < rows.Length; index++) { if (rows[index] == _NUM && filledCell11) { continue; } panel.Add(Box.CreateRigidArea(filler), cc.XY(_NUM, rows[index])); } }
public void TestFloatValuePlusZero() { string a = _STR; decimal aNumber = decimal.Parse(a); int zero = _NUM; float result = (float)aNumber; Assert.IsTrue(floatToIntBits(result) == zero, _STR); } private int floatToIntBits(float value) { byte[] floatBytes = BitConverter.GetBytes(value); return BitConverter.ToInt32(floatBytes, 0); }
public ExternalProcessResult AwaitTerminationAndResult(int timeoutMs, bool destroyOnError) { AwaitTermination(timeoutMs, destroyOnError); return new ExternalProcessResult(process.ExitValue(), GetStdOutBytes(), GetStdErrBytes()); }
public void RefreshInheritedMethods(HashSet<ExpandoMetaClass> modifiedSuperExpandos) { foreach (var superExpando in modifiedSuperExpandos) { if (superExpando != this) { RefreshInheritedMethods(superExpando); } } }
public static List<Fragment> ParsePlaceholder(string parseString) { List<Fragment> result = new List<Fragment>(); int currOutputIndex = _NUM; int currSearchIndex = _NUM; while (_BOOL) { if (currSearchIndex == parseString.Length) { break; } int startIndex = parseString.IndexOf(_STR, currSearchIndex); if (startIndex == -_NUM) { if (currOutputIndex < parseString.Length) { string endString = parseString.Substring(currOutputIndex); TextFragment textFragment = new TextFragment(endString); result.Add(textFragment); } break; } if (startIndex > _NUM) { string textSoFar = parseString.Substring(currOutputIndex, startIndex - currOutputIndex); if (textSoFar.Length != _NUM) { result.Add(new TextFragment(textSoFar)); } } if (startIndex > _NUM && parseString[startIndex - _NUM] == _STR) { currOutputIndex = startIndex + _NUM; currSearchIndex = startIndex + _NUM; continu
protected override void Failed() { relation.SetCanceled(_BOOL); base.Failed(); }
private void RouteSingleGetRequest(RequestAndResponse requestAndResponse, string uri) { if (uri.StartsWith(_STR)) { HandleHtmlShowNotebooks(requestAndResponse); } else if (uri.StartsWith(_STR)) { HandleHtmlShowQuotations(requestAndResponse); } else if (uri.StartsWith(_STR)) { HandleHtmlShowSources(requestAndResponse); } else if (uri.StartsWith(_STR)) { HandleHtmlShowSource(requestAndResponse); } else if (uri.StartsWith(_STR)) { HandleHtmlShowNotebook(requestAndResponse); } else if (uri.StartsWith(_STR)) { HandleHtmlSearch(requestAndResponse); } else if (uri.Equals(_STR)) { HandleHtmlBasicHelp(requestAndResponse); } else if (uri.Equals(_STR)) { HandleHtmlAdvancedHelp(requestAndResponse); } else if (uri.StartsWith(_STR)) { HandleHtmlHelp(requestAndResponse); } else if (uri.Equals(_STR)) { HandleHtmlUserBackupForm(requestAndResponse); } else if (uri.Equal
private void ChangeAnnotationDocumentState(SourceDocument aSourceDocument, User aUser, AnnotationDocumentStateTransition aAnnotationDocumentStateTransition) { AnnotationDocument annotationDocument = repository.GetAnnotationDocument(aSourceDocument, aUser); annotationDocument.SetState(AnnotationDocumentStateTransition.Transition(aAnnotationDocumentStateTransition)); try { repository.CreateAnnotationDocument(annotationDocument); } catch (IOException e) { LOG.Info(_STR); } }
public bool RemoveEdge(SparseEdge e) { bool removedEdge = edges.Remove(e); bool removedNeighbour = neighbours.Remove(e.GetOpposite(this)); if (removedEdge && removedNeighbour) return _BOOL; else if (!removedEdge && !removedNeighbour) return _BOOL; else throw new InvalidOperationException(_STR); }
protected virtual void LongKeyPress(int keyCode) { }
public bool HasDescendant(Pattern pattern) { Queue<BNode> nodesToProcess = new Queue<BNode>(); nodesToProcess.Enqueue(this); while (nodesToProcess.Count > 0) { BNode currentNode = nodesToProcess.Dequeue(); foreach (BNode descendantNode in currentNode.GetOutputNodes()) { Matcher matcher = pattern.Matcher(descendantNode.GetId()); if (matcher.Matches()) { return true; } if (!nodesToProcess.Contains(descendantNode)) { nodesToProcess.Enqueue(descendantNode); } } } return false; }
public int FileWrite(long handle, byte[] buffer, int offset, int count) { if ((offset | count) < _NUM || offset > buffer.Length || buffer.Length - offset < count) { throw new IndexOutOfRangeException(_STR + buffer.Length + _STR + offset + _STR + count); } if (count == _NUM) { return _NUM; } byte[] data = buffer; if (offset > _NUM) { data = new byte[count]; Array.Copy(buffer, offset, data, _NUM, count); } IntOut bytesWrittenOut = new IntOut(); try { CheckResult(LibIMobileDevice.afc_file_write(GetRef(), handle, data, count, bytesWrittenOut)); int bytesWritten = bytesWrittenOut.GetValue(); return bytesWritten; } finally { bytesWrittenOut.Delete(); } }
private static void GenerateFiles() { string[] classNames; ResourceBundle rules, info; info = ResourceBundle.GetBundle(_STR, new Locale(language, country, valiant), BreakIteratorRBControl.INSTANCE); classNames = info.GetStringArray(_STR); rules = ResourceBundle.GetBundle(_STR, new Locale(language, country, valiant), BreakIteratorRBControl.INSTANCE); if (info.ContainsKey(_STR)) { GenerateDataFile(info.GetString(_STR), rules.GetString(_STR), classNames[_NUM]); } if (info.ContainsKey(_STR)) { GenerateDataFile(info.GetString(_STR), rules.GetString(_STR), classNames[_NUM]); } if (info.ContainsKey(_STR)) { GenerateDataFile(info.GetString(_STR), rules.GetString(_STR), classNames[_NUM]); } if (info.ContainsKey(_STR)) { GenerateDataFile(info.GetString(_STR), rules.GetString(_STR), classNames[_NUM]); } }
public static bool IsCglibProxy(object obj) { return ClassUtils.IsCglibProxyClass(obj.GetType()); }
private float[] CalculateImageIndents() { mTempMatrix.Reset(); mTempMatrix.SetRotate(-GetCurrentAngle()); float[] unrotatedImageCorners = (float[])mCurrentImageCorners.Clone(); float[] unrotatedCropBoundsCorners = RectUtils.GetCornersFromRect(mCropRect); mTempMatrix.MapPoints(unrotatedImageCorners); mTempMatrix.MapPoints(unrotatedCropBoundsCorners); RectF unrotatedImageRect = RectUtils.TrapToRect(unrotatedImageCorners); RectF unrotatedCropRect = RectUtils.TrapToRect(unrotatedCropBoundsCorners); float deltaLeft = unrotatedImageRect.Left - unrotatedCropRect.Left; float deltaTop = unrotatedImageRect.Top - unrotatedCropRect.Top; float deltaRight = unrotatedImageRect.Right - unrotatedCropRect.Right; float deltaBottom = unrotatedImageRect.Bottom - unrotatedCropRect.Bottom; float[] indents = new float[_NUM]; indents[0] = (deltaLeft > _NUM) ? deltaLeft : _NUM; indents[1] = (deltaTo
public void TestBug10630() { SqlConnection conn2 = null; SqlCommand cmd2 = null; try { conn2 = GetConnectionWithProps(null); cmd2 = conn2.CreateCommand(); conn2.Close(); cmd2.ExecuteReader(); // assumes execution to trigger the warnings throw new Exception("Expected SQLException was not thrown."); } catch (SqlException sqlEx) { Assert.AreEqual("ILLEGAL_ARGUMENT", sqlEx.ClassOfError.ToString()); // Replace with actual SQL state comparison } finally { if (cmd2 != null) { cmd2.Dispose(); } if (conn2 != null) { conn2.Dispose(); } } }
public static bool Equals(bool[] field1, bool[] field2) { const int _NUM = 0; // Assuming _NUM is defined as 0, as it is not provided in the original code. if (field1 == null || field1.Length == _NUM) { return field2 == null || field2.Length == _NUM; } else { return field1.SequenceEqual(field2); } }
public void ToFront(WorkflowAnnotation anno) { if (anno == null) { throw new ArgumentException(_STR); } lock (lockObject) { if (annotationsDrawOrder.Remove(anno)) { annotationsDrawOrder.Add(anno); } if (annotationsEventOrder.Remove(anno)) { annotationsEventOrder.Insert(_NUM, anno); } } }
public synchronized void AddFrame(Image image, long frameDuration) { totalDuration += frameDuration; frames.Add(new AnimFrame(image, totalDuration)); }
public static string PrintCodePointAsString(int codePoint) { StringBuilder builder = new StringBuilder(_NUM); builder.Append(_STR); try { PrintStringCodePoint(builder, codePoint); } catch (IOException e) { throw new Exception(e.Message, e); } builder.Append(_STR); return builder.ToString(); }
private void CleanupMinidumpFile() { if (!CrashFileManager.TryMarkAsUploaded(mFileToUpload)) { Log.Warn(TAG, _STR + mFileToUpload + _STR); if (!mFileToUpload.Delete()) { Log.Warn(TAG, _STR + mFileToUpload); } } }
public bool CloseOutbound() { if (sslEngine == null || sslEngine.IsOutboundDone()) { return _BOOL; } sslEngine.CloseOutbound(); CreateOutNetBuffer(_NUM); SSLEngineResult result; while (true) { result = sslEngine.Wrap(emptyBuffer.Buf(), outNetBuffer.Buf()); if (result.Status == SSLEngineResult.Status.BUFFER_OVERFLOW) { outNetBuffer.Capacity(outNetBuffer.Capacity() << _NUM); outNetBuffer.Limit(outNetBuffer.Capacity()); } else { break; } } if (result.Status != SSLEngineResult.Status.CLOSED) { throw new SSLException(_STR + result); } outNetBuffer.Flip(); return _BOOL; }
private static Bitmap ExtractThumbnail(Bitmap source, int width, int height) { return ExtractThumbnail(source, width, height, Options.None); }
private void WritePkgInfo() { File pkgInfo = new File(Path.Combine(mContentsDir, _STR)); PrintWriter writer = null; try { writer = new PrintWriter(new BufferedWriter(new FileWriter(pkgInfo))); writer.Print(bundleProperties.GetCFBundlePackageType()); writer.Println(bundleProperties.GetCFBundleSignature()); writer.Flush(); } catch (IOException ex) { throw new BuildException(_STR + ex); } finally { mFileUtils.Close(writer); } }
public EventBean[] ToArray() { if (firstEvent == null) { return new EventBean[_NUM]; } if (additionalEvents == null) { return new EventBean[] { firstEvent }; } EventBean[] events = new EventBean[_NUM + additionalEvents.Count]; events[_NUM] = firstEvent; int count = _NUM; foreach (EventBean theEvent in additionalEvents) { events[count] = theEvent; count++; } return events; }
private byte[] Decode(DerInputStream input) { DerValue val = input.GetDerValue(); byte[] derEncoding = val.ToByteArray(); derEncoding[_NUM] = DerValue.Tag_SetOf; DerInputStream derIn = new DerInputStream(derEncoding); DerValue[] derVals = derIn.GetSet(_NUM, _BOOL); PKCS9Attribute attrib; ObjectIdentifier oid; bool reuseEncoding = _BOOL; for (int i = _NUM; i < derVals.Length; i++) { try { attrib = new PKCS9Attribute(derVals[i]); } catch (ParsingException e) { if (ignoreUnsupportedAttributes) { reuseEncoding = _BOOL; continue; } else { throw; } } oid = attrib.GetOID(); if (attributes.ContainsKey(oid)) throw new IOException(_STR + oid); if (permittedAttributes != null && !permittedAttributes.ContainsKey(oid)) throw new IOException(_STR + oid + _STR); attributes[oid] = attrib; } return reuseEncoding ? derEncodin
public StringVector ProcessPrefixList(StylesheetHandler handler, string uri, string name, string rawName, string value) { var tokenizer = new StringTokenizer(value, _STR); int nStrings = tokenizer.CountTokens(); var strings = new StringVector(nStrings); for (int i = _NUM; i < nStrings; i++) { string prefix = tokenizer.NextToken(); string url = handler.GetNamespaceForPrefix(prefix); if (prefix.Equals(Constants.ATTRVAL_DEFAULT_PREFIX) || url != null) { strings.AddElement(prefix); } else { throw new SAXException(XSLMessages.CreateMessage(XSLTErrorResources.ER_CANT_RESOLVE_NSPREFIX, new object[] { prefix })); } } return strings; }
public override CategoricalResults Clone() { CategoricalResults copy = new CategoricalResults(n); copy.Probabilities = (double[])Probabilities.Clone(); return copy; }
private static StringBuilder Dump(StringBuilder lbuffer, long value) { for (int j = _NUM; j < _NUM; j++) { lbuffer.Append(_hexcodes[(int)((value >> _shifts[j]) & _NUM)]); } return lbuffer; }
private bool TypeSpecialChar(char c) { switch (c) { case '\t': controller.KeyPress(Keys.Tab); controller.KeyRelease(Keys.Tab); return true; case '\n': controller.KeyPress(Keys.Enter); controller.KeyRelease(Keys.Enter); return true; default: return false; } }
protected static bool Eq(object o1, object o2) { return o1 == null ? o2 == null : o1.Equals(o2); }
public static bool HasMimeType(string mimeType) { if (string.IsNullOrEmpty(mimeType)) { return false; } return mimeTypeToExtensionMap.ContainsKey(mimeType); }
public IEnumerable<Notification> Skip(IEnumerable<Notification> notifications, long startId, bool inclusive, int limitSize) { if (notifications == null) throw new ArgumentNullException(nameof(notifications)); int position = IndexOf(notifications, startId); if (position == -1) { return notifications.Take(limitSize); } if (inclusive) { return notifications.Skip(position).Take(limitSize); } return notifications.Skip(position + 1).Take(limitSize); }
public bool WriteData(PdxWriter writer, object obj) { if (IsRelevant(obj.GetType())) { WriteData(writer, obj, GetClassInfo(obj.GetType())); return true; } return false; }
protected void WriteC(ByteBuffer buf, int value) { buf.Put((byte)value); }
public static void OverScrollBy(PullToRefreshBase view, int deltaX, int scrollX, int deltaY, int scrollY, int scrollRange, int fuzzyThreshold, float scaleFactor, bool isTouchEvent) { int deltaValue, currentScrollValue, scrollValue; switch (view.GetPullToRefreshScrollDirection()) { case ScrollDirection.Horizontal: deltaValue = deltaX; scrollValue = scrollX; currentScrollValue = view.GetScrollX(); break; case ScrollDirection.Vertical: default: deltaValue = deltaY; scrollValue = scrollY; currentScrollValue = view.GetScrollY(); break; } if (view.IsPullToRefreshOverScrollEnabled() && !view.IsRefreshing()) { Mode mode = view.GetMode(); if (mode.PermitsPullToRefresh() && !isTouchEvent && deltaValue != 0) { int newScrollValue = deltaValue + scrollValue; if (PullToRefreshBase.DEBUG) { Console.WriteLine($"{LOG_TAG} {deltaX} {scrollX} {deltaY} {scrollY} {newScrollValue} {scrollRan
public bool IsEmpty() { return priorityQueue.IsEmpty(); }
public ViterbiPoint(Item item) { this.item = item; }
protected void PaintContentBorderBottomEdge(Graphics g, int x, int y, int w, int h, bool drawBroken, Rectangle selRect, bool isContentBorderPainted) { if (isContentBorderPainted) { g.FillRectangle(new SolidBrush(darkShadow), x, y + h - _NUM, w - _NUM, _NUM); } }
private void EmitListAdd(MethodInfo method, string fieldName, StringBuilder builder) { builder.Append(_STR); builder.Append(GetListAdderName(fieldName)); builder.Append(_STR); builder.Append(GetTypeArgumentImplName((ParameterizedType)method.ReturnParameter.ParameterType, _NUM)); builder.Append(_STR); builder.Append(GetEnsureName(fieldName)); builder.Append(_STR); builder.Append(fieldName); builder.Append(_STR); builder.Append(_STR); }
public RSAPublicKey ParsePEMPublicKey(string pem) { try { byte[] bs = DecodeAsciiArmoredPEM(pem); using (var data = new MemoryStream(bs)) { ASN1Object ob = asn1Parser.ParseASN1(data); List<ASN1Object> seq = Asn1ObjectToSequence(ob, _NUM); BigInteger modulus = Asn1ObjectToBigInt(seq[_NUM]); BigInteger exponent = Asn1ObjectToBigInt(seq[_NUM]); return CreateKeyFromModulusAndExponent(modulus, exponent); } } catch (ArgumentException e) { throw new InvalidKeyException(); } }
public static ParallelPublisher<T> From<T>(Publisher<? extends T> source, bool ordered, int parallelism) { return From(source, ordered, parallelism, Px.BufferSize(), Px.DefaultQueueSupplier(Px.BufferSize())); }
public long Next(long startTime, long fromTime, long currentCount) { if (startTime == _NUM) startTime = RecurrenceUtil.Now(); if (fromTime == _NUM) fromTime = startTime; if (GetEndTime() != _NUM && GetEndTime() <= RecurrenceUtil.Now()) return _NUM; Debug.LogVerbose(_STR, module); if (GetCount() != -_NUM && currentCount >= GetCount()) return _NUM; Debug.LogVerbose(_STR, module); bool isSeeking = _BOOL; long nextRuntime = _NUM; long seekTime = fromTime; int loopProtection = _NUM; int maxLoop = (_NUM * _NUM * _NUM * _NUM * _NUM); while (isSeeking && loopProtection < maxLoop) { DateTime nextRun = GetNextFreq(startTime, seekTime); seekTime = nextRun.Ticks; // Assuming nextRun is of type DateTime if (ValidByRule(nextRun)) { isSeeking = _BOOL; nextRuntime = nextRun.Ticks; // Assum
public void AddToQueue(Var var) { AddToQueue(new[] { var }); }
public string Canonicalize(string simpleURL) { string resultURL = simpleURL; if (simpleURL.StartsWith(_STR)) { resultURL = _STR + simpleURL; } else if (simpleURL.StartsWith(_STR)) { resultURL = _STR + simpleURL; } else if (simpleURL.StartsWith(_STR)) { resultURL = _STR + simpleURL; } else if (!HasProtocolName(simpleURL)) { if (IsSimpleHostName(simpleURL)) { simpleURL = _STR + simpleURL + _STR; } resultURL = _STR + simpleURL; } return resultURL; }
public string Read(string filename) { return ProcFile.ReadFile(string.Format(_STR, pid, filename)); }
private long CalculateAnimationDuration(float initialVelocity, float displacement) { return Math.Clamp((long)Math.Round(Math.Abs(_NUM * displacement / initialVelocity)), MINIMUM_ANIMATION_DURATION_MS, MAXIMUM_ANIMATION_DURATION_MS); }
[RequestProcessing(Value = _STR, Method = HTTPRequestMethod.GET)] [Before(AdviceClass = new[] { typeof(StopwatchStartAdvice), typeof(AnonymousViewCheck), typeof(UserBlockCheck) })] [After(AdviceClass = typeof(StopwatchEndAdvice))] public void ShowHomePoints(HTTPRequestContext context, HttpRequest request, HttpResponse response, string userName) { var user = (JSONObject)request.GetAttribute(User.USER); request.SetAttribute(Keys.TEMPLATE_DIR_NAME, Symphonys.Get(_STR)); var renderer = new SkinRenderer(); context.SetRenderer(renderer); renderer.SetTemplateName(_STR); var dataModel = renderer.GetDataModel(); filler.FillHeaderAndFooter(request, response, dataModel); string pageNumStr = request.GetParameter(_STR); if (string.IsNullOrEmpty(pageNumStr) || !int.TryParse(pageNumStr, out _)) { pageNumStr = _STR; } int pageNum = int.Parse(pageNumStr); int pageSize = Symphonys.GetInt(_STR); int windowSize = Symphonys.GetInt(_STR); FillHomeUser(dataMod
private static double Norm(double[] v) { double agg = _NUM; for (int i = _NUM; i < v.Length; i++) { agg += (v[i] * v[i]); } return Math.Sqrt(agg); }
private int MeasureHeight(int measureSpec) { float result; int specMode = MeasureSpec.GetMode(measureSpec); int specSize = MeasureSpec.GetSize(measureSpec); if (specMode == MeasureSpec.EXACTLY) { result = specSize; } else { result = mPaintSelected.StrokeWidth + GetPaddingTop() + GetPaddingBottom(); if (specMode == MeasureSpec.AT_MOST) { result = Math.Min(result, specSize); } } return (int)Math.Ceiling(result); }
public void Layout(Container container) { var comps = GetComponentsByLocation(container); Drawable north = comps[Location.North]; Drawable northEast = comps[Location.NorthEast]; Drawable east = comps[Location.East]; Drawable southEast = comps[Location.SouthEast]; Drawable south = comps[Location.South]; Drawable southWest = comps[Location.SouthWest]; Drawable west = comps[Location.West]; Drawable northWest = comps[Location.NorthWest]; Drawable center = comps[Location.Center]; double widthWest = GetMaxWidth(northWest, west, southWest); double widthEast = GetMaxWidth(northEast, east, southEast); double heightNorth = GetMaxHeight(northWest, north, northEast); double heightSouth = GetMaxHeight(southWest, south, southEast); double gapEast = (widthEast > _NUM) ? GetGapX() : _NUM; double gapWest = (widthWest > _NUM) ? GetGapX() : _NUM; double gapNorth = (heightNorth
void FullyUnlock() { takeLock.Unlock(); putLock.Unlock(); }
public void Add(int i, int data) { if (_length + _NUM > _capacity) EnsureCapacity(_length + _NUM); Array.Copy(_buffer, i, _buffer, i + _NUM, _length - i); _buffer[i] = (byte)data; _length += _NUM; }
private double Mean(double[] vec) { double result = 0; for (int i = 0; i < vec.Length; i++) { result += vec[i]; } return result / vec.Length; }
private Sprite(float xPos, float yPos, float xVel, float yVel, params Image[] sprites) { if (sprites != null) { spriteFrame = new ImageView(sprites[_NUM]); } playerStates.AddRange(sprites); spriteFrame.SetTranslateX(xPos); spriteFrame.SetTranslateY(yPos); this.xPos = xPos; this.yPos = yPos; this.xVel = xVel; this.yVel = yVel; }
public void Close() { out.Close(); }
protected static SyncToken CreateSyncToken(string dateString, string uuid) { try { return new SyncToken(DateTime.Parse(dateString), uuid); } catch (FormatException e) { throw new InvalidOperationException(e.Message, e); } }
private static bool EqualsHandlesNulls(object a, object b) { return a == b || (a != null && a.Equals(b)); }
public void Init(string flagzDirectory) { this.directoryPrefix = string.IsNullOrEmpty(flagzDirectory) ? directoryFlag.Get() : flagzDirectory; client = new EtcdClient(uris.ToArray()); client.SetRetryHandler(retryPolicy); InitialSetAllFlagz(); }
public static void CloseEL(Stream stream) { try { if (stream != null) { stream.Close(); } } catch (Exception ex) { // Handle exception if needed } }
public void TestRandom() { ExtremityMonitor monitor = new ExtremityMonitor(); Random random = new Random(_NUM); for (int i = _NUM; i < _NUM; i++) { monitor.Update(random.NextDouble()); } Debug.Assert(monitor.GetMin() < _NUM); Debug.Assert(monitor.GetMax() < _NUM); Debug.Assert(monitor.GetMin() >= _NUM); Debug.Assert(monitor.GetMax() > _NUM); }
public static string Replace(string str, char oldChar, string newStr) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < str.Length; i++) { char ch = str[i]; if (ch == oldChar) { buf.Append(newStr); } else { buf.Append(ch); } } return buf.ToString(); }
[Action(Value = "_STR")] [ValidationErrorPage(Value = "ERROR")] [SkipValidation] public string NewForm() { SetLoginDept(); var sdf = new SimpleDateFormat("_STR"); try { cutOffDate = sdf.Parse(collectionsUtil.GetAppConfigValue(CollectionConstants.MODULE_NAME_COLLECTIONS_CONFIG, CollectionConstants.APPCONFIG_VALUE_COLLECTIONDATAENTRYCUTOFFDATE)); } catch (ParseException e) { LOGGER.Error(GetText("_STR") + e.Message); } return "NEW"; }
public TypeDeclaration Canonicalize() { List<Type> sts = GetSatisfiedTypes(); if (sts.Count == 0) { return unit.GetAnythingDeclaration(); } else if (sts.Count == _NUM) { Type st = sts[_NUM]; if (st.IsExactlyNothing()) { return unit.GetNothingDeclaration(); } } foreach (Type st in sts) { if (st.IsUnion()) { List<Type> caseTypes = st.GetCaseTypes(); List<Type> ulist = new List<Type>(caseTypes.Count); foreach (Type ct in caseTypes) { List<Type> ilist = new List<Type>(sts.Count); foreach (Type pt in sts) { if (pt == st) { AddToIntersection(ilist, ct, unit); } else { AddToIntersection(ilist, pt, unit); } } Type it = CanonicalIntersection(ilist, unit); AddToUnion(ulist, it); } TypeDeclaration result = new UnionType(unit); result.SetCaseTypes(ulist); return result; }
public static void OpenOtherUri(string url, Activity activity) { Intent intent = new Intent(Intent.ActionView, Android.Net.Uri.Parse(url)); activity.StartActivity(intent); }
public static bool WaitForAllActiveAndLiveReplicas(ZkStateReader zkStateReader, int timeoutInMs) { return WaitForAllActiveAndLiveReplicas(zkStateReader, null, timeoutInMs); }
public synchronized void AddElement(E obj) { if (elementCount == elementData.Length) { GrowByOne(); } elementData[elementCount++] = obj; modCount++; }
private void UpdateBaseMatrix(Drawable d) { ImageView imageView = GetImageView(); if (imageView == null || d == null) { return; } float viewWidth = GetImageViewWidth(imageView); float viewHeight = GetImageViewHeight(imageView); int drawableWidth = d.IntrinsicWidth; int drawableHeight = d.IntrinsicHeight; mBaseMatrix.Reset(); float widthScale = viewWidth / drawableWidth; float heightScale = viewHeight / drawableHeight; if (mScaleType == ScaleType.Center) { mBaseMatrix.PostTranslate((viewWidth - drawableWidth) / _NUM, (viewHeight - drawableHeight) / _NUM); } else if (mScaleType == ScaleType.CenterCrop) { float scale = Math.Max(widthScale, heightScale); mBaseMatrix.PostScale(scale, scale); mBaseMatrix.PostTranslate((viewWidth - drawableWidth * scale) / _NUM, (viewHeight - drawableHeight * scale) / _NUM); } else if (mScaleType == ScaleType.CenterInside) { float scale = Math.Min(_N
public bool CheckForRp() { return NullColumnValueGetter.IsNotNullValue(GetRpCopyName()); }
public ExternalProblem(Process process) { this(process.StandardInput.BaseStream, process.StandardOutput.BaseStream); RedirectStream.Redirect(process.StandardError.BaseStream, Console.OpenStandardError()); }
using System.Collections.Generic; using System.IO; public static List<string> SplitPath(FileInfo file) { List<string> output = new List<string>(); FileInfo current = file; while (current != null) { output.Add(current.Name); current = current.Directory?.Exists == true ? current.Directory : null; } output.Reverse(); return output; }
private static StsdData ParseStsd(ParsableByteArray stsd, int trackId, long durationUs, int rotationDegrees, string language, bool isQuickTime) { stsd.SetPosition(Atom.FULL_HEADER_SIZE); int numberOfEntries = stsd.ReadInt(); StsdData outData = new StsdData(numberOfEntries); for (int i = 0; i < numberOfEntries; i++) { int childStartPosition = stsd.GetPosition(); int childAtomSize = stsd.ReadInt(); Assertions.CheckArgument(childAtomSize > 0, "Invalid child atom size"); int childAtomType = stsd.ReadInt(); if (childAtomType == Atom.TYPE_avc1 || childAtomType == Atom.TYPE_avc3 || childAtomType == Atom.TYPE_encv || childAtomType == Atom.TYPE_mp4v || childAtomType == Atom.TYPE_hvc1 || childAtomType == Atom.TYPE_hev1 || childAtomType == Atom.TYPE_s263 || childAtomType == Atom.TYPE_vp08 || childAtomType == Atom.TYPE_vp09) { ParseVideoSampleEntry(stsd, childAtomType, ch
protected bool IsCompatible(Taxa taxa, List<Taxon> availableTaxa) { for (int i = _NUM; i < taxa.GetTaxonCount(); i++) { Taxon taxon = taxa.GetTaxon(i); if (!availableTaxa.Contains(taxon)) { return _BOOL; } } return _BOOL; }
protected int DrawLabelText(object nativeGraphics, int textDecoration, bool rtl, bool isTickerRunning, bool endsWith3Points, object nativeFont, int txtW, int textSpaceW, int shiftText, string text, int x, int y, int fontHeight) { if (!isTickerRunning || rtl) { if (txtW > textSpaceW && textSpaceW > _NUM) { if (rtl) { if (!isTickerRunning && endsWith3Points) { string points = _STR; int pointsW = StringWidth(nativeFont, points); DrawString(nativeGraphics, nativeFont, points, shiftText + x, y, textDecoration, fontHeight); ClipRect(nativeGraphics, pointsW + shiftText + x, y, textSpaceW - pointsW, fontHeight); } x = x - txtW + textSpaceW; } else if (endsWith3Points) { string points = _STR; int index = _NUM; int widest = CharWidth(nativeFont, _STR); int pointsW = StringWidth(nativeFont, points); int textLen = text.Length;
public bool HasMapObjects() { return mapObjects != null && mapObjects.Count > 0; }
public void PerformActions() { foreach (var action in actions) { action.Run(); } }
public ICollection<object> DumpThreadRoots(int width) { return new List<object>(); }
protected void AddFieldNameTranslation(EmbeddableMapping embeddableMapping, string overrideName, DatabaseField overrideField, MappingAccessor aggregatesAccessor) { DatabaseMapping aggregatesMapping = aggregatesAccessor.GetMapping(); DatabaseField aggregatesMappingField = aggregatesMapping.GetField(); if (aggregatesAccessor.IsId()) { UpdatePrimaryKeyField(aggregatesAccessor, overrideField); } if (overrideName.Contains(_STR)) { embeddableMapping.AddNestedFieldTranslation(overrideName, overrideField, aggregatesMappingField.GetName()); } else { embeddableMapping.AddFieldTranslation(overrideField, aggregatesMappingField.GetName()); } }
public Size MinimumLayoutSize(Control target) { lock (target) { Size dim = new Size(_NUM, _NUM); if (chart != null && chart.Visible) { Size d = chart.GetMinimumSize(); dim.Width = d.Width; dim.Height = d.Height; } if (xLabel != null && xLabel.Visible) { Size d = xLabel.GetMinimumSize(); dim.Width = Math.Max(d.Width, dim.Width); dim.Height += d.Height + vgap; } if (yLabel != null && yLabel.Visible) { Size d = yLabel.GetMinimumSize(); dim.Width += d.Width + hgap; dim.Height = Math.Max(d.Height, dim.Height); } if (title != null && title.Visible) { Size d = title.GetMinimumSize(); dim.Width = Math.Max(d.Width, dim.Width); dim.Height += d.Height + vgap; } Padding insets = target.Padding; dim.Width += insets.Left + insets.Right; dim.Height += insets.Top + insets.Bottom; return dim; } }
private void CheckResourceChange(Resource resource, Group group, Callback callback, AtomicBoolean isChanged) { if (IsChanged(resource, group.Name)) { isChanged.CompareAndSet(_BOOL, _BOOL); callback.OnResourceChanged(resource); lifecycleCallback.OnResourceChanged(resource); } }
public TelURL CreateTelURL(string uri) { if (uri == null) throw new ArgumentNullException(nameof(uri)); string telUrl = _STR + uri; try { StringMsgParser smp = new StringMsgParser(); TelURLImpl timp = (TelURLImpl)smp.ParseUrl(telUrl); return (TelURL)timp; } catch (ParseException ex) { throw new ParseException(ex.Message, _NUM); } }
public EvoSVMModel(ExampleSet exampleSet, List<SupportVector> supportVectors, Kernel kernel, double bias) { base(exampleSet, ExampleSetUtilities.SetsCompareOption.ALLOW_SUPERSET, ExampleSetUtilities.TypesCompareOption.ALLOW_SAME_PARENTS); this.supportVectors = supportVectors; if (supportVectors == null || supportVectors.Count == _NUM) { throw new ArgumentException(_STR); } this.kernel = kernel; this.bias = bias; if (this.kernel is DotKernel) { this.weights = new double[GetNumberOfAttributes()]; for (int i = _NUM; i < GetNumberOfSupportVectors(); i++) { SupportVector sv = GetSupportVector(i); if (sv != null) { double[] x = sv.GetX(); double alpha = sv.GetAlpha(); double y = sv.GetY(); for (int j = _NUM; j < weights.Length; j++) { weights[j] += y * alpha * x[j]; } } else { this.weights = null; break; } } } }
private static readonly object lockObject = new object(); private bool Restart() { lock (lockObject) { if (singleton != null) { singleton.Reset(); } InitEngine(); GC.Collect(); return _BOOL; } }
public Sorter() { UseDefaultVisual(); SetLayout(new BorderLayout()); Add(m_visual, BorderLayout.Center); m_env = Environment.GetSystemWide(); m_stopRequested = new AtomicBoolean(_BOOL); }
public string ToString() { return ((char)GetValue()).ToString(); }
public static double LogPdf(double x, double mu, double shape) { const double _NUM = 1e-10; // Adjust this constant as per the requirement const double TWOPI = 6.283185307179586; // Approximation of 2 * PI if (!(x > _NUM) || x == double.PositiveInfinity) { return double.NegativeInfinity; } double v = (x - mu) / mu; return v < Double.MaxValue ? _NUM * Math.Log(shape / (TWOPI * x * x * x)) - shape * v * v / (_NUM * x) : double.NegativeInfinity; }
public override short ReadShort() { dis.ReadFully(work, _NUM, _NUM); return (short)((work[_NUM] & _NUM) << _NUM | (work[_NUM] & _NUM)); }
public static Format GenerateFormat(string codec) { return (Format)SUPPORTED_CODECS[codec.ToLower()]; }
public void Comment(char[] ch, int start, int length) { int start_old = start; if (m_inEntityRef) return; if (m_elemContext.m_startTagOpen) { CloseStartTag(); m_elemContext.m_startTagOpen = false; } else if (m_needToCallStartDocument) { StartDocumentInternal(); m_needToCallStartDocument = false; } try { int limit = start + length; bool wasDash = false; if (m_cdataTagOpen) CloseCDATA(); if (ShouldIndent()) Indent(); var writer = m_writer; writer.Write(COMMENT_BEGIN); for (int i = start; i < limit; i++) { if (wasDash && ch[i] == '-') { writer.Write(ch, start, i - start); writer.Write('-'); start = i + 1; } wasDash = (ch[i] == '-'); } if (length > 0) { int remainingChars = (limit - start); if (remainingChars > 0) writer.Write(
public OptionalInt MaxByInt(IntUnaryOperator keyExtractor) { int[] result = Collect(null, null, null); return result[_NUM] == _NUM ? OptionalInt.Of(result[_NUM]) : OptionalInt.Empty(); }
public T FindByCommitCounter(long commitCounter) { if (commitCounter < _NUM) throw new ArgumentException(); var lockObj = ReadLock(); lockObj.Lock(); try { var itr = RangeIterator(null, null, _NUM, IRangeQuery.DEFAULT | IRangeQuery.REVERSE, null); while (itr.HasNext()) { var t = itr.Next(); var r = t.GetObject(); var rb = r.GetRootBlock(); if (rb.GetCommitCounter() <= commitCounter) { return r; } } return default; } finally { lockObj.Unlock(); } }
private void StartAnimation() { ValueAnimator animator = ValueAnimator.OfFloat(_NUM); List<NameValuesHolder> nameValueList = new List<NameValuesHolder>(mPendingAnimations); mPendingAnimations.Clear(); int propertyMask = _NUM; int propertyCount = nameValueList.Count; for (int i = _NUM; i < propertyCount; ++i) { NameValuesHolder nameValuesHolder = nameValueList[i]; propertyMask |= nameValuesHolder.mNameConstant; } mAnimatorMap.Add(animator, new PropertyBundle(propertyMask, nameValueList)); animator.AddUpdateListener(mAnimatorEventListener); animator.AddListener(mAnimatorEventListener); if (mStartDelaySet) { animator.SetStartDelay(mStartDelay); } if (mDurationSet) { animator.SetDuration(mDuration); } if (mInterpolatorSet) { animator.SetInterpolator(mInterpolator); } animator.Start(); }
public static string TraceException(Exception ex) { using var result = new StringWriter(); using var printWriter = new PrintWriter(result); ex.PrintStackTrace(printWriter); string stacktrace = result.ToString(); Log.Error(TAG, _STR + stacktrace); return stacktrace; }
public static KeyValuePair<string, string>? Split(string varName) { int splitIndex = varName.IndexOf(_STR); if (splitIndex < _NUM) { return null; } string left = varName.Substring(_NUM, splitIndex - _NUM); string right = varName.Substring(splitIndex + _NUM); if (string.IsNullOrEmpty(left) || left.Length == _NUM || string.IsNullOrEmpty(right) || right.Length == _NUM) { return null; } return new KeyValuePair<string, string>(left, right); }
public void OnChildThreadResumeEnd() { _threadCount.DecrementAndGet(); Wake(); }
public static void RegisterTransportMBean(string containerName) { var mBeanServer = GetMBeanServer(containerName); if (mBeanServer == null) return; var transportConnectionsInfoMBean = new TransportProtocolMonitor(); var objName = TransportConstants.CreateTransportMBeanObjectName(containerName); if (!mBeanServer.IsRegistered(objName)) { try { mBeanServer.RegisterMBean(transportConnectionsInfoMBean, objName); } catch (InstanceAlreadyExistsException e) { if (_logger.IsLoggable(LogLevel.Config)) { _logger.Config(alreadyRegistredTransportMBeanMessage + containerName + _STR); } } catch (NotCompliantMBeanException e) { if (_logger.IsLoggable(LogLevel.Warning)) { _logger.Log(LogLevel.Severe, failedTransportMBeanRegistrationMessagePrefix + containerName + _STR, e); } } catch (MBeanRegistrationException e) { if (_logger.IsLoggable(LogLevel.Severe)) { _logger.Log(LogLevel.Se
public static int Update(string where, object[] args, V sets, Type t) { var mapping = t.GetCustomAttribute<TableAttribute>(); if (mapping == null) { if (log.IsErrorEnabled) log.Error($"{_STR}{t}{_STR}"); return -_NUM; } if (!string.IsNullOrEmpty(mapping.Name)) { return UpdateTable(mapping.Name, where, args, sets); } return -_NUM; }
private void StopVideoFadingEdgesScreenTimer() { if (mVideoFadingEdgesTimer != null) { mVideoFadingEdgesTimer.Cancel(); mVideoFadingEdgesTimer = null; mVideoFadingEdgesTimerTask = null; } }
public void RemoveListener(TimeoutEventListener listener) { listeners.Remove(listener); }
protected static void ProcessGenericPropertiesCreatorProps(FileInfo propsFile) { try { var expProps = new Properties(); using (var bi = new BufferedInputStream(new FileStream(propsFile.FullName, FileMode.Open))) { expProps.Load(bi); } var GPCInputProps = GenericPropertiesCreator.GetGlobalInputProperties(); var keys = expProps.Keys; foreach (string key in keys) { string existingVal = GPCInputProps.GetProperty(key, _STR); if (existingVal.Length > _NUM) { string newVal = expProps.GetProperty(key); if (existingVal.IndexOf(newVal) < _NUM) { newVal = existingVal + _STR + newVal; GPCInputProps.Put(key, newVal); } } else { string newVal = expProps.GetProperty(key); GPCInputProps.Put(key, newVal); } } } catch (Exception ex) { // Handle the exception as necessary } }
private readonly object syncLock = new object(); private void AddTableLockObject(AbsoluteTableIdentifier absoluteTableIdentifier) { lock (syncLock) { if (!tableLockMap.ContainsKey(absoluteTableIdentifier)) { tableLockMap[absoluteTableIdentifier] = new object(); } } }
private static string RandomElement(List<string> list) { Random random = new Random(); int index = random.Next(list.Count); return list[index]; }
public static void UpdateMappingToImmutableSet<T>(Dictionary<T, HashSet<AnnotationMirror>> map, T key, HashSet<AnnotationMirror> newQual) { var result = AnnotationUtils.CreateAnnotationSet(); if (!map.ContainsKey(key)) { result.UnionWith(newQual); } else { result.UnionWith(map[key]); result.UnionWith(newQual); } map[key] = new HashSet<AnnotationMirror>(result); // Assuming the unmodifiableSet can be represented as a HashSet. }
public static void Join(AsyncInvocation<?> async, long timeoutMilliseconds) { Join(async.GetThread(), timeoutMilliseconds); }
void Define(MemberDefinition field, int slot, int from, int to) { if (from >= to) { return; } for (int i = _NUM; i < len; i++) { if (locals[i].field == field && locals[i].slot == slot && from <= locals[i].to && to >= locals[i].from) { locals[i].from = Math.Min(locals[i].from, from); locals[i].to = Math.Max(locals[i].to, to); return; } } if (len == locals.Length) { LocalVariable[] newlocals = new LocalVariable[len * _NUM]; Array.Copy(locals, _NUM, newlocals, _NUM, len); locals = newlocals; } locals[len++] = new LocalVariable(field, slot, from, to); }
protected SqlConnection OpenConnection(bool autocommit) { SqlConnection conn = dataSrc.GetConnection(); conn.AutoCommit = autocommit; // Assuming auto-commit is a property you can set; otherwise, handle accordingly. return conn; }
public void Error(XPathContext xctxt, string msg, object[] args) { string fmsg = XSLMessages.CreateXPathMessage(msg, args); if (xctxt != null) { ErrorListener eh = xctxt.GetErrorListener(); TransformerException te = new TransformerException(fmsg, this); eh.FatalError(te); } }
public void MousePressed(MouseEvent e) { int nclicks = SwingUtilities2.GetAdjustedClickCount(GetComponent(), e); if (SwingUtilities.IsLeftMouseButton(e)) { if (e.IsConsumed()) { shouldHandleRelease = _BOOL; } else { shouldHandleRelease = _BOOL; AdjustCaretAndFocus(e); if (nclicks == _NUM && SwingUtilities2.CanEventAccessSystemClipboard(e)) { SelectWord(e); } } } }
public static byte[] Decode(string str, int flags) { return Convert.FromBase64String(str.TrimEnd('=')); // The padding '=' characters at the end are considered optional }
public object Apply(string source, int lineNo, int columnNo, object funcBody, List<string> paramNames, List<object> arguments) { var obj = Eval(source, lineNo, columnNo, funcBody); if (obj is Closure closure) { return closure.Call(arguments.ToArray()); } return obj; }
public HashSet<TKey> KeySet() { return TotalKeySet(); }
public void Output(List<object> list, StreamWriter out) { PrintContentRange(out, list, _NUM, list.Count, _NUM, CreateNamespaceStack()); out.Flush(); }
public bool ConsumeEncumbranceBudget(Dictionary<string, object> detailsMap) { if (detailsMap == null) throw new ValidationException(new List<ValidationError> { new ValidationError(_STR, _STR) }); detailsMap[Constants.CONSUMEORRELEASE] = _BOOL; var bd = GetDetails(detailsMap); return bd.IntValue() == _NUM; }
private int[] Mod(int[] a, int[] f) { int df = ComputeDegree(f); if (df == -_NUM) { throw new ArithmeticException(_STR); } int[] result = new int[a.Length]; int hc = HeadCoefficient(f); hc = Field.Inverse(hc); Array.Copy(a, _NUM, result, _NUM, result.Length); while (df <= ComputeDegree(result)) { int[] q; int coeff = Field.Mult(HeadCoefficient(result), hc); q = MultWithMonomial(f, ComputeDegree(result) - df); q = MultWithElement(q, coeff); result = Add(q, result); } return result; }
public override IEnumerator<Option> ListOptions() { var result = EnumToVector(base.ListOptions()); result.Add(new Option(_STR + DefaultNumClusters() + _STR, _STR, _NUM, _STR)); result.Add(new Option(_STR + _STR + _STR, _STR, _NUM, _STR)); result.Add(new Option(_STR + _STR + _STR, _STR, _NUM, _STR)); result.Add(new Option(_STR + DefaultMinInstNum() + _STR + DefaultMaxInstNum() + _STR + _STR + _STR, _STR, _NUM, _STR)); result.Add(new Option(_STR + DefaultMinRadius() + _STR + DefaultMaxRadius() + _STR + _STR + _STR, _STR, _NUM, _STR)); result.Add(new Option(_STR + DefaultDistMult() + _STR, _STR, _NUM, _STR)); result.Add(new Option(_STR + DefaultNumCycles() + _STR, _STR, _NUM, _STR)); result.Add(new Option(_STR + _STR + _STR, _STR, _NUM, _STR)); result.Add(new Option(_ST
public static void AppendHexJavaScriptRepresentation(StringBuilder sb, char c) { sb.Append(_STR); string val = ((int)c).ToString("x"); for (int j = val.Length; j < _NUM; j++) { sb.Append(_STR); } sb.Append(val); }
private void PrintBootstrapMap() { LOG.Info(_STR); foreach (int i in chainMap.Keys) { LOG.Info(string.Format(_STR, i, chainMap[i])); } }
using System.Collections; using System.Collections.Generic; public List<Option> EnumToVector(IEnumerator<Option> enu) { List<Option> options = new List<Option>(); while (enu.MoveNext()) { options.Add(enu.Current); } return options; }
private void AddToken(int token) { try { fTokens[fTokenCount] = token; } catch (IndexOutOfRangeException ex) { int[] oldList = fTokens; fTokens = new int[fTokenCount << _NUM]; Array.Copy(oldList, _NUM, fTokens, _NUM, fTokenCount); fTokens[fTokenCount] = token; } fTokenCount++; }
private P FilterLargeValueSets(FilterSpec fs, MetaDataObject rootMeta, F root, bool forceEntityBased, JoinType defaultPredicateJoinType) { List<FilterSpec> specs = new List<FilterSpec>(); List<object> list = new List<object>((ICollection<object>)fs.GetValue()); for (int i = _NUM; i < list.Count; i += ORACLE_PARAM_LIMIT) { int nextOffset = i + Math.Min(list.Count - i, ORACLE_PARAM_LIMIT); List<object> batchList = list.GetRange(i, nextOffset - i); specs.Add(new FilterSpec(fs.GetAttributePath(), fs.GetOperator(), batchList)); } FilterSpec orSpec = FilterSpec.Or(specs); return FilterSpecListToPredicate(rootMeta, root, orSpec, forceEntityBased, defaultPredicateJoinType); }
protected void AddTags(E data, Builder builder) { var platformIdent = cachedDataService.GetPlatformIdentForId(data.GetPlatformIdent()); builder.Tag(Series.TAG_AGENT_ID, data.GetPlatformIdent().ToString()); if (platformIdent != null) { builder.Tag(Series.TAG_AGENT_NAME, platformIdent.GetAgentName()); } }
public int Compare(string s1, string s2) { var match1 = MATCH_ID_PATTERN.Match(s1); var match2 = MATCH_ID_PATTERN.Match(s2); bool match1Matches = match1.Success; bool match2Matches = match2.Success; if (match1Matches ^ match2Matches) { return match1Matches ? _NUM : -_NUM; } else if (match1Matches && match2Matches) { int signature1 = int.Parse(match1.Groups[_NUM].Value); int signature2 = int.Parse(match2.Groups[_NUM].Value); int comparison = signature1 < signature2 ? -_NUM : (signature1 > signature2 ? _NUM : _NUM); if (comparison == _NUM) { int start1 = int.Parse(match1.Groups[_NUM].Value); int start2 = int.Parse(match2.Groups[_NUM].Value); comparison = start1 < start2 ? -_NUM : (start1 > start2 ? _NUM : _NUM); } if (comparison == _NUM) { int end1 = int.Parse(match1.Groups[_NUM].Value); int e
private static int LoadBuildNumber(Context context, PackageManager packageManager) { try { ApplicationInfo appInfo = packageManager.GetApplicationInfo(context.PackageName, PackageInfoFlags.Metadata); var metaData = appInfo.MetaData; if (metaData != null) { return metaData.GetInt(BUNDLE_BUILD_NUMBER, _NUM); } } catch (PackageManager.NameNotFoundException e) { Console.WriteLine(_STR); e.PrintStackTrace(); } return _NUM; }
public static LeftRegularBipartiteGraphSegment BuildRandomLeftRegularBipartiteGraph(int leftSize, int rightSize, int leftDegree, Random random) { var leftRegularBipartiteGraphSegment = new LeftRegularBipartiteGraphSegment(leftSize / _NUM, leftDegree, rightSize / _NUM, leftSize / _NUM, _NUM, int.MaxValue, new IdentityEdgeTypeMask(), new NullStatsReceiver()); var addedIds = new LongOpenHashSet(leftDegree); for (int i = _NUM; i < leftSize; i++) { addedIds.Clear(); for (int j = _NUM; j < leftDegree; j++) { long idToAdd; do { idToAdd = random.Next(rightSize); } while (addedIds.Contains(idToAdd)); addedIds.Add(idToAdd); leftRegularBipartiteGraphSegment.AddEdge(i, idToAdd, (byte)_NUM); } } return leftRegularBipartiteGraphSegment; }
public override void AddFocusables(List<View> views, int direction, int focusableMode) { int focusableCount = views.Count; int descendantFocusability = GetDescendantFocusability(); if (descendantFocusability != FocusBlockDescendants) { for (int i = _NUM; i < GetChildCount(); i++) { View child = GetChildAt(i); if (child.Visibility == ViewStates.Visible) { ItemInfo ii = InfoForChild(child); if (ii != null && ii.Position == mCurItem) { child.AddFocusables(views, direction, focusableMode); } } } } if (descendantFocusability != FocusAfterDescendants || (focusableCount == views.Count)) { if (!IsFocusable()) { return; } if ((focusableMode & FocusablesTouchMode) == FocusablesTouchMode && IsInTouchMode() && !IsFocusableInTouchMode()) { return; } if (views != null) { views.Add(this); } } }
protected HttpWebRequest ConfigureRequest(HttpWebRequest request) { if (credentials != null) { request.Headers["Authorization"] = credentials; } request.Headers["User-Agent"] = userAgent; request.Headers["Accept"] = GetHeaderAccept(); return request; }
public static string ConvertToTitle(int n) { const int _NUM = 26; const char _STR = 'A' - 1; if (n <= _NUM) return _STR.ToString(); var title = new System.Text.StringBuilder(); while (n > _NUM) { n--; int r = n % _NUM; title.Insert(0, (char)(_STR + r)); n = n / _NUM; } return title.ToString(); }
private char ReadEscapeCharacter() { char escaped = inString[pos++]; switch (escaped) { case 'u': if (pos + 4 > inString.Length) { throw new JSONException("Invalid Unicode escape sequence"); } string hex = inString.Substring(pos, 4); pos += 4; return (char)Convert.ToInt32(hex, 16); case '\"': return '\"'; // Return double quote case '\\': return '\\'; // Return backslash case '/': return '/'; // Return forward slash case 'b': return '\b'; // Return backspace case 'f': return '\f'; // Return form feed case 'n': return '\n'; // Return newline case 'r': return '\r'; // Return carriage return case 't': return '\t'; // Return tab default: return escaped; // Return the character as is } }
public static void Process(string input, string output, string packFileName) { Process(new Settings(), input, output, packFileName); }
private ReplicatorRuntimeConf(string serviceName) { replicatorHomeDir = LocateReplicatorHomeDir(); replicatorLogDir = LocateReplicatorLogDir(); replicatorConfDir = LocateReplicatorConfDir(); replicatorProperties = new File(Path.Combine(LocateReplicatorConfDir(), _STR + serviceName + _STR)); if (!replicatorProperties.Exists() || !replicatorProperties.CanRead()) { throw new ServerRuntimeException(_STR + replicatorProperties); } replicatorDynamicProperties = new File(Path.Combine(replicatorConfDir, _STR + serviceName + _STR)); replicatorDynamicRole = new File(Path.Combine(replicatorConfDir, _STR + serviceName + _STR)); this.clearDynamicProperties = bool.Parse(System.GetProperty(CLEAR_DYNAMIC_PROPERTIES)); }
private string ToLocalNumber(double n) { return mDecimalFormat.Format(n); }
public void SimulateMethod(SootMethod method, ReferenceVariable thisVar, ReferenceVariable returnVar, ReferenceVariable[] params) { string subSignature = method.GetSubSignature(); if (subSignature.Equals(_STR)) { JavaSecurityAccessControllerDoPrivileged(method, thisVar, returnVar, params); return; } else if (subSignature.Equals(_STR)) { JavaSecurityAccessControllerDoPrivileged(method, thisVar, returnVar, params); return; } else if (subSignature.Equals(_STR)) { JavaSecurityAccessControllerDoPrivileged(method, thisVar, returnVar, params); return; } else if (subSignature.Equals(_STR)) { JavaSecurityAccessControllerDoPrivileged(method, thisVar, returnVar, params); return; } else if (subSignature.Equals(_STR)) { JavaSecurityAccessControllerGetStackAccessControlContext(method, thisVar, returnVar, params); return; } else if (subSignature.Equals(_STR)) { JavaSecurityAccessControllerGetInheritedAccessControlContext(method, thisVar, returnVar, params); return; } el
protected void RefreshLoadingViewsSize() { int maximumPullScroll = (int)(GetMaximumPullScroll() * _NUM); int pLeft = GetPaddingLeft(); int pTop = GetPaddingTop(); int pRight = GetPaddingRight(); int pBottom = GetPaddingBottom(); switch (GetPullToRefreshScrollDirection()) { case ScrollDirection.Horizontal: if (mMode.ShowHeaderLoadingLayout()) { mHeaderLayout.SetWidth(maximumPullScroll); pLeft = -maximumPullScroll; } else { pLeft = _NUM; } if (mMode.ShowFooterLoadingLayout()) { mFooterLayout.SetWidth(maximumPullScroll); pRight = -maximumPullScroll; } else { pRight = _NUM; } break; case ScrollDirection.Vertical: if (mMode.ShowHeaderLoadingLayout()) { mHeaderLayout.SetHeight(maximumPullScroll); pTop = -maximumPullScroll; } else { pTop = _NUM; } if (mMode.ShowFooterLoadingLayout()) { mFooterLayout.SetHeight(
public static long[] AsLongArray(List<long> l) { long[] a = new long[l.Count]; for (int i = 0; i < a.Length; i++) { a[i] = l[i]; } Array.Sort(a); return a; }
private void UpdateMenuState() { m_appendAnd.Enabled = m_criteriumNode.AllowAppend(typeof(CAndCriterium)); m_appendOr.Enabled = m_criteriumNode.AllowAppend(typeof(COrCriterium)); m_appendNot.Enabled = m_criteriumNode.AllowAppend(typeof(CNotCriterium)); m_insertAnd.Enabled = m_criteriumNode.AllowInsert(typeof(CAndCriterium)); m_insertOr.Enabled = m_criteriumNode.AllowInsert(typeof(COrCriterium)); m_insertNot.Enabled = m_criteriumNode.AllowInsert(typeof(CNotCriterium)); m_conditionSubmenu.Enabled = m_criteriumNode.AllowAppend(typeof(CConditionCriterium)); m_remove.Enabled = !m_criteriumNode.IsRoot(); m_removeAll.Enabled = m_criteriumNode.GetChildCount() != _NUM; }
public void TestPutGetRemove() { InitStore(_NUM); HashSet<int> exp; try { exp = RunPutGetRemoveMultithreaded(_NUM, _NUM); } finally { ShutdownStore(); } var map = delegate.GetMap(); HashSet<int> extra = new HashSet<int>(map.Keys); extra.ExceptWith(exp); Assert.IsTrue(extra.Count == 0, _STR + extra); HashSet<int> missing = new HashSet<int>(exp); missing.ExceptWith(map.Keys); Assert.IsTrue(missing.Count == 0, _STR + missing); foreach (int key in exp) { Assert.AreEqual(_STR + key, _STR + key, map[key]); } }
public static string FormatListToString(List<string> list) { const string _STR = ", "; // Assuming _STR is defined as a comma and space string result = string.Empty; foreach (string s in list) { result += s + _STR; } result = result.Trim(); return result.ToUpper(); }
public override void RemoveNotificationListener(NotificationListener listener) { if (SNMP_ADAPTOR_LOGGER.IsLoggable(Level.Finest)) { SNMP_ADAPTOR_LOGGER.Logp(Level.Finest, dbgTag, _STR, _STR + listener); } notifBroadcaster.RemoveNotificationListener(listener); }
public static bool IsNewer(long ts1, long size1, long ts2, long size2) { return ts1 > ts2 || (ts1 == ts2 && size1 < size2); }
private static void D_Ucumm(double[] a, double[] agg, double[] c, int m, int n, int rl, int ru) { double[] cprods = (agg != null) ? agg : new double[n]; if (agg == null) Array.Fill(cprods, _NUM); for (int i = rl, aix = rl * n; i < ru; i++, aix += n) { ProductAgg(a, cprods, aix, _NUM, n); Array.Copy(cprods, _NUM, c, aix, n); } }
public static List<ModuleSpec> ExpandSpecWildcards(DirectoryInfo dir, List<ModuleSpec> modules, Backend forBackend) { List<DirectoryInfo> dirs = new List<DirectoryInfo>(); dirs.Add(dir); return ExpandSpecWildcards(dirs, modules, forBackend); }
private void SetupUI() { myContentPanel = new Panel(); myContentPanel.Layout = new GridLayout(_NUM, _NUM, new Padding(_NUM, _NUM, _NUM, _NUM)); myYoursRadioButton = new RadioButton { Checked = _BOOL, Text = _STR, Mnemonic = _STR, TabIndex = _NUM }; myContentPanel.Controls.Add(myYoursRadioButton, new GridConstraints(_NUM, _NUM, _NUM, _NUM, GridConstraints.Anchor.West, GridConstraints.Fill.None, GridConstraints.SizePolicy.CanShrink | GridConstraints.SizePolicy.CanGrow, GridConstraints.SizePolicy.Fixed)); myTheirsRadioButton = new RadioButton { Text = _STR, Mnemonic = _STR, TabIndex = _NUM }; myContentPanel.Controls.Add(myTheirsRadioButton, new GridConstraints(_NUM, _NUM, _NUM, _NUM, GridConstraints.Anchor.West, GridConstraints.Fill.None, GridConstraints.SizePolicy.CanShrink | GridConstraints.SizePolicy.CanGrow, GridConstraints.SizePolicy.Fixed)); myUseCus
private static string ReportListContents(IEnumerable<ProcessErrorStateInfo> errList) { if (errList == null) return null; StringBuilder builder = new StringBuilder(); foreach (var entry in errList) { string condition; switch (entry.Condition) { case ProcessErrorStateInfo.Condition.Crashed: condition = "Crashed"; break; case ProcessErrorStateInfo.Condition.NotResponding: condition = "Not Responding"; break; default: condition = "Unknown"; break; } builder.AppendFormat("{0} - {1}: {2}", entry.ProcessName, condition, entry.ShortMsg); if (entry.Condition == ProcessErrorStateInfo.Condition.Crashed) { builder.AppendFormat("{0}", entry.StackTrace); } builder.Append(Environment.NewLine); } return builder.ToString(); }
public void ParseArguments(string[] rawArguments, Properties argumentProperties) { bool inTrailingArgs = false; int numArguments = rawArguments.Length; for (int i = 0; i < numArguments; i++) { string arg = rawArguments[i]; if (inTrailingArgs) { trailingArguments.Add(arg); if (maxTrailingArguments > 0 && trailingArguments.Count > maxTrailingArguments) { var message = ERR_ARGPARSER_TOO_MANY_TRAILING_ARGS.Get(maxTrailingArguments); throw new ArgumentException(message); } continue; } if (arg.Equals("--")) { inTrailingArgs = true; } else if (arg.StartsWith("--")) { string argName = arg.Substring(2); string argValue = null; int equalPos = argName.IndexOf('='); if (equalPos == 0) { throw new ArgumentException(ERR_ARGPARSER_LONG_ARG_WITHOUT_NAME.Get(arg)); } else if (equalPos > 0) { argValue = argName.Substring(equalPos + 1); argName = argName.Substring(0, equalPos);
public void TestGetIssuerNames() { X509CRLSelector selector = new X509CRLSelector(); byte[] iss1 = new byte[] { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; byte[] iss2 = new byte[] { _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM, _NUM }; Assert.IsNull(selector.GetIssuerNames(), _STR); try { selector.AddIssuerName(iss1); selector.AddIssuerName(iss2); } catch (IOException e) { e.PrintStackTrace(); Assert.Fail(_STR); } var resul
public override bool Start() { LOG.Info(_STR, initialCheckpointGenerator); try { KinesisReaderCheckpoint initialCheckpoint = initialCheckpointGenerator.Generate(kinesis); List<ShardRecordsIterator> iterators = new List<ShardRecordsIterator>(); foreach (ShardCheckpoint checkpoint in initialCheckpoint) { iterators.Add(checkpoint.GetShardRecordsIterator(kinesis)); } shardIterators = new RoundRobin<ShardRecordsIterator>(iterators); } catch (TransientKinesisException e) { throw new IOException(e); } return Advance(); }
public override XADataSource CreateXADataSource(Properties properties) { Properties propertiesCopy = new Properties(); if (properties != null) { propertiesCopy.PutAll(properties); } RejectUnsupportedOptions(propertiesCopy); RejectPoolingOptions(propertiesCopy); JdbcDataSource dataSource = new JdbcDataSource(); SetupH2DataSource(dataSource, propertiesCopy); return dataSource; }
public static double ToDegrees(double x) { if (double.IsInfinity(x) || x == _NUM) { return x; } double facta = _NUM; double factb = _NUM; double xa = DoubleHighPart(x); double xb = x - xa; return xb * factb + xb * facta + xa * factb + xa * facta; }
public void AddHeaderView(View v) { AddHeaderView(v, null, _BOOL); }
public static bool IsAbsolutePath(string systemId) { if (systemId == null) return false; var file = new System.IO.FileInfo(systemId); return file.IsAbsoluteUri; }
void InitDemandAndCollectionMap(List<string> prepareFieldNames, Dictionary<string, decimal> demand, Dictionary<string, decimal> collection, Dictionary<string, decimal> rebates) { if (prepareFieldNames != null && prepareFieldNames.Count > 0) { foreach (var fieldName in prepareFieldNames) { demand[fieldName] = 0m; collection[fieldName] = 0m; rebates[fieldName] = 0m; } } }
protected Instance Specifier(int i) { return m_Specifiers[i]; }
public ShapedCraftingRecipe(Item nominalOutput, RecipeFunction recipeFunction, string format, bool mirrored, ItemIngredient[] ingredients) { this.nominalOutput = nominalOutput; string[] formatLines = format.Split(new[] { ' ' }, StringSplitOptions.RemoveEmptyEntries); int numIngredients = 0; int width = 0; foreach (string formatLine in formatLines) { width = Math.Max(width, formatLine.Length); foreach (char c in formatLine) { if (c == ' ') { continue; } else if (c >= 'A' && c <= 'Z') // Assuming uppercase letters represent valid ingredient identifiers { numIngredients++; } else { throw new ArgumentException($"Invalid character '{c}' in format '{format}'"); } } } this.width = width; this.height = formatLines.Length; this.posx = new int[numIngredients]; this.posy = new int[numIngredients]; this.ingredients = new ItemIngredient[numIngredients]; this.mirrored = mirrored; int ingredientIndex = 0; for (int y = 0; y < t
public void WriteTag(string tag, Font value) { StartTag(tag); WriteTag(_STR, value.Name); int style = value.Style; if ((style & FontStyle.Bold) != 0 && (style & FontStyle.Italic) != 0) { WriteTag(STYLE, _STR); } else if ((style & FontStyle.Bold) != 0) { WriteTag(STYLE, _STR); } else if ((style & FontStyle.Italic) != 0) { WriteTag(STYLE, _STR); } else { WriteTag(STYLE, _STR); } WriteTag(_STR, value.Size); CloseTag(); }
private void InternalWrite(byte[] b, int off, int len, bool finish) { coder.Output = Embiggen(coder.Output, coder.MaxOutputSize(len)); if (!coder.Process(b, off, len, finish)) { throw new Base64DataException(_STR); } out.Write(coder.Output, _NUM, coder.Op); }
private Socket Connect(string host, string portString) { int port = _NUM; Socket sock = null; bool DEBUG = Debug.Debugging(_STR); try { port = int.Parse(portString); } catch (FormatException e) { if (DEBUG) Debug.Output(_STR + host + _STR + portString); throw new IOException(_STR + portString); } if (DEBUG) Debug.Output(_STR + host + _STR + port); try { sock = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); sock.Connect(host, port); } catch (IOException e) { if (sock != null) sock.Close(); if (DEBUG) { Debug.Output(_STR + host + _STR + port + _STR + e); } throw; } return sock; }
public override bool BatchFinished() { if (GetInputFormat() == null) { throw new InvalidOperationException(_STR); } Instances toFilter = GetInputFormat(); int cutOff = (int)Math.Round(toFilter.NumInstances() * m_Percentage / _NUM); if (m_Inverse) { for (int i = _NUM; i < cutOff; i++) { Push(toFilter.Instance(i)); } } else { for (int i = cutOff; i < toFilter.NumInstances(); i++) { Push(toFilter.Instance(i)); } } FlushInput(); m_NewBatch = _BOOL; m_FirstBatchDone = _BOOL; return NumPendingOutput() != _NUM; }
public void ComputeParameters() { if (ellps == null) { ellps = Ellipsoid.WGS_84; } if (mode == MODE_BELGIUM) { alpha = _NUM; } else { alpha = _NUM; } double phi1 = ProjMath.DegToRad(lambert_sp_one); double phi2 = ProjMath.DegToRad(lambert_sp_two); double phif = ProjMath.DegToRad(referenceLatitude); double e = ellps.ecc; double sinphi; sinphi = Math.Sin(phi1); double m1 = LambMsfn(sinphi, Math.Cos(phi1), e); double t1 = LambTsfn(phi1, sinphi, e); if (MoreMath.ApproximatelyEqual(phi1, phi2, EPS10)) { n = sinphi; } else { sinphi = Math.Sin(phi2); double m2 = LambMsfn(sinphi, Math.Cos(phi2), e); double t2 = LambTsfn(phi2, sinphi, e);
protected HttpClient ConfigureHttpClient() { var handler = new HttpClientHandler { UseCookies = true, CookieContainer = new CookieContainer() }; var client = new HttpClient(handler); client.Timeout = TimeSpan.FromSeconds(_NUM); return client; }
public string ParseFile(FileInfo file) { Log.Config(file.FullName); string line = null; try { using (var inStream = new StreamReader(new FileStream(file.FullName, FileMode.Open), Ini.GetCharset(), true, _NUM)) { string errMsg = _STR; int lineNo = _NUM; while ((line = inStream.ReadLine()) != null && errMsg.Length == _NUM) { errMsg = ParseLine(line, lineNo); lineNo++; } line = null; } if (errMsg.Length != _NUM) return errMsg; } catch (Exception ioe) { string s = ioe.Message; if (string.IsNullOrEmpty(s) || s.Length == _NUM) s = ioe.ToString(); return _STR + line + _STR + s; } return _STR; }
public static Test Suite() { return Suite(_BOOL); }
public void Load(Element element, object o) { log.Error(_STR); }
public OMRaster(double lt, double ln, int offsetX1, int offsetY1, ImageIcon ii) : this(lt, ln, offsetX1, offsetY1, ii.Image) { }
private readonly object lockObject = new object(); private const int _NUM = 0; private List<ResourceThread> queue = new List<ResourceThread>(); private List<ResourceThread> running = new List<ResourceThread>(); private int threadCount = 0; private int maxThreads; private bool StartDequeue() { lock (lockObject) { int threads = Math.Min(queue.Count, maxThreads); for (int i = _NUM; i < threads; i++) { ResourceThread t = queue[_NUM]; queue.RemoveAt(_NUM); running.Add(t); threadCount++; } foreach (var t in running) { t.Go(); } return threads > _NUM; } }
public void PropertyChange(PropertyChangeEvent evt) { string name = evt.PropertyName; if (name == _STR || name == _STR) { InvalidateWidthCache(); FireColumnMarginChanged(); } }
static WorkQueue CommonSubmitterQueue() { ForkJoinPool p; WorkQueue[] ws; int m; Submitter z; return (z = submitters.Get()) != null && (p = commonPool) != null && (ws = p.workQueues) != null && (m = ws.Length - _NUM) >= _NUM ? ws[m & z.seed & SQMASK] : null; }
public static void AssertEquals(object object1, object object2) { CheckAssertion(object1?.Equals(object2) ?? (object2 == null), null); }
protected void RefreshLoadingViewsSize() { int maximumPullScroll = (int)(GetMaximumPullScroll() * _NUM); int pLeft = GetPaddingLeft(); int pTop = GetPaddingTop(); int pRight = GetPaddingRight(); int pBottom = GetPaddingBottom(); switch (GetPullToRefreshScrollDirection()) { case ScrollDirection.Horizontal: if (mMode.ShowHeaderLoadingLayout()) { mHeaderLayout.SetWidth(maximumPullScroll); pLeft = -maximumPullScroll; } else { pLeft = _NUM; } if (mMode.ShowFooterLoadingLayout()) { mFooterLayout.SetWidth(maximumPullScroll); pRight = -maximumPullScroll; } else { pRight = _NUM; } break; case ScrollDirection.Vertical: if (mMode.ShowHeaderLoadingLayout()) { mHeaderLayout.SetHeight(maximumPullScroll); pTop = -maximumPullScroll; } else { pTop = _NUM; } if (mMode.ShowFooterLoadingLayout()) { mFooterLayout.SetHeight(
public static string FlagNames(long flags) { StringBuilder sbuf = new StringBuilder(); int i = _NUM; long f = flags & StandardFlags; while (f != _NUM) { if ((f & _NUM) != _NUM) { sbuf.Append(_STR); sbuf.Append(flagName[i]); } f >>= _NUM; i++; } return sbuf.ToString(); }
public string FormatSQL(object obj, object expr) { string sql = null; if (expr is string) { sql = (string)expr; if (log.IsLoggable(Level.FINEST)) { log.Finest(_STR + sql); } } else if (obj != null) { sql = obj.ToString(); if (sql != null) { if (sql.StartsWith(_STR)) { sql = sql.Replace(_STR, _STR); // This line seems unnecessary } sql = Regex.Replace(sql, _STR, BINARY_SQL_MARKER); } if (log.IsLoggable(Level.FINEST)) { log.Finest(_STR + sql); } } return sql; }
public void Indent() { indent.Append(" "); }
public void AddFakeView(View childView) { childView.Layout(_NUM, _NUM, GetWidth(), childView.MeasuredHeight); views.Add(childView); }
public void CompileProjects(List<File> projects, IssueAcceptor issueAcceptor) { CompileProjects(new List<File> { new File(_STR) }, projects, new List<File>(), issueAcceptor); }
protected void PrintContactInfo(ObjectInfoPanel pWindow, System.Globalization.CultureInfo pLocale) { var contacts = GetNormalContacts(); if (!contacts.Any()) return; var resources = rBoard.NewGuiResources(_STR); pWindow.Append(_STR + resources.GetString(_STR) + _STR); int contactCount = contacts.Count(); pWindow.AppendItems(contactCount.ToString(), resources.GetString(_STR), contacts); }
private void UpdateProgress(string progressLabel, int progress) { if (myHost != null && (progress != previousProgress || !progressLabel.Equals(previousProgressLabel))) { myHost.UpdateProgress(progressLabel, progress); } previousProgress = progress; previousProgressLabel = progressLabel; }
public Promise<Result, Progress> Resolve(Result result) { List<DoneCallback<Result>> doneCallbacks; List<AlwaysCallback> alwaysCallbacks; lock (this) { ValidateInPendingState(); mState = STATE_RESOLVED; PrintStateChanged(_STR); mResult = result; doneCallbacks = mCallbacks.CloneDoneCallbacks(); alwaysCallbacks = mCallbacks.CloneAlwaysCallbacks(); ClearCallbacks(); } if (doneCallbacks.Count > _NUM || alwaysCallbacks.Count > _NUM) { TriggerAllDones(doneCallbacks); TriggerAllAlways(alwaysCallbacks); } return this; }
private void AdjustNameAndPosition(Node node, int deltaX, int deltaY) { string originalName = node.GetName(); string uniqueName = NextUniqueName(originalName); if (!uniqueName.Equals(originalName)) { node.SetName(uniqueName); node.SetCenterX(node.GetCenterX() + deltaX); node.SetCenterY(node.GetCenterY() + deltaY); } }
private void CreateSnapshot(BlockSnapshot snapshot, Snap unitySnap, StorageSystem storage, DbClient dbClient) { snapshot.SetNativeId(unitySnap.GetId()); snapshot.SetNativeGuid(NativeGUIDGenerator.GenerateNativeGuid(storage, snapshot)); snapshot.SetDeviceLabel(unitySnap.GetName()); snapshot.SetIsSyncActive(_BOOL); snapshot.SetInactive(_BOOL); snapshot.SetCreationTime(DateTime.Now); snapshot.SetWWN(unitySnap.GetAttachedWWN()); snapshot.SetAllocatedCapacity(unitySnap.GetSize()); snapshot.SetProvisionedCapacity(unitySnap.GetSize()); dbClient.CreateObject(snapshot); }
public void Save() { if (props.Count > 0) { ConfigurationUtil.SaveConfigurationProperties(props, propsFile, _BOOL); } ConfigurationUtil.SaveConfigurationProperties(props, new FileInfo(Path.Combine(propsFile.DirectoryName, propsFile.Name + _STR)), _BOOL); }
public static int Len(string list, string delimiter, bool ignoreEmpty) { const int _NUM = 0; if (delimiter.Length == _NUM) return Len(list, delimiter[_NUM].ToString(), ignoreEmpty); char[] del = delimiter.ToCharArray(); int len = list.Length; if (len == _NUM) return _NUM; int count = _NUM; int last = _NUM; char c; for (int i = _NUM; i < len; i++) { c = list[i]; for (int y = _NUM; y < del.Length; y++) { if (c == del[y]) { if (!ignoreEmpty || last < i) count++; last = i + _NUM; break; } } } if (!ignoreEmpty || last < len) count++; return count; }
public synchronized void Flush() { CheckNotClosed(); TrimToSize(); journalWriter.Flush(); }
public string BuildUri(string representationId, int segmentNumber, int bandwidth, long time) { StringBuilder builder = new StringBuilder(); for (int i = _NUM; i < identifierCount; i++) { builder.Append(urlPieces[i]); if (identifiers[i] == REPRESENTATION_ID) { builder.Append(representationId); } else if (identifiers[i] == NUMBER_ID) { builder.Append(string.Format(System.Globalization.CultureInfo.InvariantCulture, identifierFormatTags[i], segmentNumber)); } else if (identifiers[i] == BANDWIDTH_ID) { builder.Append(string.Format(System.Globalization.CultureInfo.InvariantCulture, identifierFormatTags[i], bandwidth)); } else if (identifiers[i] == TIME_ID) { builder.Append(string.Format(System.Globalization.CultureInfo.InvariantCulture, identifierFormatTags[i], time)); } } builder.Append(urlPieces[identifierCount]); return builder.ToString(); }
static void Dispose(long pData, long pConfigInfo) { OGLRenderQueue rq = OGLRenderQueue.GetInstance(); rq.Lock(); try { OGLContext.SetScratchSurface(pConfigInfo); RenderBuffer buf = rq.GetBuffer(); rq.EnsureCapacityAndAlignment(_NUM, _NUM); buf.PutInt(DISPOSE_SURFACE); buf.PutLong(pData); rq.FlushNow(); } finally { rq.Unlock(); } }
private void WriteKanjiResourceFile(string filePath) { FileStream output = null; KanjiEscapeOutputStream kanji = null; StreamWriter writer = null; BufferedWriter w = null; try { output = new FileStream(filePath, FileMode.Create, FileAccess.Write); kanji = new KanjiEscapeOutputStream(output); writer = new StreamWriter(kanji); w = new BufferedWriter(writer); w.Write(_sb.ToString()); } finally { Util.Close(w); Util.Close(writer); Util.Close(kanji); Util.Close(output); } }
public ScannerException(File file, ErrorMessages message) : this(file, ErrorMessages.Get(message), message, -_NUM, -_NUM) { }
void RenderNormal() { GL.Enable(EnableCap.DepthTest); GL.UseProgram(this.normalProgram); GL.UniformMatrix4(viewMatrixUniform, 1, false, viewMatrix.Get(matrixBuffer)); GL.UniformMatrix4(projMatrixUniform, 1, false, projMatrix.Get(matrixBuffer)); GL.UniformMatrix3(normalMatrixUniform, 1, false, normalMatrix.Get(matrixBuffer)); GL.BindFramebuffer(FramebufferTarget.FramebufferExt, fbo); GL.Clear(ClearBufferMask.ColorBufferBit | ClearBufferMask.DepthBufferBit); GL.BindBuffer(BufferTarget.ArrayBuffer, this.cubeVbo); GL.EnableVertexAttribArray(vertexAttribLocation); GL.VertexAttribPointer(vertexAttribLocation, numComponents, VertexAttribPointerType.Float, false, stride, 0); GL.EnableVertexAttribArray(normalAttribLocation); GL.VertexAttribPointer(normalAttribLocation, numComponents, VertexAttribPointerType.Float, false, stride, normalsOffset); GL.DrawArrays(PrimitiveType.Triangles, 0, numVertices); GL.DisableVertexAttribArray(vertexAttribLocation); GL.DisableVertexAttribArray(normalAttribLocation); GL.BindBuffer(BufferTarget.ArrayBuffer, 0
private List<T> LookForResources<T>(CWLResourceType type) where T : CWLResource { List<T> resources = GetRequirements(type, typeof(T)); if (resources == null || resources.Count == _NUM) { resources = GetHints(type, typeof(T)); } return resources; }
private void CalcYValueSum() { mYValueSum = _NUM; for (int i = _NUM; i < mYVals.Count; i++) { Entry e = mYVals[i]; if (e != null) mYValueSum += Math.Abs(e.GetVal()); } }
public override bool Release(int decrement) { if (isEmpty) { return _BOOL; } if (decrement < _NUM) { throw new InvalidOperationException(string.Format(_STR, decrement, ToVerboseString())); } int refCnt = ledger.Decrement(decrement); if (BaseAllocator.DEBUG) { historicalLog.RecordEvent(_STR, decrement, refCnt + decrement); } if (refCnt < _NUM) { throw new InvalidOperationException(string.Format(_STR, id, ToVerboseString())); } return refCnt == _NUM; }
public static void CheckArgument(bool expression, object errorMessage) { if (!expression) { throw new ArgumentException(errorMessage.ToString()); } }
public int ListSize() { int result = MemSize(); foreach (var child in Iterator()) { result += child.TreeSize(); } return result; }
public ConnectionTcp FindConnectionByThreadId(long threadId) { foreach (PortTcp listener in GetPorts()) { ConnectionTcp conn = listener.FindConnectionByThreadId(threadId); if (conn != null) return conn; } return null; }
public UniformDistribution Estimate(double min, double max, int count) { double grow = (count > _NUM) ? _NUM * (max - min) / (count - _NUM) : _NUM; return new UniformDistribution(Math.Max(min - grow, -Double.MaxValue), Math.Min(max + grow, Double.MaxValue)); }
public static RepositoryMetaData ReadFrom(StreamInput input) { string name = input.ReadString(); string type = input.ReadString(); Settings settings = Settings.ReadSettingsFromStream(input); return new RepositoryMetaData(name, type, settings); }
public static bool IsPrimitiveDatatype(IRI datatype) { return datatype.Equals(XMLSchema.DURATION) || datatype.Equals(XMLSchema.DATETIME) || datatype.Equals(XMLSchema.TIME) || datatype.Equals(XMLSchema.DATE) || datatype.Equals(XMLSchema.GYEARMONTH) || datatype.Equals(XMLSchema.GYEAR) || datatype.Equals(XMLSchema.GMONTHDAY) || datatype.Equals(XMLSchema.GDAY) || datatype.Equals(XMLSchema.GMONTH) || datatype.Equals(XMLSchema.STRING) || datatype.Equals(XMLSchema.BOOLEAN) || datatype.Equals(XMLSchema.BASE64BINARY) || datatype.Equals(XMLSchema.HEXBINARY) || datatype.Equals(XMLSchema.FLOAT) || datatype.Equals(XMLSchema.DECIMAL) || datatype.Equals(XMLSchema.DOUBLE) || datatype.Equals(XMLSchema.ANYURI) || datatype.Equals(XMLSchema.QNAME) || datatype.Equals(XMLSchema.NOTATION); }
protected void AppendLine(JComponent c) { c.SetAlignmentX(_NUM); contents.Add(c); }
private void AddLinks(SpannableString string, long accountId, long extraId, int type, bool sensitive, OnLinkClickListener listener, int highlightOption) { switch (type) { case LINK_TYPE_MENTION: AddMentionOrListLinks(string, accountId, extraId, highlightOption, listener); break; case LINK_TYPE_HASHTAG: AddHashtagLinks(string, accountId, extraId, listener, highlightOption); break; case LINK_TYPE_LINK: URLSpan[] spans = string.GetSpans(0, string.Length(), typeof(URLSpan)) as URLSpan[]; foreach (URLSpan span in spans) { int start = string.GetSpanStart(span); int end = string.GetSpanEnd(span); if (start < 0 || end > string.Length() || start > end) { continue; } string.RemoveSpan(span); ApplyLink(span.GetURL(), start, end, string, accountId, extraId, LINK_TYPE_LINK, sensitive, highlightOption, listener); } List<Extractor.Entity> urls = mExtractor.ExtractURLsWithIndices(ParseUtils.ParseString(string)); foreach (Extractor.Entity ent
public void PostProcess() { if (foreignColumnName != null) { foreignAutoRefresh = true; } if (foreignAutoRefresh && maxForeignAutoRefreshLevel == DatabaseField.NO_MAX_FOREIGN_AUTO_REFRESH_LEVEL_SPECIFIED) { maxForeignAutoRefreshLevel = DatabaseField.DEFAULT_MAX_FOREIGN_AUTO_REFRESH_LEVEL; } }
public bool Contains(Node s) { RunTo(-_NUM); if (m_map == null) return _BOOL; for (int i = _NUM; i < m_firstFree; i++) { Node node = m_map[i]; if (node != null && node.Equals(s)) return _BOOL; } return _BOOL; }
private void PersistNewTemp(FileInfo fileCfg) { if (hsDeleteOnExit.Count == _NUM) { LogDebug(LogArea.CONFIG, _STR); fileCfg.Delete(); return; } LogDebug(LogArea.CONFIG, _STR, hsDeleteOnExit.Count, fileCfg.FullName); StreamWriter writer = null; try { writer = new StreamWriter(fileCfg.FullName); foreach (FileInfo file in hsDeleteOnExit) { if (!file.Delete()) { string f = file.FullName; writer.WriteLine(f); LogWarn(LogArea.JAR, _STR, f); } } } catch (IOException e) { // Handle exception if necessary } finally { if (writer != null) { try { writer.Close(); } catch (IOException e) { // Handle exception if necessary } } } }
public static double Clamp(double value, double low, double high) { return Math.Min(Math.Max(value, low), high); }
public void AddWritten(byte[] value) { writeSetLock.EnterWriteLock(); try { writeSet.Add(new TimestampValuePair(ets, value)); } finally { writeSetLock.ExitWriteLock(); } }
public void Load(Entity unit) { if (!CanLoad(unit)) { throw new ArgumentException(_STR + unit.GetShortName() + _STR); } currentSpace -= _NUM; troops.Add(unit.GetId()); }
private void ProcessWorkerExit(Worker w, bool completedAbruptly) { if (completedAbruptly) DecrementWorkerCount(); var mainLock = this.mainLock; mainLock.Lock(); try { completedTaskCount += w.CompletedTasks; workers.Remove(w); } finally { mainLock.Unlock(); } TryTerminate(); int c = ctl.Get(); if (RunStateLessThan(c, STOP)) { if (!completedAbruptly) { int min = allowCoreThreadTimeOut ? _NUM : corePoolSize; if (min == _NUM && !workQueue.IsEmpty()) min = _NUM; if (WorkerCountOf(c) >= min) return; } AddWorker(null, _BOOL); } }
public void Finish() { if (!def.Finished()) { def.Finish(); while (!def.Finished()) { int len = def.Deflate(buf, _NUM, buf.Length); if (def.Finished() && len <= buf.Length - TRAILER_SIZE) { WriteTrailer(buf, len); len += TRAILER_SIZE; out.Write(buf, _NUM, len); return; } if (len > _NUM) out.Write(buf, _NUM, len); } byte[] trailer = new byte[TRAILER_SIZE]; WriteTrailer(trailer, _NUM); out.Write(trailer, 0, trailer.Length); } }
public bool Free(T obj) { AtomicInteger topRef = _top; while (true) { int top = topRef.Get(); if (_capacity <= top) { return false; } bool isFree = _freeStack.CompareAndSet(top, null, obj); topRef.CompareAndSet(top, top + _NUM); if (isFree) { return true; } } }
public static bool HasBinding(Injector injector, Key<?> key) { Binding<?> binding = GetBinding(injector, key); return binding != null; }
private OpenReplicatorManagerMBean CreateInternalService(string serviceName) { logger.Info(_STR + serviceName); try { OpenReplicatorManager orm = new OpenReplicatorManager(serviceName); orm.SetRmiHost(managerRMIHost); orm.SetRmiPort(managerRMIPort); orm.SetHostTimeZone(hostTimeZone); orm.SetReplicatorTimeZone(replicatorTimeZone); orm.AdvertiseInternal(); orm.SetSecurityInfo(this.securityInfo); return (OpenReplicatorManagerMBean)orm; } catch (Exception e) { throw new ReplicatorException(string.Format(_STR, serviceName), e); } }
public static CheckIndex.Status CheckIndex(Directory dir) { return CheckIndex(dir, _BOOL); }
static void PolicyChanged(string serviceTypeName, PolicyEvent pe) { if (DEBUG.MessageEnabled()) { DEBUG.Message(_STR + serviceTypeName); } resourceNamesMap.Remove(serviceTypeName); Cache resourceNamesCache = resourceNamesMap[serviceTypeName] as Cache; if (resourceNamesCache == null || resourceNamesCache.IsEmpty()) { return; } try { DEBUG.Error(_STR); ServiceTypeManager stm = ServiceTypeManager.GetServiceTypeManager(); ServiceType serviceType = stm.GetServiceType(serviceTypeName); HashSet<string> resourceNamesToRemove = new HashSet<string>(); lock (resourceNamesCache) { var resourceNames = resourceNamesCache.Keys.GetEnumerator(); while (resourceNames.MoveNext()) { string resourceName = resourceNames.Current; if (resourceNamesToRemove.Contains(resourceName)) { continue; } var affectedResourceNames = pe.GetResourceNames(); foreach (var affectedResourceName in affectedResourceNames) { if (serviceType.Compare(resourceName, affectedResourceName) != ResourceMatch.NO_MATCH) { resourceNamesToRemove.Add(resourceName); } } } foreach (var resou
private void StartHideAnimations() { animationPlaying = _BOOL; LightAnimationLayout(); if (buttonType.Equals(ButtonType.CIRCLE)) { if (hideOrderType.Equals(OrderType.DEFAULT)) { for (int i = _NUM; i < buttonNum; i++) { SetHideAnimation(dots[i], circleButtons[i], endLocations[i], startLocations[i], i); } } else if (hideOrderType.Equals(OrderType.REVERSE)) { for (int i = _NUM; i < buttonNum; i++) { SetHideAnimation(dots[i], circleButtons[i], endLocations[i], startLocations[i], buttonNum - i - _NUM); } } else if (hideOrderType.Equals(OrderType.RANDOM)) { Random random = new Random(); bool[] used = new bool[buttonNum]; for (int i = _NUM; i < buttonNum; i++) used[i] = _BOOL; int count = _NUM; while (true) { int i = random.Next(buttonNum); if (!used[i]) { used[i] = _BOOL; SetH
public TaggedOutputStream(Stream proxy) : base(proxy) { }
public List<MType> Build() { isClean = _BOOL; if (!isMessagesListMutable && builders == null) { return messages; } bool allMessagesInSync = _BOOL; if (!isMessagesListMutable) { for (int i = _NUM; i < messages.Count; i++) { Message message = messages[i]; SingleFieldBuilder<MType, BType, IType> builder = builders[i]; if (builder != null) { if (!builder.Build().Equals(message)) { allMessagesInSync = _BOOL; break; } } } if (allMessagesInSync) { return messages; } } EnsureMutableMessageList(); for (int i = _NUM; i < messages.Count; i++) { messages[i] = GetMessage(i, _BOOL); } messages = messages.AsReadOnly().ToList(); isMessagesListMutable = _BOOL; return messages; }
public static void PutShort(long addr, short val) { if (UNALIGNED) { UNSAFE.PutShort(addr, val); } else { PutShortByByte(addr, val, BIG_ENDIAN); } }
using System.Security.Cryptography; public static byte[] HashTwice(byte[] input, int offset, int length) { using (SHA256 sha256 = SHA256.Create()) { byte[] firstHash = sha256.ComputeHash(input, offset, length); return sha256.ComputeHash(firstHash); } }
public PronounceableFSM(Uri url, bool scanFromFront) { this.scanFromFront = scanFromFront; using (Stream isStream = Utilities.GetInputStream(url)) { LoadText(isStream); } }
private char[] ApplyFloatPadding(char[] ca4, bool noDigits) { char[] ca5 = ca4; if (fieldWidthSet) { int i; int j; int nBlanks; if (leftJustify) { nBlanks = fieldWidth - ca4.Length; if (nBlanks > _NUM) { ca5 = new char[ca4.Length + nBlanks]; for (i = _NUM; i < ca4.Length; i++) { ca5[i] = ca4[i]; } for (j = _NUM; j < nBlanks; j++, i++) { ca5[i] = _STR; } } } else if (!leadingZeros || noDigits) { nBlanks = fieldWidth - ca4.Length; if (nBlanks > _NUM) { ca5 = new char[ca4.Length + nBlanks]; for (i = _NUM; i < nBlanks; i++) { ca5[i] = _STR; } for (j = _NUM;
public object Put(string key, object value) { int len = key.Length; if (len > m_charBuffer.Length) { m_charBuffer = new char[len]; } Node node = m_Root; for (int i = _NUM; i < len; i++) { Node nextNode = node.m_nextChar[char.ToLower(key[i])]; if (nextNode != null) { node = nextNode; } else { for (; i < len; i++) { Node newNode = new Node(); if (m_lowerCaseOnly) { node.m_nextChar[char.ToLower(key[i])] = newNode; } else { node.m_nextChar[char.ToUpper(key[i])] = newNode; node.m_nextChar[char.ToLower(key[i])] = newNode; } node = newNode; } break; } } object ret = node.m_Value; node.m_Value = value; return ret; }
public override void MakeImmutable() { if (isMutable) { if (authnStatements != null) { int length = authnStatements.Count; for (int i = _NUM; i < length; i++) { AuthnStatement authn = authnStatements[i]; authn.MakeImmutable(); } authnStatements = authnStatements.AsReadOnly(); } if (authzDecisionStatements != null) { int length = authzDecisionStatements.Count; for (int i = _NUM; i < length; i++) { AuthzDecisionStatement authz = authzDecisionStatements[i]; authz.MakeImmutable(); } authzDecisionStatements = authzDecisionStatements.AsReadOnly(); } if (attributeStatements != null) { int length = attributeStatements.Count; for (int i = _NUM; i < length; i++) { AttributeStatement attr = attributeStatements[i]; attr.MakeImmutable(); } attributeStatements = attributeStatements.AsReadOnly(); } if (statements != null) { statements = statements.AsReadOnly(); }
public override string FindLibrary(string name) { string systemName = System.MapLibraryName(name); List<Loader> loaders = GetLoaders(); for (int i = _NUM; i < loaders.Count; i++) { Loader loader = loaders[i]; Path path = loader.GetPath(systemName); if (path != null && path.CanRead()) { return path.GetNativePath(); } path = loader.GetPath(_STR + systemName); if (path != null && path.CanRead()) { return path.GetNativePath(); } } for (int i = _NUM; i < _nativePath.Count; i++) { Path path = _nativePath[i]; if (path.CanRead()) { return path.GetNativePath(); } } return base.FindLibrary(name); }
public void RemoveComponentListener(ComponentUpdateListener listener) { componentListeners.Remove(listener); }
public static _Fields FindByThriftId(int fieldId) { switch (fieldId) { case _NUM: return APPKEY; case _NUM: return SEND_TIME; case _NUM: return LOAD_INFO; case _NUM: return STATUS; default: return null; } }
public static bool IsEmpty(string text) { return text == null || text.Length == 0; }
protected byte[] AssertEncodeDecode(IGangliaMetadataMessage decl, IGangliaMessage expected) { if (expected == null) throw new ArgumentException(); var xdr = new XDROutputBuffer(IGangliaDefaults.BUFFER_SIZE); var messageEncoder = new GangliaMessageEncoder31(); var messageDecoder = new GangliaMessageDecoder31(); if (expected.IsMetricRequest()) { messageEncoder.WriteRequest(xdr, (IGangliaRequestMessage)expected); } else if (expected.IsMetricMetadata()) { messageEncoder.WriteMetadata(xdr, (IGangliaMetadataMessage)expected); } else if (expected.IsMetricValue()) { if (decl == null) throw new ArgumentException(_STR); messageEncoder.WriteMetric(xdr, decl, (IGangliaMetricMessage)expected); } else { throw new AssertionException(); } var actual = messageDecoder.Decode(xdr.GetBuffer(), _NUM, xdr.GetLength()); Assert.Equal(_STR, expected, actual); var actualData = new byte[xdr.GetLength()]; Array.Copy(xdr.GetBuffer(), _NUM, actualDa
private bool IsIndexable(string term) { return (term.Length < _NUM) && (term.Length > _NUM); }
private void SendResponse(string status, string mime, Dictionary<string, string> header, Stream data) { try { if (status == null) throw new Exception("Status cannot be null."); var outStream = mySocket.GetStream(); using (var writer = new StreamWriter(outStream)) { writer.Write("HTTP/1.1 " + status + "\r\n"); if (mime != null) { writer.Write("Content-Type: " + mime + "\r\n"); } if (header == null || !header.ContainsKey("Date")) { writer.Write("Date: " + gmtFrmt.Format(DateTime.UtcNow) + "\r\n"); } if (header != null) { foreach (var key in header.Keys) { writer.Write(key + ": " + header[key] + "\r\n"); } } writer.Write("\r\n"); writer.Flush(); if (data != null) { byte[] buff = new byte[4096]; int read; while ((read = data.Read(buff, 0, buff.Length)) > 0) { outStream.Write(b
public static string Decode(string encoded, AMEncryption encr) { if (CheckCaller()) { try { ISSecurityPermission isp = new ISSecurityPermission(_STR, _STR); if (securityManager != null) { securityManager.CheckPermission(isp); } } catch (SecurityException e) { Debug debug = Debug.GetInstance(_STR); debug.Error(_STR + _STR, e); return null; } } if (encoded == null || encoded.Length == _NUM) { return null; } byte[] encData = null; encData = Convert.FromBase64String(encoded.Trim()); if (encData == null) { return null; } byte[] rawData = encr.Decrypt(encData); if (rawData == null) { return null; } string answer = null; try { answer = System.Text.Encoding.GetEncoding(_STR).GetString(rawData); } catch (DecoderFallbackException uue) { Debug debug = Debug.GetInstance(_STR); debug.Error(_STR, uue); answer = Sys
protected void WaitForShutdownSignal() { if (mutexWaiting == null) { mutexWaiting = new object(); } lock (mutexWaiting) { try { Monitor.Wait(mutexWaiting); } catch (ThreadInterruptedException e) { if (!shutdown) { throw; } } } }
public void AddConnection(Connection connection) { if (connection == null) throw new ArgumentException(_STR); lock (connectionsLock) { Connection[] newConnections = new Connection[connections.Length + _NUM]; newConnections[_NUM] = connection; Array.Copy(connections, _NUM, newConnections, _NUM, connections.Length); connections = newConnections; } connection.AddListener(invokeListener); if (TRACE) Trace(_STR, _STR + connection); }
public double Distance(Point2D pt) { double xDistance = (pt.GetX() - x) * (pt.GetX() - x); double yDistance = (pt.GetY() - y) * (pt.GetY() - y); return Math.Sqrt(xDistance + yDistance); }
private void WriteAttribute(string namespaceUri, string attName, string attValue, XmlWriter xmlWriter) { if (namespaceUri.Equals(_STR)) { xmlWriter.WriteAttributeString(attName, attValue); } else { RegisterPrefix(xmlWriter, namespaceUri); xmlWriter.WriteStartAttribute(attName, namespaceUri); xmlWriter.WriteString(attValue); xmlWriter.WriteEndAttribute(); } }
private static int ConvertToInt(string value, int defaultValue) { string trim = value.Trim(); if (trim.Length == 0) { return defaultValue; } return int.Parse(trim); }
public ChainIterable<T> AddItem(T item) { if (item == null) throw new ArgumentNullException(nameof(item)); return (ChainIterable<T>)base.Add(EnumerableSingleton(item)); } private IEnumerable<T> EnumerableSingleton(T item) { yield return item; }
private void UpdateStateView(int itCount, ICollection<Individual<double>> gen) { Platform.RunLater(null); simPaneCtrl.WaitAfterStep(); }
public override void Run() { try { while (true) { int n = PortGetn(port, bufferAddress, MAX_EVENT_COUNT); Debug.Assert(n > _NUM); long address = bufferAddress; for (int i = _NUM; i < n; i++) { bool shutdown = ProcessEvent(address); if (shutdown) return; address += SIZEOF_PORT_EVENT; } } } catch (UnixException x) { x.PrintStackTrace(); } }
public override List<string> AllKeys() { List<string> nameFiles = new List<string>(); var files = cacheDirectory.GetFiles(); if (files == null) return nameFiles; foreach (var file in files) { if (file.Exists) { nameFiles.Add(file.Name); } } return nameFiles; }
public DialogueRecorder(DialogueSystem system) { this.settings = system.GetSettings(); }
private string GenerateUniqueFutureId() { return mIdCounter.IncrementAndGet().ToString(); }
private static void RescheduleMissedAlarms(ContentResolver cr, Context context, AlarmManagerInterface manager) { long now = System.CurrentTimeMillis(); long ancient = now - DateUtils.DAY_IN_MILLIS; string[] projection = new string[] { CalendarContract.CalendarAlerts.ALARM_TIME }; if (Build.VERSION.SdkInt >= _NUM && ContextCompat.CheckSelfPermission(context, Manifest.Permission.READ_CALENDAR) != PackageManager.PermissionGranted) { Log.Debug(TAG, _STR); return; } Cursor cursor = cr.Query(CalendarAlerts.CONTENT_URI, projection, WHERE_RESCHEDULE_MISSED_ALARMS, new string[] { now.ToString(), ancient.ToString(), now.ToString() }, SORT_ORDER_ALARMTIME_ASC); if (cursor == null) { return; } if (DEBUG) { Log.Debug(TAG, _STR + cursor.Count); } try { long alarmTime = -_NUM; while (cursor.MoveToNext()) { long newAlarmTime = cursor.GetLong(_NUM); if (alarmTime != newAlarmTime) { if (DEBUG) { Log.Warn(TAG
public void AddName(string name) { m_names.Add(name); }
public override Task<OptionalDouble> MinDoubleAsync(Func<T, double> fn) { return Task.Run(() => (OptionalDouble?)null); }
private bool ToState(LifecycleState newState) { LifecycleState state; lock (this) { state = _state; _state = newState; _lastChangeTime = CurrentTime.CurrentTime(); } if (_log != null && _log.IsLoggable(_lowLevel)) { _log.Log(_lowLevel, newState + _STR + _name); } NotifyListeners(state, newState); return _BOOL; }
public bool InitDialog() { log.Config(_STR); gbc.Anchor = GridBagConstraints.Northwest; gbc.WeightX = _NUM; gbc.WeightY = _NUM; gbc.GridY = m_line++; gbc.GridX = _NUM; gbc.GridWidth = _NUM; gbc.Insets = nullInset; gbc.Fill = GridBagConstraints.Horizontal; centerPanel.Add(Box.CreateVerticalStrut(_NUM), gbc); MClient client = MClient.Get(Env.GetCtx()); string ASPFilter = _STR; if (client.IsUseASP()) { ASPFilter = _STR + _STR + _STR + _STR + _STR + client.GetAD_Client_ID() + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + client.GetAD_Client_ID() + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + _STR + client.GetAD_Client_ID() + _STR + _STR + _STR + _STR + _ST
protected override string DateToString(DateTimeData date) { StringBuilder message = new StringBuilder(_NUM); message.Append(_STR); message.Append(_STR); Append(message, date.Month, _NUM); Append(message, (char)date.Utc, _NUM); return message.ToString(); }
private void AddTest(Test newTest) { if (m_RuleList == null) { m_RuleList = new List<Test>(); } m_RuleList.Add(newTest); }
public double NextDouble(double alpha, double lambda) { double a = alpha; double aa = -_NUM, aaa = -_NUM, b = _NUM, c = _NUM, d = _NUM, e, r, s = _NUM, si = _NUM, ss = _NUM, q0 = _NUM, q1 = _NUM, q2 = _NUM, q3 = _NUM, q4 = _NUM, q5 = -_NUM, q6 = _NUM, q7 = _NUM, q8 = -_NUM, q9 = _NUM, a1 = _NUM, a2 = -_NUM, a3 = _NUM, a4 = -_NUM, a5 = _NUM, a6 = -_NUM, a7 = _NUM, a8 = -_NUM, a9 = _NUM, e1 = _NUM, e2 = _NUM, e3 = _NUM, e4 = _NUM, e5 = _NUM, e6 = _NUM, e7 = _NUM; double gds, p, q, t, sign_u, u, v, w, x; doubl
public void Swap(int i, int j) { Debug.Assert(i < list.Count); Debug.Assert(j < list.Count); list[i] = list[j]; list[j] = list[i]; }
private List<NameValuePair> BuildIptParameters(Ipt ipt, string organisationKey) { List<NameValuePair> data = new List<NameValuePair>(); if (ipt != null && organisationKey != null) { data.Add(new NameValuePair(_STR, string.IsNullOrWhiteSpace(organisationKey) ? string.Empty : organisationKey.Trim())); data.Add(new NameValuePair(_STR, string.IsNullOrWhiteSpace(ipt.GetName()) ? string.Empty : ipt.GetName().Trim())); data.Add(new NameValuePair(_STR, string.IsNullOrWhiteSpace(ipt.GetDescription()) ? string.Empty : ipt.GetDescription().Trim())); data.Add(new NameValuePair(_STR, string.IsNullOrWhiteSpace(ipt.GetPrimaryContactType()) ? string.Empty : ipt.GetPrimaryContactType().Trim())); data.Add(new NameValuePair(_STR, string.IsNullOrWhiteSpace(ipt.GetPrimaryContactName()) ? string.Empty : ipt.GetPrimaryContactName().Trim())); data.Add(new NameValuePair(_STR, string.IsNullOrWhiteSpace(ipt.GetPrimaryContactEmail()) ? string.Empty : ipt.GetPrimaryContactEmail().Trim())); data.Add(
public static T WithCloseable<T, U>(U self, Func<U, T> action) where U : IDisposable { T result; try { result = action(self); var temp = self; self = default; // Prevent double disposal temp.Dispose(); } finally { if (self != null) { // Dispose with a warning or log message can be added here if needed // Example: Console.WriteLine("Warning: resource not disposed properly"); } } return result; }
public static bool IsMatch(string actualString, LinkedList<string> patterns, char wildCard) { bool matched = false; foreach (var pattern in patterns) { if (IsMatch(actualString, pattern, wildCard)) { matched = true; break; } } return matched; }
public synchronized void AddServer(ServerLocation location, string[] groups, ServerLoad initialLoad, long loadPollInterval) { serverGroupMap[location] = groups; LoadHolder connectionLoad = new LoadHolder(location, initialLoad.GetConnectionLoad(), initialLoad.GetLoadPerConnection(), loadPollInterval); AddGroups(connectionLoadMap, groups, connectionLoad); LoadHolder queueLoad = new LoadHolder(location, initialLoad.GetSubscriptionConnectionLoad(), initialLoad.GetLoadPerSubscriptionConnection(), loadPollInterval); AddGroups(queueLoadMap, groups, queueLoad); UpdateLoad(location, initialLoad); }
public void AddLeaf(CatalogTreeLeaf leaf) { _leaves.Add(leaf); }
private static string StampToString(long tstamp, string formatMask) { var sb = new StringBuilder(); var fmt = new System.Globalization.CultureInfo("en-US"); int[] pieces = new int[NUMIDX]; ComponentTime.UnpackBits(tstamp, pieces); sb.AppendFormat(fmt, formatMask, pieces[YIDX], pieces[MIDX], pieces[DIDX], pieces[HIDX], pieces[IIDX], pieces[SIDX], pieces[UIDX]); return sb.ToString(); }
public HttpRequest ContentLength(string value) { return ContentLength(int.Parse(value)); }
public bool Draw(Canvas canvas) { Update(); float centerX = mBounds.CenterX(); float centerY = mBounds.Height() - mRadius; canvas.Scale(_NUM, Math.Min(mGlowScaleY, _NUM) * mBaseGlowScale, centerX, _NUM); float displacement = Math.Max(_NUM, Math.Min(mDisplacement, _NUM)) - _NUM; float translateX = mBounds.Width() * displacement / _NUM; mPaint.Alpha = (int)(_NUM * mGlowAlpha); canvas.DrawCircle(centerX + translateX, centerY, mRadius, mPaint); bool oneLastFrame = _BOOL; if (mState == STATE_RECEDE && mGlowScaleY == _NUM) { mState = STATE_IDLE; oneLastFrame = _BOOL; } return mState != STATE_IDLE || oneLastFrame; }
public VNXeCommandJob ModifyLunAsync(LunModifyParam param, string resourceId) { StringBuilder urlBld = new StringBuilder(URL_RESOURCE); urlBld.Append(resourceId); urlBld.Append(URL_LUN_MODIFY_ACTION); string url = urlBld.ToString(); return PostRequestAsync(param); }
public string Replace(CharSequence target, CharSequence replacement) { if (target == null) { throw new ArgumentNullException("_STR"); } if (replacement == null) { throw new ArgumentNullException("_STR"); } string ts = target.ToString(); int index = IndexOf(ts, _NUM); if (index == -_NUM) return this; string rs = replacement.ToString(); StringBuilder buffer = new StringBuilder(count); int tl = target.Length; int tail = _NUM; do { buffer.Append(value, offset + tail, index - tail); buffer.Append(rs); tail = index + tl; } while ((index = IndexOf(ts, tail)) != -_NUM); buffer.Append(value, offset + tail, count - tail); return buffer.ToString(); }
public void Delete() { Close(); DeleteContents(directory); }
public bool SimilarTo(object o) { if (o == null) { return _BOOL; } if (!(o is SemanticConcept otherConcept)) { return _BOOL; } HashSet<int> synsetIntersection = new HashSet<int>(this.synsets); synsetIntersection.IntersectWith(otherConcept.synsets); if (synsetIntersection.Count > 0) { return _BOOL; } HashSet<string> conceptIntersection = new HashSet<string>(this.concepts); conceptIntersection.IntersectWith(otherConcept.concepts); return conceptIntersection.Count > 0; }
public void JGoogleAnalyticsTracker(string eventType, string version, string trackerId) { var tracker = new JGoogleAnalyticsTracker(_STR, version, trackerId); var focusPoint = new FocusPoint(eventType.ToLower()); tracker.TrackAsynchronously(focusPoint); }
protected Tuple AddInternal(Tuple t) { if (m_tuples.Add(t)) { return t; } else { return null; } }
public void Put(Song song) { if (!mSongs.Contains(song)) { mSongs.Add(song); } }
public PsiQuery ChildrenNamed<T>(string name) where T : PsiNamedElement { List<PsiElement> result = new List<PsiElement>(); foreach (var element in myPsiElements) { foreach (var child in PsiTreeUtil.FindChildrenOfType<T>(element)) { if (name.Equals(child.GetName())) { result.Add(child); } } } return new PsiQuery(result.ToArray()); }
private void EmitMapPut(MethodInfo method, string fieldName, StringBuilder builder) { builder.Append(_STR); builder.Append(GetMapPutterName(fieldName)); builder.Append(_STR); builder.Append(GetTypeArgumentImplName(method.ReturnType.GetGenericArguments()[0], _NUM)); builder.Append(_STR); builder.Append(GetEnsureName(fieldName)); builder.Append(_STR); builder.Append(fieldName); builder.Append(_STR); builder.Append(_STR); }
public override bool Equals(object obj) { return obj.GetHashCode() == this.GetHashCode(); }
public override string ToString() { if (GetUserObject() is TvShow tvShow) { return tvShow.GetTitle(); } return base.ToString(); }
private List<string> ParseJson(string text) { text = text.Substring(text.IndexOf(_STR) + SIZE_OF_EVENTS, text.IndexOf(_STR)); List<string> events = new List<string>(); if (string.IsNullOrEmpty(text)) { return events; } int startIndex = _NUM, endIndex = _NUM; while (endIndex != -_NUM) { endIndex = text.IndexOf(_STR, startIndex + DELIMITER_SIZE); string eventText = (endIndex == -_NUM ? text.Substring(startIndex) : text.Substring(startIndex, endIndex - startIndex)); Regex pattern = new Regex(_STR); eventText = pattern.Replace(eventText, _STR); pattern = new Regex(_STR); Match matcher = pattern.Match(eventText); if (matcher.Success) { eventText = matcher.Groups[_NUM].Value + _STR; } eventText = _STR + eventText; startIndex = endIndex + _NUM; events.Add(eventText); } events.Reverse(); return events; }
public override void RemoveTableModelListener(TableModelListener l) { m_Listeners.Remove(l); }
public StrBuilder Replace(int startIndex, int endIndex, string replaceStr) { endIndex = ValidateRange(startIndex, endIndex); int insertLen = (replaceStr == null ? _NUM : replaceStr.Length); ReplaceImpl(startIndex, endIndex, endIndex - startIndex, replaceStr, insertLen); return this; }
public static void AddPermissionRecursive(string path, PosixFilePermissions permission) { ChangePermissionsRecursive(path, PermissionChange.Add, new HashSet<PosixFilePermissions> { permission }); }
private void RunTimeoutTask() { while (IsActive()) { ReapTimeouts(); try { Thread.Sleep(_timeoutReapInterval); } catch (Exception) { // No action needed } } }
public IDevice LearnEntity(long macAddress, short? vlan, int? ipv4Address, long? switchDPID, int? switchPort, bool processUpdates) { var listeners = deviceListeners.GetOrderedListeners(); if (!processUpdates) { deviceListeners.ClearListeners(); } VlanVid v; IPv4Address i; DatapathId d; OFPort p; if (vlan.HasValue && vlan.Value <= _NUM) vlan = null; if (ipv4Address.HasValue && ipv4Address.Value == _NUM) ipv4Address = null; if (!vlan.HasValue) { v = VlanVid.OfVlan(-_NUM); } else { v = VlanVid.OfVlan(vlan.Value); } if (!ipv4Address.HasValue) { i = IPv4Address.NONE; } else { i = IPv4Address.Of(ipv4Address.Value); } if (!switchDPID.HasValue) { d = DatapathId.Of(_NUM); } else { d = DatapathId.O
public static bool IsValidTypeSignature(string sig, bool allowVoid) { int len = sig.Length; return CheckTypeSignature(sig, _NUM, len, allowVoid) == len; }
public void TestCase19() { byte[] aBytes = { -_NUM, _NUM, _NUM, _NUM, _NUM, -_NUM, _NUM, -_NUM, _NUM, _NUM }; byte[] bBytes = { _NUM, -_NUM, _NUM, _NUM, _NUM }; int aSign = _NUM; int bSign = -_NUM; byte[] rBytes = { _NUM, -_NUM, _NUM, _NUM, _NUM }; BigInteger aNumber = new BigInteger(aSign, aBytes); BigInteger bNumber = new BigInteger(bSign, bBytes); BigInteger result = BigInteger.Remainder(aNumber, bNumber); byte[] resBytes = result.ToByteArray(); for (int i = _NUM; i < resBytes.Length; i++) { Assert.IsTrue(resBytes[i] == rBytes[i]); } Assert.AreEqual(_NUM, result.Sign); }
public static bool HasVisibleChildren(ActionGroup group, PresentationFactory factory, ActionManager actionManager, PerspectiveManager perspectiveManager) { ActionEvent event = new ActionEvent(factory.GetPresentation(group), actionManager, perspectiveManager); foreach (var anAction in group.GetChildren(event)) { if (anAction == null) { Log.Error(typeof(Utils), _STR + group + _STR + factory.GetPresentation(group)); continue; } if (anAction is Separator) { continue; } var presentation = factory.GetPresentation(anAction); anAction.Update(new ActionEvent(presentation, actionManager, perspectiveManager)); if (anAction is ActionGroup childGroup) { if (childGroup.IsPopup()) { if (!presentation.IsVisible()) { continue; } } if (HasVisibleChildren(childGroup, factory, actionManager, perspectiveManager)) { return _BOOL; } } else if (presentation.IsVisible()) { return _BOOL; } } return _BOOL; }
private static void CheckArgReferences(string typeSnippet, int numberOfArgs) { MatchCollection argRefMatches = Regex.Matches(typeSnippet, ARG_REF_PATTERN); foreach (Match argRefMatch in argRefMatches) { int index = int.Parse(argRefMatch.Groups[_NUM].Value) - _NUM; Preconditions.CheckArgument(index >= _NUM, _STR, argRefMatch.Groups[_NUM].Value); Preconditions.CheckArgument(index < numberOfArgs, _STR, argRefMatch.Groups[_NUM].Value); } }
public void Randomize() { RandomizeIncomingWeights(); NormalizeIncomingWeights(); }
using System; using System.Drawing; using System.Drawing.Imaging; using System.IO; public static void SaveAsImage(int x, int y, int width, int height, string path, ImageFormat format, int quality) { Bitmap bmp = GetPixelsFromBuffer(x, y, width, height); try { using (FileStream fs = new FileStream(path, FileMode.Create)) { EncoderParameters encoderParameters = new EncoderParameters(1); encoderParameters.Param[0] = new EncoderParameter(Encoder.Quality, quality); ImageCodecInfo encoder = GetEncoder(format); bmp.Save(fs, encoder, encoderParameters); } } catch (FileNotFoundException e) { throw new FileNotFoundException(e.Message, e); } } private static ImageCodecInfo GetEncoder(ImageFormat format) { ImageCodecInfo[] codecs = ImageCodecInfo.GetImageDecoders(); foreach (ImageCodecInfo codec in codecs) { if (codec.FormatID == format.Guid) { return codec; } } return null; }
private bool IsFileValid(FileInfo file, string methodName) { if (file == null) { Log.PrintConcatLine(name, _STR, methodName, _STR); return false; } string fileName = file.Name; if (string.IsNullOrEmpty(fileName) || fileName.Length == 0) { Log.PrintConcatLine(name, _STR + methodName, _STR); return false; } return true; }
public void RemoveSrcClass(SootClass clz) { srcClasses.Remove(clz.GetName()); }
private void UpdateRange(double value) { mMinValue = Math.Min(mMinValue, value); mMaxValue = Math.Max(mMaxValue, value); }
public JSONStringer Close(Scope empty, Scope nonempty, string closeBracket) { Scope context = Peek(); if (context != nonempty && context != empty) { throw new JSONException(_STR); } stack.RemoveAt(stack.Count - _NUM); if (context == nonempty) { Newline(); } out.Append(closeBracket); return this; }
public void Append(byte[] bytes) { Append(bytes, _NUM, bytes.Length); }
public static bool EnoughSpaceOnPhone(long updateSize) { return GetRealSizeOnPhone() > updateSize; }
public void CancelButtonActionPerformed() { editMode = _BOOL; curNode = null; addButton.Visible = _BOOL; editButton.Visible = _BOOL; deleteButton.Visible = _BOOL; doneButton.Visible = _BOOL; updateButton.Visible = _BOOL; cancelButton.Visible = _BOOL; nodeAddrField.Visible = _BOOL; nodeAddrStatic.Visible = _BOOL; statusText1.Text = stdStatus1; statusText2.Text = stdStatus2; statusText3.Text = stdStatus3; }
public void AddAttribute(AttributedCharacterIterator.Attribute attribute, object value) { if (attribute == null) { throw new ArgumentNullException(nameof(attribute)); } if (string.IsNullOrEmpty(text)) { throw new ArgumentException("Text cannot be empty", nameof(text)); } List<Range> ranges; if (!attributeMap.TryGetValue(attribute, out ranges)) { ranges = new List<Range>(1); attributeMap[attribute] = ranges; } else { ranges.Clear(); } ranges.Add(new Range(1, text.Length, value)); }
private object StringToValue(object oldValue, string newValue) { if (oldValue is string) { return newValue; } else if (oldValue is int) { return int.Parse(newValue); } else if (oldValue is Blob) { try { return DatabaseHelper.GetSafeBlob(Encoding.UTF8.GetBytes(newValue)); } catch (SQLException e) { throw new ReplicatorException(_STR + e.Message, e); } } else { return newValue; } }
public void AddNodesInDocOrder(DTMIterator iterator, XPathContext support) { if (!m_mutable) throw new InvalidOperationException(XSLMessages.CreateXPATHMessage(XPATHErrorResources.ER_NODESETDTM_NOT_MUTABLE, null)); int node; while (DTM.NULL != (node = iterator.NextNode())) { AddNodeInDocOrder(node, support); } }
public string ToZString() { StringBuilder buffer = new StringBuilder(_NUM); try { PrintZ(buffer); } catch (IOException e) { throw new Exception(_STR, e); } return buffer.ToString(); }
public TrieDictionary<T> Build(int baseId) { byte[] trieBytes = BuildTrieBytes(baseId); TrieDictionary<T> r = new TrieDictionary<T>(trieBytes); return r; }
public void RecordState(DialogueState state, string name) { states[name] = state; if (!listModel.Contains(name)) { int position = name.Contains(CURRENT) ? _NUM : Math.Min(_NUM, listModel.Count); listModel.Insert(position, name); } }
public int WriteUTF8(CharSequence chars, int off, int len) { if (len > Remaining()) { return WriteUTF8Slow(chars, off, len); } Block block = Current; int limit = block.Limit; char ch = '\0'; int octets = 0; while (len > 0) { ch = chars.CharAt(off); if (ch >= UTF8_2_OCTET_MIN_VALUE) { break; } block.Data[limit++] = (byte)ch; octets++; off++; len--; } block.Limit = limit; if (len > 0) { if (ch < UTF8_3_OCTET_MIN_VALUE) { return octets + WriteUTF8UpTo2Byte(chars, off, len); } if (ch >= LOW_SURROGATE_FIRST && ch <= LOW_SURROGATE_LAST) { throw new ArgumentException("Invalid character: " + ch); } if (ch >= HIGH_SURROGATE_FIRST && ch <= HIGH_SURROGATE_LAST) { return octet
public GeoServerWPSClient(GeoServerConnection connection) { this.connection = connection; }
protected ConnectionStateSSLv3(SSLSessionImpl session) { try { CipherSuite cipherSuite = session.CipherSuite; bool isExportable = cipherSuite.IsExportable(); hashSize = cipherSuite.GetMACLength(); int keySize = isExportable ? cipherSuite.KeyMaterial : cipherSuite.ExpandedKeyMaterial; int ivSize = cipherSuite.IvSize; blockSize = cipherSuite.GetBlockSize(); string algName = cipherSuite.GetBulkEncryptionAlgorithm(); string hashName = cipherSuite.GetHashName(); if (logger != null) { logger.Println(_STR); logger.Println(_STR + session.GetCipherSuite()); logger.Println(_STR + algName); logger.Println(_STR + hashName); logger.Println(_STR + hashSize); logger.Println(_STR + blockSize); logger.Println(_STR + ivSize); logger.Println(_STR + keySize); } byte[] clientRandom = session.ClientRandom; byte[] serverRandom = session.ServerRandom; byte[] keyBlock = new byte[_NUM * hashSize + _NUM * keySize + _NUM * ivSize]; byte[] seed = new by
static bool VerifyZipFile(FileInfo file) { try { using (var zipFile = ZipFile.OpenRead(file.FullName)) { return true; } } catch (InvalidDataException ex) { Console.WriteLine($"Warning: {file.FullName} is not a valid zip file. {ex.Message}"); } catch (IOException ex) { Console.WriteLine($"Warning: {file.FullName}. {ex.Message}"); } return false; }
long Cleanup(long now) { int inUseConnectionCount = _NUM; int idleConnectionCount = _NUM; RealConnection longestIdleConnection = null; long longestIdleDurationNs = long.MinValue; lock (this) { foreach (var connection in connections.ToList()) { if (PruneAndGetAllocationCount(connection, now) > _NUM) { inUseConnectionCount++; continue; } idleConnectionCount++; long idleDurationNs = now - connection.IdleAtNanos; if (idleDurationNs > longestIdleDurationNs) { longestIdleDurationNs = idleDurationNs; longestIdleConnection = connection; } } if (longestIdleDurationNs >= this.keepAliveDurationNs || idleConnectionCount > this.maxIdleConnections) { connections.Remove(longestIdleConnection); } else if (idleConnectionCount > _NUM) { return keepAliveDurationNs - longestIdleDurationNs; } else if (inUseConnectionCount > _NUM) { return keepAliveDurationNs; } else { cleanupRunning = _BOOL; return -_
public StateInfo() { // Not the preferred way to create one of these; it's full of defaults. }
public bool Compare(object expected, object current) { if (current != null) { return current.Equals(expected); } else if (expected != null) { return expected.Equals(_NUM); } return false; }
private static byte[] GenerateSeed() { try { using (var seedBuffer = new MemoryStream()) using (var seedBufferOut = new BinaryWriter(seedBuffer)) { seedBufferOut.Write(DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()); seedBufferOut.Write(DateTime.UtcNow.Ticks); seedBufferOut.Write(System.Diagnostics.Process.GetCurrentProcess().Id); seedBufferOut.Write(System.Security.Principal.WindowsIdentity.GetCurrent().User.Value.GetHashCode()); seedBufferOut.Write(Encoding.UTF8.GetBytes(BUILD_FINGERPRINT_AND_DEVICE_SERIAL)); return seedBuffer.ToArray(); } } catch (IOException e) { throw new SecurityException(_STR, e); } }
bool NeedToCheckExclude() { return _BOOL; }
public static byte[] Decode(string hexa) { if (hexa == null) { throw new CoderException(_STR); } if (hexa.Length % _NUM != 0) { throw new CoderException(_STR); } int tamArray = hexa.Length / _NUM; byte[] retorno = new byte[tamArray]; for (int i = 0; i < tamArray; i++) { retorno[i] = HexToByte(hexa.Substring(i * _NUM, _NUM)); } return retorno; }
private List<UserNamespaceAuthorization> CreateUserNamespaceAuthorizationsFromEntities(List<UserNamespaceAuthorizationEntity> userNamespaceAuthorizationEntities) { List<UserNamespaceAuthorization> userNamespaceAuthorizations = new List<UserNamespaceAuthorization>(); foreach (UserNamespaceAuthorizationEntity userNamespaceAuthorizationEntity in userNamespaceAuthorizationEntities) { userNamespaceAuthorizations.Add(CreateUserNamespaceAuthorizationFromEntity(userNamespaceAuthorizationEntity)); } return userNamespaceAuthorizations; }
private void ReadHeader() { this.dataHeader = new DCTDataHeader(this, this.config); }
public override synchronized void Reset() { pos = _NUM; }
protected T EngineGetKeySpec<T>(Key key, Type keySpec) where T : KeySpec { BigInteger p, q, g, x, y; if (key != null) { if (keySpec == null) { throw new ArgumentNullException("_STR"); } if (key is DSAPrivateKey privateKey) { if (keySpec == typeof(DSAPrivateKeySpec)) { x = privateKey.X; var parameters = privateKey.Parameters; p = parameters.P; q = parameters.Q; g = parameters.G; return (T)(object)new DSAPrivateKeySpec(x, p, q, g); } if (keySpec == typeof(PKCS8EncodedKeySpec)) { return (T)(object)new PKCS8EncodedKeySpec(key.GetEncoded()); } throw new InvalidKeySpecException("_STR"); } if (key is DSAPublicKey publicKey) { if (keySpec == typeof(DSAPublicKeySpec)) { y = publicKey.Y; var parameters = publicKey.Parameters; p = parameters.
protected void DrawText(string text1, string text2, int x, int y, Canvas canvas) { if (textPaint == null) { Paint p = new Paint(); p.SetTypeface(RobotoLightTypeface.GetInstance(context)); p.SetColor(textColor); p.SetTextSize(_NUM * pixelDensity); textPaint = p; } float w = textPaint.MeasureText(text1, _NUM, text1.Length); int offset = (int)(w / _NUM); canvas.DrawText(text1, x - offset, y + (_NUM * pixelDensity), textPaint); w = textPaint.MeasureText(text2, _NUM, text2.Length); offset = (int)(w / _NUM); canvas.DrawText(text2, x - offset, y + (_NUM * pixelDensity), textPaint); }
public bool IsLessThanOrEqualTo(Percent percent) { AssertDefined(); decimal thisValue = NotNull(this); decimal parameter = NotNull(percent); return (thisValue.CompareTo(parameter) <= 0); }
public object Clone() { PredicatedNodeTest clone = (PredicatedNodeTest)base.Clone(); if (m_proximityPositions != null && m_proximityPositions == clone.m_proximityPositions) { clone.m_proximityPositions = new int[m_proximityPositions.Length]; Array.Copy(m_proximityPositions, _NUM, clone.m_proximityPositions, _NUM, m_proximityPositions.Length); } if (clone.m_lpi == this) clone.m_lpi = (LocPathIterator)clone; return clone; }
public static bool PointOutsidePrefSize(DataGridView table, int row, int column, Point p) { if (table.Columns[column].Index != _NUM || row == -_NUM) { return _BOOL; } DataGridViewCell cell = table.Rows[row].Cells[column]; object value = cell.Value; // Assuming a method GetTableCellRendererComponent exists that mimics the Java method behavior Control cellControl = GetTableCellRendererComponent(table, value, false, false, row, column); Size itemSize = cellControl.PreferredSize; Rectangle cellBounds = table.GetCellDisplayRectangle(column, row, true); cellBounds.Width = itemSize.Width; cellBounds.Height = itemSize.Height; Debug.Assert(p.X >= cellBounds.X && p.Y >= cellBounds.Y); return p.X > cellBounds.Right || p.Y > cellBounds.Bottom; }
public Builder AddSourceFolder(FileInfo folder) { foldersToScan.Add(folder); return this; }
public Method SuspendSRDFGroupMethod(Uri systemUri, RemoteDirectorGroup group, List<Uri> sourceVolumes, List<Uri> targetVolumes) { return new Workflow.Method(SUSPEND_SRDF_GROUP_METHOD, systemUri, group, sourceVolumes, targetVolumes); }
private void FieldGoalAtt(Team offense, Team defense) { double fgDistRatio = Math.Pow((_NUM - gameYardLine) / _NUM, _NUM); double fgAccRatio = Math.Pow((_NUM - gameYardLine) / _NUM, _NUM); double fgDistChance = (GetHFAdv() + offense.GetK(_NUM).RatKickPow - fgDistRatio * _NUM); double fgAccChance = (GetHFAdv() + offense.GetK(_NUM).RatKickAcc - fgAccRatio * _NUM); if (fgDistChance > _NUM && fgAccChance * new Random().NextDouble() > _NUM) { if (gamePoss) { homeScore += _NUM; HomeKStats[_NUM]++; HomeKStats[_NUM]++; } else { awayScore += _NUM; AwayKStats[_NUM]++; AwayKStats[_NUM]++; } gameEventLog += GetEventPrefix() + offense.Abr + _STR + offense.GetK(_NUM).Name + _STR + (_NUM - gameYardLine) + _STR; AddPointsQuarter(_NUM); offense.GetK(_NUM).St
public static byte[] Unzip(byte[] input) { using (var outStream = new MemoryStream(EXPECTED_COMPRESSION_RATIO * input.Length)) using (var inStream = new GZipStream(new MemoryStream(input), CompressionMode.Decompress)) { byte[] buffer = new byte[BUF_SIZE]; int bytesRead; while ((bytesRead = inStream.Read(buffer, 0, buffer.Length)) > 0) { outStream.Write(buffer, 0, bytesRead); } return outStream.ToArray(); } }
public override double CalculateM(double delta, double epsilon) { double i = _NUM; while (Conf(i, delta) > epsilon / _NUM) { i = i + _NUM; } if (i > _NUM) { i = i - _NUM; } while (Conf(i, delta) > (epsilon / _NUM)) { i++; } return Math.Ceiling(i); }
public static SslServerSocket CreateServerSocket(int port, IPAddress bindAddress) { SslServerSocket socket = null; if (SysProperties.ENABLE_ANONYMOUS_TLS) { RemoveAnonFromLegacyAlgorithms(); } SetKeystore(); ServerSocketFactory factory = SslServerSocketFactory.Default; SslServerSocket secureSocket; if (bindAddress == null) { secureSocket = (SslServerSocket)factory.CreateServerSocket(port); } else { secureSocket = (SslServerSocket)factory.CreateServerSocket(port, _NUM, bindAddress); } secureSocket.EnabledProtocols = DisableSSL(secureSocket.EnabledProtocols); if (SysProperties.ENABLE_ANONYMOUS_TLS) { string[] cipherSuites = EnableAnonymous(secureSocket.EnabledCipherSuites, secureSocket.SupportedCipherSuites); secureSocket.EnabledCipherSuites = cipherSuites; } socket = secureSocket; return socket; }
public void PrintBytes(byte[] data, int offset, int length) { const int _NUM = 3; // Assuming _NUM is defined as 3 const string _STR = "="; // Assuming _STR is defined as "=" while (length >= _NUM) { int chunk = ((data[offset] & 0xFF) << 16) + ((data[offset + 1] & 0xFF) << 8) + (data[offset + 2] & 0xFF); os.Write(Base64Encode(chunk >> 18)); os.Write(Base64Encode((chunk >> 12) & 0x3F)); os.Write(Base64Encode((chunk >> 6) & 0x3F)); os.Write(Base64Encode(chunk & 0x3F)); offset += _NUM; length -= _NUM; } if (length == 2) { int chunk = ((data[offset] & 0xFF) << 16) + ((data[offset + 1] & 0xFF) << 8); os.Write(Base64Encode(chunk >> 18)); os.Write(Base64Enc
public void DeleteVVset(string nativeId) { _log.Info(_STR); ClientResponse clientResp = null; string path = string.Format(URI_DELETE_CG, nativeId); _log.Info(_STR + path); try { clientResp = Delete(path); if (clientResp == null) { _log.Error(_STR); throw new HP3PARException(_STR); } else if (clientResp.GetStatus() != _NUM) { string errResp = GetResponseDetails(clientResp); throw new HP3PARException(errResp); } else { _log.Info(_STR); } } catch (Exception e) { throw e; } finally { if (clientResp != null) { clientResp.Close(); } _log.Info(_STR); } }
public void Accept(AnnotationVisitor av) { if (av != null) { if (values != null) { for (int i = _NUM; i < values.Count; i += _NUM) { string name = (string)values[i]; object value = values[i + _NUM]; Accept(av, name, value); } } av.VisitEnd(); } }
private int FindKeyCommentIndex(string keyName) { for (int i = _NUM; i < keyValComments.Count; i++) { string t = keyValComments[i]; string targetedKey = _STR + keyName + _STR; if (t.StartsWith(targetedKey)) { return i; } } if (log.IsDebugEnabled) { log.Debug(_STR + keyName); } return -_NUM; }
public bool IsExpired() { return (cookieExpiryDate != null && cookieExpiryDate.Value.Ticks <= DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()); }
public static void CloseQuietly(IDisposable disposable) { if (disposable != null) { try { disposable.Dispose(); } catch (Exception) { // Ignored } } }
public static bool IsAddToHomeIntentSupported(Context context) { PackageManager pm = context.PackageManager; Intent intent = new Intent(Intent.ActionInstallShortcut); IList<ResolveInfo> receivers = pm.QueryBroadcastReceivers(intent, PackageInfoFlags.MatchDefaultOnly); return receivers.Count > 0; }
public class RoundedIconGenerator { private int mIconWidthPx; private int mIconHeightPx; private int mCornerRadiusPx; private RectF mBackgroundRect; private Paint mBackgroundPaint; private TextPaint mTextPaint; private float mTextHeight; private float mTextYOffset; public RoundedIconGenerator(int iconWidthPx, int iconHeightPx, int cornerRadiusPx, int backgroundColor, float textSizePx) { mIconWidthPx = iconWidthPx; mIconHeightPx = iconHeightPx; mCornerRadiusPx = cornerRadiusPx; mBackgroundRect = new RectF(0, 0, mIconWidthPx, mIconHeightPx); mBackgroundPaint = new Paint(PaintFlags.AntiAlias) { Color = backgroundColor }; mTextPaint = new TextPaint(PaintFlags.AntiAlias) { Color = Color.White, FakeBoldText = true, TextSize = textSizePx }; var textFontMetrics = mTextPaint.GetFontMetrics(); mTextHeight = (float)Math.Ceiling(textFontMetrics.Bottom - textFontMetrics.Top); mTextYOffset = -t
public InMemoryEntryStore() { entries = new Dictionary<TKey, TValue>(); topLevelEntries = new HashSet<T>(); children = new Dictionary<TKey, List<TChild>>(); }
public void PersistConnection(Connection connection) { MqttConnectOptions conOpts = connection.GetConnectionOptions(); MqttMessage lastWill = conOpts.GetWillMessage(); SQLiteDatabase db = GetWritableDatabase(); ContentValues values = new ContentValues(); values.Put(COLUMN_HOST, connection.GetHostName()); values.Put(COLUMN_PORT, connection.GetPort()); values.Put(COLUMN_CLIENT_ID, connection.GetId()); values.Put(COLUMN_SSL, connection.IsSSL()); values.Put(COLUMN_KEEP_ALIVE, conOpts.GetKeepAliveInterval()); values.Put(COLUMN_TIME_OUT, conOpts.GetConnectionTimeout()); values.Put(COLUMN_USER_NAME, conOpts.GetUserName()); values.Put(COLUMN_TOPIC, conOpts.GetWillDestination()); char[] password = conOpts.GetPassword(); values.Put(COLUMN_CLEAN_SESSION, conOpts.IsCleanSession() ? _NUM : _NUM); values.Put(COLUMN_PASSWORD, password != null ? new string(password) : null); values.Put(COLUMN_MESSAGE, lastWill != null ? System.Text.Encoding.UTF8.GetString(lastWill.GetPayload()) : null); values.Put(COLUMN_QOS, lastWill != null ? lastWill.GetQo
public ClassAnnotator(URL[] codebase, Properties props) { if (props != null) { properties.PutAll(props); } SetAnnotationURLs(codebase); }
public int Next() { return Mix(gen.GetAndIncrement()); }
public CholeskyDecomposition(Matrix Arg) { double[][] A = Arg.getArray(); int n = Arg.getRowDimension(); double[][] L = new double[n][]; for (int i = 0; i < n; i++) L[i] = new double[n]; bool isspd = (Arg.getColumnDimension() == n); for (int j = 0; j < n; j++) { double[] Lrowj = L[j]; double d = 0.0; for (int k = 0; k < j; k++) { double[] Lrowk = L[k]; double s = 0.0; for (int i = 0; i < k; i++) { s += Lrowk[i] * Lrowj[i]; } Lrowj[k] = s = (A[j][k] - s) / L[k][k]; d += s * s; isspd = isspd && (A[k][j] == A[j][k]); } d = A[j][j] - d; isspd = isspd &
public Stream Put(URLConnection connection, bool flushCacheOnClose) { string key = GetKey(connection); if (key == null) return null; if (!IsCacheable((HttpURLConnection)connection)) { try { cache.Remove(key); return null; } catch (IOException) { return null; } } string etag = connection.GetHeaderField(HEADER_ETAG); if (etag == null || etag.Length == _NUM) return null; Editor editor; try { editor = cache.Edit(key); } catch (IOException) { return null; } if (editor == null) return null; try { editor.Set(ETAG, etag); } catch (IOException) { try { editor.Abort(); } catch (IOException) { } return null; } Stream input; try { input = connection.GetInputStream(); if (!(input is InflaterInputStream) && ENCODING_GZIP.Equals(connection.GetHeaderField(HEADER_CONTENT_ENCODING))) { input = ne
public static string[] ParseTitle(string title) { string[] v = { "", "" }; if (title == null) return v; var pattern = new Regex("", RegexOptions.IgnoreCase); var match = pattern.Match(title); if (match.Success) { v[0] = match.Groups[0].Value; v[1] = match.Groups[1].Value; } else { v[0] = title; } return v; }
public string Sel() { return mSelection.ToString(); }
public double CalculateExcitatoryRatio() { double excitatoryRatio = (double)exSynapseSet.Count / size(); if (double.IsNaN(excitatoryRatio)) { return _NUM; } return excitatoryRatio; }
public void RootRemoved(ISVNRepositoryLocation root) { foreach (var listener in listeners) { listener.RepositoryRemoved(root); } }
public synchronized void Insert(double priority, object data) { numElements++; if (numElements == queue.Length) { PriorityQueueNode[] tmp = new PriorityQueueNode[(int)(queue.Length * _NUM)]; Array.Copy(queue, _NUM, tmp, _NUM, queue.Length); for (int i = queue.Length; i < tmp.Length; i++) { tmp[i] = new PriorityQueueNode(); } queue = tmp; } queue[numElements].data = data; queue[numElements].priority = priority; Reheapify(numElements); }
protected Message() { }
protected string WrapLinuxCommand(string command) { string setGroup = _STR + GetGid() + _STR + GetGid() + _STR + GetGid() + _STR; string setUser = _STR + GetUid() + _STR + GetUid() + _STR + GetGid() + _STR; string chownCommand = _STR; return setGroup + _STR + setUser + _STR + chownCommand + _STR + command + _STR + chownCommand; }
public AbstractDMLQuery ParseSqlQuery(SQLQuery sqlQuery, ISpaceProxy space) { AbstractDMLQuery query = (AbstractDMLQuery)GetQueryFromCache(GetUniqueKey(sqlQuery)); try { if (query == null) { if (_logger.IsLoggable(Level.Fine)) { _logger.Fine(_STR); } SqlParser parser = InitParser(sqlQuery.GetQuery()); query = Parse(parser); query.SetTableName(sqlQuery.GetTypeName()); query.ValidateQuery(space); if (!query.IsPrepared() && !query.ContainsSubQueries()) { query.Build(); } AddQueryToCache(GetUniqueKey(sqlQuery), query); if (!query.IsPrepared()) { return query; } } query = query.Clone(); return query; } catch (SQLException sqlEx) { if (_logger.IsLoggable(Level.Fine)) { _logger.Log(Level.Fine, _STR + sqlQuery.GetQuery() + _STR, sqlEx); } throw sqlEx; } catch (Exception t) { if (_logger.IsLoggable(Level.Fine))
private int IndexOfElementInLevel(int element, int[] level) { for (int i = _NUM; i < level.Length; i++) { if (level[i] == element) { return i; } } throw new Exception(_STR + m_nodes[element].ID + _STR + _STR); }
public int Size() { return _attrs.Count; }
public string ConsumeTagName() { int start = pos; while (!IsEmpty() && (MatchesWord() || MatchesAny(_STR, _STR, _STR))) { pos++; } return queue.Substring(start, pos - start); }
public void DeepSort(int[] setFeatureSequence) { featureSequence = setFeatureSequence; numberOfLeaves = _NUM; tree = new MaryNode(_NUM, featureVectors.Length); SortNode(_NUM, tree); }
public void RemoveListeners() { listeners.Clear(); }
public string Decrypt(string sCipherText) { int nLen = (sCipherText.Length >> _NUM) & ~_NUM; if (nLen < BlowfishECB.BLOCKSIZE) return null; byte[] cbciv = new byte[BlowfishECB.BLOCKSIZE]; int nNumOfBytes = BinConverter.BinHexToBytes(sCipherText, cbciv, _NUM, _NUM, BlowfishECB.BLOCKSIZE); if (nNumOfBytes < BlowfishECB.BLOCKSIZE) return null; m_bfish.SetCBCIV(cbciv); nLen -= BlowfishECB.BLOCKSIZE; if (nLen == _NUM) return _STR; byte[] buf = new byte[nLen]; nNumOfBytes = BinConverter.BinHexToBytes(sCipherText, buf, BlowfishECB.BLOCKSIZE * _NUM, _NUM, nLen); if (nNumOfBytes < nLen) return null; m_bfish.Decrypt(buf); int nPadByte = buf[buf.Length - _NUM] & _NUM; if ((nPadByte > _NUM) || (nPadByt
public static double L_RankLoss(int[] y, int[] r) { int L = y.Length; List<int> tI = new List<int>(); List<int> fI = new List<int>(); for (int j = _NUM; j < L; j++) { if (y[j] == _NUM) { tI.Add(j); } else { fI.Add(j); } } if (tI.Count > 0 && fI.Count > 0) { int c = _NUM; foreach (int k in tI) { foreach (int l in fI) { if (Position(k, r) < Position(l, r)) { c++; } } } return (double)c / (double)(tI.Count * fI.Count); } else { return _NUM; } }
private double AddRecursively(List<double[]> hull, Hierarchy<Cluster<Model>> hier, Cluster<Model> clus) { DBIDs ids = clus.GetIDs(); double weight = ids.Size(); foreach (var iter in ids.Iter()) { if (!iter.Valid()) continue; double[] projP = proj.FastProjectDataToRenderSpace(rel.Get(iter)); if (double.IsNaN(projP[_NUM]) || projP[_NUM] != projP[_NUM]) { continue; } hull.Add(projP); } foreach (var iter in hier.IterChildren(clus)) { if (!iter.Valid()) continue; weight += _NUM * AddRecursively(hull, hier, iter.Get()); } return weight; }
public void AttributeUpdate(PrintServiceAttributeEvent psae) { Logger.Fine(_STR + psae); }
public static bool DecodeToFile(string dataToDecode, string filename) { bool success = false; using (var bos = new System.IO.FileStream(filename, System.IO.FileMode.Create, System.IO.FileAccess.Write)) { try { var buffer = System.Convert.FromBase64String(dataToDecode); bos.Write(buffer, 0, buffer.Length); success = true; } catch (System.Exception) { success = false; } } return success; }
public void Evict() { AssertOpen(); bool isEmpty; lock (this) { isEmpty = pool.IsEmpty(); } if (!isEmpty) { if (softMinEvictableIdleTimeMillis > _NUM) { int numToEvict = GetNumIdle() - GetMinIdle(); Evict(DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond - softMinEvictableIdleTimeMillis, numToEvict); } if (minEvictableIdleTimeMillis > _NUM) { int numToEvict = GetNumIdle(); Evict(DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond - minEvictableIdleTimeMillis, numToEvict); } } }
protected void GenerateRandomPopulation(int populationSize) { logger.Debug(_STR); for (int i = _NUM; i < populationSize; i++) { T individual = chromosomeFactory.GetChromosome(); foreach (var fitnessFunction in this.fitnessFunctions) { individual.AddFitness(fitnessFunction); } population.Add(individual); if (IsFinished()) break; } logger.Debug(_STR + population.Count + _STR); }
public Session() { long uptime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); mMainHandler = new Handler(Looper.MainLooper); mTimestamp = (uptime / _NUM) << _NUM & (((uptime - ((uptime / _NUM) * _NUM)) >> _NUM) / _NUM); mOrigin = _STR; try { sSignal.Wait(); } catch (ThreadInterruptedException e) { } }
public List<Visitante> Listar() { List<Visitante> dados = new List<Visitante>(); try { string sql = _STR; using (var stm = conector.PrepareCommand(sql)) using (var rs = stm.ExecuteReader()) { while (rs.Read()) { dados.Add(new Visitante( rs.GetInt32(_NUM), rs.GetString(_NUM), rs.GetString(_NUM), rs.GetString(_NUM), rs.GetString(_NUM), rs.GetString(_NUM), Tempo.ToDate(rs.GetDateTime(_NUM)), rs.GetString(_NUM), rs.GetString(_NUM) )); } } } catch (SqlException ex) { Mensagem.Erro(_STR + ex); } return dados; }
private void AssertAllFromTbl1(SqlCommand cmd, string[] ones, short[] twos) { SqlDataReader reader = cmd.ExecuteReader(); int i = 0; while (reader.Read()) { Assert.True(i < ones.Length); Assert.Equal(ones[i], reader.GetString(0)); Assert.Equal(twos[i], reader.GetInt16(1)); i++; } Assert.True(i == ones.Length); }
public override System.IO.TextWriter Append(char value) { builder.Append(value); return this; }
private void InsertBefore(Instruction[] list, Instruction s) { foreach (Instruction x in list) { s.InsertBefore(x); } }
public static Builder NewBuilder() { return new Builder(); }
public int CountArray(string[] array) { return array.Length; }
private void ProcessUnprocessed() { bool cleanProcessings = bool.Parse(Environment.GetEnvironmentVariable("_STR")); logger.Info($"{_STR}{_STR}{cleanProcessings}{_STR}"); productService.ProcessUnprocessed(!cleanProcessings); }
public double[] Popy(double[] x_) { return PopY(new double[][] { x_ })[_NUM]; }
public void GoToFrame(int frameNumber) { Print(_STR, new string[] { frameNumber.ToString() }); }
private void Pop(string desc) { char c = desc[_NUM]; if (c == _STR) { Pop((Type.GetArgumentsAndReturnSizes(desc) >> _NUM) - _NUM); } else if (c == _STR || c == _STR) { Pop(_NUM); } else { Pop(_NUM); } }
public void Delete(string name) { if (name.Equals(SUBJECT_NAME, StringComparison.OrdinalIgnoreCase)) { names = null; } else { throw new IOException(_STR + _STR); } EncodeThis(); }
public void PushElemAttributeSet(ElemAttributeSet attrSet) { m_attrSetStack.Push(attrSet); }
private void FinishScrollStacks() { CancelAnimation(this, Property.STACK_SNAP); int currentModelIndex = GetTabStackIndex(); float delta = Math.Abs(currentModelIndex + mRenderedScrollOffset); float target = -currentModelIndex; if (delta != _NUM) { long duration = FLING_MIN_DURATION + (long)Math.Abs(delta * GetFullScrollDistance() / mFlingSpeed); AddToAnimation(this, Property.STACK_SNAP, mRenderedScrollOffset, target, duration, _NUM); } else { SetProperty(Property.STACK_SNAP, target); if (mTemporarySelectedStack != null) { mTabModelSelector.SelectModel(mTemporarySelectedStack); mTemporarySelectedStack = null; } } }
public GeoDistanceBuilder AddUnboundedFrom(string key, double from) { ranges.Add(new Range(key, from, null)); return this; }
private void SendResponse(Document doc, MessageFactory messageFactory, string contentType, HttpResponse res) { var reply = messageFactory.CreateMessage(); var header = reply.GetSOAPHeader(); header.DetachNode(); var replyBody = reply.GetSOAPBody(); res.Headers.Add("_STR", contentType); replyBody.AddDocument(doc); reply.SaveChanges(); using (var os = res.OutputStream) { reply.WriteTo(os); os.Flush(); } }
public static string ReplaceChars(string str, string oldchars, char newchar) { int pos = IndexOfChars(str, oldchars); if (pos == -1) { return str; } StringBuilder buf = new StringBuilder(str); do { buf[pos] = newchar; pos = IndexOfChars(str, oldchars, pos + 1); } while (pos != -1); return buf.ToString(); }
public readonly CharSequence Yytext() { return zzBuffer.SubSequence(zzStartRead, zzMarkedPos); }
public static string CanonicalizePath(string path, bool discardRelativePrefix) { int segmentStart = 0; int deletableSegments = 0; for (int i = 0; i <= path.Length; ) { int nextSegmentStart; if (i == path.Length) { nextSegmentStart = i; } else if (path[i] == '/') { nextSegmentStart = i + 1; } else { i++; continue; } if (i == segmentStart + 1 && path.Substring(segmentStart, 1) == ".") { path = path.Substring(0, segmentStart) + path.Substring(nextSegmentStart); i = segmentStart; } else if (i == segmentStart + 1 && path.Substring(segmentStart, 1) == "..") { if (deletableSegments > 0 || discardRelativePrefix) { deletableSegments--; int prevSegmentStart = path.LastIndexOf('/', segmentStart - 1) + 1; path = path.Substring(0, prevSegmentStart) + path.Substring(nextSegmentStart);
public InMemoryMessageExchangeStore(NetworkConfig config, TokenProvider tokenProvider) { if (config == null) { throw new ArgumentNullException(nameof(config)); } if (tokenProvider == null) { throw new ArgumentNullException(nameof(tokenProvider)); } this.tokenProvider = tokenProvider; this.config = config; }
public static void Next() { try { if (musicPlaybackService != null) { musicPlaybackService.Next(); } } catch (RemoteException) { // ignored } }
public long StartStack() { return long.Parse(fields[_NUM]); }
private void DrawBitmapWithStroke(Canvas canvas, Bitmap bitmap, int centerX, int centerY, float radius, Paint drawPaint) { drawPaint.SetStyle(Paint.Style.Fill); float strokeRadius = radius + mRadiusStrokeWidth; drawPaint.SetXfermode(new PorterDuffXfermode(PorterDuff.Mode.Clear)); canvas.DrawCircle(centerX, centerY, strokeRadius, drawPaint); drawPaint.SetXfermode(null); int halfBitmapWidth = bitmap.Width / _NUM; int halfBitmapHeight = bitmap.Height / _NUM; BitmapShader bitmapShader = new BitmapShader(bitmap, Shader.TileMode.Repeat, Shader.TileMode.Repeat); Matrix shaderMatrix = new Matrix(); float minSize = Math.Min(bitmap.Width, bitmap.Height); float scale = radius * _NUM / minSize; shaderMatrix.SetScale(scale, scale); shaderMatrix.PostTranslate(centerX - (halfBitmapWidth * scale), centerY - (halfBitmapHeight * scale)); bitmapShader.SetLocalMatrix(shaderMatrix); drawPaint.SetShader(bitmapShader); canvas.DrawCircle(centerX, centerY, radius, drawPaint); drawPaint.SetShader(null); }
private SNode AwaitFulfill(SNode s, bool timed, long nanos) { long deadline = timed ? Stopwatch.GetTimestamp() + nanos : _NUM; Thread currentThread = Thread.CurrentThread; int spins = ShouldSpin(s) ? (timed ? maxTimedSpins : maxUntimedSpins) : _NUM; while (true) { if (currentThread.IsInterrupted) s.TryCancel(); SNode m = s.Match; if (m != null) return m; if (timed) { nanos = deadline - Stopwatch.GetTimestamp(); if (nanos <= _NUM) { s.TryCancel(); continue; } } if (spins > _NUM) spins = ShouldSpin(s) ? (spins - _NUM) : _NUM; else if (s.Waiter == null) s.Waiter = currentThread; else if (!timed) LockSupport.Park(this); else if (nanos > spinForTimeoutThreshold) LockSupport.ParkNanos(this, nanos); } }
public MqttDevice MqttDevice() { return mqttDevice; }
public AbbaLockingDetector StartCollecting() { thread = new Thread(this.DoWork); thread.IsBackground = true; // Assuming _BOOL means the thread is a daemon (background thread) thread.Start(); return this; }
public void AddSwipeListener(SwipeListener listener) { if (mListeners == null) { mListeners = new List<SwipeListener>(); } mListeners.Add(listener); }
protected object ReadObjectOverride() { if (input == null) { return null; } throw new IOException(); }
public float ToMeters(double pixels) { return (float)(pixels * METERS_PER_PIXELS); }
public static string SearchRemoveFromCategory(HttpRequest request, HttpResponse response) { var delegator = (Delegator)request.Attributes[_STR]; var productCategoryId = request.Query[_STR]; string errMsg = null; try { bool beganTransaction = TransactionUtil.Begin(DEFAULT_TX_TIMEOUT); try { var eli = GetProductSearchResults(request); if (eli == null) { errMsg = UtilProperties.GetMessage(resource, _STR, UtilHttp.GetLocale(request)); request.Attributes[_STR] = errMsg; return _STR; } int numRemoved = _NUM; GenericValue searchResultView = null; while ((searchResultView = eli.Next()) != null) { var productId = searchResultView.GetString(_STR); numRemoved += delegator.RemoveByAnd(_STR, UtilMisc.ToMap(_STR, productCategoryId, _STR, productId)); } eli.Close(); var messageMap = UtilMisc.ToMap(_STR, numRemoved.ToString()); errMsg = UtilProperties.GetMessage(resource, _STR, messageMap, UtilHttp.GetLocale(request)); request.Attributes[_STR] =
private bool AddToBuffer(char c) { int len = sb.Length; if (len == _NUM && c != CHAR_LT) return _BOOL; sb.Append(c); if (++len >= minTagLen) { bool isClosingTag = (len >= _NUM && sb[_NUM] == CHAR_SL); string substr; if (isClosingTag) substr = sb.ToString().Substring(_NUM); else substr = sb.ToString().Substring(_NUM); for (int i = _NUM; i < EXCLUDE_TAGS.Length; i++) { if (string.Equals(substr, EXCLUDE_TAGS[i], StringComparison.OrdinalIgnoreCase)) { if (isClosingTag) { DepthDec(i); PrintBuffer(); lastChar = _NUM; } else { DepthInc(i); } } } } return _BOOL; }
public static double Length(double x, double y, double z) { return Math.Sqrt(x * x + y * y + z * z); }
public static T JsonToObject<T>(string jsonString) { T objectFromJson = default; try { var jsonObject = new GfJsonObject(jsonString); objectFromJson = Activator.CreateInstance<T>(); var declaredMethods = typeof(T).GetMethods(BindingFlags.Instance | BindingFlags.Public | BindingFlags.SetProperty); var methodsMap = declaredMethods.ToDictionary(method => method.Name); int noOfFields = jsonObject.Size; var keys = jsonObject.Keys; foreach (var key in keys) { if (methodsMap.TryGetValue("Set" + char.ToUpper(key[0]) + key.Substring(1), out var method)) { var parameterTypes = method.GetParameters(); if (parameterTypes.Length == 1) { var parameterType = parameterTypes[0].ParameterType; object value = jsonObject[key]; if (IsPrimitiveOrWrapper(parameterType)) { value = GetPrimitiveOrWrapperValue(parameterType, value); } else if (IsArray(parameterType)) { value = ToArray(value, parameterType); } else if (IsList(parameterType)) {
private Cache CreateCache() { var props = new Properties(); props.SetProperty(LOCATORS, _STR); props.SetProperty(MCAST_PORT, _STR); return CacheFactory.Create(DistributedSystem.Connect(props)); }
public AttributeListPanel() { m_Table.SelectionMode = DataGridViewSelectionMode.FullRowSelect; m_Table.AllowUserToAddRows = false; // Assuming _BOOL is false for the sake of this conversion m_Table.ScrollBars = ScrollBars.Vertical; // Set scroll bars depending on your needs m_Table.Height = _NUM; // Assuming _NUM is defined to set appropriate height m_Table.Width = _NUM; // Assuming _NUM is defined to set appropriate width this.Controls.Add(new ScrollableControl { AutoScroll = true, Controls = { m_Table } }); }
protected string[,] ToArray() { int i, n, ii, nn, x, y; string[,] result; string[,] tmpResult; int cols, rows; bool valueExists; rows = GetVisibleRowCount(); if (GetShowAverage()) { rows++; } cols = GetVisibleColCount(); if (GetShowStdDev()) { cols = cols * _NUM; } else { cols = cols * _NUM; } result = new string[rows + _NUM, cols + _NUM]; result[_NUM, _NUM] = TrimString(_STR, GetRowNameWidth()); x = _NUM; for (ii = _NUM; ii < GetColCount(); ii++) { i = GetDisplayCol(ii); if (GetColHidden(i)) { continue; } result[_NUM, x] = TrimString(RemoveFilterName(GetColName(i)), GetColNameWidth()); x++; if (GetShowStdDev()) { result[_NUM, x] = _STR; x++;
private Environment() { throw ContractUtils.Unreachable(); }
public void RemovePhoto(PhotoEntity photo) { photos.Remove(photo); }
public static int BinarySearch(double[] array, int startIndex, int endIndex, double value) { CheckIndexForBinarySearch(array.Length, startIndex, endIndex); long longBits = BitConverter.DoubleToInt64Bits(value); int low = startIndex, mid = -1, high = endIndex - 1; while (low <= high) { mid = (low + high) >> 1; if (LessThan(array[mid], value)) { low = mid + 1; } else if (longBits == BitConverter.DoubleToInt64Bits(array[mid])) { return mid; } else { high = mid - 1; } } if (mid < 0) { int insertPoint = endIndex; for (int index = startIndex; index < endIndex; index++) { if (value < array[index]) { insertPoint = index; } } return -insertPoint - 1; } return -mid - (LessThan(value, array[mid]) ? 1 : 0); }
public static void Compute(double minScore, double topPercent, double maxExpected, float minPercentIdentity, IReadBlock readBlock, string classificationName, BitSet activeMatchesForClassification) { activeMatchesForClassification.Clear(); for (int i = _NUM; i < readBlock.GetNumberOfAvailableMatchBlocks(); i++) { IMatchBlock matchBlock = readBlock.GetMatchBlock(i); if (!matchBlock.IsIgnore() && matchBlock.GetBitScore() >= minScore && matchBlock.GetExpected() <= maxExpected && matchBlock.GetPercentIdentity() >= minPercentIdentity) { if (matchBlock.GetId(classificationName) > _NUM) activeMatchesForClassification.Set(i); } } float bestScore = _NUM; for (int i = activeMatchesForClassification.NextSetBit(_NUM); i != -_NUM; i = activeMatchesForClassification.NextSetBit(i + _NUM)) { IMatchBlock matchBlock = readBlock.GetMatchBlock(i); float score = matchBlock.GetBitScore(); if (score > bestScore) bestScore = score; } ApplyTopPercentFilter(topPercent, bestScore, minPercentIdenti
public E[] ToArray(E[] a) { if (a.Length != array.Length) { throw new ElasticsearchGenerationException(_STR); } for (int i = _NUM; i < array.Length; i++) { a[i] = array.Get(i); } return a; }
private readonly object lockObject = new object(); private List<Failure> failures; public void FailOn(Failure fail) { lock (lockObject) { if (failures == null) { failures = new List<Failure>(); } failures.Add(fail); } }
public void DumpStack() { if (stack == null) { DebugMessage(_STR); return; } DebugMessage(_STR); for (int i = _NUM; i < stack.Count; i++) { var symbol = (Symbol)stack[i]; DebugMessage(_STR + symbol.Sym + _STR + symbol.ParseState); } DebugMessage(_STR); }
private static HashSet<string> CreateCategoriesSet(HashSet<string> categories) { HashSet<string> result = new HashSet<string>(); foreach (string cat in categories) { result.Add(cat.ToLower()); } return result; }
public void LoadListener(string serverKey) { if (!servers.TryGetValue(serverKey, out Server server)) { throw new GenericServiceException(_STR); } LoadListener(serverKey, server); }
public void Upload(FileInfo file, long restartAt, FTPDataTransferListener listener) { if (!file.Exists) { throw new FileNotFoundException(file.FullName); } FileStream inputStream = null; try { inputStream = new FileStream(file.FullName, FileMode.Open, FileAccess.Read); } catch (IOException e) { throw new FTPDataTransferException(e); } try { Upload(file.Name, inputStream, restartAt, restartAt, listener); } catch (IllegalStateException e) { throw e; } catch (IOException e) { throw e; } catch (FTPIllegalReplyException e) { throw e; } catch (FTPException e) { throw e; } catch (FTPDataTransferException e) { throw e; } catch (FTPAbortedException e) { throw e; } finally { if (inputStream != null) { try { inputStream.Close(); } catch (Exception) { // ignore close excepti
public SslSocket CreateSslSocket(Socket socket) { var sf = (SslSocketFactory)SslSocketFactory.Default; var remoteAddress = (IPEndPoint)((System.Net.Sockets.Socket)socket).RemoteEndPoint; var s = (SslSocket)sf.CreateSocket(socket, remoteAddress.Address.ToString(), remoteAddress.Port, _BOOL); s.UseClientMode = _BOOL; s.EnabledCipherSuites = s.SupportedCipherSuites; return s; }
private string FormatNode(RightThreadedBinaryNode<T> node) { RightThreadedBinaryNode<T> n; StringBuilder response = new StringBuilder(_STR); if ((n = node.GetLeftSon()) != null) { response.Append(FormatNode(n)); } response.Append(node.ToString()); if ((n = node.GetRightSon()) != null) { response.Append(FormatNode(n)); } response.Append(_STR); return response.ToString(); }
public static void UnregisterMBean(Type mbeanInterface) { var mbs = MBeanServerFactory.GetPlatformMBeanServer(); try { ObjectName name = GenerateMBeanObjectName(mbeanInterface); if (mbs.IsRegistered(name)) { logger.Info(_STR + name.ToString()); mbs.UnregisterMBean(name); } else { logger.Warn(_STR + name.ToString()); } } catch (Exception e) { throw new ServerRuntimeException(_STR + mbeanInterface, e); } }
public void WriteExif(Stream jpegStream, string exifOutFileName) { if (jpegStream == null || exifOutFileName == null) { throw new ArgumentException("NULL_ARGUMENT_STRING"); } Stream s = null; try { s = GetExifWriterStream(exifOutFileName); DoExifStreamIO(jpegStream, s); s.Flush(); } catch (IOException e) { CloseSilently(s); throw; } finally { s?.Close(); } }
public void Sort(IComparer<T> comparer) { lock (mLock) { if (mOriginalValues != null) { mOriginalValues.Sort(comparer); } else { mObjects.Sort(comparer); } } if (mNotifyOnChange) { NotifyDataSetChanged(); } }
static bool CausedByRDE(DiskAccessException dae) { bool result = false; if (dae != null) { Exception cause = dae.InnerException; while (cause != null) { if (cause is RegionDestroyedException) { result = true; break; } cause = cause.InnerException; } } return result; }
public JsonArray Add(string value) { values.Add(Json.Value(value)); return this; }
public MagicVariablesArgumentsBundle(Dictionary<string, string> arguments, Dictionary<string, string> variables, string layerName, DisplayMetrics metrics) : base(arguments, metrics) { mVariables = variables; mLayerNamePrefix = _STR + layerName.Replace(_STR, _STR) + _STR; }
[HLEUnimplemented] [HLEFunction(nid = _NUM, version = _NUM)] public int SceUsbCamSetupVideoEx(pspUsbCamSetupVideoExParam usbCamSetupVideoExParam, TPointer workArea, int workAreaSize) { this.workArea = workArea.GetAddress(); this.workAreaSize = workAreaSize; resolution = ConvertResolutionExToResolution(usbCamSetupVideoExParam.Resolution); frameRate = usbCamSetupVideoExParam.Framerate; whiteBalance = usbCamSetupVideoExParam.Wb; saturation = usbCamSetupVideoExParam.Saturation; brightness = usbCamSetupVideoExParam.Brightness; contrast = usbCamSetupVideoExParam.Contrast; sharpness = usbCamSetupVideoExParam.Sharpness; imageEffectMode = usbCamSetupVideoExParam.EffectMode; frameSize = usbCamSetupVideoExParam.FrameSize; evLevel = usbCamSetupVideoExParam.EvLevel; if (!SetupVideo()) { log.Warn(string.Format(_STR)); return SceKernelErrors.ERROR_USBCAM_NOT_READY; } return _NUM; }
public List<User> LoadAllDeepFromCursor(Cursor cursor) { int count = cursor.GetCount(); List<User> list = new List<User>(count); if (cursor.MoveToFirst()) { if (identityScope != null) { identityScope.Lock(); identityScope.ReserveRoom(count); } try { do { list.Add(LoadCurrentDeep(cursor, _BOOL)); } while (cursor.MoveToNext()); } finally { if (identityScope != null) { identityScope.Unlock(); } } } return list; }
using System; using System.Globalization; public static DateTime ConvertISO8601ToDate(string dateString) { string format = "yyyy-MM-ddTHH:mm:ssZ"; // Adjust format as needed DateTime date = DateTime.ParseExact(dateString, format, CultureInfo.InvariantCulture, DateTimeStyles.AssumeUniversal); return date; }
public static Document CreateDOM(Stream inputStream) { DocumentBuilderFactory dbf = DocumentBuilderFactory.NewInstance(); dbf.SetValidating(_BOOL); dbf.SetIgnoringComments(_BOOL); dbf.SetIgnoringElementContentWhitespace(_BOOL); dbf.SetNamespaceAware(_BOOL); dbf.SetFeature(XMLConstants.FeatureSecureProcessing, _BOOL); dbf.SetFeature(DISALLOW_DOCTYPE_DECL, _BOOL); dbf.SetFeature(EXTERNAL_GENERAL_ENTITIES, _BOOL); dbf.SetFeature(EXTERNAL_PARAMETER_ENTITIES, _BOOL); dbf.SetFeature(LOAD_EXTERNAL_DTD, _BOOL); DocumentBuilder db = dbf.NewDocumentBuilder(); db.SetEntityResolver(new NullResolver()); db.SetErrorHandler(new SamlParserErrorHandler()); return db.Parse(inputStream); }
public override string ToString() { return getValue().ToString(); }
public void ResetCount() { msgCnt.Set(_NUM); }
public void ScheduleAtFixedRate(TimerTask task, DateTime when, long period) { if (period <= _NUM || when.Ticks < _NUM) { throw new ArgumentException(); } long delay = (long)(when - DateTime.Now).TotalMilliseconds; ScheduleImpl(task, delay, period, _BOOL); }
void DecodeAttributeBody(byte[] attributeValue, char offset, char length) { byte[] realm = new byte[length]; Array.Copy(attributeValue, (int)offset, realm, 0, (int)length); }
public static void CopyAssets(Context context, string assetsFilename, File file, string mode) { string abi = Build.CpuAbi; string libraryName; if (abi.Equals(_STR, StringComparison.OrdinalIgnoreCase)) { libraryName = _STR; } else if (abi.Equals(_STR, StringComparison.OrdinalIgnoreCase)) { libraryName = _STR; } else if (abi.Contains(_STR)) { libraryName = _STR; } else { return; } AssetManager manager = context.GetAssets(); using (var is = manager.Open(libraryName + _STR + assetsFilename)) { CopyFile(file, is, mode); } }
public bool IsSame(object obj) { if (this == obj) return _BOOL; if (obj == null) return _BOOL; if (GetType() != obj.GetType()) return _BOOL; HouseNumber other = (HouseNumber)obj; if (number == null) { if (name == null) { if (other.name != null) return _BOOL; } else if (!name.Equals(other.name)) return _BOOL; } else if (!number.Equals(other.number)) return _BOOL; if (street == null) { if (other.street != null) return _BOOL; } else if (!street.Equals(other.street)) return _BOOL; return _BOOL; }
public static double NextUp(double d) { const double _NUM = 1e-10; // Example epsilon value for precision adjustment if (double.IsPositiveInfinity(d)) return d; else { d += _NUM; long bits = BitConverter.DoubleToInt64Bits(d) + (d >= _NUM ? (long)_NUM : (long)-_NUM); return BitConverter.Int64BitsToDouble(bits); } }
public int ThreeWayDistance(Key k1, Key k2) { byte[] h0 = hash; byte[] h1 = k1.hash; byte[] h2 = k2.hash; int mmi = Mismatch(h1, h2); if (mmi == -_NUM) return _NUM; int h = (int)(h0[mmi] & 0xFF); int a = (int)(h1[mmi] & 0xFF); int b = (int)(h2[mmi] & 0xFF); return UInt32.Compare((uint)(a ^ h), (uint)(b ^ h)); }
static byte[] DiscardWhitespace(byte[] data) { byte[] groomedData = new byte[data.Length]; int bytesCopied = _NUM; for (int i = _NUM; i < data.Length; i++) { switch (data[i]) { case (byte)_STR: case (byte)_STR: case (byte)_STR: case (byte)_STR: break; default: groomedData[bytesCopied++] = data[i]; break; } } byte[] packedData = new byte[bytesCopied]; Array.Copy(groomedData, _NUM, packedData, _NUM, bytesCopied); return packedData; }
public AsyncSelector() { this(Selector.Open()); }
public void RemoveChildAt(int index) { if (index < 0 || children == null || index >= children.Count) { throw new ArgumentOutOfRangeException(); } Element child = children[index]; child.SetParent(null); children.RemoveAt(index); }
private LinkedList<Diff> DiffBisectSplit(string text1, string text2, int x, int y, long deadline) { string text1a = text1.Substring(0, x); string text2a = text2.Substring(0, y); string text1b = text1.Substring(x); string text2b = text2.Substring(y); LinkedList<Diff> diffs = DiffMain(text1a, text2a, BOOL, deadline); LinkedList<Diff> diffsb = DiffMain(text1b, text2b, BOOL, deadline); foreach (var diff in diffsb) { diffs.AddLast(diff); } return diffs; }
private void Paint(Painter p, SynthContext ctx, Graphics g, int x, int y, int w, int h, AffineTransform transform) { if (p != null) { if (g is Graphics2D gfx) { if (transform != null) { gfx.Transform(transform); } gfx.Translate(x, y); p.Paint(gfx, ctx.GetComponent(), w, h); gfx.Translate(-x, -y); if (transform != null) { try { gfx.Transform(transform.CreateInverse()); } catch (NoninvertibleTransformException e) { e.PrintStackTrace(); } } } else { BufferedImage img = new BufferedImage(w, h, BufferedImage.TYPE_INT_ARGB); using (Graphics2D gfx = img.CreateGraphics()) { if (transform != null) { gfx.Transform(transform); } p.Paint(gfx, ctx.GetComponent(), w, h); } g.DrawImage(img, x, y, null); img = null; } } }
static void LoadDirectory(DirectoryInfo directory, ModuleCandidate candidate) { FileInfo[] files = directory.GetFiles(); if (files != null) { foreach (FileInfo file in files) { LoadSubDirectory(directory, file, candidate); } } }

public XmlWrapperSerializer CreateSerializer(string filePath, JsonEncoding encoding) { try { var xmlStreamWriter = new XMLSerializer(new StreamWriter(filePath)); return new XmlWrapperSerializer(xmlStreamWriter); } catch (Exception e) { Console.WriteLine(e); throw new KriptonRuntimeException(e); } }
public override BlogResource NewResource(string name, string contentType, byte[] bytes) { if (resourcesCollection == null) { throw new BlogClientException("No resource collection"); } return resourcesCollection.NewResource(name, contentType, bytes); }
public ListChangeSetsResult ListChangeSets(ListChangeSetsRequest request) { request = BeforeClientExecution(request); return ExecuteListChangeSets(request); }
public void SetType(int type) { this.type = type; if (level == LEVEL_UNDEFINED) { switch (type) { case TYPE_INT: case TYPE_LONG: case TYPE_DOUBLE: level = LEVEL_LOW; break; case TYPE_STAT: level = LEVEL_MEDIUM; unit = "unit.ms"; break; case TYPE_LOAD: level = LEVEL_HIGH; break; case TYPE_SUBMODULE: level = LEVEL_MAX; break; default: break; } } }
public ReadyState GetReadyState() { if (stream == null) { return EventSource.ReadyState.CONNECTING; } else { switch (stream.GetReadyState()) { case ReadyState.CONNECTING: return EventSource.ReadyState.CONNECTING; case ReadyState.OPEN: return EventSource.ReadyState.OPEN; case ReadyState.CLOSING: case ReadyState.CLOSED: default: return EventSource.ReadyState.CLOSED; } } }
private RouteDoc ExtractDocInfo(RouteMeta routeMeta) { RouteDoc routeDoc = new RouteDoc(); routeDoc.Group = routeMeta.Group; routeDoc.Path = routeMeta.Path; routeDoc.Description = routeMeta.Name; routeDoc.Type = routeMeta.Type.ToString().ToLower(); routeDoc.Mark = routeMeta.Extra; return routeDoc; }
public GetAccountPasswordPolicyResult GetAccountPasswordPolicy(GetAccountPasswordPolicyRequest request) { request = BeforeClientExecution(request); return ExecuteGetAccountPasswordPolicy(request); }
[Programmatic] public DocumentType Create(string reference, string name) { var documentType = new DocumentType(reference, name); repositoryService.PersistAndFlush(documentType); return documentType; }
public static TApplicationException Read(TProtocol iprot) { TField field; iprot.ReadStructBegin(); string message = null; int type = TApplicationException.UNKNOWN; while (true) { field = iprot.ReadFieldBegin(); if (field.Type == TType.STOP) { break; } switch (field.Id) { case 1: if (field.Type == TType.STRING) { message = iprot.ReadString(); } else { TProtocolUtil.Skip(iprot, field.Type); } break; case 2: if (field.Type == TType.I32) { type = iprot.ReadI32(); } else { TProtocolUtil.Skip(iprot, field.Type); } break; default: TProtocolUtil.Skip(iprot, field.Type); break; } iprot.ReadFieldEnd(); } iprot.ReadStructEnd(); return new TApplicationException(type, message); }
using System; using System.IO; using System.IO.Compression; using System.Text; public static class CharsetChecker { public static bool IsCharsetSupported() { try { var constructor = typeof(ZipFile).GetConstructor(new Type[] { typeof(string), typeof(Encoding) }); return constructor != null; } catch (Exception) { return false; } } }
private void MapPrimitiveOrEnumToVertex(ITypedInstance typedInstance, AtlasVertex instanceVertex, AttributeInfo attributeInfo) { object attrValue = typedInstance.Get(attributeInfo.Name); string vertexPropertyName = GraphHelper.GetQualifiedFieldName(typedInstance, attributeInfo); object propertyValue = null; if (attrValue == null) { propertyValue = null; } else if (attributeInfo.DataType() == DataTypes.STRING_TYPE) { propertyValue = typedInstance.GetString(attributeInfo.Name); } else if (attributeInfo.DataType() == DataTypes.SHORT_TYPE) { propertyValue = typedInstance.GetShort(attributeInfo.Name); } else if (attributeInfo.DataType() == DataTypes.INT_TYPE) { propertyValue = typedInstance.GetInt(attributeInfo.Name); } else if (attributeInfo.DataType() == DataTypes.BIGINTEGER_TYPE) { propertyValue = typedInstance.GetBigInt(attributeInfo.Name); } else if (attributeInfo.DataType() == DataTypes.BOOLEAN_TYPE) { propertyValue = typedInstance.GetBoolean(attributeInfo.Name); } else if (attributeInfo.DataType()
public static List<PersistenceUnitMetadata> FindPersistenceUnits(Uri url, string[] persistenceUnits, PersistenceUnitTransactionType defaultTransactionType) { XmlDocument doc; try { doc = GetDocument(url); } catch (InvalidConfigurationException e) { throw e; } doc.DocumentElement.GetElementsByTagName("version"); XmlElement top = doc.DocumentElement; string versionName = top.GetAttribute("version"); XmlNodeList children = top.ChildNodes; List<PersistenceUnitMetadata> units = new List<PersistenceUnitMetadata>(); // parse for persistenceUnitRootInfoURL. for (int i = 0; i < children.Count; i++) { if (children[i].NodeType == XmlNodeType.Element) { XmlElement element = (XmlElement)children[i]; string tag = element.Name; // look for "persistence-unit" element if (tag.Equals("persistence-unit")) { PersistenceUnitMetadata metadata = ParsePersistenceUnit(url, persistenceUnits, element, versionName); if (metadata != null) { units.Add(metadata); } } } } return unit
public void SetEndRule(int endMonth, int endDay, int endDayOfWeek, int endTime, bool after) { if (after) { SetEndRule(endMonth, endDay, -endDayOfWeek, endTime); } else { SetEndRule(endMonth, -endDay, -endDayOfWeek, endTime); } }
public void SetHsmsPendingDeletion(IEnumerable<string> hsmsPendingDeletion) { if (hsmsPendingDeletion == null) { this.hsmsPendingDeletion = null; return; } this.hsmsPendingDeletion = new List<string>(hsmsPendingDeletion); }
static ClassifiedTBox Classify(OntologyImpl.UnclassifiedOntologyTBox onto) { var objectPropertyGraph = GetObjectPropertyGraph(onto); var objectPropertyDAG = EquivalencesDAGImpl<ObjectPropertyExpression>.GetEquivalencesDAG(objectPropertyGraph); var dataPropertyGraph = GetDataPropertyGraph(onto); var dataPropertyDAG = EquivalencesDAGImpl<DataPropertyExpression>.GetEquivalencesDAG(dataPropertyGraph); var classDAG = EquivalencesDAGImpl<ClassExpression>.GetEquivalencesDAG(GetClassGraph(onto, objectPropertyGraph, dataPropertyGraph)); var dataRangeDAG = EquivalencesDAGImpl<DataRangeExpression>.GetEquivalencesDAG(GetDataRangeGraph(onto, dataPropertyGraph)); ChooseObjectPropertyRepresentatives(objectPropertyDAG); ChooseDataPropertyRepresentatives(dataPropertyDAG); ChooseClassRepresentatives(classDAG, objectPropertyDAG, dataPropertyDAG); ChooseDataRangeRepresentatives(dataRangeDAG, dataPropertyDAG); var r = new ClassifiedTBoxImpl( onto.Classes(), onto.ObjectProperties(), onto.DataProperties(
public List<string> Collect(HString hString) { return hString.ToList(); }
public override void ElemAdd(MVec addend) { if (addend is Tensor) { ElemAdd((Tensor)addend); } else { throw new ArgumentException("Addend must be of type " + this.GetType()); } }
public void ProcessAnonymousField(Properties attributes) { if (!attributes.ContainsKey(ATTRIBUTE_NAME)) { throw new XDocletException(Translator.GetString( typeof(XDocletModulesOjbMessages), XDocletModulesOjbMessages.PARAMETER_IS_REQUIRED, new string[] { ATTRIBUTE_NAME })); } string name = attributes[ATTRIBUTE_NAME]; FieldDescriptorDef fieldDef = _curClassDef.GetField(name); if (fieldDef == null) { fieldDef = new FieldDescriptorDef(name); _curClassDef.AddField(fieldDef); } fieldDef.SetAnonymous(); LogHelper.Debug(false, typeof(OjbTagsHandler), "ProcessAnonymousField", "Processing anonymous field " + fieldDef.GetName()); attributes.Remove(ATTRIBUTE_NAME); foreach (string attrName in attributes.Keys) { fieldDef.SetProperty(attrName, attributes[attrName]); } fieldDef.SetProperty(PropertyHelper.OJB_PROPERTY_ACCESS, "anonymous"); }
public Entry GetLast() { if (tc.IsEntryEnabled()) { SibTr.Entry(tc, "GetLast"); SibTr.Exit(tc, "GetLast", last); } return last; }
protected void DestroyServerSocket() { if (this.serverSocket == null) { // already closed return; } if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) { Tr.Debug(tc, "ServerSocket being closed for port " + this.listenPort); } CloseServerSocket(); this.serverSocket = null; }
public static int MultiplyRgb(int rgb, double fr, double fg, double fb) { if (rgb == 0) { return rgb; } int a = (rgb >> Constant.BYTE_4) & 0xFF; int r = (int)UtilMath.Clamp((rgb >> Constant.BYTE_3 & 0xFF) * fr, 0, 255); int g = (int)UtilMath.Clamp((rgb >> Constant.BYTE_2 & 0xFF) * fg, 0, 255); int b = (int)UtilMath.Clamp((rgb >> Constant.BYTE_1 & 0xFF) * fb, 0, 255); return (a & 0xFF) << Constant.BYTE_4 | (r & 0xFF) << Constant.BYTE_3 | (g & 0xFF) << Constant.BYTE_2 | (b & 0xFF) << Constant.BYTE_1; }
public static string RewriteMethodSignature(ClassNameRewriter classNameRewriter, string methodSignature) { if (classNameRewriter != IdentityClassNameRewriter.Instance) { var parser = new SignatureParser(methodSignature); var buf = new StringBuilder(); buf.Append('('); foreach (var parameterSignature in parser.ParameterSignatureIterator()) { buf.Append(RewriteSignature(classNameRewriter, parameterSignature)); } buf.Append(')'); buf.Append(RewriteSignature(classNameRewriter, parser.GetReturnTypeSignature())); methodSignature = buf.ToString(); } return methodSignature; }
private static ProteinSequence GetProteinSequence(string str) { try { ProteinSequence s = new ProteinSequence(str); return s; } catch (CompoundNotFoundException e) { logger.Error("Unexpected error when creating ProteinSequence", e); } return null; }
public static bool IsMappedIPv4Address(string ipString) { byte[] bytes = IpStringToBytes(ipString); if (bytes != null && bytes.Length == 16) { for (int i = 0; i < 10; i++) { if (bytes[i] != 0) { return false; } } for (int i = 10; i < 12; i++) { if (bytes[i] != 0xff) { return false; } } return true; } return false; }
public string GetCategories(int i) { if (GOMention_Type.featOkTst && ((GOMention_Type)jcasType).casFeat_categories == null) jcasType.jcas.ThrowFeatMissing("categories", "de.julielab.jules.types.GOMention"); jcasType.jcas.CheckArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((GOMention_Type)jcasType).casFeatCode_categories), i); return jcasType.ll_cas.ll_getStringArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((GOMention_Type)jcasType).casFeatCode_categories), i); }
public CommerceSubscriptionEntry FetchByPrimaryKey(object primaryKey) { var serializable = entityCache.GetResult(CommerceSubscriptionEntryModelImpl.ENTITY_CACHE_ENABLED, typeof(CommerceSubscriptionEntryImpl), primaryKey); if (serializable == nullModel) { return null; } var commerceSubscriptionEntry = (CommerceSubscriptionEntry)serializable; if (commerceSubscriptionEntry == null) { ISession session = null; try { session = OpenSession(); commerceSubscriptionEntry = (CommerceSubscriptionEntry)session.Get(typeof(CommerceSubscriptionEntryImpl), primaryKey); if (commerceSubscriptionEntry != null) { CacheResult(commerceSubscriptionEntry); } else { entityCache.PutResult(CommerceSubscriptionEntryModelImpl.ENTITY_CACHE_ENABLED, typeof(CommerceSubscriptionEntryImpl), primaryKey, nullModel); } } catch (Exception e) { entityCache.RemoveResult(CommerceSubscriptionEntryModelImpl.ENTITY_CACHE_ENABLED, typeof(CommerceSubscriptionEntryImpl), primaryKey); throw ProcessException(e); } finally { CloseSession(session); } } return commerceSubscriptionEntry;
public Collector<Type, ClosureHolder, List<Type>> ClosureCollector(bool minClosure, Func<Type, Type, bool> shouldSkip) { return Collector.Of( () => new ClosureHolder(minClosure, shouldSkip), (holder, item) => holder.Add(item), (holder1, holder2) => holder1.Merge(holder2), holder => holder.Closure()); }
public static void CopyTypeParametersFromJvmOperation(List<JvmTypeParameter> inputParameters, List<JvmTypeParameter> outputParameters, Dictionary<string, JvmTypeReference> superTypeParameterMapping, JvmTypeReferenceBuilder typeParameterBuilder, JvmTypesBuilder typeBuilder, TypeReferences typeReferences, TypesFactory jvmTypesFactory) { // Copy the generic types in two steps: first step is the name's copy. foreach (var typeParameter in inputParameters) { var typeParameterCopy = jvmTypesFactory.CreateJvmTypeParameter(); typeParameterCopy.SetName(typeParameter.GetName()); outputParameters.Add(typeParameterCopy); } // Second step is the constraints' copy for (int i = 0; i < inputParameters.Count; ++i) { var typeParameter = inputParameters[i]; var typeParameterCopy = outputParameters[i]; foreach (var constraint in typeParameter.GetConstraints()) { JvmTypeConstraint cst = null; if (constraint is JvmLowerBound) { cst = jvmTypesFactory.CreateJvmLowerBound();
public static object Find(string factoryId) { ClassLoader classLoader; try { classLoader = GetContextClassLoader(); } catch (Exception x) { throw new SOAPException(x.ToString(), x); } // Use the system property first try { string systemProp = System.GetProperty(factoryId); if (systemProp != null) { return NewInstance(systemProp, classLoader); } } catch (SecurityException) { } // try to read from $java.home/lib/jaxm.properties try { string javah = System.GetProperty("java.home"); string configFile = Path.Combine(javah, "lib", "jaxm.properties"); FileInfo f = new FileInfo(configFile); if (f.Exists) { Properties props = new Properties(); using (FileStream fs = new FileStream(configFile, FileMode.Open, FileAccess.Read)) { props.Load(fs); } string factoryClassName = props.GetProperty(factoryId); return NewInstance(factoryClassName, classLoader); } } catch (Exception)
public RoleInner CreateOrUpdate(string deviceName, string name, string resourceGroupName, RoleInner role) { return CreateOrUpdateWithServiceResponseAsync(deviceName, name, resourceGroupName, role).GetAwaiter().GetResult().Body; }
public override List<StorageState> DecodeContent(Stream inStream, Encoding charset) { // 解析报文内容 byte[] bytes = new byte[GetContentLength()]; int contentSize = inStream.Read(bytes, 0, bytes.Length); if (contentSize != GetContentLength()) { throw new IOException("读取到的数据长度与协议长度不符"); } return Decode(bytes, charset); }
public static DocumentBuilder CreateDocumentBuilder() { var dbf = DocumentBuilderFactory.NewInstance(); DisableXXE(dbf); DocumentBuilder builder = null; try { builder = dbf.NewDocumentBuilder(); } catch (Exception e) { throw new UtilException(e, "Create xml document error!"); } return builder; }
private XSSFCellStyle UpdateSubreportBandElementStyle(XSSFCellStyle cellStyle, BandElement bandElement, object value, int gridRow, int gridColumn, int colSpan) { if (subreportCellStyle == null) { return cellStyle; } if (gridColumn == 0) { cellStyle.SetBorderLeft(subreportCellStyle.GetBorderLeft()); cellStyle.SetLeftBorderColor(subreportCellStyle.GetLeftBorderColor()); } else if (gridColumn + colSpan - 1 == bean.GetReportLayout().GetColumnCount() - 1) { cellStyle.SetBorderRight(subreportCellStyle.GetBorderRight()); cellStyle.SetRightBorderColor(subreportCellStyle.GetRightBorderColor()); } if (gridRow == 0) { cellStyle.SetBorderTop(subreportCellStyle.GetBorderTop()); cellStyle.SetTopBorderColor(subreportCellStyle.GetTopBorderColor()); } else if ((gridRow + 1) == GetRowsCount()) { cellStyle.SetBorderBottom(subreportCellStyle.GetBorderBottom()); cellStyle.SetBottomBorderColor(subreportCellStyle.GetBottomBorderColor()); }
public Request AcceptEncoding(string encoding) { const string acceptEncoding = RequestHeaderFields.ACCEPT_ENCODING.Name; string encodingValue = headers.ContainsKey(acceptEncoding) ? headers[acceptEncoding] : null; if (encodingValue == null) { encodingValue = encoding; } else { encodingValue += ", " + encoding; } return this.SetHeader(acceptEncoding, encodingValue); }
public void Marshall(APNSSandboxChannelResponse aPNSSandboxChannelResponse, ProtocolMarshaller protocolMarshaller) { if (aPNSSandboxChannelResponse == null) { throw new SdkClientException("Invalid argument passed to marshall(...)"); } try { protocolMarshaller.Marshall(aPNSSandboxChannelResponse.ApplicationId, APPLICATIONID_BINDING); protocolMarshaller.Marshall(aPNSSandboxChannelResponse.CreationDate, CREATIONDATE_BINDING); protocolMarshaller.Marshall(aPNSSandboxChannelResponse.DefaultAuthenticationMethod, DEFAULTAUTHENTICATIONMETHOD_BINDING); protocolMarshaller.Marshall(aPNSSandboxChannelResponse.Enabled, ENABLED_BINDING); protocolMarshaller.Marshall(aPNSSandboxChannelResponse.HasCredential, HASCREDENTIAL_BINDING); protocolMarshaller.Marshall(aPNSSandboxChannelResponse.HasTokenKey, HASTOKENKEY_BINDING); protocolMarshaller.Marshall(aPNSSandboxChannelResponse.Id, ID_BINDING); protocolMarshaller.Marshall(aPNSSandboxChannelResponse.IsArchived, ISARCHIVED_BINDING); protocolMarshaller.Marshall(aPNSSandboxChannelResponse.LastModifiedBy, LASTMODIFIEDBY_BINDING); protocolMarshaller.Marshall(aPNSSandboxChan
protected Connection CreateConnection(Socket socket, Stream inputStream, Stream outputStream) { return new Connection(socket, inputStream, outputStream); }
public DateTime? GetFirstValueAsDate() { string valueString = GetFirstValue(); if (valueString == null) { return null; } return XmppDateTime.ParseXEP0082Date(valueString); }
public CmsPermissionSet GetPermissions(string resourceName, string userName) // reading permissions is allowed even if the resource is marked as deleted { CmsResource resource = ReadResource(resourceName, CmsResourceFilter.ALL); CmsUser user = ReadUser(userName); return m_securityManager.GetPermissions(m_context, resource, user); }
public ProjectCalendarHours AddCalendarHours(Day day) { ProjectCalendarHours bch = new ProjectCalendarHours(this); bch.SetDay(day); m_hours[day.Value - 1] = bch; return bch; }
private DateTime ProvidedOrDefaultFromValue(DateTime? from, DateTime to, AggregateCounterResolution resolution) { if (from.HasValue) { return from.Value; } switch (resolution) { case AggregateCounterResolution.Minute: return to.AddMinutes(-59); case AggregateCounterResolution.Hour: return to.AddHours(-23); case AggregateCounterResolution.Day: return to.AddDays(-6); case AggregateCounterResolution.Month: return to.AddMonths(-11); case AggregateCounterResolution.Year: return to.AddYears(-4); default: throw new InvalidOperationException($"Shouldn't happen. Unhandled resolution: {resolution}"); } }
public IRenderingElement Generate(IAtomContainer container, RendererModel model) { var highlight = container.GetProperty<IDictionary<IChemObject, int>>(ID_MAP); if (highlight == null) return null; var palette = model.GetParameter<HighlightPalette>().Value; double radius = model.GetParameter<HighlightRadius>().Value / model.GetParameter<BasicSceneGenerator.Scale>().Value; var shapes = new Dictionary<int, Area>(); foreach (IAtom atom in container.Atoms) { if (highlight.TryGetValue(atom, out int id)) { Area area = shapes.TryGetValue(id, out area) ? area : null; Shape shape = CreateAtomHighlight(atom, radius); if (area == null) shapes[id] = new Area(shape); else area.Add(new Area(shape)); } } foreach (IBond bond in container.Bonds) { if (highlight.TryGetValue(bond, out int id)) { Area area = shapes.TryGetValue(id, out area) ? area : null; Shape shape = CreateBondHighlight(bond, radius); if (area == null) shapes[id] = (a
public CPDefinitionLocalization FetchByCPDefinitionId_Last(long cpDefinitionId, OrderByComparator<CPDefinitionLocalization> orderByComparator) { int count = CountByCPDefinitionId(cpDefinitionId); if (count == 0) { return null; } List<CPDefinitionLocalization> list = FindByCPDefinitionId(cpDefinitionId, count - 1, count, orderByComparator); if (list.Count > 0) { return list[0]; } return null; }
public T EvaluateRegression<T>(JavaRDD<DataSet> data, int minibatchSize) where T : RegressionEvaluation { long nOut = ((FeedForwardLayer)network.OutputLayer.Conf.Layer).NOut; return (T)DoEvaluation(data, new org.deeplearning4j.eval.RegressionEvaluation(nOut), minibatchSize); }
public EEnum GetObjectClassificationStrucFlgs() { if (objectClassificationStrucFlgsEEnum == null) { objectClassificationStrucFlgsEEnum = (EEnum)EPackage.Registry.INSTANCE.GetEPackage(AfplibPackage.eNS_URI).GetEClassifiers()[101]; } return objectClassificationStrucFlgsEEnum; }
private void StartNegotiators() { foreach (var contentNegotiator in contentNegotiators) { var transNeg = contentNegotiator.GetTransportNegotiator(); transNeg.Start(); } }
public DeleteInstanceResult DeleteInstance(DeleteInstanceRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteInstance(request); }
public static void PrintSystemOut(string message1, long message2) { if (TRACESYSTEMOUT) { Console.Write(message1); Console.WriteLine(message2); } }
public void Marshall(ListTagsForProjectRequest listTagsForProjectRequest, IProtocolMarshaller protocolMarshaller) { if (listTagsForProjectRequest == null) { throw new SdkClientException("Invalid argument passed to marshall(...)"); } try { protocolMarshaller.Marshall(listTagsForProjectRequest.Id, ID_BINDING); protocolMarshaller.Marshall(listTagsForProjectRequest.NextToken, NEXTTOKEN_BINDING); protocolMarshaller.Marshall(listTagsForProjectRequest.MaxResults, MAXRESULTS_BINDING); } catch (Exception e) { throw new SdkClientException("Unable to marshall request to JSON: " + e.Message, e); } }
public string GetTextureFile(AiTextureType type, int index) { CheckTexRange(type, index); return GetTyped(PropertyKey.TEX_FILE, type, index, typeof(string)); }
private Vector3f[] CopyVertices(Vector3f[] vertices) { if (vertices == null) { return null; } Vector3f[] copy = new Vector3f[vertices.Length]; for (int i = 0; i < vertices.Length; ++i) { copy[i] = new Vector3f(vertices[i]); } return copy; }
public static Finder<ID, T> WithFinder<ID, T>() where T : Model { return WithFinder(DataSourceManager.GetDefaultDataSourceName()); }
[HttpPost("samples/auto-validation")] public IActionResult Auto([FromBody] Car car) { return Ok(); }
public static bool IsValid(string cssValue) { if (string.IsNullOrEmpty(cssValue) || StringUtil.IsBlank(cssValue)) { return false; } string[] cssValueParts = StringUtil.SplitBySpace(cssValue); ColumnWidth columnWidth = null; ColumnCount columnCount = null; foreach (var eachPart in cssValueParts) { bool invalid = true; if (columnWidth == null && ColumnWidth.IsValid(eachPart)) { columnWidth = new ColumnWidth(eachPart); invalid = false; } else if (columnCount == null && ColumnCount.IsValid(eachPart)) { columnCount = new ColumnCount(eachPart); invalid = false; } if (invalid) { return false; } } return columnWidth != null || columnCount != null; }
[CheckReturnValue] [SchedulerSupport(SchedulerSupport.None)] public final IObservable<T> ConcatWith(ICompletableSource other) { ObjectHelper.RequireNonNull(other, "other is null"); return RxJavaPlugins.OnAssembly(new ObservableConcatWithCompletable<T>(this, other)); }
public static void CloseWindow(Component component) { Window window = GetWindow(component); if (window != null) { window.Close(); } }
public static CPRule FetchByGroupId_Last(long groupId, OrderByComparator<CPRule> orderByComparator) { return GetPersistence().FetchByGroupId_Last(groupId, orderByComparator); }
public static void ComputePosition(Point start, Point end, long elapsed, long duration, Point pos) { float pct = (float)elapsed / duration; int travx = (int)((end.X - start.X) * pct); int travy = (int)((end.Y - start.Y) * pct); pos.Location = new System.Drawing.Point(start.X + travx, start.Y + travy); }
public DeleteDeliveryStreamResult DeleteDeliveryStream(DeleteDeliveryStreamRequest request) { request = BeforeClientExecution(request); return ExecuteDeleteDeliveryStream(request); }
[Subscribe] public synchronized void Renew(SchemaAddedEvent schemaAddedEvent) { logicSchemas[schemaAddedEvent.ShardingSchemaName] = CreateLogicSchema( schemaAddedEvent.ShardingSchemaName, new Dictionary<string, Dictionary<string, string>> { { schemaAddedEvent.ShardingSchemaName, DataSourceConverter.GetDataSourceParameterMap(schemaAddedEvent.DataSourceConfigurations) } }, schemaAddedEvent.RuleConfiguration, true ); }
protected override Event DoExecute(RequestContext context) { try { var request = WebUtils.GetHttpServletRequestFromExternalWebflowContext(context); var wa = request.GetParameter(WA); if (!string.IsNullOrWhiteSpace(wa) && wa.Equals(WSIGNIN, StringComparison.OrdinalIgnoreCase)) { wsFederationResponseValidator.ValidateWsFederationAuthenticationRequest(context); return base.DoExecute(context); } return wsFederationRequestBuilder.BuildAuthenticationRequestEvent(context); } catch (Exception ex) { LOGGER.Error(ex.Message, ex); throw new UnauthorizedServiceException(UnauthorizedServiceException.CODE_UNAUTHZ_SERVICE, ex.Message); } }
[XmlElement("Status", Namespace = "http://schema.intuit.com/finance/v3")] public JAXBElement<Status> CreateStatus(Status value) { return new JAXBElement<Status>(_Status_QNAME, typeof(Status), null, value); }
public void Subtract(AbstractHistogram otherHistogram) { long highestRecordableValue = ValueFromIndex(countsArrayLength - 1); if (highestRecordableValue < otherHistogram.GetMaxValue()) { if (!IsAutoResize()) { throw new IndexOutOfRangeException("The other histogram includes values that do not fit in this histogram's range."); } Resize(otherHistogram.GetMaxValue()); } if (bucketCount == otherHistogram.bucketCount && subBucketCount == otherHistogram.subBucketCount && unitMagnitude == otherHistogram.unitMagnitude && GetNormalizingIndexOffset() == otherHistogram.GetNormalizingIndexOffset()) { // Counts arrays are of the same length and meaning, so we can just iterate and add directly: long observedOtherTotalCount = 0; for (int i = 0; i < otherHistogram.countsArrayLength; i++) { long otherCount = otherHistogram.GetCountAtIndex(i); if (otherCount > 0) { if (GetCountAtIndex(i) < otherCount) { throw new ArgumentException($"otherHistogram count ({otherCount}) at value {ValueFromIndex(
public sealed RuntimeException ProcessDoMethodInvokeException(Exception e, object obj, object[] argumentArray) { if (e is IllegalArgumentException) { // TODO: test if this is OK with new MOP, should be changed! // we don't want the exception being unwrapped if it is a IllegalArgumentException // but in the case it is for example a IllegalThreadStateException, we want the unwrapping // from the runtime // Note: the reason we want unwrapping sometimes and sometimes not is that the method // invocation tries to invoke the method with and then reacts with type transformation // if the invocation failed here. This is OK for IllegalArgumentException, but it is // possible that a Reflector will be used to execute the call and then an Exception from inside // the method is not wrapped in a InvocationTargetException and we will end here. bool setReason = e.GetType() != typeof(IllegalArgumentException) || this is GeneratedMetaMethod; return MetaClassHelper.CreateExceptionText("failed to invoke method: ", this, obj, argumentArray, e, setReason); } if (e is RuntimeExceptio
private Dictionary<FileInfo, FileInfo> GetCopyToMap() { var copyToMap = new Dictionary<FileInfo, FileInfo>(); if (forceUnique) { foreach (var kvp in forceUniqueFilter.CopyToMap) { job.Add(kvp.Key); copyToMap[kvp.Key] = kvp.Value; } } foreach (var e in reader.GetCopyToMap()) { var target = job.TempDirUri.Relativize(e.Key); var targetFi = job.GetFileInfo(target); var source = job.TempDirUri.Relativize(e.Value); var sourceFi = job.GetFileInfo(source); // Filter when copy-to was ignored (so target is not in job), // or where target is used directly if (targetFi == null || (targetFi != null && targetFi.Src != null)) { continue; } copyToMap[targetFi] = sourceFi; } return copyToMap; }
public override BoundStatement BindInsert(PreparedStatement statement, P pojo, int ttl) { List<object> parameters = new List<object>(); keyBinding.CollectParameters(pojo, parameters); foreach (var facetBinding in facetBindings) { facetBinding.CollectParameters(pojo, parameters); } parameters.Add(ttl); return Bind(statement, parameters); }
private void Close(Store store) { StoreKey key = keysByStore[store]; LOGGER.Info($"Closing store in directory '{key.Uri}'."); store.Stop(); }
private CharSequence ReadData() { if (!_eventSource.IsConnected()) { string message = "Can't read using the MessageReader if the event source is not connected"; throw new SseException(message); } lock (this) { if (_payload != null) { // If we are here, then it means that ReadData() was invoked // after Next(). So, the _payload is already set up and we just // have to return the data. if (_eventType != SseEventType.DATA) { string message = "ReadData() can only be used to read events of type SseEventType.DATA"; throw new SseException(message); } // Clear the _payload member variable for the internal state machine. _payload = null; return _data; } // This will block the thread. If we are here, this means that // ReadData() was invoked without a previous invocation of Next(). // So, we invoke Next() and ensure that the next message is a text // message. Otherwise, throw an exception. SseEventType type = Next(); if (t
public void Into(BitmapTarget target) { long started = Stopwatch.GetTimestamp(); CheckMain(); if (target == null) { throw new ArgumentException("Target must not be null."); } if (deferred) { throw new InvalidOperationException("Fit cannot be used with a Target."); } if (!data.HasImage()) { picasso.CancelRequest(target); target.OnPrepareLoad(setPlaceholder ? GetPlaceholderDrawable() : null); return; } Request request = CreateRequest(started); if (ShouldReadFromMemoryCache(request.MemoryPolicy)) { Bitmap bitmap = picasso.QuickMemoryCacheCheck(request.Key); if (bitmap != null) { picasso.CancelRequest(target); target.OnBitmapLoaded(bitmap, MEMORY); return; } } target.OnPrepareLoad(setPlaceholder ? GetPlaceholderDrawable() : null); Action action = new BitmapTargetAction(picasso, target, request, errorDrawable, errorResId); picasso.EnqueueAndSubmit(action); }
public static Alignment<NucleotideSequence> Align(LinearGapAlignmentScoring scoring, NucleotideSequence seq1, NucleotideSequence seq2, int offset1, int length1, int offset2, int length2, int width) { try { var mutations = new MutationsBuilder<NucleotideSequence>(NucleotideSequence.ALPHABET); float score = Align0(scoring, seq1, seq2, offset1, length1, offset2, length2, width, mutations, AlignmentCache.Get()); return new Alignment<NucleotideSequence>(seq1, mutations.CreateAndDestroy(), new Range(offset1, offset1 + length1), new Range(offset2, offset2 + length2), score); } finally { AlignmentCache.Release(); } }
Constraint GetUniqueConstraintForExprs(Expression[] indexExprs) { for (int i = 0; i < constraintList.Length; i++) { Constraint exprc = constraintList[i]; if (exprc.IsUniqueWithExprs(indexExprs)) { return exprc; } } return null; }
public static void AddLibrary(JobID jobID, Path name, long size, DataInput in) { var lib = Get(); lib.AddLibraryInternal(jobID, name, size, in); }
public IList<IfcStructuralAnalysisModel> GetLoadGroupFor() { return (IList<IfcStructuralAnalysisModel>)eGet(Ifc2x3tc1Package.Literals.IFC_STRUCTURAL_LOAD_GROUP__LOAD_GROUP_FOR, true); }
public void RemoveListener(InvalidationListener listener) { if (listener == null) throw new ArgumentNullException(nameof(listener)); if (invalidationSize > 0) { if (size == 1) { if (invalidationSize == 1 && this.listener.Equals(listener)) { sentinel = false; this.listener = null; invalidationSize--; size--; } } else if (size == 2) { var l = (object[])this.listener; if (listener.Equals(l[0])) { sentinel = false; invalidationSize--; size--; this.listener = l[1]; } else if (invalidationSize == 2 && listener.Equals(l[1])) { sentinel = false; invalidationSize--; size--; this.listener = l[0]; } } else { var l = (object[])this.listener; for (int i = 0; i < invalidationSize; i++) { if (listener.Equals(l[i])) { if (sentinel) { sentinel = false; l = (object[
public static void SetChannelGroups(IEnumerable<WonderPushChannelGroup> channelGroups) { if (channelGroups == null) return; bool save = false; try { var groupIdsToRemove = new HashSet<string>(sChannelGroups.Keys); foreach (var channelGroup in channelGroups) { if (channelGroup == null) continue; groupIdsToRemove.Remove(channelGroup.Id); if (_PutChannelGroup(channelGroup)) save = true; } foreach (var groupId in groupIdsToRemove) { if (_RemoveChannelGroup(groupId)) save = true; } } catch (Exception ex) { Log.Error(WonderPush.TAG, $"Unexpected error while setting channel groups {channelGroups}", ex); } finally { try { if (save) { Save(); } } catch (Exception ex) { Log.Error(WonderPush.TAG, $"Unexpected error while setting channel groups {channelGroups}", ex); } } }
private void GenerateEntity(M2MEntity entity) { entity.PropertyPrimaryKey = TypeName.LONG; entity.PropertyKey1 = FindPrimaryKeyFieldType(entity.Entity1Name.ToString()); entity.PropertyKey2 = FindPrimaryKeyFieldType(entity.Entity2Name.ToString()); if (!entity.NeedToCreate) { return; } string tableName = entity.TableName; string entityClassName = entity.Name; AnnotationProcessorUtilis.InfoOnGeneratedClasses(typeof(BindDaoMany2Many), entity.GetPackageName(), entityClassName); var converterFK = CaseFormat.LOWER_CAMEL.ConverterTo(CaseFormat.UPPER_CAMEL); var converterFieldName = CaseFormat.UPPER_CAMEL.ConverterTo(CaseFormat.LOWER_CAMEL); var converterField2ColumnName = CaseFormat.LOWER_CAMEL.ConverterTo(CaseFormat.LOWER_UNDERSCORE); string fkPrefix = converterFK.Convert(entity.IdName); string fk1Name = converterField2ColumnName.Convert(entity.Entity1Name.SimpleName() + fkPrefix); string fk2Name = converterField2ColumnName.Convert(entity.Entity2Name.SimpleName() + fkPrefix); str
public static void Set(MutableIntTuple t, int v) { for (int i = 0; i < t.GetSize(); i++) { t.Set(i, v); } }
public static SecondaryIndex CreateInstance(ColumnFamilyStore baseCfs, ColumnDefinition cdef) { SecondaryIndex index; switch (cdef.GetIndexType()) { case IndexType.Keys: index = new KeysIndex(); break; case IndexType.Composites: index = CompositesIndex.Create(cdef); break; case IndexType.Custom: if (cdef.GetIndexOptions() == null) throw new ConfigurationException("Index options cannot be null."); string className = cdef.GetIndexOptions()[CUSTOM_INDEX_OPTION_NAME]; if (className == null) throw new ConfigurationException("Custom index class name cannot be null."); try { index = (SecondaryIndex)Activator.CreateInstance(Type.GetType(className)); } catch (Exception e) { throw new RuntimeException(e); } break; default: throw new RuntimeException("Unknown index type: " + cdef.GetIndexName()); } index.AddColumnDef(cdef); index.ValidateOptions(); index.SetBaseCfs(baseCfs); return index; }
protected override bool OnTouchEvent(MotionEvent ev) { if (mGestureDetector != null) { return mGestureDetector.OnTouchEvent(ev); } else { return base.OnTouchEvent(ev); } }
public RegistryCredentialsInner RegenerateCredentials(string resourceGroupName, string registryName) { return RegenerateCredentialsWithServiceResponseAsync(resourceGroupName, registryName).Result.Body; }
public static void ReplaceMultipleTo(string sInputString, char[] aSearchChars, char cReplacementChar, StringBuilder aTarget) { if (aSearchChars == null) throw new ArgumentNullException(nameof(aSearchChars), "SearchChars cannot be null."); if (aTarget == null) throw new ArgumentNullException(nameof(aTarget), "Target cannot be null."); // Any input text? if (!string.IsNullOrWhiteSpace(sInputString)) { // Any search chars? if (aSearchChars.Length == 0) { aTarget.Append(sInputString); } else { // Perform the replacement foreach (char c in sInputString) { if (aSearchChars.Contains(c)) aTarget.Append(cReplacementChar); else aTarget.Append(c); } } } }
public void FlushChildScopes(QName unitId) { HashSet<int> childScopes = FindChildScopes(unitId); foreach (int scopeId in childScopes) { MutableContext mutableContext = statementContexts[scopeId]; mutableContext.ClearStatements(); } }
public bool ExecInsert(D6Model[] modelObjects, D6Index includeExcludeColumnNames) { bool ignoreDuplicate = false; return ExecInsert(modelObjects, includeExcludeColumnNames, ignoreDuplicate); }
public void SetRelatedEvents(IEnumerable<string> relatedEvents) { if (relatedEvents == null) { this.relatedEvents = null; return; } this.relatedEvents = new List<string>(relatedEvents); }
private static void Sort1(IQuicksortable q, int off, int k, int len) { // we don't care about anything >= to k if (off >= k) return; // Insertion sort on smallest arrays if (len < 7) { for (int i = off; i < len + off; i++) for (int j = i; j > off && q.Compare(j, j - 1) < 0; j--) q.Swap(j, j - 1); return; } // Choose a partition element, v int m = off + (len >> 1); // Small arrays, middle element if (len > 7) { int l = off; int n = off + len - 1; if (len > 40) // Big arrays, pseudomedian of 9 { int s = len / 8; l = Med3(q, l, l + s, l + 2 * s); m = Med3(q, m - s, m, m + s); n = Med3(q, n
[Obsolete] public static string ParseRegionName(string host, string serviceHint) { string region = ParseRegion(host, serviceHint); // If region is null, then endpoint is totally non-standard; // guess us-east-1 for lack of a better option. return region == null ? "us-east-1" : region; }
private static string GetRealDeptId(string deptId) { int start = deptId.IndexOf("["); string realKey = deptId; if (start > 0) { realKey = deptId.Substring(0, start); } return realKey; }
public void Write(ByteCodeWriter out) { out.Write(ConstantPool.CP_UTF8); out.WriteUTF8(_value); }
protected void SequenceXSynchronizedExpression(ISerializationContext context, XSynchronizedExpression semanticObject) { if (errorAcceptor != null) { if (transientValues.IsValueTransient(semanticObject, XbasePackage.Literals.XSYNCHRONIZED_EXPRESSION__PARAM) == ValueTransient.YES) errorAcceptor.Accept(diagnosticProvider.CreateFeatureValueMissing(semanticObject, XbasePackage.Literals.XSYNCHRONIZED_EXPRESSION__PARAM)); if (transientValues.IsValueTransient(semanticObject, XbasePackage.Literals.XSYNCHRONIZED_EXPRESSION__EXPRESSION) == ValueTransient.YES) errorAcceptor.Accept(diagnosticProvider.CreateFeatureValueMissing(semanticObject, XbasePackage.Literals.XSYNCHRONIZED_EXPRESSION__EXPRESSION)); } var feeder = CreateSequencerFeeder(context, semanticObject); feeder.Accept(grammarAccess.GetXSynchronizedExpressionAccess().GetParamXExpressionParserRuleCall_1_0(), semanticObject.Param); feeder.Accept(grammarAccess.GetXSynchronizedExpressionAccess().GetExpressionXExpressionParserRuleCall_3_0(), semanticObject.Expression); feeder.Finish(); }
public string GetRedirectUri(AccessTokenRequest request) { string redirectUri = request.GetFirst("redirect_uri"); if (redirectUri == null && request.GetCurrentUri() != null && useCurrentUri) { redirectUri = request.GetCurrentUri(); } if (redirectUri == null && GetPreEstablishedRedirectUri() != null) { // Override the redirect_uri if it is pre-registered redirectUri = GetPreEstablishedRedirectUri(); } return redirectUri; }
public bool Remove(HashSet<object> set, object obj) { if (set == null || obj == null) { return false; } return set.Remove(obj); }
public IEnumerable<int> Ones() { return Enumerable.Range(0, Length()).Where(index => Bit.Get(_genes, index)); }
public static LUDecomposition<FloatMatrix> Lu(FloatMatrix A) { int[] ipiv = new int[Math.Min(A.Rows, A.Columns)]; FloatMatrix result = A.Dup(); NativeBlas.sgetrf(A.Rows, A.Columns, result.Data, 0, A.Rows, ipiv, 0); // collect result FloatMatrix l = new FloatMatrix(A.Rows, Math.Min(A.Rows, A.Columns)); FloatMatrix u = new FloatMatrix(Math.Min(A.Columns, A.Rows), A.Columns); DecomposeLowerUpper(result, l, u); FloatMatrix p = Permutations.PermutationFloatMatrixFromPivotIndices(A.Rows, ipiv); return new LUDecomposition<FloatMatrix>(l, u, p); }
private bool ContainsRestrictedPrefix(string tpl) { foreach (string i in blackPrefixList) { if (tpl.StartsWith(i)) return true; } return false; }
public NormalizedUserProfile GetUserProfileInfo(AccessToken accessTokenParam) { if (accessTokenParam == null || string.IsNullOrWhiteSpace(accessTokenParam.GetAccessToken())) { throw new FluidClientException("Code must be provided.", FluidClientException.ErrorCode.FIELD_VALIDATE); } try { string accessToken = accessTokenParam.GetAccessToken(); var headerListing = new List<HeaderNameValue> { new HeaderNameValue(NormalizedUserProfile.HeaderMapping.AUTHORIZATION, "Bearer " + accessToken) }; return new NormalizedUserProfile(GetJson(true, WS.Path.Auth0.Version1.userInfo(), headerListing)); } catch (Exception e) // Catching general exception since UnsupportedEncodingException doesn't exist in C# { throw new FluidClientException("Unable to Encode (Not Supported). " + e.Message, FluidClientException.ErrorCode.ILLEGAL_STATE_ERROR); } }
public static DateTime NewDate() { long DAY_MILLIS = 86400000; // Number of milliseconds in a day return new DateTime((DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() / DAY_MILLIS) * DAY_MILLIS, DateTimeKind.Utc); }
public void CastExpression() { BaseDescr expr = null; try { // Assuming input is defined and matches the grammar rules if (input.LA(1) == LEFT_PAREN) { int alt54 = 0; if (SynPred17_DRL5Expressions()) { alt54 = 1; } else if (SynPred18_DRL5Expressions()) { alt54 = 2; } else { if (state.backtracking > 0) { state.failed = true; return; } throw new NoViableAltException(); } switch (alt54) { case 1: Match(input, LEFT_PAREN); PrimitiveType(); Match(input, RIGHT_PAREN); expr = UnaryExpression(); break; case 2: Match(input, LEFT_PAREN); Type(); Match(input, RIGHT_PAREN); UnaryExpressionNotPlusMinus(); break; } } else { if (state.backtracking > 0) { state.failed = true; return; } throw new NoViable
public override void MarkInitialState() { base.MarkInitialState(); Converter c = GetConverter(); if (c != null && c is PartialStateHolder partialStateHolder) { partialStateHolder.MarkInitialState(); } }
private Sha256Hash RecursiveExtractHashes(int height, int pos, ValuesUsed used, List<Sha256Hash> matchedHashes) { if (used.bitsUsed >= matchedChildBits.Length * 8) { // overflowed the bits array - failure throw new VerificationException("PartialMerkleTree overflowed its bits array"); } bool parentOfMatch = CheckBitLE(matchedChildBits, used.bitsUsed++); if (height == 0 || !parentOfMatch) { // if at height 0, or nothing interesting below, use stored hash and do not descend if (used.hashesUsed >= hashes.Count) { // overflowed the hash array - failure throw new VerificationException("PartialMerkleTree overflowed its hash array"); } Sha256Hash hash = hashes[used.hashesUsed++]; if (height == 0 && parentOfMatch) // in case of height 0, we have a matched txid matchedHashes.Add(hash); return hash; } else { // otherwise, descend into the subtrees to extract matched txids and hashes byte[] left = RecursiveExtractHashes(heigh
public AABBf SetMax(float maxX, float maxY, float maxZ) { this.maxX = maxX; this.maxY = maxY; this.maxZ = maxZ; return this; }
public IssueDto SetComponentUuid(string s) { if (s != null && s.Length > 50) { throw new ArgumentException($"Value is too long for column ISSUES.COMPONENT_UUID: {s}"); } this.componentUuid = s; return this; }
public object SaveState(FacesContext context) { if (context == null) { throw new ArgumentNullException(); } if (attachedObjects == null) { return null; } if (initialState) { object[] attachedObjectsArray = new object[this.attachedObjects.Count]; bool stateWritten = false; for (int i = 0; i < attachedObjectsArray.Length; i++) { var attachedObject = this.attachedObjects[i]; if (attachedObject is IStateHolder sh) { if (!sh.IsTransient()) { attachedObjectsArray[i] = sh.SaveState(context); } if (attachedObjectsArray[i] != null) { stateWritten = true; } } } return stateWritten ? attachedObjectsArray : null; } else { object[] attachedObjectsArray = new object[this.attachedObjects.Count]; for (int i = 0; i < attachedObjectsArray.Length; i++) { attachedObjectsArray[i] = UIComponentBase.SaveAttachedState(context, this.attachedObjects[i]); } return attachedObjectsArray;
public override Shape ToSpatial4j(SpatialContext spatialContext) { return spatialContext.MakePoint(longitude, latitude); }
private static int ToAnsi(int red, int green, int blue) { // rescale to 0-5 range red = red * 6 / 256; green = green * 6 / 256; blue = blue * 6 / 256; return 16 + red * 36 + green * 6 + blue; }
private HttpOutboundServiceContextImpl GetInterface(VirtualConnection inVC) { if (this.myInterface == null) { this.myInterface = new HttpOutboundServiceContextImpl((TCPConnectionContext)GetDeviceLink().GetChannelAccessor(), this, inVC, this.myChannel.HttpConfig); } return this.myInterface; }
public static int LastIndexOf(char toBeFound, char[] array, int startIndex, int endIndex) { for (int i = endIndex; i >= startIndex; i--) { if (toBeFound == array[i]) { return i; } } return -1; }
public void Upsert(Term term, Document document) { Log.Debug($"Updating document {document} with term {term}"); try { indexWriter.UpdateDocument(term, document); } catch (IOException e) { Log.Error(e, $"Error while updating document {document} with term {term}"); throw new RuntimeException(e); } }
public MaterialAccount GetAccountAtCurrentPosition(int position) { if (position < 0 || position >= accountManager.Count) throw new InvalidOperationException("Account Index Overflow"); return FindAccountNumber(position); }
protected override void ResizeDynamicText() { double maxWidth = unitText.Visible ? width - size * 0.275 : width - size * 0.1; double fontSize = size * 0.24; valueText.Font = Fonts.LatoRegular(fontSize); if (valueText.LayoutBounds.Width > maxWidth) { Helper.AdjustTextSize(valueText, maxWidth, fontSize); } }
public static void StartTrack(params object[] args) { if (isClosed) return; // Create Record int len = args.Length == 0 ? 0 : args.Length - 1; var content = args.Length == 0 ? string.Empty : args[len]; var tags = new object[len]; var ste = GetStackTrace(); long timestamp = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); Array.Copy(args, 0, tags, 0, len); // Create Task long threadID = Thread.CurrentThread.ManagedThreadId; Action startTrack = () => { Debug.Assert(!isThreaded || control.IsHeldByCurrentThread()); var toPass = new Record(content, tags, depth, ste, timestamp); depth += 1; titleStack.Push(args.Length == 0 ? string.Empty : args[len].ToString()); handlers.Process(toPass, MessageType.START_TRACK, depth, toPass.Timestamp); Debug.Assert(!isThreaded || control.IsHeldByCurrentThread()); }; // Run Task if (isThreaded) { // (case: multithreaded) long currentThreadId = Thr
private RegisteredCommand SearchCommands(string cmdOwner, HttpMethod method, string uri, string query, Dictionary<string, string> variableMap) { var evalMap = GetCmdEvalMap(cmdOwner); if (evalMap == null) { return null; } // Find the sorted command set for the given HTTP method. if (!evalMap.TryGetValue(method, out var cmdSet)) { return null; } // Split uri into a list of non-empty nodes. var pathNodeList = new List<string>(); var pathNodes = uri.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries); foreach (var pathNode in pathNodes) { pathNodeList.Add(pathNode); } // Attempt to match commands in this set in order. foreach (var cmd in cmdSet) { if (cmd.Matches(pathNodeList, query, variableMap)) { return cmd; } } return null; }
public EEnum GetIfcControllerTypeEnum() { if (ifcControllerTypeEnumEEnum == null) { ifcControllerTypeEnumEEnum = (EEnum)EPackage.Registry.INSTANCE.GetEPackage(Ifc2x3tc1Package.eNS_URI) .GetEClassifiers()[800]; } return ifcControllerTypeEnumEEnum; }
protected object ReadValue(Type type, Type elementType, Type defaultType) { string tag = null, anchor = null; EventParser.Event event = parser.PeekNextEvent(); switch (event.Type) { case EventType.Alias: parser.GetNextEvent(); anchor = ((AliasEvent)event).Anchor; object value = anchors[anchor]; if (value == null) throw new YamlReaderException("Unknown anchor: " + anchor); return value; case EventType.MappingStart: case EventType.SequenceStart: tag = ((CollectionStartEvent)event).Tag; anchor = ((CollectionStartEvent)event).Anchor; break; case EventType.Scalar: tag = ((ScalarEvent)event).Tag; anchor = ((ScalarEvent)event).Anchor; break; default: break; } return ReadValueInternal(ChooseType(tag, defaultType, type), elementType, anchor); }
public void Write(LangProfile langProfile, Stream outputStream) { using (var writer = new StreamWriter(outputStream, System.Text.Encoding.UTF8)) { writer.Write("{\"freq\":{"); bool first = true; foreach (var entry in langProfile.GetFreq()) { if (!first) { writer.Write(','); } writer.Write($"\"{entry.Key}\":\"{entry.Value}\""); first = false; } writer.Write("},\"n_words\":["); first = true; foreach (var nWord in langProfile.GetNWords()) { if (!first) { writer.Write(','); } writer.Write(nWord.ToString()); first = false; } writer.Write("],\"name\":\""); writer.Write(langProfile.GetName()); writer.Write("\"}"); writer.Flush(); } }
public virtual ServiceTracker<T, ServletContextHelperElement> Create(Type trackedClass) { return new ServiceTracker<T, ServletContextHelperElement>(bundleContext, CreateFilter(bundleContext, trackedClass), this); }
protected XmlMappingException ConvertCastorException(XMLException ex, bool marshalling) { if (ex is ValidationException) { return new ValidationFailureException("Castor validation exception", ex); } else if (ex is MarshalException) { if (marshalling) { return new MarshallingFailureException("Castor marshalling exception", ex); } else { return new UnmarshallingFailureException("Castor unmarshalling exception", ex); } } else { // fallback return new UncategorizedMappingException("Unknown Castor exception", ex); } }
public double Sim(DoubleVector v1, DoubleVector v2) { double dotProduct = VectorMath.DotProduct(v1, v2); return Math.Pow(dotProduct + 1, degree); }
[Action(name: "Customize Linux Guest", outputs: new[] { Outputs.RETURN_CODE, Outputs.RETURN_RESULT, Outputs.EXCEPTION }, responses: new[] { new Response(text: Outputs.SUCCESS, field: Outputs.RETURN_CODE, value: Outputs.RETURN_CODE_SUCCESS, matchType: MatchType.COMPARE_EQUAL, responseType: ResponseType.RESOLVED), new Response(text: Outputs.FAILURE, field: Outputs.RETURN_CODE, value: Outputs.RETURN_CODE_FAILURE, matchType: MatchType.COMPARE_EQUAL, responseType: ResponseType.ERROR, isOnFail: true) })] public Dictionary<string, string> CustomizeLinuxGuest( [Param(value: Inputs.HOST, required: true)] string host, [Param(value: Inputs.PORT)] string port, [Param(value: Inputs.PROTOCOL)] string protocol, [Param(value: Inputs.USERNAME, required: true)] string username, [Param(value: Inputs.PASSWORD, encrypted: true)] string password, [Param(value: Inputs.TRUST_EVERYONE)] string trustEveryone, [Param(value: Inputs.CLOSE_SESSION)] string closeSession, [Param(value: Inputs.VM_NAME, required: t
public int GetAttempts() { string attempts = this.properties.GetValue("attempts"); if (attempts == null) { attempts = "0"; } return int.Parse(attempts); }
private int EnsureIndex(int key, bool intType) { int index = -1; int firstDeleted = -1; int[] keys = this.keys; if (keys != null) { int fraction = key * A; index = fraction >> (32 - power); int entry = keys[index]; if (entry == key) { return index; } if (entry != EMPTY) { if (entry == DELETED) { firstDeleted = index; } // Search in table after first failed attempt int mask = (1 << power) - 1; int step = TableLookupStep(fraction, mask, power); int n = 0; do { if (check) { if (n >= occupiedCount) Kit.CodeBug(); ++n; } index = (index + step) & mask; entry = keys[index]; if (entry == key) { return index; } if (entry == DELETED && firstDeleted < 0) {
public int CompareTo(StorageSize that) { if (that == null) throw new ArgumentNullException("Cannot compareTo a null value!"); return this.GetBits().CompareTo(that.GetBits()); }
public T Until<T>(Func<T> condition) { long end = clock.LaterBy(timeout.InMilliseconds()); Exception lastException = null; while (true) { try { T toReturn = condition.Invoke(); if (toReturn != null && toReturn is bool) { if ((bool)(object)toReturn) { return toReturn; } } else if (toReturn != null) { return toReturn; } } catch (Exception e) { lastException = PropagateIfNotIgnored(e); } if (!clock.IsNowBefore(end)) { string toAppend = message == null ? $" waiting for {condition.Method.Name}" : string.Empty; string timeoutMessage = string.Format("Timed out after {0} milliseconds{1}", timeout.InMilliseconds(), toAppend); throw TimeoutException(timeoutMessage, lastException); } try { sleeper.Sleep(interval); } catch (ThreadInterruptedException e) { Thread.CurrentThread.Interrupt(); throw new WebDriverException(e); } } }
private int CompareToReleaseMinor(GitVersion that) { if (this.ContainsReleaseMinor() && that.ContainsReleaseMinor()) return CompareToInt(this.GetReleaseMinor(), that.GetReleaseMinor()); else if (!this.ContainsReleaseMinor() && !that.ContainsReleaseMinor()) return SAME; else if (this.ContainsReleaseMinor() && !that.ContainsReleaseMinor()) return LATER; else return PREVIOUS; }
using System; using System.Web; public static class ServletContextHelper { public static string GetPathWithinServletContext(HttpRequest aHttpRequest) { if (aHttpRequest == null) throw new ArgumentNullException(nameof(aHttpRequest), "HttpRequest cannot be null"); string sRequestURI = aHttpRequest.Uri.AbsolutePath; if (string.IsNullOrWhiteSpace(sRequestURI)) { // Can e.g. happen for "Request(GET //localhost:90/)" if (Logger.IsDebugEnabled) Logger.Debug($"Having empty request URI '{sRequestURI}' from request '{aHttpRequest}'"); return "/"; } // Always use the context path string sContextPath = HttpContext.Current.Request.ApplicationPath; if (string.IsNullOrWhiteSpace(sContextPath) || !sRequestURI.StartsWith(sContextPath, StringComparison.Ordinal)) return sRequestURI; // Normal case: URI contains context path. string sPath = sRequestURI.Substring(sContextPath.Length); return sPath.Length > 0 ? sPath : "/"; } }
public static IOException Create(IOException exn) { if (exn.GetType() == typeof(IOException) || exn.GetType() == typeof(SocketException) || exn.GetType().Name == "SSLException") { return new SocketTimeoutException(exn.Message, exn); } else { return exn; } }
public void Marshall(DescribePipelineRequest describePipelineRequest, IProtocolMarshaller protocolMarshaller) { if (describePipelineRequest == null) { throw new SdkClientException("Invalid argument passed to marshall(...)"); } try { protocolMarshaller.Marshall(describePipelineRequest.PipelineName, PIPELINENAME_BINDING); } catch (Exception e) { throw new SdkClientException("Unable to marshall request to JSON: " + e.Message, e); } }
private void InitDataDictionaryMap() { DataDictionary dd = rawPmml.GetDataDictionary(); if (dd != null) { dataDictionaryMap = new Dictionary<string, PMMLDataField>(); foreach (DataField dataField in dd.GetDataFields()) { PMMLDataField df = new PMMLDataField(dataField); dataDictionaryMap[df.GetName()] = df; } } else { throw new InvalidOperationException("BRMS-PMML requires a data dictionary section in the definition file"); } }
public List<object> ReadAll(string tableName, Type clazz, EntityMetadata m, List<object> rowKey, List<string> relationNames, params string[] columns) { Table hTable = GetHTable(tableName); List<HBaseDataWrapper> results = ((HBaseReader)hbaseReader).LoadAll(hTable, rowKey, null, columns); return OnRead(m, null, hTable, results); }
private void ReadAllImagesAndVariations(string root) { var basedir = new DirectoryInfo(CmsImageLoader.GetImageRepositoryPath() + root); VisitImages(m_clonedCms, basedir); m_variations = new ReadOnlyDictionary<string, object>(m_variations); m_sizes = new ReadOnlyDictionary<string, object>(m_sizes); m_lengths = new ReadOnlyDictionary<string, object>(m_lengths); }
public async Task<ServiceFuture<List<SyncDatabaseIdPropertiesInner>>> ListSyncDatabaseIdsNextAsync(string nextPageLink, ServiceFuture<List<SyncDatabaseIdPropertiesInner>> serviceFuture, ListOperationCallback<SyncDatabaseIdPropertiesInner> serviceCallback) { return AzureServiceFuture.FromPageResponse( await ListSyncDatabaseIdsNextSinglePageAsync(nextPageLink), (nextLink) => ListSyncDatabaseIdsNextSinglePageAsync(nextLink), serviceCallback); }
public SDVariable Eye(SDVariable rows, SDVariable cols, SDVariable batchDimension) { return Eye(null, rows, cols, batchDimension); }
public EthereumBlock ReadBlock() { ByteBuffer rawBlock = this.ReadRawBlock(); if (rawBlock == null) { return null; } RLPObject blockObject = EthereumUtil.RlpDecodeNextItem(rawBlock); if (blockObject == null || !(blockObject is RLPList)) { throw new EthereumBlockReadException("Invalid Ethereum Block: Not encoded RLPList"); } RLPList block = (RLPList)blockObject; // block header RLPList rlpHeader = (RLPList)block.GetRlpList()[0]; // transactions RLPList rlpTransactions = (RLPList)block.GetRlpList()[1]; // uncles RLPList rlpUncles = (RLPList)block.GetRlpList()[2]; // create header object EthereumBlockHeader ethereumBlockHeader = ParseRLPBlockHeader(rlpHeader); List<EthereumTransaction> ethereumTransactions = ParseRLPTransactions(rlpTransactions); List<EthereumBlockHeader> uncleHeaders = ParseRLPUncleHeaders(rlpUncles); return new EthereumBlock(ether
public void Add(ClassLoader classLoader) { if (classLoader == null) { return; } if (added.Add(classLoader)) { var entry = GetRegistryEntry(classLoader); if (entry != null) { classLoaderOrder.Add(new KeyValuePair<ClassLoader, ClassLoaderHandlerRegistryEntry>(classLoader, entry)); } } }
public override IList<IfcObjectDefinition> GetRelatedObjects() { return (IList<IfcObjectDefinition>)eGet(Ifc4Package.Literals.IFC_REL_ASSIGNS__RELATED_OBJECTS, true); }
public Yasson DoWith(Action<JsonbConfig> configurer) { if (configurer == null) throw new ArgumentNullException("Configurer callback is required."); this.configurer = (jsonConfig, conf) => configurer(jsonConfig); return this; }
public static string ToLowerCase(string value) { return value != null ? value.ToLower() : null; }
public SIBusMessage NextLocked() { if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) SibTr.Entry(this, tc, "NextLocked"); JsMessage retMsg = null; lock (lmeOperationMonitor) { CheckValid(); // At this point we look at each item in the array up to end of the array for the next // non-null item. This is because some points in the array may be null if they have been // deleted or unlocked. while (nextIndex != messages.Length) { retMsg = messages[nextIndex]; nextIndex++; if (retMsg != null) break; } } if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) SibTr.Exit(this, tc, "NextLocked", retMsg); return retMsg; }
public static string CreateTimestampAntiLeechUrl(string host, string fileName, StringMap queryStringMap, string encryptKey, long deadline) { Uri urlObj = null; try { string urlToSign = null; if (queryStringMap != null && queryStringMap.Count > 0) { var queryStrings = new List<string>(); foreach (var entry in queryStringMap.Map) { var queryStringBuilder = new StringBuilder(); queryStringBuilder.Append(WebUtility.UrlEncode(entry.Key)); queryStringBuilder.Append("="); queryStringBuilder.Append(WebUtility.UrlEncode(entry.Value.ToString())); queryStrings.Add(queryStringBuilder.ToString()); } urlToSign = string.Format("{0}/{1}?{2}", host, fileName, string.Join("&", queryStrings)); } else { urlToSign = string.Format("{0}/{1}", host, fileName); } urlObj = new Uri(urlToSign); } catch (Exception e) { throw new QiniuException(e, "timestamp anti leech failed"); } return CreateTimestampAntiLeechUrl(urlObj, encryptKey, deadline
public void WriteClosePortal(string portal) { EnsureBuffer(); int pos = Out.WriterIndex(); Out.WriteByte(CLOSE); Out.WriteInt(0); Out.WriteByte((byte)'P'); // 'S' to close a prepared statement or 'P' to close a portal Util.WriteCStringUTF8(Out, portal); Out.SetInt(pos + 1, Out.WriterIndex() - pos - 1); }
public void AttachView(V view) { presenterDestroyed = false; viewRef = new WeakReference<V>(view); RunQueuedActions(); }
using System.Collections.Generic; public static List<T> Reverse<T>(List<T> list) { list.Reverse(); return list; }
public string GetVariableName() { object refVariable = variableName_; if (refVariable is string) { return (string)refVariable; } else { var bs = (Google.Protobuf.ByteString)refVariable; string s = bs.ToStringUtf8(); variableName_ = s; return s; } }
protected void InitMaxCellWidth() { m_maxCellWidth = m_opener.GetOffsetWidth() - 2; // border foreach (var widget in m_selector) { if (widget is A_CmsSelectCell cell) { int cellWidth = cell.GetRequiredWidth(); if (cellWidth > m_maxCellWidth) { m_maxCellWidth = cellWidth; } } } }
public static OrderBook AdaptOrderBook(EXXOrderbook exxOrderbook, CurrencyPair currencyPair) { List<LimitOrder> asks = new List<LimitOrder>(); List<LimitOrder> bids = new List<LimitOrder>(); foreach (var exxAsk in exxOrderbook.GetAsks()) { asks.Add(new LimitOrder(OrderType.ASK, exxAsk[1], currencyPair, null, null, exxAsk[0])); } foreach (var exxBid in exxOrderbook.GetBids()) { bids.Add(new LimitOrder(OrderType.BID, exxBid[1], currencyPair, null, null, exxBid[0])); } return new OrderBook(DateTime.Now, asks, bids); }
public bool WaitForFragmentById(int id, int timeout) { if (config.CommandLogging) { Log.Debug(config.CommandLoggingTag, $"WaitForFragmentById(\"{id}\", \"{timeout}\")"); } return waiter.WaitForFragment(null, id, timeout); }
public static void Debug(string format, params object[] arguments) { Debug(LogFactory.Get(CallerUtil.GetCallerCaller()), format, arguments); }
private IEnumerator<T> GetAll<T>(string entityType, IUnmarshaller<T> unmarshaller) { string query = MatchAllQuery(); return GetAll(entityType, unmarshaller, query); }
private void UpdateOneConfFile(string fileName, DisconfCenterFile disconfCenterFile) { if (disconfCenterFile == null) { throw new Exception("cannot find disconfCenterFile " + fileName); } string filePath = fileName; Dictionary<string, object> dataMap = new Dictionary<string, object>(); // 开启disconf才需要远程下载, 否则就本地就好 if (DisClientConfig.GetInstance().ENABLE_DISCONF) { // 下载配置 try { string url = disconfCenterFile.GetRemoteServerUrl(); filePath = fetcherMgr.DownloadFileFromServer(url, fileName, disconfCenterFile.GetFileDir()); } catch (Exception e) { // 下载失败了, 尝试使用本地的配置 Logger.Error(e.ToString(), e); Logger.Warn("using local properties in class path: " + fileName); // change file path filePath = fileName; } Logger.Debug("download ok."); } try { dataMap = FileTypeProcessorUtils.GetKvMap(disconfCenterFile.GetSupp
public ResendContactReachabilityEmailResult ResendContactReachabilityEmail(ResendContactReachabilityEmailRequest request) { request = BeforeClientExecution(request); return ExecuteResendContactReachabilityEmail(request); }
public static void SetValue(ExpressionAccessor expression, OgnlContext context, object root, object value) { expression.Set(context, root, value); }
public ScheduledEntry<K, V> Get(K key) { lock (mutex) { if (scheduleType.Equals(ScheduleType.FOR_EACH)) { return GetByCompositeKey(key); } if (secondsOfKeys.TryGetValue(key, out int second)) { if (scheduledEntries.TryGetValue(second, out var entries)) { if (entries != null && entries.TryGetValue(key, out var entry)) { return entry; } } } return null; } }
static int MakeKey(int center, int subcenter, int version) { if (center < 0) center = 255; if (subcenter < 0) subcenter = 255; if (version < 0) version = 255; return center * 1000 * 1000 + subcenter * 1000 + version; }
public ServiceFuture<DenyAssignmentInner> GetAsync(string scope, string denyAssignmentId, ServiceCallback<DenyAssignmentInner> serviceCallback) { return ServiceFuture.FromResponse(GetWithServiceResponseAsync(scope, denyAssignmentId), serviceCallback); }
public ActionResult GetRuleNode(string surt) { return View(view, new { obj = ruleDao.GetRulesWithExactSurt(surt) }); }
public static ComputationGraphSpace FromYaml(string yaml) { try { return YamlMapper.GetMapper().ReadValue<ComputationGraphSpace>(yaml); } catch (IOException e) { throw new Exception(e.Message, e); } }
private int[] HiddenIndices(bool[] disclosure) { if (disclosure == null) { throw new ArgumentException("Cannot compute hidden indices of null disclosure"); } List<int> hiddenIndicesList = new List<int>(); for (int i = 0; i < disclosure.Length; i++) { if (!disclosure[i]) { hiddenIndicesList.Add(i); } } return hiddenIndicesList.ToArray(); }
public static Builder Builder() { return new AutoValue_OffsetPaginationConfiguration.Builder() { DefaultOffset = 0L, DefaultLimit = 20, MaxLimit = 100, LimitFieldName = "limit", OffsetFieldName = "offset", AllowZeroLimit = false }; }
public override Request<DescribeAddressesRequest> GetDryRunRequest() { var request = new DescribeAddressesRequestMarshaller().Marshall(this); request.AddParameter("DryRun", true.ToString()); return request; }
private DatanodeDescriptor[] ChooseTargetF4( string fileName, int numOfReplicas, DatanodeDescriptor writer, List<DatanodeDescriptor> chosenNodes, List<Node> exclNodes, long blocksize) { FSNamesystem.LOG.Info($"F4: F4 policy invoked for file: {fileName}, with replica count: {numOfReplicas}"); // If replica>1 then just default back to RAID if (numOfReplicas > 1) { return base.ChooseTarget(numOfReplicas, writer, chosenNodes, exclNodes, blocksize); } FileInfo info; LocatedBlocks blocks; int blockIndex = -1; try { blocks = this.namesystem.GetBlockLocations(fileName, 0, long.MaxValue); info = GetFileInfo(null, fileName); blockIndex = blocks.GetLocatedBlocks().Count; } catch (IOException) { FSNamesystem.LOG.Error("F4: Error happened when calling getFileInfo/getBlockLocations"); return base.ChooseTarget(fileName, numOfReplicas, writer, chosenNodes, exclNodes, blocks
public static string StringifyAliasesParameters(Dictionary<byte, AbstractType> aliases) { StringBuilder sb = new StringBuilder(); sb.Append('('); var enumerator = aliases.GetEnumerator(); if (enumerator.MoveNext()) { var entry = enumerator.Current; sb.Append((char)entry.Key).Append("=>").Append(entry.Value); } while (enumerator.MoveNext()) { var entry = enumerator.Current; sb.Append(',').Append((char)entry.Key).Append("=>").Append(entry.Value); } sb.Append(')'); return sb.ToString(); }
public void To(NodeDescriptor descriptor, Stream output) { // Precondition checks if (descriptor == null) { throw new ArgumentException("Descriptor must be specified"); } if (output == null) { throw new ArgumentException("Stream must be specified"); } // Get the root node Node root = descriptor.GetRootNode(); // Delegate this.To(root, output); }
private static Document GetDocument(Uri pathToPersistenceXml) { Stream is = null; Document xmlRootNode = null; try { if (pathToPersistenceXml != null) { HttpWebRequest request = (HttpWebRequest)WebRequest.Create(pathToPersistenceXml); request.AllowAutoRedirect = false; // avoid JAR locking on Windows and Tomcat. is = request.GetResponse().GetResponseStream(); } if (is == null) { throw new IOException($"Failed to obtain InputStream from url: {pathToPersistenceXml}"); } xmlRootNode = ParseDocument(is); ValidateDocumentAgainstSchema(xmlRootNode); } catch (IOException e) { throw new InvalidConfigurationException(e); } finally { if (is != null) { try { is.Close(); } catch (IOException ex) { log.Warn($"Input stream could not be closed after parsing persistence.xml, caused by: {ex}"); } } } return xmlRootNode; }
using System.Text.RegularExpressions; public static bool IsTel(string value) { string check = @"^\d{3,4}-?\d{7,9}$"; return Regex.IsMatch(value, check, RegexOptions.IgnoreCase); }
public void UpdateVolume(int volumeValue) { if (dialog != null && dialog.IsShowing()) { int index = volumeValue / 600; if (index >= volumes.Length - 1) { index = volumes.Length - 1; } mImageView.SetImageResource(volumes[index]); } }
protected Service RestoreAuthenticationRequestInContext(RequestContext requestContext, J2EContext webContext, string clientName) { bool logoutEndpoint = IsLogoutRequest(webContext.GetRequest()); if (logoutEndpoint) { return null; } else { try { var client = (BaseClient<Credentials, CommonProfile>)this.clients.FindClient(clientName); return delegatedClientWebflowManager.Retrieve(requestContext, webContext, client); } catch (Exception e) { LOGGER.Error(e.Message, e); } throw new UnauthorizedServiceException(UnauthorizedServiceException.CODE_UNAUTHZ_SERVICE, "Service unauthorized"); } }
public static Type GetType(Type clazz) { if (clazz.IsPrimitive) { if (clazz == typeof(int)) { return typeof(int); } else if (clazz == typeof(void)) { return typeof(void); } else if (clazz == typeof(bool)) { return typeof(bool); } else if (clazz == typeof(byte)) { return typeof(byte); } else if (clazz == typeof(char)) { return typeof(char); } else if (clazz == typeof(short)) { return typeof(short); } else if (clazz == typeof(double)) { return typeof(double); } else if (clazz == typeof(float)) { return typeof(float); } else if (clazz == typeof(long)) { return typeof(long); } else { throw new AssertionException(); } } else { return GetType(GetDescriptor(clazz)); } }
public void Execute() { if (IsSkip()) { GetLog().Info("skipping execute as per configuration"); return; } if (killAfter != -1) { GetLog().Warn("Warning: killAfter is now deprecated. Do you need it? Please comment on MEXEC-6."); } if (arguments == null) { arguments = new string[0]; } if (GetLog().IsDebugEnabled()) { var msg = new StringBuilder("Invoking : "); msg.Append(mainClass); msg.Append(".main("); for (int i = 0; i < arguments.Length; i++) { if (i > 0) { msg.Append(", "); } msg.Append(arguments[i]); } msg.Append(")"); GetLog().Debug(msg.ToString()); } var threadGroup = new IsolatedThreadGroup(mainClass); var bootstrapThread = new Thread(() => { int sepIndex = mainClass.IndexOf('/'); string bootClassName; if (sepIndex >= 0) { bootClassName = mainClass.Substring(sepIndex
protected ToolStrip BuildTools() { ToolStrip tools = new ToolStrip(); tools.AddToolButtonRight(new ToolButton(Console.CONSTANTS.common_label_add(), new EventHandler((sender, e) => OnAdd()))); tools.AddToolButtonRight(new ToolButton(Console.CONSTANTS.common_label_delete(), new EventHandler((sender, e) => OnRemove(selectionModel.GetSelectedObject().Name)))); return tools; }
public static int VersionCompareNumerically(string str1, string str2) { string[] vals1 = str1.Split('.'); string[] vals2 = str2.Split('.'); int i = 0; // Set index to first non-equal ordinal or length of shortest version string while (i < vals1.Length && i < vals2.Length && vals1[i] == vals2[i]) { i++; } try { // Compare first non-equal ordinal number if (i < vals1.Length && i < vals2.Length) { int diff = int.Parse(vals1[i]).CompareTo(int.Parse(vals2[i])); return Math.Sign(diff); } // The strings are equal or one string is a substring of the other // e.g. "1.2.3" = "1.2.3" or "1.2.3" < "1.2.3.4" else { return Math.Sign(vals1.Length - vals2.Length); } } catch (FormatException) { // Possibly there are different versions of the app in the store, so we can't check.
protected void InitCache(ClassTraversal traversal) { if (m_CacheNames == null) m_CacheNames = new Dictionary<string, object>(); if (m_CacheClasses == null) m_CacheClasses = new Dictionary<string, Type>(); if (m_BlackListed == null) m_BlackListed = new HashSet<object>(); if (m_Cache == null) m_Cache = NewClassCache(traversal); }
private static List<SerialRow> AssembleRowsListFromRowsMapping(List<SerialRow> all, List<SerialRow> current) { List<SerialRow> list; if (all == null) { list = new List<SerialRow>(); list.AddRange(current); } else { list = all; foreach (SerialRow row in current) { if (!all.Contains(row)) { list.Add(row); } } } return list; }
public CommandExecutor Build() { return new DefaultCommandExecutor( logger ?? defaultLogger, cache ?? new ExecutorCache(), extensions ?? new List<ModeExtension>() ); }
protected List<Team> UpdateTeamInformation(FeatureCollector collector) { long projectDataStart = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); List<Team> teams = featureSettings.IsJiraBoardAsTeam() ? jiraClient.GetBoards() : jiraClient.GetTeams(); // Add or update teams that we got from API teams.ForEach(newTeam => { string teamId = newTeam.TeamId; newTeam.CollectorId = collector.Id; LOGGER.Info($"Adding {collector.Mode}:{teamId}-{newTeam.Name}"); Team existing = teamRepository.FindByTeamId(teamId); if (existing == null) { teamRepository.Save(newTeam); } else { newTeam.Id = existing.Id; teamRepository.Save(newTeam); } }); Log($"{collector.Mode} Data Collected. Added ", projectDataStart, teams.Count); projectDataStart = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); // Delete the ones that are gone from JIRA List<Team> existingTeams = teamRepository.FindByCollectorId(collector.Id); HashSet<string> newTeamIds = new HashSet<string>(teams.Select(t
private static double ContClassicLB(double numSamplesF, double theta, double numSDev) { double nHat = (numSamplesF - 0.5) / theta; double b = numSDev * Math.Sqrt((1.0 - theta) / theta); double d = 0.5 * b * Math.Sqrt((b * b) + (4.0 * nHat)); double center = nHat + (0.5 * (b * b)); return (center - d); }
public override void Register(BindingRegisterContext<JsonArray> ctx) { ctx.Statement().RegisterOutParameter(ctx.Index(), DbType.String); }
protected DateTime GetFailureInRangeCutOffDate() { var cutoff = DateTime.UtcNow.AddSeconds(-configurationContext.GetFailureRangeInSeconds()); return cutoff; }
public void mFROM() { try { int _type = FROM; int _channel = DEFAULT_TOKEN_CHANNEL; // Match the 'from' keyword if (input.LA(1) == 'f' && input.LA(2) == 'r' && input.LA(3) == 'o' && input.LA(4) == 'm') { input.Consume(); // consume 'f' input.Consume(); // consume 'r' input.Consume(); // consume 'o' input.Consume(); // consume 'm' // If the state is failed, return if (state.failed) return; } state.type = _type; state.channel = _channel; } finally { // Execute cleanup if necessary } }
public override object SetChild(string key, Controller<M, V> controller) { if (controller.Parent != null) { // controller.Parent.Restore(); } return children[key] = controller; }
private bool DoesIndexExistInSeries(SqlConnection con, string indexName, string collectionName, string idCol, string propCol, string appCol) { if (TraceComponent.IsAnyTracingEnabled() && LoggingUtil.SESSION_LOGGER_WAS.IsLoggable(LogLevel.Debug)) { LoggingUtil.SESSION_LOGGER_WAS.Entering(methodClassName, methodNames[DOES_INDEX_EXISTS_ISERIES]); } bool indexExists_iSeries = false; string sysIndexes = "QSYS2.sysindexes"; string sysKeys = "QSYS2.syskeys"; string noQualifiertblName = "SESSIONS"; string sqlQueryIndex = null; string sqlQueryCol = null; string returnIndexName = null; int counter = 0; sqlQueryIndex = $"select index_name from {sysIndexes} where Index_Name = '{indexName.ToUpper()}' and Table_Name = '{noQualifiertblName}' and IS_UNIQUE = 'U'"; sqlQueryCol = $"select COLUMN_NAME from {sysKeys} where INDEX_NAME = '{indexName.ToUpper()}'"; if (collectionName != null) { sqlQueryIn
private int GetWidthOfWidestItem() { int maxWidth = 0; foreach (var item in m_menuItems) { item.GetElement().GetStyle().ClearWidth(); int itemWidth = MeasureWidth(item); if (itemWidth > maxWidth) { maxWidth = itemWidth; } } return maxWidth; }
static bool RegionMatches(CharSequence target, bool ignoreCase, int toffset, CharSequence other, int ooffset, int length) { bool result; if (target is string && other is string) { result = DelegateCheck((string)target, ignoreCase, toffset, ooffset, length, (string)other); } else { result = CarryOutCheck(target, ignoreCase, toffset, other, ooffset, length); } return result; }
public double ValueAt(double[] x, double xscale, int[] batch) { double prob = 0; // the log prob of the sequence given the model, which is the negation of value at this point double[] weights = x; int[][] wis = GetWeightIndices(); int[] given = new int[window - 1]; int[][] docCliqueLabels = new int[window][]; for (int j = 0; j < window; j++) { docCliqueLabels[j] = new int[j + 1]; } // iterate over all the documents for (int m = 0; m < batch.Length; m++) { int ind = batch[m]; int[][][] docData = data[ind]; int[] docLabels = labels[ind]; // make a clique tree for this document CRFCliqueTree cliqueTree = CRFCliqueTree.GetCalibratedCliqueTree(weights, xscale, wis, docData, labelIndices, numClasses, classIndex, backgroundSymbol); // compute the log probability of the document given the model with the parameters x Array.Fill(given, classIndex.In
public void Receive(byte[] byteArray) { // Register the current application for this thread // in case a subsystem logs to the environment if (interpreter.IsInSubProcessMode()) { if (!AbortSubprocessModeIfNecessary(byteArray)) { /* case CTRLC: interpreter.AbortSubprocessMode(); break; */ if (echoEnabled) { EchoBytesToClient(byteArray); } // Every byte is forwarded because the subprocess will interpret the input interpreter.ProcessRawInput(byteArray); } } else { ProcessInput(byteArray); } }
public static long SubtractSeconds(DateTime date1, DateTime date2) { return SubtractTime(date1, date2, DatePeriod.Second); }
public static string Implode(string[] arr, string delim) { StringBuilder buf = new StringBuilder(); for (int i = 0; i < arr.Length; i++) { if (i > 0) { buf.Append(delim); } buf.Append(arr[i]); } return buf.ToString(); }
public void Output(Logger log) { var entries = config.GetSortedEntries(); if (!entries.Any()) { return; } var printer = Build(entries); log.Debug("Configuration Details"); foreach (var line in printer.Generate()) { log.Debug(line); } }
public ObjectBankWrapper<IN> MakeObjectBankFromReader(StreamReader in, DocumentReaderAndWriter<IN> readerAndWriter) { if (flags.AnnounceObjectBankEntries) { Console.Error.WriteLine("Reading data using " + readerAndWriter.GetType()); } // TODO get rid of objectbankwrapper // return new ObjectBank<List<IN>>(new ResettableReaderIteratorFactory(in), readerAndWriter); return new ObjectBankWrapper<IN>(flags, new ObjectBank<List<IN>>(new ResettableReaderIteratorFactory(in), readerAndWriter), knownLCWords); }
public static Pojo CreateRun(PojoCallback callback) { return new NutPojo().SetSqlType(SqlType.RUN).SetAfter(callback); }
public HThriftClient Open() { if (IsOpen()) { throw new InvalidOperationException("Open called on already open connection. You should not have gotten here."); } if (log.IsDebugEnabled) { log.Debug($"Creating a new thrift connection to {cassandraHost}"); } TSocket socket; try { socket = (params == null) ? new TSocket(cassandraHost.Host, cassandraHost.Port, timeout) : TSSLTransportFactory.GetClientSocket(cassandraHost.Host, cassandraHost.Port, timeout, params); } catch (TTransportException e) { throw new HectorTransportException("Could not get client socket: ", e); } if (cassandraHost.UseSocketKeepalive) { try { socket.GetSocket().SetKeepAlive(true); } catch (SocketException se) { throw new HectorTransportException("Could not set SO_KEEPALIVE on socket: ", se); } } transport = MaybeWrapWithTFramedTransport(socket); // If using SSL, the socket will already be connected, and TFramedTransport and
public static TextCorpusStored Compose(string lang, params TextCorpusLayerStoredAbstract[] layers) { TextCorpusStored tc = new TextCorpusStored(lang); foreach (TextCorpusLayerStoredAbstract layer in layers) { tc.LayersInOrder[TextCorpusLayerTag.GetFromClass(layer.GetType()).Ordinal()] = layer; } tc.ConnectLayers(); return tc; }
public bool Correct(GrowQueue_I8 input, GrowQueue_I8 ecc) { ComputeSyndromes(input, ecc, syndromes); FindErrorLocatorPolynomialBM(syndromes, errorLocatorPoly); if (!FindErrorLocationsBruteForce(errorLocatorPoly, input.Size + ecc.Size, errorLocations)) return false; CorrectErrors(input, input.Size + ecc.Size, syndromes, errorLocatorPoly, errorLocations); return true; }
public double ValueAt(int col, int row) { if (IsInRaster(col, row)) { double value = iter.GetSampleDouble(col, row, 0); return value; } return HMConstants.DoubleNoValue; }
public void SetStart(double START) { if (start == null) { _start = START; FireSectionEvent(UPDATE_EVENT); } else { start.Set(START); } }
public Either<string, List<string>> DataSources(Dictionary<string, string> reqHeaders) { var resp = FireCommand("druid/coordinator/v1/metadata/datasources", null, reqHeaders); if (resp.IsLeft) { return new Left<string, List<string>>(resp.Left); } var goodResp = resp.Right; if (goodResp.IsLeft) { var dataSources = goodResp.Left; var dataSourceList = new List<string>(); for (int i = 0; i < dataSources.Count; i++) { dataSourceList.Add(dataSources[i].ToString()); } return new Right<string, List<string>>(dataSourceList); } return new Left<string, List<string>>(resp.Left); }
public static ElementMatcher.Junction<T> IsGetter<T>() where T : MethodDescription { return TakesArguments(0).And(Not(Returns(TypeDescription.VOID))) .And(NameStartsWith("get").Or(NameStartsWith("is").And(ReturnsGeneric(AnyOf(typeof(bool), typeof(bool)))))); }
public void SetCheckedStateBackgroundColor(int backgroundColor) { if (backgroundColor != mCheckedBackgroundColor && mCheckedBackgroundPaint != null) { mCheckedBackgroundPaint.Color = backgroundColor; if (IsChecked()) { Invalidate(); } } mCheckedBackgroundColor = backgroundColor; }
public static void Debug(JShell state, StreamWriter err, Exception ex, string where) { if (IsDebugEnabled(state, 0xFFFFFFFF)) { err.WriteLine($"Fatal error: {where}: {ex.Message}"); err.WriteLine(ex.StackTrace); } }
private void InitializeIfNeeded() { if (IsClosed()) { throw new InvalidOperationException("Knowledge source already closed!"); } if (this.inDataSourceGetter == null) { this.inDataSourceGetter = new SubtreePropositionDefinitionGetterRegular(this, true); } if (this.collectSubtreeGetter == null) { this.collectSubtreeGetter = new SubtreePropositionDefinitionGetterRegular(this, false); } }
private ListenerToken AddDocumentChangeListener(Executor executor, DocumentChangeListener listener, string docID) { // NOTE: caller method is synchronized. DocumentChangeNotifier docNotifier; if (!docChangeNotifiers.TryGetValue(docID, out docNotifier)) { docNotifier = new DocumentChangeNotifier((Database)this, docID); docChangeNotifiers[docID] = docNotifier; } ChangeListenerToken token = docNotifier.AddChangeListener(executor, listener); token.SetKey(docID); return token; }
public void SetValues(Variable v, List<string> values) { Array data = Array.MakeArray(v.GetDataType(), values); if (data.GetSize() != v.GetSize()) { throw new ArgumentException($"Incorrect number of values specified for the Variable {v.GetFullName()} needed= {v.GetSize()} given= {data.GetSize()}"); } if (v.GetRank() != 1) // don't have to reshape for rank 1 { data = data.Reshape(v.GetShape()); } v.SetCachedData(data, true); }
public static Cookies NewServerRequestHolder(HttpHeaders headers, ServerCookieDecoder decoder) { return new Cookies(headers, HttpHeaderNames.COOKIE, false, decoder); }
public static long CurrentTimeMicros() { if (Environment.Version.Major == 8) { return (long)(DateTimeOffset.UtcNow.ToUnixTimeMilliseconds() * 1000); } else { // .NET Core 2.0 and later support higher precision wall time. var now = DateTime.UtcNow; return (long)(now.Second * 1000000 + now.Millisecond * 1000); } }
private void EvaluateExpressions() { /* * Note: we don't check for type mismatches here; we assume * the expression evaluator will return the expected type * (by virtue of knowledge we give it about what that type is). * An InvalidCastException here is truly unexpected, so we let it * propagate up. */ xml = ExpressionUtil.EvalNotNull("transform", "xml", xml_, typeof(object), this, pageContext); xmlSystemId = (string)ExpressionUtil.EvalNotNull("transform", "xmlSystemId", xmlSystemId_, typeof(string), this, pageContext); xslt = ExpressionUtil.EvalNotNull("transform", "xslt", xslt_, typeof(object), this, pageContext); xsltSystemId = (string)ExpressionUtil.EvalNotNull("transform", "xsltSystemId", xsltSystemId_, typeof(string), this, pageContext); result = (Result)ExpressionUtil.EvalNotNull("transform", "result", result_, typeof(Result), this, pageContext); }
public Agreement GetAgreement(string agreementId) { return GetJerseyClient().Target(GetEndpoint() + "/agreements/" + agreementId) .Request() .Header("Accept", MediaType.APPLICATION_JSON) .Header("Content-Type", MediaType.APPLICATION_JSON) .Get<Agreement>(); }
public void SetOwner(string path, string username, string groupname) { Console.WriteLine($"SetOwner({path},{username},{groupname})"); var uri = new AlluxioURI(HadoopUtils.GetPathWithoutScheme(path)); var optionsBuilder = new SetAttributePOptions.Builder(); bool ownerOrGroupChanged = false; if (!string.IsNullOrEmpty(username)) { optionsBuilder.SetOwner(username).SetRecursive(false); ownerOrGroupChanged = true; } if (!string.IsNullOrEmpty(groupname)) { optionsBuilder.SetGroup(groupname).SetRecursive(false); ownerOrGroupChanged = true; } if (ownerOrGroupChanged) { try { mFileSystem.SetAttribute(uri, optionsBuilder.Build()); } catch (AlluxioException e) { throw new IOException(e.Message, e); } } }
public static Module ConfigModule<C>(Type configInterface, Optional<Named> nameOpt) { CheckNotNull(configInterface); CheckNotNull(nameOpt); Optional<string> nameStrOpt = nameOpt.Select(n => n.Value); // Build config descriptors for the given config interface List<ConfigDescriptor> configDescList = ConfigSystem.DescriptorFactory.BuildDescriptors(configInterface, nameStrOpt); return new AbstractModule() { protected override void Configure() { // Create Implementation Builder var typeBuilder = new ByteBuddy().Subclass(configInterface); var multiBinder = Multibinder.NewSetBinder(Binder(), typeof(ConfigDescriptor)); // Define a field to keep a local reference to the list of propertyAccessorProviders on the dynamic // instance to prevent the providers from being GCed. The providers are supplied to the InvocationHandlerImpl // using a WeakReference to avoid a memory leak. string propertyAccessorProvidersFieldName = "propertyAccessorProviders$" + new Random().NextInt64(long.MaxValue); typeBuilder = typeBuilder.DefineField(propertyAccessorProvidersFieldName, typeof(ICollection), Visibility.Private); var propertyAccessorProvidersBuilder = ImmutableList.CreateBuilder<Provi
public override Expression<long> Count(Expression<object> arg0) { // TODO Auto-generated method stub string arg1 = $"Count(\"{arg0.Alias}\")"; return new AggregateExpression(arg0, arg1); }
public void AddChildProperties(NodeData parentData, List<PropertyData> childItems) { if (enabled && parentData != null && childItems != null) { string logInfo = null; if (LOG.IsDebugEnabled()) { logInfo = $"parent: {parentData.QPath.GetAsString()} {parentData.Identifier} {childItems.Count}"; LOG.Debug($"{name}, AddChildProperties() >>> {logInfo}"); } string operName = ""; // for debug/trace only writeLock.Lock(); try { // remove parent (no childs) operName = "removing parent"; RemoveItem(parentData); operName = "caching parent"; PutItem(parentData); // put parent in cache lock (childItems) { operName = "caching child properties list"; propertiesCache[parentData.Identifier] = childItems; // put childs in cache CP operName = "caching child properties"; // put childs in cache C foreach (ItemData p in childItems) { if (LOG.IsDebugEnabled()) { LOG.Debug($"{name}, AddChildProperties() {
public static Query In(string field, IEnumerable<object> values) { return new Query().In(field, values); }
public async Task<Observable<ServiceResponse<GenericResourceInner>>> GetWithServiceResponseAsync(string resourceGroupName, string resourceProviderNamespace, string parentResourcePath, string resourceType, string resourceName, string apiVersion) { if (resourceGroupName == null) throw new ArgumentException("Parameter resourceGroupName is required and cannot be null."); if (resourceProviderNamespace == null) throw new ArgumentException("Parameter resourceProviderNamespace is required and cannot be null."); if (parentResourcePath == null) throw new ArgumentException("Parameter parentResourcePath is required and cannot be null."); if (resourceType == null) throw new ArgumentException("Parameter resourceType is required and cannot be null."); if (resourceName == null) throw new ArgumentException("Parameter resourceName is required and cannot be null."); if (this.client.SubscriptionId() == null) throw new ArgumentException("Parameter this.client.subscriptionId() is required and cannot be null."); if (apiVersion == null) throw new ArgumentException("Parameter apiVersion is required and cannot be null."); var response = await service.GetAsync(resourceGroupName, resourceProviderNamespace, parentResourcePath, resourceType, resourceName, this.client.SubscriptionId(), apiVersi
public bool Await(T t, long timeout, TimeUnit unit) { lock (monitor) { // Holds the absolute time when the timeout expires. long expiryTimeNanos = Stopwatch.GetTimestamp() + unit.ToNanos(timeout); // Used to hold the estimated wait time until the condition may pass. long waitNanos = EvaluateWithWaitTimeNanos(t); // Loop forever until all conditions pass, the timeout expires, or the thread is interrupted. while (waitNanos > 0) { // Check how much time remains until the timeout expires. long remainingTimeNanos = expiryTimeNanos - Stopwatch.GetTimestamp(); // Check if the timeout has expired. if (remainingTimeNanos <= 0) { return false; } // If some conditions failed, then wait for the shortest of the wait time or the remaining time until the // timeout expires, or until the thread is woken up by a signal, before re-evaluating conditions. long timeToPauseNanos = (waitNanos < remainingTimeNanos) ? waitNanos : remainingTimeNanos; long milliPause = timeToPauseNano
public override Response ToResponse(WebApplicationException ex) { return Response.Status(ex.Response.Status).Entity(new ErrorMessage(ex.Response.Status, ex.Message)) .Type(MediaType.ApplicationJson).Build(); }
public override int DoStartTag() { var req = PageContext.Request; // This will always be true if the page is called through OpenCms if (!CmsFlexController.IsCmsRequest(req)) { return SKIP_BODY; } if (GetJs() == null) { if (IsDynamic()) { // in case we want to include the needed js functions try { PageContext.Output.Write("<script type='text/javascript' src='" + CmsWorkplace.GetSkinUri() + VFS_PATH_LOAD_JS + "' ></script>"); } catch (Exception ex) { if (LOG.IsErrorEnabled) { LOG.Error(Messages.Get().GetBundle().Key(Messages.ERR_PROCESS_TAG_1, "jquery"), ex); } throw new JspException(ex); } } return SKIP_BODY; } // get the server prefix var cms = CmsFlexController.GetCmsObject(req); // first handle js file string path = VFS_PATH_JQUERY; if (cms.GetRequestContext().GetCurrentProject().IsOnlineProject()) { // online p
protected HttpClient BuildHttpClient() { var handler = new HttpClientHandler(); var client = new HttpClient(handler) { Timeout = TimeSpan.FromMilliseconds(readTimeoutMs + writeTimeoutMs) }; return client; }
public override void Init(PageContext pc) { if (init != null) { try { init.Invoke(monitor, new object[] { pc }); } catch (Exception e) { throw ExceptionUtil.ToIOException(e); } } }
public JobSpecSchedule ScheduleOnce(JobSpec jobSpec, Action jobRunnable) { _log.Info($"Scheduling once JobSpec {jobSpec}"); var runOnceRunnable = new RunOnceRunnable(jobSpec.GetUri(), jobRunnable); return ScheduleJob(jobSpec, runOnceRunnable); }
public ByteBuffer GetBuffer() { /* * Once this is called, no more data can be added to the packet. Setting * 'buf' to null ensures that. This is called only when the packet is ready * to be sent. */ if (buffer != null) { return buffer; } int pktLen = DFSClient.SIZE_OF_INTEGER + (pos - dataStart); // normally dataStart == checksumPos, i.e., offset is zero. buffer = ByteBuffer.Wrap(buf, 0, dfsOutputStream.GetPacketHeaderLen() + pktLen); buf = null; buffer.Mark(); /* * write the header and data length. The format is described in comment * before DataNode.BlockSender */ buffer.PutInt(pktLen); // pktSize buffer.PutInt(dfsOutputStream.GetPacketVersion()); buffer.PutLong(offsetInBlock); buffer.PutLong(seqno); byte booleanFieldValue = 0x00; if (lastPacketInBlock) { booleanFieldValue |= DataNode.IsLastPacketInBlockMask; } if (dfsOutputStream.IfForceSync())
private static string AnnotationToString(Type type, Dictionary<string, object> members) { var sb = new StringBuilder().Append("@").Append(type.FullName).Append("("); var memberStrings = members.ToDictionary( kvp => kvp.Key, kvp => string.Join(", ", ((object[])kvp.Value).Select(arg => arg.ToString())) ); sb.Append(string.Join(", ", memberStrings.Select(kvp => $"{kvp.Key}={kvp.Value}"))); return sb.Append(")").ToString(); }
public static LuceneDefaults FromAnnotation(Defaults defaults) { LuceneDefaults lid = new LuceneDefaults(); bool hasValues = false; if (!string.IsNullOrWhiteSpace(defaults.Field)) { lid.SetField(defaults.Field); hasValues = true; } if (!string.IsNullOrWhiteSpace(defaults.Type)) { lid.SetType(defaults.Type); hasValues = true; } if (!string.IsNullOrWhiteSpace(defaults.Store)) { lid.SetStore(defaults.Store); hasValues = true; } if (!string.IsNullOrWhiteSpace(defaults.Index)) { lid.SetIndex(defaults.Index); hasValues = true; } return hasValues ? lid : null; }
public void Marshall(DeleteUserRequest deleteUserRequest, IProtocolMarshaller protocolMarshaller) { if (deleteUserRequest == null) { throw new SdkClientException("Invalid argument passed to marshall(...)"); } try { protocolMarshaller.Marshall(deleteUserRequest.UserName, USERNAME_BINDING); protocolMarshaller.Marshall(deleteUserRequest.AwsAccountId, AWSACCOUNTID_BINDING); protocolMarshaller.Marshall(deleteUserRequest.Namespace, NAMESPACE_BINDING); } catch (Exception e) { throw new SdkClientException("Unable to marshall request to JSON: " + e.Message, e); } }
private static void WriteNeighborComparison(FileInfo neighborFile, MultiMap<double, string> mostSimilar, SemanticSpace sspace) { using (StreamWriter sw = new StreamWriter(neighborFile.FullName)) { // print out the header so we know the comparison order StringBuilder sb = new StringBuilder(mostSimilar.Count * 10); foreach (var item in mostSimilar.Values) { sb.Append(item); sb.Append(" "); } sw.WriteLine(sb.ToString().Trim()); // create an N x N table of how similar all the words are to each foreach (var word in mostSimilar.Values) { sb = new StringBuilder(mostSimilar.Count * 10); sb.Append(word).Append(" "); // loop through all of the words foreach (var other in mostSimilar.Values) { // determine how similar the two words are double similarity = Similarity.CosineSimilarity( sspace.GetVector(word), sspace.GetVector(other)); sb.Append(similarity).Append(" "); } sw.WriteLine(sb.ToString().Trim()); } } }
private void Create3WindowFeats(int i, string[] toks, string[] tags, string[] preds, List<string> feats) { // Words in a 5-word window string w_1, w0, w1; // Tags in a 5-word window string t_1, t0, t1; // Previous predictions string p_2, p_1; w0 = w1 = null; t_1 = t0 = t1 = null; p_1 = p_2 = null; if (i < 2) { p_2 = "p_2=bos"; } else { p_2 = "p_2=" + preds[i - 2]; } if (i < 1) { w_1 = "w_1=bos"; t_1 = "t_1=bos"; p_1 = "p_1=bos"; } else { w_1 = "w_1=" + toks[i - 1]; t_1 = "t_1=" + tags[i - 1]; p_
public V PutIfAbsentFailure(K key, V value, StoreAccessException e) // FIXME: Should I care about useLoaderInAtomics? { try { try { V loaded = loaderWriter.Load(key); if (loaded != null) { return loaded; } } catch (Exception e1) { throw ExceptionFactory.NewCacheLoadingException(e1, e); } try { loaderWriter.Write(key, value); } catch (Exception e1) { throw ExceptionFactory.NewCacheWritingException(e1, e); } } finally { Cleanup(key, e); } return default(V); }
public static List<double[]> ReadBinary(string featuresFileName, int featureLength) { List<double[]> features = new List<double[]>(); using (var inStream = new BinaryReader(new BufferedStream(new FileStream(featuresFileName, FileMode.Open)))) { int counter = 0; double[] desc = new double[featureLength]; while (true) { try { desc[counter] = inStream.ReadDouble(); } catch (EndOfStreamException) { break; } counter++; if (counter == featureLength) { features.Add(desc); counter = 0; desc = new double[featureLength]; } } } return features; }
public Dictionary<bool, List<T>> PartitioningBy(Predicate<T> predicate) { return Collect(PartitioningBy(predicate)); }
public static ECDsaPublicKeyParameters ReadPublicKey(byte[] publicKeyBytes) { return ReadPublicKey(publicKeyBytes, "RSA"); }
public static double CublasDasum(int n, IntPtr x, int incx) { double result = CublasDasumNative(n, x, incx); CheckResultBLAS(); return result; }
public string GetColumnNameForProperty(string propertyName) { return propertyToField.TryGetValue(propertyName, out var fcInfo) ? fcInfo.DelimitedColumnName : null; }
public void SetMoneyAmountOff(Google.Ads.GoogleAds.V9.Common.MoneyWithCurrency moneyAmountOff) { this.moneyAmountOff = moneyAmountOff; }
public async Task<VirtualNetworkInner> BeginUpdateTagsAsync(string resourceGroupName, string virtualNetworkName, Dictionary<string, string> tags) { var response = await BeginUpdateTagsWithServiceResponseAsync(resourceGroupName, virtualNetworkName, tags); return response.Body; }
using System; using System.IO; using System.Security; public static class LogDirectoryHelper { public static DirectoryInfo GetLogDirectory(object newValue, DirectoryInfo defaultDirectory) { DirectoryInfo newDirectory = defaultDirectory; // If a value was specified, try creating a directory with it if (newValue != null && newValue is string newPath) { newDirectory = new DirectoryInfo(newPath); } if (newDirectory == null) { string value = string.Empty; try { value = AccessController.DoPrivileged(() => Environment.CurrentDirectory); } catch (Exception ex) { // do nothing } newDirectory = new DirectoryInfo(value); } return LoggingFileUtils.ValidateDirectory(newDirectory); } } public static class AccessController { public static T DoPrivileged<T>(Func<T> action) { return action(); } } public static class LoggingFileUtils { public static DirectoryInfo ValidateDirectory(DirectoryInfo directory) { if (!directory.Exists) { directory.Create(); } return directory; } }
private static bool ApplySingletonSubstitution(Function functionalTerm, SingletonSubstitution substitution) { List<Term> innerTerms = functionalTerm.GetTerms(); bool innerChanges = false; for (int i = 0; i < innerTerms.Count; i++) { Term innerTerm = innerTerms[i]; if (innerTerm is Function) { // Recursive call innerChanges = innerChanges || ApplySingletonSubstitution((Function)innerTerm, substitution); } else if (substitution.GetVariable().Equals(innerTerm)) { functionalTerm.GetTerms()[i] = substitution.GetTerm(); innerChanges = true; } } return innerChanges; }
public static bool ContainsOnly(string str, char[] valid) // All these pre-checks are to maintain API with an older version { if (valid == null || str == null) { return false; } if (str.Length == 0) { return true; } if (valid.Length == 0) { return false; } return IndexOfAnyBut(str, valid) == INDEX_NOT_FOUND; }
public static Task<IMessageReceiver> CreateMessageReceiverFromConnectionStringAsync(string amqpConnectionString, ReceiveMode receiveMode) { Utils.AssertNonNull("amqpConnectionString", amqpConnectionString); return CreateMessageReceiverFromConnectionStringBuilderAsync(new ConnectionStringBuilder(amqpConnectionString), receiveMode); }
public static int ElementWiseStride(DataBuffer buffer) { int length2 = ShapeInfoLength(buffer.GetInt(0)); return buffer.GetInt(length2 - 2); }
public static void Report(string testId, Exception cause) { if (cause == null) { LOGGER.Fatal("Can't call report with a null exception"); return; } long exceptionCount = FAILURE_ID.IncrementAndGet(); if (exceptionCount > MAX_EXCEPTION_COUNT) { LOGGER.Warn($"Exception #{exceptionCount} detected. The maximum number of exceptions has been exceeded, so it won't be reported to the Agent.", cause); return; } LOGGER.Warn($"Exception #{exceptionCount} detected", cause); string targetFileName = exceptionCount + ".exception"; string userDir = GetUserDir(); string tmpFilePath = System.IO.Path.Combine(userDir, targetFileName + ".tmp"); try { using (var tmpFile = System.IO.File.Create(tmpFilePath)) { // File created successfully } } catch (IOException e) { LOGGER.Fatal("Could not report exception; this means that this exception is not visible to the coordinator", e); return; } WriteText(testId + Environment.NewLine + ThrowableToString(cause), tmpFilePath); string filePath = System.IO.Path.Comb
public async Task<Page<RouteFilterRuleInner>> ListByRouteFilterNextAsync(string nextPageLink) { var response = await ListByRouteFilterNextWithServiceResponseAsync(nextPageLink); return response.Body; }
public List<T> RemoveProperties<T>() where T : ICalProperty { var removed = properties.RemoveAll(p => p is T); return CastList(removed, typeof(T)); }
public List<User> GetAllUsers(AccessToken accessToken, params string[] attributes) { return GetUserService().GetAllUsers(accessToken, attributes); }
public string GetString(object scope, string propertyPath) { return GetString(scope, propertyPath, null); }
public void Update(ModelConfig modelConfig) { if (modelConfig == null) { throw new ArgumentNullException(nameof(modelConfig)); } this.dirty = true; // The class index should be reset every time a model config is updated. // TODO: Refactor the classIndex to be in ModelConfig. this.modelConfig.Properties.Remove(CLASS_INDEX); this.modelConfig.Update(modelConfig); ParseModelConfig(); }
private void Build() { RangeDescriptor rlRange; if (fRB.fDebugEnv != null && fRB.fDebugEnv.IndexOf("usets") >= 0) { PrintSets(); } // Initialize the process by creating a single range encompassing all characters // that is in no sets. fRangeList = new RangeDescriptor(); fRangeList.fStartChar = 0; fRangeList.fEndChar = 0x10FFFF; // Find the set of non-overlapping ranges of characters foreach (var usetNode in fRB.fUSetNodes) { UnicodeSet inputSet = usetNode.fInputSet; int inputSetRangeCount = inputSet.GetRangeCount(); int inputSetRangeIndex = 0; rlRange = fRangeList; while (true) { if (inputSetRangeIndex >= inputSetRangeCount) { break; } int inputSetRangeBegin = inputSet.GetRangeStart(inputSetRangeIndex); int inputSetRangeEnd = inputSet.GetRangeEnd(inputSetRangeIndex); // Skip over ranges from the range list that are completely below the curr
private ClassNode GetClassNode(Stream inputStream, int flags) { ClassNode cn = new ClassNode(); try { ClassReader reader = new ClassReader(inputStream); reader.Accept(cn, flags); inputStream.Close(); } catch (IOException) { cn = null; } return cn; }
public EObject RuleAndExpression() { EObject current = null; Token otherlv_2 = null; EObject this_NotExpression_0 = null; EObject lv_right_3_0 = null; EnterRule(); try { // (this_NotExpression_0= RuleNotExpression ( () otherlv_2= '&&' ( (lv_right_3_0= RuleNotExpression ) ) )* ) this_NotExpression_0 = RuleNotExpression(); if (this_NotExpression_0 == null) return current; current = this_NotExpression_0; // ( () otherlv_2= '&&' ( (lv_right_3_0= RuleNotExpression ) ) )* while (true) { int LA20_0 = input.LA(1); if (LA20_0 == 32) // '&&' { // () // Implement the left action current = ForceCreateModelElementAndSet( grammarAccess.GetAndExpressionAccess().GetAndExpressionLeftAction_1_0(), current); otherlv_2 = (Token)Match(input, 32, FOLLOW_20); i
protected override Type LoadClass(string name, bool resolve) { lock (LaunchedURLClassLoader.LOCK_PROVIDER.GetLock(this, name)) { Type loadedClass = FindLoadedClass(name); if (loadedClass == null) { Handler.SetUseFastConnectionExceptions(true); try { loadedClass = DoLoadClass(name); } finally { Handler.SetUseFastConnectionExceptions(false); } } if (resolve) { ResolveClass(loadedClass); } return loadedClass; } }
public static ConcatEngine<G, C> Of<G, C>(params EvolutionStreamable<G, C>[] engines) where G : Gene<G> where C : IComparable<C> { return new ConcatEngine<G, C>(engines.ToList()); }
public void OnModuleLoad() { AsyncGetJson(AGGREGATORS_URL, new GotJsonCallback { public void Got(JSONValue json) { // Do we need more manual type checking? Not sure what will happen // in the browser if something other than an array is returned. var aggs = json.IsArray(); for (int i = 0; i < aggs.Size(); i++) { aggregators.Add(aggs.Get(i).IsString().StringValue()); } ((MetricForm)metrics.GetWidget(0)).SetAggregators(aggregators); RefreshFromQueryString(); RefreshGraph(); } }); // All UI elements need to regenerate the graph when changed. ValueChangeHandler<DateTime> vch = new ValueChangeHandler<DateTime>(event => { RefreshGraph(); }); TextBox tb = start_datebox.TextBox; tb.AddBlurHandler(RefreshGraph); tb.AddKeyPressHandler(RefreshGraph); start_datebox.AddValueChangeHandler(vch); tb = end_datebox.TextBox; tb.AddBlurHandler(RefreshGraph); tb.AddKeyPressHandler(RefreshGraph
public static Dictionary<string, double> NormalDistributionGetParams(FlatDataCollection flatDataCollection) { var parameters = new Dictionary<string, double>(); parameters["mean"] = Descriptives.Mean(flatDataCollection); parameters["variance"] = Descriptives.Variance(flatDataCollection, true); return parameters; }
public EjbRelationshipRoleType<EjbRelationType<T>> GetOrCreateEjbRelationshipRole() { List<Node> nodeList = childNode.Get("ejb-relationship-role"); if (nodeList != null && nodeList.Count > 0) { return new EjbRelationshipRoleTypeImpl<EjbRelationType<T>>(this, "ejb-relationship-role", childNode, nodeList[0]); } return CreateEjbRelationshipRole(); }
public override Cursor Query(Uri uri, string[] projection, string selection, string[] selectionArgs, string sortOrder) { if (ACRA.DEV_LOGGING) ACRA.log.D(ACRA.LOG_TAG, "Query: " + uri); var file = GetFileForUri(uri); if (file == null) { return null; } if (projection == null) { projection = COLUMNS; } var columnValueMap = new Dictionary<string, object>(); foreach (var column in projection) { if (column.Equals(OpenableColumns.DISPLAY_NAME)) { columnValueMap[OpenableColumns.DISPLAY_NAME] = file.Name; } else if (column.Equals(OpenableColumns.SIZE)) { columnValueMap[OpenableColumns.SIZE] = file.Length; } } var cursor = new MatrixCursor(columnValueMap.Keys.ToArray(), 1); cursor.AddRow(columnValueMap.Values.ToArray()); return cursor; }
private ZealotKhala DoNormal(string prefix, string field, object value, string suffix, bool match) { if (match) { SqlInfoBuilder.NewInstance(this.source.SetPrefix(prefix)).BuildNormalSql(field, value, suffix); this.source.ResetPrefix(); } return this; }
public DocumentPath Parent() { if (pathElements.Count <= 1) { return null; } return new DocumentPath(pathElements.GetRange(0, pathElements.Count - 1)); }
public DateTime ParseRFC1123Time(string input) { if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) { Tr.Debug(tc, $"rfc1123 parsing [\"{input}\"]"); } DateTime? d = AttemptParse(GetFormat().Get1123Parse(), input); if (d == null) { throw new FormatException($"Unparseable [\"{input}\\"]"); } return d.Value; }
public string ReadStaticExportPublishedResourceParameters(CmsRequestContext context, string rfsName) { CmsDbContext dbc = m_dbContextFactory.GetDbContext(context); string result = null; try { result = m_driverManager.ReadStaticExportPublishedResourceParameters(dbc, rfsName); } catch (Exception e) { dbc.Report( null, Messages.Get().Container(Messages.ERR_READ_STATEXP_PUBLISHED_RESOURCE_PARAMS_1, rfsName), e); } finally { dbc.Clear(); } return result; }
public Parser<object> Phrase(params string[] tokenNames) { Parser<object>[] wordParsers = new Parser<object>[tokenNames.Length]; for (int i = 0; i < tokenNames.Length; i++) { wordParsers[i] = Token(tokenNames[i]); } string phrase = string.Join(" ", tokenNames); return Parsers.Sequence(wordParsers).Atomic().Retn(phrase).Label(phrase); }
public EObject RuleConditionalBranch() { EObject current = null; Token otherlv_2 = null; Token otherlv_4 = null; EObject this_UnorderedGroup_0 = null; EObject lv_guardCondition_3_0 = null; EObject lv_elements_5_0 = null; EnterRule(); try { // Attempt to match various pattern options int alt28 = 2; int LA28_0 = Input.LA(1); if (((LA28_0 >= RULE_STRING && LA28_0 <= RULE_ID) || LA28_0 == 15 || LA28_0 == 34 || (LA28_0 >= 39 && LA28_0 <= 40) || (LA28_0 >= 42 && LA28_0 <= 43))) { alt28 = 1; } else if (LA28_0 == 27) { alt28 = 2; } else { throw new NoViableAltException("Invalid input"); } switch (alt28) { case 1: // Process the UnorderedGroup rule newCompos
public static DateTime AdjustToFirstDayOfWeek(DateTime date, DayOfWeek firstDayOfWeek) { DateTime newDate = date.AddDays((firstDayOfWeek - date.DayOfWeek + 7) % 7); if (newDate > date) { newDate = newDate.AddDays(-7); } return newDate; }
public TableDescription CreateTable(ProvisionedThroughput throughput) { var request = mapper.GenerateCreateTableRequest(model.TargetType()); request.ProvisionedThroughput = throughput; if (request.GlobalSecondaryIndexes != null) { foreach (var gsi in request.GlobalSecondaryIndexes) { gsi.ProvisionedThroughput = throughput; } } return db.CreateTable(request).TableDescription; }
private void AddColumn(string label, int width, Column<CmsHistoryResourceBean> col) { AddColumn(col, label); SetColumnWidth(col, width, Unit.PX); }
public bool Accept(ItemData item) { QPathEntry itemEntry = item.GetQPath().GetEntries()[item.GetQPath().GetDepth()]; return entry.Equals(itemEntry); }
public void ReadImage() { if (ifd.ContainsTagId(TiffTags.GetTagId("StripOffsets")) || ifd.ContainsTagId(TiffTags.GetTagId("StripBYTECount"))) { ReadStrips(); } if (ifd.ContainsTagId(TiffTags.GetTagId("TileOffsets")) || ifd.ContainsTagId(TiffTags.GetTagId("TileBYTECounts"))) { ReadTiles(); } }
public Task<CASResponse> AsyncCAS(string key, long casId, object value) { return AsyncCAS(key, casId, value, transcoder); }
protected override string ApplyLink(string text, string linkId) { string link; if (this.options.ContainsKey(DocConstants.OPTION_HTML_EXPLODED)) { link = "components/" + linkId + ".html".Replace(" ", "%20"); } else { link = "#" + CreateId(linkId); } return System.Text.RegularExpressions.Regex.Replace(text, System.Text.RegularExpressions.Regex.Escape(text), $"<a href=\"{link}\">{text}</a>"); }
private static MethodInfo SearchCandidates(List<MethodInfo> candidateMethods, MethodInfo bridgeMethod) { if (candidateMethods.Count == 0) { return null; } var typeParameterMap = GenericTypeResolver.GetTypeVariableMap(bridgeMethod.DeclaringType); MethodInfo previousMethod = null; bool sameSig = true; foreach (var candidateMethod in candidateMethods) { if (IsBridgeMethodFor(bridgeMethod, candidateMethod, typeParameterMap)) { return candidateMethod; } else if (previousMethod != null) { sameSig = sameSig && candidateMethod.GetGenericArguments().Select(arg => arg.Name).SequenceEqual(previousMethod.GetGenericArguments().Select(arg => arg.Name)); } previousMethod = candidateMethod; } return (sameSig ? candidateMethods[0] : null); }
public override VirtualResource Expand(Resource resource) { List<Location> locations; if (resource is VirtualResource virtualResource) { List<ConcreteResource> concrete = virtualResource.ToConcreteResources(); List<ConcreteResource> result = new List<ConcreteResource>(); foreach (ConcreteResource cr in concrete) { List<Location> expanded = Expand(cr.GetLocation()); foreach (Location location in expanded) { result.Add(new ConcreteResource(location, cr.GetPath())); } } return new VirtualResource(result); } else { ConcreteResource cr = (ConcreteResource)resource; locations = Expand(cr.GetLocation()); return new VirtualResource(locations, cr.GetPath()); } }
public void RegisterFlushDelay(Type objClass, long delay) { _delays[objClass] = delay; }
public Signature AppendArg(string name, Type type) { string[] newArgNames = new string[argNames.Length + 1]; Array.Copy(argNames, newArgNames, argNames.Length); newArgNames[argNames.Length] = name; MethodType newMethodType = methodType.AppendParameterTypes(type); return new Signature(newMethodType, newArgNames); }
using System.Xml; using System.Xml.Serialization; public class YourClass { private static readonly XmlQualifiedName _File_QNAME = new XmlQualifiedName("File", "http://www.opengis.net/gml"); public JAXBElement<FileType> CreateFile(FileType value) { return new JAXBElement<FileType>(_File_QNAME, typeof(FileType), null, value); } }
public Task Poll() { Task result = null; if (activeIndex == 0) { result = taskList[0].Poll(); if (result != null) result.RemoveFromQueue0(); } else { result = taskList[1].Poll(); if (result != null) result.RemoveFromQueue1(); } return result; }
public void Play(int position) { CheckState(); List<SoundCloudTrack> tracks = mPlayerPlaylist.GetPlaylist().GetTracks(); if (position >= 0 && position < tracks.Count) { SoundCloudTrack trackToPlay = tracks[position]; mPlayerPlaylist.SetPlayingTrack(position); PlaybackService.Play(GetContext(), mClientKey, trackToPlay); } }
public Google.Api.Ads.AdWords.V201809.Cm.SharedSetType GetType() { return type; }
public static current_hostname Modify(nitro_service client, current_hostname resource) { resource.Validate("modify"); return ((current_hostname[])resource.UpdateResource(client))[0]; }
public void Read(DataInputView in) { bool isNotNull = in.ReadBoolean(); if (isNotNull) { string scheme = StringUtils.ReadNullableString(in); string userInfo = StringUtils.ReadNullableString(in); string host = StringUtils.ReadNullableString(in); int port = in.ReadInt(); string path = StringUtils.ReadNullableString(in); string query = StringUtils.ReadNullableString(in); string fragment = StringUtils.ReadNullableString(in); try { uri = new UriBuilder(scheme, userInfo, port, host, path, query, fragment).Uri; } catch (UriFormatException e) { throw new IOException("Error reconstructing URI", e); } } }
[HttpPost] [Route("action=removeByFName")] public IActionResult RemoveByFName( HttpRequest request, HttpResponse response, [FromQuery(Name = "fname")] string fname) { IUserInstance ui = userInstanceManager.GetUserInstance(request); UserPreferencesManager upm = (UserPreferencesManager)ui.GetPreferencesManager(); IUserLayoutManager ulm = upm.GetUserLayoutManager(); try { string elementId = ulm.GetUserLayout().FindNodeId(new PortletSubscribeIdResolver(fname)); if (elementId != null) { // Delete the requested element node. This code is the same for all node types, so we can just have a generic action. if (!ulm.DeleteNode(elementId)) { logger.LogInformation("Failed to remove element ID {ElementId} from layout root folder ID {RootFolderId}, delete node returned false", elementId, ulm.GetRootFolderId()); response.StatusCode = StatusCodes.Status403Forbidden; return new JsonResult(new { error = GetMessage("error.element.update", "Unable to update element", CultureInfo.CurrentCulture) }); } } else {
public void CaseILexLocation(ILexLocation node) { AstLocation location = new AstLocation(current, node); if (reference.Contains(node.GetStartOffset(), node.GetEndOffset(), node.GetFile())) // we need to do set some { // upper limit on the // precision here. e.g. an // operation may match but // it has a body that may // contain a better match throw new LocationFound(location); } else if(reference.CanMatch(node.GetFile())) { closest = GetClosest(reference, location); } }
public static ServerWebExchangeMatcher PathMatchers(HttpMethod method, params string[] patterns) { var matchers = new List<ServerWebExchangeMatcher>(patterns.Length); foreach (var pattern in patterns) { matchers.Add(new PathPatternParserServerWebExchangeMatcher(pattern, method)); } return new OrServerWebExchangeMatcher(matchers); }
public Matrix4x3d Rotation(double angle, Vector3dc axis) { return Rotation(angle, axis.X, axis.Y, axis.Z); }
public KeyAreaInfo SetKeyArea(string strKeyName) { KeyAreaInfo keyArea = null; if (strKeyName == null) strKeyName = Constants.PRIMARY_KEY; for (m_iDefaultOrder = Constants.MAIN_KEY_AREA; m_iDefaultOrder < this.GetKeyAreaCount() - Constants.MAIN_KEY_AREA; m_iDefaultOrder++) { keyArea = this.GetKeyArea(m_iDefaultOrder); if (keyArea.GetKeyName() == strKeyName) return keyArea; // Found key area } if (Constants.PRIMARY_KEY == strKeyName) { m_iDefaultOrder = Constants.MAIN_KEY_AREA; // Set to default. return this.GetKeyArea(m_iDefaultOrder); } m_iDefaultOrder = Constants.MAIN_KEY_AREA; // Not found!!! Set to default. return null; }
public void Marshall(GetDeploymentStatusRequest getDeploymentStatusRequest, IProtocolMarshaller protocolMarshaller) { if (getDeploymentStatusRequest == null) { throw new SdkClientException("Invalid argument passed to marshall(...)"); } try { protocolMarshaller.Marshall(getDeploymentStatusRequest.DeploymentId, DEPLOYMENTID_BINDING); protocolMarshaller.Marshall(getDeploymentStatusRequest.GroupId, GROUPID_BINDING); } catch (Exception e) { throw new SdkClientException("Unable to marshall request to JSON: " + e.Message, e); } }
public string PipelineWrite(string key, DataGenerator dataGenerator, int maxPipeKeys, int minPipeKeys) { // Create a random key between [0, MAX_PIPE_KEYS] Random randomGenerator = new Random(); int pipeKeys = randomGenerator.Next(maxPipeKeys); // Make sure that the number of keys in the pipeline are at least MIN_PIPE_KEYS pipeKeys = Math.Max(minPipeKeys, pipeKeys); var pipeline = jedisClient.Get().Pipelined(); var responses = new Dictionary<string, Response<string>>(); // Create a StringBuilder to append all the keys in the form "key_n" var sb = new StringBuilder(); // Iterate across the number of keys in the pipeline and set for (int n = 0; n < pipeKeys; ++n) { string nthKey = key + "_" + n; sb.Append(nthKey); Response<string> response = pipeline.Set(key, key + dataGenerator.GetRandomValue() + key); responses[nthKey] = response; } pipeline.Sync(); return sb.ToString(); }
private string GetUserAccessId(string userName) { try { SecurityService securityService = securityServiceRef.GetService(); UserRegistryService userRegistryService = securityService.GetUserRegistryService(); UserRegistry userRegistry = userRegistryService.GetUserRegistry(); string realm = userRegistry.GetRealm(); string uniqueId = userRegistry.GetUniqueUserId(userName); return AccessIdUtil.CreateAccessId(AccessIdUtil.TYPE_USER, realm, uniqueId); } catch (EntryNotFoundException e) { if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) { Tr.Debug(tc, $"Caught exception getting the access id for {userName}: {e}"); } } catch (RegistryException e) { if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) { Tr.Debug(tc, $"Caught exception getting the access id for {userName}: {e}"); } } return null; }
public void Print(string s) { if (_startLine) PrintIndent(); if (s == null) { _lastCr = false; _os.Print("null"); return; } int len = s.Length; for (int i = 0; i < len; i++) { char ch = s[i]; if (ch == '\n' && !_lastCr) _destLine++; else if (ch == '\r') _destLine++; _lastCr = ch == '\r'; _os.Print(ch); } }
public static Dictionary<Key<T>, Type> AssociateInterfaceToImplementations<T>(Type anInterface, ICollection<Type> implementations, bool overridingMode) { var filteredImplementations = implementations.Where(implementation => overridingMode ? IsOverridingImplementation(implementation) : !IsOverridingImplementation(implementation)).ToList(); return BindingUtils.ResolveBindingDefinitions(anInterface, filteredImplementations); }
public static WeldContainer Current() { List<string> ids = WeldContainer.GetRunningContainerIds(); if (ids.Count == 1) { return WeldContainer.Instance(ids[0]); } else { // if there is either no container or multiple containers we want to throw exception // in this case Weld cannot determine which container is "current" throw WeldSELogger.Log.ZeroOrMoreThanOneContainerRunning(); } }
public Expression NotEqualTo(Expression expression) { if (expression == null) { throw new ArgumentNullException("expression cannot be null."); } return new BinaryExpression(this, expression, BinaryExpression.OpType.NotEqualTo); }
public void CleanTemp() { CommandLine dumpCommand = AdbCommand("shell", "rm", "-r", "/data/local/tmp/local/tmp/dump.xml"); ExecuteCommandQuietly(dumpCommand); try { // give it a second to recover from the activity start Thread.Sleep(1000); } catch (ThreadInterruptedException ie) { throw new InvalidOperationException(ie.Message, ie); } CommandLine qianCommand = AdbCommand("shell", "rm", "-r", "/data/local/tmp/local/tmp/qian.xml"); string output = ExecuteCommandQuietly(qianCommand); Log.Debug($"Delete file qian.xml: {output}"); try { // give it a second to recover from the activity start Thread.Sleep(1000); } catch (ThreadInterruptedException ie) { throw new InvalidOperationException(ie.Message, ie); } CommandLine command = AdbCommand("shell", "rm", "-r", "/data/local/tmp/uidump.xml"); ExecuteCommandQuietly(command); try { // give it a second to recover from the activity start Thr
using Microsoft.Extensions.DependencyInjection; using System.Collections.Generic; public class GrpcServiceDefinition { } public class GrpcServiceDiscoverer { public IEnumerable<GrpcServiceDefinition> FindGrpcServices() { // Implementation to find gRPC services } } public class GrpcServerConfigurer { } public class GrpcServerProperties { } public class ShadedNettyGrpcServerFactory { public ShadedNettyGrpcServerFactory(GrpcServerProperties properties, List<GrpcServerConfigurer> serverConfigurers) { // Constructor implementation } public void AddService(GrpcServiceDefinition service) { // Implementation to add a service } } public class MyServiceCollectionExtensions { public static ShadedNettyGrpcServerFactory GetShadedNettyGrpcServerFactory( this IServiceCollection services, GrpcServerProperties properties, GrpcServiceDiscoverer serviceDiscoverer, List<GrpcServerConfigurer> serverConfigurers) { var factory = new ShadedNettyGrpcServerFactory(properties, serverConfigurers); foreach (var service in serviceDiscoverer.FindGrpcServices()) { factory.AddService(service); } return factory; } }
public byte[] DecodeChecked(string chars) { chars = TrimTrailingPadding(chars); byte[] tmp = new byte[MaxDecodedSize(chars.Length)]; int len = DecodeTo(tmp, chars); return Extract(tmp, len); }
public string UserActionItem(string action, string uid, string iid, Dictionary<string, object> properties, DateTime eventTime) { return CreateEvent(UserActionItemAsFuture(action, uid, iid, properties, eventTime)); }
public void Slcount(string keyspace, string uid) { Slcount(Encoding.UTF8.GetBytes(keyspace), Encoding.UTF8.GetBytes(uid)); }
public override bool IsSet(int featureID) { switch (featureID) { case AfplibPackage.FNNRG2__TSID_LEN: return TSID_LEN_DEFAULT == null ? tsidLen != null : !TSID_LEN_DEFAULT.Equals(tsidLen); case AfplibPackage.FNNRG2__TSID: return TSID_DEFAULT == null ? tsid != null : !TSID_DEFAULT.Equals(tsid); } return base.IsSet(featureID); }
protected int GetColor(Context ctx) { int color; if (IsEnabled()) { color = ColorHolder.Color(GetTextColor(), ctx, Resource.Attribute.material_drawer_primary_text, Resource.Color.material_drawer_primary_text); } else { color = ColorHolder.Color(GetDisabledTextColor(), ctx, Resource.Attribute.material_drawer_hint_text, Resource.Color.material_drawer_hint_text); } return color; }
protected Byte[] InputStreamToByteBuffer() { return byteBuffer ?? (byteBuffer = InputStreamToByteArray()); }
protected void SendClientResponse(PendingOpsRequest request) { byte statusCode = ClientResponse.SUCCESS; string statusString = null; // It is possible not to receive a table response if a feature is not enabled // All of the null/empty table handling/detecting/generation sucks. Just making it // work for now, not making it pretty. --izzy VoltTable[] responseTables = request.aggregateTables; if (responseTables == null || responseTables.Length == 0) { responseTables = new VoltTable[0]; statusCode = ClientResponse.GRACEFUL_FAILURE; statusString = $"Requested info \"{request.subselector}\" is not yet available or not supported in the current configuration."; } ClientResponseImpl response = new ClientResponseImpl(statusCode, ClientResponse.UNINITIALIZED_APP_STATUS_CODE, null, responseTables, statusString); response.SetClientHandle(request.clientData); byte[] buffer = new byte[response.GetSerializedSize() + 4]; BitConverter.GetBytes(buffer.Length - 4).CopyTo(buffer, 0); response.FlattenToBuffer(buffer.AsSpan().Slice(4)); reques
static bool MatchValue(FacesContext ctx, UIComponent component, object value, IEnumerator<SelectItem> items, Converter converter) { while (items.MoveNext()) { SelectItem item = items.Current; if (item is SelectItemGroup itemGroup) { SelectItem[] subitems = itemGroup.SelectItems; if (subitems != null && subitems.Length > 0) { if (MatchValue(ctx, component, value, new ArrayEnumerator(subitems), converter)) { return true; } } } else { object compareValue = null; try { compareValue = DoConversion(ctx, component, item, value, converter); } catch (IllegalStateException) { continue; } if (compareValue == null && value == null) { return true; } if (value.Equals(compareValue)) { return true; } } } return false; }
private Node GetNode(Node nodeStart, string key, CreateMode createMode, bool bReturnTextNode) { if (key.Contains("/")) { string strKeyParent = key.Substring(0, key.IndexOf('/')); CreateMode createModeParent = createMode; if (createModeParent == CreateMode.CREATE_NEW_NODE) createModeParent = CreateMode.CREATE_IF_NOT_FOUND; // Only create a duplicate node at the leaf level. nodeStart = GetNode(nodeStart, strKeyParent, createModeParent, false); if (nodeStart == null) return null; key = key.Substring(key.IndexOf('/') + 1); return GetNode(nodeStart, key, createMode, bReturnTextNode); } if (nodeStart == null) nodeStart = GetNode(true); int iIndex = int.MaxValue; if (key.Contains("[")) { iIndex = int.Parse(key.Substring(key.IndexOf('[') + 1, key.IndexOf(']') - key.IndexOf('[') - 1)); key = key.Substring(0, key.IndexOf('[')); } key = Util.FixDOMElementN
[When(@"^I double click on the element on index '(\d+?)'$")] public void SeleniumDoubleClick(int index) { var action = new Actions(commonspec.GetDriver()); try { Assert.That(commonspec, commonspec.GetPreviousWebElements()).With.Property("Count").Is.GreaterThanOrEqualTo(index); action.DoubleClick(commonspec.GetPreviousWebElements().GetPreviousWebElements()[index]).Perform(); } catch (AssertionException) { Thread.Sleep(1000); Assert.That(commonspec, commonspec.GetPreviousWebElements()).With.Property("Count").Is.GreaterThanOrEqualTo(index); action.DoubleClick(commonspec.GetPreviousWebElements().GetPreviousWebElements()[index]).Perform(); } }
public static DateTime ToDateAdvanced(object o, TimeZoneInfo timeZone, DateTime defaultValue) { if (o is DateTime dateTime) { return dateTime; } else if (o is DateTimeImpl date) { return date; // Assuming DateTimeImpl is compatible with DateTime } else if (o is ICastable castable) { return castable.CastToDateTime(defaultValue); } else if (o is string str) { return ToDateAdvanced(str, timeZone, defaultValue); } else if (o is IConvertible convertible) { return DateTime.FromOADate(convertible.ToDouble(null)); // Assuming this converts to DateTime correctly } else if (o is Calendar calendar) { return new DateTimeImpl(calendar); // Assuming Calendar is mapped to DateTimeImpl } else if (o is ObjectWrap objectWrap) { return ToDateAdvanced(objectWrap.GetEmbeddedObject(defaultValue), timeZone, defaultValue); } return defaultValue; }
public void SetStreams(IEnumerable<StreamSummary> streams) { if (streams == null) { this.streams = null; return; } this.streams = new List<StreamSummary>(streams); }
using System.Security.Cryptography; using System.Text; public static class SessionIdGenerator { public static string ComputeSessionId(string aString) { using (SHA256 sha256Hash = SHA256.Create()) { byte[] byteData = sha256Hash.ComputeHash(Encoding.UTF8.GetBytes(aString)); StringBuilder sb = new StringBuilder("SQLQuery:"); foreach (byte aByteData in byteData) { string hex = (aByteData & 0xFF).ToString("x2"); sb.Append(hex); } return sb.ToString(); } } }
public void SetCookies(List<HttpCookie> cookies) { if (cookies.Count == 0) { SetHeader(HttpHeader.COOKIE, null); } StringBuilder sbData = new StringBuilder(); foreach (HttpCookie c in cookies) { sbData.Append(c.Name); sbData.Append('='); sbData.Append(c.Value); sbData.Append("; "); } if (sbData.Length <= 3) { SetHeader(HttpHeader.COOKIE, null); return; } string data = sbData.ToString(0, sbData.Length - 2); SetHeader(HttpHeader.COOKIE, data); }
private static void AssertXpathEquality(string controlXpath, XmlDocument controlDocument, string testXpath, XmlDocument testDocument, bool equal) { var xpath = new XPathEngine(); // Assuming XPathEngine is defined in your context var controlNodes = xpath.GetMatchingNodes(controlXpath, controlDocument); var testNodes = xpath.GetMatchingNodes(testXpath, testDocument); var diff = new Diff(AsXpathResultDocument(NewControlParser(), controlNodes), AsXpathResultDocument(NewTestParser(), testNodes)); AssertXMLEqual(diff, equal); }
public void Play(string uri) { Log.Debug(TAG, "Start playing " + uri); NotifyVideoUnavailable(REASON_BUFFERING); bool isWeb = false; TvInputPlayer.Callback callback = new TvInputPlayer.Callback { OnPrepared = () => { NotifyVideoAvailable(); SetOverlayEnabled(false); }, OnPlayerStateChanged = (playWhenReady, state) => { }, OnPlayWhenReadyCommitted = () => { }, OnPlayerError = (ExoPlaybackException e) => { Log.Error(TAG, e.Message + "\""); if (e.Message.Contains("Extractor")) { Log.Debug(TAG, "Cannot play the stream, try loading it as a website"); Log.Debug(TAG, "Open " + uri); // Pretend this is a website LoadUrl(uri); isWeb = true; SetOverlayEnabled(false); NotifyVideoAvailable(); SetOverlayEnabled(true); } }, OnDrawnToSurface = (Surface surface) => { }, OnText = (string text) => { } }; try { tvInputPlayer.RemoveCallback(callback); } catch (NullRefere
public static File Compress(File sourceFile, string algorithm, bool deleteSourceFileAfterCompressed) { return Compress(sourceFile, sourceFile.Directory, algorithm, deleteSourceFileAfterCompressed); }
protected void ProcessField(DataRow row, string fieldIDColumn, string entityIDColumn, object value) { ProcessField(row, fieldIDColumn, Convert.ToInt32(row[entityIDColumn]), value); }
public async Task<ServerTableAuditingPolicyInner> CreateOrUpdateAsync(string resourceGroupName, string serverName, ServerTableAuditingPolicyInner parameters) { var response = await CreateOrUpdateWithServiceResponseAsync(resourceGroupName, serverName, parameters); return response.Body; }
public Range<T> Reset() { lock (lockObject) { this.current = this.start; this.index = 0; } return this; }
protected bool IsCore(Dependency left, Dependency right) { string leftName = left.GetFileName().ToLower(); string rightName = right.GetFileName().ToLower(); bool returnVal; //TODO - should we get rid of this merging? It removes a true BOM... if (left.IsVirtual() && !right.IsVirtual()) { returnVal = true; } else if (!left.IsVirtual() && right.IsVirtual()) { returnVal = false; } else if ((!System.Text.RegularExpressions.Regex.IsMatch(rightName, @".*\.(tar|tgz|gz|zip|ear|war).*") && System.Text.RegularExpressions.Regex.IsMatch(leftName, @".*\.(tar|tgz|gz|zip|ear|war).*")) || (rightName.Contains("core") && !leftName.Contains("core")) || (rightName.Contains("kernel") && !leftName.Contains("kernel")) || (rightName.Contains("akka-stream") && !leftName.Contains("akka-stream")) || (rightName.Contains("netty-transport") && !leftName.Contains("netty-transport"))) { returnVa
public static AbstractGroupExpression<Pair<K, V>, SortedDictionary<K, V>> SortedMap<K, V>(Expression<K> key, Expression<V> value, IComparer<K> comparer) { return GMap.CreateSorted(QPair.Create(key, value), comparer); }
public short GetCommandCompletionCode(int expectedSegmentType) { if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) SibTr.Entry(this, tc, "GetCommandCompletionCode", new object[] { expectedSegmentType.ToString() }); CheckReleased(); short result = -1; if (receivedData != null) { // First see what the segment returned was int receivedDataSegmentType = GetReceivedDataSegmentType(); // If it matches what we expect, then there was no exception if (receivedDataSegmentType == expectedSegmentType) { result = CommsConstants.SI_NO_EXCEPTION; } else if (receivedDataSegmentType == JFapChannelConstants.SEG_EXCEPTION) { GetShort(); // Skip over the exception count result = GetShort(); // Ensure we rewind the buffer (as we are only peeking a look here) receivedBuffer.Rewind(); } else { // Get the segment types in decimal and hex for ease of use string expected = $"{expectedSegmentType} (0x{expectedSegmentType:X})"; string actual = $"{receivedDataSegmentType}
private static D GetCSharpMaxInclusive<D>(Type clazz, int totalDigits, int fractionDigits) where D : struct, IConvertible { int dec = totalDigits - fractionDigits; char[] decPart = new char[dec]; Array.Fill(decPart, '9'); StringBuilder sb = new StringBuilder(); sb.Append(decPart); if (clazz == typeof(short)) { return (D)(object)(dec > 4 ? short.MaxValue : short.Parse(sb.ToString())); } else if (clazz == typeof(int)) { return (D)(object)(dec > 9 ? int.MaxValue : int.Parse(sb.ToString())); } else if (clazz == typeof(long)) { return (D)(object)(dec > 18 ? long.MaxValue : long.Parse(sb.ToString())); } else if (clazz == typeof(BigInteger)) { return (D)(object)new BigInteger(sb.ToString()); } else if (clazz == typeof(decimal)) { if (fractionDigits > 0) { sb.Append("."); char[] fracPart = new char[fractionDigits]; Array.Fill(fracPart
public static Liferay.Commerce.Model.CommerceOrderNote CreateCommerceOrderNote(long commerceOrderNoteId) { return GetService().CreateCommerceOrderNote(commerceOrderNoteId); }
public async Task<Page<RegistryInner>> ListAsync() { var response = await ListWithServiceResponseAsync(); return response.Body; }
public Google.Api.Ads.AdWords.v201809.cm.Money GetRequiredBudget() { return requiredBudget; }
public B AddHttpHeader(string name, object value) { if (name == null) throw new ArgumentNullException(nameof(name)); if (value == null) throw new ArgumentNullException(nameof(value)); httpHeaders.AddObject(HttpHeaderNames.Of(name), value); return Self(); }
public int GetRequestCount() { lock (mapPluginStats) { int count = requestCount + GetAnalyser().GetRequestCount(); foreach (var stats in mapPluginStats.Values) { count += stats.GetMessageCount(); } return count; } }
private void WriteObject(System.IO.BinaryWriter writer) { writer.Write(SerializeObject()); writer.Write(frciEyecatcher); writer.Write(frciPlatform); writer.Write(frciVersionID); }
public EList<string> GetPrefixTitles() { return (EList<string>)eGet(Ifc2x3tc1Package.Literals.IFC_PERSON__PREFIX_TITLES, true); }
private void AddPostParams(Request request) { if (friendlyName != null) { request.AddPostParam("FriendlyName", friendlyName); } if (certificate != null) { request.AddPostParam("Certificate", certificate); } if (privateKey != null) { request.AddPostParam("PrivateKey", privateKey); } if (sandbox != null) { request.AddPostParam("Sandbox", sandbox.ToString()); } if (apiKey != null) { request.AddPostParam("ApiKey", apiKey); } if (secret != null) { request.AddPostParam("Secret", secret); } }
public static string GetServiceSpecial(string path) { string ss = null; if (path.StartsWith("/dqcServlet")) ss = "dqcServlet"; else if (path.StartsWith("/cdmvalidator")) ss = "cdmvalidator"; return ss; }
public bool GetBit(int index) { AssertValidIndex(index); int word = index / WORD_LENGTH; int offset = index % WORD_LENGTH; return (data[word] & (1 << offset)) != 0; }
public void SetPriority(SessionPriority prio) { if (failException != null) { throw failException; } sessionInfo.priority = prio; SessionInfo newInfo = new SessionInfo(sessionInfo); cmNotifier.AddCall(new ClusterManagerService.SessionUpdateInfoArgs(sessionId, newInfo)); }
public void Insert(Widget widget, string tabText, int beforeIndex) { Insert(widget, tabText, false, beforeIndex); }
public static Response Options(string path, Dictionary<string, object> pathParams) { return Given().Options(path, pathParams); }
[XmlElement("minutes", Namespace = "http://www.opengis.net/gml")] public JAXBElement<int> CreateMinutes(int value) { return new JAXBElement<int>(new XmlQualifiedName("minutes", "http://www.opengis.net/gml"), typeof(int), null, value); }
public void CheckCanSetDeleteOption(string option) { if (IsOptColor() || IsOptNoColor() || IsOptA() || IsOptVerbose() || IsOptMerged() || IsOptNoMerged() || GetOptContains() != null || IsOptTrack() || IsOptNoTrack() || IsOptL() || IsOptF() || IsOptMLower() || IsOptMUpper()) { throw new ArgumentException(ExceptionMessageMap.GetMessage("000120") + option + " should be used with branch(es), to delete the branch(es)."); } }
public void SetSql(string sql) { if (!string.IsNullOrEmpty(sql)) { this.sql = sql.Trim(); this.comment = ParseComment(sql); this.digest = MessageDigestUtils.MD5(sql); string sqlStatement = this.sql.ToLower(); if (sqlStatement != null) { this.select = sqlStatement.StartsWith("select"); this.procedure = sqlStatement.StartsWith("call"); } } }
public void Open() { InitParams(); int state = properties.GetDBModified(); switch (state) { case HsqlDatabaseProperties.FILES_MODIFIED: DeleteNewAndOldFiles(); RestoreBackup(); ProcessScript(); ProcessDataFile(); ProcessLog(); Close(false); if (cache != null) { cache.Open(filesReadOnly); } ReopenAllTextCaches(); break; case HsqlDatabaseProperties.FILES_NEW: try { DeleteBackup(); BackupData(); RenameNewBackup(); RenameNewScript(); DeleteLog(); properties.SetDBModified(HsqlDatabaseProperties.FILES_NOT_MODIFIED); } catch (IOException e) { database.Logger.AppLog.LogContext(e, null); } // fall-through case HsqlDatabaseProperties.FILES_NOT_MODIFIED: ProcessScript(); if (IsAnyCacheModified()) { properties.SetDBModified(HsqlDatabaseProperties.FILES_MODIFIED); Close(false); if (cache != null) { cache.Open(filesReadOnly); } ReopenAllTextCaches(); } break; } OpenLog(
public static void WritePharmacophoreDefinition(PharmacophoreQuery[] queries, Stream outStream) { var root = new XElement("pharmacophoreContainer"); root.Add(new XAttribute("version", "1.0")); foreach (var query in queries) { var pcore = new XElement("pharmacophore"); var description = query.GetProperty("description"); if (description != null) pcore.Add(new XAttribute("description", (string)description)); var name = query.GetTitle(); if (name != null) pcore.Add(new XAttribute("name", (string)name)); // we add the pcore groups for this query as local to the group foreach (var atom in query.Atoms()) { var group = new XElement("group"); group.Add(new XAttribute("id", atom.GetSymbol())); group.Value = ((PharmacophoreQueryAtom)atom).GetSmarts(); pcore.Add(group); } // now add the constraints foreach (var bond in query.Bonds()) { XElement elem = null; if (bond is PharmacophoreQueryBond dbond)
public void PropagateActions(InternalWorkingMemory workingMemory) { var memory = workingMemory.GetNodeMemory(this); // first we clear up the action queued flag memory.IsQueued().CompareAndSet(true, false); // we limit the propagation to avoid a hang when this queue is never empty Action next; for (int counter = 0; counter < PROPAGATION_SLICE_LIMIT; counter++) { next = memory.GetNextAction(); if (next != null) { next.Execute(this.sink, workingMemory); } else { break; } } if (memory.HasNextAction() && memory.IsQueued().CompareAndSet(false, true)) { // add action to the queue again. workingMemory.QueueWorkingMemoryAction(this.action); } }
public FastStr ToUpperCase(CultureInfo culture) { string s = ToString(); return UnsafeOf(s.ToUpper(culture)); }
public Action GetAction(string name, string nodeID) { Strategy<ActionEndpoint> strategy = null; long stamp = lock.TryOptimisticRead(); if (stamp != 0) { try { strategy = strategies[name]; } catch (Exception modified) { stamp = 0; } } if (!lock.Validate(stamp) || stamp == 0) { stamp = lock.ReadLock(); try { strategy = strategies[name]; } finally { lock.UnlockRead(stamp); } } if (strategy == null) { throw new ServiceNotFoundError(nodeID, name); } ActionEndpoint endpoint = strategy.GetEndpoint(nodeID); if (endpoint == null) { throw new ServiceNotAvailableError(nodeID, name); } return endpoint; }
public Metric UpdateMetric(string metricName) { // [START updateMetric] var metricInfo = new MetricInfo.Builder(metricName, "severity>=ERROR") .SetDescription("new description") .Build(); var metric = logging.Update(metricInfo); // [END updateMetric] return metric; }
public STATUS GetStatus() { if (featureContent.IsLoaded()) { return STATUS.LOADED; } if (deferred == null) { return STATUS.EMPTY; } return STATUS.LOADING; }
public Node FindOrCreateChild(Node parent, string name, string nodeType) { return FindOrCreateNode(parent, name, nodeType, nodeType); }
public SslContextBuilder KeyManager(KeyManagerFactory keyManagerFactory) { if (forServer) { if (keyManagerFactory == null) { throw new ArgumentNullException("keyManagerFactory required for servers"); } } keyCertChain = null; key = null; keyPassword = null; this.keyManagerFactory = keyManagerFactory; return this; }
public Dictionary<string, string> GetMapFromReference(Reference reference, Dictionary<string, string> defaults) { if (TraceComponent.IsAnyTracingEnabled() && TRACE.IsEntryEnabled()) { SibTr.Entry(this, TRACE, "GetMapFromReference", new object[] { reference, defaults }); } Dictionary<string, string> extractedProps = null; // Extract a Map of the properties from the Reference lock (reference) { var propsList = reference.GetAll(); // This will be set up to contain a map representing all the // information that was previously stored in the Reference. var encodedMap = new Dictionary<string, string>(); // Look at each property in turn. while (propsList.MoveNext()) { // Get the coded version of the name. This will start with one // of the prefix values. The codedName must have been non-null. StringRefAddr refAddr = (StringRefAddr)propsList.Current; string codedName = refAddr.Type; string val = (string)refAddr.Content; // Store the coded information in the map. encodedMap[codedName] = val; } // Dec
public synchronized void Remove(SocketBox sb) { int status = ((ManagedSocketBox)sb).GetStatus(); if (!allSockets.ContainsKey(sb)) { throw new ArgumentException("This socket does not seem to exist in the socket pool."); } allSockets.Remove(sb); if (status == ManagedSocketBox.FREE) { if (!freeSockets.ContainsKey(sb)) { throw new ArgumentException("This socket is marked free, but does not exist in the pool of free sockets."); } freeSockets.Remove(sb); } else { if (!busySockets.ContainsKey(sb)) { throw new ArgumentException("This socket is marked busy, but does not exist in the pool of busy sockets."); } busySockets.Remove(sb); } }
public int[] GetTags() { int[] tags = new int[fieldIndex.Count]; var keys = fieldIndex.Keys.GetEnumerator(); int i = 0; while (keys.MoveNext()) { tags[i++] = (int)keys.Current; } return tags; }
public void RegisterHandlers(string packageString) { var list = AnnotationDetector.ScanAsList<ExceptionHandler>(packageString); foreach (var handler in list) { // Console.WriteLine(handler); var newInstance = JKObjectUtil.NewInstance(handler); var clas = JKObjectUtil.GetGenericParameter(handler); SetHandler(clas, newInstance); } }
public List<SequenceLabel> GetSequencesFromSpans(string[] tokens, Span[] seqSpans) { List<SequenceLabel> sequences = new List<SequenceLabel>(); foreach (var seqSpan in seqSpans) { string seqString = seqSpan.GetCoveredText(tokens); string seqType = seqSpan.GetType(); SequenceLabel sequence = this.sequenceFactory.CreateSequence(seqString, seqType, seqSpan); sequences.Add(sequence); } return sequences; }
public static string Remove(string input, char ch) { int stringLen = input.Length; char[] result = new char[stringLen]; int offset = 0; for (int i = 0; i < stringLen; i++) { char c = input[i]; if (c == ch) { continue; } result[offset] = c; offset++; } if (offset == stringLen) { return input; // no changes } return new string(result, 0, offset); }
protected void CreateAgent(int agentId) { var delegator = new Subscriber<AgentObject> { ObjectAvailable = agentObject => BureauDirector.this.ObjectAvailable(agentObject), RequestFailed = (oid, cause) => BureauDirector.this.RequestFailed(oid, cause) }; log.Info("Subscribing to object " + agentId); var subscriber = new SafeSubscriber<AgentObject>(agentId, delegator); _subscribers[agentId] = subscriber; subscriber.Subscribe(_ctx.GetDObjectManager()); }
private void ApplyMax(Dimension dim) { if (GetMaxHeight() > 0) { dim.Height = Math.Min(dim.Height, GetMaxHeight()); } if (GetMaxWidth() > 0) { dim.Width = Math.Min(dim.Width, GetMaxWidth()); } }
public int Compare(ParentStep p1, ParentStep p2) { return p1.Parent.Line.CompareTo(p2.Parent.Line); }
public Locomotive WaitForWindow(string regex) { var windows = driver.WindowHandles; foreach (var window in windows) { try { driver.SwitchTo().Window(window); var p = new Regex(regex); var m = p.Match(driver.Url); if (m.Success) { attempts = 0; return SwitchToWindow(regex); } else { // try for title m = p.Match(driver.Title); if (m.Success) { attempts = 0; return SwitchToWindow(regex); } } } catch (NoSuchWindowException e) { if (attempts <= MAX_ATTEMPTS) { attempts++; Thread.Sleep(1000); return WaitForWindow(regex); } else { Fail($"Window with url|title: {regex} did not appear after {MAX_ATTEMPTS} tries. Exiting."); } } } // when we reach this point, that means no window exists with that title.. if (attempts == MAX_ATTEMPTS) { Fail($"Window with title: {regex} did not app
private Channel GetConnection() { StateCheck(State.RUNNING, State.HEALTH_CHECKING); bool acquired = false; if (blockOnMaxConnections) { try { logger.Debug("Attempting to acquire channel permit"); if (!permits.TryAcquire()) { logger.Info("All connections in use for {0}; had to wait for one.", remoteAddress); permits.Acquire(); } acquired = true; } catch (InterruptedException ex) { // no-op, don't care } catch (BlockingOperationException ex) { logger.Error("Netty interrupted waiting for connection permit to be available; {0}", remoteAddress); } } else { logger.Debug("Attempting to acquire channel permit"); acquired = permits.TryAcquire(); } Channel channel = null; if (acquired) { try { channel = DoGetConnection(true); channel.CloseFuture().RemoveListener(inAvailableCloseListener); } catch (ConnectionFailedException ex) { permits.Release(); } catch (UnknownHostException ex) { permits.Release(); logger.Erro
public static bool AreMappedObjects(Type dClass, Type sClass, XML xml) { return IsMapped(dClass, xml) || IsMapped(sClass, xml); }
public DescribeSpotPriceHistoryRequest WithProductDescriptions(params string[] productDescriptions) { if (this.productDescriptions == null) { this.productDescriptions = new List<string>(productDescriptions.Length); } foreach (var ele in productDescriptions) { this.productDescriptions.Add(ele); } return this; }
public DecimalFormatProperties GetDecimalFormat(QName name) { if (m_DecimalFormatDeclarations == null) return null; int n = GetDecimalFormatCount(); for (int i = n - 1; i >= 0; i--) { DecimalFormatProperties dfp = GetDecimalFormat(i); if (dfp.GetName().Equals(name)) return dfp; } return null; }
public bool IsSingleton(string exceptionName) { if (size != 1) { return false; } ObjectType e = iterator().Next(); return e.ToString().Equals(exceptionName); }
public bool IsDependentScopedStrict<T>(Type type) { var bean = ResolveStrict(manager, type); if (bean != null) { return bean.GetScope().Equals(typeof(Dependent)); } return false; }
public void Marshall(CreateRemoteAccessSessionRequest createRemoteAccessSessionRequest, IProtocolMarshaller protocolMarshaller) { if (createRemoteAccessSessionRequest == null) { throw new SdkClientException("Invalid argument passed to marshall(...)"); } try { protocolMarshaller.Marshall(createRemoteAccessSessionRequest.ProjectArn, PROJECTARN_BINDING); protocolMarshaller.Marshall(createRemoteAccessSessionRequest.DeviceArn, DEVICEARN_BINDING); protocolMarshaller.Marshall(createRemoteAccessSessionRequest.InstanceArn, INSTANCEARN_BINDING); protocolMarshaller.Marshall(createRemoteAccessSessionRequest.SshPublicKey, SSHPUBLICKEY_BINDING); protocolMarshaller.Marshall(createRemoteAccessSessionRequest.RemoteDebugEnabled, REMOTEDEBUGENABLED_BINDING); protocolMarshaller.Marshall(createRemoteAccessSessionRequest.RemoteRecordEnabled, REMOTERECORDENABLED_BINDING); protocolMarshaller.Marshall(createRemoteAccessSessionRequest.RemoteRecordAppArn, REMOTERECORDAPPARN_BINDING); protocolMarshaller.Marshall(createRemoteAccessSessionRequest.Name, NAME_BINDING); protocolMarshaller.Marshall(createRemoteAccessSessionRequest.ClientId, CLIENTID_BINDING); protocolMarshaller.Marshall(createRemoteAccessSessionRequest.Configuration, CONFIGURAT
protected UserDetails LoadUserByAssertion(Assertion assertion) { var token = new CasAssertionAuthenticationToken(assertion, string.Empty); return this.authenticationUserDetailsService.LoadUserDetails(token); }
public void SetAsDefault(SetAsDefaultRequest request) { Call( new PostRequest(Path("set_as_default")) .SetParam("id", request.Id) .SetParam("organization", request.Organization) .SetMediaType(MediaTypes.JSON) ).Content(); }
public static string GenerateRandomId() { var buffer = new System.Text.StringBuilder(); int baseValue = 36; Random random = new Random(); for (int i = 0; i < 16; i++) { buffer.Append(Convert.ToString(random.Next(baseValue), baseValue)); } return buffer.ToString(); }
void DeferBoundaryCallbacks(bool deferEmpty, bool deferBegin, bool deferEnd) { if (mBoundaryCallback == null) { throw new InvalidOperationException("Can't defer BoundaryCallback, no instance"); } /* * If lowest/highest haven't been initialized, set them to storage size, * since placeholders must already be computed by this point. * * This is just a minor optimization so that BoundaryCallback callbacks are sent immediately * if the initial load size is smaller than the prefetch window. */ if (mLowestIndexAccessed == int.MaxValue) { mLowestIndexAccessed = mStorage.Count; } if (mHighestIndexAccessed == int.MinValue) { mHighestIndexAccessed = 0; } if (deferEmpty || deferBegin || deferEnd) { // Post to the main thread, since we may be on creation thread currently mMainThreadExecutor.Execute(() => { // on is dispatched immediately, since items won't be accessed if (deferEmpty) { mBoundaryCallback.OnZeroItemsLoaded(); } // for other callbacks, mark deferred, and only dispatch
public override GetRelationalDatabasesResult GetRelationalDatabases(GetRelationalDatabasesRequest request) { request = BeforeClientExecution(request); return ExecuteGetRelationalDatabases(request); }
public List<NumericColumn<object>> NumericColumns(params string[] columnNames) { List<NumericColumn<object>> cols = new List<NumericColumn<object>>(); foreach (string name in columnNames) { cols.Add(NumberColumn(name)); } return cols; }
public List<RoleDetail> GetRoleDetailList() { if (roleDetailList == null) { roleDetailList = new List<RoleDetail>(); } return roleDetailList; }
public static PojoSerializerSnapshotData<T> CreateFrom<T>( Type pojoClass, Field[] fields, TypeSerializerSnapshot[] existingFieldSerializerSnapshots, Dictionary<Type, TypeSerializerSnapshot> existingRegisteredSubclassSerializerSnapshots, Dictionary<Type, TypeSerializerSnapshot> existingNonRegisteredSubclassSerializerSnapshots) { var fieldSerializerSnapshots = new LinkedOptionalMap<Field, TypeSerializerSnapshot>(fields.Length); for (int i = 0; i < fields.Length; i++) { var field = fields[i]; string fieldName = (field == null) ? GetDummyNameForMissingField(i) : field.Name; fieldSerializerSnapshots.Put(fieldName, field, existingFieldSerializerSnapshots[i]); } return new PojoSerializerSnapshotData<T>( pojoClass, fieldSerializerSnapshots, OptionalMapOf(existingRegisteredSubclassSerializerSnapshots, t => t.Name), OptionalMapOf(existingNonRegisteredSubclassSerializerSnapshots, t => t.Name)); }
private SortedSet<DateTime> CalculateDates() { if (m_allDates == null) { SortedSet<DateTime> result = new SortedSet<DateTime>(); if (IsAnyDatePossible()) { Calendar date = GetFirstDate(); int previousOccurrences = 0; while (ShowMoreEntries(date, previousOccurrences)) { result.Add(date.Time); ToNextDate(date); previousOccurrences++; } } m_allDates = result; } return m_allDates; }
private bool SetupEphemeralRSAKeys(bool export) { var kp = sslContext.GetEphemeralKeyManager().GetRSAKeyPair(export, sslContext.GetSecureRandom()); if (kp == null) { return false; } else { tempPublicKey = kp.Public; tempPrivateKey = kp.Private; return true; } }
public string Format(object qty, int minDecimals, params int[] fractionGroups) { return Format(qty, new StringBuilder(), new FieldPosition(0), minDecimals, FractionGroupsAsList(fractionGroups)).ToString(); }
public static synchronized JMX Reconnect() { try { ClientCache cache = ClientCacheFactory.GetAnyInstance(); if (cache != null && !cache.IsClosed()) { cache.Close(); } } catch (Exception e) { Console.WriteLine("Cache was closed"); } if (jmx != null) { jmx.Dispose(); jmx = null; } return GetJmx(); }
public void Deserialize(Input input) { log.Debug("deserialize"); name = Deserializer.Deserialize(input, typeof(string)) as string; log.Trace("Name: {0}", name); persistent = true; var map = Deserializer.Deserialize(input, typeof(Dictionary<string, object>)) as Dictionary<string, object>; if (log.IsTraceEnabled) { log.Trace("Attributes: {0}", map); } base.SetAttributes(map); ownerMessage.SetName(name); ownerMessage.SetPersistent(persistent); }
public override void ExceptionCaught(NextFilter nextFilter, IoSession session, Exception cause) { if (eventTypes.Contains(IoEventType.EXCEPTION_CAUGHT)) { IoFilterEvent event = new IoFilterEvent(nextFilter, IoEventType.EXCEPTION_CAUGHT, session, cause); FireEvent(event); } else { nextFilter.ExceptionCaught(session, cause); } }
public void Set(T paramOrigin, T paramDestination, bool paramBool) { Debug.Assert(paramOrigin != null); Debug.Assert(paramDestination != null); if (!mMap.ContainsKey(paramOrigin)) { mMap[paramOrigin] = new Dictionary<T, bool>(); } mMap[paramOrigin][paramDestination] = paramBool; }
public static string CreateXPathWarning(string msgKey, object[] args) { // BEGIN android-changed // don't localize exception messages return CreateXPathMsg(XPathBundle, msgKey, args); // END android-changed }
private static TreePath? FindEnclosingMethodOrLambdaOrInitializer(TreePath path) { while (path != null) { if (path.GetLeaf() is MethodTree) { return path; } TreePath parent = path.GetParentPath(); if (parent != null) { if (parent.GetLeaf() is ClassTree) { if (path.GetLeaf() is BlockTree) { // this is a class or instance initializer block return path; } if (path.GetLeaf() is VariableTree variableTree && variableTree.Initializer != null) { // this is a field with an inline initializer return path; } } if (parent.GetLeaf() is LambdaExpressionTree) { return parent; } } path = parent; } return null; }
[ManagedOperation("Sets the maximum allowed number of threads.")] [ManagedOperationParameters(new[] { new ManagedOperationParameter("maximumPoolSize", "the new maximum") })] public override void SetMaximumPoolSize(int maximumPoolSize) { base.SetMaximumPoolSize(maximumPoolSize); }
private bool IsANeighborInAnAtomContainer(List<IAtom> neighs, IAtomContainer ac) { bool isIn = false; int count = 0; foreach (IAtom neigh in neighs) { if (ac.Contains(neigh)) { count += 1; } } if (count > 0) { isIn = true; } return isIn; }
public Subclass WithIAMMaxRetry(int retryCount) { this.iamMaxRetry = retryCount; if (retryCount > 0 && this.credentials.getCredentials() is IBMOAuthCredentials oauthCredentials && oauthCredentials.getTokenManager() is DefaultTokenManager tokenManager) { tokenManager.SetIamMaxRetry(iamMaxRetry); } return GetSubclass(); }
public static Stream GetZipContentsRecursive(string file) { // return local file directly int pos = file.IndexOf('!'); if (pos == -1) { if (!File.Exists(file)) { throw new IOException($"File {file} does not exist"); } try { return new FileStream(file, FileMode.Open, FileAccess.Read); } catch (IOException e) { // filter out locked errors if (e.Message.Contains("because another process has locked")) { Logger.Warning($"Could not read file: {file} because it is locked."); return new MemoryStream(new byte[] { }); } throw; } } string zip = file.Substring(0, pos); string subfile = file.Substring(pos + 1); if (Logger.IsLoggable(LogLevel.Fine)) { Logger.Fine($"Trying to read zipfile: {zip} subfile: {subfile}"); } // open original zip if (!File.Exists(zip) || !File.GetAttributes(zip).HasFlag(FileAttributes.Directory) || new FileInfo(zip).Length == 0) { throw new IOExcept
public EClass GetIfcSwitchingDevice() { if (ifcSwitchingDeviceEClass == null) { ifcSwitchingDeviceEClass = (EClass) EPackage.Registry.INSTANCE.GetEPackage(Ifc4Package.eNS_URI) .GetEClassifiers()[689]; } return ifcSwitchingDeviceEClass; }
public static IReadOnlyList<T> UnmodifiableList<T>(IList<T> list) { return list is IList<T> ? new UnmodifiableRandomAccessList<T>(list) : new UnmodifiableList<T>(list); }
public void SetTlsCertificateSummaries(IEnumerable<LoadBalancerTlsCertificateSummary> tlsCertificateSummaries) { if (tlsCertificateSummaries == null) { this.tlsCertificateSummaries = null; return; } this.tlsCertificateSummaries = new List<LoadBalancerTlsCertificateSummary>(tlsCertificateSummaries); }
public StringType AddPrefixElement() { StringType t = new StringType(); if (this.prefix == null) this.prefix = new List<StringType>(); this.prefix.Add(t); return t; }
public Request<CancelCapacityReservationRequest> GetDryRunRequest() { var request = new CancelCapacityReservationRequestMarshaller().Marshall(this); request.AddParameter("DryRun", true.ToString()); return request; }
public int SetString(string strSource, bool bDisplayOption, int iMoveMode) // init this field override for other value { int iErrorReturn = FirstMLastConverter.NameToParts(strSource, bDisplayOption, iMoveMode, m_recThis, m_iNamePrefix, m_iNameFirst, m_iNameMiddle, m_iNameSur, m_iNameSuffix, m_iNameTitle); if (iErrorReturn == DBConstants.NORMAL_RETURN) { if (this.GetNextConverter() != null) { iErrorReturn = base.SetString(strSource, bDisplayOption, iMoveMode); } } return iErrorReturn; }
public HtmlPolicyBuilder AllowElements(ElementPolicy policy, params string[] elementNames) { InvalidateCompiledState(); foreach (var elementName in elementNames) { var canonicalName = HtmlLexer.CanonicalName(elementName); var newPolicy = ElementPolicy.Util.Join(elPolicies[canonicalName], policy); // Don't remove if newPolicy is the always reject policy since we want // that to infect later allowElement calls for this particular element // name. rejects should have higher priority than allows. elPolicies[canonicalName] = newPolicy; if (!textContainers.ContainsKey(canonicalName)) { if (METADATA.CanContainPlainText(METADATA.IndexForName(canonicalName))) { textContainers[canonicalName] = true; } } } return this; }
public string GetItemValue(string id) { Item item = GetItem(id); if (item != null) return item.GetValue(); return null; }
private static void GenerateParseOnXmlAttributes(BindTypeContext context, MethodSpec.Builder methodBuilder, BindEntity entity) { BindTransform bindTransform; int count = 0; // Count properties to manage foreach (var property in entity.GetCollection()) { if (property.XmlInfo.XmlType != XmlType.Attribute) continue; count++; } if (count > 0) { // attributes methodBuilder.AddCode("\n// attributes \n"); methodBuilder.AddStatement("string attributeName = null"); methodBuilder.AddStatement("int attributesCount = xmlParser.GetAttributeCount();"); methodBuilder.BeginControlFlow("for (int attributeIndex = 0; attributeIndex < attributesCount; attributeIndex++)"); methodBuilder.AddStatement("attributeName = xmlParser.GetAttributeName(attributeIndex)"); methodBuilder.BeginControlFlow("switch(attributeName)"); foreach (var property in entity.GetCollection()) { if (property.XmlInfo.XmlType != XmlType.Attribute) continue; methodBuilder.AddCode($"case \"{BindProperty.XmlName(property)}\":\n"); bindTransform = BindTransformer.Lookup(property); methodBuilder.AddCode($"// fi
public int InsertOrUpdate(Entity record, params string[] keys) { using (var conn = this.GetConnection()) { try { return runner.InsertOrUpdate(conn, record, keys); } catch (SQLException e) { throw e; } } }
public void Stop() { try { this.connection.Invoke(this.objectName, "shutdown", null, null); } catch (ReflectionException ex) { throw new MojoExecutionException("Shutdown failed", ex.InnerException); } catch (MBeanException ex) { throw new MojoExecutionException("Could not invoke shutdown operation", ex); } }
public static Task<OUT> ThenApplyAsyncIfNotDone<IN, OUT>(Task<IN> task, TaskScheduler scheduler, Func<IN, OUT> applyFun) { if (task.IsCompleted) { return task.ContinueWith(t => applyFun(t.Result); } else { return Task.Factory.StartNew(() => applyFun(task.Result), CancellationToken.None, TaskCreationOptions.None, scheduler); } }
static void PutTarget(int targetTypeAndInfo, ByteVector output) { switch (targetTypeAndInfo >> 24) { case CLASS_TYPE_PARAMETER: case METHOD_TYPE_PARAMETER: case METHOD_FORMAL_PARAMETER: output.PutShort(targetTypeAndInfo >> 16); break; case FIELD: case METHOD_RETURN: case METHOD_RECEIVER: output.PutByte(targetTypeAndInfo >> 24); break; case CAST: case CONSTRUCTOR_INVOCATION_TYPE_ARGUMENT: case METHOD_INVOCATION_TYPE_ARGUMENT: case CONSTRUCTOR_REFERENCE_TYPE_ARGUMENT: case METHOD_REFERENCE_TYPE_ARGUMENT: output.PutInt(targetTypeAndInfo); break; case CLASS_EXTENDS: case CLASS_TYPE_PARAMETER_BOUND: case METHOD_TYPE_PARAMETER_BOUND: case THROWS: case EXCEPTION_PARAMETER: case INSTANCEOF: case NEW: case CONSTRUCTOR_REFERENCE: case METHOD_REFERENCE: output.Put12(targetTypeAndInfo >> 24, (targetTypeAndInfo & 0xFFFF00) >> 8); break; default: throw new ArgumentException(); } }
public void Connect(ConnectionProperties cp, ClientComponentHandshake cch) { if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) SibTr.Entry(this, tc, "connect", new object[] { cp, cch }); ClientConnectionManager conMan = null; if (cp == null) { // The caller of this method passed in a null for the connection properties. This is // bad as we kinda need those so we know where to connect to. var e = new SIErrorException( nls.GetFormattedMessage("NULL_CONNECTION_PROPERTIES_SICO1039", null, null) ); FFDCFilter.ProcessException(e, CLASS_NAME + ".Connect", CommsConstants.CLIENTSIDECONNECTION_CONNECT_04, this); throw e; } if (cch == null) { // The caller of this method passed in null for the client component handshake. We need // this so we can call back to them to inform them to handshake. var e = new SIErrorException( nls.GetFormattedMessage("NULL_CCH_SICO1040", null, null) ); FFDCFilter.ProcessException(e, CLASS_N
public static Stream GetOutputStream(Socket socket, long timeout) { return socket.SocketHandle == IntPtr.Zero ? socket.GetStream() : new SocketOutputStream(socket, timeout); }
public BuildRecord RemoveBuildRecord(BuildRecord buildRecord) { GetBuildRecords().Remove(buildRecord); buildRecord.SetUser(null); return buildRecord; }
public void Enter(View from, bool withAnimation) { if (GestureDebug.IsDebugAnimator()) { Debug.Log($"{TAG}: Entering from view, with animation = {withAnimation}"); } EnterInternal(withAnimation); UpdateInternal(from); }
public Specificity ComputeSpecificity() { Specificity spec = new SpecificityImpl(); foreach (Selector s in list) { s.ComputeSpecificity(spec); } return spec; }
private void AddHeaders(HttpRequest request, Dictionary<string, string> headers) { foreach (var keyValuePair in headers) { request.AddHeader(keyValuePair.Key, keyValuePair.Value); } }
public bool SignatureCoversWholeDocument(string name) { GetSignatureNames(); name = GetTranslatedFieldName(name); if (!sigNames.ContainsKey(name)) return false; return ((int[])sigNames[name])[0] == reader.GetFileLength(); }
public Task<Void> RecognizeTextAsync(string url, TextRecognitionMode mode) { return RecognizeTextWithServiceResponseAsync(url, mode) .ContinueWith(responseTask => responseTask.Result.Body); }
protected Specification<ENTITY> BuildSpecification<X>(Filter<X> filter, SingularAttribute<ENTITY, X> field) { if (filter.Equals != null) { return EqualsSpecification(field, filter.Equals); } else if (filter.In != null) { return ValueIn(field, filter.In); } else if (filter.Specified != null) { return ByFieldSpecified(field, filter.Specified); } return null; }
private void AppendCharacterEscape(char esc, char ch) { if ((_outputTail + 1) >= _outputEnd) { FlushBuffer(); } _outputBuffer[_outputTail++] = esc; _outputBuffer[_outputTail++] = ch; }
public override void Write(string sStr, int nOfs, int nLen) { m_aSB.Append(sStr.Substring(nOfs, nLen)); }
protected bool ProcessTopicSourceUrls(TopicSourceURLProvider topicSourceURLProvider, SpecTopic specTopic, TopicWrapper topic) { LOG.Debug("Processing topic source urls"); bool changed = false; // Save the new Source Urls List<string> urls = specTopic.GetSourceUrls(true); if (urls != null && urls.Count > 0) { UpdateableCollectionWrapper<TopicSourceURLWrapper> sourceUrls = topic.GetSourceURLs() == null ? topicSourceURLProvider.NewTopicSourceURLCollection(topic) : topic.GetSourceURLs(); // Iterate over the spec topic urls and add them foreach (string url in urls) { TopicSourceURLWrapper sourceUrl = topicSourceURLProvider.NewTopicSourceURL(topic); sourceUrl.SetUrl(url); sourceUrls.AddNewItem(sourceUrl); } topic.SetSourceURLs(sourceUrls); changed = true; } return changed; }
private string[] AugmentCommand(string[] args, Type cmd, bool acceptsInputFile) { OptionGroup<ID> options; try { options = acceptsInputFile ? OptionIntrospector.Introspect(cmd, typeof(InputFileCommand)) : OptionIntrospector.Introspect(cmd); } catch (IntrospectionException e) { // should never happen throw new InvalidOperationException(e.Message, e); } ShellContext sc = ShellContext.Current(); foreach (Option<ID> o in options.GetOptions()) { if (o.LongName.Equals("style")) { args = ArrayUtils.Add(args, "--style"); args = ArrayUtils.Add(args, sc.Style); } else if (o.LongName.Equals("locale")) { args = ArrayUtils.Add(args, "--locale"); args = ArrayUtils.Add(args, sc.Locale); } else if (o.LongName.Equals("format")) { args = ArrayUtils.Add(args, "--format"); args = ArrayUtils.Add(args, sc.Format); } else if (o.LongName.Equals("input") && !string.IsNullOrEmpty(sc.InputFile
public static void IsNotEmpty(IEnumerable<object> argument, string name) { IsNotNull(argument, name); if (!argument.GetEnumerator().MoveNext()) { throw new ArgumentException($"{name} may not be empty."); } }
public static CommerceTierPriceEntry FindByUuid_First(string uuid, OrderByComparator<CommerceTierPriceEntry> orderByComparator) { return GetPersistence().FindByUuid_First(uuid, orderByComparator); }
public CompositeHandler WithQueryHandler(QueryHandler handler) { if (handler == null) { throw new ArgumentException(); } return new CompositeHandler(this.queryDetection, handler, this.updateHandler); }
public static int GetYAsOppositeTileFormat(int zoom, int y) { int tilesPerSide = TilesPerSide(zoom); int oppositeY = tilesPerSide - y - 1; return oppositeY; }
private void InitReader(object obj) { if (obj is IWorkingDirectoryLocationAware workingDirectoryAware) { workingDirectoryAware.SetWorkingDirectory(workingDirectory); } if (obj is IServletContextAware servletContextAware) { servletContextAware.SetServletContext(servletContext); } if (obj is IResourceBrowser resourceBrowser) { resourceInfoProviders.Insert(0, resourceBrowser); } }
public void Reset(bool resetChunkSize) { firstChunk = null; lastChunk = null; totalCharsInList = 0; totalCharsInDynamicChunks = -1; sizeAtLeast = -1; if (resetChunkSize) { chunkSize = firstChunkSize; totalChunkSize = 0; } allocBuffer = new AllocatedBuffer(chunkSize); dynamicChunkMap = new Dictionary<StreamCharBufferKey, StreamCharBufferSubChunk>(); }
public static void AddFile(State state, string file) { state.SetProp(ADD_FILES, state.GetProp(ADD_FILES, "") + "," + file); }
public static string Chop(string target) { if (string.IsNullOrEmpty(target)) { return string.Empty; } int len = target.Length, lastIdx = -1; if (len >= 2 && target[len - 1] == '\n' && target[len - 2] == '\r') { if (len == 2) { return string.Empty; } lastIdx = -2; } return Replace(target).Afters(lastIdx).ByNone().Last(); }
private Entry<V> ComputeIfAbsent(K key) { Entry<V> v = map.TryGetValue(key, out var existingValue) ? existingValue : null; if (v == null) { Entry<V> tmp = entryGetter(key); v = map.TryAdd(key, tmp) ? tmp : map[key]; } return v; }
protected void GenerateTitleBand() { log.Debug("Generating title band..."); JRDesignBand band = (JRDesignBand)GetDesign().GetPageHeader(); int yOffset = 0; // If title is not present then subtitle will be ignored if (GetReport().GetTitle() == null) return; if (band != null && !GetDesign().IsTitleNewPage()) { // Title and subtitle come after the page header yOffset = band.GetHeight(); } else { band = (JRDesignBand)GetDesign().GetTitle(); if (band == null) { band = new JRDesignBand(); GetDesign().SetTitle(band); } } JRDesignExpression printWhenExpression = new JRDesignExpression(); printWhenExpression.SetValueClass(typeof(bool)); printWhenExpression.SetText(EXPRESSION_TRUE_WHEN_FIRST_PAGE); JRDesignTextField title = new JRDesignTextField(); JRDesignExpression exp = new JRDesignExpression(); if (GetReport().IsTitleIsJrExpression()) { exp.SetText(GetReport().GetTitle()); } else { exp.SetT
protected bool IsArrayJsonStenoEvent(Marker marker) { return marker != null && marker.Contains(StenoMarker.ARRAY_JSON_MARKER); }
protected void AddRequestHeaders(HttpRequest httpRequest, Dictionary<string, List<object>> attributes) { foreach (var headerAttributeEntry in headerAttributeMapping) { var headerName = headerAttributeEntry.Key; var value = httpRequest.Headers[headerName]; if (value != null) { foreach (var attributeName in headerAttributeEntry.Value) { attributes[attributeName] = headersToIgnoreSemicolons.Contains(headerName) ? List(value) : SplitOnSemiColonHandlingBackslashEscaping(value); } } } }
public static lbvserver Get(nitro_service service, string name) { lbvserver obj = new lbvserver(); obj.Set_name(name); lbvserver response = (lbvserver)obj.Get_resource(service); return response; }
private static AlluxioFuseOptions ParseOptions(string[] args, AlluxioConfiguration alluxioConf) { var opts = new Options(); var mntPoint = Option.Builder("m") .HasArg() .Required(true) .LongOpt("mount-point") .Desc("Desired local mount point for alluxio-fuse.") .Build(); var alluxioRoot = Option.Builder("r") .HasArg() .Required(true) .LongOpt("alluxio-root") .Desc("Path within alluxio that will be used as the root of the FUSE mount (e.g., /users/foo; defaults to /)") .Build(); var help = Option.Builder("h") .Required(false) .Desc("Print this help") .Build(); var fuseOption = Option.Builder("o") .ValueSeparator(',') .Required(false) .HasArgs() .Desc("FUSE mount options") .Build(); opts.AddOption(mntPoint); opts.AddOption(alluxioRoot); opts.AddOption(help); opts.AddOption(fuseOption); var parser = new DefaultParser();
public Dictionary<object, object> GetPoolConfiguration() { return ConfigurationConverter.GetMap(configuration.Subset(typeof(GenericObjectPoolConfig).FullName)); }
public SimplePath[] Interconnect(KamNode[] sources) { if (sources == null || sources.Length < 2) { throw new InvalidArgument("Source kam nodes cannot be null and must contain at least two source nodes."); } // build out target set, check that each node is in the KAM var targetSet = new HashSet<KamNode>(sources.Length); foreach (var source in sources) { if (!kam.Contains(source)) { throw new InvalidArgument("Source does not exist in KAM."); } targetSet.Add(source); } var pathsFound = new List<SimplePath>(); foreach (var source in sources) { // remove source from target before search to prevent searching the same // paths twice in the bidirectional search targetSet.Remove(source); pathsFound.AddRange(RunDepthFirstSearch(kam, source, targetSet)); } return pathsFound.ToArray(); }
public List<I_CmsSimpleContextMenuEntry<HashSet<string>>> GetMenuEntries() { if (m_menuEntries == null) { m_menuEntries = new List<I_CmsSimpleContextMenuEntry<HashSet<string>>> { new EntryResources(), new EntryDelete() }; } return m_menuEntries; }
public LineString ToLineString(List<LatLng> latLngs, bool hasZ, bool hasM) { LineString lineString = new LineString(hasZ, hasM); PopulateLineString(lineString, latLngs); return lineString; }
public TransactionInfo QueryTransactionByID(Peer peer, string txID) { return QueryTransactionByID(new List<Peer> { peer }, txID, client.GetUserContext()); }
public string Get(string key) { if (properties.ContainsKey(key)) { return properties[key]; } else { return GetConfigurationValue(key); } }
public static Func<double, long> DoubleToLongFunction(CheckedDoubleToLongFunction function, Action<Exception> handler) { return t => { try { return function.ApplyAsLong(t); } catch (Exception e) { handler(e); throw new InvalidOperationException("Exception handler must throw a RuntimeException", e); } }; }
public static Searcher Get(string variant) { if (!instances.TryGetValue(variant, out var searcher)) { throw new InvalidOperationException(Errors.SEARCHER_GET_BEFORE_CREATE); } return searcher; }
public override IList<IfcTimePeriod> GetTimePeriods() { return (IList<IfcTimePeriod>)eGet(Ifc4Package.Literals.IFC_RECURRENCE_PATTERN__TIME_PERIODS, true); }
protected void ThreadStart() { // Has the background thread already been started? if (thread != null) { return; } // Start the background thread threadDone = false; thread = new Thread(new ThreadStart(this.RunMethod)); thread.IsBackground = true; thread.Start(); }
public AnalyzeEntitySentimentResponse AnalyzeEntitySentiment(Document document, EncodingType encodingType) { var request = new AnalyzeEntitySentimentRequest { Document = document, EncodingType = encodingType }; return AnalyzeEntitySentiment(request); }
[Service(Group = "User", Description = "Updates a single User matches with the given id.")] [HttpPatch] [UnitOfWork] [Route("{id}")] public User Merge([RobeAuth] Credentials credentials, string id, User model) { if (!id.Equals(model.Oid)) throw new HttpResponseException(HttpStatusCode.PreconditionFailed); User dest = userDao.FindById(id); if (dest == null) { throw new HttpResponseException(HttpStatusCode.NotFound); } Fields.MergeRight(model, dest); return userDao.Update(dest); }
public override IPAddress GetLocalAddress() { IPAddress address = null; if (udpNetworkLayer != null) { address = udpNetworkLayer.GetDatagramSocket().GetLocalAddress(); if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) { if (address == null) { Tr.Debug(tc, "GetLocalAddress == null"); } } } else { if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) { Tr.Debug(tc, "GetLocalAddress; udpNetworkLayer == null"); } } return address; }
protected string EncodeCookie(SerializableHttpCookie cookie) { if (cookie == null) return null; using (var os = new MemoryStream()) { try { using (var outputStream = new BinaryFormatter()) { outputStream.Serialize(os, cookie); } } catch (IOException e) { Util.Log("IOException in EncodeCookie", e); return null; } return ByteArrayToHexString(os.ToArray()); } }
public string GetMenuName(HttpRequest request, string overrideName) { if (!string.IsNullOrEmpty(overrideName)) { return overrideName; } string name = request.Path.Value.Replace(AdminTool.ROOTCONTEXT, ""); if (!string.IsNullOrEmpty(request.PathBase.Value)) { name = name.Replace(request.PathBase.Value, ""); } if (name.StartsWith("/")) { name = name.Substring(1); } return name; }
protected override long CallInternal() { return portletRenderer.DoServeResource(portletWindowId, request, response, new ResourcePortletOutputHandler(response)); }
public JobScheduleGetOptions WithIfUnmodifiedSince(DateTime? ifUnmodifiedSince) { if (ifUnmodifiedSince == null) { this.ifUnmodifiedSince = null; } else { this.ifUnmodifiedSince = new DateTimeRfc1123(ifUnmodifiedSince.Value); } return this; }
protected string MatchAxisTypeAndDimension(NetcdfDataset ds, AxisType type, Dimension outer, Dimension inner) { Variable var = CoordSysEvaluator.FindCoordByType(ds, type, new CoordSysEvaluator.Predicate((CoordinateAxis axis) => { return (axis.Rank == 2 && outer.Equals(axis.GetDimension(0)) && inner.Equals(axis.GetDimension(1))); })); if (var == null) return null; return var.ShortName; }
public IfcLampTypeEnum CreateIfcLampTypeEnumFromString(EDataType eDataType, string initialValue) { IfcLampTypeEnum result = IfcLampTypeEnum.Get(initialValue); if (result == null) { throw new ArgumentException($"The value '{initialValue}' is not a valid enumerator of '{eDataType.Name}'"); } return result; }
public void WithFollowings(bool followings) { if (followings) { AddQueryParameter(Constants.WITH_PARAM, Constants.WITH_FOLLOWINGS); } else { RemoveQueryParameter(Constants.WITH_PARAM); } }
public override void SetMaxFieldSize(int max) { if (statement != null) { statement.SetMaxFieldSize(max); } else { tag.SetMaxFieldSize(true); prop.SetMaxFieldSize(max); } }
protected void Process(HttpRequest request, HttpResponse response, string fileName) { // TODO put this html code in a template response.ContentType = "text/html"; response.Headers.Add("charset", "UTF-8"); response.StatusCode = 200; var buffer = new StringBuilder(); buffer.Append("<html><head><title>"); buffer.Append(request.HttpContext.Connection.RemoteIpAddress.ToString()); buffer.Append("</title><script type=\"text/javascript\">"); buffer.Append("function submitform() { document.myform.submit(); } </script>"); buffer.Append("</head><body><H1>View Logs on - "); buffer.Append(request.HttpContext.Connection.RemoteIpAddress.ToString()); buffer.Append("</H1>"); if (IsLogsDirectoryEmpty()) { buffer.Append("<br>No Logs available.</br></body></html>"); DumpStringToStream(buffer.ToString(), response.Body); return; } buffer.Append(AppendMoreLogsLink(fileName, request.Path)); buffer.Append(RenderLogFileContents(fileName)); buffer.Append("</body></html>"); DumpStringToStream(buffer.ToString(), response.Body); }
private string ParseAttributeValue(string watch) { Mark start = reader.Mark(); Mark stop = reader.SkipUntilIgnoreEsc(watch); if (stop == null) { err.JspError(start, "jsp.error.attribute.unterminated", watch); } string ret = ParseQuoted(reader.GetText(start, stop)); if (watch.Length == 1) // quote return ret; // putback delimiter '<%=' and '%>', since they are needed if the // attribute does not allow RTexpression. return "<%=" + ret + "%>"; }
private void AuditStatusWhenQualityGateDetailsFound(Dictionary<string, object> condition, CodeQualityAuditResponse codeQualityAuditResponse) { if (string.Equals(condition["metric"].ToString(), CodeQualityMetricType.BLOCKER_VIOLATIONS.GetType(), StringComparison.OrdinalIgnoreCase)) { codeQualityAuditResponse.AddAuditStatus(CodeQualityAuditStatus.CODE_QUALITY_THRESHOLD_BLOCKER_FOUND); if (!string.Equals(condition["level"].ToString(), "ERROR", StringComparison.OrdinalIgnoreCase)) { codeQualityAuditResponse.AddAuditStatus(CodeQualityAuditStatus.CODE_QUALITY_THRESHOLD_BLOCKER_MET); } } else if (string.Equals(condition["metric"].ToString(), CodeQualityMetricType.CRITICAL_VIOLATIONS.GetType(), StringComparison.OrdinalIgnoreCase)) { codeQualityAuditResponse.AddAuditStatus(CodeQualityAuditStatus.CODE_QUALITY_THRESHOLD_CRITICAL_FOUND); if (!string.Equals(condition["level"].ToString(), "ERROR", StringComparison.OrdinalIgnoreCase)) { codeQualityAuditResponse.AddAuditStatus(CodeQualityAuditStatus.CODE_QUALITY_THRESHOLD_CRITICAL_MET); } } else if (string.Equals(condition["metric"].ToString(), CodeQualityMetricType.UNIT_TEST.GetType
public void Callback(Callback callback) { Action runnable = () => { try { callback.Result(queryId, AwaitResult()); } catch (Exception e) { callback.Error(queryId, e); } }; EXECUTOR_SERVICE.Submit(runnable); }
public IList<CommerceCurrency> GetCommerceCurrenciesByUuidAndCompanyId(string uuid, long companyId, int start, int end, IComparer<CommerceCurrency> orderByComparator) { return commerceCurrencyPersistence.FindByUuid_C(uuid, companyId, start, end, orderByComparator); }
public CacheConfigurationBuilder<K, V> WithLoaderWriter(Type loaderWriterClass, params object[] arguments) { if (loaderWriterClass == null) { throw new ArgumentNullException("loaderWriterClass", "Null loaderWriterClass"); } return AddOrReplaceConfiguration(new DefaultCacheLoaderWriterConfiguration(loaderWriterClass, arguments)); }
public void CacheResult(CommerceTaxFixedRateAddressRel commerceTaxFixedRateAddressRel) { entityCache.PutResult(CommerceTaxFixedRateAddressRelModelImpl.ENTITY_CACHE_ENABLED, typeof(CommerceTaxFixedRateAddressRelImpl), commerceTaxFixedRateAddressRel.GetPrimaryKey(), commerceTaxFixedRateAddressRel); commerceTaxFixedRateAddressRel.ResetOriginalValues(); }
public static DateTime GetLastNDay(DateTime d, int n, int unitType) { DateTime cal = d.AddDays(-n); // Assuming unitType is for days, additional conversion needed if other types return new DateTime(cal.Year, cal.Month, cal.Day, 0, 0, 0, 0); }
public DescribeSecretResult WithVersionIdsToStages(Dictionary<string, List<string>> versionIdsToStages) { SetVersionIdsToStages(versionIdsToStages); return this; }
public bool AssignRoleToUser(long id, List<long> roleIds) { CleanError(); PrepareToken(); var httpClient = new OneloginURLConnectionClient(); var oAuthClient = new OAuthClient(httpClient); var url = new URIBuilder(Settings.GetURL(Constants.ADD_ROLE_TO_USER_URL, id.ToString())); var bearerRequest = new OAuthBearerClientRequest(url.ToString()).BuildHeaderMessage(); var headers = GetAuthorizedHeader(); bearerRequest.SetHeaders(headers); var params = new Dictionary<string, object> { { "role_id_array", roleIds } }; var body = JSONUtils.BuildJSON(params); bearerRequest.SetBody(body); bool success = true; var oAuthResponse = oAuthClient.Resource(bearerRequest, OAuth.HttpMethod.PUT, typeof(OneloginOAuthJSONResourceResponse)); if (oAuthResponse.GetResponseCode() != 200) { success = false; Error = oAuthResponse.GetError(); ErrorDescription = oAuthResponse.GetErrorDescription(); ErrorAttribute = oAuthResponse.GetErrorAttribute(); } return success; }
public void PutCharLittleEndian(int index, char value) { if (BitConverter.IsLittleEndian) { PutChar(index, value); } else { PutChar(index, ReverseBytes(value)); } } private char ReverseBytes(char value) { byte[] bytes = BitConverter.GetBytes(value); Array.Reverse(bytes); return BitConverter.ToChar(bytes, 0); } private void PutChar(int index, char value) { // Implement the logic to put the char at the specified index in the buffer. }
public static byte[] Decode(Stream inStream) { try { return IOUtils.ToByteArray(DecodeToStream(inStream)); } catch (IOException e) { Console.WriteLine(e); return null; } }
[Beta] public Predicate<T> EquivalentTo(T target) { return new EquivalentToPredicate<T>(this, target); }
public static string GetPackageName(Elements elementUtils, Types typeUtils, ITypeSymbol type) { var tv = new SimpleTypeVisitor<INamedTypeSymbol, object> { VisitDeclared = (t, p) => t }; var dt = type.Accept(tv, null); if (dt != null) { var ev = new SimpleElementVisitor<ITypeSymbol, object> { VisitType = (e, p) => e }; var el = typeUtils.AsElement(dt).Accept(ev, null); if (el != null && el.TypeKind != TypeKind.Class) { return AptUtil.GetPackageName(elementUtils, el); } } return AptUtil.GetPackageNameSub(type); }
private static bool ValidateTermWithStartValue(BytesRef term, ComponentTermVector termVector) { if (termVector.StartValue == null) { return true; } else if (termVector.SubComponentFunction.SortType.Equals(CodecUtil.SORT_TERM)) { if (term.Length > termVector.StartValue.Length) { byte[] zeroBytes = new BytesRef("\u0000").Bytes; int n = (int)Math.Ceiling((double)(term.Length - termVector.StartValue.Length) / zeroBytes.Length); byte[] newBytes = new byte[termVector.StartValue.Length + n * zeroBytes.Length]; Array.Copy(termVector.StartValue.Bytes, 0, newBytes, 0, termVector.StartValue.Length); for (int i = 0; i < n; i++) { Array.Copy(zeroBytes, 0, newBytes, termVector.StartValue.Length + i * zeroBytes.Length, zeroBytes.Length); } termVector.StartValue = new BytesRef(newBytes); } if ((termVector.SubComponentFunction.SortDirection.Equals(CodecUtil.SORT_ASC) && (termVector.StartValue.CompareTo(term)
public override string GetConnectionInfo() { using (var connection = ds.GetConnection()) { string info = string.Format("Connected to database: {0} using driver: {1} as user: {2}", connection.GetMetaData().GetDatabaseProductName(), connection.GetMetaData().GetDriverName(), connection.GetMetaData().GetUserName()); return info; } }
public static FormModelFragment GetFormModelFragment(FragmentActivity enclosing) { // find the retained fragment on activity restarts FragmentManager fm = enclosing.SupportFragmentManager; FormModelFragment formModelFragment = fm.FindFragmentByTag(FormModelFragment.TAG) as FormModelFragment; if (formModelFragment == null) { // create the retained fragment and data the first time formModelFragment = new FormModelFragment(); fm.BeginTransaction().Add(formModelFragment, FormModelFragment.TAG).Commit(); formModelFragment.SetModel(new MapFormModel()); } return formModelFragment; }
public static bool IsConsolePrintable(int cp) { return (cp >= 0x20 && cp < 0x7F) || // main printable ascii char.IsDefined((char)cp) && !((cp < 0x0020 && cp != '\n') || (0x007F <= cp && cp < 0x00A0) || char.IsControl((char)cp) || (0x07e8 <= cp && cp <= 0x07f3) || (0x07f6 <= cp && cp <= 0x0900) || cp == 0x0ac6 || (0x0bfc <= cp && cp <= 0x0d01) || cp == 0x0f8c || cp == 0x10cd || cp == 0x10fd || cp == 0x10fe || cp == 0x10ff || (0x1a20 <= cp && cp <= 0x1cff) || cp == 0x1680 || (0x1701 <= cp && cp <= 0x1711)
public FileModel GetChildFile(ArchiveModel archiveModel, string filePath) { filePath = FilenameUtils.SeparatorsToUnix(filePath); string[] pathElements = filePath.Split(new[] { '/' }, StringSplitOptions.RemoveEmptyEntries); FileModel currentFileModel = archiveModel; foreach (var pathElement in pathElements) { currentFileModel = FindFileModel(currentFileModel, pathElement); if (currentFileModel == null) { break; } } return currentFileModel; }
public static void Startup(string bootstrapPath, string bootstrapFile) { // evaluate bootstrap path DirectoryInfo bsPath; if (bootstrapPath != null) { bsPath = new DirectoryInfo(bootstrapPath); } else { string envPath = Environment.GetEnvironmentVariable(StartupDatabaseConnection.ENV_PATH); if (envPath != null) { bsPath = new DirectoryInfo(envPath); } else { bsPath = new DirectoryInfo(Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), StartupDatabaseConnection.DEFAULT_BOOTSTRAP_PATH)); } } // evaluate bootstrap file string bsFile; FileInfo bootstrap = null; if (bootstrapFile != null) { bsFile = bootstrapFile; } else { string envFile = Environment.GetEnvironmentVariable(StartupDatabaseConnection.ENV_FILE); if (envFile != null) { bsFile = envFile; } else { bsFile = StartupDatabaseConnection.DEFAULT_BOOTSTRAP_FILE; } } bootstrap = new FileInfo(bsFile); if (bootstrap == null || !bootstrap.Exists) {
private void InitializeBeamSearchChart(List<object> terminals, BeamSearchCfgParseChart chart, long[] treeEncodingOffsets) { Variable terminalListValue = terminalVar.GetOnlyVariable(); // Adding this to a tree key indicates that the tree is a terminal. long terminalSignal = (long)chart.ChartSize() * (treeEncodingOffsets[3] + treeEncodingOffsets[2]); for (int i = 0; i < terminals.Count; i++) { for (int j = i; j < terminals.Count; j++) { if (terminalListValue.CanTakeValue(terminals.GetRange(i, j - i + 1))) { Assignment assignment = terminalVar.OutcomeArrayToAssignment(terminals.GetRange(i, j - i + 1)); var iterator = terminalDistribution.OutcomePrefixIterator(assignment); while (iterator.MoveNext()) { Outcome bestOutcome = iterator.Current; int root = nonterminalVariableType.GetValueIndex(bestOutcome.GetAssignment().GetValue(parentVar.GetOnlyVariableNum())); int ruleType = ruleVariableType.GetValueIndex(bestOutcome.GetAssignment().GetValue(ruleTypeVar.GetOnlyVariableNum())); long partialKeyNu
public void Marshall(AffectedEntity affectedEntity, ProtocolMarshaller protocolMarshaller) { if (affectedEntity == null) { throw new SdkClientException("Invalid argument passed to marshall(...)"); } try { protocolMarshaller.Marshall(affectedEntity.EntityArn, ENTITYARN_BINDING); protocolMarshaller.Marshall(affectedEntity.EventArn, EVENTARN_BINDING); protocolMarshaller.Marshall(affectedEntity.EntityValue, ENTITYVALUE_BINDING); protocolMarshaller.Marshall(affectedEntity.EntityUrl, ENTITYURL_BINDING); protocolMarshaller.Marshall(affectedEntity.AwsAccountId, AWSACCOUNTID_BINDING); protocolMarshaller.Marshall(affectedEntity.LastUpdatedTime, LASTUPDATEDTIME_BINDING); protocolMarshaller.Marshall(affectedEntity.StatusCode, STATUSCODE_BINDING); protocolMarshaller.Marshall(affectedEntity.Tags, TAGS_BINDING); } catch (Exception e) { throw new SdkClientException("Unable to marshall request to JSON: " + e.Message, e); } }
public void SetPermission(string path, FsPermission permission) { dfs.SetPermission(GetPathName(path), permission); }
public FieldList SetHandle(object bookmark, int handleType) { if (DoSetHandle(bookmark, handleType)) return GetRecord(); else return null; }
public override string GetParameter(string name) { string value = wrapped.GetParameter(name); if (value == null) { string[] multipleValue = parameters[name]; if (multipleValue != null && multipleValue.Length > 0) { value = multipleValue[0]; } } return value; }
public void SetPins(Dictionary<string, string> pins) { if (pins == null) throw new ArgumentNullException("pins cannot be null"); this.pins = pins; UpdateHpkpHeaderValue(); }
public GetOpenIDConnectProviderResult WithClientIDList(params string[] clientIDList) { if (this.clientIDList == null) { this.clientIDList = new List<string>(clientIDList.Length); } foreach (var ele in clientIDList) { this.clientIDList.Add(ele); } return this; }
public void RemoveConnectionPool(Uri url) { var req = new RequestBuilder(); req.Host = url.Host; req.Port = url.Port < 0 ? url.GetDefaultPort() : url.Port; RemovePool(req); }
public static List<PathOperation> ToPathOperationsList(string path, Path pathModel) { List<PathOperation> pathOperations = new List<PathOperation>(); foreach (var kvp in GetOperationMap(pathModel)) { var httpMethod = kvp.Key; var operation = kvp.Value; pathOperations.Add(new PathOperation(httpMethod, path, operation)); } return pathOperations; }
public static IEnumerable<R> Zip<A, B, C, R>(A[] a, B[] b, C[] c, Func<A, B, C, R> zipFunction) { return Zip(EnumeratorEx.Of(a), EnumeratorEx.Of(b), EnumeratorEx.Of(c), zipFunction); }
private static Stream FindFileInClasspath(string fileName) { Stream stream = null; try { var assembly = System.Reflection.Assembly.GetExecutingAssembly(); var resourceName = assembly.GetManifestResourceNames().FirstOrDefault(r => r.EndsWith(fileName)); if (resourceName != null) { stream = assembly.GetManifestResourceStream(resourceName); } return stream; } catch (Exception ex) { Console.Error.WriteLine($"Error while reading file '{fileName}' from classpath: {ex}"); return null; } }
protected void CreateContentsTable(CmsSetupDb dbCon) { Console.WriteLine(new Exception().StackTrace.Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries)[0].Trim()); if (!dbCon.HasTableOrColumn(TABLE_CMS_CONTENTS, null)) { string query = ReadQuery(QUERY_CREATE_CMS_CONTENTS_TABLE); dbCon.UpdateSqlStatement(query, null, null); } else { Console.WriteLine($"table {TABLE_CMS_CONTENTS} already exists"); } }
protected DirectoryInfo GetGeneratedResourcesDirectory() { if (generatedResourcesFolder == null) { string generatedResourcesFolderAbsolutePath = Path.Combine(this.project.Build.Directory, GetGeneratedResourcesDirectoryPath()); generatedResourcesFolder = new DirectoryInfo(generatedResourcesFolderAbsolutePath); if (!generatedResourcesFolder.Exists) { generatedResourcesFolder.Create(); } } return generatedResourcesFolder; }
public static bool HaveBackend() { foreach (DeepWaterParameters.Backend b in Enum.GetValues(typeof(DeepWaterParameters.Backend))) { if (DeepwaterMojoModel.CreateDeepWaterBackend(b.ToString()) != null) return true; } return false; }
public long CurrentTimeInMicros() { if (!IsRunning()) { Moment m = CurrentTime(); return (m.GetPosixTime() * MIO + m.GetNanosecond() / 1000); } long micros = SystemClock.MONOTONIC.CurrentTimeInMicros(); return (micros + GetLastOffset(micros)); }
static string GetPathInfo(RequestLog requestLog) { string uri = requestLog.Path(); if (string.IsNullOrWhiteSpace(uri)) return "/"; return System.Text.RegularExpressions.Regex.Replace(uri, @"//+", "/") .TrimEnd('/'); }
public static StaticValue<T> CreateStaticValue<T>(Func<T> initializer) { if (multiplex) { return new Multiplexed<T>(initializer); } try { return new FinalSingleton<T>(initializer == null ? default : initializer()); } catch (Exception e) { throw new InvalidOperationException(e.Message, e); } }
protected EventDispatcher<E> GetEventDispatcherRequired<E>(Type eventType) { return GetEventDispatcher(eventType, true); }
public static void BoundImage<T>(T input, double min, double max) where T : ImageBase<T> { if (input is ImageGray) { if (input.GetType() == typeof(GrayU8)) { PixelMath.BoundImage((GrayU8)(object)input, (int)min, (int)max); } else if (input.GetType() == typeof(GrayS8)) { PixelMath.BoundImage((GrayS8)(object)input, (int)min, (int)max); } else if (input.GetType() == typeof(GrayU16)) { PixelMath.BoundImage((GrayU16)(object)input, (int)min, (int)max); } else if (input.GetType() == typeof(GrayS16)) { PixelMath.BoundImage((GrayS16)(object)input, (int)min, (int)max); } else if (input.GetType() == typeof(GrayS32)) { PixelMath.BoundImage((GrayS32)(object)input, (int)min, (int)max);
private void CloseRAF() { if (raf != null) { try { raf.Close(); } catch (IOException ex) { throw new UnexpectedFileIOException(this, "CloseRAF", ex); } finally { raf = null; } } }
private static void SetupBindInfoPackage() { string nsuri = "http://www.hibernate.org/xsd/orm/hbm"; string packageInfoClassName = "org.hibernate.boot.jaxb.hbm.spi.package-info"; try { var packageInfoClass = Type.GetType(packageInfoClassName); var xmlSchema = packageInfoClass?.GetCustomAttributes(typeof(XmlSchema), false).FirstOrDefault() as XmlSchema; if (xmlSchema == null) { LOG.Warn(string.Format("Class [{0}] is missing the [{1}] annotation. Processing bindings will probably fail.", packageInfoClassName, typeof(XmlSchema).FullName)); } else { string namespace = xmlSchema.Namespace; if (nsuri.Equals(namespace)) { LOG.Warn(string.Format("Namespace of the [{0}] annotation does not match [{1}]. Processing bindings will probably fail.", typeof(XmlSchema).FullName, nsuri)); } } } catch (TypeLoadException) { LOG.Warn(string.Format("Class [{0}] could not be found. Processing bindings will probably fail.", packageInfoClassN
public ExternalID GetTVExternalIDs(int tvID, string language) { return tmdbTv.GetTVExternalIDs(tvID, language); }
public EventBus Emit(string eventName, params object[] args) { return _EmitWithOnceBus(EventContext(eventName, args)); }
public bool Check() { // we need to create a copy of the file, because the container file // might be at the end of the stream. string fileCopyPath = Path.GetTempFileName(); File.Copy(inputFilePath, fileCopyPath); List<string> rootfiles; using (var zipStream = new ZipInputStream(File.OpenRead(fileCopyPath))) { rootfiles = GetRootfiles(zipStream); } if (rootfiles.Count > 0) { using (var zipStream = new ZipInputStream(File.OpenRead(fileCopyPath))) { ZipEntry entry; while ((entry = zipStream.GetNextEntry()) != null) { string entryName = entry.Name; if (rootfiles.Contains(entryName)) { CheckRootfile(zipStream, entry); } } } } else { throw new ArgumentException("No rootfile package found in given EPUB file."); } // try to delete the file immediately or on application exit bool deleted = false; try { deleted = File.Delete(fileCopyPath); } catch (UnauthorizedAccessException) {
public Hessian2Output CreateHessian2Output(Stream os) { Hessian2Output output = CreateHessian2Output(); output.Init(os); return output; }
private static void SetPermissions(DataFormatDefinition dformatDefinition) { // Use reflection to get the method SetPermissions. This is done to allow compatibility between fuse 6.3 and fuse 6.2.1 // The xstream library differs on version between the 6.2.1 and 6.3 version of fuse. var setPermissionsMethod = typeof(DataFormatDefinition).GetMethod("SetPermissions", new[] { typeof(string) }); if (setPermissionsMethod != null) { try { setPermissionsMethod.Invoke(dformatDefinition, new object[] { "+*" }); } catch (Exception) { // Handle exceptions if necessary } } }
public static Func<T, U, int> ToIntBiFunction<T, U>(CheckedToIntBiFunction<T, U> function) { return Unchecked.ToIntBiFunction(function, Unchecked.RETHROW_ALL); }
public static Latency CopyOf(AbstractLatency instance) { if (instance is Latency) { return (Latency)instance; } return Latency.Builder() .From(instance) .Build(); }
public WorkspaceStorageConnection OpenConnection(bool readOnly) { try { if (this.containerConfig.dbStructureType.IsMultiDatabase()) { return new PostgreMultiDbJDBCConnection(GetJdbcConnection(readOnly), readOnly, containerConfig); } return new PostgreSingleDbJDBCConnection(GetJdbcConnection(readOnly), readOnly, containerConfig); } catch (SQLException e) { throw new RepositoryException(e); } }
[NotNull] [ObjectiveCName("getTypingWithUid:")] public ValueModel<bool> GetTyping(int uid) { return modules.GetTypingModule().GetTyping(uid).GetTyping(); }
public object Next() { _current1.Reset(); if (_last1.Key() == null) FindFirst(_dstack); else { FindNext(_dstack); if (_current1.Key() == null) _eof = true; } if (_current1.Key() != null) _last1.SetLocation(_current1); return _current1.Key(); }
public sealed class Ix<T> { public IxDistinctUntilChanged<T, K> DistinctUntilChanged<K>(Func<T, K> keySelector) { return new IxDistinctUntilChanged<T, K>(this, keySelector, EqualityHelper.Instance); } }
public override bool IsSynchronous() { if (CanBeSynchronous()) { if (CanBeAsynchronous()) { string attr = GetAttributeValue(PROP_SYNCHRONOUS_RESPONSE); return (attr != null && attr.Equals("true", StringComparison.OrdinalIgnoreCase)); } else { return true; } } else { return false; } }
public void Exit() { if (Exiting()) { logger.Debug("Another thread is shutting down"); return; } long start = DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond; var exitingSignal = GetSignal("exiting"); try { logger.Info(Banner($"Unloading the main component {this.mainComponent}")); FileUtils.Touch(exitingSignal); environment.Unload(this.mainComponent); logger.Info(Banner($"Unloaded the main component {this.mainComponent}")); } catch (Exception ex) { logger.Error(ex.Message, ex); } finally { FileUtils.DeleteQuietly(exitingSignal); new Thread(() => { logger.Info(Banner($"System stops took {FormatDurationHMS((DateTime.Now.Ticks / TimeSpan.TicksPerMillisecond) - start)}")); Environment.Exit(0); }).Start(); } }
protected async Task<IActionResult> OnAuthFailureAsync(DeadboltHandler deadboltHandler, string content, HttpRequest request) { LOGGER.LogInformation("Deadbolt: Access failure on [{RequestUri}]", request.Path); IActionResult result; try { result = await deadboltHandler.OnAuthFailureAsync(request, content); } catch (Exception e) { LOGGER.LogWarning("Deadbolt: Exception when invoking OnAuthFailure", e); result = StatusCode(StatusCodes.Status500InternalServerError); } return result; }
public ICollection<string> GetLoadBalancerGroups() { string requestUri = string.Format(LOAD_BALANCER_FORMAT, GetBaseUrl()); return GetCollection(requestUri, "load balancer groups", STRING_COLLECTION); }
public DeviceRegistry CreateDeviceRegistry(LocationName parent, DeviceRegistry deviceRegistry) { var request = new CreateDeviceRegistryRequest { Parent = parent?.ToString(), DeviceRegistry = deviceRegistry }; return CreateDeviceRegistry(request); }
public TreeNode<string> Expand(IDictionary<string, Tree<string, ?>> variables) { return Expand(variables, x => x); }
public static int LatitudeToTileY(double latitude, byte zoomLevel) { return PixelYToTileY(LatitudeToPixelY(latitude, zoomLevel, DUMMY_TILE_SIZE), zoomLevel, DUMMY_TILE_SIZE); }
public synchronized string SimonToString() { return $"Simon Counter: counter={counter}, max={SimonUtils.PresentMinMaxCount(max)}, min={SimonUtils.PresentMinMaxCount(min)}{SimonToStringCommon()}"; }
public HttpSession GetSelectedSession() { int selectedRow = this.sessionsTable.SelectedIndex; if (selectedRow == -1) { // No row selected return null; } int rowIndex = sessionsTable.ConvertRowIndexToModel(selectedRow); return this.sessionsModel.GetHttpSessionAt(rowIndex); }
public string GetHost() { string host = GetAsNullableString("host"); host = host ?? GetAsNullableString("ip"); return host; }
using System.Collections.Generic; using System.Linq; public static class FieldHelper { public static IEnumerable<KeyValuePair<string, object>> FieldsAndGetters(object obj) { return FieldsAndGetters(obj, _ => true); } // Assuming FieldsAndGetters with a predicate exists private static IEnumerable<KeyValuePair<string, object>> FieldsAndGetters(object obj, Func<string, bool> predicate) { // Implementation goes here } }
private string GetName(CommandContext ctx, bool failInBatch) { var args = ctx.GetParsedCommandLine(); var name = this.name.GetValue(args, true); if (name == null) { throw new CommandFormatException($"{this.name} is missing value."); } if (!ctx.IsBatchMode() || failInBatch) { if (!Util.IsValidPath(ctx.GetModelControllerClient(), Util.DEPLOYMENT_OVERLAY, name)) { throw new CommandFormatException($"Deployment overlay {name} does not exist."); } } return name; }
void PatchGlobalScope(TypedScope globalScope, Node scriptRoot) { // Preconditions: This is supposed to be called only on (named) SCRIPT nodes // and a global typed scope should have been generated already. CheckState(scriptRoot.IsScript()); CheckNotNull(globalScope); CheckState(globalScope.IsGlobal()); string scriptName = NodeUtil.GetSourceName(scriptRoot); CheckNotNull(scriptName); Predicate<Node> inScript = n => scriptName.Equals(NodeUtil.GetSourceName(n)); escapedVarNames.RemoveAll(var => inScript(var.GetScopeRoot())); assignedVarNames.RemoveAll(var => inScript(var.GetScopeRoot())); functionsWithNonEmptyReturns.RemoveAll(inScript); new FirstOrderFunctionAnalyzer().Process(null, scriptRoot); // TODO(bashir): Variable declaration is not the only side effect of last // global scope generation but here we only wipe that part off. // Remove all variables that were previously declared in this scripts. // First find all vars to remove then remove them because of iterator. List<TypedVar> varsToRemove = new List<TypedVar>(); foreach (TypedVar oldVar in globalScope.GetVarItera
protected static bool LabelIsResolved(Label label) { if (label == null) throw new ArgumentNullException(nameof(label)); try { label.GetOffset(); } catch (InvalidOperationException) { return false; } return true; }
public SslStream BuildServerSslStream(SslStream sslStream, bool needClientAuth, bool wantClientAuth) { sslStream.AuthenticateAsServer(serverCertificate, needClientAuth, wantClientAuth, false); return AddCommonConfigs(sslStream); }
public Resource AddPath(string path) { if (path == null) return null; path = Uri.CanonicalPath(path); return NewResource(Uri.AddPaths(_url.ToString(), path)); }
[HttpGet("builds/{buildId}/links")] public Form GetBuildLinkForm(Guid buildId) { // Gets the form values var items = structureService.GetBuildLinksFrom(structureService.GetBuild(buildId)) .Select(build => new BuildLinkFormItem(build.Project.Name, build.Name)) .ToList(); // Creates the form return Form.Create() .With( MultiForm.Of( "links", Form.Create() .With(Text.Of("project").Label("Project name")) .With(Text.Of("build").Label("Build name")) ) .Label("Links") .Value(items) ); }
public override void DispatchEvent(IEvent e) { if (e is ISharedObjectMessage msg || e.GetType() == IEvent.Type.SHARED_OBJECT) { if (msg.HasSource()) { BeginUpdate(msg.GetSource()); } else { BeginUpdate(); } try { foreach (ISharedObjectEvent eventItem in msg.GetEvents()) { string key = eventItem.GetKey(); switch (eventItem.GetType()) { case ISharedObjectEvent.Type.SERVER_CONNECT: if (!IsConnectionAllowed()) { so.ReturnError(SO_NO_READ_ACCESS); } else if (msg.HasSource()) { IEventListener source = msg.GetSource(); if (source is BaseConnection baseConnection) { baseConnection.RegisterBasicScope(this); } else { AddEventListener(source); } } break; case ISharedObjectEvent.Type.SERVER_DISCONNECT: if (msg.HasSource()) { IEventListener source = msg.GetSource(); if (source is BaseConnection baseConnection) { baseConnection.UnregisterBasicScope(this); } else
private void ReadToTmp(int length, bool expectEnd) { tmpBuffer.Clear(); tmpBuffer.SetLength(length); int read = Read(tmpBuffer); if (read == -1 && expectEnd) { throw new NoSuchElementException(); } if (read != length) { throw new CorruptDataException($"Premature end of file was expecting at least: {length} but found only: {read}"); } offset += read; tmpBuffer.Flip(); }
protected HashSet<CacheEntryTag> GetTags(Element element) { object key = element.ObjectKey; if (key is TaggedCacheEntry taggedKey) { return taggedKey.GetTags(); } object value = element.ObjectValue; if (value is TaggedCacheEntry taggedValue) { return taggedValue.GetTags(); } return null; }
[Obsolete] public static string FormatProductSetName(string project, string location, string productSet) { return PRODUCT_SET_PATH_TEMPLATE.Instantiate( "project", project, "location", location, "product_set", productSet); }
public IEnumerable<T> FindAll() { return InTransaction(() => { var cq = entityManager.GetCriteriaBuilder().CreateQuery<T>(); var pet = cq.From(entity); cq.Select(pet); return entityManager.CreateQuery(cq).GetResultList(); }); }
private static string PrivateBase64Decoder(string decode, int flags) { if (flags == -1) { flags = Base64Options.Default; // Assuming Base64Options.Default is defined similarly to Base64.DEFAULT } byte[] data1 = Convert.FromBase64String(decode); string decodedBase64 = null; try { decodedBase64 = Encoding.UTF8.GetString(data1); } catch (DecoderFallbackException e) { Console.WriteLine(e); } return decodedBase64; }
public void SendNotification(Notification notification) { var timer = this.notificationTimer.Time(); if (this.notificationTargets.Any()) { foreach (var entry in this.notificationTargets) { try { entry.Value(notification); } catch (Exception exception) { LOG.Warn("RuntimeException when running notification target. Skipping.", exception); } } } if (GetParent().HasValue) { GetParent().Value.SendNotification(notification); } timer.Stop(); }
using System; using System.Collections; using System.Reflection; using System.Text.RegularExpressions; public static class PropertySetter { private static readonly Regex ARRAY_INDEX = new Regex(@"\[(\w+)\]"); public static void SetProperty(object obj, string name, string text) { try { int length = name.LastIndexOf('.'); if (length > 0) { obj = GetProperty(obj, name.Substring(0, length)); name = name.Substring(length + 1); } length = name.Length; Match matcher = ARRAY_INDEX.Match(name); while (matcher.Success) { name = matcher.Groups[1].Value; matcher = ARRAY_INDEX.Match(name); } FieldInfo field = GetKnownField(obj.GetType(), name); if (name.Length != length) { int index = int.Parse(matcher.Groups[2].Value); obj = GetProperty(obj, matcher.Groups[1].Value); if (obj.GetType().IsArray) { Array.SetValue(obj, CreateValue(obj.GetType().GetElementType(), field.GetCustomAttribute<TypeInfoAttribute>()).Invoke(text), index); } el
public void Read(Connection conn, Readline readline) { // Just call readline and get a callback when line is openBlocking var prompt = new Prompt(new TerminalString("[aesh@rules]$ ", new TerminalColor(Color.Green, Color.Default, Color.Intensity.Bright))); // Suspend reader asap since we're creating commands in a new thread // This is not needed when running single threaded, e.g., as examples.Example readline.ReadLine(conn, prompt, line => { // We got eof or quit if (line == null) { conn.Close(); return; } // Console.WriteLine("got: " + line); var matcher = splitter.Match(line); if (matcher.Success) { var cmd = matcher.Groups[0].Value; // Gather args var args = new List<string>(); while (matcher.Success) { args.Add(matcher.Groups[0].Value); matcher = matcher.NextMatch(); } try { new Task(conn, readline, (Command)Enum.Parse(typeof(Command), cmd), args).Start(); return; } catch (ArgumentException) { conn.Write(l
public void PopulateArtifactDetails(SoftwareModule softwareModule) { if (softwareModule == null) { PopulateArtifactDetails(null, null); } else { PopulateArtifactDetails(softwareModule.Id, HawkbitCommonUtil.GetFormattedNameVersion(softwareModule.Name, softwareModule.Version)); } }
private bool IsTypedTimeFullyLegal() { if (mIs24HourMode) { // For 24-hour mode, the time is legal if the hours and minutes are each legal. Note: // getEnteredTime() will ONLY call IsTypedTimeFullyLegal() when NOT in 24-hour mode. bool[] enteredZeros = { false, false, false }; int[] values = GetEnteredTime(enteredZeros); return (values[0] >= 0 && values[1] >= 0 && values[1] < 60 && values[2] >= 0 && values[2] < 60); } else { // For AM/PM mode, the time is legal if it contains an AM or PM, as those can only be // legally added at specific times based on the tree's algorithm. return (mTypedTimes.Contains(GetAmOrPmKeyCode(AM)) || mTypedTimes.Contains(GetAmOrPmKeyCode(PM))); } }
void WriteEntry(int position, int offset, int value) { if (offset >= slotsize) throw new IndexOutOfRangeException("Offset bigger than slot"); position *= slotsize; int chunkpos = position >> lowbits; int slotpos = position & lowmask; int[] chunk = chunks[chunkpos]; chunk[slotpos + offset] = value; // ATOMIC! }
public static void Divide(DMatrix2x2 a, double alpha) { a.a11 /= alpha; a.a12 /= alpha; a.a21 /= alpha; a.a22 /= alpha; }
public override void Dispose() { base.Dispose(); if (fields != null) { foreach (FieldEditor pe in fields) { pe.SetPage(null); pe.SetPropertyChangeListener(null); pe.SetPreferenceStore(null); } } }
public void SetDoctype(string doctypeSystem, string doctypePublic) { SetOutputProperty(OutputKeys.DOCTYPE_SYSTEM, doctypeSystem); SetOutputProperty(OutputKeys.DOCTYPE_PUBLIC, doctypePublic); }
public void WriteChar(int pChar) { out.Write((byte)(pChar & 0xFF)); out.Write((byte)((pChar >> 8) & 0xFF)); bytesWritten += 2; }
private KeyStoreFactoryBean KeyStoreFromSystemProperties(string property) { if (string.IsNullOrEmpty(Environment.GetEnvironmentVariable(property))) return null; KeyStoreFactoryBean keyStore = new KeyStoreFactoryBean(); keyStore.SetLocation(LocationFromSystemProperty(property)); keyStore.SetProvider(Environment.GetEnvironmentVariable(property + "Provider")); keyStore.SetPassword(Environment.GetEnvironmentVariable(property + "Password")); keyStore.SetType(Environment.GetEnvironmentVariable(property + "Type")); return keyStore; }
protected static int GetBytesPerPixel(BitmapFormat config) { if (config == BitmapFormat.ARGB8888) { return 4; } else if (config == BitmapFormat.RGB565) { return 2; } else if (config == BitmapFormat.ARGB4444) { return 2; } else if (config == BitmapFormat.ALPHA8) { return 1; } return 1; }
public static void MakeCopies ICollection<Copier> aFrom, ICollection<Copier> aTo) { if (aFrom == null || aTo == null) return; List<Copier> fromList = new List<Copier>(aFrom); List<Copier> toList = new List<Copier>(aTo); fromList.Sort(); toList.Sort(); Copier from = null; Copier to = null; IEnumerator<Copier> toIter = toList.GetEnumerator(); IEnumerator<Copier> fromIter = fromList.GetEnumerator(); while (fromIter.MoveNext() && toIter.MoveNext()) { from = fromIter.Current; to = toIter.Current; // copy data to.Copy(from); } }
public override void AddPixels(int[] pixels, int offset, int count) { for (int i = 0; i < count; i++) { InsertColor(pixels[i + offset]); if (colors > reduceColors) ReduceTree(reduceColors); } }
public static bool IsLessThan<C>(Range<C> range, C value) where C : IComparable { if (range == null) throw new ArgumentNullException(nameof(range)); if (value == null) throw new ArgumentNullException(nameof(value)); if (!range.HasUpperBound()) { return false; } if (range.UpperBoundType == BoundType.Open && range.UpperEndpoint.Equals(value)) { return true; } return range.UpperEndpoint.CompareTo(value) < 0; }
public List<MwDumpFile> MergeDumpLists(List<MwDumpFile> localDumps, List<MwDumpFile> onlineDumps) { List<MwDumpFile> result = new List<MwDumpFile>(localDumps); HashSet<string> localDateStamps = new HashSet<string>(); foreach (var dumpFile in localDumps) { localDateStamps.Add(dumpFile.GetDateStamp()); } foreach (var dumpFile in onlineDumps) { if (!localDateStamps.Contains(dumpFile.GetDateStamp())) { result.Add(dumpFile); } } result.Sort((x, y) => y.CompareTo(x)); // Assuming MwDumpFile implements IComparable. return result; }
public static string GetJenkinsVersion(HttpResponse response) { var hdrs = response.GetHeaders("X-Jenkins"); return hdrs.Length == 0 ? string.Empty : hdrs[0].Value; }
public void AcquireLock(object key, bool exclusive) { ReentrantReadWriteLock lockInstance = GetLock(key); if (exclusive) { lockInstance.WriteLock().Lock(); if (trace) log.Trace($"WL acquired for '{key}'"); } else { lockInstance.ReadLock().Lock(); if (trace) log.Trace($"RL acquired for '{key}'"); } }
public string Sign(string signatureBaseString) { if (privateKey == null) { throw new InvalidOperationException("Cannot sign the base string: no private key supplied."); } try { using (var rsa = privateKey as RSACryptoServiceProvider) { if (rsa == null) { throw new InvalidOperationException("Invalid private key."); } var signingBytes = System.Text.Encoding.UTF8.GetBytes(signatureBaseString); var signatureBytes = rsa.SignData(signingBytes, CryptoConfig.MapNameToOID("SHA1")); return Convert.ToBase64String(signatureBytes); } } catch (CryptographicException e) { throw new InvalidOperationException(e.Message); } catch (ArgumentException e) { throw new InvalidOperationException(e.Message); } catch (Exception e) { throw new InvalidOperationException(e.Message); } }
public Swarm Stop() { if (this.server == null) { throw new Exception(SwarmMessages.Messages.ContainerNotStarted("Stop()")); } this.server.Stop(); this.server = null; Module module = Module.GetBootModuleLoader().LoadModule(CONTAINER_MODULE_NAME); Type shutdownType = module.GetClassLoader().LoadClass("org.wildfly.swarm.container.runtime.WeldShutdownImpl"); WeldShutdown shutdown = (WeldShutdown)Activator.CreateInstance(shutdownType); shutdown.Shutdown(); return this; }
public static TaskManagerServicesConfiguration FromConfiguration( Configuration configuration, long maxJvmHeapMemory, IPAddress remoteAddress, bool localCommunication) { string[] tmpDirs = ConfigurationUtils.ParseTempDirectories(configuration); string[] localStateRootDir = ConfigurationUtils.ParseLocalStateDirectories(configuration); if (localStateRootDir.Length == 0) { // default to temp dirs. localStateRootDir = tmpDirs; } bool localRecoveryMode = configuration.GetBoolean(CheckpointingOptions.LOCAL_RECOVERY); NetworkEnvironmentConfiguration networkConfig = NetworkEnvironmentConfiguration.FromConfiguration( configuration, maxJvmHeapMemory, localCommunication, remoteAddress); QueryableStateConfiguration queryableStateConfig = QueryableStateConfiguration.FromConfiguration(configuration); bool preAllocateMemory = configuration.GetBoolean(TaskManagerOptions.MANAGED_MEMORY_PRE_ALLOCATE); long timerServiceShutdownTimeout = AkkaUtils.GetTimeout(configuration).TotalMilliseconds; RetryingRegistrationConfiguration retryingRegistrationConfiguration = RetryingRegistrationConfiguration.FromConfiguration(configuration); return new TaskManagerServicesConfiguration( remoteAddress, tmpDirs, localStateRootDir, localRecoveryMode, networkConfig, querya
public static Furnace GetInstance() { try { BootstrapClassLoader loader = new BootstrapClassLoader("bootpath"); return GetInstance(FurnaceFactory.ClassLoader, loader); } catch (Exception e) { throw new InvalidOperationException("An error occurred while getting the instance.", e); } }
public override bool IncludeUrl(string urlKey, string originalUrl) { if (UrlOperations.UrlToScheme(originalUrl) == null) { originalUrl = UrlOperations.HTTP_SCHEME + originalUrl; } var resultTester = new FastCaptureSearchResult(); resultTester.SetUrlKey(urlKey); resultTester.SetOriginalUrl(originalUrl); // null captureTimestamp signifies per-URL access-check. resultTester.SetCaptureTimestamp(null); return Include(resultTester, true); }
private static void TrimPadding(List<Element> elements) { for (int i = elements.Count - 1; i >= 0; i--) { Element element = elements[i]; if (element.CompareTo(null) == 0) { elements.RemoveAt(i); } else { break; } } }
public void Accept(IVisitor v) { v.VisitTypedInstruction(this); v.VisitStackProducer(this); v.VisitStackConsumer(this); v.VisitConversionInstruction(this); }
public static (CA accepted, CR refused) Partition<T, CA, CR>(IEnumerable<T> values, Func<T, bool> partitioner, Func<CA> acceptedCollectionProvider, Func<CR> refusedCollectionProvider) where CA : ICollection<T>, new() where CR : ICollection<T>, new() { if (values == null) { throw new ArgumentNullException(nameof(values), "cannot partition a null iterable"); } var accepted = acceptedCollectionProvider(); var refused = refusedCollectionProvider(); foreach (var value in values) { if (partitioner(value)) { accepted.Add(value); } else { refused.Add(value); } } return (accepted, refused); }
public void AddTag(string tagName, double value) { AddTag(tagName, value.ToString()); }
private void OnConnect(SqlConnection con, string[] sqlCommands) { bool trace = TraceComponent.IsAnyTracingEnabled(); TransactionManager tm = connectorSvc.GetTransactionManager(); Transaction suspendedTx = null; string currentSQL = null; Exception failure = null; try { UOWCoordinator coord = tm as UOWCurrent != null ? ((UOWCurrent)tm).GetUOWCoord() : null; if (coord != null && coord.IsGlobal()) suspendedTx = tm.Suspend(); using (SqlCommand cmd = con.CreateCommand()) { foreach (string sql in sqlCommands) { currentSQL = sql; if (trace && tc.IsDebugEnabled()) Tr.Debug(this, tc, "execute onConnect SQL", sql); cmd.CommandText = sql; cmd.ExecuteNonQuery(); } } } catch (Exception x) { failure = x; } if (suspendedTx != null) { try { tm.Resume(suspendedTx); } catch (Exception x) { failure = x; } } if (failure != null) { if (tr
public static bool IsEqualSeq(string first, string second, string delimiter) { if (!string.IsNullOrEmpty(first) && !string.IsNullOrEmpty(second)) { var firstWords = first.Split(new[] { delimiter }, StringSplitOptions.None); var firstSet = new HashSet<string>(firstWords); var secondWords = second.Split(new[] { delimiter }, StringSplitOptions.None); var secondSet = new HashSet<string>(secondWords); return firstSet.SetEquals(secondSet); } else { return string.IsNullOrEmpty(first) && string.IsNullOrEmpty(second); } }
public bool Verify(string base64Signature, string content, string timestamp) { return Verify(base64Signature, content, timestamp, keyName); }
public Attribute GetEntityAttribute(Type clazz, string fieldName) { if (entityTypes != null && entityTypes.ContainsKey(clazz)) { EntityType entityType = entityTypes[clazz]; return entityType.GetAttribute(fieldName); } throw new ArgumentException("No entity found: " + clazz); }
protected static void ValidateBool(string opName, SDVariable v) { if (v == null) return; if (v.DataType() != DataType.BOOL) throw new InvalidOperationException($"Cannot apply operation \"{opName}\" to variable \"{v.GetVarName()}\" with non-boolean point data type {v.DataType()}"); }
public void SetRoundaboutAngle(float roundaboutAngle) { if (ROUNDABOUT_MANEUVER_TYPES.Contains(maneuverType) && this.roundaboutAngle != roundaboutAngle) { UpdateRoundaboutAngle(roundaboutAngle); Invalidate(); } }
[Subscribe] public void OnZones(ZoneList.SuccessEvent event) { string durationEvent = GetString(Resource.String.list_duration, event.Duration); Toast.MakeText(this, durationEvent, ToastLength.Short).Show(); }
public static AjaxOperation RegisterContainer(string triggerId, string containerId, List<string> containerContentIds) { AjaxOperation operation = new AjaxOperation(triggerId, containerContentIds); operation.SetTargetContainerId(containerId); operation.SetAction(AjaxOperation.AjaxAction.ReplaceContent); RegisterAjaxOperation(operation); return operation; }
protected DCReference Reference(bool allowMember) { int pos = bp; int depth = 0; // scan to find the end of the signature, by looking for the first // whitespace not enclosed in () or <>, or the end of the tag while (bp < buflen) { switch (ch) { case '\n': case '\r': case '\f': newline = true; // fallthrough case ' ': case '\t': if (depth == 0) return null; // break loop break; case '(': case '<': newline = false; depth++; break; case ')': case '>': newline = false; depth--; break; case '}': if (bp == pos) return null; newline = false; return null; // break loop case '@': if (newline) return null; // break loop // fallthrough default: newline = false; break; } NextChar(); } if (depth != 0) throw new ParseException(
public override Properties GetProperties(string key) { string[] keyValuePairs = GetStringArray(key); Properties props = new Properties(); foreach (string pair in keyValuePairs) { int index = pair.IndexOf('='); if (index < 1) { throw new ArgumentException($"Malformed property: {pair}"); } props.Add(pair.Substring(0, index), pair.Substring(index + 1)); } return props; }
public XObject Operate(XObject right) { if (right.GetType() == XObject.CLASS_BOOLEAN) return right; else return right.Bool() ? XBoolean.S_TRUE : XBoolean.S_FALSE; }
public string GetRelativePathToBenchmarkReportDirectory(FileInfo file) { string benchmarkReportDirectoryPath = plannerBenchmarkResult.GetBenchmarkReportDirectory().FullName; string filePath = file.FullName; if (!filePath.StartsWith(benchmarkReportDirectoryPath)) { throw new ArgumentException($"The filePath (\"{filePath}\") does not start with the benchmarkReportDirectoryPath (\"{benchmarkReportDirectoryPath}\")."); } string relativePath = filePath.Substring(benchmarkReportDirectoryPath.Length); if (relativePath.StartsWith("\\")) { relativePath = relativePath.Substring(1); } return relativePath; }
public void Destroy() { try { ctx.Close(); } catch (System.ComponentModel.Win32Exception e) { LOG.Warn("Error when closing", e); } }
public static IccProfileCreator GetIccProfile(int identifier) { IccProfileCreator icc = null; try { if (instance == null) GetIccProfileCreators(); if (creatorsMap.ContainsKey(identifier)) icc = creatorsMap[identifier]; } catch (ReadIccConfigIOException) { } return icc; }
private HashSet<org.eclipse.aether.graph.DependencyNode> LevelTraverseVerboseTreeList( HashSet<org.eclipse.aether.graph.DependencyNode> nodeList, List<org.eclipse.aether.graph.DependencyNode> aggDepNodeList, org.eclipse.aether.graph.DependencyNode rootNode) { // First remove duplicates in nodeList aggDepNodeList.RemoveAll(nodeList.ToList()); aggDepNodeList.AddRange(nodeList); HashSet<org.eclipse.aether.graph.DependencyNode> nodeChildList = new HashSet<org.eclipse.aether.graph.DependencyNode>(); foreach (var node in nodeList) { if (NodeArtifactsMatch(rootNode, node)) { throw new MojoExecutionException("Circular dependency detected in project: " + GetMavenProject().ToString()); } if (node != null && node.GetChildren() != null) { foreach (var child in node.GetChildren()) { nodeChildList.Add(child); } } } return nodeChildList; }
public static ResourceSnippet CreateResourceSnippet(Stream inputStream, int startChar, int endChar, string charset) { return CreateResourceSnippet(GetContents(inputStream, charset), startChar, endChar); }
public static string Unescape(string text, XmlEscapeSymbols symbols) { if (text == null) { return null; } StringBuilder strBuilder = null; int offset = 0; int max = text.Length; int readOffset = offset; int referenceOffset = offset; for (int i = offset; i < max; i++) { char c = text[i]; // Check the need for an unescape operation at this point if (c != REFERENCE_PREFIX || (i + 1) >= max) { continue; } int codepoint = 0; if (c == REFERENCE_PREFIX) { char c1 = text[i + 1]; if (c1 == '\u0020' || // SPACE c1 == '\n' || // LF c1 == '\u0009' || // TAB c1 == '\u000C' || // FF c1 == '\u003C' || // LESS-THAN SIGN c1 == '\u0026') // AMPERSAND { // Not a character references.
public static string Encode(byte[] bytes) { string retorno = ""; if (bytes == null || bytes.Length == 0) { return retorno; } for (int i = 0; i < bytes.Length; i++) { byte valor = bytes[i]; int d1 = valor & 0xF; d1 += (d1 < 10) ? 48 : 55; int d2 = (valor & 0xF0) >> 4; d2 += (d2 < 10) ? 48 : 55; retorno += (char)d2 + (char)d1; } return retorno; }
private PorterDuffColorFilter UpdateTintFilter(PorterDuffColorFilter tintFilter, ColorStateList tint, PorterDuff.Mode tintMode) { if (tint == null || tintMode == null) { return null; } int color = tint.GetColorForState(GetState(), Color.Transparent); if (tintFilter == null) { return new PorterDuffColorFilter(color, tintMode); } try { var tClass = tintFilter.GetType(); var setColorMethod = tClass.GetMethod("SetColor", new Type[] { typeof(int) }); setColorMethod.Invoke(tintFilter, new object[] { color }); var setModeMethod = tClass.GetMethod("SetMode", new Type[] { typeof(PorterDuff.Mode) }); setModeMethod.Invoke(tintFilter, new object[] { tintMode }); return tintFilter; } catch (Exception) { return new PorterDuffColorFilter(color, tintMode); } }
public static ParameterizedN1qlQuery Parameterized(Statement statement, JsonArray positionalParams) { return new ParameterizedN1qlQuery(statement, positionalParams, null); }
public synchronized SlabAllocation AttachAndAllocate(SlabRef slab, PeekingIterator<int> eventSizes) { Attach(slab); return Allocate(eventSizes); }
public void AddPages(DialogPage[] pages) { for (int i = 0; i < pages.Length; i++) { AddPage(pages[i]); } }
public static HSQLInterface LoadHsqldb(ParameterStateManager psMgr) { // Specifically set the timezone to UTC to avoid the default usage local timezone in HSQL. // This ensures that all VoltDB data paths use the same timezone for representing time. TimeZoneInfo.ClearCachedData(); TimeZoneInfo utcZone = TimeZoneInfo.FindSystemTimeZoneById("UTC"); TimeZoneInfo.Local = utcZone; string name = $"hsqldbinstance-{instanceId}-{DateTimeOffset.UtcNow.ToUnixTimeMilliseconds()}"; instanceId++; HsqlProperties props = new HsqlProperties(); try { Session sessionProxy = DatabaseManager.NewSession(DatabaseURL.S_MEM, name, "SA", "", props, 0); // make HSQL case insensitive sessionProxy.ExecuteDirectStatement("SET IGNORECASE TRUE;"); sessionProxy.SetParameterStateManager(psMgr); return new HSQLInterface(sessionProxy); } catch (HsqlException caught) { m_logger.Warn("Unexpected error initializing the SQL parser", caught); caught.PrintStackTrace(); throw; } }
public void Complete() { CompleteTree(); StageManager.GetStage(Stage.ANTI_ENTROPY).Execute(this); if (logger.IsDebugEnabled) { // log distribution of rows in tree logger.Debug($"Validated {validated} partitions for {desc.SessionId}. Partitions per leaf are:"); tree.HistogramOfRowCountPerLeaf().Log(logger); logger.Debug($"Validated {validated} partitions for {desc.SessionId}. Partition sizes are:"); tree.HistogramOfRowSizePerLeaf().Log(logger); } }
public int Compare(T o1, T o2) { if (o1 == o2) return 0; string str1 = (o1 == null) ? "null" : o1.ToString(); string str2 = (o2 == null) ? "null" : o2.ToString(); return str1.CompareTo(str2); }
public string Build() { this.message_string = "{"; if (this.recipient_id != null) { this.message_string += "\"recipient\": {\"id\": \"" + this.recipient_id + "\"},"; } if (!string.IsNullOrEmpty(this.message_text) && this.buttons.Count > 0) { this.message_string += "\"message\": {"; this.message_string += "\"attachment\": {"; this.message_string += "\"type\": \"template\","; this.message_string += "\"payload\": {"; this.message_string += "\"template_type\": \"button\","; this.message_string += "\"text\": \"" + this.message_text + "\","; this.message_string += "\"buttons\": ["; for (int j = 0; j < this.buttons.Count; j++) { var button = this.buttons[j]; this.message_string += "{"; if (!string.IsNullOrEmpty(button["type"])) { this.message_string += "\"type\":\"" + button["type"] + "\","; } if (!string.IsNullOrEmpty(button["title"])) { this.message_string += "\"title\":\"" + button["ti
public DoubleStream Filter(DoublePredicate predicate) { return new DoubleStream(params, new DoubleFilter(iterator, predicate)); }
public A_CmsTab GetTab(GalleryTabId tabId) { foreach (var tab in m_tabbedPanel) { if (tabId == (GalleryTabId)Enum.Parse(typeof(GalleryTabId), tab.GetTabId())) { return tab; } } return null; }
private bool SkipInterface(NetworkInterface ni) { bool skipInterface = !ni.IsUp() || ni.IsVirtual() || ni.IsLoopback(); if (skipInterface && logger.IsFineEnabled()) { logger.Fine($"Skipping NetworkInterface '{ni.Name}': isUp={ni.IsUp()}, isVirtual={ni.IsVirtual()}, isLoopback={ni.IsLoopback()}"); } return skipInterface; }
public void AddSchemaSource(Source s) { sources.Add(s); validator.SetSchemaSources(sources.ToArray()); }
public static ComposedValueConverter GetInstance() { if (instance == null) { lock (typeof(DefaultComposedValueConverter)) { if (instance == null) { DefaultComposedValueConverter impl = new DefaultComposedValueConverter(); impl.Initialize(); instance = impl; } } } return instance; }
public static bool GetOptionalBooleanParameter(Dictionary<string, string> parameters, string parameterName, bool defaultValue) { ValidateParameters(parameters); ValidateParameterName(parameterName); if (!parameters.TryGetValue(parameterName, out string value)) { return defaultValue; } else if (value == VALUE_FALSE) { return false; } else if (value == VALUE_TRUE) { return true; } else { throw new JournalException($"'{parameterName}' parameter must be '{VALUE_FALSE}' (default) or '{VALUE_TRUE}'"); } }
public void SetContentHandler(ContentHandler handler) { if (handler == null) { throw new ArgumentNullException("handler", "Null content handler"); } else { m_outputContentHandler = handler; if (m_serializationHandler == null) { ToXMLSAXHandler h = new ToXMLSAXHandler(); h.SetContentHandler(handler); h.SetTransformer(this); m_serializationHandler = h; } else { m_serializationHandler.SetContentHandler(handler); } } }
public void DoUpdates(MetricsContext unused) { lock (this) { foreach (var m in registry.GetMetricsList()) { m.PushMetric(metricsRecord); } } metricsRecord.Update(); }
private object AsList(object value) { Type componentType = value.GetType().GetElementType(); if (componentType.IsPrimitive) { if (componentType == typeof(int)) { return AsIntList(value); } else if (componentType == typeof(long)) { return AsLongList(value); } else if (componentType == typeof(bool)) { return AsBooleanList(value); } else if (componentType == typeof(short)) { return AsShortList(value); } else if (componentType == typeof(byte)) { return AsByteList(value); } else { return AsCharList(value); } } else { return AsList(value, componentType); } }
private void LoadInsn(Type type, int index) { mv.VisitVarInsn(type.GetOpcode(Opcodes.ILOAD), index); }
public static CreateRequest Create() { string uri = Uri("coupon_sets"); return new CreateRequest(Method.POST, uri); }
public void Updated(Dictionary<string, object> config) { if (config != null) { int? filterPriority = config.TryGetValue(FILTER_PRIORITY, out var priority) ? priority as int? : null; string applicationName = config.TryGetValue(APPLICATION_NAME, out var name) ? name as string : null; SetPriority(filterPriority); SetApplicationName(applicationName); } lock (this) { filterFactoryServiceRegistration.SetProperties(config); } }
public void SetApplicationName(string applicationName) { lock (lockObject) { if (applicationName == null) { serviceProperties.Remove(APPLICATION_NAME); bundleAnalysingComponentInstantiationListener = null; } else { serviceProperties[APPLICATION_NAME] = applicationName; bundleAnalysingComponentInstantiationListener = new BundleAnalysingComponentInstantiationListener(bundleContext, injectionSource, factoryTracker); } if (serviceRegistration != null) { serviceRegistration.SetProperties(serviceProperties); } } }
private static Uri NormalizePortNumbersInUri(Uri uri) { int port = uri.Port; string scheme = uri.Scheme; if (scheme.Equals("http", StringComparison.OrdinalIgnoreCase) && port == 80) { port = -1; } if (scheme.Equals("https", StringComparison.OrdinalIgnoreCase) && port == 443) { port = -1; } UriBuilder result = new UriBuilder(scheme, uri.Host, port, uri.AbsolutePath) { UserName = uri.UserInfo.Split(':')[0], Password = uri.UserInfo.Contains(":") ? uri.UserInfo.Split(':')[1] : null, Query = uri.Query, Fragment = uri.Fragment }; return result.Uri; }
[Obsolete] protected string ValidateValue(string name, string value) { return ValidateAttributeValue(name, value); }
public int Delete(CMAAsset asset) { string assetId = GetResourceIdOrThrow(asset, "asset"); string spaceId = GetSpaceIdOrThrow(asset, "asset"); string environmentId = asset.GetEnvironmentId(); return service.Delete(spaceId, environmentId, assetId).BlockingFirst().Code(); }
public static T GetTagValue<T>(Tag t, Type clazz) { object o = ToTagValue(t); if (o == null) { return default(T); } try { return (T)Convert.ChangeType(o, clazz); } catch (InvalidCastException) { return default(T); } }
public override void eUnset(int featureID) { switch (featureID) { case XbasePackage.XIF_EXPRESSION__IF: SetIf(null); return; case XbasePackage.XIF_EXPRESSION__THEN: SetThen(null); return; case XbasePackage.XIF_EXPRESSION__ELSE: SetElse(null); return; case XbasePackage.XIF_EXPRESSION__CONDITIONAL_EXPRESSION: SetConditionalExpression(CONDITIONAL_EXPRESSION_EDEFAULT); return; } base.eUnset(featureID); }
public JObject SaveObject(JObject obj, string objectId, RequestOptions requestOptions) { try { return client.PutRequest($"/1/indexes/{encodedIndexName}/{WebUtility.UrlEncode(objectId)}", null, obj.ToString(), requestOptions); } catch (UnsupportedEncodingException e) { throw new InvalidOperationException(e.Message, e); } }
public void AddField(string fieldName, SortDirection sortDirection) { if (sortFields == null) sortFields = new Dictionary<string, SortDirection>(); sortFields[fieldName] = sortDirection; }
using System; static class Node<T> { private static readonly Node<T> EMPTY_NODE = new Node<T>(); private static readonly Node<int> EMPTY_INT_NODE = new Node<int>(); private static readonly Node<long> EMPTY_LONG_NODE = new Node<long>(); private static readonly Node<double> EMPTY_DOUBLE_NODE = new Node<double>(); enum StreamShape { REFERENCE, INT_VALUE, LONG_VALUE, DOUBLE_VALUE } public static Node<T> EmptyNode(StreamShape shape) { switch (shape) { case StreamShape.REFERENCE: return (Node<T>)EMPTY_NODE; case StreamShape.INT_VALUE: return (Node<T>)EMPTY_INT_NODE; case StreamShape.LONG_VALUE: return (Node<T>)EMPTY_LONG_NODE; case StreamShape.DOUBLE_VALUE: return (Node<T>)EMPTY_DOUBLE_NODE; default: throw new InvalidOperationException("Unknown shape " + shape); } } }
public static Uri GetResourceUrl(FacesContext ctx, string path) { var externalContext = ctx.ExternalContext; Uri url = externalContext.GetResource(path); if (Log.IsLoggable(LogLevel.Fine)) { Log.Fine($"Resource-Url from external context: {url}"); } if (url == null) { // This might happen on Servlet container which does not return // anything for getResource() (like WebLogic 8.1 for packaged wars). // We are trying to use our own URL protocol in order to use // ServletContext.GetResourceAsStream() when opening the URL. if (ResourceExist(externalContext, path)) { url = GetUrlForResourceAsStream(externalContext, path); } } return url; }
public static IAtomContainer RemoveNonChiralHydrogens(IAtomContainer org) { Dictionary<IAtom, IAtom> map = new Dictionary<IAtom, IAtom>(); // maps original atoms to clones. List<IAtom> remove = new List<IAtom>(); // lists removed Hs. // Clone atoms except those to be removed. IAtomContainer cpy = org.Builder.NewInstance<IAtomContainer>(); int count = org.AtomCount; for (int i = 0; i < count; i++) { // Clone/remove this atom? IAtom atom = org.GetAtom(i); bool addToRemove = false; if (SuppressibleHydrogen(org, atom)) { // test whether connected to a single hetero atom only, otherwise keep if (org.GetConnectedAtomsList(atom).Count == 1) { IAtom neighbour = org.GetConnectedAtomsList(atom)[0]; // keep if the neighbouring hetero atom has stereo information, otherwise continue checking int? stereoParity = neighbour.StereoParity; if (!stereoParity.HasValue || stereoParity.Value == 0) { addToRemove = true;
private void InitResourceType(ICmsResourceType resourceType, CmsResourceManagerConfiguration configuration) { // add the loader to the internal list of loaders configuration.AddResourceType(resourceType); if (CmsLog.INIT.IsInfoEnabled) { CmsLog.INIT.Info( Messages.Get().GetBundle().Key( Messages.INIT_ADD_RESTYPE_3, resourceType.TypeName, resourceType.TypeId, resourceType.GetType().Name)); } // add the mappings List<string> mappings = resourceType.ConfiguredMappings; foreach (string mapping in mappings) { // only add this mapping if a mapping with this file extension does not // exist already if (!configuration.ExtensionMappings.ContainsKey(mapping)) { configuration.ExtensionMappings[mapping] = resourceType.TypeName; if (CmsLog.INIT.IsInfoEnabled) { CmsLog.INIT.Info( Messages.Get().GetBundle().Key( Messages.INIT_MAP_RESTYPE_2, mapping, resourceType.TypeName)); } } } }
public GetRelationalDatabaseSnapshotResult GetRelationalDatabaseSnapshot(GetRelationalDatabaseSnapshotRequest request) { request = BeforeClientExecution(request); return ExecuteGetRelationalDatabaseSnapshot(request); }
public void Handle(Callback[] callbacks) { int len = 0; if (callbacks == null || (len = callbacks.Length) == 0) { return; } if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) { StringBuilder sb = new StringBuilder(); sb.Append("{ "); for (int i = 0; i < len; i++) { sb.Append(callbacks[i].GetType().FullName); if (i < (len - 1)) { sb.Append(", "); } } sb.Append(" }"); Tr.Debug(tc, $"handle(callbacks = \"{sb.ToString()}\")"); } for (int i = 0; i < len; i++) { Callback c = callbacks[i]; if (c is NameCallback nameCallback) { nameCallback.SetName(userName); } else if (c is PasswordCallback passwordCallback) { passwordCallback.SetPassword(password == null ? null : password.ToCharArray()); } else if (c is WSCredTokenCallbackImpl credTokenCallback) { credTokenCallback.SetC
public void CallService(string url, string templateName, object model, XmlHttpResponse result, Dictionary<string, object> headers) { DoHttpPost(url, templateName, model, result, headers, XmlHttpResponse.ContentTypeXmlTextUtf8); SetContext(result); }
public void Encode(AsnOutputStream aos) { if (invokeId == null) throw new EncodeException("No Invoke ID set."); try { aos.WriteTag(Tag.CLASS_CONTEXT_SPECIFIC, false, _TAG); int pos = aos.StartContentDefiniteLength(); aos.WriteInteger(this.invokeId); if (this.operationCode != null && this.parameter != null) { aos.WriteTag(Tag.CLASS_UNIVERSAL, false, Tag.SEQUENCE); int pos2 = aos.StartContentDefiniteLength(); this.operationCode.Encode(aos); this.parameter.Encode(aos); aos.FinalizeContent(pos2); } aos.FinalizeContent(pos); } catch (IOException e) { throw new EncodeException("IOException while encoding ReturnResult: " + e.Message, e); } catch (AsnException e) { throw new EncodeException("AsnException while encoding ReturnResult: " + e.Message, e); } }
protected Dictionary<FaxActionType, string> InitializeFaxActionTypeToResourceMap() { // get resources var map = new Dictionary<FaxActionType, string>(); var faxActionTypes = new FaxActionType[] { FaxActionType.SUBMIT_FAX_JOB, FaxActionType.SUSPEND_FAX_JOB, FaxActionType.RESUME_FAX_JOB, FaxActionType.CANCEL_FAX_JOB, FaxActionType.GET_FAX_JOB_STATUS }; var keys = new Enum[] { FaxClientSpiConfigurationConstants.SUBMIT_HTTP_RESOURCE_PROPERTY_KEY, FaxClientSpiConfigurationConstants.SUSPEND_HTTP_RESOURCE_PROPERTY_KEY, FaxClientSpiConfigurationConstants.RESUME_HTTP_RESOURCE_PROPERTY_KEY, FaxClientSpiConfigurationConstants.CANCEL_HTTP_RESOURCE_PROPERTY_KEY, FaxClientSpiConfigurationConstants.GET_STATUS_HTTP_RESOURCE_PROPERTY_KEY }; string resource = null; for (int index = 0; index < faxActionTypes.Length; index++) { // get next resource resource = this.GetConfigurationValue(keys[index]); if (resource != null) { map[faxActionTypes[index]] = resource; } } return map; }
public void Seek(long position) { if (position < 0 || position >= count) { throw new IOException($"cannot seek position {position} as it is out of bounds"); } pos = (int)position; }
public EClass GetIfcInventory() { if (ifcInventoryEClass == null) { ifcInventoryEClass = (EClass)EPackage.Registry.INSTANCE.GetEPackage(Ifc4Package.eNS_URI).GetEClassifiers()[327]; } return ifcInventoryEClass; }
public static DirectMetaProperty<P> OfReadOnlyBuildable<P>(MetaBean metaBean, string propertyName, Type declaringType, Type propertyType) { FieldInfo field = FindField(metaBean, propertyName); return new DirectMetaProperty<P>(metaBean, propertyName, declaringType, propertyType, PropertyStyle.READ_ONLY_BUILDABLE, field); }
public static DateTimeExpression<D> AddMinutes<D>(DateTimeExpression<D> date, int minutes) where D : IComparable { return Expressions.DateTimeOperation(date.GetType(), Ops.DateTimeOps.ADD_MINUTES, date, ConstantImpl.Create(minutes)); }
public Result Json() { SetContentType(MimeTypes.JSON); charset = Charsets.UTF_8; // If we already have a String content, we must set the type. // The renderable object checks whether or not the given String is a valid JSON string, // or if a transformation is required. if (GetRenderable() is RenderableString renderableString) { renderableString.SetType(MimeTypes.JSON); } return this; }
public Node<E> Back() { Node<E> f = Predecessor(); return (f == null || f.IsSpecial()) ? null : f; }
public Term Term(DecoratedKey partitionKey) { string serializedKey = ByteBufferUtils.ToString(partitionKey.GetKey()); return new Term(FIELD_NAME, serializedKey); }
public static base_responses Delete(nitro_service client, string[] ciphergroupname) { base_responses result = null; if (ciphergroupname != null && ciphergroupname.Length > 0) { sslcipher[] deleteresources = new sslcipher[ciphergroupname.Length]; for (int i = 0; i < ciphergroupname.Length; i++) { deleteresources[i] = new sslcipher(); deleteresources[i].ciphergroupname = ciphergroupname[i]; } result = delete_bulk_request(client, deleteresources); } return result; }
[System.Diagnostics.CodeAnalysis.CanIgnoreReturnValue] public double GetAndAdd(int i, double delta) { while (true) { long current = longs[i]; double currentVal = BitConverter.Int64BitsToDouble(current); double nextVal = currentVal + delta; long next = BitConverter.DoubleToInt64Bits(nextVal); if (Interlocked.CompareExchange(ref longs[i], next, current) == current) { return currentVal; } } }
private Func<Redirection, bool> GetRedirectionValidator() { if (redirectionValidator == null) { redirectionValidator = redirection => { if (!NodeInScope(redirection.EscapedURI)) { if (log.IsDebugEnabled) { log.Debug("Skipping redirection out of scan's scope: " + redirection); } return false; } return true; }; } return redirectionValidator; }
[XmlElement(Namespace = "http://belframework.org/schema/1.0/xbel", ElementName = "copyright")] public JAXBElement<string> CreateCopyright(string value) { return new JAXBElement<string>(new XmlQualifiedName("copyright", "http://belframework.org/schema/1.0/xbel"), typeof(string), null, value); }
public string GetArgs() { int count = (this.tokenPosition == 0) ? 1 : this.tokenPosition + 1; string[] ar = StringUtils.Split(this.line, null, count); if (ar != null && ar.Length > this.tokenPosition) { return StringUtils.Trim(ar[this.tokenPosition]); } return null; }
private void Initialize(int capacity) { // Find a power of 2 >= capacity int tableLength = 16; while (tableLength < capacity) { tableLength <<= 1; } // Allocates hash table. _entries = new EntryImpl[tableLength]; _mask = tableLength - 1; _capacity = capacity; _size = 0; // Allocates views. _values = new Values(); _entrySet = new EntrySet(); _keySet = new KeySet(); // Resets pointers. _poolFirst = null; _mapFirst = null; _mapLast = null; // Allocates entries. for (int i = 0; i < capacity; i++) { EntryImpl<K, V> entry = new EntryImpl<K, V>(); entry._after = _poolFirst; _poolFirst = entry; } }
protected void DoPostForm(string path, IDictionary<string, IList<string>> formParams) { DoPostForm(path, formParams, null); }
public void Exists(string path, Watcher watcher, StatCallback cb, object ctx) { VerbotenThreadCheck(); string clientPath = path; PathUtils.ValidatePath(clientPath); // The watch contains the un-chroot path WatchRegistration wcb = null; if (watcher != null) { wcb = new ExistsWatchRegistration(watcher, clientPath); } string serverPath = PrependChroot(clientPath); RequestHeader h = new RequestHeader(); h.SetType(ZooDefs.OpCode.Exists); ExistsRequest request = new ExistsRequest(); request.SetPath(serverPath); request.SetWatch(watcher != null); SetDataResponse response = new SetDataResponse(); cnxn.QueuePacket(h, new ReplyHeader(), request, response, cb, clientPath, serverPath, ctx, wcb); }
public byte[] GetRecipientInitialsImage(string accountId, string envelopeId, string recipientId) { return GetRecipientInitialsImage(accountId, envelopeId, recipientId, null); }
public static Field FindFieldInAnyParentOrMyself(ICmdLineArg<object> arg, Type targetClass, string errMsg) { Field field = null; try { field = targetClass.GetField(arg.GetVariable(), BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); } catch (SecurityException e) { throw new ParseException("SecurityException " + errMsg, -1); } catch (MissingFieldException e) // C# uses MissingFieldException instead of NoSuchFieldException { if (targetClass.BaseType == null) throw new ParseException("MissingFieldException " + errMsg, -1); // recursive from here return FindFieldInAnyParentOrMyself(arg, targetClass.BaseType, errMsg); } return field; }
public object Execute(string method, Vector<object> params) { Logger.Debug($"executing method {method} , with params {params}"); try { return client.Execute(method, params); } catch (XmlRpcException ex) { throw new XmlRpcClientExecutorException(CALL_FAILED, ex); } catch (IOException ex) { throw new XmlRpcClientExecutorException(CONFIGURATION_ERROR, ex); } }
public static short GetMode(string perms) { if (perms.Length != 10) { throw new ArgumentException(perms + " not permission"); } short mode = 0; for (int ii = 0; ii < 10; ii++) { int shift = 9 - ii; switch (perms[ii]) { case 'c': // character device if (ii != 0) { throw new ArgumentException(perms + " illegal"); } mode |= 0x20000; break; case 'b': // block device if (ii != 0) { throw new ArgumentException(perms + " illegal"); } mode |= 0x60000; break; case 'p': // FIFO (pipe) if (ii != 0) { throw new ArgumentException(perms + " illegal"); } mode |= 0x10000; break; case 'l': if (ii != 0) { throw new ArgumentException(perms + " illegal"); } mode |= 0x
public static TLVElement Create(int type, byte[] value) { TLVElement element = Create(type); element.SetContent(value); return element; }
private void InitializeListView() { placesListView.Adapter = placesAdapter; placesListView.ItemClick += (sender, e) => { lastLoadedPlacePosition = e.Position; ShowPlace(e.Position); }; }
public Account WithSupportedLicenses(params string[] supportedLicenses) { if (this.supportedLicenses == null) { SetSupportedLicenses(new List<string>(supportedLicenses.Length)); } foreach (string ele in supportedLicenses) { this.supportedLicenses.Add(ele); } return this; }
public async Task<Void> UpdateAsync(string jobId, string taskId, TaskConstraints constraints, TaskUpdateOptions taskUpdateOptions) { var response = await UpdateWithServiceResponseAsync(jobId, taskId, constraints, taskUpdateOptions); return response.Body; }
public override IEnumerable<T> Delete(IEnumerable<T> entities) { return InTransaction(() => { foreach (var obj in entities) { var attached = GetAttached(obj); if (attached != null) { entityManager.Remove(attached); } } return entities; }); }
public ListAssociationVersionsResult ListAssociationVersions(ListAssociationVersionsRequest request) { request = BeforeClientExecution(request); return ExecuteListAssociationVersions(request); }
public static void AssertIsEndArrayJsonToken(JsonParser parser) { if (parser.CurrentToken != JsonToken.END_ARRAY) { throw new JsonParseException(SR.EXPECTED_END_ARRAY, parser.CurrentLocation); } }
public void Commit() { if (GetBulk().NumberOfActions() > 0) { var response = GetBulk().Execute().ActionGet(); if (response.HasFailures()) { foreach (var itemResponse in response.GetItems()) { if (!itemResponse.IsFailed()) { continue; } if (itemResponse.GetFailure().GetStatus() == RestStatus.NotFound) { logger.Error(itemResponse.GetFailureMessage()); } else { throw new InvalidOperationException("ES sync commit error" + itemResponse.GetFailureMessage()); } } } } }
private synchronized void ReadObject(ObjectInputStream in) { in.DefaultReadObject(); // the transient _nameMap is null after an instance of // NameService has been serialized. if (_nameMap == null) { _nameMap = new Dictionary<string, string>(); } }
public override Dictionary<string, Type> GetPayloadPropertyNames(Dictionary<string, Type> mapPropertyNames) { mapPropertyNames = base.GetPayloadPropertyNames(mapPropertyNames); if ((this.GetKeyInformation() & STANDARD_PARAM) != 0) { // Add this name and class to the map of property names if (mapPropertyNames == null) mapPropertyNames = new Dictionary<string, Type>(); mapPropertyNames[this.GetFullKey(null)] = this.GetRawClassType(); } return mapPropertyNames; }
public async Task<RouteInner> BeginCreateOrUpdateAsync(string resourceGroupName, string routeTableName, string routeName, RouteInner routeParameters) { var response = await BeginCreateOrUpdateWithServiceResponseAsync(resourceGroupName, routeTableName, routeName, routeParameters); return response.Body; }
public static double Pow(double d, int e) { if (e == 0) { return 1.0; } else if (e < 0) { e = -e; d = 1.0 / d; } // split d as two 26 bits numbers // beware the following expressions must NOT be simplified, they rely on floating point arithmetic properties const int splitFactor = 0x8000001; double cd = splitFactor * d; double d1High = cd - (cd - d); double d1Low = d - d1High; // prepare result double resultHigh = 1; double resultLow = 0; // d^(2p) double d2p = d; double d2pHigh = d1High; double d2pLow = d1Low; while (e != 0) { if ((e & 0x1) != 0) { // accurate multiplication result = result * d^(2p) using Veltkamp TwoProduct algorithm // beware the following expressions must NOT be simplified, they rely on floating po
public GroupName GetGroupName(List<string> prefixPath, Dictionary<string, MetricValue> extraTags) { var suffixPath = data .Where(entry => entry.Key.Left.HasValue) // Only retain int keys. .OrderBy(entry => entry.Key.Left.Value) // Sort by int key. .Select(entry => entry.Value.MapCombine(b => b.ToString(), i => i.ToString(), identity => identity)); var path = SimpleGroupPath.ValueOf(prefixPath.Concat(suffixPath).ToList()); var tags = data .Where(entry => entry.Key.Right.HasValue) // Only retain string keys. .ToDictionary( entry => entry.Key.Right.Value, entry => entry.Value.MapCombine(MetricValue.FromBoolean, MetricValue.FromIntValue, MetricValue.FromStrValue) ); foreach (var extraTag in extraTags) { tags[extraTag.Key] = extraTag.Value; } return GroupName.ValueOf(path, tags); }
public List<org.nd4j.linalg.api.buffer.DataType> CalculateOutputDataTypes(List<org.nd4j.linalg.api.buffer.DataType> dataTypes) { throw new NotImplementedException("CalculateOutputDataTypes() has not been implemented for " + GetType().Name); }
public BaseMessage CreateReplyMessage(BaseMessage messageIn) { // ProductRequest productRequest = (ProductRequest)messageIn.GetMessageDataDesc(null); BaseMessage replyMessage = (BaseMessage)this.GetMessageProcessInfo().CreateReplyMessage(messageIn); // BaseProductResponse responseMessage = (BaseProductResponse)replyMessage.GetMessageDataDesc(null); // responseMessage.MoveRequestInfoToReply(productRequest); if (replyMessage == null) replyMessage = new TreeMessage(null, null); if (replyMessage.GetExternalMessage() == null) new ExternalMapTrxMessageIn(replyMessage, null); return replyMessage; // Override this! }
public Coupon GetCoupon(string couponCode) { if (string.IsNullOrEmpty(couponCode)) throw new Exception("couponCode cannot be empty!"); return DoGET(Coupon.COUPON_RESOURCE + "/" + couponCode, typeof(Coupon)); }
public void Process(Stream input) { while (input.CanRead && input.DataAvailable) { Tag tag = ParserUtils.ParseTag(input); TagHandler handler = GetHandler(tag); if (handler == null) { skipHandler.Handle(tag, input); } else { handler.Handle(tag, input); } } }
protected HashSet<string> CountComponentContainPaxWicketBeanAnnotatedFieldsHierarchical(Type component) { HashSet<string> foundAnnotation = new HashSet<string>(); Type clazz = component; while (clazz != null && !IsBoundaryClass(clazz)) { foreach (var field in clazz.GetFields(System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Instance)) { if (Attribute.IsDefined(field, typeof(InjectAttribute))) { foundAnnotation.Add(field.ToString()); } } clazz = clazz.BaseType; } return foundAnnotation; }
public override string Invoke(object connection, string request, int timeout, Dictionary<string, string> metainfo) { string response; try { if (timeout <= 0) timeout = DEFAULT_TIMEOUT; SoccomClient client = (SoccomClient)connection; client.PutReq(request); response = client.GetResp(timeout); } catch (SoccomException ex) { if (ex.ErrorCode == SoccomException.POLL_TIMEOUT) throw new ConnectionException(ConnectionException.CONNECTION_DOWN, ex.Message, ex); else throw new AdapterException(-1, ex.Message, ex); } return response; }
public void ElementDecl(string name, string model) { if (DEBUG) Console.WriteLine($"TransformerHandlerImpl#ElementDecl: {name}, {model}"); if (m_declHandler != null) { m_declHandler.ElementDecl(name, model); } }
public static E First<E>(E[] array) { return new FirstElement<E>().Apply(new ArrayIterator<E>(array)); }
public List<long> ServiceNameModemAvailableWLANChannelGet(string serviceName, OvhWLANFrequencyEnum frequency) { string qPath = $"/xdsl/{serviceName}/modem/availableWLANChannel"; StringBuilder sb = Path(qPath, serviceName); Query(sb, "frequency", frequency); string resp = Exec(qPath, "GET", sb.ToString(), null); return ConvertTo(resp, typeof(long[])); }
public StreamT<W, T> Sorted(Comparator<T> c) { return (StreamT<W, T>)FoldableTransformerSeq.Instance.Sorted(c); }
public GraphQLResult ProcessGraphQLMultipart(string graphQLRequest, FileInfo file) { // verify the required parameter 'graphQLRequest' is set if (graphQLRequest == null) { throw new ApiException(400, "Missing the required parameter 'graphQLRequest' when calling ProcessGraphQLMultipart"); } // verify the required parameter 'file' is set if (file == null) { throw new ApiException(400, "Missing the required parameter 'file' when calling ProcessGraphQLMultipart"); } // create path and map variables string localVarPath = "/graphql/upload".Replace("{format}", "json"); // query params var localVarQueryParams = new List<KeyValuePair<string, string>>(); var localVarHeaderParams = new Dictionary<string, string>(); var localVarFormParams = new Dictionary<string, object>(); if (graphQLRequest != null) localVarFormParams.Add("graphQLRequest", graphQLRequest); if (file != null) localVarFormParams.Add("file", file); string[] localVarAccepts = { "application/json" }; string localVarAccept = apiCli
public bool IsMetBy(Ordering otherOrdering) { if (otherOrdering == null || this.Indexes.Count > otherOrdering.Indexes.Count) { return false; } for (int i = 0; i < this.Indexes.Count; i++) { if (this.Indexes[i] != otherOrdering.Indexes[i]) { return false; } // if this one request no order, everything is good if (this.Orders[i] != Order.NONE) { if (this.Orders[i] == Order.ANY) { // if any order is requested, any not NONE order is good if (otherOrdering.Orders[i] == Order.NONE) { return false; } } else if (otherOrdering.Orders[i] != this.Orders[i]) { // the orders must be equal return false; } } } return true; }
public void AddCondition(Condition condition) { // A Resource URI can only be specified once in a Precondition var conditions = GetConditions(); if (condition.ResourceURI != null) { foreach (var existingCondition in conditions) { if (existingCondition.ResourceURI != null && existingCondition.ResourceURI.Equals(condition.ResourceURI)) { throw new WebDAVException(IResponse.SC_BAD_REQUEST, Policy.Bind("error.parseMultipleSpecification", condition.ResourceURI)); } } } this.conditions.Add(condition); }
public void Replace(string filePath, bool preserveExternalFileName, string text) { if (!IsValidPath(text)) { throw new ArgumentException("The provided text is not a valid path."); } string path = entries.ContainsKey(filePath) ? entries[filePath] : ZipPathFor(filePath, preserveExternalFileName); entries[text] = path; } private bool IsValidPath(string path) { // Implement path validation logic here return !string.IsNullOrWhiteSpace(path); // Example validation logic } private string ZipPathFor(string filePath, bool preserveExternalFileName) { // Implement logic to generate zip path based on the filePath and preserveExternalFileName return "generated/zip/path"; // Example path generation }
public override void RenderHead(Component component, IHeaderResponse response) { base.RenderHead(component, response); response.Render(AbstractEFapsHeaderItem.ForJavaScript(AjaxFieldUpdateBehavior.JS)); }
public int At(int n) { Mark mark = Mark(); List<int> cbuf = new List<int>(); for (int i = 0; i < n; i++) { cbuf.Add(Next()); if (curChar == -1) { break; } } Unread(cbuf, mark); return cbuf[cbuf.Count - 1]; }
private static CowFace GetCowFace(CommandLine commandLine) { CowFace cowFace = new CowFace(); if (commandLine.HasOption(CowsayCli.Opt.EYES.ToString())) { cowFace.SetEyes(commandLine.GetOptionValue(CowsayCli.Opt.EYES.ToString())); } if (commandLine.HasOption(CowsayCli.Opt.TONGUE.ToString())) { cowFace.SetTongue(commandLine.GetOptionValue(CowsayCli.Opt.TONGUE.ToString())); } return cowFace; }
public XcapResponse Get(Uri uri, Header[] additionalRequestHeaders, Credentials credentials) { if (log.IsDebugEnabled) { log.Debug($"get(uri={uri}, additionalRequestHeaders=({string.Join(", ", additionalRequestHeaders)}))"); } return Execute(new HttpGet(uri), additionalRequestHeaders, credentials); }
private void PrepareMessages(List<MessageCenterListItem> originalItems) { AssertMainThread(); listItems.Clear(); unsentMessagesCount = 0; // Loop through each message item retrieved from database foreach (MessageCenterListItem item in originalItems) { if (item is ApptentiveMessage apptentiveMessage) { double? createdAt = apptentiveMessage.GetCreatedAt(); if (apptentiveMessage.IsOutgoingMessage() && createdAt == null) { unsentMessagesCount++; } /* * Find proper location to insert into the listItems list of the listview. */ ListIterator<MessageCenterListItem> listIterator = listItems.ListIterator(); ApptentiveMessage next = null; while (listIterator.HasNext()) { next = (ApptentiveMessage)listIterator.Next(); double? nextCreatedAt = next.GetCreatedAt(); // For unsent and dropped message, move the iterator to the end, and append there if (createdAt == null || createdAt <= double.MinValue) { continue; } // n
public static Term Remainder(Term left, Term right) { return new BinaryArithmeticTerm(ArithmeticOperator.Remainder, left, right); }
public string Compile(DataProvider dataProvider, string template, bool replaceOptionals) { using (var templateStream = this.GetType().Assembly.GetManifestResourceStream(template)) { return Compile(dataProvider, templateStream); } }
public static string DefaultIfEmpty(string str, string defaultStr) { return string.IsNullOrEmpty(str) ? defaultStr : str; }
public static string[] SplitUnescape(string input, char[] separators, char echar, char[] special) { List<string> components = new List<string>(); bool done = false; string remaining = input; while (!done) { var result = Unescape(remaining, echar, special, separators); if (result.Unescaped != null) { components.Add(result.Unescaped); } if (result.Remaining != null) { remaining = result.Remaining; } else { done = true; } } return components.ToArray(); }
public object ReadValue(Attribute attribute, List<object> objectList) { List<decimal> ret = new List<decimal>(); foreach (var obj in objectList) { if (obj is decimal decimalValue) { ret.Add(decimalValue); } else if (obj != null) { ret.Add(decimal.Parse(obj.ToString())); } } return objectList.Count > 0 ? (ret.Count > 1 ? ret : (ret.Count > 0 ? ret[0] : null)) : null; }
protected override void InsertDefaults() { base.InsertDefaults(); if (!GetExist()[1] && GetGeneralID() != null) { try { var res = Context.GetThreadContext().GetConnectionResource(); Context.GetDbType().NewInsert(JDBCStoreResource.TABLENAME_STORE, "ID", false) .Column("ID", GetGeneralID()) .Execute(res); } catch (SQLException e) { throw new EFapsException(typeof(JDBCStoreResource), "InsertDefaults", e); } } }
public void SetRange(double A, double B) { if (A == B) throw new InvalidOperationException("Values must be different"); else if (B > A) { double tmp = A; A = B; B = tmp; } this.A = A; this.B = B; }
public synchronized void StreamingPut(byte[] key, Versioned<byte[]> value) { if (MARKED_BAD) { logger.Error("Cannot stream more entries since Recovery Callback Failed!"); throw new VoldemortException("Cannot stream more entries since Recovery Callback Failed!"); } foreach (string store in storeNames) { StreamingPut(key, value, store); } }
public List<List<string>> CreateListOfLists(List<string> strings) { List<List<string>> listOfLists = new List<List<string>>(); foreach (var str in strings) { listOfLists.Add(new List<string> { str }); } return listOfLists; }
public void Set(string fieldName, object value) { GetValueMarshaller(fieldName).SetWritableObject(struct, value); LOG.Debug($"Set {fieldName}={value}"); }
public List<ClassificationDataSet> TrainC(ClassificationDataSet dataPoints, HashSet<int> options) { return TrainC(dataPoints, options, false); }
private void ConvertLinkToRecord(object iKey) { if (status == MULTIVALUE_CONTENT_TYPE.ALL_RECORDS) return; object value; if (iKey is ORID) value = iKey; else value = base.Get(iKey); if (value != null && value is ORID rid) { marshalling = true; try { try { // OVERWRITE IT base.Put(iKey, rid.GetRecord()); } catch (ORecordNotFoundException) { // IGNORE THIS } } finally { marshalling = false; } } }
public ApiSuccessResponse LogoutVoice(DndOnBody dndOnBody) { ApiResponse<ApiSuccessResponse> resp = LogoutVoiceWithHttpInfo(dndOnBody); return resp.Data; }
private void StoreRecentList(List<object> recent) { try { if (recent == null) { return; } // Only keep the last 8 entries. while (recent.Count > 8) { recent.RemoveAt(recent.Count - 1); } using (var outStream = new FileStream(RECENT_FILE_NAME, FileMode.Create, FileAccess.Write, FileShare.None)) { var encoder = new System.Xml.Serialization.XmlSerializer(typeof(List<object>)); encoder.Serialize(outStream, recent); } } catch (IOException ex) { LOG.Error("Unable to save recent list", ex); } }
public void Serialize(DataOutput pOutput) { try { pOutput.WriteInt(IConstants.TEXT); mDel.Serialize(pOutput); mStrucDel.Serialize(pOutput); mValDel.Serialize(pOutput); } catch (IOException exc) { throw new TTIOException(exc); } }
public IObservable<ReactiveSensorEvent> ObserveSensor(int sensorType, int samplingPeriodInUs, Handler handler, BackpressureStrategy strategy) { if (!HasSensor(sensorType)) { string format = "Sensor with id = {0} is not available on this device"; string message = string.Format(CultureInfo.CurrentCulture, format, sensorType); return Observable.Error<ReactiveSensorEvent>(new SensorNotFoundException(message)); } Sensor sensor = sensorManager.GetDefaultSensor(sensorType); var wrapper = new SensorEventListenerWrapper(); var listener = wrapper.Create(); return Observable.Create<ReactiveSensorEvent>(emitter => { wrapper.SetEmitter(emitter); if (handler == null) { sensorManager.RegisterListener(listener, sensor, samplingPeriodInUs); } else { sensorManager.RegisterListener(listener, sensor, samplingPeriodInUs, handler); } return () => sensorManager.UnregisterListener(listener); }).SubscribeOn(Scheduler.Default).ObserveOn(strategy); }
public ValFrame Apply(Env env, Env.StackHelp stk, AstRoot[] asts) { Frame fr = stk.Track(asts[1].Exec(env)).GetFrame(); // first argument is dataframe int[] groupbycols = ((AstParameter)asts[2]).Columns(fr.Names()); int[] sortcols = ((AstParameter)asts[3]).Columns(fr.Names()); // sort columns int[] sortAsc; if (asts[4] is AstNumList) sortAsc = ((AstNumList)asts[4]).Expand4(); else sortAsc = new int[] { (int)((AstNum)asts[4]).GetNum() }; // R client can send 1 element for some reason string newcolname = asts[5].Str(); bool sortColsOrder = ((AstNum)asts[6]).GetNum() == 1; Debug.Assert(sortAsc.Length == sortcols.Length); SortnGrouby sortgroupbyrank = new SortnGrouby(fr, groupbycols, sortcols, sortAsc, newcolname); sortgroupbyrank.DoAll(sortgroupbyrank._groupedSortedOu
public SourceParams SetTypeRaw(string typeRaw) { mType = Source.AsSourceType(typeRaw); mTypeRaw = typeRaw; return this; }
private Session GetSession(string targetName) { if (sessions.TryGetValue(targetName, out Session session)) { return session; } else { throw new NoSuchSessionException($"Session \"{targetName}\" not found!"); } }
public char GetSurrogateValue(char lead, char trail) { int offset = GetSurrogateOffset(lead, trail); if (offset > 0) { return m_data_[offset]; } return m_initialValue_; }
private ActionResult GenerateErrorView(string code, object[] args, HttpRequest request) { var modelAndView = new ViewResult { ViewName = this.failureView }; modelAndView.ViewData["code"] = System.Net.WebUtility.HtmlEncode(code); var desc = System.Net.WebUtility.HtmlEncode(this.context.GetMessage(code, args, code, request.HttpContext.Features.Get<IRequestCultureFeature>().RequestCulture.Culture)); modelAndView.ViewData["description"] = desc; return modelAndView; }
private void Register(Kryo kryo, Type[] types, Serializer serializer, int id) { Registration existing = kryo.GetRegistration(id); if (existing != null) { bool matches = false; foreach (Type type in types) { if (existing.GetType() == type) { matches = true; break; } } if (!matches) { LOGGER.Error($"{FriendlyName()}: Failed to register {string.Join(", ", types)} as {id}, {existing.GetType()} was already registered."); throw new InvalidOperationException(string.Format("Failed to register {0} as {1}, {2} was already registered.", string.Join(", ", types), id, existing.GetType())); } // falling through to register call for now. // Consider skipping, if there's reasonable // way to compare serializer equivalence. } foreach (Type type in types) { Registration r = null; if (serializer == null) { r = kryo.Register(type, id); } else if (type.IsInterface) { kryo.AddDefaultSerializer(type, seriali
public static Rule GetRule(Stack stack) { if (stack.Count < 1) { throw new ArgumentException($"Invalid EXISTS rule - expected one parameter but received {stack.Count}"); } return new ExistsRule(stack.Pop().ToString()); }
public void Validate(ValidationHelper helper, Context context, string key, OAuthFlows t) { if (t != null) { if (t.Implicit != null) { var implicitFlow = t.Implicit; if (!string.IsNullOrWhiteSpace(implicitFlow.TokenUrl)) { var message = Tr.FormatMessage(tc, "nonApplicableFieldWithValue", "tokenUrl", implicitFlow.TokenUrl, "OAuth Flow Object", "implicit"); helper.AddValidationEvent(new ValidationEvent(ValidationEvent.Severity.Warning, context.Location, message)); } ValidatorUtils.ValidateRequiredField(implicitFlow.AuthorizationUrl, context, "authorizationUrl").IfPresent(helper.AddValidationEvent); } if (t.Password != null) { var passwordFlow = t.Password; if (!string.IsNullOrWhiteSpace(passwordFlow.AuthorizationUrl)) { var message = Tr.FormatMessage(tc, "nonApplicableFieldWithValue", "authorizationUrl", passwordFlow.AuthorizationUrl, "OAuth Flow Object", "password"); helper.AddValidationEvent(new ValidationEvent(ValidationEvent.Severity.Warning, context.Location, message)); } ValidatorUtils.ValidateRequiredField(passwordFlow.TokenUrl, context
public double GetCount<F, S>(F first, S second) { if (!maps.TryGetValue(first, out Counter<S> counter)) return 0.0; return counter.GetCount(second); }
[BackpressureSupport(BackpressureKind.UnboundedIn)] [SchedulerSupport(SchedulerSupport.None)] public Maybe<T> LastElement() { return RxJavaPlugins.OnAssembly(new FlowableLastMaybe<T>(this)); }
public GetSignatureResponse GetSignature(string url) { if (string.IsNullOrEmpty(url)) { throw new ArgumentNullException(nameof(url), "请传入当前网页的URL，不包含#及其后面部分"); } // 当前时间的秒数 long timestamp = DateTimeOffset.UtcNow.ToUnixTimeSeconds(); // 使用GUID来当随机字符串 string nonceStr = Guid.NewGuid().ToString().Replace("-", ""); return GetSignature(nonceStr, timestamp, url); }
public int ExecuteUpdate(string update) { Console.WriteLine(new LogEntry("executing: " + update)); //TODO time execution time using (var conn = dataSource.GetConnection()) { using (var cmd = conn.CreateCommand()) { cmd.CommandText = update; int result = cmd.ExecuteNonQuery(); Console.WriteLine(new LogEntry(result + " rows affected")); return result; } } }
public async Task<Observable<ServiceResponse<KeyOperationResult>>> EncryptWithServiceResponseAsync(string vaultBaseUrl, string keyName, string keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value) { if (vaultBaseUrl == null) { throw new ArgumentNullException("Parameter vaultBaseUrl is required and cannot be null."); } if (keyName == null) { throw new ArgumentNullException("Parameter keyName is required and cannot be null."); } if (keyVersion == null) { throw new ArgumentNullException("Parameter keyVersion is required and cannot be null."); } if (this.ApiVersion() == null) { throw new ArgumentNullException("Parameter this.ApiVersion() is required and cannot be null."); } if (algorithm == null) { throw new ArgumentNullException("Parameter algorithm is required and cannot be null."); } if (value == null) { throw new ArgumentNullException("Parameter value is required and cannot be null."); } var parameters = new KeyOperationsParameters(); parameters.WithAlgorithm(algorithm); parameters.WithValue(value); string parameterizedHost = $"{vaultBaseUrl}";
protected void SetupPivotInfo() { for (int col = 0; col < numCols; col++) { pivots[col] = col; double[] c = dataQR[col]; double norm = 0; for (int row = 0; row < numRows; row++) { double element = c[row]; norm += element * element; } normsCol[col] = norm; } }
public static TypeInformation<T> GetWritableTypeInfo<T>(Type typeClass) where T : Writable { if (typeof(Writable).IsAssignableFrom(typeClass) && typeClass != typeof(Writable)) { return new WritableTypeInfo<T>(typeClass); } else { throw new InvalidTypesException("The given class is no subclass of " + typeof(Writable).FullName); } }
public long GetLeastSignificantBits() { long b = 0; b |= ((long)content[8] & 0xFF) << 56; b |= ((long)content[9] & 0xFF) << 48; b |= ((long)content[10] & 0xFF) << 40; b |= ((long)content[11] & 0xFF) << 32; b |= ((long)content[12] & 0xFF) << 24; b |= ((long)content[13] & 0xFF) << 16; b |= ((long)content[14] & 0xFF) << 8; b |= ((long)content[15] & 0xFF); return b; }
public void SetProperty(string name, string val) { if (props == null) { props = new Properties(); } props.SetProperty(name, val); }
public static void Debug(object obj, object message) { var clazz = obj.GetType(); Debug(clazz, message); }
protected void EnableApiKeyInternal(ObjectId id) { var reqBuilder = new StitchAuthRequest.Builder(); reqBuilder .WithMethod(Method.PUT) .WithPath(routes.GetApiKeyEnableRouteForId(id.ToHexString())) .WithRefreshToken(); GetRequestClient().DoAuthenticatedRequest(reqBuilder.Build()); }
public PropertyBinding<U> SelectProperty<U>(Func<T, Property<U>> f) { return EasyBind.SelectProperty(delegateInstance, f); }
public double GetCouponPayment(int periodIndex, AnalyticModel model) { ForwardCurve forwardCurve = model.GetForwardCurve(forwardCurveName); if (forwardCurve == null && !string.IsNullOrEmpty(forwardCurveName)) { throw new ArgumentException($"No forward curve with name '{forwardCurveName}' was found in the model:\n{model}"); } double periodLength = schedule.GetPeriodLength(periodIndex); double couponPayment = fixedCoupon; if (forwardCurve != null) { couponPayment = floatingSpread + forwardCurve.GetForward(model, schedule.GetFixing(periodIndex)); } return couponPayment * periodLength; }
public bool IsDefaultNamespace(string namespaceURI) { string namespaceValue = this.GetNamespaceURI(); string prefix = this.GetPrefix(); if (string.IsNullOrEmpty(prefix)) { if (namespaceURI == null) { return ReferenceEquals(namespaceValue, namespaceURI); } return namespaceURI.Equals(namespaceValue); } if (this.HasAttributes()) { Attr attr = this.GetAttributeNodeNS("http://www.w3.org/2000/xmlns/", "xmlns"); if (attr != null) { string value = attr.GetNodeValue(); if (namespaceURI == null) { return ReferenceEquals(namespaceValue, value); } return namespaceURI.Equals(value); } } Node ancestor = GetParentNode(); if (ancestor != null) { short type = ancestor.GetNodeType(); if (type == NodeKind.ELEM) { return ancestor.IsDefaultNamespace(namespaceURI); } // otherwise, current node is root already } return false; }
public static double FractionOfStringUppercase(string input) { if (input == null) { return 0; } double upperCasableCharacters = 0; double upperCount = 0; for (int i = 0; i < input.Length; i++) { char c = input[i]; char uc = char.ToUpper(c); char lc = char.ToLower(c); // If both the upper and lowercase version of a character are the same, then the character has // no distinct uppercase form (e.g., a digit or punctuation). Ignore these. if (c == uc && c == lc) { continue; } upperCasableCharacters++; if (c == uc) { upperCount++; } } return upperCasableCharacters == 0 ? 0 : upperCount / upperCasableCharacters; }
using System.Collections.Generic; using System.Management; public class MBeanServerHelper { public HashSet<MBeanServer> GetMBeanServers() { HashSet<MBeanServer> mbeanServers = new HashSet<MBeanServer>(); mbeanServers.Add(ManagementFactory.GetPlatformMBeanServer()); mbeanServers.UnionWith(MBeanServerFactory.FindMBeanServer(null)); return mbeanServers; } }
private TimeUnit[] TimeEx(string tar, string timebase) { Match match; int startline = -1, endline = -1; string[] temp = new string[99]; int rpointer = 0; TimeUnit[] Time_Result = null; Regex regex = new Regex(patterns); bool startmark = true; MatchCollection matches = regex.Matches(tar); foreach (Match m in matches) { startline = m.Index; if (endline == startline) { rpointer--; temp[rpointer] += m.Value; } else { if (!startmark) { rpointer--; rpointer++; } startmark = false; temp[rpointer] = m.Value; } endline = m.Index + m.Length; rpointer++; } if (rpointer > 0) { rpointer--; rpointer++; } Time_Result = new TimeUnit[rpointer];
public void Flush() { if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) SibTr.Entry(this, tc, "flush"); // Cleanup any pending NACK alarms. Since we're flushing we don't // care about these anymore. lock (pendingAlarms) { foreach (var next in GetAlarms(this).ToList()) { next.Timer.Cancel(); pendingAlarms.Remove(next); } } // SIB0115 // If nack alarms are cancelled then deregister the health state for detected gaps GetControlAdapter().GetHealthState().Deregister(HealthStateListener.GAP_DETECTED_STATE); // We shouldn't be flushed if we have pending unacked data. // But just as a sanity check, throw an exception here if we have // something undelivered. if (oststream.ContainsState(new TickRange(TickRange.Unknown, 0, RangeList.INFINITY), TickRange.Value) || oststream.ContainsState(new TickRange(TickRange.Unknown, 0, RangeList.INFINITY), TickRange.Uncommitted)) { // TODO: throw some interesting exception }
public SIMPTopicSpaceControllable GetTopicSpace() { if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) { SibTr.Entry(tc, "GetTopicSpace"); SibTr.Exit(tc, "GetTopicSpace", topicspaceControl); } return topicspaceControl; }
protected long GetLogFileSize() { if (Tracing.IsAnyTracingEnabled() && trace.IsEntryEnabled()) trace.Entry(this, cclass, "GetLogFileSize"); long logFileSize = sectorValidatedInputStream.Header.FileSize; if (Tracing.IsAnyTracingEnabled() && trace.IsEntryEnabled()) trace.Exit(this, cclass, "GetLogFileSize", "returns logFileSize=" + logFileSize + "(long)"); return logFileSize; }
public static List<Uri> GetResources(string resource) { IEnumerable<Uri> resources; try { resources = ClassLoaderUtil.GetClassLoader().GetResources(resource); } catch (IOException e) { throw new IORuntimeException(e); } return resources.ToList(); }
public BigInteger GetBytes() { return (value * unit.GetFactor()).SetScale(0, MidpointRounding.Ceiling).ToBigIntegerExact(); }
private T GetEnumValue<T>(string name) where T : Enum { var constants = (T[])Enum.GetValues(typeof(T)); if (constants == null) { throw new ArgumentException($"{typeof(T).Name} is not an enum type"); } foreach (var constant in constants) { if (constant.ToString().Equals(name.Replace('-', '_'), StringComparison.OrdinalIgnoreCase)) { return constant; } } // same error that's thrown by Enum.Parse() throw new ArgumentException($"No enum constant {typeof(T).FullName}.{name}"); }
private Path GetRightArrowPath(int width, int height) { Path path = new Path(); RectF rectF; // Top-left corner int diameter = cornerSizeLeftTop * 2; if (cornerSizeLeftTop > 0) { // Starting point for top-left corner rounding path.MoveTo(0, cornerSizeLeftTop); rectF = new RectF(0, 0, diameter, diameter); path.ArcTo(rectF, 180, 90); } else { path.MoveTo(0, 0); } // Top-right corner diameter = cornerSizeRightTop * 2; if (cornerSizeRightTop > 0) { // Starting point for top-right corner rounding path.LineTo(width - cornerSizeRightTop - arrowHeight, 0); rectF = new RectF(width - diameter - arrowHeight, 0, width - arrowHeight, diameter); path.ArcTo(rectF, -90, 90); } else { path.LineTo(width - arrowHeight, 0); } switch (arrowSide)
protected override void ChannelRead0(ChannelHandlerContext ctx, Response msg) { answer.Add(msg); }
private AccessPredicateConfigAttribute Find(IEnumerable<ConfigAttribute> attributes) { foreach (var attribute in attributes) { if (attribute is AccessPredicateConfigAttribute accessPredicate) { return accessPredicate; } } return null; }
public static AbstractExpression EliminateDuplicates(IEnumerable<AbstractExpression> exprList) { // Eliminate duplicates by building the map of expression's ids, values. var subExprMap = new Dictionary<string, AbstractExpression>(); foreach (var subExpr in exprList) { subExprMap[subExpr.m_id] = subExpr; } // Now reconstruct the expression return ExpressionUtil.CombinePredicates(subExprMap.Values); }
public ListGroupVersionsResult WithVersions(params VersionInformation[] versions) { if (this.versions == null) { SetVersions(new List<VersionInformation>(versions.Length)); } foreach (var ele in versions) { this.versions.Add(ele); } return this; }
public EClass GetBPF() { if (bpfEClass == null) { bpfEClass = (EClass)EPackage.Registry.INSTANCE.GetEPackage(AfplibPackage.eNS_URI).GetEClassifiers()[216]; } return bpfEClass; }
[Obsolete] protected object ReadResolve() { // If we get invalid state from the configuration, fallback to unknown if (string.IsNullOrWhiteSpace(name)) { Logger.LogWarning("Read install state with blank name: '{0}'. It will be ignored", name); return UNKNOWN; } if (!Enum.TryParse<InstallState>(name, out InstallState state)) { Logger.LogWarning("Cannot locate an extension point for the state '{0}'. It will be ignored", name); return UNKNOWN; } // Otherwise we return the actual state return state; }
public static synchronized List<Type> GenerateDataSerializerClasses(ClassLoader classLoader, List<Type> classList, string outputDir) { CheckClassesValid(classList); List<CtClass> dataSerializerClassList = new List<CtClass>(); // create new ClassPool for every method call // 1) low memory consumption - any caches with internal data structures of created classes // 2) any collision between methods called serially - all created classes are forgotten // 3) any references on created classes from this lib ClassPool classPool = NewClassPool(classLoader); // #1: create dataSerializers with stubs toData/fromData foreach (var clazz in classList) { string serializerClsName = CreateDataSerializerClassNameForClass(clazz); if (ExistsClass(serializerClsName, classLoader)) { logger.Debug($"Serializer for class {clazz.Name} exists. Skipping generation"); break; } // create class CtClass cc = CreateClass(classPool, clazz, serializerClsName); dataSerializerClassList.Add(cc); // add static Register AddStaticConstruct(clazz, cc, serializerClsName);
public bool IsEditable() { if (m_request == null) { return false; } CmsExplorerTypeSettings settings = OpenCms.WorkplaceManager.GetExplorerTypeSetting(GetResourceTypeName()); if (settings != null) { string rightSite = OpenCms.SiteManager.GetSiteRoot(GetResource().GetRootPath()); if (rightSite == null) { rightSite = string.Empty; } string currentSite = GetCms().RequestContext.GetSiteRoot(); try { GetCms().RequestContext.SetSiteRoot(rightSite); return settings.IsEditable(GetCms(), GetResource()); } finally { GetCms().RequestContext.SetSiteRoot(currentSite); } } return false; }
[CheckReturnValue] [SchedulerSupport(SchedulerSupport.None)] public final Observable<U> Buffer(int count, Func<U> bufferSupplier) where U : ICollection<T> { return Buffer(count, count, bufferSupplier); }
public override List<CommerceTaxMethod> GetCommerceTaxMethods(int start, int end) { return _commerceTaxMethodLocalService.GetCommerceTaxMethods(start, end); }
protected ImageDescriptor ImageDescriptor(SarlAction element) { var jvmElement = this.jvmModelAssociations.GetDirectlyInferredOperation(element); return this.images.ForOperation( element.Visibility, this.adornments[jvmElement] ); }
public void Setup(float partialTick) { this.partialTick = partialTick; currentTexture = null; BindDefaultTexture(); GlStateManager.PushMatrix(); if (ignoreScale) { GlStateManager.Scale(1F / scaleFactor, 1F / scaleFactor, 1); } SetupGl(); StartDrawing(); }
public T Pop<T>(Type declarationType) { object declaration = declarationStack.Pop(); if (declarationType.IsAssignableFrom(declaration.GetType())) { return (T)declaration; } return Fail(declaration, declarationType); }
public void Randomize(Random random) { for (int j = NumInstances() - 1; j > 0; j--) { Swap(j, random.Next(j + 1)); } }
public static T Min<T>(IEnumerable<T> iterable, IComparer<T> comparer) { return IteratorExtensions.Min(iterable.GetEnumerator(), comparer); }
public static Randomizer<T> ANewOptionalRandomizer<T>(Randomizer<T> delegateRandomizer, int optionalPercent) { return new OptionalRandomizer<T>(delegateRandomizer, optionalPercent); }
public override List<Sequence<AminoAcidCompound>> CreateSequences(Sequence<NucleotideCompound> originalSequence) { List<List<AminoAcidCompound>> workingList = new List<List<AminoAcidCompound>>(); var iter = new WindowedSequence<NucleotideCompound>(originalSequence, 3); bool first = true; // If not waiting for a start codon, start translating immediately bool doTranslate = !waitForStartCodon; foreach (var element in iter) { AminoAcidCompound aminoAcid = null; int i = 1; var triplet = new Table.CaseInsensitiveTriplet( element.GetCompoundAt(i++), element.GetCompoundAt(i++), element.GetCompoundAt(i++) ); Codon target = quickLookup[triplet]; // Check for a start if (!doTranslate && target.IsStart()) { doTranslate = true; } if (doTranslate) { if (target != null) aminoAcid = target.GetAminoAcid(); if (aminoAcid == null && TranslateNCodons()) { aminoAci
public CPAttachmentFileEntry FindByLtD_S_Last(DateTime displayDate, int status, OrderByComparator<CPAttachmentFileEntry> orderByComparator) { CPAttachmentFileEntry cpAttachmentFileEntry = FetchByLtD_S_Last(displayDate, status, orderByComparator); if (cpAttachmentFileEntry != null) { return cpAttachmentFileEntry; } var msg = new StringBuilder(); msg.Append(_NO_SUCH_ENTITY_WITH_KEY); msg.Append($"displayDate=\"{displayDate}\""); msg.Append($", status=\"{status}\""); msg.Append("\"}"); throw new NoSuchCPAttachmentFileEntryException(msg.ToString()); }
public void Clear() { mPackedAxisBits = 0; x = 0; y = 0; pressure = 0; size = 0; touchMajor = 0; touchMinor = 0; toolMajor = 0; toolMinor = 0; orientation = 0; }
public static T OptParcelable<T>(Bundle bundle, string key, T fallback) where T : class, IParcelable { if (bundle == null) { return fallback; } return bundle.GetParcelable(key) as T; }
public void SerializePrimitive<S>(S rec, string fieldName, long value) { SerializePrimitive(rec, fieldName, Convert.ToInt64(value)); }
public static Number CalStats(string statsString, DoubleStream numberStream) { return StatsField.ValueOfAlias(statsString).CalStats(numberStream); }
private void OverrideConfigFromFile(Configuration config) { string configFile = GCS_CONFIG_OVERRIDE_FILE.Get(config, config.Get); if (configFile != null) { config.AddResource(new FileStream(configFile, FileMode.Open, FileAccess.Read)); } }
public static Result PreconditionRequired(Path content, string filename) { return PreconditionRequired(content, filename, StaticFileMimeTypes.FileMimeTypes()); }
public bool IsConstantResponse() { double m = double.NaN; for (int b = 0; b < _bins.Length; b++) { if (_bins[b] == 0) continue; if (Var(b) > 1e-14) return false; double mean = Mean(b); if (mean != m) { if (double.IsNaN(m)) m = mean; else if (Math.Abs(m - mean) > 1e-6) return false; } } return true; }
private Dictionary<string, HashSet<string>> GetUsers() { string filter = $"({roleNameRDN}=*)"; var users = new Dictionary<string, HashSet<string>>(); var results = this.Search(roleBase, filter, new string[] { roleMemberRDN }); while (results != null && results.HasMore()) { SearchResult roleResult = (SearchResult)results.Next(); string roleResultName = roleResult.Name; if (roleResultName == "") { continue; } string roleResultValue = roleResultName.Split('=')[1]; var roleAttrs = roleResult.Attributes; var roleAttr = roleAttrs.Get(roleMemberRDN); var valueEnum = roleAttr.GetAll(); while (valueEnum != null && valueEnum.HasMore()) { string value = (string)valueEnum.Next(); string name; if (value.EndsWith($",{userBase}")) { name = value.Substring(0, value.Length - userBase.Length - 1); name = name.Split('=')[1]; } else { log.Debug($"found unrecognized DN: {value}"); continue;
public void Marshall(Job job, ProtocolMarshaller protocolMarshaller) { if (job == null) { throw new SdkClientException("Invalid argument passed to Marshall(...)"); } try { protocolMarshaller.Marshall(job.JobArn, JOBARN_BINDING); protocolMarshaller.Marshall(job.JobId, JOBID_BINDING); protocolMarshaller.Marshall(job.TargetSelection, TARGETSELECTION_BINDING); protocolMarshaller.Marshall(job.Status, STATUS_BINDING); protocolMarshaller.Marshall(job.ForceCanceled, FORCECANCELED_BINDING); protocolMarshaller.Marshall(job.ReasonCode, REASONCODE_BINDING); protocolMarshaller.Marshall(job.Comment, COMMENT_BINDING); protocolMarshaller.Marshall(job.Targets, TARGETS_BINDING); protocolMarshaller.Marshall(job.Description, DESCRIPTION_BINDING); protocolMarshaller.Marshall(job.PresignedUrlConfig, PRESIGNEDURLCONFIG_BINDING); protocolMarshaller.Marshall(job.JobExecutionsRolloutConfig, JOBEXECUTIONSROLLOUTCONFIG_BINDING); protocolMarshaller.Marshall(job.AbortConfig, ABORTCONFIG_BINDING); protocolMarshaller.Marshall(job.CreatedAt, CREATEDAT_BINDING); protocolMarshaller.Marshall(job.LastUpdatedAt, L
public static object Invoke(object bean, Type clazz, string name) { var method = clazz.GetMethod(name, BindingFlags.Instance | BindingFlags.NonPublic | BindingFlags.Public); if (method == null) { throw new NoSuchMethodException($"No method found with name {name}"); } return method.Invoke(bean, null); }
public int ReadTag() { if (IsAtEnd()) { lastTag = 0; return 0; } int tag = ReadRawVarint32(); if ((tag >> WireFormat.TagTypeBits) == 0) { // If we actually read zero, that's not a valid tag. throw ProtobufException.InvalidTag(); } lastTag = tag; return tag; }
public BitmapFactory.Options GetDataBounds() { BitmapFactory.Options options = new BitmapFactory.Options(); options.InJustDecodeBounds = true; byte[] data = GetData(); BitmapFactory.DecodeByteArray(data, 0, data.Length, options); return options; }
public void SetTypes(Type keyType, Type valueType) { delegate.SetTypes(keyType, valueType); }
public Blob UpdateBlobWithMetageneration(string bucketName, string blobName) { // [START updateBlobWithMetageneration] var blob = storage.Get(bucketName, blobName); var updatedInfo = blob.ToBuilder().SetContentType("text/plain").Build(); storage.Update(updatedInfo, BlobTargetOption.MetagenerationMatch()); // [END updateBlobWithMetageneration] return blob; }
public static T CreateIt<T>(params object[] namesAndValues) where T : Model { return ModelDelegate.CreateIt(Model.ModelClass<T>(), namesAndValues); }
public Packer SetXLeftRelative(bool how) { if (how) { gc.gridx = GridBagConstraints.RELATIVE; } else { gc.gridx = 0; } SetConstraints(comp, gc); return this; }
public object Run(FileInfo scriptFile, List<object> list) { string[] args = new string[list.Count]; return Run(scriptFile, list.ToArray(args)); }
public override void Recover() { // not recoverable if (this.GetCoreConnection() == null || !ImplementorUtils.IsImplementationOf(GetCoreConnection(), typeof(IXADataRecorderAware))) { return; } IXADataRecorderAware con = ImplementorUtils.Cast(GetCoreConnection(), typeof(IXADataRecorderAware)); // the connection has to re-establish the state of the message LOG IXADataRecorder msgLogger = this.GetXADataRecorder(); if (msgLogger.IsEmpty()) { return; } this.FireConnectionRecovering(); IDataRecordReplay dataRecordReplay = con.RecoverReplayListener(); if (dataRecordReplay == null) { throw new InvalidOperationException("IPhynixxConnection.RecoverReplayListener() must provide an IDataRecordReplay to be recovered"); } // msgLogger.Recover(); msgLogger.ReplayRecords(dataRecordReplay); this.FireConnectionRecovered(); }
public static MozuUrl GetProductUrl(bool acceptVariantProductCode, bool allowInactive, string productCode, string purchaseLocation, int quantity, string responseFields, bool skipInventoryCheck, bool supressOutOfStock404, string variationProductCode, string variationProductCodeFilter) { UrlFormatter formatter = new UrlFormatter("/api/commerce/catalog/storefront/products/{productCode}?variationProductCode={variationProductCode}&allowInactive={allowInactive}&skipInventoryCheck={skipInventoryCheck}&supressOutOfStock404={supressOutOfStock404}&quantity={quantity}&acceptVariantProductCode={acceptVariantProductCode}&purchaseLocation={purchaseLocation}&variationProductCodeFilter={variationProductCodeFilter}&responseFields={responseFields}"); formatter.FormatUrl("acceptVariantProductCode", acceptVariantProductCode); formatter.FormatUrl("allowInactive", allowInactive); formatter.FormatUrl("productCode", productCode); formatter.FormatUrl("purchaseLocation", purchaseLocation); formatter.FormatUrl("quantity", quantity); formatter.FormatUrl("responseFields", responseFields); formatter.FormatUrl("skipInventoryCheck", skipInventoryCheck); formatter.FormatUrl("supressOutOfStock404", supressOutOfStock404); format
public CmsListDefaultAction RemoveDefaultAction(string actionId) { IEnumerator<CmsListDefaultAction> enumerator = m_defaultActions.GetEnumerator(); while (enumerator.MoveNext()) { CmsListDefaultAction action = enumerator.Current; if (action.Id.Equals(actionId)) { enumerator.Dispose(); m_defaultActions.Remove(action); return action; } } return null; }
public Retrofit Build() { CheckState(baseUrl != null, "baseUrl not set"); var uri = new Uri(baseUrl); var fullUri = $"{SessionProtocol.Of(uri.Scheme)}://{uri.Authority}"; var baseHttpClient = HttpClient.Of( clientFactory, fullUri, configurator.Apply(fullUri, new ClientOptionsBuilder()).Build()); return retrofitBuilder .BaseUrl(ConvertToOkHttpUrl(baseHttpClient, uri.AbsolutePath, GROUP_PREFIX)) .CallFactory(new ArmeriaCallFactory( baseHttpClient, clientFactory, configurator, streaming ? SubscriberFactory.Streaming(callbackExecutor) : SubscriberFactory.Blocking())) .Build(); }
public synchronized void Deserialize(BinaryReader source, ServerVersion sv, StatusUI statusUI) { for (int i = 0; i < vals.Length; i++) { // create new variable from template vals[i] = (BaseType)getTemplate().Clone(); ((ClientIO)vals[i]).Deserialize(source, sv, statusUI); if (statusUI != null && statusUI.UserCancelled()) throw new DataReadException("User cancelled"); } }
public static List<SVGPath> LoadSvgIconFromUri(string uri, Type clazz) { try { using (var inputStream = clazz.Assembly.GetManifestResourceStream(uri) ?? clazz.Assembly.GetManifestResourceStream(uri)) { if (inputStream == null) { throw new NotAvailableException(uri); } using (var reader = new StreamReader(inputStream, Encoding.UTF8)) { string content = reader.ReadToEnd(); return GenerateSvgPathList(content); } } } catch (Exception ex) { throw new CouldNotPerformException($"Could not load URI[{uri}]", ex); } }
public void SetVariableOrder(params Variable[] varOrder) { this.kernel.SetNumberOfVars(varOrder.Length); foreach (var lit in varOrder) { int idx = this.var2idx.Count; this.var2idx[lit.Variable()] = idx; this.idx2var[idx] = lit.Variable(); } }
public Attribute Modify(AttributeDefinition definition, string completeName, string value, AttributeValueQuotes valueQuotes) { return new Attribute( definition ?? this.definition, completeName ?? this.completeName, this.operator, value, // This is not keepable valueQuotes ?? this.valueQuotes, this.templateName, this.line, this.col); }
public ListUserGroupsResult WithGroupList(params Group[] groupList) { if (this.groupList == null) { SetGroupList(new List<Group>(groupList.Length)); } foreach (var ele in groupList) { this.groupList.Add(ele); } return this; }
public static HttpHeaders ToArmeria(Http2Headers headers, bool endOfStream) { var converted = new DefaultHttpHeaders(false, headers.Size, endOfStream); StringJoiner cookieJoiner = null; foreach (var e in headers) { var name = HttpHeaderNames.Of(e.Key); var value = e.Value; // Cookies must be concatenated into a single octet string. // https://tools.ietf.org/html/rfc7540#section-8.1.2.5 if (name.Equals(HttpHeaderNames.COOKIE)) { if (cookieJoiner == null) { cookieJoiner = new StringJoiner(COOKIE_SEPARATOR); } COOKIE_SPLITTER.Split(value).ForEach(cookieJoiner.Add); } else { converted.Add(name, ConvertHeaderValue(name, value)); } } if (cookieJoiner != null && cookieJoiner.Length != 0) { converted.Add(HttpHeaderNames.COOKIE, cookieJoiner.ToString()); } return converted; }
private static string Key2Str(Key k, byte type) { string s = Key2StrImpl(k, type); Key x = Str2KeyImpl(s); Debug.Assert(x.Equals(k), $"bijection fail {k}.{(char)type} <-> {s} <-> {x}"); return s; }
public string ReadUtf() { if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) SibTr.Entry(this, tc, "ReadUtf"); string result; try { // Check that we are in read mode CheckBodyReadable("ReadUtf"); if (requiresInit) LazyInitForReading(); // Mark the current position, so we can return to it if there's an error readStream.Mark(8); // the argument appears to be ignored result = readStream.ReadUTF(); if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) SibTr.Exit(this, tc, "ReadUtf", result); return result; } catch (IOException e) { try { readStream.Reset(); // return to the marked position } catch (IOException e2) { // Handle reset error if necessary } JMSException jmse = (JMSException)JmsErrorUtils.NewThrowable( typeof(MessageEOFException), "END_BYTESMESSAGE_CWSIA0183", null, tc); jmse.InitCause(e); throw jmse; }
public void FinishMapJson(JsonConvert convert, params object[] objs) { this.contentType = this.jsonContentType; if (this.recycleListener != null) this.output = objs; Finish(convert.ConvertMapTo(GetBodyBufferSupplier(), objs)); }
private static void OnePointCrossover(Program gp1, Program gp2, LGP manager, RandEngine randEngine) { // Ensure gp1 is the smaller or equal program if (gp1.Length() > gp2.Length()) { var temp = gp1; gp1 = gp2; gp2 = temp; } int maxDistanceOfCrossoverPoints = Math.Min(gp1.Length() - 1, manager.GetMaxDistanceOfCrossoverPoints()); int i1 = randEngine.Next(gp1.Length()); int i2 = randEngine.Next(gp2.Length()); int crossoverPointDistance = Math.Abs(i1 - i2); int ls1 = gp1.Length() - i1; int ls2 = gp2.Length() - i2; bool notFeasible = true; int count = 0; while (notFeasible && count < 10) { notFeasible = false; if (crossoverPointDistance > maxDistanceOfCrossoverPoints) { notFeasible = true; i1 = randEngine.Next(gp1.Length()); i2 = randEngine.Next
public ValidationResult Check(Entry entry) { var result = new ValidationResult(); if (entry == null || entry.Sequence == null) { return result; } // Checks the CONTIG/CO line locations cover the sequence length if (entry.Sequence.Contigs != null && entry.Sequence.Contigs.Count != 0) { result = CheckContigLocation(entry); } // Collect all sources var sources = new List<SourceFeature>(); foreach (var feature in entry.Features) { if (feature is SourceFeature sourceFeature) { sources.Add(sourceFeature); } } if (!sources.Any()) { return result; } // Checks sequence var sequence = entry.Sequence; if (sequence == null) { return result; } long sequenceSize = sequence.Length; // Collection sources' locations bool hasTransgenic = false; var sourceLocations = new List<Location>(); bool isSourceFocusWithFullSequenceCoverage = false
public static Node GetStrictCmml(string mathml) { try { // get ContentMathML to Strict ContentMathML and finally the abstract CD CMMLInfo cmmlInfo = new CMMLInfo(mathml).ToStrictCmml(); /* Don't use: Abstract2CD nicht benutzen! Sobald ein Knoten tatsächlich umbenannt wird, verliert dieser Knoten alle Kinder! Stattdessen kann auf dem späteren MathNode ein separater toAbstract aufruf erfolgen. */ // and finally only get the first apply node of the ContentMathML return GetFirstApplyNode(cmmlInfo); } catch (Exception e) { logger.Error("failed to get apply node", e); return null; } }
private Matrix GetThisSideMatrix(Matrix B) { if (this.CanBeMutated()) return this.Clone(); else // so far, only other option in JSAT is a dense matrix { DenseMatrix dm = new DenseMatrix(Rows(), Cols()); dm.MutableAdd(this); return dm; } }
public string GetProcessInstanceId() { var execution = associationManager.GetExecution(); return execution != null ? execution.GetProcessInstanceId() : null; }
public bool HandlePopBox(string deviceBrand) { PushHandleGps2Device(); CommandLine exeCommand = null; if (deviceBrand.Contains("HTC")) { exeCommand = AdbCommand("shell", "uiautomator", "runtest", "/data/local/tmp/handlePopBox.jar", "-c", "com.test.device.gps.HTCGPSTest"); } else if (deviceBrand.Contains("Meizu")) { exeCommand = AdbCommand("shell", "uiautomator", "runtest", "/data/local/tmp/handlePopBox.jar", "-c", "com.test.device.gps.MeizuGPSTest"); } string output = ExecuteCommandQuietly(exeCommand); Log.Debug("run test {}", output); try { // give it a second to recover from the activity start System.Threading.Thread.Sleep(1000); } catch (ThreadInterruptedException ie) { throw new InvalidOperationException("Thread was interrupted", ie); } return output.Contains("OK"); }
public static bool VerifyPurchase(string base64PublicKey, string signedData, string signature) { if (string.IsNullOrEmpty(signedData) || string.IsNullOrEmpty(base64PublicKey) || string.IsNullOrEmpty(signature)) { Console.Error.WriteLine("Purchase verification failed: missing data."); return false; } PublicKey key = Security.GeneratePublicKey(base64PublicKey); return Security.Verify(key, signedData, signature); }
[System.Diagnostics.CodeAnalysis.SuppressMessage("GWT", "InputStream")] static Stream AsInputStream(ByteInput input) { if (input == null) throw new ArgumentNullException(nameof(input)); return new StreamWrapper(input); } private class StreamWrapper : Stream { private readonly ByteInput _input; public StreamWrapper(ByteInput input) { _input = input; } public override int Read(byte[] buffer, int offset, int count) { if (buffer == null) throw new ArgumentNullException(nameof(buffer)); if (offset < 0 || count < 0 || offset + count > buffer.Length) throw new ArgumentOutOfRangeException(); if (count == 0) return 0; int firstByte = ReadByte(); if (firstByte == -1) { return 0; // End of stream } buffer[offset] = (byte)firstByte; for (int i = 1; i < count; i++) { int readByte = ReadByte(); if (readByte == -1) { return i; // Return number of bytes read } buffer[offset +
public void Poll(int delta) { if (!soundWorks) { return; } if (paused) { return; } if (music) { if (mod != null) { try { mod.Poll(); } catch (OpenALException e) { Log.Error("Error with OpenGL MOD Player on this platform"); Log.Error(e); mod = null; } } if (stream != null) { try { stream.Update(); } catch (OpenALException e) { Log.Error("Error with OpenGL Streaming Player on this platform"); Log.Error(e); mod = null; } } } }
public int GetGroupForPrimary(long p) { p >>= 16; if (p < scriptStarts[1] || scriptStarts[scriptStarts.Length - 1] <= p) { return -1; } int index = 1; while (p >= scriptStarts[index + 1]) { ++index; } for (int i = 0; i < numScripts; ++i) { if (scriptsIndex[i] == index) { return i; } } for (int i = 0; i < MAX_NUM_SPECIAL_REORDER_CODES; ++i) { if (scriptsIndex[numScripts + i] == index) { return Collator.ReorderCodes.FIRST + i; } } return -1; }
public OvhConfigurationItem CartCartIdItemItemIdConfigurationConfigurationIdGet(string cartId, long itemId, long configurationId) { string qPath = $"/order/cart/{cartId}/item/{itemId}/configuration/{configurationId}"; StringBuilder sb = Path(qPath, cartId, itemId, configurationId); string resp = ExecN(qPath, "GET", sb.ToString(), null); return ConvertTo<OvhConfigurationItem>(resp); }
private void UpdateMeta(BundleMeta meta) { int cols = meta.Size(); densecols = new NumberVector.Factory[cols]; for (int i = 0; i < cols; i++) { if (TypeUtil.SPARSE_VECTOR_VARIABLE_LENGTH.IsAssignableFromType(meta.Get(i))) { throw new AbortException("Filtering sparse vectors is not yet supported by this filter. Please contribute."); } if (TypeUtil.NUMBER_VECTOR_VARIABLE_LENGTH.IsAssignableFromType(meta.Get(i))) { var vmeta = (VectorFieldTypeInformation)meta.Get(i); densecols[i] = (NumberVector.Factory)vmeta.GetFactory(); continue; } } }
public string GetRegistryNumber() { if (ChemicalType.FeatOkTst && ChemicalType.CasFeatRegistryNumber == null) { throw new FeatureMissingException("registryNumber", "de.julielab.jules.types.Chemical"); } return JcasType.LlCas.LlGetStringValue(Addr, ChemicalType.CasFeatCodeRegistryNumber); }
private bool Remove(DeliveryDelayableReference deliveryDelayableReference, bool unlocked) { if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) SibTr.Entry(this, tc, "Remove", $"deliveryDelayableReference={deliveryDelayableReference} unlocked={unlocked} deliveryDelayIndex={deliveryDelayIndex.Count}"); bool reply = false; // synchronize on the lockObject lock (lockObject) { reply = deliveryDelayIndex.Remove(deliveryDelayableReference); } if (reply) { if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) SibTr.Debug(tc, $"Removed ({(unlocked ? "unlocked" : "gone")}) DDT={deliveryDelayableReference.GetDeliveryDelayTime()} objId={deliveryDelayableReference.GetID()} DeliveryDelayIndexSize={deliveryDelayIndex.Count}"); } else { // can happen if the element is already deleted if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) SibTr.Debug(tc, $"Did not remove from index: DDT={deliveryDelayableReference.GetDeliveryDelayTime()} objId={deliveryDelaya
public Task<IssuerBundle> UpdateCertificateIssuerAsync(string vaultBaseUrl, string issuerName, ServiceCallback<IssuerBundle> serviceCallback) { return ServiceFuture.FromResponse(UpdateCertificateIssuerWithServiceResponseAsync(vaultBaseUrl, issuerName), serviceCallback); }
public void MergeWith(ReturnPathType fact) { if (fact.IsTop()) { // other fact is top: no change to this one return; } else if (this.IsTop()) { // this fact is top: copy other fact this.CopyFrom(fact); } else { // neither fact is top: as long as one of the two // facts represents a (possible) normal return, then the result // is a possible normal return if (fact.Type == ReturnPathType.CAN_RETURN_NORMALLY) { this.Type = ReturnPathType.CAN_RETURN_NORMALLY; } } }
void Index(int indexToNavigateTo) { this.index = 0; this.offset = 0; this.nextSplit = StringUtil.IndexOf(path, '.', 0); this.token = null; for (int i = 1; i <= indexToNavigateTo; i++) { if (!AdvanceToNextToken()) { throw new IndexOutOfRangeException($"Index out of bound {indexToNavigateTo} in {path}"); } } }
[Obsolete] public static Terminals CaseInsensitive(string[] ops, string[] keywords) { return Operators(ops).Words(Scanners.Identifier).CaseInsensitiveKeywords(keywords.ToList()).Build(); }
public object GetColumnValue(string columnName) { for (int j = 0; j < columnNames.Length; j++) { if (columnNames[j].Equals(columnName)) { return columnValues[j]; } } return null; }
private int AddView(DMatrixRMaj P, Point2D_F64 a, int index) { double sx = stats.stdX, sy = stats.stdY; double r11 = P.data[0], r12 = P.data[1], r13 = P.data[2], r14 = P.data[3]; double r21 = P.data[4], r22 = P.data[5], r23 = P.data[6], r24 = P.data[7]; double r31 = P.data[8], r32 = P.data[9], r33 = P.data[10], r34 = P.data[11]; // first row A.data[index++] = (a.x * r31 - r11) / sx; A.data[index++] = (a.x * r32 - r12) / sx; A.data[index++] = (a.x * r33 - r13) / sx; A.data[index++] = (a.x * r34 - r14) / sx; // second row A.data[index++] = (a.y * r31 - r21) / sy; A.data[index++] = (
public override void Close() { if (webConnectionCloseComplete) { if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) { Tr.Debug(tc, "WebConnection close previously completed ...return "); } return; } else { // This is for the case to avoid infinite loop if handler destroy ends up calling webconnection close. if (upgradeHandlerDestroyStarted) { return; } lock (this) { // Check it again if (webConnectionCloseComplete || webConnectionCloseOngoing) { if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) { Tr.Debug(tc, "WebConnection close previously completed .....return "); } return; } webConnectionCloseOngoing = true; // Call UpgradeHandler destroy() API. // upgradeHandlerDestroyComplete is needed if close is called again from complete, we do not call destroy again if (!upgradeHandlerDestroyComplete && _upgradeHandler != null) { // Call application handler class destroy try { if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled())
public double[] TransformToVector() { if (vectorLength > vladAggregator.GetVectorLength() || vectorLength <= 0) { throw new Exception($"Vector length should be between 1 and {vladAggregator.GetVectorLength()}"); } // the local features are extracted double[][] features; if (image == null) // first the image is read if the image field is null { try // first try reading with the default class { image = ImageIO.Read(new File(Path.Combine(imageFolder, imageFilename))); } catch (ArgumentException e) // this exception is probably thrown because of a greyscale jpeg image { Console.WriteLine($"Exception: {e.Message} | Image: {imageFilename}"); // retry with the modified class image = ImageIOGreyScale.Read(new File(Path.Combine(imageFolder, imageFilename))); } } // next the image is scaled ImageScaling scale = new ImageScaling(maxImageSizeInPixels); try { image = scale.MaxPixelsScaling(image); } catch (Exception e) { throw new Exception($"Exception thrown when scaling the image!
public override Type[] ResolveTables() { List<Type> classes = new List<Type>(tableNames.Length); string lastTableName = null; resultColumns.Clear(); for (int i = 0; i < tableNames.Length; i++) { string tableName = tableNames[i]; string columnName = columnNames[i]; if (tableName == null) { // maybe JDBC driver does not support it throw new DbOomException(dbOomQuery, "Table name missing in meta-data"); } if (!tableName.Equals(lastTableName) || resultColumns.Contains(columnName)) { resultColumns.Clear(); lastTableName = tableName; DbEntityDescriptor ded = dbEntityManager.LookupTableName(tableName); if (ded == null) { throw new DbOomException(dbOomQuery, "Table name not registered: " + tableName); } classes.Add(ded.GetType()); } resultColumns.Add(columnName); } return classes.ToArray(); }
public bool IsValid(NcssGridParamsBean params, ConstraintValidatorContext constraintValidatorContext) { constraintValidatorContext.DisableDefaultConstraintViolation(); bool isValid = true; // lat/lon point if (params.Latitude != null || params.Longitude != null) { if (!params.HasLatLonPoint()) { isValid = false; constraintValidatorContext.BuildConstraintViolationWithTemplate("{thredds.server.ncSubset.validation.lat_or_lon_missing}").AddConstraintViolation(); } } // lat/lon bb if (params.North != null || params.South != null || params.East != null || params.West != null) { if (!params.HasLatLonBB()) { isValid = false; constraintValidatorContext.BuildConstraintViolationWithTemplate("{thredds.server.ncSubset.validation.wrong_bbox}").AddConstraintViolation(); } if (params.North < params.South) { isValid = false; constraintValidatorContext.BuildConstraintViolationWithTemplate("{thredds.server.ncSubset.validation.north_south}").AddConstraintViolation(); } if (params.East < params.West) { isVa
public AddressBuilderSchemeSpecificPart Set(string name, params object[] values) { parent.Set(name, values); return this; }
public static ConcurrentDictionary<K, V> NewConcurrentMap<K, V>() { return new ConcurrentDictionary<K, V>(); }
public void GenerateSchema(SchemaGenerator generator) { if (inputs == null && outputs == null && inputTypes != null && outputTypes != null) { // Generate both inputs and outputs before making this visible var inputs = GenerateSchema(generator, inputTypes); var outputs = GenerateSchema(generator, outputTypes); this.inputs = inputs; this.outputs = outputs; } }
public SDVariable OnesLike(string name, SDVariable input, DataType dataType) { SDVariable ret = f().OnesLike(name, input, dataType); return UpdateVariableNameAndReference(ret, name); }
public static ThrowableProto SerializeThrowable(Throwable t) { var builder = ThrowableProto.NewBuilder(); if (t is StatusCauseException statusCause) { builder.SetOriginalClassName(statusCause.GetOriginalClassName()); builder.SetOriginalMessage(statusCause.GetOriginalMessage()); } else { builder.SetOriginalClassName(t.GetType().FullName); builder.SetOriginalMessage(t.Message ?? string.Empty); } foreach (var element in t.StackTrace) { builder.AddStackTrace(SerializeStackTraceElement(element)); } if (t.InnerException != null) { builder.SetCause(SerializeThrowable(t.InnerException)); } return builder.Build(); }
public void GetState(Stream ostream) { var copy = new Dictionary<K, V>(); foreach (var entry in this) { K key = entry.Key; V val = entry.Value; copy[key] = val; } using (var oos = new BinaryFormatter()) { oos.Serialize(ostream, copy); } }
private void WrapText() { if (GetFont() == null || text == null) { return; } FontMetrics fm = GetFontMetrics(GetFont()); StringBuilder tempText = new StringBuilder(); StringBuilder finalText = new StringBuilder("<html>"); finalText.Append("<STYLE type='text/css'>BODY { text-align: "); finalText.Append(align.ToString().ToLower()); finalText.Append("}</STYLE><BODY>"); List<string> words = new List<string>(); text = text.Replace("\n", "<BR>"); string[] split = text.Split(new[] { "<BR>" }, StringSplitOptions.None); for (int i = 0; i < split.Length; i++) { if (split[i].Length > 0) { string[] split2 = split[i].Split(new[] { ' ', '\t', '\x0B', '\f', '\r' }, StringSplitOptions.RemoveEmptyEntries); foreach (var word in split2) { if (word.Length > 0) { words.Add(word); } } } if (i < split.Length -
public override void Write(DataOutput out) { Text.WriteString(out, name); bool distinctDisplayName = !name.Equals(displayName); out.WriteBoolean(distinctDisplayName); if (distinctDisplayName) { Text.WriteString(out, displayName); } WritableUtils.WriteVLong(out, value); }
private FileInfo WriteDotSourceToFile(string str) { FileInfo temp; try { temp = new FileInfo(Path.GetTempFileName()); temp = new FileInfo(Path.ChangeExtension(temp.FullName, ".dot.tmp")); using (StreamWriter fout = new StreamWriter(temp.FullName)) { fout.Write(str); } } catch (Exception) { throw new GraphVizException("Error: I/O error while writing the dot source to temp file!"); } return temp; }
public static Dictionary<K, NV> NewFilteredChangedValueWithEntryMap<K, V, NV>( Dictionary<K, V> map, Predicate<KeyValuePair<K, V>> filter, Func<KeyValuePair<K, V>, NV> changingValueFunction) { return map.Where(filter).ToDictionary(entry => entry.Key, changingValueFunction); }
public ConciseSet Intersection(IntSet other) { if (IsEmpty() || other == null || other.IsEmpty()) { return Empty(); } if (other == this) { return Clone(); } return PerformOperation(Convert(other), Operator.AND); }
public void Post(Notification event) { foreach (var entry in listeners) { foreach (var method in entry.Value) { if (method.EventTypeToInvokeOn.IsInstanceOfType(event)) { try { method.MethodToInvokeOnEvent.Invoke(entry.Key, new object[] { event }); } catch (TargetInvocationException e) { // We log this exception and swallow it because we need to ensure we don't // prevent completion of notifications if one listener is badly behaved and // throws an exception of some kind. LOGGER.Log(LogLevel.SEVERE, $"Subscriber invocation failed for method \"{method}\"", e); } catch (IllegalAccessException e) { throw new InvalidOperationException($"{nameof(EventBus)} could not access subscriber {method}", e); } } } } }
private async Task CatchUp(JournalStateMachine stateMachine, CopycatClient client) { long startTime = DateTimeOffset.UtcNow.ToUnixTimeMilliseconds(); // Wait for any outstanding snapshot to complete. await CommonUtils.WaitFor("snapshotting to finish", () => !stateMachine.IsSnapshotting(), WaitForOptions.Defaults().SetTimeoutMs(10 * Constants.MINUTE_MS)); // Loop until we lose leadership or convince ourselves that we are caught up and we are the only // master serving. To convince ourselves of this, we need to accomplish three steps: while (true) { if (mPrimarySelector.GetState() != PrimarySelector.State.PRIMARY) { return; } long lastAppliedSN = stateMachine.GetLastAppliedSequenceNumber(); long gainPrimacySN = new Random().NextInt64(long.MinValue, 0); LOG.Info($"Performing catchup. Last applied SN: {lastAppliedSN}. Catchup ID: {gainPrimacySN}"); var future = client.Submit(new JournalEntryCommand(JournalEntry.NewBuilder().SetSequenceNumber(gainPrimacySN).Build())); try { await future.W
public static Builder At(long millis) { var calendar = new System.DateTime(millis); return With(calendar); }
public bool Abort() { bool ret = false; if (UserLoginModule.LOG.IsDebugEnabled) { UserLoginModule.LOG.Debug("Abort of " + this.principal); } // If our authentication was successful, just return false if (this.principal != null) { // Clean up if overall authentication failed if (this.committed) { this.subject.GetPrincipals().Remove(this.principal); } this.committed = false; this.principal = null; ret = true; } return ret; }
public static ConversionType GetConversionType(Field destination, Field source) { return GetConversionType(destination.Type, source.Type); }
[Obsolete] public static Terminals CaseSensitive(Parser<string> wordScanner, string[] ops, string[] keywords) { return Operators(ops) .Words(wordScanner) .Keywords(keywords) .Build(); }
public static MutableIntArrayND CreateSubArray(MutableIntArrayND parent, IntTuple fromIndices, IntTuple toIndices) { return new MutableSubIntArrayND(parent, fromIndices, toIndices); }
public FloatBuffer Get4x3(int index, FloatBuffer buffer) { MemUtil.Instance.Put4x3(this, index, buffer); return buffer; }
public void ServiceNameCronIdPut(string serviceName, long id, OvhCron body) { string qPath = $"/hosting/web/{serviceName}/cron/{id}"; var sb = Path(qPath, serviceName, id); Exec(qPath, "PUT", sb.ToString(), body); }
public static PrimitiveBuilder<PrimitiveType> Required(PrimitiveTypeName type) { return new PrimitiveBuilder<PrimitiveType>(typeof(PrimitiveType), type) .Repetition(Type.Repetition.Required); }
public override DeleteResult PerformDelete(StorIOSQLite storIOSQLite, T obj) { var deleteQuery = MapToDeleteQuery(obj); int numberOfRowsDeleted = storIOSQLite.LowLevel().Delete(deleteQuery); return DeleteResult.NewInstance(numberOfRowsDeleted, deleteQuery.Table(), deleteQuery.AffectsTags()); }
public void CancelRepairRecord(ORecordId rid) { if (!active) return; if (rid.ClusterPosition < -1) // SKIP TRANSACTIONAL RIDS return; // REMOVE THE RECORD TO REPAIR if (records.Remove(rid) != null) // REMOVED recordCanceled.Increment(); }
public async Task<Page<AnalysisDefinitionInner>> ListSiteAnalysesSlotAsync(string resourceGroupName, string siteName, string diagnosticCategory, string slot) { var response = await ListSiteAnalysesSlotWithServiceResponseAsync(resourceGroupName, siteName, diagnosticCategory, slot); return response.Body; }
public bool IsValidAssignment(Assignment assignment) { Preconditions.CheckArgument(ContainsAll(assignment.GetVariableNumsArray())); foreach (int varNum in assignment.GetVariableNumsArray()) { int index = GetVariableIndex(varNum); if (!vars[index].CanTakeValue(assignment.GetValue(varNum))) { return false; } } return true; }
public string Combine(string pattern1, string pattern2) { if (!WebpipeUtils.HasText(pattern1) && !WebpipeUtils.HasText(pattern2)) { return ""; } else if (!WebpipeUtils.HasText(pattern1)) { return pattern2; } else if (!WebpipeUtils.HasText(pattern2)) { return pattern1; } bool pattern1ContainsUriVar = pattern1.Contains('{'); if (!pattern1.Equals(pattern2) && !pattern1ContainsUriVar && Match(pattern1, pattern2)) { // /* + /hotel -> /hotel ; ""/*.*"" + ""/*.html"" -> /*.html // However /user + /user -> /usr/user ; /{foo} + /bar -> /{foo}/bar return pattern2; } else if (pattern1.EndsWith("/*")) { if (pattern2.StartsWith("/")) { // /hotels/* + /booking -> /hotels/booking return pattern1.Substring(0, pattern1.Length - 1) + pattern2.Substring(1); } else { /
public Matrix3x2d Mul(Matrix3x2dc right, Matrix3x2d dest) { double nm00 = m00 * right.M00() + m10 * right.M01(); double nm01 = m01 * right.M00() + m11 * right.M01(); double nm10 = m00 * right.M10() + m10 * right.M11(); double nm11 = m01 * right.M10() + m11 * right.M11(); double nm20 = m00 * right.M20() + m10 * right.M21() + m20; double nm21 = m01 * right.M20() + m11 * right.M21() + m21; dest.M00 = nm00; dest.M01 = nm01; dest.M10 = nm10; dest.M11 = nm11; dest.M20 = nm20; dest.M21 = nm21; return dest; }
public void Marshall(DisassociateDomainRequest disassociateDomainRequest, ProtocolMarshaller protocolMarshaller) { if (disassociateDomainRequest == null) { throw new SdkClientException("Invalid argument passed to marshall(...)"); } try { protocolMarshaller.Marshall(disassociateDomainRequest.FleetArn, FLEETARN_BINDING); protocolMarshaller.Marshall(disassociateDomainRequest.DomainName, DOMAINNAME_BINDING); } catch (Exception e) { throw new SdkClientException("Unable to marshall request to JSON: " + e.Message, e); } }
public static JsonObject GetJsonQuery(Uri url) { string query = url.Query; JsonObject payload = new JsonObject(); JsonParser parser = new JsonParser(); if (string.IsNullOrEmpty(query)) { return null; } string[] kvPairs = query.TrimStart('?').Split('&'); foreach (string kv in kvPairs) { string[] parts = kv.Split('='); if (parts.Length != 2) { throw new UriFormatException(); } string optName = parts[0]; JsonElement optVal; try { optVal = parser.Parse(WebUtility.UrlDecode(parts[1])); } catch (Exception) { throw new UriFormatException(); } payload.Add(optName, optVal); } return payload; }
public synchronized void Add(string jobFullName, int n) { AddWithoutSaving(jobFullName, n); Save(); }
public static byte[] HmacSha1(byte[] input, byte[] key) { try { using (var mac = new HMACSHA1(key)) { return mac.ComputeHash(input); } } catch (Exception e) { throw new InvalidOperationException("An error occurred during HMAC computation.", e); } }
public void Config(Config config) { log.Trace("Config(Config)"); // Hibernate configuration class is the session factory builder Configuration configuration = null; // Hibernate configuration resource is not null if config parameter is null - for zero-config, or provided by config // parameter itself as attribute string configResource = config != null ? config.GetAttribute("config") : DEFAULT_CONFIG; if (configResource != null) { log.Debug($"Configure Hibernate from configuration resource |{configResource}|."); configuration = new Configuration(); configuration.Configure(configResource); } else { // at this point config parameter is not null log.Debug("Configure Hibernate from j(s)-lib configuration object."); configuration = HibernateConfiguration(config); } string timeout = configuration.GetProperty("hibernate.transaction.timeout"); this.transactionTimeout = timeout != null ? int.Parse(timeout) : 0; string driverClassName = configuration.GetProperty("hibernate.connection.driver_class"); if (driverClassName == null) { throw new ConfigException("Missing driver class, e.g. property name='hibernate.connection.driver_class' and value 'com.mysql.jdbc.Driver'"); } log.Debug($"Load database dri
public static string GenerateEntityQualifiedName(SQLiteDaoDefinition dao, SQLiteEntity entity) { string entityName; if (entity == null) { M2MEntity m2mEntity = M2MEntity.ExtractEntityManagedByDAO(dao.GetElement()); entityName = m2mEntity.GetQualifiedName(); } else { entityName = entity.GetName().ToString(); } return entityName; }
public static T BoxAllAs<T>(object src) { return (T)BoxAll(typeof(T), src, 0, -1); }
public void ScrollListToLine(AbsListView absListView, int line) { if (config.commandLogging) { Log.Debug(config.commandLoggingTag, $"scrollListToLine(\"{absListView}\", \"{line}\")"); } scroller.ScrollListToLine(absListView, line); }
public bool IsNextIn(Context context) { return regex == null || regex.Match(context.GetSource().SubToEnd()).Success; }
public void SaveVCard(VCard vcard) { // XEP-54 § 3.2 "A user may publish or update his or her vCard by sending an IQ of type "set" with no 'to' address…" vcard.SetTo(null); vcard.SetType(IQType.Set); // Also make sure to generate a new stanza id (the given vcard could be a vcard result), in which case we don't // want to use the same stanza id again (although it wouldn't break if we did) vcard.SetStanzaId(StanzaIdUtil.NewStanzaId()); connection().CreateStanzaCollectorAndSend(vcard).NextResultOrThrow(); }
public static void SetUpExample(DatabaseClient client) { var docMgr = client.NewXmlDocumentManager(); var handle = new StringHandle(); docMgr.Write("/batch/read1.xml", handle.With("<read1/>")); var meta2 = new DocumentMetadataHandle(); meta2.GetCollections().Add("/batch/collection2"); docMgr.Write("/batch/read2.xml", meta2, handle.With("<read2/>")); docMgr.Write("/batch/delete1.xml", handle.With("<delete1/>")); }
public static List<SequencePair<S, C>> GetAllPairsAlignments<S, C>(List<S> sequences, PairwiseSequenceAlignerType type, GapPenalty gapPenalty, SubstitutionMatrix<C> subMatrix) where S : Sequence<C> where C : Compound { return RunPairwiseAligners(GetAllPairsAligners(sequences, type, gapPenalty, subMatrix)); }
void InitStartView(CmsUserSettings settings) { IndexedContainer container = GetStartViewContainer("caption"); if (container.Size > 0) { m_startview.Enabled = true; m_startview.ContainerDataSource = container; m_startview.ItemCaptionPropertyId = "caption"; m_startview.NullSelectionAllowed = false; m_startview.NewItemsAllowed = false; if (container.ItemIds.Count > 0) { m_startview.Select(container.ItemIds[0]); if (settings != null) { m_startview.Select(settings.StartView); } } } else { m_startview.Enabled = false; } }
public override object GetData() { var model = GetComponentModel(); object data = model.GetData(); string beanProperty = GetBeanProperty(); if (beanProperty != null) { object sharedData = ((BeanAndProviderBoundComponentModel)GetDefaultModel()).GetData(); if (!IsFlagSet(ComponentModel.UserDataSet) && Util.Equals(data, sharedData)) { var bean = GetBean(); if (bean != null) { data = GetBeanValue(); } } } return data; }
protected void HandleAppendResponseFailure(MemberState member, AppendRequest request, Exception error) { // Log the failed attempt to contact the member. FailAttempt(member, error); }
public IndexFacesResult WithFaceRecords(params FaceRecord[] faceRecords) { if (this.faceRecords == null) { this.faceRecords = new List<FaceRecord>(faceRecords.Length); } foreach (var ele in faceRecords) { this.faceRecords.Add(ele); } return this; }
private JFreeChart AddLineChartOverBar(JFreeChart jfreechart, object[] lineCharts, string lineLegend) { // First we read data for bar series, so we have to go back at the start of the result set try { result.GetResultSet().BeforeFirst(); } catch (SQLException e) { // TODO: Handle exception e.PrintStackTrace(); } isLineCombo = true; lineBarDataset = new DefaultCategoryDataset(); bool hasLegend = false; for (int i = 0; i < lineCharts.Length; i++) { string legend = ""; try { legend = ReplaceParameters(lineLegend); } catch (IndexOutOfRangeException ex) { // No legend set } if (!string.IsNullOrWhiteSpace(legend)) { hasLegend = true; } lineCharts[i] = legend; } int index = chart.GetYColumns().Count - 1; CategoryPlot plot = jfreechart.GetCategoryPlot(); LineAndShapeRenderer renderer2 =
public static AccessCondition GenerateIfSequenceNumberLessThanCondition(long sequenceNumber) { AccessCondition retCondition = new AccessCondition(); retCondition.IfSequenceNumberLessThan = sequenceNumber; return retCondition; }
public static string GetDigest(string oid) { string ret = (string)digestNames[oid]; if (ret == null) return oid; else return ret; }
public override void Configure(IApplicationBuilder app, IWebHostEnvironment env) { app.UseAuthentication(); app.UseAuthorization(); var options = new SessionOptions { IdleTimeout = TimeSpan.FromMinutes(0), Cookie.HttpOnly = true, Cookie.IsEssential = true }; app.UseSession(options); app.UseEndpoints(endpoints => { endpoints.MapControllers() .RequireAuthorization("OAuth2Policy"); endpoints.MapGet("/", async context => { await context.Response.WriteAsync("Hello World"); }); endpoints.MapGet("/api/**", async context => { context.Response.StatusCode = StatusCodes.Status403Forbidden; }).RequireAuthorization("OAuth2Policy"); endpoints.MapGet("/s3/**", async context => { context.Response.StatusCode = StatusCodes.Status403Forbidden; }).RequireAuthorization("OAuth2Policy"); endpoints.MapGet("/webjars/**", async context => { // Permit all for webjars await context.Response.WriteAsync("Webjars"); }); endpoints.MapGet("/swagger-resources", async context => { await context.Response.WriteAsync("Swagger resources"); }); endpoints.MapGet("/api-
public void Deploy() { stager.Stage(); DeployConfiguration config = configBuilder.BuildDeployConfiguration(new List<string> { deployMojo.StagingDirectory }); try { deployMojo.AppEngineFactory.Deployment().Deploy(config); } catch (AppEngineException ex) { throw new MojoExecutionException("App Engine application deployment failed", ex); } }
public override void VisitCode(Code obj) { try { if (methodSignatureIsConstrained) { return; } if (obj.Code == null) { return; } Method m = GetMethod(); if (m.IsSynthetic) { return; } if (m.Name.StartsWith("access$")) { return; } methodIsStatic = m.IsStatic; parmCount = m.GetArgumentTypes().Length; if (parmCount == 0) { return; } parameterDefiners.Clear(); usedParameters.Clear(); stack.ResetForMethodEntry(this); if (BuildParameterDefiners()) { try { base.VisitCode(obj); ReportBugs(); } catch (StopOpcodeParsingException e) { // no more possible parameter definers } } } catch (ClassNotFoundException cnfe) { bugReporter.ReportMissingClass(cnfe); } }
public Query AddAttribute(string attributeName) { return AddAttribute(new QueryAttribute(attributeName, null, null)); }
public static DataSet<Edge<NEW, EV>> TranslateEdgeIds<OLD, NEW, EV>(DataSet<Edge<OLD, EV>> edges, TranslateFunction<OLD, NEW> translator) { return TranslateEdgeIds(edges, translator, PARALLELISM_DEFAULT); }
public DescribeResourceGroupsResult WithResourceGroups(params ResourceGroup[] resourceGroups) { if (this.resourceGroups == null) { this.resourceGroups = new List<ResourceGroup>(resourceGroups.Length); } foreach (var ele in resourceGroups) { this.resourceGroups.Add(ele); } return this; }
private void SplitDays(ProjectCalendar calendar, LinkedList<TimephasedWork> list) { LinkedList<TimephasedWork> result = new LinkedList<TimephasedWork>(); foreach (TimephasedWork assignment in list) { while (assignment != null) { DateTime startDay = DateHelper.GetDayStartDate(assignment.Start); DateTime finishDay = DateHelper.GetDayStartDate(assignment.Finish); // special case - when the finishDay time is midnight, it's really the previous day... if (assignment.Finish.Ticks == finishDay.Ticks) { finishDay = DateHelper.AddDays(finishDay, -1); } if (startDay.Ticks == finishDay.Ticks) { result.AddLast(assignment); break; } TimephasedWork[] split = SplitFirstDay(calendar, assignment); if (split[0] != null) { result.AddLast(split[0]); } assignment = split[1]; } } list.Clear(); foreach (var item in result) { list.AddLast(item); } }
public UdpClient Option<T>(ChannelOption<T> key, T value) { if (key == null) throw new ArgumentNullException(nameof(key)); if (value == null) throw new ArgumentNullException(nameof(value)); return Bootstrap(b => b.Option(key, value)); }
private FileStatus[] GetFileStatus(Path[] paths) { if (paths == null) { return null; } List<FileStatus> results = new List<FileStatus>(paths.Length); for (int i = 0; i < paths.Length; i++) { try { results.Add(GetFileStatus(paths[i])); } catch (FileNotFoundException) { // Do nothing } } return results.ToArray(); }
public object Invoke(ObjectName name, string operationName, object[] parameters, string[] signature) { const string sourceMethod = "invoke"; try { // Look for routing MBean if (ClientProvider.CONNECTION_ROUTING_NAME.Equals(name.GetKeyProperty("name")) && ClientProvider.CONNECTION_ROUTING_DOMAIN.Equals(name.GetDomain())) { // Handle server-level routing if (ClientProvider.CONNECTION_ROUTING_OPERATION_ASSIGN_SERVER.Equals(operationName)) { if (parameters.Length == 3) { // Routing at server level this.mapRouting = new Dictionary<string, object>(); this.mapRouting[ClientProvider.ROUTING_KEY_HOST_NAME] = parameters[0]; this.mapRouting[ClientProvider.ROUTING_KEY_SERVER_USER_DIR] = parameters[1]; this.mapRouting[ClientProvider.ROUTING_KEY_SERVER_NAME] = parameters[2]; return true; } } // Handle host-level routing else if (ClientProvider.CONNECTION_ROUTING_OPERATION_ASSIGN_HOST.Equals(operationName)) { if (parameters.Length == 1) { // Routing at host level this.mapRouting = new Dictionary<string, object>();
using System; using System.Collections.Generic; public static class RxJavaPlugins { public static ParallelFlowable<T> OnAssembly<T>(ParallelFromArray<T> array) { // Implementation of OnAssembly return array; } } public class ParallelFromArray<T> { private readonly Publisher<T>[] publishers; public ParallelFromArray(Publisher<T>[] publishers) { this.publishers = publishers; } } public interface Publisher<T> { // Publisher interface members } public class ParallelFlowable<T> { // ParallelFlowable class members } public static class Flowable { public static ParallelFlowable<T> FromArray<T>(params Publisher<T>[] publishers) { if (publishers.Length == 0) { throw new ArgumentException("Zero publishers not supported"); } return RxJavaPlugins.OnAssembly(new ParallelFromArray<T>(publishers)); } }
public void SetGraph(MeasureCollection[] measures, MeasureCollection[] measureStds, double[] variedParamValues, Color[] colors) { this.measures = measures; this.variedParamValues = variedParamValues; ((GraphScatter)this.plotPanel).SetGraph(measures, measureStds, variedParamValues, colors); UpdateCanvas(false); }
public Type GetActualFieldType(string field) { object fieldValue = GetFieldValue(field); return fieldValue == null ? null : fieldValue.GetType(); }
protected Expression Instantiate(object oldInstance, Encoder out) { // An implementation instance is actually constructed at decode time by calling // ControlBean.EnsureControl on the parent bean. This will create a new impl // instance and run the impl initializer on it. return new Expression(((XMLEncoder)out).Owner, "EnsureControl", null); }
protected EmbeddedChannel NewContentCompressor(ChannelHandlerContext ctx, string contentEncoding) { if (GZIP.Equals(contentEncoding, StringComparison.OrdinalIgnoreCase) || X_GZIP.Equals(contentEncoding, StringComparison.OrdinalIgnoreCase)) { return NewCompressionChannel(ctx, ZlibWrapper.GZIP); } if (DEFLATE.Equals(contentEncoding, StringComparison.OrdinalIgnoreCase) || X_DEFLATE.Equals(contentEncoding, StringComparison.OrdinalIgnoreCase)) { return NewCompressionChannel(ctx, ZlibWrapper.ZLIB); } // 'identity' or unsupported return null; }
protected override void LoadPlugins() { pickingPlugin = new PickingGraphMousePlugin<string, string>(); scalingPlugin = new ScalingGraphMousePlugin(new CrossoverScalingControl(), 0, in, out); editingPlugin = new RoleGraphEditingPlugin(); Add(scalingPlugin); SetMode(Mode.EDITING); }
public async Task SendGrafanaDashboardAsync(string classPathLocation) { if (!corePlugin.IsReportToElasticsearch()) { return; } try { var dashboard = GetGrafanaDashboard(classPathLocation); var body = new Dictionary<string, object> { { "dashboard", dashboard }, { "overwrite", true } }; await AsyncGrafanaRequest("POST", "/api/dashboards/db", body); } catch (IOException e) { logger.Warn(e.Message, e); } }
public void Draw(GraphicContext graphicContext) { if (!this.visible) { return; } if (this.mapViewDimension.GetDimension() == null) { return; } if (this.IsRedrawNecessary()) { Redraw(this.mapScaleCanvas); this.redrawNeeded = false; } int positionLeft = CalculatePositionLeft(0, this.mapViewDimension.GetDimension().Width, this.mapScaleBitmap.GetWidth()); int positionTop = CalculatePositionTop(0, this.mapViewDimension.GetDimension().Height, this.mapScaleBitmap.GetHeight()); graphicContext.DrawBitmap(this.mapScaleBitmap, positionLeft, positionTop); }
public List<string> ServiceNamePcaPcaServiceNameSessionsSessionIdFilesGet(string serviceName, string pcaServiceName, string sessionId, string name) { string qPath = $"/cloud/{serviceName}/pca/{pcaServiceName}/sessions/{sessionId}/files"; StringBuilder sb = Path(qPath, serviceName, pcaServiceName, sessionId); Query(sb, "name", name); string resp = Exec(qPath, "GET", sb.ToString(), null); return ConvertTo(resp, typeof(string)); }
public VocabCache<T> BuildMergedVocabulary(VocabCache<T> vocabCache, bool fetchLabels) { if (cache == null) cache = new AbstractCache.Builder<T>().Build(); for (int t = 0; t < vocabCache.NumWords(); t++) { string label = vocabCache.WordAtIndex(t); if (label == null) continue; T element = vocabCache.WordFor(label); // skip this element if it's a label, and user doesn't want labels to be merged if (!fetchLabels && element.IsLabel()) continue; // element.SetIndex(t); cache.AddToken(element); cache.AddWordToIndex(element.GetIndex(), element.GetLabel()); // backward compatibility code cache.PutVocabWord(element.GetLabel()); } if (cache.NumWords() == 0) throw new InvalidOperationException("Source VocabCache has no indexes available, transfer is impossible"); /* Now, when we have transferred vocab, we should roll over iterator, and gather labels, if any */ log.Info($"Vocab size before labels: {cache.NumWords()}"); if (fetchLabels) { foreac
public string Description(Uri uri) { SchemeProcessor reader = SearchForSupportedProcessor(uri); return reader.Description(uri); }
public static Statement GenerateNullCheck(TreeMaker maker, Node variable, VariableDeclaration varDecl, Node source) { NullCheckExceptionType exceptionType = source.GetAst().ReadConfiguration(ConfigurationKeys.NON_NULL_EXCEPTION_TYPE); if (exceptionType == null) exceptionType = NullCheckExceptionType.NULL_POINTER_EXCEPTION; if (IsPrimitive(varDecl.VarType)) return null; Name fieldName = varDecl.Name; LiteralExpression message = maker.Literal(exceptionType.ToExceptionMessage(fieldName.ToString())); if (exceptionType == NullCheckExceptionType.ASSERTION) { return maker.Assert(maker.Binary(CTC.NOT_EQUAL, maker.Ident(fieldName), maker.Literal(CTC.BOT, null)), message); } Expression exType = GenTypeRef(variable, exceptionType.GetExceptionType()); Expression exception = maker.NewClass(null, new List<Expression>(), exType, new List<Expression> { message }, null); Statement throwStatement = maker.Throw(exception); Block throwBlock = maker.Block(0, new List<Statement> { throwStatement }); return maker.If(maker.Binary(CTC.EQUAL, maker.Ident(fieldName), maker.Literal(CT
protected Vertx CreateVertx(VertxEndpointConfiguration endpointConfiguration) { Vertx[] vertx = new Vertx[1]; var loading = new TaskCompletionSource<bool>(); Action<AsyncResult<Vertx>> asyncLoadingHandler = event => { vertx[0] = event.Result; loading.SetResult(true); log.Info("Vert.x instance started"); }; if (endpointConfiguration.Port > 0) { if (log.IsDebugEnabled) { log.Debug(string.Format("Creating new Vert.x instance '{0}:{1}' ...", endpointConfiguration.Host, endpointConfiguration.Port)); } var vertxOptions = new VertxOptions(); vertxOptions.ClusterPort = endpointConfiguration.Port; vertxOptions.ClusterHost = endpointConfiguration.Host; vertxFactory.ClusteredVertx(vertxOptions, asyncLoadingHandler); } else { if (log.IsDebugEnabled) { log.Debug(string.Format("Creating new Vert.x instance '{0}:{1}' ...", endpointConfiguration.Host, 0L)); } var vertxOptions = new VertxOptions(); vertxOptions.ClusterPort
public void CloseStream(IConnection conn, int streamId) { log.Info($"closeStream stream id: {streamId} connection: {conn.GetSessionId()}"); if (conn is IStreamCapableConnection scConn) { IClientStream stream = scConn.GetStreamById(streamId); if (stream != null) { if (stream is IClientBroadcastStream bs) { // this is a broadcasting stream (from Flash Player to Red5) IBroadcastScope bsScope = GetBroadcastScope(conn.GetScope(), bs.GetPublishedName()); if (bsScope != null && conn is BaseConnection baseConn) { baseConn.UnregisterBasicScope(bsScope); } } stream.Close(); scConn.DeleteStreamById(streamId); // in case of broadcasting stream, status is sent automatically by Red5 if (!(stream is IClientBroadcastStream)) { StreamService.SendNetStreamStatus(conn, StatusCodes.NS_PLAY_STOP, "Stream closed by server", stream.GetName(), Status.STATUS, streamId); } } else { log.Info($"Stream not found - streamId: {streamId} connecti
public Contained LookupId(string searchId) { LocalContained c = _lookup_id(searchId); if (c == null) return null; return ContainedHelper.Narrow(c.GetReference()); }
public List<EventSubscriptionEntity> FindConditionalStartEventSubscription() { var parameter = new ListQueryParameterObject(); ConfigureParameterObject(parameter); return GetDbEntityManager().SelectList<EventSubscriptionEntity>("selectConditionalStartEventSubscription", parameter); }
public string BuildReport() { List<string> lockedResources; if (bool.TryParse(GetParamShowOwnLocks(), out bool showOwnLocks) && showOwnLocks) { lockedResources = GetLockedResources(); } else { lockedResources = new List<string>(GetBlockingLockedResources()); } lockedResources.Sort(); var lockParams = new Dictionary<string, string>(); if (GetParamResource() != null) { lockParams[PARAM_RESOURCE] = GetParamResource(); } if (GetParamResourceList() != null) { lockParams[PARAM_RESOURCELIST] = GetParamResourceList(); } if (GetParamShowOwnLocks() != null) { lockParams[PARAM_SHOWOWNLOCKS] = GetParamShowOwnLocks(); } if (GetParamIncludeRelated() != null) { lockParams[PARAM_INCLUDERELATED] = GetParamIncludeRelated(); } var list = new CmsLockedResourcesList( GetJsp(), lockedResources, CmsResource.GetParentFolder(GetResourceList()[0]), lockParams); list.ActionDialog(); list.GetList
public override StopWorkspacesResult StopWorkspaces(StopWorkspacesRequest request) { request = BeforeClientExecution(request); return ExecuteStopWorkspaces(request); }
public void SetGoogleAuthScratchCodes(List<int> googleAuthScratchCodes) { if (googleAuthScratchCodes != null) { this.googleAuthScratchCodes = new List<int>(googleAuthScratchCodes); } }
public HashSet<T> Tokens<T>() { if (tokenSet == null) { tokenSet = new AbstractSetView<T> { Size = () => 0, CreateIterator = () => new Iterator<T> { HasNext = () => false, Next = () => throw new InvalidOperationException("No more elements."), HasNextWithTransaction = (transaction) => throw new NotSupportedException(), NextWithTransaction = (transaction) => throw new NotSupportedException(), RemoveWithTransaction = (transaction) => throw new NotSupportedException() } }; } return tokenSet; } // Supporting classes for the above method would need to be defined: // 1. AbstractSetView<T> // 2. Iterator<T>
public static double Eigen(Matrix A, double[] v, double p, double tol) { return Eigen(A, v, p, tol, Math.Max(20, 2 * A.Nrows())); }
private static string Get(Type type, Attribute annotation) { type = BoxIfPrimitive(type); if (annotation == null && type is Type && !type.IsArray) { return type.FullName; } var result = new StringBuilder(); if (annotation != null) { result.Append(annotation.ToString()).Append("/"); } TypeToString(type, result, true); return result.ToString(); }
public OvhTask ServiceNameDatabasePost(string serviceName, OvhDatabaseCapabilitiesTypeEnum capabilitie, string password, OvhExtraSqlQuotaEnum quota, OvhDatabaseTypeEnum type, string user, OvhVersionEnum version) { string qPath = "/hosting/web/" + serviceName + "/database"; StringBuilder sb = Path(qPath, serviceName); var o = new Dictionary<string, object>(); AddBody(o, "capabilitie", capabilitie); AddBody(o, "password", password); AddBody(o, "quota", quota); AddBody(o, "type", type); AddBody(o, "user", user); AddBody(o, "version", version); string resp = Exec(qPath, "POST", sb.ToString(), o); return ConvertTo(resp, typeof(OvhTask)); }
protected static void AddScope(string name, string criteria) { ModelDelegate.AddScope(ModelClass().Name, name, criteria); }
public void SetStep(object step) { GetStateHelper().Put(PropertyKeys.Step, step); }
public void Set(Segment1D segment, double curviline, double shift) { if (segment == null) throw new ArgumentNullException(nameof(segment), "Parameter cannot be null."); SegmentProperty.Set(new WeakReference<Segment1D>(segment)); XProperty.Set(curviline); YProperty.Set(shift); }
public Request SearchDisjunctiveFacetingAsync(Query query, ICollection<string> disjunctiveFacets, IDictionary<string, ICollection<string>> refinements, CompletionHandler completionHandler) { return SearchDisjunctiveFacetingAsync(query, disjunctiveFacets, refinements, null, completionHandler); }
public override void SetLocation(int x, int y) { if (x != nextX || y != nextY) { nextX = x; nextY = y; MonocleWindowManager.GetInstance().RepaintAll(); } }
public static HtmlElement CreateIFrameElement(string name) { return GetDOMImpl().CreateIFrameElement(Document.Get(), name); }
public Self Bindings(params Binding[] bindings) { return Bindings(Guiceable.Bindings(bindings)); }
public void Merge(string parity, string source, string codecId, int[] checksums) { if (FSNamesystem.LOG.IsDebugEnabled) { FSNamesystem.LOG.Debug($"merge {parity} to {source}"); } if (IsInSafeMode()) { throw new SafeModeException($"merge: cannot merge {parity} to {source}", safeMode); } // Verify parity and source if (string.IsNullOrEmpty(source) || string.IsNullOrEmpty(parity)) { throw new IOException("merge: source file name or parity file name is empty"); } // Verify checksums if (checksums == null || checksums.Length == 0) { throw new IOException("merge: checksum array is empty or null"); } // Verify codec RaidCodec codec = RaidCodec.GetCodec(codecId); if (codec == null) { throw new IOException($"merge: codec {codecId} doesn't exist"); } INode[] sourceINodes = dir.GetExistingPathINodes(source); INode[] parityINodes = dir.GetExistingPathINodes(parity); WriteLock();
void ExtractCalibration(Homography2D_F64 Hinv, CameraPinhole c) { CommonOps_DDF3.MultTransA(Hinv, W0, tmp); CommonOps_DDF3.Mult(tmp, Hinv, Wi); ConvertW(Wi, c); }
protected void BrowseOnDesktopIfNeeded(Uri uri) { if (!browseOnDesktop) { return; } var desktop = System.Diagnostics.Process.Start("explorer.exe", uri.AbsoluteUri); if (desktop == null) { throw new InvalidOperationException($"Failed to browse the URI: {uri}"); } }
public static bool EqualContents(int[][] xs, int[][] ys) { if (xs == null) return ys == null; if (ys == null) return false; if (xs.Length != ys.Length) return false; for (int i = xs.Length - 1; i >= 0; i--) { if (!EqualContents(xs[i], ys[i])) return false; } return true; }
private static BucketSizeType BucketSizeFromInterval(HistogramIntervalType interval) { BucketSizeType bucketSize; switch (interval) { case HistogramIntervalType.Minute: bucketSize = BucketSizeType.Minute; break; case HistogramIntervalType.Hour: bucketSize = BucketSizeType.Hour; break; case HistogramIntervalType.Day: bucketSize = BucketSizeType.Day; break; case HistogramIntervalType.Week: bucketSize = BucketSizeType.Week; break; case HistogramIntervalType.Month: bucketSize = BucketSizeType.Month; break; default: bucketSize = BucketSizeType.Day; break; } return bucketSize; }
public static string Translate(string str) { if (str == null) return ""; int index, last = 0, endIndex; StringBuilder sb = null; string tagName; while ((index = str.IndexOf('<', last)) != -1) { // read tagname int len = str.Length; char c; for (endIndex = index + 1; endIndex < len; endIndex++) { c = str[endIndex]; if ((c < 'a' || c > 'z') && (c < 'A' || c > 'Z')) break; } tagName = str.Substring(index + 1, endIndex - index - 1); if (CompareTagName(tagName)) { if (sb == null) { sb = new StringBuilder(); last = 0; } sb.Append(str.Substring(last, index - last + 1)); sb.Append("invalidTag"); last = endIndex; } else if (sb != null) { sb.Append(str.Substring(last, index - last + 1)); last = index +
public override void OnClose() { base.OnClose(); if (phoneStateListener != null) telephonyManager.Listen(phoneStateListener, PhoneStateListener.ListenNone); }
public void Error(string message) { if (GetLevel() > (int)Level.ERROR) return; LogMessage(Level.ERROR, message, null); }
public string GetAttribute(string theKey) { if (string.IsNullOrWhiteSpace(theKey)) { throw new ArgumentException("theKey cannot be null or blank", nameof(theKey)); } if (myAttributes == null) { return null; } myAttributes.TryGetValue(theKey, out var value); return value; }
private bool Check(File fingerprintFile, TaskListener listener) { try { Fingerprint fp = LoadFingerprint(fingerprintFile); if (fp == null || !fp.IsAlive()) { listener.GetLogger().Log($"deleting obsolete {fingerprintFile}"); fingerprintFile.Delete(); return true; } else { // get the fingerprint in the official map so have the changes visible to Jenkins // otherwise the mutation made in FingerprintMap can override our trimming. fp = GetFingerprint(fp); return fp.Trim(); } } catch (IOException e) { Functions.PrintStackTrace(e, listener.Error($"Failed to process {fingerprintFile}")); return false; } }
protected void SetAlpha(float alpha) { Condition.Instance.EnsureAtLeast(alpha, 0, "The alpha must be at least 0"); Condition.Instance.EnsureAtMaximum(alpha, 1, "The alpha must be at maximum 1"); this.alpha = alpha; }
public JTSLineStringExpression<LineString> InteriorRingN(int idx) { return JTSGeometryExpressions.LineStringOperation(SpatialOps.INTERIOR_RINGN, mixin, ConstantImpl.Create(idx)); }
private static float ComputeLowestRoot(float a, float b, float c, float maxR) { float determinant = b * b - 4.0f * a * c; if (determinant < 0.0f) return float.PositiveInfinity; float sqrtD = (float)Math.Sqrt(determinant); float r1 = (-b - sqrtD) / (2.0f * a); float r2 = (-b + sqrtD) / (2.0f * a); if (r1 > r2) { float temp = r2; r2 = r1; r1 = temp; } if (r1 > 0.0f && r1 < maxR) { return r1; } if (r2 > 0.0f && r2 < maxR) { return r2; } return float.PositiveInfinity; }
public EClass GetGeometryData() { if (geometryDataEClass == null) { geometryDataEClass = (EClass) EPackage.Registry.INSTANCE.GetEPackage(GeometryPackage.eNS_URI).GetEClassifiers()[4]; } return geometryDataEClass; }
public string GetFullPath() { string path = m_resource.GetRootPath(); if (m_siteMode != SITE_MODE_ROOT && m_cms != null) { string site = GetSite(); if (path.StartsWith(site)) { path = path.Substring(site.Length); } } return path; }
public void Send(PeerMessage message) { logger.Trace($"Sending msg {message.GetType()} to {this}"); if (IsConnected()) { ByteBuffer data = message.GetData(); data.Rewind(); connectionManager.OfferWrite(new WriteTask(socketChannel, data, new WriteListener() { public void OnWriteFailed(string message, Exception e) { if (e == null) { logger.Info(message); } else if (e is ConnectionClosedException) { logger.Debug(message, e); Unbind(true); } else { LoggerUtils.WarnAndDebugDetails(logger, message, e); } } public void OnWriteDone() { } }), 1, TimeUnit.Seconds); } else { logger.Trace($"Attempting to send a message to non-connected peer {this}!"); Unbind(true); } }
public void Stop() { if (runnerThread == null) { return; } runnerThread.Interrupt(); nsLock.EnterWriteLock(); try { if (runnerThread == null) { return; } this.Cancel(); this.Close(); while (runnerThread.IsAlive) { runnerThread.Interrupt(); try { runnerThread.Join(1000); } catch (Exception e) { Console.WriteLine(e); return; } } runnerThread = null; } catch (Exception e) { Console.WriteLine(e); } finally { nsLock.ExitWriteLock(); } }
private List<ValueTuple<int, int>> DoGenerateEdgesWithOmitList() { int numberOfNodes = GetConfiguration().GetNumberOfNodes(); int numberOfEdges = GetConfiguration().GetNumberOfEdges(); long maxEdges = numberOfNodes * (numberOfNodes - 1) / 2; List<ValueTuple<int, int>> edges = new List<ValueTuple<int, int>>(); foreach (long index in EdgeIndices(numberOfEdges, maxEdges)) { edges.Add(IndexToEdgeBijection(index)); } return edges; }
public string TagKey(string key) { string conventionKey = delegate.TagKey(key); conventionKey = StartUnderscorePattern.Replace(conventionKey, ""); // 2 conventionKey = SfPattern.Replace(conventionKey, ""); // 2 if (!StartLettersPattern.IsMatch(conventionKey)) // 3 { conventionKey = "a" + conventionKey; } return StringUtils.Truncate(conventionKey, KeyMaxLength); // 1 }
public PersonCreditList<CreditBasic> GetPersonCombinedCredits(int personId, string language) { TmdbParameters parameters = new TmdbParameters(); parameters.Add(Param.ID, personId); parameters.Add(Param.LANGUAGE, language); URL url = new ApiUrl(apiKey, MethodBase.PERSON) .SubMethod(MethodSub.COMBINED_CREDITS) .BuildUrl(parameters); string webpage = httpTools.GetRequest(url); try { var mapper = new ObjectMapper(); mapper.AddMixIn<PersonCreditList<CreditBasic>, PersonCreditsMixIn>(); var tr = new TypeReference<PersonCreditList<CreditBasic>>(); return mapper.ReadValue<PersonCreditList<CreditBasic>>(webpage, tr); } catch (IOException ex) { throw new MovieDbException(ApiExceptionType.MAPPING_FAILED, "Failed to get person combined credits", url, ex); } }
protected void RemoveExpiredPortletCookies(HttpRequest request) { var sessionOnlyCookies = GetSessionOnlyPortletCookieMap(request); var keysToRemove = new List<string>(); foreach (var entry in sessionOnlyCookies) { string key = entry.Key; var sessionOnlyCookie = entry.Value; if (sessionOnlyCookie.Expires.IsBeforeNow()) { keysToRemove.Add(key); } } foreach (var key in keysToRemove) { sessionOnlyCookies.Remove(key); } }
public void PrintHtmlLogo(TextWriter out, ResourceBundle reg) { char chMenubar = HBasePanel.GetFirstToUpper(this.GetProperty(DBParams.LOGOS), 'H'); if (chMenubar == 'H') { if (((BasePanel)this.GetScreenField()).IsMainMenu()) chMenubar = 'Y'; } if (chMenubar == 'Y') { string strNav = reg.GetString("htmlLogo"); strNav = Utility.ReplaceResources(strNav, reg, null, null); string strScreen = ((BasePanel)this.GetScreenField()).GetScreenURL(); strScreen = Utility.EncodeXML(strScreen); string strUserName = ((MainApplication)this.GetTask().GetApplication()).GetUserName(); if (Utility.IsNumeric(strUserName)) strUserName = DBConstants.BLANK; string strLanguage = this.GetTask().GetApplication().GetLanguage(false); strNav = Utility.Replace(strNav, HtmlConstants.URL_TAG, strScreen); strNav = Utility.Replace(strNav, HtmlConstants.USER_NAME_TAG, strUserName); strNav = Utility.Replace(strNav, "<language/>",
public override void OnBindViewHolder(ViewHolder viewHolder, int position) { var device = ClientsGuiList.Get().GetClients()[position]; viewHolder.IdentifierTextView.Text = device.GetIdentifier(); viewHolder.Logo.SetImageDrawable(new IconicsDrawable(context) .Icon(FontAwesome.Icon.faw_android) .Color(context.Resources.GetColor(Resource.Color.red)) .SizeDp(30)); viewHolder.SetOnClickListener(new ViewClickListener(v => { itemClickListener.ClientItemClicked(device); })); }
void Note(Notes note) { Debug.Assert(this.allnotes != null); int gid = note.gid; int id = note.id; NoteSort sort = note.GetSort(); var sortnotes = this.allnotes[sort]; Debug.Assert(sortnotes != null); switch (sort) { case NoteSort.TYPE: case NoteSort.GROUP: case NoteSort.DIM: Debug.Assert(!sortnotes.ContainsKey(id)); sortnotes[id] = note; break; case NoteSort.VAR: long gv = Nc4Notes.GetVarId((VarNotes)note); Debug.Assert(!sortnotes.ContainsKey(gv)); sortnotes[gv] = note; break; } }
public IntegerProperty DepthProperty() { if (this.depth == null) { this.depth = new ReadOnlyIntegerWrapper(this, MathFXAttributeNames.DEPTH); this.depth.Bind(Bindings.Subtract(MaxZProperty(), MinZProperty())); } return this.depth; }
public static ExprDouble ToExprDouble(Expression left, Expression right, int operation) { return new OpDouble(left, right, operation); }
public WebSocketPublisher ToWS() { return new WebSocketPublisher() .Coding(coding) .Facade(facade) .HostName(hostName) .Port(port) .UrlPath(urlPath); }
public IList<IfcLightDistributionData> GetDistributionData() { return (IList<IfcLightDistributionData>)eGet(Ifc2x3tc1Package.Literals.IFC_LIGHT_INTENSITY_DISTRIBUTION__DISTRIBUTION_DATA, true); }
public static MSColor ValueOfKnownColor(string name) { foreach (var color in KNOWN_COLORS) { if (color.Name.Equals(name, StringComparison.OrdinalIgnoreCase)) { return color; } else if (color.GetLocaleName() != null && color.GetLocaleName().Equals(name, StringComparison.OrdinalIgnoreCase)) { return color; } } return null; }
public void Marshall(AddFacetToObjectRequest addFacetToObjectRequest, IProtocolMarshaller protocolMarshaller) { if (addFacetToObjectRequest == null) { throw new SdkClientException("Invalid argument passed to Marshall(...)"); } try { protocolMarshaller.Marshall(addFacetToObjectRequest.DirectoryArn, DIRECTORYARN_BINDING); protocolMarshaller.Marshall(addFacetToObjectRequest.SchemaFacet, SCHEMAFACET_BINDING); protocolMarshaller.Marshall(addFacetToObjectRequest.ObjectAttributeList, OBJECTATTRIBUTELIST_BINDING); protocolMarshaller.Marshall(addFacetToObjectRequest.ObjectReference, OBJECTREFERENCE_BINDING); } catch (Exception e) { throw new SdkClientException("Unable to marshall request to JSON: " + e.Message, e); } }
public bool Send(PooledByteBuffer pooled) { if (IsWritesShutdown()) { throw new IOException("Channel is closed."); } bool result = SendInternal(pooled); if (result) { Flush(); } return result; }
private string Parse(Matrix matrix) { string transform = ""; if (matrix != null) { double dx = matrix.GetDx(); double dy = matrix.GetDy(); if (matrix.GetXx() != 0 && matrix.GetYy() != 0 && matrix.GetXx() != 1 && matrix.GetYy() != 1) { transform += $"scale({matrix.GetXx()}, {matrix.GetYy()})"; // scale first // no space between 'scale' and '(' !!! dx /= matrix.GetXx(); dy /= matrix.GetYy(); } transform += $" translate({(float)dx}, {(float)dy})"; // no space between 'translate' and '(' !!! } return transform; }
public static void EncodeDesc(bool? value, byte[] dst, int dstOffset) { const byte NULL_BYTE_LOW = 0; // Set this to the appropriate value for NULL_BYTE_LOW if (value == null) { dst[dstOffset] = NULL_BYTE_LOW; } else { dst[dstOffset] = value.Value ? (byte)127 : (byte)128; } }
public void UpdateExecutionStateAsynchronously(ExecutionState newExecutionState, string optionalMessage) { Action command = () => UpdateExecutionState(newExecutionState, optionalMessage); this.executionGraph.ExecuteCommand(command); }
private void RegisterInternal(JobID id, Path[] clientPaths) { string[] cacheNames = new string[clientPaths.Length]; for (int i = 0; i < clientPaths.Length; ++i) { var key = new LibraryTranslationKey(id, clientPaths[i]); cacheNames[i] = this.clientPathToCacheName[key]; if (cacheNames[i] == null) { throw new IOException($"Cannot map {clientPaths[i]} to cache name"); } } // Register as regular RegisterInternal(id, cacheNames); }
public void ClearPassword() { foreach (char[] pw in this.secrets) { for (int i = 0; i < pw.Length; i++) { pw[i] = '\0'; // Set each character to null character } } /* Now discard the list. */ this.secrets = new List<char[]>(); }
public static string GetPremadeWidgetHtml(string guildId, WidgetTheme theme, int width, int height) { if (string.IsNullOrEmpty(guildId)) throw new ArgumentNullException(nameof(guildId)); if (theme == null) throw new ArgumentNullException(nameof(theme)); if (width < 0) throw new ArgumentOutOfRangeException(nameof(width), "Width cannot be negative."); if (height < 0) throw new ArgumentOutOfRangeException(nameof(height), "Height cannot be negative."); return string.Format(WIDGET_HTML, guildId, theme.ToString().ToLower(), width, height); }
public HttpClientResponseBuilder WithCookie(string cookieName, string cookieValue) { Action lastAction = newRule.GetLastAction(); CookieAction cookieAction = new CookieAction(lastAction, cookieName, cookieValue); newRule.OverrideLastAction(cookieAction); return this; }
public IRenderingElement Generate(IAtomContainer container, RendererModel model) { ElementGroup numbers = new ElementGroup(); if (!model.GetParameter<WillDrawAtomNumbers>().Value) return numbers; Vector2D offset = new Vector2D(this.offset.Value.x, -this.offset.Value.y); offset.Scale(1 / model.GetParameter<Scale>().Value); int number = 1; foreach (IAtom atom in container.Atoms()) { Point2D point = new Point2D(atom.GetPoint2D()); point.Add(offset); numbers.Add(new TextElement(point.X, point.Y, number.ToString(), colorByType.Value ? atomColorer.Value.GetAtomColor(atom) : textColor.Value)); number++; } return numbers; }
private List<DependencyNode> DepLevelOrderList(DependencyNode rootNode) { // Create list to store aggregate list of all nodes in tree List<DependencyNode> aggDepNodeList = new List<DependencyNode>(); // Create list that stores current breadth List<DependencyNode> nodeChildList = rootNode.GetChildren(); // LevelOrderList.Add(rootNode); while (nodeChildList.Count > 0) { nodeChildList = LevelTraverseTreeList(nodeChildList, aggDepNodeList); } return aggDepNodeList; }
public void SetAuthentication(HttpWebRequest http) { if (user == null || pass == null || user.Length <= 0 || pass.Length <= 0) { return; } string base64login = Convert.ToBase64String(System.Text.Encoding.ASCII.GetBytes(user + ":" + pass)); http.Headers.Add("Authorization", "Basic " + base64login); }
public static int GetIntArg(CommandLine cl, Option option, int defaultValue) { int arg = defaultValue; if (cl.HasOption(option.LongOpt)) { string argOption = cl.GetOptionValue(option.LongOpt); arg = int.Parse(argOption); } return arg; }
public Dictionary<string, string> ParamMap() { var params = new Dictionary<string, string>(); if (GetQuery() != null) params["q"] = GetQuery(); if (GetMode() != null) params["mode"] = GetMode().ToString(); if (GetStatus() != null) params["status"] = GetStatus(); if (GetAssignedTo() != null) params["assigned_to"] = GetAssignedTo(); if (GetModifiedFrom() != null) params["modified_from"] = GetModifiedFrom(); if (GetModifiedTo() != null) params["modified_to"] = GetModifiedTo(); if (GetPublishedFrom() != null) params["published_from"] = GetPublishedFrom(); if (GetPublishedTo() != null) params["published_to"] = GetPublishedTo(); if (GetCount() != null) params["count"] = GetCount().ToString(); if (GetOffset() != null) params["offset"] = GetOffset().ToString(); if (GetOrderBy() != null) params["order"] = GetOrderBy(); if (GetOutputType()
public static HashSet<string> GetFixedURLs(ContentSpec contentSpec) { HashSet<string> fixedUrls = new HashSet<string>(); foreach (Node childNode in contentSpec.GetNodes()) { if (childNode is SpecNode specNode) { if (!string.IsNullOrEmpty(specNode.GetFixedUrl())) { fixedUrls.Add(specNode.GetFixedUrl()); } } if (childNode is Level level) { fixedUrls.UnionWith(GetFixedURLs(level)); } } fixedUrls.UnionWith(GetFixedURLs(contentSpec.GetBaseLevel())); return fixedUrls; }
public static BaseResult ClearQuota(string componentAccessToken, string componentAppId) { string json = string.Format("{{\"component_appid\":\"{0}\"}}", componentAppId); var httpRequest = new HttpRequestMessage(HttpMethod.Post, BASE_URI + "/cgi-bin/component/clear_quota") { Content = new StringContent(json, Encoding.UTF8, "application/json") }; httpRequest.Headers.Add("Authorization", componentAccessToken); // Add necessary headers as needed using (var httpClient = new HttpClient()) { var response = await httpClient.SendAsync(httpRequest); response.EnsureSuccessStatusCode(); string responseBody = await response.Content.ReadAsStringAsync(); return JsonConvert.DeserializeObject<BaseResult>(responseBody); } }
public async Task<UpdateApplicationResult> UpdateApplicationAsync(IAsyncHandler<UpdateApplicationRequest, UpdateApplicationResult> asyncHandler) { return await UpdateApplicationAsync(new UpdateApplicationRequest(), asyncHandler); }
public Attribute FindAttribute(string fullNameEscaped) { if (string.IsNullOrEmpty(fullNameEscaped)) { return null; } int posAtt = fullNameEscaped.IndexOf('@'); if (posAtt < 0 || posAtt >= fullNameEscaped.Length - 1) return null; if (posAtt == 0) { return FindGlobalAttribute(fullNameEscaped.Substring(1)); } string path = fullNameEscaped.Substring(0, posAtt); string attName = fullNameEscaped.Substring(posAtt + 1); // find the group Group g = rootGroup; int pos = path.LastIndexOf('/'); string varName = (pos > 0 && pos < path.Length - 1) ? path.Substring(pos + 1) : null; if (pos >= 0) { string groups = path.Substring(0, pos); var stoke = new System.Collections.Generic.List<string>(groups.Split('/')); foreach (var token in stoke) { string tokenUnescaped = NetcdfFile.MakeNameUnescaped(token); g = g.FindGroup(tokenUnescaped
public override bool CreateDataColumnsTable() { VerifyWritable(); bool created = false; var dao = GetDataColumnsDao(); try { if (!dao.IsTableExists()) { created = TableCreator.CreateDataColumns() > 0; } } catch (SQLException e) { throw new GeoPackageException($"Failed to check if {typeof(DataColumns).Name} table exists and create it", e); } return created; }
public static StringBuilder ElapsedAndSize(long startTimeNanos, long endTimeNanos, long size) { StringBuilder buf = new StringBuilder(16); AppendElapsedAndSize(buf, startTimeNanos, endTimeNanos, size); return buf; }
protected void AddTypeParameters(ExecutableMemberDoc member, Content htmlTree) { Content typeParameters = GetTypeParameters(member); if (!typeParameters.IsEmpty()) { htmlTree.AddContent(typeParameters); htmlTree.AddContent(Writer.GetSpace()); } }
public void SetDayFormatter(DayFormatter formatter) { this.contentDescriptionFormatter = contentDescriptionFormatter == this.formatter ? formatter : contentDescriptionFormatter; this.formatter = formatter == null ? DayFormatter.DEFAULT : formatter; var currentLabel = GetText(); object[] spans = null; if (currentLabel is Spanned spanned) { spans = spanned.GetSpans(0, currentLabel.Length, typeof(object)); } var newLabel = new SpannableString(GetLabel()); if (spans != null) { foreach (var span in spans) { newLabel.SetSpan(span, 0, newLabel.Length, SpanTypes.ExclusiveExclusive); } } SetText(newLabel); }
public bool CheckObsolete(IGraphStore store, bool isReorg, int lineNo, string fileName) { if (type == RecordType.T) { // Transaction boundaries are obsolete during reorg return isReorg; } else if (type == RecordType.L) { // A log is always obsolete return false; } else if (type != RecordType.V && type != RecordType.E) { throw new BitsyException(BitsyErrorCodes.INTERNAL_ERROR, $"Unhandled record type: {type}"); } // A V or E record Guid? id = null; int version = -1; string state = null; JsonToken token; try { using (JsonParser parser = factory.CreateJsonParser(json)) { while ((token = parser.NextToken()) != JsonToken.END_OBJECT) { // Find the version if (token == JsonToken.FIELD_NAME) { if (parser.CurrentName.Equals("id")) { parser.NextToken(); id = Guid.Parse(parser.GetText()); continue; } if (parser.CurrentName.Equals("v"))
public bool NoneMatch(Try.DoublePredicate<E> filter) where E : Exception { return NoneMatch(0, Size(), filter); }
static int BinarySearch(short[] a, int fromIndex, int toIndex, short key) { if (a == null || a.Length == 0) { return -1; // INDEX_NOT_FOUND } return Array.BinarySearch(a, fromIndex, toIndex - fromIndex, key); }
public string GetServiceName() { object reference = serviceName_; if (reference is string) { return (string)reference; } else { var byteString = (Google.Protobuf.ByteString)reference; string s = byteString.ToStringUtf8(); serviceName_ = s; return s; } }
public override List<Connector> GetSipConnectors() { List<Connector> connectors = new List<Connector>(); Connector[] conns = service.FindConnectors(); foreach (Connector conn in conns) { if (conn.GetProtocolHandler() is SipProtocolHandler) { connectors.Add(conn); } } return connectors; }
private Term EvalDatatype(Function term) { Term innerTerm = term.GetTerm(0); if (innerTerm is Function function) { return GetDatatype(function); } return term; }
public override void OnCreate(SQLiteDatabase db) { ConnectionSource cs = GetConnectionSource(); /* * The method is called by Android database helper's get-database calls when Android detects that we need to * create or update the database. So we have to use the database argument and save a connection to it on the * AndroidConnectionSource, otherwise it will go recursive if the subclass calls getConnectionSource(). */ DatabaseConnection conn = cs.GetSpecialConnection(null); bool clearSpecial = false; if (conn == null) { conn = new AndroidDatabaseConnection(db, true, cancelQueriesEnabled); try { cs.SaveSpecialConnection(conn); clearSpecial = true; } catch (SQLException e) { throw new InvalidOperationException("Could not save special connection", e); } } try { OnCreate(db, cs); } finally { if (clearSpecial) { cs.ClearSpecialConnection(conn); } } }
public static Filter InFilter(string column, object operand) { return new Filter(column, FilterOperator.In, operand); }
public static bool? OptBoolean(string name) { string v = GetString(name); return v == null ? (bool?)null : bool.Parse(v); }
public void AddProductToProductSet(string name, string product) { var request = new AddProductToProductSetRequest { Name = name, Product = product }; AddProductToProductSet(request); }
private static void Set<K, V>(Dictionary<K, HashSet<V>> map, K key, V value) { if (!map.TryGetValue(key, out HashSet<V> values)) { values = new HashSet<V>(); map[key] = values; } values.Add(value); }
public Selects Parse(string sql) { columnIndex = 0; ParserString raw = new ParserString(sql.Trim()); Selects selects = new Selects(); Select select = new Select(); bool runAgain = false; do { // select if (!raw.ForwardIfCurrentAndNoWordNumberAfter("select")) throw new SQLParserException("missing select"); raw.RemoveSpace(); // top if (raw.ForwardIfCurrentAndNoWordNumberAfter("top")) { raw.RemoveSpace(); ValueNumber number = Number(raw); if (number == null) throw new SQLParserException("missing top number"); select.SetTop(number); raw.RemoveSpace(); } // distinct if (raw.ForwardIfCurrentAndNoWordNumberAfter("distinct")) { select.SetDistinct(true); raw.RemoveSpace(); } // all if (raw.ForwardIfCurrentAndNoWordNumberAfter("all")) { select.SetDistinct(false); raw.RemoveSpace(); } // select expression SelectExpressions(raw, select); raw.RemoveSpace(); // from if (!raw.Forw
public void WaitUntilAllReceived(int timeout) { try { byte flag = ExternalFrameConfirmationCheck.GetConfirmation(ab, timeout); System.Diagnostics.Debug.Assert(flag == ExternalFrameHandler.CONFIRM_READING_DONE); } catch (TimeoutException) { throw new ExternalFrameConfirmationException("Timeout for confirmation exceeded!"); } catch (InterruptedException) { throw new ExternalFrameConfirmationException("Confirmation thread interrupted!"); } catch (ExecutionException) { throw new ExternalFrameConfirmationException("Confirmation failed!"); } }
public override object eGet(int featureID, bool resolve, bool coreType) { switch (featureID) { case AfplibPackage.SamplingRatiosRg.HSample: return GetHSample(); case AfplibPackage.SamplingRatiosRg.VSample: return GetVSample(); } return base.eGet(featureID, resolve, coreType); }
public static Optional<T> Of<T>(T value) { return value == null ? Optional<T>.Empty : new Optional<T>(value); }
public static byte[] StreamBytes(Stream stream) { using (var memoryStream = new MemoryStream()) { stream.CopyTo(memoryStream); return memoryStream.ToArray(); } }
public override RemoteObjectInstance GetRemoteObjectInstance(JavaColonNamespace namespace, string name) { RemoteObjectInstance roi = null; InjectionBinding binding = GetInjectionBinding(namespace, name); if (binding != null) { object bindingObject = binding.GetRemoteObject(); if (bindingObject != null) { if (bindingObject is IndirectReference indirectReference) { bindingObject = ResolveIndirectReferences(binding, indirectReference, 0); } if (bindingObject is System.Runtime.Remoting.ObjRef) { SerializationContext sc = serializationService.CreateSerializationContext(); using (var baos = new MemoryStream()) { try { using (var oos = sc.CreateObjectOutputStream(baos)) { oos.WriteObject(bindingObject); } roi = roiFactory.Create(baos.ToArray()); } catch (IOException ex) { throw new NamingException($"Unable to serialize naming reference: {bindingObject}", ex); } } } else if (bindingObject is MarshalByRefObject) { roi = roiFactory.Create((MarshalByRefObject)bindingObject, binding.GetInjectionClassT
public void Invalidate() { lock (mMeasuredChildren) { Console.WriteLine($"Invalidate all [{mMeasuredChildren.Count}]"); mMeasuredChildren.Clear(); } }
private string GenCodeForFieldAccess(ExprNode node, SoyType baseType, string containerExpr, string fieldName) { if (baseType != null && baseType.GetKind() == SoyType.Kind.PROTO) { errorReporter.Report(node.GetSourceLocation(), PROTO_ACCESS_NOT_SUPPORTED); return "ERROR"; } return GenCodeForLiteralKeyAccess(containerExpr, fieldName); }
private Token EventuallyMatch(Token.Kind kind) { CheckNotEof(); Token token = tokens[index]; if (token.kind != kind) { return null; } else { index++; return token; } }
private T GetOrApply<T>(T configurer) where T : SecurityConfigurerAdapter<DefaultSecurityFilterChain, HttpSecurity> { var existingConfig = (T)GetConfigurer(configurer.GetType()); if (existingConfig != null) { return existingConfig; } return Apply(configurer); }
public Generic OnGenericArray(Generic genericArray) { return declaringType.IsGenerified() ? new Generic.OfNonGenericType.Latent(genericArray.AsErasure(), genericArray) : genericArray; }
[Check] public void CheckSpaceUse(SarlSpace space) { Error(string.Format(Messages.SARLValidator_0, this.grammarAccess.GetSpaceKeyword()), space, null); }
public static T RunWithFile(Stream stream, Func<FileInfo, T> function) { FileInfo tempFile = Path.GetTempFileName(); try { using (FileStream outStream = new FileStream(tempFile.FullName, FileMode.Create, FileAccess.Write)) { stream.CopyTo(outStream); } return function(tempFile); } finally { tempFile.Delete(); } }
public bool IsInClipArea(long pX, long pY) { return pX > mXMin && pX < mXMax && pY > mYMin && pY < mYMax; }
public static void AddExceptionCallback<T>(ListenableFuture<T> future, Action<Exception> exceptionCallback) { AddExceptionCallback(future, exceptionCallback, TaskScheduler.Current); }
protected List<string> TranslateSarlFormalParametersForSyntheticOperation(JvmExecutable owner, JvmGenericType actionContainer, bool varargs, List<InferredStandardParameter> signature) { var arguments = new List<string>(); foreach (var parameterSpec in signature) { var paramType = parameterSpec.Type; if (parameterSpec is InferredValuedParameter) { var argumentValue = new StringBuilder(); if (paramType.Type is JvmTypeParameter) { argumentValue.Append("\""); argumentValue.Append(paramType.SimpleName); argumentValue.Append("\""); } argumentValue.Append(this.sarlSignatureProvider.ToJavaArgument( actionContainer.Identifier, ((InferredValuedParameter)parameterSpec).CallingArgument)); arguments.Add(argumentValue.ToString()); } else { var param = parameterSpec.Parameter; var paramName = parameterSpec.Name; if (!string.IsNullOrEmpty(paramName) && paramType != null) { var lastParam = this.typesFactory.CreateJvmFormalParameter(); owner.Parameters.Add(lastParam); lastParam.Name = paramName; if (owner is JvmOperat
protected void SetupInitialRegistryPaths() { if (registryOperations is RMRegistryOperationsService rmRegOperations) { rmRegOperations.InitUserRegistryAsync(RegistryUtils.CurrentUser()); } }
public List<MessageBuffer> ToBufferList() { try { Flush(); } catch (IOException ex) { // IOException must not happen because underlying ArrayBufferOutput never throws IOException throw new InvalidOperationException("An unexpected I/O error occurred.", ex); } return GetArrayBufferOut().ToBufferList(); }
public static float[] BuildTemporaryUserVector(ALSServingModel model, List<KeyValuePair<string, double>> parsedPathSegments, float[] Xu) { bool implicit = model.IsImplicit(); Solver solver = model.GetYTYSolver(); if (solver == null) { throw new OryxServingException("No solver available for model yet", Response.Status.SERVICE_UNAVAILABLE); } foreach (var itemValue in parsedPathSegments) { float[] Yi = model.GetItemVector(itemValue.Key); // Given value is taken to be the fictitious current value of Qui = Xu * Yi^T float[] newXu = ALSUtils.ComputeUpdatedXu(solver, itemValue.Value, Xu, Yi, implicit); if (newXu != null) { Xu = newXu; } } return Xu; }
private void ValidateStandardLocations() { bool hasNonStandardStructure = false; if (androidManifestFilePre4.Exists && !androidManifestFilePre4.Equals(androidManifestFile)) { GetLog().Warn("Non-standard location of AndroidManifest.xml file found, but not configured:\n" + androidManifestFilePre4 + "\nMove to the standard location src/main/AndroidManifest.xml\n" + "Or configure androidManifestFile."); hasNonStandardStructure = true; } if (resourceDirectoryPre4.Exists && !resourceDirectoryPre4.Equals(resourceDirectory)) { GetLog().Warn("Non-standard location of Android res folder found, but not configured:\n" + resourceDirectoryPre4 + "\nMove to the standard location src/main/res/\n" + "Or configure resourceDirectory."); hasNonStandardStructure = true; } if (assetsDirectoryPre4.Exists && !assetsDirectoryPre4.Equals(assetsDirectory)) { GetLog().Warn("Non-standard location assets folder found, but not configured:\n" + assetsDirectoryPre4 + "\nMove to the standard location src/main/assets/\n" + "Or configure assetsDirectory.");
public string Parse(JsonPullParser parser, OnJsonObjectAddListener listener) { if (parser == null) { throw new ArgumentException(); } State state = parser.GetEventType(); switch (state) { case State.VALUE_NULL: return null; case State.VALUE_STRING: return parser.GetValueString(); default: throw new InvalidOperationException(); } }
private static IObservable<Bitmap> GetThumbnailFromUri(Context context, Uri data) { return GetThumbnailFromUriWithSizeAndKind(context, data, 0, 0, MediaStore.Images.Thumbnails.MiniKind); }
public Message5WH_Builder SetWhere(object where, RecognitionException lineAndColumn) { if (where != null && lineAndColumn != null) { IsAntlrRuntimeObject iaro = IsAntlrRuntimeObject.Create(lineAndColumn); this.SetWhere(where, iaro.Line, iaro.Column); } return this; }
public byte[] ToByteArray() { byte[] r = new byte[size]; int off = 0; int n = arrays.Count; for (int k = 0; k < n; k++) { byte[] src = (byte[])arrays[k]; Buffer.BlockCopy(src, 0, r, off, src.Length); off += src.Length; } if (pos > 0) Buffer.BlockCopy(buffer, 0, r, off, pos); return r; }
[Managed] [ManagedDescription("Index optimization")] public void Optimize() { if (handler is SearchIndex searchIndex) { try { if (isSuspended.Get()) { Resume(); try { searchIndex.GetIndex().Optimize(); } finally { Suspend(); } } else { searchIndex.GetIndex().Optimize(); } } catch (IOException e) { LOG.Error(e.Message, e); } catch (ResumeException e) { LOG.Error(e.Message, e); } catch (SuspendException e) { LOG.Error(e.Message, e); } } else { LOG.Error("This kind of QueryHandler class doesn't support index optimization."); } }
[HttpPost] protected void HandlePostRequest(HttpResponse response, HttpRequest request) { var ctx = DecodeSoapRequest(request); var artifactMsg = (ArtifactResolve)ctx.Message; try { var issuer = artifactMsg.Issuer.Value; var service = VerifySamlRegisteredService(issuer); var adaptor = GetSamlMetadataFacadeFor(service, artifactMsg); if (!adaptor.HasValue) { throw new UnauthorizedServiceException(UnauthorizedServiceException.CODE_UNAUTHZ_SERVICE, $"Cannot find metadata linked to {issuer}"); } var facade = adaptor.Value; VerifyAuthenticationContextSignature(ctx, request, artifactMsg, facade); var artifactId = artifactMsg.Artifact.Artifact; var ticketId = GetSamlProfileHandlerConfigurationContext().ArtifactTicketFactory.CreateTicketIdFor(artifactId); var ticket = GetSamlProfileHandlerConfigurationContext().TicketRegistry.GetTicket(ticketId, typeof(SamlArtifactTicket)); var issuerService = GetSamlProfileHandlerConfigurationContext().WebApplicationServiceFactory.CreateService(issuer); var casAssertion = BuildCasAssertion(ticket.TicketGrantingTicket.Authentication, issuerService, service,
private bool GetCompoundKeyColumn(MetamodelImpl metamodel, EmbeddableType keyObj, StringBuilder builder, bool isPresent, CQLTranslator translator, string fieldName, string condition, List<object> value, bool useInClause) { fieldName = fieldName.Substring(fieldName.IndexOf('.') + 1); // If partition key part age given in query, i.e. restriction on // id.compositekey.compositePartitionkey.partitionkeyColumn. if (fieldName.IndexOf('.') > 0) { string compositePartitionkeyName = fieldName.Substring(0, fieldName.IndexOf('.')); AbstractAttribute attribute = (AbstractAttribute)keyObj.GetAttribute(compositePartitionkeyName); fieldName = fieldName.Substring(fieldName.IndexOf('.') + 1); EmbeddableType compositePartitionkey = metamodel.Embeddable(attribute.BindableJavaType); attribute = (AbstractAttribute)compositePartitionkey.GetAttribute(fieldName); string columnName = attribute.JPAColumnName; isPresent = BuildWhereClause(builder, isPresent, translator, condition, value, useInClause, attribute, columnName, false); } // if composite partit
public void EntryRuleTerminalRule() { try { // Rule for terminal rule EOF Before(grammarAccess.GetTerminalRuleRule()); PushFollow(FollowSets000.Follow_1); RuleTerminalRule(); State.Fsp--; After(grammarAccess.GetTerminalRuleRule()); Match(Input, EOF, FollowSets000.Follow_2); } catch (RecognitionException re) { ReportError(re); Recover(Input, re); } finally { } }
public void SaveField(BaseField field) { string strFieldName = field.GetFieldName(); // Fieldname only string strData = field.GetString(); this.SetProperty(strFieldName, strData); }
private Config LoadConfigFileWithFlowNameOverrides(string configFilePath) { Config flowConfig = this.pullFileLoader.LoadPullFile(configFilePath, emptyConfig, false); string flowName = FSSpecStore.GetSpecName(configFilePath); string flowGroup = FSSpecStore.GetSpecGroup(configFilePath); return flowConfig.WithValue(ConfigurationKeys.FLOW_NAME_KEY, ConfigValueFactory.FromAnyRef(flowName)) .WithValue(ConfigurationKeys.FLOW_GROUP_KEY, ConfigValueFactory.FromAnyRef(flowGroup)); }
public Thread Start(Action target, string name) { try { return Start0(target, GetTimeout(), name); } catch (NoThreadException e) { e.FillInStackTrace(); throw e; } }
private void Initialize() { this.Text = Constant.Messages.GetString("edit.find.title"); this.infoLabel = new Label { Text = Constant.Messages.GetString("edit.find.label.notfound"), Visible = false }; this.Controls.Add(GetJPanel()); CentreDialog(); txtFind.Focus(); this.ActiveControl = btnFind; this.ShowDialog(); }
public static bool Copy(FileInfo fromFile, FileInfo toFile, bool overwrite) { // Copy all directory structure if (fromFile.Attributes.HasFlag(FileAttributes.Directory)) { return CopyDirectory(fromFile, toFile, overwrite); } // Check if destination is a directory if (toFile.Attributes.HasFlag(FileAttributes.Directory)) { // Create a new file with the same name as from toFile = new FileInfo(Path.Combine(toFile.FullName, fromFile.Name)); } // Check if file exists, and return false if overwrite is false if (!overwrite && toFile.Exists) { return false; } using (FileStream inStream = new FileStream(fromFile.FullName, FileMode.Open, FileAccess.Read)) using (FileStream outStream = new FileStream(toFile.FullName, FileMode.Create, FileAccess.Write)) { // Use buffer size two times byte array, to avoid I/O bottleneck byte[] buffer = new byte[8192]; int bytesRead; while ((bytesRead = inStream.Read(buffer, 0, buffer.Length)) > 0) { outStream.Write(buf
[PostConstruct] public void Init() { log.Debug("Registering JVM gauges"); metricRegistry.Register(PROP_METRIC_REG_JVM_MEMORY, new MemoryUsageGaugeSet()); metricRegistry.Register(PROP_METRIC_REG_JVM_GARBAGE, new GarbageCollectorMetricSet()); metricRegistry.Register(PROP_METRIC_REG_JVM_THREADS, new ThreadStatesGaugeSet()); metricRegistry.Register(PROP_METRIC_REG_JVM_FILES, new FileDescriptorRatioGauge()); metricRegistry.Register(PROP_METRIC_REG_JVM_BUFFERS, new BufferPoolMetricSet(GetPlatformMBeanServer())); metricRegistry.Register(PROP_METRIC_REG_JVM_ATTRIBUTE_SET, new JvmAttributeGaugeSet()); metricRegistry.Register(PROP_METRIC_REG_OS, new OperatingSystemGaugeSet(GetOperatingSystemMXBean())); if (jhipsterProperties.Metrics.Jmx.Enabled) { log.Debug("Initializing Metrics JMX reporting"); var jmxReporter = JmxReporter.ForRegistry(metricRegistry).Build(); jmxReporter.Start(); } if (jhipsterProperties.Metrics.Logs.Enabled) { log.Info("Initializing Metrics Log reporting"); var metricsMarker = MarkerFactory.GetMarker("metrics"); var reporter =
public GetCelebrityInfoResult WithUrls(params string[] urls) { if (this.urls == null) { SetUrls(new List<string>(urls.Length)); } foreach (string ele in urls) { this.urls.Add(ele); } return this; }
public IEnumerator<string> GetParameterNames() { // JSR 289 Section 5.6.1 Parameters : // For initial requests where a preloaded Route header specified the application to be invoked, // the parameters are those of the SIP or SIPS URI in that Route header. // For initial requests where the application is invoked the parameters are those present on the request URI, // if this is a SIP or a SIPS URI. For other URI schemes, the parameter set is undefined. // For subsequent requests in a dialog, the parameters presented to the application are those that the application itself // set on the Record-Route header for the initial request or response (see 10.4 Record-Route Parameters). // These will typically be the URI parameters of the top Route header field but if the upstream SIP element is a // "strict router" they may be returned in the request URI (see RFC 3261). // It is the containers responsibility to recognize whether the upstream element is a strict router and determine the right parameter set accordingly. List<string> retval = new List<string>(); var poppedRoute = this.GetPoppedRoute(); if (poppedRo
private static string GetLocalHostNameWithRecovery() { try { return Dns.GetHostName(); } catch (SocketException exception) { string host = exception.Message; // host = "hostname: hostname" if (host != null) { int colon = host.IndexOf(':'); if (colon > 0) { return host.Substring(0, colon); } } throw; } }
public void FillOval(int x, int y, int width, int height) { SetOval(x, y, width, height); Fill(this.oval); }
public Graph<K, VV, NV> MapEdges(Func<Edge<K, EV>, NV> mapper, TypeInfo<Edge<K, NV>> returnType) { var mappedEdges = edges.Map(value => { var output = new Edge<K, NV> { f0 = value.f0, f1 = value.f1, f2 = mapper(value) }; return output; }) .Returns(returnType) .WithForwardedFields("f0; f1") .Name("Map edges"); return new Graph<K, VV, NV>(this.vertices, mappedEdges, this.context); }
public static nsrunningconfig[] Get(nitro_service service, nsrunningconfig_args args) { nsrunningconfig obj = new nsrunningconfig(); options option = new options(); option.Set_args(nitro_util.ObjectToStringWithoutQuotes(args)); nsrunningconfig[] response = (nsrunningconfig[])obj.GetResources(service, option); return response; }
private List<string> FilterSourceList(List<string> sourceList) { List<string> filteredList = new List<string>(sourceList); filteredList.Remove(CollectorConstants.TRACE_CONFIG_VAL); filteredList.Remove(CollectorConstants.MESSAGES_CONFIG_VAL); return filteredList; }
public int GetColumn(int pos) { int line = GetLine(pos) - 1; if (line == 0) return pos + 1; return pos - lines[line - 1].Value; }
public void Read(ByteCodeParser input) { int length = input.ReadInt(); if (length != 2) throw new IOException($"expected length of 2 at {length}"); short code = input.ReadShort(); _signature = input.GetUTF8(code); }
public void Show(ViewGroup parent, bool usePhoneLayout) { MarginLayoutParams params = Init(parent.Context, null, parent, usePhoneLayout); UpdateLayoutParamsMargins(null, params); ShowInternal(null, params, parent); }
public bool AddKeyPart(string name, BasicFieldTypes type) { return AddKeyPart(name, type.Size); }
public void DoFilter(HttpContext context, Func<Task> next) { HttpRequest request = context.Request; HttpResponse response = context.Response; if (!RequiresAuthentication(request, response)) { return next(); } if (logger.IsDebugEnabled) { logger.Debug("Request is to process authentication"); } Authentication authResult; try { authResult = AttemptAuthentication(request, response); if (authResult == null) { // return immediately as subclass has indicated that it hasn't completed return; } sessionStrategy.OnAuthentication(authResult, request, response); } catch (InternalAuthenticationServiceException failed) { logger.Error("An internal error occurred while trying to authenticate the user.", failed); UnsuccessfulAuthentication(request, response, failed); return; } catch (AuthenticationException failed) { // Authentication failed UnsuccessfulAuthentication(request, response, failed); return; } // Authentication success if (continueChainBeforeSuccessfulAuthentication) { await next(); } SuccessfulAuthentication(request, response, next, authResult); }
public CloseableResource<BlockMasterClient> AcquireBlockMasterClientResource() { return new CloseableResource<BlockMasterClient>(mBlockMasterClientPool.Acquire()) { Close = () => mBlockMasterClientPool.Release(Get()) }; }
public static vpntrafficpolicy[] GetFiltered(nitro_service service, string filter) { vpntrafficpolicy obj = new vpntrafficpolicy(); options option = new options(); option.SetFilter(filter); vpntrafficpolicy[] response = (vpntrafficpolicy[])obj.GetFiltered(service, option); return response; }
public GinLinkedBindingBuilder<V> AddBinding<T>() where T : javax.inject.Provider<K> { return AddBinding(TypeLiteral.Get(typeof(T))); }
public static (Grouper<RowBasedKey>, Accumulator<AggregateResult, Row>) CreateGrouperAccumulatorPair( GroupByQuery query, bool isInputRaw, IDictionary<string, ValueType> rawInputRowSignature, GroupByQueryConfig config, Func<ByteBuffer> bufferSupplier, ReferenceCountingResourceHolder<ByteBuffer> combineBufferHolder, int concurrencyHint, LimitedTemporaryStorage temporaryStorage, ObjectMapper spillMapper, AggregatorFactory[] aggregatorFactories, ListeningExecutorService grouperSorter, int priority, bool hasQueryTimeout, long queryTimeoutAt, int mergeBufferSize ) { // concurrencyHint >= 1 for concurrent groupers, -1 for single-threaded Preconditions.CheckArgument(concurrencyHint >= 1 || concurrencyHint == -1, "invalid concurrencyHint"); var valueTypes = DimensionHandlerUtils.GetValueTypesFromDimensionSpecs(query.GetDimensions()); var querySpecificConfig = config.WithOverrides(query); bool includeTimestamp = GroupByStrategyV2.GetUniversalTimestamp(query) == null; var columnSelectorRow = new ThreadLocal<Row>(); var columnSelectorFactory = query.GetVirtualColumns().Wrap( RowBasedCol
public static void ChangeSign(DMatrix2x2 a) { a.A11 = -a.A11; a.A12 = -a.A12; a.A21 = -a.A21; a.A22 = -a.A22; }
public JsMessage Next() { if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) SibTr.Entry(tc, "next"); JsMessage msg = null; IEnumerator<BrowseCursor> it = cursors.GetEnumerator(); while (it.MoveNext() && msg == null) msg = it.Current.Next(); if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) SibTr.Exit(tc, "next"); return msg; }
private object ReadResolve() { try { return Create(hostname, cookieValue); } catch (IOException e) { throw new ObjectStreamException(e.Message) { SerialVersionUID = 1L }; } catch (GeneralSecurityException e) { throw new ObjectStreamException(e.Message) { SerialVersionUID = 1L }; } }
public static TermWalker PositionalPostfixWalker(PositionalTermVisitor visitor) { PositionalTermTraverser positionalTraverser = new PositionalTermTraverserImpl(); positionalTraverser.SetContextChangeVisitor(visitor); visitor.SetPositionalTraverser(positionalTraverser); return new TermWalker(new PostFixSearch<Term, Term>(), positionalTraverser, visitor); }
public bool AddAll(LongArray items) { EnsureCapacity(size + items.Size); for (int i = 0; i < items.Size; i++) { elements[size++] = items.Elements[i]; } return items.Size > 0; }
public void Show(Activity activity) { Show((ViewGroup)activity.Window.FindViewById(Android.Resource.Id.Content)); }
public HashSet<ExportsFlag> ReadExportsFlags(int flags) { HashSet<ExportsFlag> set = new HashSet<ExportsFlag>(); foreach (ExportsFlag f in Enum.GetValues(typeof(ExportsFlag))) { if ((flags & (int)f) != 0) set.Add(f); } return set; }
private int Process(Buffer b, Stream is) { int start = 0; while (start < b.have) { int matchPos = matcher.IndexOf(b.buff, start, b.have - start); // didn't find "BUFR" match if (matchPos < 0) { if (start == 0) // discard all but last 3 bytes return b.have - 3; else return start; // indicates part of the buffer that's not processed } // do we have the length already read ?? if (matchPos + 6 >= b.have) { return start; // this will save the end of the buffer and read more in. } // read BUFR message length int b1 = b.buff[matchPos + 4] & 0xff; int b2 = b.buff[matchPos + 5] & 0xff; int b3 = b.buff[matchPos + 6] & 0xff; int messLen = b1 << 16 | b2 << 8 | b3; // create a task for this message var tas
public void CacheFile() { if (orientation == Orientation.INV) cache = new string[fields, elements]; else cache = new string[elements, fields]; int x = 0, y = 0; StreamReader file = null; try { file = new StreamReader(csvFile); } catch (FileNotFoundException e) { // Handle the exception Console.WriteLine(e.Message); } string line; while ((line = file.ReadLine()) != null) { string[] tokens = line.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries); foreach (var token in tokens) { cache[y, x] = token; x++; } x = 0; y++; } file.Close(); cached = true; }
public Task CloseAsync() { if (open.CompareAndSet(true, false)) { var tcs = new TaskCompletionSource<Void>(); threadContext.Execute(() => { lock (this) { foreach (var keepAliveFuture in keepAliveTimers.Values) { keepAliveFuture.Cancel(); } protocol.UnregisterHeartbeatHandler(); } tcs.SetResult(null); }); return tcs.Task; } return Task.CompletedTask; }
public Retryer<R> FibonacciWait(long multiplier, long maximumWait) { return WithWaitStrategy(new WaitStrategy { public long ComputeSleepTime(int previousAttemptNumber, long delaySinceFirstAttemptInMillis) { long fib = Fib(previousAttemptNumber); long result = multiplier * fib; if (result > maximumWait || result < 0L) { result = maximumWait; } return result >= 0L ? result : 0L; } private long Fib(long n) { if (n == 0L) return 0L; if (n == 1L) return 1L; long prevPrev = 0L; long prev = 1L; long result = 0L; for (long i = 2L; i <= n; i++) { result = prev + prevPrev; prevPrev = prev; prev = result; } return result; } }); }
private static Segment<PrimitiveParameter> FirstSegment(PatternFinderUser def, Sequence<PrimitiveParameter> sequence, Algorithm algorithm, int maxPatternLength) { int size = sequence.Size(); int minPatternLength = MinPatternLength(algorithm, def); if (size > 0 && size >= minPatternLength) { int x = 0; int y = minPatternLength < 1 ? size - 1 : minPatternLength - 1; if (x <= y) { return ResetSegmentHelper(def, sequence, x, y, new Segment<PrimitiveParameter>(sequence, x, y), algorithm, maxPatternLength); } } return null; }
public SortV1 And(SortV1 sort) { if (sort == null) { return this; } List<OrderV1> these = new List<OrderV1>(this.orders); foreach (OrderV1 order in sort) { these.Add(order); } return new SortV1(these); }
private static void ReadDecoderPicMarking(NALUnit nalUnit, SliceHeader sh, BitReader _in) { if (nalUnit.Type == NALUnitType.IDR_SLICE) { bool noOutputOfPriorPicsFlag = ReadBool(_in, "SH: no_output_of_prior_pics_flag"); bool longTermReferenceFlag = ReadBool(_in, "SH: long_term_reference_flag"); sh.RefPicMarkingIDR = new RefPicMarkingIDR(noOutputOfPriorPicsFlag, longTermReferenceFlag); } else { bool adaptiveRefPicMarkingModeFlag = ReadBool(_in, "SH: adaptive_ref_pic_marking_mode_flag"); if (adaptiveRefPicMarkingModeFlag) { List<Instruction> mmops = new List<Instruction>(); int memoryManagementControlOperation; do { memoryManagementControlOperation = ReadUEtrace(_in, "SH: memory_management_control_operation"); Instruction instr = null; switch (memoryManagementControlOperation) { case 1: instr = new RefPicMarking.Instruction(InstrType.REMOVE_SHORT, ReadUEtrace(_in,
public void GetCharacterEquipment(string api, string name, Action<CharacterEquipment> callback) { IsParamValid(new ParamChecker(ParamType.API, api), new ParamChecker(ParamType.CHAR, name)); gw2API.GetCharacterEquipment(name, api).Enqueue(callback); }
public static List<MethodInfo> FindOverrideMethods(Index index, MethodInfo method) { return FindOverrideMethods(index, method.DeclaringClass, method, 0); }
public Pattern5<T1, T2, T3, T4, T5> And(Observable<T5> other) { if (other == null) { throw new ArgumentNullException(nameof(other)); } return new Pattern5<T1, T2, T3, T4, T5>(o1, o2, o3, o4, other); }
public static void SetAccessController(AccessController mgr) { if (tc.IsEntryEnabled()) Tr.Entry(tc, "SetAccessController", mgr); _accessController = mgr; if (tc.IsEntryEnabled()) Tr.Exit(tc, "SetAccessController"); }
public DescribeDBParameterGroupsResult WithDBParameterGroups(params DBParameterGroup[] dbParameterGroups) { if (this.dBParameterGroups == null) { this.dBParameterGroups = new List<DBParameterGroup>(dbParameterGroups.Length); } foreach (var ele in dbParameterGroups) { this.dBParameterGroups.Add(ele); } return this; }
public EClass GetIfcMassPerLengthMeasure() { if (ifcMassPerLengthMeasureEClass == null) { ifcMassPerLengthMeasureEClass = (EClass)EPackage.Registry.INSTANCE.GetEPackage(Ifc4Package.eNS_URI) .GetEClassifiers()[837]; } return ifcMassPerLengthMeasureEClass; }
protected void CloseConnection() { if (connection != null && connection.State != System.Data.ConnectionState.Closed) { connection.Close(); connection = null; } }
public void Marshall(EBSOptionsStatus eBSOptionsStatus, ProtocolMarshaller protocolMarshaller) { if (eBSOptionsStatus == null) { throw new SdkClientException("Invalid argument passed to marshall(...)"); } try { protocolMarshaller.Marshall(eBSOptionsStatus.GetOptions(), OPTIONS_BINDING); protocolMarshaller.Marshall(eBSOptionsStatus.GetStatus(), STATUS_BINDING); } catch (Exception e) { throw new SdkClientException("Unable to marshall request to JSON: " + e.Message, e); } }
public EClass GetGDD() { if (gddEClass == null) { gddEClass = (EClass)EPackage.Registry.INSTANCE.GetEPackage(AfplibPackage.eNS_URI).GetEClassifiers()[271]; } return gddEClass; }
public static Type[] ExtractAllInterfaces(object o) { var interfaces = new HashSet<Type>(); var c = o.GetType(); while (c != null) { interfaces.UnionWith(c.GetInterfaces()); c = c.BaseType; } return interfaces.ToArray(); }
private static void ExtractAtoms(string[] atomNames, List<Chain> chains, List<Atom> atoms) { foreach (Chain c in chains) { foreach (Group g in c.GetAtomGroups()) { // a temp container for the atoms of this group List<Atom> thisGroupAtoms = new List<Atom>(); // flag to check if this group contains all the requested atoms. bool thisGroupAllAtoms = true; foreach (string atomName in atomNames) { Atom a = g.GetAtom(atomName); if (a == null) { // this group does not have a required atom, skip it... thisGroupAllAtoms = false; break; } thisGroupAtoms.Add(a); } if (thisGroupAllAtoms) { // add the atoms of this group to the array. foreach (Atom a in thisGroupAtoms) { atoms.Add(a); } } } } }
public static Func<object[], R> Fn6<T1, T2, T3, T4, T5, T6, R>(Func<Tuple6<T1, T2, T3, T4, T5, T6>, R> del) { return objects => del(Tuple.Create((T1)objects[0], (T2)objects[1], (T3)objects[2], (T4)objects[3], (T5)objects[4], (T6)objects[5])); }
public override void AppendPlotCommands(PlotBundle.Builder sb) { sb.Append("set grid "); sb.Append(YesNo(showXMajor)).Append("xtics "); sb.Append(YesNo(showXMinor)).Append("mxtics "); sb.Append(YesNo(showYMajor)).Append("ytics "); sb.Append(YesNo(showYMinor)).Append("mytics "); sb.Append(zIndex.AsPlotCommand()).Append(" "); majorLineStyle.AppendPlotCommands(sb); sb.Append(", "); minorLineStyle.AppendPlotCommands(sb); sb.Append("\nshow grid\n"); }
private string NextUnquotedValue() { int i = 0; for (; pos + i < limit; i++) { switch (in[pos + i]) { case '/': case '\\': case ';': case '#': case '=': CheckLenient(); // fall-through case '{': case '}': case '[': case ']': case ':': case ',': case ' ': case '\t': case '\f': case '\r': case '\n': break; } if (char.IsWhiteSpace(in[pos + i]) || in[pos + i] == '{' || in[pos + i] == '}' || in[pos + i] == '[' || in[pos + i] == ']' || in[pos + i] == ':' || in[pos + i] == ',' || in[pos + i] == '/' || in[pos + i] == '\\' || in[pos + i] == ';' || in[pos + i] == '#' || in[pos + i] == '=') { break; } } string resul
public void Clear() { var map = inheritableThreadLocal.Value; if (map != null) { map.Clear(); inheritableThreadLocal.Value = null; } }
public static string StripTopLevelTag(string xmlString) { return xmlString.Substring(xmlString.IndexOf('>') + 1, xmlString.LastIndexOf('<') - xmlString.IndexOf('>') - 1); }
private IQueryAtomContainer MatchExact(IAtomContainer mol) { IChemObjectBuilder bldr = mol.GetBuilder(); IQueryAtomContainer qry = new QueryAtomContainer(mol.GetBuilder()); Dictionary<IAtom, IAtom> atmmap = new Dictionary<IAtom, IAtom>(); foreach (IAtom atom in mol.Atoms()) { IAtom qatom = MatchExact(mol, atom); if (qatom != null) { atmmap[atom] = qatom; qry.AddAtom(qatom); } } foreach (IBond bond in mol.Bonds()) { IAtom beg = atmmap.TryGetValue(bond.GetBegin(), out var start) ? start : null; IAtom end = atmmap.TryGetValue(bond.GetEnd(), out var finish) ? finish : null; // attach bond skipped if (beg == null || end == null) continue; IQueryBond qbond = new QueryBond(beg, end, Expr.Type.TRUE); qry.AddBond(qbond); } return qry; }
protected void CreateSamplePoints(int numSamples) { for (int y = 0; y < numSamples; y++) { float regionY = (y / (numSamples - 1.0f) - 0.5f); for (int x = 0; x < numSamples; x++) { float regionX = (x / (numSamples - 1.0f) - 0.5f); samplePts.Add(new Point2D_F32(regionX, regionY)); } } }
using System; using System.Collections.Generic; using System.IO; public static class FileReader { public static Dictionary<string, string> ReadFileToHashMap(string filePath, string separator, bool valueFirst) { if (separator == null) { separator = "="; } List<string> lines = ReadFileToLinesList(filePath); Dictionary<string, string> propertiesMap = new Dictionary<string, string>(); foreach (var line in lines) { string trimmedLine = line.Trim(); if (trimmedLine.Length == 0 || !trimmedLine.Contains(separator)) { continue; } string[] lineSplit = trimmedLine.Split(new string[] { separator }, StringSplitOptions.None); if (!valueFirst) { string key = lineSplit[0].Trim(); string value = lineSplit.Length > 1 ? lineSplit[1].Trim() : ""; propertiesMap[key] = value; } else { if (lineSplit.Length > 1) { string key = lineSplit[0].Trim(); string value = lineSplit[1].Trim(); propertiesMap[value] = key; }
public EClass GetMediumOrientation() { if (mediumOrientationEClass == null) { mediumOrientationEClass = (EClass)EPackage.Registry.INSTANCE.GetEPackage(AfplibPackage.eNS_URI).GetEClassifiers()[362]; } return mediumOrientationEClass; }
public List<object> GetSpecificationRepositoriesOfAssociatedProject(List<object> repositoryParams) { try { Repository repository = LoadRepository(repositoryParams); ICollection<Repository> repositories = service.GetSpecificationRepositoriesOfAssociatedProject(repository.Uid); log.Debug($"Retrieved Test Repositories Of Associated Project of {repository.Uid} number: {repositories.Count}"); return XmlRpcDataMarshaller.ToXmlRpcRepositoriesParameters(repositories); } catch (Exception e) { return ErrorAsVector(e, RETRIEVE_SPECIFICATION_REPOS); } }
private static bool IsPermutation<T>(List<T> first, List<T> second) { if (first.Count != second.Count) { return false; } var firstDictionary = first.GroupBy(x => x).ToDictionary(g => g.Key, g => g.Count()); var secondDictionary = second.GroupBy(x => x).ToDictionary(g => g.Key, g => g.Count()); return firstDictionary.SequenceEqual(secondDictionary); }
using System.Collections.Generic; public static class CommandLineParser { public static Dictionary<string, string> ParseCommandLineArguments(string[] args) { return (Dictionary<string, string>)ParseCommandLineArguments(args, false); } private static object ParseCommandLineArguments(string[] args, bool someFlag) { // Implementation of actual argument parsing would go here. // This is a placeholder for demonstration purposes. return new Dictionary<string, string>(); } }
protected void RemoveEdgeWithoutCallback(EdgeBean eBean) { if (eBean == null) { return; } // Update in and out vertices VertexBean outV = eBean.OutVertex; VertexBean inV = eBean.InVertex; outV.OutEdges = RemoveEdgeFromAdjList(outV.OutEdges, eBean); inV.InEdges = RemoveEdgeFromAdjList(inV.InEdges, eBean); }
public EmbeddedId<Attributes<T>> GetOrCreateEmbeddedId() { Node node = childNode.GetOrCreate("embedded-id"); EmbeddedId<Attributes<T>> embeddedId = new EmbeddedIdImpl<Attributes<T>>(this, "embedded-id", childNode, node); return embeddedId; }
public static int ReflectionHashCode(object obj, bool testTransients) { return ReflectionHashCode(DEFAULT_INITIAL_VALUE, DEFAULT_MULTIPLIER_VALUE, obj, testTransients, null); }
public void Marshall(VPCOptions vpcOptions, ProtocolMarshaller protocolMarshaller) { if (vpcOptions == null) { throw new SdkClientException("Invalid argument passed to marshall(...)"); } try { protocolMarshaller.Marshall(vpcOptions.SubnetIds, SUBNETIDS_BINDING); protocolMarshaller.Marshall(vpcOptions.SecurityGroupIds, SECURITYGROUPIDS_BINDING); } catch (Exception e) { throw new SdkClientException("Unable to marshall request to JSON: " + e.Message, e); } }
private static PolicyDefinitionTemplateBean GetTemplateBean(PolicyDefinitionBean def) { Locale currentLocale = Messages.i18n.GetLocale(); string lang = currentLocale.Language; string country = lang + "_" + currentLocale.Country; PolicyDefinitionTemplateBean nullBean = null; PolicyDefinitionTemplateBean langBean = null; PolicyDefinitionTemplateBean countryBean = null; foreach (var pdtb in def.GetTemplates()) { if (pdtb.Language == null) { nullBean = pdtb; } else if (pdtb.Language.Equals(country)) { countryBean = pdtb; break; } else if (pdtb.Language.Equals(lang)) { langBean = pdtb; } } if (countryBean != null) { return countryBean; } if (langBean != null) { return langBean; } if (nullBean != null) { return nullBean; } return null; }
public bool Deactivate() { if (activated) { if (jndiObject != null) { jndiStrategy.Unbind(jndiName, jndiObject); } else { jndiStrategy.Unbind(jndiName, adminObject); } activated = false; return true; } return false; }
public override object EGet(int featureID, bool resolve, bool coreType) { switch (featureID) { case XbasePackage.XINSTANCE_OF_EXPRESSION__TYPE: return GetType(); case XbasePackage.XINSTANCE_OF_EXPRESSION__EXPRESSION: return GetExpression(); } return base.EGet(featureID, resolve, coreType); }
public ResultList<Review> GetMovieReviews(int movieId, int? page, string language) { return tmdbMovies.GetMovieReviews(movieId, page, language); }
public T RegisterValidationExecutorSet<T>(T aVES) where T : IValidationExecutorSet { if (aVES == null) throw new ArgumentNullException(nameof(aVES)); var aKey = aVES.GetID(); lock (m_aRWLock) // Assuming m_aRWLock is a ReaderWriterLockSlim or similar { if (m_aMap.ContainsKey(aKey)) throw new InvalidOperationException($"Another validation executor set with the ID '{aKey}' is already registered!"); m_aMap[aKey] = aVES; } return aVES; }
public void UpdateCapacityBytes(Dictionary<string, long> capacityBytesOnTiers) { mCapacityBytes = 0; mTotalBytesOnTiers = capacityBytesOnTiers; foreach (long t in mTotalBytesOnTiers.Values) { mCapacityBytes += t; } }
public static FieldInfo GetDeclaredFieldInHierarchy(Type clazz, string fieldName) { FieldInfo field = null; for (Type currentClass = clazz; currentClass != null; currentClass = currentClass.BaseType) { field = currentClass.GetField(fieldName, BindingFlags.Instance | BindingFlags.Static | BindingFlags.Public | BindingFlags.NonPublic); if (field != null) { break; } } if (field == null) { throw new NoSuchFieldException($"Could not find field '{fieldName}' in class '{clazz.FullName}' or its super classes"); } return field; }
public override bool CompareTokens(string a, string b) { if (IsSignedToken()) { return crypto.CompareSignedTokens(a, b); } else { return crypto.ConstantTimeEquals(a, b); } }
public static int BitLength(byte[] bytes) { if (bytes == null) throw new ArgumentNullException(nameof(bytes)); int byteLength = bytes.Length; int length = 0; if (byteLength <= MAX_BYTE_LENGTH && byteLength > 0) { length = byteLength * BYTES; } return length; }
private Socket CreateSocks4ProxySocket(string host, int port) { Socket socket = null; string proxyHost = proxy.GetProxyAddress(); int proxyPort = proxy.GetProxyPort(); string user = proxy.GetProxyUsername(); try { socket = Sockets.Connect(proxyHost, proxyPort, connectionTimeout); using (var networkStream = new NetworkStream(socket)) { using (var inStream = networkStream) using (var outStream = networkStream) { socket.NoDelay = true; byte[] buf = new byte[1024]; // 1) CONNECT int index = 0; buf[index++] = 4; buf[index++] = 1; buf[index++] = (byte)(port >> 8); buf[index++] = (byte)(port & 0xff); byte[] byteAddress = Dns.GetHostAddresses(host).First().GetAddressBytes(); foreach (byte byteAddres in byteAddress) { buf[index++] = byteAddres; } if (user != null) { Array.Copy(Encoding.UTF8.GetBytes(user), 0, buf, ind
public string CreateMachine(TargetHandlerParameters parameters) { this.logger.LogInformation("Creating a new VM @ VMware."); // For IaaS, we only expect root instance names to be passed if (InstanceHelpers.CountInstances(parameters.GetScopedInstancePath()) > 1) throw new TargetException("Only root instances can be passed in arguments."); string rootInstanceName = InstanceHelpers.FindRootInstancePath(parameters.GetScopedInstancePath()); // Deal with the creation try { System.SetProperty("org.xml.sax.driver", "org.apache.xerces.parsers.SAXParser"); var targetProperties = parameters.GetTargetProperties(); string machineImageId = targetProperties[TEMPLATE]; var vmwareServiceInstance = GetServiceInstance(targetProperties); var vmwareComputeResource = (ComputeResource)(new InventoryNavigator(vmwareServiceInstance.GetRootFolder()) .SearchManagedEntity("ComputeResource", targetProperties[CLUSTER])); // Generate the user data first, so that nothing has been done on the IaaS if it fails string userData = UserDataHelpers.WriteUserDataAsString( parameters.GetMessagingProperties(), parameters.GetDomain(), parameters.GetApplicationName(), r
public static void LogMessage(Level level, string key, params object[] args) { if (WsLevel.AUDIT.Equals(level)) Tr.Audit(tc, key, args); else if (WsLevel.ERROR.Equals(level)) Tr.Error(tc, key, args); else if (Level.INFO.Equals(level)) Tr.Info(tc, key, args); else if (Level.WARNING.Equals(level)) Tr.Warning(tc, key, args); else throw new NotSupportedException(level.ToString()); }
public void PaintTabbedPaneTabAreaBackground(SynthContext context, Graphics g, int x, int y, int w, int h) { PaintBackground(context, g, x, y, w, h, null); }
using System; using System.Collections.Generic; using System.Linq; public static class DateHelper { public static ISet<DateTime> GetDatesFromChronologyWithinGregorianYear(int targetMonth, int targetDay, int gregorianYear, IChronology targetChrono) { var isoYear = new Year(gregorianYear); var firstTargetDate = targetChrono.Date(isoYear.AtDay(1)); var lastTargetDate = targetChrono.Date(isoYear.AtDay(365 + (isoYear.IsLeap() ? 1 : 0))); var holidays = new HashSet<DateTime>(); var startYear = firstTargetDate.Get(ChronoField.YEAR); var endYear = lastTargetDate.Get(ChronoField.YEAR); for (int targetYear = startYear; targetYear <= endYear; ++targetYear) { var localDate = targetChrono.Date(targetYear, targetMonth, targetDay); if (!localDate.IsBefore(firstTargetDate) && !localDate.IsAfter(lastTargetDate)) { // Convert to ISO chronology holidays.Add(localDate.ToIsoDateTime()); } } return holidays; } } public interfac
public Task<long> RunningWithTransactionAsync() { return Task.Run(() => { // lambda is an instance of Func<EntityManager, long> return jpaApi.WithTransaction(entityManager => { var query = entityManager.CreateNativeQuery("SELECT MAX(age) FROM people"); return (long)query.GetSingleResult(); }); }); }
public async Task<DatabaseInner> PauseAsync(string resourceGroupName, string serverName, string databaseName) { var response = await PauseWithServiceResponseAsync(resourceGroupName, serverName, databaseName); return response.Body; }
private void NoteUnconditionallyDereferencedNullValue(Location thisLocation, Dictionary<ValueNumber, SortedSet<Location>> bugLocations, Dictionary<ValueNumber, NullValueUnconditionalDeref> nullValueGuaranteedDerefMap, UnconditionalValueDerefSet derefSet, IsNullValue isNullValue, ValueNumber valueNumber) { if (DEBUG) { Console.WriteLine("%%% HIT for value number " + valueNumber + " @ " + thisLocation); } var unconditionalDerefLocationSet = derefSet.GetUnconditionalDerefLocationSet(valueNumber); if (unconditionalDerefLocationSet.Count == 0) { AnalysisContext.LogError("empty set of unconditionally dereferenced locations at " + thisLocation.GetHandle().GetPosition() + " in " + classContext.GetClassDescriptor() + "." + method.GetName() + method.GetSignature()); return; } // OK, we have a null value that is unconditionally // dereferenced. Make a note of the locations where it // will be dereferenced. if (!nullValueGuaranteedDerefMap.TryGetValue(valueNum
public bool IsValidInfrastructureTld(string iTld) { iTld = UnicodeToASCII(iTld); return Array.BinarySearch(INFRASTRUCTURE_TLDS, ChompLeadingDot(iTld.ToLowerInvariant())) >= 0; }
public char NextClean(char c) { char n = NextClean(); if (n != c) { throw new SyntaxError($"Expected '{c}' and instead saw '{n}'"); } return n; }
public void Start(BundleContext bc) { /* * The pax-web-war service can take a little longer to start, we can't * say how much it will take, so we do need to sit down a while and wait * it's availability in order to use its reference. * * This is a MUST, it's really important - mostly when using the * config.ini file (Equinox). * * Anaximandro April 19, 2010. */ int counter = 0; bool started = false; while (!started) { webContainerRef = bc.GetServiceReference<WebContainer>(); started = webContainerRef != null; if (started) { var webContainer = (WebContainer)bc.GetService(webContainerRef); if (webContainer != null) { httpContext = webContainer.CreateDefaultHttpContext(); // set a session timeout of 10 minutes webContainer.SetSessionTimeout(10, httpContext); // register the hello world servlet for filtering with url pattern var initParamsServlet = new Dictionary<string, object> { { "from", "WebContainer" } }
public static string GetPackage(Type cls) { // cls.Namespace sometimes returns null, in which case fall back to string manipulation. var pkg = cls.IsArray ? cls.GetElementType().Namespace : cls.Namespace; if (pkg == null) { int dotPos; int dolPos = cls.FullName.IndexOf('$'); if (dolPos > 0) { // we have nested classes, so adjust dotPos to before first $ dotPos = cls.FullName.Substring(0, dolPos).LastIndexOf('.'); } else { dotPos = cls.FullName.LastIndexOf('.'); } if (dotPos > 0) { return cls.FullName.Substring(0, dotPos); } else { // must be default package. return ""; } } else { return pkg; } }
public void AddConsumer( object key, string topic, string selectorString, MatchTarget target, bool isWildcarded) { if (tc.IsEntryEnabled()) SibTr.Entry(tc, "AddConsumer", new object[] { key, topic, selectorString, target, isWildcarded }); bool selector = false; MonitoredConsumer mc = (MonitoredConsumer)target; // Is there a selector expression if (!string.IsNullOrWhiteSpace(selectorString)) { selector = true; } // Has a consumer already registered on this topic expression? if (selector) { // This consumer has a selector, see if there is an existing subscription registrar entry if (_subscriptionRegistrar.IsKnownSelectorExpression(topic, isWildcarded)) { // Found existing entry in selector table add this consumer to that entry AddConsumerForKnownTopicExpr(topic, selector, isWildcarded, mc, true); } else { // See if there's a corresponding non-selector entry if (_subscriptionRegistrar.IsKnownNonSelectorExpression(topic, isWildcarded)) { // Found existing entry in non-selector table, add a new row
private void FireNewCurrentSolution(SolutionType newCurrentSolution, Evaluation newCurrentSolutionEvaluation, Validation newCurrentSolutionValidation) { foreach (var listener in GetSearchListeners()) { listener.NewCurrentSolution(this, newCurrentSolution, newCurrentSolutionEvaluation, newCurrentSolutionValidation); } }
public void SetContentView(View contentView, FrameLayout.LayoutParams params) { if (params == null) { params = new FrameLayout.LayoutParams(LayoutParams.WrapContent, LayoutParams.WrapContent, Gravity.Center); int margin = Resources.GetDimensionPixelSize(Resource.Dimension.sub_action_button_content_margin); params.SetMargins(margin, margin, margin, margin); } contentView.Clickable = false; this.AddView(contentView, params); }
public void InitiateTransfer(string connId, string destination, KeyValueCollection userData) { InitiateTransfer(connId, destination, null, null, userData, null, null); }
public override bool Publish(string channel, IMessage<ID, DATA> msg) { try { eventBus.Get(channel).Post(msg); } catch (ExecutionException e) { throw new InvalidOperationException(e.Message, e); } return true; }
public BsonDecimal128 GetDecimal128(object key, BsonDecimal128 defaultValue) { if (!ContainsKey(key)) { return defaultValue; } return Get(key).AsDecimal128(); }
public static MetricContext NewContextFromReferenceContext(MetricContext context, List<Tag> newTags, string name) { string newName = string.IsNullOrEmpty(name) ? null : name; if (string.IsNullOrEmpty(newName)) { Guid uuid = Guid.NewGuid(); string randomIdPrefix = "uuid:"; string oldName = context.GetName(); List<string> splitName = string.IsNullOrEmpty(oldName) ? new List<string>() : oldName.Split('.').ToList(); if (splitName.Count > 0 && splitName.Last().StartsWith(randomIdPrefix)) { splitName[splitName.Count - 1] = string.Format("{0}{1}", randomIdPrefix, uuid.ToString()); } else { splitName.Add(string.Format("{0}{1}", randomIdPrefix, uuid.ToString())); } newName = string.Join(".", splitName); } MetricContext.Builder builder = context.Parent.HasValue ? context.Parent.Value.ChildBuilder(newName) : MetricContext.Builder(newName); return builder.AddTags(context.GetTags()).AddTags(newTags).Build(); }
public static void CublasCgerc(int m, int n, Complex alpha, IntPtr x, int incx, IntPtr y, int incy, IntPtr A, int lda) { CublasCgercNative(m, n, alpha, x, incx, y, incy, A, lda); CheckResultBLAS(); }
private void HandleReadsAndWrites(SelectionKey sk, MemcachedNode node) { if (sk.IsValid() && sk.IsReadable()) { HandleReads(node); } if (sk.IsValid() && sk.IsWritable()) { HandleWrites(node); } }
public Script UpdateScript(string monitorId, Script script) { HTTP.PUT(string.Format("/v3/monitors/{0}/script", monitorId), script); return script; }
public MoveSelector BuildBaseMoveSelector(HeuristicConfigPolicy configPolicy, SelectionCacheType minimumCacheType, bool randomSelection) { if (moveIteratorFactoryClass == null) { throw new ArgumentException($"The moveIteratorFactoryConfig ({this}) lacks a moveListFactoryClass ({moveIteratorFactoryClass})."); } MoveIteratorFactory moveIteratorFactory = ConfigUtils.NewInstance(this, "moveIteratorFactoryClass", moveIteratorFactoryClass); ConfigUtils.ApplyCustomProperties(moveIteratorFactory, "moveIteratorFactoryClass", moveIteratorFactoryCustomProperties, "moveIteratorFactoryCustomProperties"); return new MoveIteratorFactoryToMoveSelectorBridge(moveIteratorFactory, randomSelection); }
public ELBinder BindELAnnotation(Type annotationClass, ExecutionPolicy policy) { ELInterceptor interceptor = new ELInterceptor(annotationClass, policy); binder.RequestInjection(interceptor); binder.BindInterceptor(Matchers.Any(), HandlerMethodMatcher(annotationClass), interceptor); return this; }
public SetPath<A, PathBuilder<A>> GetSet<A>(string property, Type type) { return this.GetSet<A, PathBuilder<A>>(property, type, typeof(PathBuilder<A>)); }
public override void UpdateBeanValue() { var model = GetDataModel(); if (model is ScrollableTableDataModel) { LOG.Warn("UpdateBeanValue only updating the current page for ScrollableTableDataModel"); UpdateBeanValueCurrentPageOnly(); } else if (model.RowCount > 0) { // Temporarily widen the pagination on the repeater to hold all rows // Calling SetBean with a non-null value overrides the DataTableBeanProvider repeater.SetBean(new RowIdList(0, model.RowCount - 1)); UpdateBeanValueCurrentPageOnly(); repeater.SetBean(null); } }
public static JTSGeometryExpression<Geometry> GeometryOperation(Operator op, params Expression[] args) { return new JTSGeometryOperation<Geometry>(typeof(Geometry), op, args); }
public void AddName(string name) { if (names.Contains(name)) { throw new ArgumentException($"already contains: {name}"); } indexes.Add(name); names.Add(name); dirty = true; }
public void HandleExceptionProcess(Exception e, object w) { const string mName = "HandleExceptionProcess"; if (logger.IsLoggable(Level.Finer)) logger.Logp(Level.Fine, className, mName, e.GetType().Name + "; " + this.ToString()); if (!IsRetryLimitReached() && excMatcher.IsSkippableOrRetryable(e)) { retryType = RETRY_PROCESS; _retryException = e; // Retry it. Log it. Call the RetryListener. ++_retryCount; LogRetry(e); if (_retryProcessListeners != null) { foreach (var retryProcessListenerProxy in _retryProcessListeners) { retryProcessListenerProxy.OnRetryProcessException(w, e); } } } else { // No retry. Throw it back. if (logger.IsLoggable(Level.Finer)) logger.Logp(Level.Fine, className, mName, "No retry. Rethrow ", e); throw new BatchContainerRuntimeException(e); } }
public override TextMapper Build(string field) { return new TextMapper(field, column, validated, analyzer); }
public Dictionary<string, string> Encode(Dictionary<string, object> tableProperties) { return new Dictionary<string, string>(); }
public bool IsSiteUnderSite(string siteRootPath) { foreach (var siteRoot in GetSiteRoots()) { if (siteRootPath.Length > siteRoot.Length && siteRootPath.StartsWith(CmsFileUtil.AddTrailingSeparator(siteRoot))) { return true; } } return false; }
public static int DeleteOrphans(EntityManager em) { if (em == null) { throw new ArgumentNullException("Entity manager cannot be null."); } var query = em.CreateNamedQuery("Audit.cullOrphans"); return query.ExecuteUpdate(); }
private List<Column> ResolveProjection(View from) { List<Column> projection = GetProjection(); if (!projection.All(column => from.Contains(column))) { throw new InvalidOperationException(string.Format("The View of Columns {0} does not contain all the selected, or projected Columns {1}", from.Columns(), projection)); } return projection; }
public Traverse TRAVERSE_FROM(DomainObjectMatch<object> start) { DomainObjectMatch<object> delegateMatch = APIAccess.GetDelegate(start); DomainObjectMatch<object> match = delegateMatch ?? start; TraversalExpression te = new TraversalExpression(match, this.queryExecutor); this.queryExecutor.AddAstObject(te); Traverse ret = APIAccess.CreateTraverse(te); QueryRecorder.RecordInvocation(this, "TRAVERSE_FROM", ret, QueryRecorder.PlaceHolder(match)); return ret; }
public static int IndexOf(string s, string substr, int startIndex, int endIndex) { if (startIndex < 0) { startIndex = 0; } int srclen = s.Length; if (endIndex > srclen) { endIndex = srclen; } int sublen = substr.Length; if (sublen == 0) { return startIndex > srclen ? srclen : startIndex; } int total = endIndex - sublen + 1; char c = substr[0]; for (int i = startIndex; i < total; i++) { if (s[i] != c) { continue; } int j = 1; int k = i + 1; while (j < sublen) { if (substr[j] != s[k]) { break; } j++; k++; } if (j == sublen) { return i; } } return -1; }
public override bool ContainsWithinBounds(object value) { int result = CompareTo(from, value); return result == 0 || (result < 0 && CompareTo(to, value) >= 0); }
public static JaxbPersistence Unmarshal(JPAPXml pxml) { bool isTraceOn = TraceComponent.IsAnyTracingEnabled(); if (isTraceOn && tc.IsEntryEnabled()) Tr.Entry(tc, "unmarshal : " + pxml); InputStream is = null; JaxbPersistence persistence = null; try { SAXParser parser = ParserFactory.NewSAXParser(true, false); JaxbUnmarshaller handler = new JaxbUnmarshaller(pxml); is = pxml.OpenStream(); parser.Parse(is, handler); persistence = handler.IvPersistence; persistence.SetResult(handler.IvHandler.GetResult()); } catch (Exception ex) { FFDCFilter.ProcessException(ex, CLASS_NAME + ".Unmarshal", "109", pxml); if (isTraceOn && tc.IsDebugEnabled()) Tr.Debug(tc, " unmarshal : caught exception : " + ex); Throwable root = FindRootCause(ex); PersistenceException pex = null; string appName = pxml.GetApplInfo().GetApplName(); string modName = pxml.GetArchiveName(); if (root is SAXParseException sa
public void SetDimensionality(int dimensionality) { int maxdim = GetMaxDim(); if (maxdim > dimensionality) { throw new ArgumentException($"Given dimensionality {dimensionality} is too small w.r.t. the given values (occurring maximum: {maxdim})."); } this.dimensionality = dimensionality; }
public static ColumnValue Orr(string column, object value) { return new ColumnValue(column, ORR, value); }
protected void CheckWritePermissionsInFolder(CmsDbContext dbc, CmsResource folder) { ResultSet res = null; PreparedStatement stmt = null; Connection conn = null; CmsUUID projectId = dbc.RequestContext.CurrentProject.Uuid; // first read all subresources with ACEs List<CmsResource> resources = new List<CmsResource>(); try { conn = m_sqlManager.GetConnection(dbc); stmt = m_sqlManager.GetPreparedStatement(conn, projectId, "C_RESOURCES_READ_WITH_ACE_1"); stmt.SetString(1, folder.RootPath + "%"); res = stmt.ExecuteQuery(); while (res.Next()) { resources.Add(CreateResource(res, projectId)); } } catch (SQLException e) { throw new CmsDbSqlException( Messages.Get().Container(Messages.ERR_GENERIC_SQL_1, CmsDbSqlException.GetErrorQuery(stmt)), e ); } finally { m_sqlManager.CloseAll(dbc, conn, stmt, res); } // check current user write permission for each of these resources foreach (var resource
public int? GetMaxStatements() { var maxStatementsValue = childNode.GetTextValueForPatternName("max-statements"); if (maxStatementsValue != null && maxStatementsValue != "null") { return int.Parse(maxStatementsValue); } return null; }
public override Stream Read() { StoreResourceInputStream inStream = null; ConnectionResource res = null; try { res = Context.GetThreadContext().GetConnectionResource(); var stmt = res.CreateStatement(); var cmd = new StringBuilder() .Append("select ").Append(JDBCStoreResource.COLNAME_FILECONTENT).Append(" ") .Append("from ").Append(JDBCStoreResource.TABLENAME_STORE).Append(" ") .Append("where ID =").Append(GetGeneralID()); var resultSet = stmt.ExecuteQuery(cmd.ToString()); if (resultSet.Next()) { if (Context.GetDbType().SupportsBinaryInputStream()) { inStream = new JDBCStoreResourceInputStream(this, res, resultSet.GetBinaryStream(1)); } else { inStream = new JDBCStoreResourceInputStream(this, res, resultSet.GetBlob(1)); } } resultSet.Close(); stmt.Close(); } catch (IOException e) { JDBCStoreResource.LOG.Error("read of content failed", e); throw new EFapsException(typeof(JDBCStoreResource), "read.SQLException", e); } ca
private DataType GetCachedData(KeyType key) { lock (cache) { return cache.TryGetValue(key, out DataType value) ? value : null; } }
public R ToFloat64Array(double[] values, int pos, int length) { return Handle(Value.Float64Array(values, pos, length)); }
public static string Param(string name) { if (name.Equals("id")) { return GetId(); } else if (RequestContext.GetRequestVo().GetUserSegments()[name] != null) { return RequestContext.GetRequestVo().GetUserSegments()[name]; } else if (RequestContext.GetRequestVo().GetWildCardName() != null && name.Equals(RequestContext.GetRequestVo().GetWildCardName())) { return RequestContext.GetRequestVo().GetWildCardValue(); } else { return RequestContext.GetHttpRequest().GetParameter(name); } }
public ICollection<GerritEventListener> RemoveAllEventListeners() { lock (this) { HashSet<GerritEventListener> listeners = new HashSet<GerritEventListener>(gerritEventListeners); gerritEventListeners.Clear(); return listeners; } }
public static BaseResult ShopUpdate(string accessToken, ShopUpdate shopUpdate) { return ShopUpdate(accessToken, JsonUtil.ToJsonString(shopUpdate)); }
public void SetLevel2CacheLocation(string locationExpr) { if (locationExpr != null) { // property name handling in location string location = PropertyReplace(locationExpr); // create caching directory DirectoryInfo dir = new DirectoryInfo(location); if (!dir.Attributes.HasFlag(FileAttributes.Directory)) { if (dir.Exists) { Log.Error($"Location {location} for 2nd level cache should be a directory."); throw new InvalidOperationException($"Invalid location for SetLevel2CacheLocation, {location} has to be a directory."); } else { try { dir.Create(); } catch { Log.Warn($"Directory {location} for 2nd level cache could not be created."); } } } this.location = location; } }
private void DeleteBus(BusGroup group) { if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) SibTr.Entry(tc, "DeleteBus", group); // Find the position in the list which contains the group, and remove the group. BusGroup[] t = _buses; for (int i = 0; i < _buses.Length; i++) { if (_buses[i].Equals(group)) { _buses = new BusGroup[t.Length - 1]; if (i > 0) Array.Copy(t, 0, _buses, 0, i); if (i < t.Length - 1) Array.Copy(t, i + 1, _buses, i, t.Length - 1 - i); break; } } if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) SibTr.Exit(tc, "DeleteBus"); }
public static int GetLongOctalBytes(long value, byte[] buf, int offset, int length) { byte[] temp = new byte[length + 1]; GetOctalBytes(value, temp, 0, length + 1); Array.Copy(temp, 0, buf, offset, length); return offset + length; }
public R Get() { latch.Wait(); try { lock.EnterWriteLock(); if (isCancelled) { throw new OperationCanceledException(); } else if (failure != null) { throw new ExecutionException(failure); } return result; } finally { lock.ExitWriteLock(); } }
public Request<ImportInstanceRequest> GetDryRunRequest() { Request<ImportInstanceRequest> request = new ImportInstanceRequestMarshaller().Marshall(this); request.AddParameter("DryRun", true.ToString()); return request; }
public override void EUnset(int featureID) { switch (featureID) { case TypesPackage.JvmEnumAnnotationValue__Values: GetValues().Clear(); return; } base.EUnset(featureID); }
public override BraveSpan SetTag(string key, decimal value) { if (finishCalled) return this; if (TrySetPeer(key, value)) return this; // handle late sampling decision if (Tags.SAMPLING_PRIORITY.Key.Equals(key) && value == 0) { delegate.Abandon(); // convert the span to no-op delegate = tracer.ToSpan(delegate.Context.ToBuilder().Sampled(false).Build()); } return SetTag(key, value.ToString()); }
public object ClickAndExpectOneOf(params object[] expected) { dispatcher.BeforeClick(this, expected); GetElement().Click(); if (bool.Parse(Config.GetConfigProperty(ConfigProperty.ENABLE_GUI_LOGGING))) { LogUIAction(UIActions.CLICKED); } // If there are no expected objects, then it means user wants this method // to behave as a click only. So let's skip processing of alerts and leave // that to the user. if (expected == null || expected.Length == 0) { return null; } if (parent != null) { WebDriverWaitUtils.WaitUntilPageIsLoaded(parent.GetCurrentPage()); } ValidatePresenceOfAlert(); long timeout = Grid.GetExecutionTimeoutValue() / 1000; try { var wait = new WebDriverWait(Grid.Driver(), TimeSpan.FromSeconds(timeout)); wait.IgnoreExceptionTypes(typeof(NoSuchElementException), typeof(PageValidationException)); object expectedObj = wait.Until(webDriver => { StringBuilder sb = new StringBuilder(); int i = 1; foreach (var expect in expected) { try
protected override void DefineWidgets() { List<string> selectOptions = GetModulesFromServer(); if (!selectOptions.Any()) { // no import modules available, display message AddWidget(new CmsWidgetDialogParameter(this, "moduleupload", PAGES[0], new CmsDisplayWidget(key(Messages.GUI_MODULES_IMPORT_NOT_AVAILABLE_0)))); } else { // add the file select box widget AddWidget(new CmsWidgetDialogParameter(this, "moduleupload", PAGES[0], new CmsSelectWidget(selectOptions))); } }
private void WriteStringCustom(int len) { // And then we'll need to verify need for escaping etc: int end = _outputTail + len; int[] escCodes = _outputEscapes; int maxNonEscaped = (_maximumNonEscapedChar < 1) ? 0xFFFF : _maximumNonEscapedChar; int escLimit = Math.Min(escCodes.Length, maxNonEscaped + 1); int escCode = 0; CharacterEscapes customEscapes = _characterEscapes; while (_outputTail < end) { char c; // Fast loop for chars not needing escaping while (true) { c = _outputBuffer[_outputTail]; if (c < escLimit) { escCode = escCodes[c]; if (escCode != 0) { break; } } else if (c > maxNonEscaped) { escCode = CharacterEscapes.ESCAPE_STANDARD; break; } else { if ((_currentEscape = customEscapes.GetEscapeSequence(c)) != null) { escCode = CharacterEsca
protected void DecideIfProxyGrantingTicketShouldBeReleasedAsAttribute(Dictionary<string, List<object>> attributes, Dictionary<string, object> model, RegisteredService service) { var policy = service.GetAttributeReleasePolicy(); var isAuthorized = policy != null && policy.IsAuthorizedToReleaseProxyGrantingTicket(); var pgtIou = model[CasViewConstants.MODEL_ATTRIBUTE_NAME_PROXY_GRANTING_TICKET_IOU] as string; DecideAttributeReleaseBasedOnServiceAttributePolicy(attributes, pgtIou, CasViewConstants.MODEL_ATTRIBUTE_NAME_PROXY_GRANTING_TICKET_IOU, service, isAuthorized); var pgtId = model[CasViewConstants.MODEL_ATTRIBUTE_NAME_PROXY_GRANTING_TICKET] as string; DecideAttributeReleaseBasedOnServiceAttributePolicy(attributes, pgtId, CasViewConstants.MODEL_ATTRIBUTE_NAME_PROXY_GRANTING_TICKET, service, isAuthorized); }
public string BuildLine(T entity, bool appendLineTermination) { CheckEntityConfig(); StringBuilder sb = new StringBuilder(); bool first = true; foreach (ColumnInfo<object> columnInfo in allColumnInfos) { if (first) { first = false; } else { sb.Append(columnSeparator); } object value; try { value = columnInfo.GetValue(entity); } catch (Exception) { throw new InvalidOperationException($"Could not get value from entity field: {columnInfo}"); } var castConverter = (Converter<object, object>)columnInfo.GetConverter(); string str = castConverter.JavaToString(columnInfo, value); bool needsQuotes = columnInfo.NeedsQuotes; if (str == null) { if (needsQuotes) { sb.Append(columnQuote).Append(columnQuote); } continue; } // need to protect the column if it contains a quote if (str.IndexOf(columnQuote) >= 0) { WriteQuoted(sb, str); continue; } if (!needsQuotes) { for (in
public string GetBaseName() { string n = GetName(); int idx = n.LastIndexOf('.'); if (idx < 0) return n; return n.Substring(0, idx); }
public void NotificationCreated(RuntimeUpdateManager updateManager, RuntimeUpdateNotification notification) { class MyCompletionListener : CompletionListener<bool> { private string notificationName; public MyCompletionListener(string name) { notificationName = name; } public void SuccessfulCompletion(Future<bool> future, bool result) { // The configuration update for which we were monitoring is now complete. // Update our awareness to the update and perform any deferred actions. ConfigUpdateCompleted(notificationName); } public void FailedCompletion(Future<bool> future, Exception exception) { // The configuration update failed, but we still want to resume functions. // Update our awareness to the update and perform any deferred actions. ConfigUpdateCompleted(notificationName); } } if (deactivated) return; int prevCnt = ConfigUpdateInProgress(); if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) Tr.Debug(PersistentExecutorImpl.this, tc, $"Notified of \"{notification.Name}\" previous configUpdatesInProgress: {prevCnt}"); FutureMonitor futureMonitor = _futureMonitor; if (futureMonitor != null) { MyCompletionListener newListe
public void SetNumberOfDigits(int numberOfDigits) { Condition.Instance.EnsureAtLeast(numberOfDigits, 1, "The number of digits must be at least 1"); this.numberOfDigits = numberOfDigits; SetNumber(Math.Min(GetNumber(), GetMaxNumber(numberOfDigits))); }
protected void DeleteRelationsWithSiblings(CmsDbContext dbc, CmsResource resource) { // get all siblings List<CmsResource> siblings; if (resource.GetSiblingCount() > 1) { siblings = ReadSiblings(dbc, resource, CmsResourceFilter.ALL); } else { siblings = new List<CmsResource> { resource }; } // clean the relations in content for all siblings I_CmsVfsDriver vfsDriver = GetVfsDriver(dbc); foreach (var sibling in siblings) { // clean the relation information for this sibling vfsDriver.DeleteRelations( dbc, dbc.CurrentProject().GetUuid(), sibling, CmsRelationFilter.TARGETS.FilterDefinedInContent()); } }
public int CheckIn() { try { lock (STATIC_LOCK) { m_LogStream = new StreamWriter(new FileStream(DEFAULT_LOGFILE_PATH, FileMode.Create, FileAccess.Write)); CmsObject cms = GetCmsObject(); if (cms != null) { return CheckInInternal(); } else { m_LogStream.WriteLine("No CmsObject given. Did you call init() first?"); return -1; } } } catch (FileNotFoundException e) { Console.WriteLine(e); return -2; } }
public async Task<PolicyDefinitionInner> GetAtManagementGroupAsync(string policyDefinitionName, string managementGroupId) { var response = await GetAtManagementGroupWithServiceResponseAsync(policyDefinitionName, managementGroupId); return response.Body; }
public static T[] Concat<T>(T first, T[] others) { T[] arr = new T[1]; arr[0] = first; return Concat(arr, others); }
public void CopyStartElement(InputElementStack elemStack, AttributeCollector attrCollector) { // Any namespace declarations/bindings? int nsCount = elemStack.GetCurrentNsCount(); if (nsCount > 0) // yup, got some... { /* First, need to (or at least, should?) add prefix bindings: * (may not be 100% required, but probably a good thing to do, * just so that app code has access to prefixes then) */ for (int i = 0; i < nsCount; ++i) { string prefix = elemStack.GetLocalNsPrefix(i); string uri = elemStack.GetLocalNsURI(i); if (string.IsNullOrEmpty(prefix)) // default NS { SetDefaultNamespace(uri); } else { SetPrefix(prefix, uri); } } } WriteStartElement(elemStack.GetPrefix(), elemStack.GetLocalName(), elemStack.GetNsURI()); if (nsCount > 0) { // And then output actual namespace declarations: for (int i = 0; i < nsCount; ++i)
private Rule Unicode() { return Sequence( '\\', Hex(), Optional(Hex(), Optional(Hex(), Optional(Hex(), Optional(Hex(), Optional(Hex()))))), Optional(Whitespace()) ); }
public void ValueWasAccessed(DCache cache, object id, long expirationTime, int inactivity) { ValueHasChanged(cache, id, expirationTime, inactivity); }
public T Get(object term) { // Check that an index vector does not already exist. T v = termToItem.TryGetValue(term, out var value) ? value : default; if (v == null) { lock (this) { // Confirm that some other thread has not created an index // vector for this term. v = termToItem.TryGetValue(term, out value) ? value : default; if (v == null) { // Generate the index vector for this term and store it. v = generator.Generate(); termToItem[(string)term] = v; } } } return v; }
public static void AssertOneParameter(MethodInfo method, Type annotation) { if (method.GetParameters().Length != 1) { throw annotation == null ? Messages.MethodHasToDeclareExactlyOneParameter(method) : Messages.MethodHasToDeclareExactlyOneParameter2(method, annotation); } }
public ObjectInstance RegisterMBean(object obj, ObjectName name) { return delegate.RegisterMBean(obj, name); }
private int GetSizeI(bool fwd) { int size = 0; foreach (var e in elements) { if (e is GroupDeviceElement || fwd) { size += e.GetSize(true); } } return size; }
public Task<MatchDetail> GetMatchAsync(long matchId, bool includeTimeline) { return Task.Run(() => handler.GetMatch(matchId, includeTimeline)); }
public override bool IsSet(int featureID) { switch (featureID) { case AfplibPackage.EDM__DM_NAME: return DM_NAME_DEFAULT == null ? dmName != null : !DM_NAME_DEFAULT.Equals(dmName); } return base.IsSet(featureID); }
public static string GetColorNameFromValue(int colorValue) { foreach (var entry in COLOR_MATCHES) { int knownValue = entry.Value; if (colorValue == knownValue) { return entry.Key; } } return null; }
public void ScrollContinuously(int numberOfSeconds) { for (int i = 0; i < numberOfSeconds; i += 2) { ((IJavaScriptExecutor)driver).ExecuteScript("window.scrollBy(0,250);"); try { Thread.Sleep(SECONDS_TO_SLEEP); } catch (ThreadInterruptedException e) { LOG.Info("Error while scrolling!"); } } }
void SetAttributesForInit(Dictionary<string, object> attr) { this.attributes.Clear(); if (attr != null) { foreach (var pair in attr) { this.attributes[pair.Key] = pair.Value; } } }
public static Rule<T> FromUri<T>(string uri, List<string> methods, T target) { return new Rule<T>(uri, methods, target); }
public async Task<Observable<ServiceResponse<RecommendationRuleInner>>> GetRuleDetailsByWebAppWithServiceResponseAsync(string resourceGroupName, string siteName, string name) { if (resourceGroupName == null) { throw new ArgumentException("Parameter resourceGroupName is required and cannot be null."); } if (siteName == null) { throw new ArgumentException("Parameter siteName is required and cannot be null."); } if (name == null) { throw new ArgumentException("Parameter name is required and cannot be null."); } if (this.client.SubscriptionId() == null) { throw new ArgumentException("Parameter this.client.SubscriptionId() is required and cannot be null."); } if (this.client.ApiVersion() == null) { throw new ArgumentException("Parameter this.client.ApiVersion() is required and cannot be null."); } bool? updateSeen = null; string recommendationId = null; var response = await service.GetRuleDetailsByWebAppAsync(resourceGroupName, siteName, name, this.client.SubscriptionId(), updateSeen, recommendationId, this.client.ApiVersion(), this.client.AcceptLanguage(), this.client.UserAgent());
public override void EncodeBegin(FacesContext context) { // Initialize attributes string src = (string)GetAttributes()["src"]; // src is mandatory if (src == null) { throw new InvalidOperationException("The src attribute is mandatory for the Jawr image path tag."); } HttpRequest request = (HttpRequest)context.ExternalContext.Request; BinaryResourcesHandler imgRsHandler = GetBinaryResourcesHandler(context); // Refresh the config if needed RendererRequestUtils.RefreshConfigIfNeeded(request, imgRsHandler.GetConfig()); Render(context); base.EncodeBegin(context); // Reset the Thread local for the Jawr context ThreadLocalJawrContext.Reset(); }
private double CalculateRate(long cumulative, long currentTime) { long timeSinceMapStart = 0; Debug.Assert(GetPhase() == Phase.MAP, "MapTaskStatus not in map phase!"); long startTime = GetStartTime(); timeSinceMapStart = currentTime - startTime; if (timeSinceMapStart <= 0) { LOG.Error($"Current time is {currentTime} but start time is {startTime}"); return 0; } return (double)cumulative / timeSinceMapStart; }
public override int DoStartTag() { try { conn = GetConnection(); } catch (SqlException e) { throw new JspException(sql + ": " + e.Message, e); } return EVAL_BODY_BUFFERED; }
public override SimpleHadoopFilesystemConfigStore CreateConfigStore(Uri configKey) { FileSystem fs = CreateFileSystem(configKey); Uri physicalStoreRoot = GetStoreRoot(fs, configKey); Uri logicalStoreRoot = new Uri(GetSchemePrefix() + physicalStoreRoot); return new SimpleHadoopFilesystemConfigStore(fs, physicalStoreRoot, logicalStoreRoot); }
public Dictionary<Type, List<InjectionTarget>> GetDeclaredInjectionTargets(List<InjectionBinding> resolvedInjectionBindings) { bool isTraceOn = TraceComponent.IsAnyTracingEnabled(); if (isTraceOn && tc.IsEntryEnabled()) Tr.Entry(tc, "GetDeclaredInjectionTargets"); Dictionary<Type, List<InjectionTarget>> declaredTargets = new Dictionary<Type, List<InjectionTarget>>(); // First, collect declared injection targets on a per-class basis. foreach (var injectionBinding in resolvedInjectionBindings) { if (!injectionBinding.IsResolved()) { if (isTraceOn && tc.IsDebugEnabled()) Tr.Debug(tc, "skipping unresolved " + injectionBinding); continue; } if (isTraceOn && tc.IsDebugEnabled()) Tr.Debug(tc, "adding targets for " + Util.Identity(injectionBinding) + '[' + injectionBinding.GetDisplayName() + ']'); var injectionTargets = InjectionProcessorContextImpl.GetInjectionTargets(injectionBinding); if (injectionTargets != null) { foreach (var target in injectionTargets) { var member = target.GetMember(); var memberClass = member.DeclaringType; if (isTr
public synchronized bool IsInconsistent() { RestoreConsistencyCheck(); if (!consistencyCheckingState.IsInconsistent()) { incompleteness_.Log(incompleteness_.GetIncompletenessMonitorForClassification()); } return consistencyCheckingState.IsInconsistent(); }
private CmsFavoriteEntry GetEntry(Component row) { if (row is CmsFavInfo favInfo) { return favInfo.GetEntry(); } return null; }
public MatchIterator Get(long key, int hashCode) { int bucket = hashCode & numBucketsMask; int bucketOffset = bucket << 4; MemorySegment segment = buckets[bucketOffset >> segmentSizeBits]; int segOffset = bucketOffset & segmentSizeMask; while (true) { long address = segment.GetLong(segOffset + 8); if (address != INVALID_ADDRESS) { if (segment.GetLong(segOffset) == key) { return ValueIter(address); } else { bucket = (bucket + 1) & numBucketsMask; if (segOffset + 16 < segmentSize) { segOffset += 16; } else { bucketOffset = bucket << 4; segOffset = bucketOffset & segmentSizeMask; segment = buckets[bucketOffset >> segmentSizeBits]; } } } else { return ValueIter(INVALID_ADDRESS); } } }
public override InventoryMessage MakeInventoryMessage(byte[] payloadBytes, int length) { return new InventoryMessage(params, payloadBytes, this, length); }
public List<DistRaid> GetRunningJobs() { var list = new List<DistRaid>(); lock (jobs) { foreach (var jobList in jobs.Values) { lock (jobList) { list.AddRange(jobList); } } } return list; }
public ViewPager.PageChangeListener SetInternalPageChangeListener(ViewPager.PageChangeListener listener) { ViewPager.PageChangeListener oldListener = mInternalPageChangeListener; mInternalPageChangeListener = listener; return oldListener; }
public override List<CPDefinitionOptionRel> FindByCPDefinitionId(long cpDefinitionId, int start, int end, OrderByComparator<CPDefinitionOptionRel> orderByComparator) { return FindByCPDefinitionId(cpDefinitionId, start, end, orderByComparator, true); }
private OASFilter GetFilter() { ClassLoader cl = Thread.CurrentThread.ContextClassLoader; if (cl == null) { cl = typeof(OpenApiServletContextListener).Assembly.GetLoadingAssembly().GetType().Assembly.GetType().Assembly.GetClassLoader(); } return OpenApiProcessor.GetFilter(config, cl); }
public void SetPayloadPercentage(int payloadPercentage) { if (!(payloadPercentage > 0 && payloadPercentage <= 100)) { //if an invalid percentage is given payloadPercentage = 95; } this.actualPayloadPercentage = (double)payloadPercentage / 100; SetMaxBps(this.downStream, this.downStream.maxBps); SetMaxBps(this.upStream, this.upStream.maxBps); }
public static void SetIdentity(DMatrix1Row mat) { int width = Math.Min(mat.NumRows, mat.NumCols); Array.Fill(mat.Data, 0, 0, mat.GetNumElements()); int index = 0; for (int i = 0; i < width; i++, index += mat.NumCols + 1) { mat.Data[index] = 1; } }
public MessagePacker WritePayload(byte[] src, int off, int len) { if (buffer == null || buffer.Size - position < len || len > bufferFlushThreshold) { Flush(); // call flush before write // Directly write payload to the output without using the buffer out.Write(src, off, len); totalFlushBytes += len; } else { buffer.PutBytes(position, src, off, len); position += len; } return this; }
public void RemoveSlot(TimeSlot oldSlot) { if (oldSlot.NextEntry != null) { oldSlot.NextEntry.PrevEntry = oldSlot.PrevEntry; } else { // old slot was tail. this.LastSlot = oldSlot.PrevEntry; } if (oldSlot.PrevEntry != null) { oldSlot.PrevEntry.NextEntry = oldSlot.NextEntry; } else { // oldSlot was head. this.FirstSlot = oldSlot.NextEntry; } }
public static HashSet<Policy> Policies(BasicSettings settings) { return new HashSet<Policy>(settings.Policies() .SelectMany(name => Policy(settings, name))); }
private void WriteObject(BinaryWriter aStream) { aStream.Write(absolute); aStream.Write(normalized); var unmodifiableList = new List<Path.Segment>(segments); aStream.Write(unmodifiableList.Count); foreach (var segment in unmodifiableList) { // Assuming serialization logic for Path.Segment is handled appropriately // You may need to implement a method to serialize Path.Segment if not a simple type segment.Serialize(aStream); } }
public void Rollback() { if (this.messagingFactory == null) { throw new ServiceBusException(false, "MessagingFactory should not be null"); } this.messagingFactory.EndTransaction(this, false); }
private void ReadActivityCodes(Task task, List<CodeAssignmentType> codes) { foreach (var assignment in codes) { var code = m_activityCodeMap.Get(Convert.ToInt32(assignment.ValueObjectId)); if (code != null) { task.AddActivityCode(code); } } }
public override void RemoveSession(string id) { if (com.ibm.ejs.ras.TraceComponent.IsAnyTracingEnabled() && LoggingUtil.SESSION_LOGGER_CORE.IsLoggable(LogLevel.Debug)) { string s = id + appNameForLogging; LoggingUtil.SESSION_LOGGER_CORE.Log(LogLevel.Debug, methodClassName, "RemoveSession", s); } var removedEntry = _sessions.Remove(id); if (removedEntry != null) { _storeCallback.SessionLiveCountDec(removedEntry); } }
protected void PerformUpdate() { // Wrap a try-catch around everything, because an escaping exception would cancel the task from which this is called List<CmsWaitHandle> waitHandles = new List<CmsWaitHandle>(); try { List<object> work = new List<object>(); m_workQueue.DrainTo(work); HashSet<CmsUUID> updateIds = new HashSet<CmsUUID>(); foreach (object item in work) { if (item is CmsUUID) { updateIds.Add((CmsUUID)item); } else if (item is CmsWaitHandle) { waitHandles.Add((CmsWaitHandle)item); } } CmsADEConfigCacheState oldState = m_state; if (updateIds.Count > 0 || oldState == null) { try { // Although the updates are performed in a scheduled task, it is still possible // that the task is scheduled immediately after a configuration update event. So // here we ensure that there is at least a small delay between the event and the // actual update. This is required to prevent problems with other caches. Thread.Sleep(
public void InternalError(Exception cause) { LogError("Internal Server Error on " + Request().GetUri(), cause); SendBuffer(HttpStatusCode.InternalServerError, System.Text.Encoding.UTF8.GetBytes(cause.ToString()), "text/plain"); }
public MongoDB Format(MongoDBFormat format) { string strFormat; switch (format) { case MongoDBFormat.BASIC_INTERACTION_META: strFormat = "basic_interaction_meta"; break; case MongoDBFormat.FULL_INTERACTION_META_DATE: strFormat = "full_interaction_meta_date"; break; default: case MongoDBFormat.FULL_INTERACTION_META: strFormat = "full_interaction_meta"; break; } return SetParam("format", strFormat); }
protected override Component NewListComponent(string id, ListItem<ResourceBundleKey> item) { return new Label(id, NewContentResourceModel(item.Model)) .Add(new JQueryJsAppenderBehavior("wrap", "<p></p>")); }
public void AddFormatter(Formatter formatter) { if (_formatters == null) { _formatters = new List<Formatter>(); } _formatters.Add(formatter); }
public async Task<KeyBundle> CreateKeyAsync(string vaultBaseUrl, string keyName, JsonWebKeyType kty, int keySize, List<JsonWebKeyOperation> keyOps, KeyAttributes keyAttributes, Dictionary<string, string> tags, JsonWebKeyCurveName curve) { var response = await CreateKeyWithServiceResponseAsync(vaultBaseUrl, keyName, kty, keySize, keyOps, keyAttributes, tags, curve); return response.Body; }
public JAnnotation GetAnnotation(string name) { var annotations = _class.GetCustomAttributes(true); foreach (var annotation in annotations) { if (annotation.GetType().FullName.Equals(name)) return new JAnnotationWrapper(annotation); } return null; }
protected void CreateOrReuseConnection(ConnectionContext context, bool start) { Connection conn; if (IsReuseConnection()) { conn = GetConnection(); if (conn != null) { // already have a connection cached, give it to the context context.SetConnection(conn); } else { // there is no connection yet; create it and cache it CreateConnection(context); conn = context.GetConnection(); CacheConnection(conn, false); } } else { // we are not to cache connections - always create one CreateConnection(context); conn = context.GetConnection(); CacheConnection(conn, false); } if (start) { // Calling start on started connection is ignored. // But if an exception is thrown, we need to throw away the connection try { conn.Start(); } catch (JMSException e) { msglog.ErrorFailedToStartConnection(e); CacheConnection(null, true); throw; } } }
private void DumpNode(Node node, TransformContext transformContext, StringBuilder builder) { if (node == null) { return; } if (node is ASTProperty prop) { if (!StringFunction.SHORT_NAME.Equals(prop.ToString())) { try { object value = Ognl.GetValue(prop, transformContext, null); builder.Append(prop) .Append(":[") .Append(value == null ? null : ToStringBuilder.ReflectionToString(value, ToStringStyle.SIMPLE_STYLE)) .Append("],"); } catch (OgnlException ex) { // Log the stack trace and suppress the error to avoid halting the system. Console.WriteLine(ex); } } } else { int childCount = node.JjtGetNumChildren(); for (int i = 0; i < childCount; i++) { Node child = node.JjtGetChild(i); DumpNode(child, transformContext, builder); } } }
public void TrackPendingDialogCall(FacebookDialog.PendingCall pendingCall) { if (pendingFacebookDialogCall != null) { // If one is already pending, cancel it; we don't allow multiple pending calls. Console.WriteLine("Tracking new app call while one is still pending; canceling pending call."); CancelPendingAppCall(null); } pendingFacebookDialogCall = pendingCall; }
public static string GetOperation(string method) { string operation = ""; if (method == Methods.POST || method == Methods.PUT || method == Methods.DELETE || method == Methods.PATCH) { operation = "WRITE"; } else if (method == Methods.GET || method == Methods.OPTIONS || method == Methods.HEAD) { operation = "READ"; } // ignore everything else return operation; }
public void Marshall(UpdateBasePathMappingRequest updateBasePathMappingRequest, IProtocolMarshaller protocolMarshaller) { if (updateBasePathMappingRequest == null) { throw new SdkClientException("Invalid argument passed to marshall(...)"); } try { protocolMarshaller.Marshall(updateBasePathMappingRequest.DomainName, DOMAINNAME_BINDING); protocolMarshaller.Marshall(updateBasePathMappingRequest.BasePath, BASEPATH_BINDING); protocolMarshaller.Marshall(updateBasePathMappingRequest.PatchOperations, PATCHOPERATIONS_BINDING); } catch (Exception e) { throw new SdkClientException("Unable to marshall request to JSON: " + e.Message, e); } }
protected CmsUserSearchParameters GetSearchParams() { CmsListState state = GetListState(); CmsUserSearchParameters parameters = new CmsUserSearchParameters(); string searchFilter = state.GetFilter(); parameters.SetSearchFilter(searchFilter); if (!HasOuDetail()) { parameters.SetOrganizationalUnit(OpenCms.GetOrgUnitManager().ReadOrganizationalUnit(GetCms(), GetParamOufqn())); } parameters.SetPaging(GetList().GetMaxItemsPerPage(), state.GetPage()); parameters.SetSorting(GetSortKey(state.GetColumn()), state.GetOrder() == CmsListOrderEnum.OrderAscending); CmsGroup group = GetCms().ReadGroup(new CmsUUID(GetParamGroupid())); parameters.SetGroup(group); parameters.SetFilterByGroupOu(false); return parameters; }
public static DateTime GetInstance(DateTime date, Value type) { if (Value.DATE.Equals(type)) { return date; } return date; // Assuming you meant to transform to another format, otherwise just return the DateTime }
private void ParseElements(Node parent) { if (scriptlessCount > 0) { // We must follow the ScriptlessBody production if one of our parents is ScriptlessBody. ParseElementsScriptless(parent); return; } start = reader.Mark(); if (reader.Matches("<%--")) { ParseComment(parent); } else if (reader.Matches("<%@")) { ParseDirective(parent); } else if (reader.Matches("<jsp:directive.")) { ParseXMLDirective(parent); } else if (reader.Matches("<%!")) { ParseDeclaration(parent); } else if (reader.Matches("<jsp:declaration")) { ParseXMLDeclaration(parent); } else if (reader.Matches("<%=")) { ParseExpression(parent); } else if (reader.Matches("<jsp:expression")) { ParseXMLExpression(parent); } else if (reader.Matches("<%")) { ParseScriptlet(parent); } else if (reader.Matches("<jsp:scriptlet")) { ParseXMLScriptlet(parent); } else if (rea
[HttpGet("application")] public IActionResult ApplicationInfo() { var applicationInfoList = applicationInfoService.GetApplicationInfoList(); return Ok(new Resources<ApplicationInfo>(applicationInfoList, UriHelper.GenerateAbsoluteUri(Url.Action(nameof(ApplicationInfo), "Info"))); }
public static IComparer<T> WithNullsFirst<T>(IComparer<T> comparer) { if (comparer == null) throw new ArgumentNullException(nameof(comparer)); return new Comparer<T>((o1, o2) => { if (o1 == o2) return 0; if (o1 == null) return -1; if (o2 == null) return 1; return comparer.Compare(o1, o2); }); }
public oid WriteLock(int count) { if (count > 0 && counter != null) { counter.AcquireShared(count); } sync.AcquireShared(1); }
public Subscriptions GetSubscriptions() { var parameters = new SortedDictionary<string, string> { { "method", "flickr.push.getSubscriptions" } }; return jinx.FlickrGet(parameters, typeof(Subscriptions)); }
public void DelistFromCleanup(OnePhaseXAResource resource) { if (tc.IsEntryEnabled()) Tr.Entry(tc, "DelistFromCleanup", resource); if (LocalTranCurrentImpl.GlobalTranExists()) { var ise = new InvalidOperationException("Cannot delist Resource from cleanup. A Global transaction is active."); FFDCFilter.ProcessException(ise, "com.ibm.tx.ltc.LocalTranCoordImpl.DelistFromCleanup", "525", this); Tr.Error(tc, "ERR_DELIST_TX_GLB_ACT"); if (tc.IsEntryEnabled()) Tr.Exit(tc, "DelistFromCleanup", ise); throw ise; } if (_cleanupResources == null) { var ise = new InvalidOperationException("Cannot delist Resource. It is not enlisted for cleanup with this LocalTransactionCoordinator."); FFDCFilter.ProcessException(ise, "com.ibm.tx.ltc.LocalTranCoordImpl.DelistFromCleanup", "534", this); Tr.Error(tc, "ERR_DELIST_NOT_ENLISTED"); if (tc.IsEntryEnabled()) Tr.Exit(tc, "DelistFromCleanup", ise); throw ise; } if (_state == State.Running
public override HashSet<CharSequence> KeySet() { var ks = keySet; return ks != null ? ks : (keySet = new HashSet<CharSequence>()); }
public static double fBeta(double beta, double precision, double recall) { if (precision == 0.0 || recall == 0.0) return 0; double numerator = (1 + beta * beta) * precision * recall; double denominator = beta * beta * precision + recall; return numerator / denominator; }
public void SetDatas(IEnumerable<Data> datas) { if(datas == null) throw new ArgumentNullException(nameof(datas)); mDataWatcher.SetDatas(datas); mDatas.Clear(); foreach (var data in datas) { mDatas.Add(data); } // Clear error message, because the caller expects the view state to be reset when all datas change if (!mDatas.Any()) { mErrorMessage = null; } UpdateViews(); }
public static int ConvertColToInt(string col) { string name = col.ToUpper(); int number = 0; int pow = 1; for (int i = name.Length - 1; i >= 0; i--) { number += (name[i] - 'A' + 1) * pow; pow *= TieConstants.EXCEL_LETTER_NUMBERS; } return number - 1; }
public Call GetStatusAsync(string datasource, string ifNoneMatch, ApiCallback<StatusResponse> callback) { Call call = GetStatusValidateBeforeCall(datasource, ifNoneMatch, callback); var localVarReturnType = typeof(StatusResponse); apiClient.ExecuteAsync(call, localVarReturnType, callback); return call; }
private static string GetClassnameFor(string platform) { string pf = "Default"; if (platform != null) { pf = platform; } return "org.apache.ojb.broker.platforms.Platform" + char.ToUpper(pf[0]) + pf.Substring(1) + "Impl"; }
public List<object> DecodeBuffer(RTMPConnection conn, IoBuffer buffer) { int position = buffer.Position; // if (log.IsTraceEnabled) { // log.Trace($"decodeBuffer: {BitConverter.ToString(buffer.ToArray().Skip(position).Take(buffer.Length - position).ToArray()).Replace("-", "")}"); // } List<object> result = null; if (conn != null) { // log.Trace($"Decoding for connection - session id: {conn.GetSessionId()}"); try { result = new List<object>(); RTMPDecodeState state = conn.GetDecoderState(); // if (log.IsTraceEnabled) { // log.Trace($"RTMP decode state {state}"); // } if (!conn.GetSessionId().Equals(state.GetSessionId())) { log.Warn($"Session decode overlap: {conn.GetSessionId()} != {state.GetSessionId()}"); } int remaining; while ((remaining = buffer.Remaining()) > 0) { if (state.CanStartDecoding(remaining)) { // log.Trace("Can start decoding"); state.StartDecoding(); } else {
public CacheManagerBuilder<T> WithCopier<C>(Type clazz, Type copier) { var service = configBuilder.FindServiceByClass<DefaultCopyProviderConfiguration>(); if (service == null) { service = new DefaultCopyProviderConfiguration(); service.AddCopierFor(clazz, copier); return new CacheManagerBuilder<T>(this, configBuilder.AddService(service)); } else { var newConfig = new DefaultCopyProviderConfiguration(service); newConfig.AddCopierFor(clazz, copier, true); return new CacheManagerBuilder<T>(this, configBuilder.RemoveService(service).AddService(newConfig)); } }
public static INDArray Min(INDArray first, INDArray second) { return Min(first, second, true); }
private void OnProgress(int workerNumber, int workerSize, List<long> pointerList, float progress) { if (progressCache == null) { progressCache = new ProgressCache(workerSize, onRealtimeResultListener != null); } progressCache.SetProgress(workerNumber, progress, pointerList); onProgressListener?.OnProgress(progressCache.GetProgress()); if (onRealtimeResultListener != null) { onRealtimeResultListener.OnRealtimeResultListener(progressCache.GetProgress(), progressCache.GetResultPointers()); } }
public Datatype.Builder ClearNestedClasses() { if (nestedClasses is ImmutableList) { nestedClasses = ImmutableList.Create(); } else { nestedClasses.Clear(); } return (Datatype.Builder)this; }
public static byte[] DecryptBase64AES(byte[] data, byte[] key) { try { var decodedData = Convert.FromBase64String(System.Text.Encoding.UTF8.GetString(data)); return DecryptAES(decodedData, key); } catch (Exception) { return null; } }
public void SaveUniqueViolation(SensorContext sensorContext, CxxReportIssue issue) { if (uniqueIssues.Add(issue)) { SaveViolation(sensorContext, issue); } }
public void DeletePrivacyList(string listName) { // The request of the list is a privacy message with an empty list Privacy request = new Privacy(); request.SetPrivacyList(listName, new List<PrivacyItem>()); // Send the package to the server SetRequest(request); }
public void GetExchangeInfo(Exchange.Type currency, long quantity, Action<Exchange> callback) { IsValueValid(quantity); gw2API.GetExchangeInfo(currency.ToString(), quantity.ToString()).ContinueWith(task => { if (task.IsCompletedSuccessfully) { callback(task.Result); } else { // Handle exceptions if necessary } }); }
public static StreamReader CreateReaderForFile(FileInfo source, Encoding encoding) { if (!source.Exists) { throw new FileNotFoundException("File not found.", source.FullName); } return CreateReaderForInputStream(new FileStream(source.FullName, FileMode.Open, FileAccess.Read), encoding); }
private static bool IsLowerBoundCompatible(WildcardType type, params Type[] with) { bool res = true; if (type.GetLowerBounds().Length > 0) { // only one super could be used // couldn't be an object here as ? super Object is always replaced to simply Object before comparison Type lower = GenericsUtils.ResolveClassIgnoringVariables(type.GetLowerBounds()[0]); // target may only be lower bound's super type (or same type) foreach (Type target in with) { if (!target.IsAssignableFrom(lower)) { res = false; break; } } } return res; }
public static int CuMemsetD2D16Async(CUdeviceptr dstDevice, long dstPitch, short us, long width, long height, CUstream hStream) { return CheckResult(CuMemsetD2D16AsyncNative(dstDevice, dstPitch, us, width, height, hStream)); }
public static ICollection<E> UnionColl<E>(ICollection<E> c1, ICollection<E> c2) { return new UColl<E>(c1, c2); }
public static Vector4d EquationFromPoints(Vector3d v0, Vector3d v1, Vector3d v2, Vector4d dest) { return EquationFromPoints(v0.x, v0.y, v0.z, v1.x, v1.y, v1.z, v2.x, v2.y, v2.z, dest); }
public void PutEvents(List<Event> events) { List<Event> filteredEvents = FilterEvents(events); ExecuteHandlers(filteredEvents); foreach (Event eventItem in filteredEvents) { persistenceHandler.WriteEvent(eventItem); } }
private SheetMapper<T> GetPoiMapper(int startRow, ISheet sheet) { IRow row = sheet.GetRow(startRow); List<CsvColumnKey> keys = new List<CsvColumnKey>(row.LastCellNum - row.FirstCellNum); for (short i = row.FirstCellNum; i <= row.LastCellNum; i++) { ICell cell = row.GetCell(i); if (cell != null && cell.CellType != CellType.Blank) { keys.Add(new CsvColumnKey(cell.StringCellValue, i)); } } return GetPoiMapper(new MapperKey<CsvColumnKey>(keys.ToArray())); }
private void AddAttributes(PublisherRegistration publisherRegistration, string group) { // if group == null; group = "DEFAULT_GROUP" if (!string.IsNullOrEmpty(group)) { publisherRegistration.SetGroup(group); } }
public string GetCSharpDataType(Dictionary<string, Shape> shapes, string shapeName, CustomizationConfig customConfig) { if (string.IsNullOrWhiteSpace(shapeName)) { throw new ArgumentException("Cannot derive shape type. Shape name cannot be null or empty"); } if (!shapes.TryGetValue(shapeName, out Shape shape)) { throw new ArgumentException($"Cannot derive shape type. No shape information available for {shapeName}"); } string shapeType = shape.GetType(); if (Structure.GetName() == shapeType) { return namingStrategy.GetCSharpClassName(shapeName); } else if (List.GetName() == shapeType) { string listType = (customConfig != null && customConfig.UseAutoConstructList) ? LIST_AUTO_CONSTRUCT_IMPL : LIST_INTERFACE; string listContainerType = dataTypeMappings[listType]; return $"{listContainerType}<{GetCSharpDataType(shapes, shape.GetListMember().GetShape())}>"; } else if (Map.GetName() == shapeType) { string mapType = (customConfig != null && customCon
public void ConsumeAsync(List<Purchase> purchases, OnConsumeMultiFinishedListener listener) { CheckNotDisposed(); CheckSetupDone("consume"); ConsumeAsyncInternal(purchases, null, listener); }
protected override T Create(params object[] args) { K key = this.GetKey(args); T value = this.CreateInternal(key, args); this.objectCache[key] = value; return value; }
public static long GetEffectivePermission(Member member) { if (member == null) throw new ArgumentNullException(nameof(member)); if (member.IsOwner()) return Permission.ALL_PERMISSIONS; // Default to binary OR of all global permissions in this guild long permission = member.Guild.PublicRole.PermissionsRaw; foreach (Role role in member.Roles) { permission |= role.PermissionsRaw; if (IsApplied(permission, Permission.ADMINISTRATOR.RawValue)) return Permission.ALL_PERMISSIONS; } return permission; }
private static ProtocolSigFingerprint GetSigFingerprint(Type protocol, long serverVersion) { string protocolName = protocol.FullName; lock (PROTOCOL_FINGERPRINT_CACHE) { if (!PROTOCOL_FINGERPRINT_CACHE.TryGetValue(protocolName, out ProtocolSigFingerprint sig)) { int[] serverMethodHashcodes = GetFingerprints(protocol.GetMethods()); sig = new ProtocolSigFingerprint( new ProtocolSignature(serverVersion, serverMethodHashcodes), GetFingerprint(serverMethodHashcodes)); PROTOCOL_FINGERPRINT_CACHE[protocolName] = sig; } return sig; } }
public bool IsEscape(StringBuilder temp, int index) { if (index != 0 && cs[index - 1] == this.ESCAPE) { if (index >= 2 && cs[index - 2] == this.ESCAPE) { // Two escape characters, remove one if (temp.Length != 0) temp.Length--; return false; } else { // Remove the already added escape character if (temp.Length != 0) temp.Length--; return true; } } else { return false; } }
public string OnQueryOverCQL3(EntityMetadata m, Client client, MetamodelImpl metaModel, List<string> relations) { // select column will always be of entity field only! // where clause ordering Type compoundKeyClass = m.IdAttribute.BindableJavaType; EmbeddableType compoundKey = null; string idColumn; if (metaModel.IsEmbeddable(compoundKeyClass)) { compoundKey = metaModel.Embeddable(compoundKeyClass); idColumn = ((AbstractAttribute)m.IdAttribute).GetJPAColumnName(); } else { idColumn = ((AbstractAttribute)m.IdAttribute).GetJPAColumnName(); } StringBuilder builder = new StringBuilder(); bool isPresent = false; List<string> columns = GetColumnList(m, metaModel, GetKunderaQuery().GetResult(), compoundKey); string selectQuery = SetSelectQuery(columns); CQLTranslator translator = new CQLTranslator(); selectQuery = StringUtils.Replace(selectQuery, CQLTranslator.COLUMN_FAMILY, translator.EnsureCase(new StringBuilder(), m.TableName, false).ToString()); builder = CassandraUtilities.App
private static Bitmap CreateEdgeShadow(Context context, int elevation, Orientation orientation, bool parallelLight) { if (elevation == 0) { return null; } else { float shadowWidth = GetShadowWidth(context, elevation, orientation, parallelLight); int shadowColor = GetShadowColor(elevation, orientation, parallelLight); int bitmapWidth = (int)Math.Round((orientation == Orientation.Left || orientation == Orientation.Right) ? Math.Ceiling(shadowWidth) : 1); int bitmapHeight = (int)Math.Round((orientation == Orientation.Top || orientation == Orientation.Bottom) ? Math.Ceiling(shadowWidth) : 1); Bitmap bitmap = new Bitmap(bitmapWidth, bitmapHeight, System.Drawing.Imaging.PixelFormat.Format32bppArgb); using (Graphics canvas = Graphics.FromImage(bitmap)) { Shader linearGradient = CreateLinearGradient(orientation, bitmapWidth, bitmapHeight, shadowWidth, shadowColor); using (Brush paint = new TextureBrush(linearGradient)) { canvas.FillRectangle(paint, 0, 0, bitmapWidth, bitmapHeight); } } return bitmap; } }
public void AddChronoChangedListener(Action<Chronology> listener) { if (chronoListeners == null) { chronoListeners = new List<Action<Chronology>>(); } chronoListeners.Add(listener); }
public void ModifyRequest(ResponseBuilder rb, SearchComponent who, ShardRequest sreq) { if (sreq.Params.GetBool(MtasSolrSearchComponent.PARAM_MTAS, false) && sreq.Params.GetBool(PARAM_MTAS_LIST, false)) { // compute keys HashSet<string> keys = MtasSolrResultUtil.GetIdsFromParameters(rb.Req.GetParams(), PARAM_MTAS_LIST); if ((sreq.Purpose & ShardRequest.PURPOSE_GET_TOP_IDS) != 0) { foreach (string key in keys) { sreq.Params.Remove(PARAM_MTAS_LIST + "." + key + "." + NAME_MTAS_LIST_PREFIX); sreq.Params.Remove(PARAM_MTAS_LIST + "." + key + "." + NAME_MTAS_LIST_START); sreq.Params.Remove(PARAM_MTAS_LIST + "." + key + "." + NAME_MTAS_LIST_NUMBER); sreq.Params.Remove(PARAM_MTAS_LIST + "." + key + "." + NAME_MTAS_LIST_LEFT); sreq.Params.Remove(PARAM_MTAS_LIST + "." + key + "." + NAME_MTAS_LIST_RIGHT); sreq.Params.Remove(PARAM_MTAS_LIST + ".
public static SystemInputDef GetRequestInputModel(Stream api, ModelOptions options) { using (var reader = new OpenApiReader(api)) { return TcasesOpenApi.GetRequestInputModel(reader.Read(), options); } }
private int DeserializeAdditionalHeaderSegments(ByteBuffer pdu, int offset) { // parsing Additional Header Segment int off = offset; int ahsLength = basicHeaderSegment.GetTotalAHSLength(); while (ahsLength != 0) { AdditionalHeaderSegment tmpAHS = new AdditionalHeaderSegment(); tmpAHS.Deserialize(pdu, off); additionalHeaderSegments.Add(tmpAHS); ahsLength -= tmpAHS.GetLength(); off += tmpAHS.GetSpecificField().Position; } return off - offset; }
protected override void _Predict(Dataframe newData) { // Load all trainables on the bundles InitBundle(); List<double> weakClassifierWeights = knowledgeBase.GetModelParameters().GetWeakClassifierWeights(); // Create a temporary map for the observed probabilities in training set StorageEngine storageEngine = knowledgeBase.GetStorageEngine(); var tmp_recordDecisions = storageEngine.GetBigMap("tmp_recordDecisions", typeof(object), typeof(DataTable2D), MapType.HASHMAP, StorageHint.IN_DISK, false, true); // Initialize array of recordDecisions foreach (int rId in newData.Index()) { tmp_recordDecisions[rId] = new DataTable2D(); } // Using the weak classifiers var classifierWeightsArray = new AssociativeArray(); int totalWeakClassifiers = weakClassifierWeights.Count; for (int i = 0; i < totalWeakClassifiers; ++i) { AbstractClassifier mlclassifier = (AbstractClassifier)bundle[STORAGE_INDICATOR + i]; mlclassifier.Predict(newData); classifierWeightsArray.Put(i, weakClassifierWeights[i]); foreach (var e in newD
public S IsIn(ICollection<object> values) { if (values == null) { throw new ArgumentNullException(nameof(values)); } if (IsActualIn(values)) { return Myself(); } FailIfCustomMessageIsSet(); throw Failure(UnexpectedNotIn(actual, values)); }
public TableColumnVisibility ConvertTableColumnVisibility(string tableIdentifier, string json) { string[] split = SplitColumns(json); List<string> visibleColumns = new List<string>(); List<string> invisibleColumns = new List<string>(); foreach (string column in split) { string[] attribute = SplitAttributes(column); string identifier = attribute[0].Split(':')[1].Trim('"'); string visible = attribute[1].Split(':')[1].Trim('"'); if (bool.Parse(visible)) { visibleColumns.Add(identifier); } else { invisibleColumns.Add(identifier); } } return new TableColumnVisibility(tableIdentifier, visibleColumns, invisibleColumns); }
public CreateImageBuilderRequest WithTags(Dictionary<string, string> tags) { SetTags(tags); return this; }
public System.Xml.XmlNode ReadNode() { int tag = Read(); switch (tag) { case 'N': return null; case 'S': case 's': case 'X': case 'x': _isLastChunk = (tag == 'S' || tag == 'X'); _chunkLength = (Read() << 8) + Read(); throw new IOException("Can't handle string in this context"); default: throw new InvalidOperationException($"Expected 'string', got '{tag}'"); } }
private void SaveHistory(string folder) { string name = msa.GetStructureIdentifier(0).GetIdentifier(); using (StreamWriter writer = new StreamWriter(folder + name + "-symm_opt.csv")) { writer.WriteLine("Step,Time,RepeatLength,RMSD,TMscore,MCscore"); for (int i = 0; i < lengthHistory.Count; i++) { writer.Write(i * saveStep + ","); writer.Write(timeHistory[i] + ","); writer.Write(lengthHistory[i] + ","); writer.Write(rmsdHistory[i] + ","); writer.Write(tmScoreHistory[i] + ","); writer.WriteLine(mcScoreHistory[i]); } } }
private ST GenAlternativeTypes(ElementDefinition ed, string id, string shortId) { ST shexAlt = Tmplt(ALTERNATIVE_SHAPES_TEMPLATE); List<string> altEntries = new List<string>(); foreach (ElementDefinition.TypeRefComponent typ in ed.Type) { altEntries.Add(GenAltEntry(id, typ)); } shexAlt.Add("altEntries", string.Join(" OR\n ", altEntries)); return shexAlt; }
public string GetViewId(FacesContext context, string fromAction, string outcome) { return this.GetNavigationCase(context, fromAction, outcome).GetToViewId(context); }
public Type GetConcreteClass(AtomixRegistry registry, string typeName) { ConfiguredType type = registry.GetType(typeClass, typeName); if (type == null) { return null; } return type.NewConfig().GetType(); }
public EntityNameAvailabilityCheckOutputInner CheckNameAvailability(string locationName, CheckNameAvailabilityInput parameters) { return checkNameAvailabilityWithServiceResponseAsync(locationName, parameters).GetAwaiter().GetResult().Body; }
public void Parse(InputSource inputSource, DefaultHandler handler) { SetDefaultHandler(handler); Parse(inputSource); }
[ObjectiveCName("sendPhotoWithPeer:withName:withW:withH:withThumb:withDescriptor:")] public void SendPhoto(Peer peer, string fileName, int w, int h, FastThumb fastThumb, string descriptor) { modules.MessagesModule.SendPhoto(peer, fileName, w, h, fastThumb, descriptor); }
public static Point2D_F64 Center(Quadrilateral_F64 quad, Point2D_F64 center) { if (center == null) center = new Point2D_F64(); center.x = quad.a.x + quad.b.x + quad.c.x + quad.d.x; center.y = quad.a.y + quad.b.y + quad.c.y + quad.d.y; center.x /= 4.0; center.y /= 4.0; return center; }
protected override string GetLogMessage(Exception t) { if (t == null) return "An error occurred"; return "An exception was thrown"; }
public hqlParser.groupByClause_return GroupByClause() { hqlParser.groupByClause_return retval = new hqlParser.groupByClause_return(); retval.start = input.LT(1); CommonTree root_0 = null; Token GROUP121 = null; Token string_literal122 = null; Token COMMA124 = null; ParserRuleReturnScope expression123 = null; ParserRuleReturnScope expression125 = null; CommonTree GROUP121_tree = null; CommonTree string_literal122_tree = null; CommonTree COMMA124_tree = null; try { // hql.g:331:2: ( GROUP ^ 'by' ! expression ( COMMA ! expression )* ) // hql.g:331:4: GROUP ^ 'by' ! expression ( COMMA ! expression )* { root_0 = (CommonTree)adaptor.Nil(); GROUP121 = (Token)Match(input, GROUP, FOLLOW_GROUP_in_groupByClause1573); GROUP121_tree = (CommonTree)adaptor.Create(GROUP121); root_0 = (CommonTree)adaptor.BecomeRoot(GROUP121_tree, root_0); string_literal
public static object Mult(object left, object right) { return InfixOpNode.Mult(left, right, null); }
public void ConnectionFailed(string ident, bool readOnly, SqlConnection conn, SqlException error) { try { conn.Close(); } catch (Exception e) { log.Warn("Failure closing failed connection", "ident", ident, "ro", readOnly, "conn", conn, e); } }
public void ConsumeLine(string line) { sb.Append(line).Append(LINE_SEPARATOR); string logMessage = logMessagePrefix != null ? logMessagePrefix + line : line; if (error) { logger.Error(logMessage); } else { logger.Info(logMessage); } }
private bool NewPluginImage(string name, string pluginId, string filename) { bool success = true; ImageDescriptor id = AbstractUIPlugin.ImageDescriptorFromPlugin(pluginId, filename); if (id == null) { id = ImageDescriptor.GetMissingImageDescriptor(); // id = GetSharedByName(ISharedImages.IMG_OBJS_ERROR_TSK); success = false; } descMap[name] = id; imageMap[name] = id.CreateImage(true); return success; }
public void ObjectAvailable(ConfigObject obj) { // keep this for later _object = obj; // create our field editors try { var fields = obj.GetType().GetFields(); foreach (var field in fields) { // if the field is anything but a plain old public field, // we don't want to edit it if (field.IsPublic) { Add(_object.GetEditor(_ctx, field)); } } } catch (SecurityException se) { log.Warning($"Unable to introspect DObject!? {se}"); } SwingUtil.Refresh(this); }
public void SetCurrentShardLevelMetrics(IEnumerable<string> currentShardLevelMetrics) { if (currentShardLevelMetrics == null) { this.currentShardLevelMetrics = null; return; } this.currentShardLevelMetrics = new List<string>(currentShardLevelMetrics); }
private void LoadDictionary(Stream dictInputStream) { var dictionary = new Dictionary<string, string>(); using (var reader = new StreamReader(dictInputStream, Encoding.UTF8)) { string line; while ((line = reader.ReadLine()) != null) { var lineArray = tabPattern.Split(line); if (lineArray.Length == 4) { var lineMatcher = new Regex(linePattern).Match(lineArray[0].ToLower()); dictionary[lineMatcher.Value.Replace(" ", "")] = lineArray[2]; } else { Console.Error.WriteLine($"WARNING: line starting with {lineArray[0]} is not well-formed; skipping!!"); } } } }
public static void CheckForValidSubTupleIndices(int parentSize, int fromIndex, int toIndex) { if (fromIndex < 0) { throw new ArgumentException($"Start index is negative: {fromIndex}"); } if (toIndex > parentSize) { throw new ArgumentException($"End index is {toIndex}, parent size is {parentSize}"); } if (fromIndex > toIndex) { throw new ArgumentException($"Start index is {fromIndex}, end index is {toIndex}"); } }
public DialogActivity GetNewDialog(Address from, Address to) { CheckState(); if (from == null) { throw new ArgumentException("From address can't be null"); } if (to == null) { throw new ArgumentException("To address can't be null"); } return _GetNewDialog(from, Utils.GetInstance().GenerateTag(), to, null); }
public OcrResult RecognizePrintedText(bool detectOrientation, string url, RecognizePrintedTextOptionalParameter recognizePrintedTextOptionalParameter) { return RecognizePrintedTextWithServiceResponseAsync(detectOrientation, url, recognizePrintedTextOptionalParameter).Result.Body; }
public JFeatureExtractor<T> Extract(List<T> input) { return new JFeatureExtractor<T>(JavaOps.Extract(self, input)); }
private List<CmsResource> SetPropertyInFolder(string resourceRootPath, string propertyDefinition, string newValue, bool recursive) { CmsObject cms = GetCms(); // collect the resources to look up List<string> resources = new List<string>(); if (recursive) { resources = cms.ReadResources(resourceRootPath, CmsResourceFilter.IGNORE_EXPIRATION); } else { resources.Add(resourceRootPath); } List<CmsResource> changedResources = new List<CmsResource>(); CmsProperty newProperty = new CmsProperty(propertyDefinition, null, null); // create permission set and filter to check each resource foreach (string resourcePath in resources) { // loop through found resources and check property values CmsResource res = cms.ReadResource(resourcePath); CmsProperty property = cms.ReadPropertyObject(res, propertyDefinition, false); if (property.IsNullProperty()) { // change structure value newProperty.SetStructureValue(newValue); newProperty.SetName(propertyDefinition); cms.WritePropertyObject(cms.GetRequestContext().RemoveSiteRoot(res.RootPath), newProperty); changedResources.Add(res); } e
public void Rollback() { try { SetConfigLocations(previousConfigLocations); Refresh(); } catch (Exception e) { throw new GeomajasException(e, ExceptionCode.RefreshConfigurationFailed); } }
protected void Report(LocatedException error, VDMToken[] after, VDMToken[] upto) { VDMError vdmerror = new VDMError(error); errors.Add(vdmerror); if (errors.Count >= MAX - 1) { errors.Add(new VDMError(9, "Too many syntax errors", error.Location)); throw new InternalException(9, "Too many syntax errors"); } // Either leave one token beyond something in the after list, or // at something in the next upto list. List<VDMToken> afterList = after.ToList(); List<VDMToken> uptoList = upto.ToList(); try { VDMToken tok = LastToken().Type; while (!uptoList.Contains(tok) && tok != VDMToken.EOF) { if (afterList.Contains(tok)) { NextToken(); break; } tok = NextToken().Type; } } catch (LexException le) { errors.Add(new VDMError(le)); } }
public string GetProviderUrl() { if (providerUrl == null) { providerUrl = GetProviderUrlPattern() .Replace("#host#", GetHost()) .Replace("#port#", GetPort().ToString()); } return providerUrl; }
public static void Main(string[] args) { var cliOptions = CreateCliOptions(); try { var cli = ParseCli(args, cliOptions); var options = LoadOptions(cli); Validate(options); var parser = new ConstraintParser(options); try { Output(parser, options.OutputFile); } catch (IOException e) { throw new Exception(e.Message, e); } } catch (IncompleteCliException e) { // If the command line is not complete just print usage and help PrintErrorWithUsageAndHelp(cliOptions); } }
public async Task<Observable<ServiceResponse<List<ApplicationInsightsComponentAnalyticsItemInner>>>> ListWithServiceResponseAsync(string resourceGroupName, string resourceName, ItemScopePath scopePath, ItemScope scope, ItemTypeParameter type, bool includeContent) { if (this.client.SubscriptionId() == null) { throw new ArgumentException("Parameter this.client.SubscriptionId() is required and cannot be null."); } if (resourceGroupName == null) { throw new ArgumentException("Parameter resourceGroupName is required and cannot be null."); } if (resourceName == null) { throw new ArgumentException("Parameter resourceName is required and cannot be null."); } if (scopePath == null) { throw new ArgumentException("Parameter scopePath is required and cannot be null."); } if (this.client.ApiVersion() == null) { throw new ArgumentException("Parameter this.client.ApiVersion() is required and cannot be null."); } var response = await service.ListAsync(this.client.SubscriptionId(), resourceGroupName, resourceName, scopePath, this.client.ApiVersion(), scope, type, includeContent, this.client.AcceptLanguage(), this.client.UserAgent()); try
public static base_response Update(nitro_service client, autoscaleprofile resource) { autoscaleprofile updateresource = new autoscaleprofile(); updateresource.name = resource.name; updateresource.url = resource.url; updateresource.apikey = resource.apikey; updateresource.sharedsecret = resource.sharedsecret; return updateresource.UpdateResource(client); }
public static NoAvailablePortException NewNoAvailablePortException(Exception cause, string message, params object[] args) { return new NoAvailablePortException(string.Format(message, args), cause); }
public byte[] Data() { using (var bos = new MemoryStream()) { try { ToData(bos); } catch (IOException e) { throw new InvalidOperationException(e.Message, e); } return bos.ToArray(); } }
public void SetBS(System.Collections.Generic.ICollection<System.Byte[]> bS) { if (bS == null) { this.bS = null; return; } this.bS = new System.Collections.Generic.List<System.Byte[]>(bS); }
protected bool CheckUnderflow(int slot) { if (childs[slot] == NULL_ID) { return false; } if (slot == 0) { return CheckUnderflowWithRight(slot); // use nodeParent right sibling } else { if (GetSlotLeft(slot) == slot) { return CheckUnderflowWithRight(slot); // use nodeParent right sibling } else { return CheckUnderflowWithLeft(slot); // use nodeParent left sibling } } }
public CommercePriceListUserSegmentEntryRel GetCommercePriceListUserSegmentEntryRelByUuidAndGroupId(string uuid, long groupId) { return commercePriceListUserSegmentEntryRelPersistence.FindByUUID_G(uuid, groupId); }
public DrawerBuilder WithActivity(Activity activity) { this.mRootView = (ViewGroup)activity.FindViewById(Android.Resource.Id.Content); this.mActivity = activity; this.mLayoutManager = new LinearLayoutManager(mActivity); return this; }
public void Updated(string pid, Dictionary<string, object> properties) { if (FrameworkState.IsStopping() || bContext == null) { return; } if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) { Tr.Entry(tc, "updated", properties); } SSLChannelOptions options = null; SSLChannelOptions old = sslOptions.GetValueOrDefault(pid); if (old == null) { options = new SSLChannelOptions(); if (!sslOptions.TryAdd(pid, options)) { options = sslOptions[pid]; } } else { options = old; } options.UpdateConfiguration(properties, defaultId); options.UpdateRegistration(bContext, sslConfigs); if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) { Tr.Exit(tc, "updated", properties); } }
public void MarkTask(StatusTrail st, bool success) { st.SetStatus(success ? JobStatus.Done : JobStatus.NotDone); st.SetAttemptsDone(st.GetAttemptsDone() + 1); st.SetGivenUp(st.GetAttemptsDone() >= GetMaxTaskAttempts() ? 1 : 0); UpdateStatusTrail(st); }
public EClass GetIfcMappedItem() { if (ifcMappedItemEClass == null) { ifcMappedItemEClass = (EClass)EPackage.Registry.INSTANCE.GetEPackage(Ifc4Package.eNS_URI).GetEClassifiers()[355]; } return ifcMappedItemEClass; }
public override IList<IfcRelSequence> GetIsPredecessorTo() { return (IList<IfcRelSequence>)eGet(Ifc4Package.Literals.IFC_PROCESS__IS_PREDECESSOR_TO, true); }
public double GetCountBetweenValues(double lowValue, double highValue) { return integerValuesHistogram.GetCountBetweenValues( (long)(lowValue * doubleToIntegerValueConversionRatio), (long)(highValue * doubleToIntegerValueConversionRatio) ); }
private void ReadObject(System.IO.Stream stream) { var binaryFormatter = new System.Runtime.Serialization.Formatters.Binary.BinaryFormatter(); binaryFormatter.Deserialize(stream); this.runtimeMetaData = new Dictionary<string, object>(); }
public void AddSample(double[] sampleData) { if (A.GetNumCols() != sampleData.Length) throw new ArgumentException("Unexpected sample size"); if (sampleIndex >= A.GetNumRows()) throw new ArgumentException("Too many samples"); for (int i = 0; i < sampleData.Length; i++) { A.Set(sampleIndex, i, sampleData[i]); } sampleIndex++; }
public void SetBitmapShaderShift(Point origin) { var shader = this.paint.Shader; if (shader != null) { int relativeDx = (int)(-origin.X) % this.shaderWidth; int relativeDy = (int)(-origin.Y) % this.shaderHeight; var localMatrix = new Matrix(); localMatrix.SetTranslate(relativeDx, relativeDy); shader.SetLocalMatrix(localMatrix); } }
public Task<List<AnalysisDefinitionInner>> ListSiteAnalysesAsync(string resourceGroupName, string siteName, string diagnosticCategory, Action<List<AnalysisDefinitionInner>> serviceCallback) { return AzureServiceFuture.FromPageResponse( ListSiteAnalysesSinglePageAsync(resourceGroupName, siteName, diagnosticCategory), (nextPageLink) => ListSiteAnalysesNextSinglePageAsync(nextPageLink), serviceCallback); }
public List<RebootRequest> GetRebootWorkspaceRequests() { if (rebootWorkspaceRequests == null) { rebootWorkspaceRequests = new List<RebootRequest>(); } return rebootWorkspaceRequests; }
public MetricRegistration CollectResourceMetrics(Resource resource, ImmutableManagementResourceRegistration managementResourceRegistration, Func<PathAddress, PathAddress> resourceAddressResolver) { MetricRegistration registration = new MetricRegistration(); CollectResourceMetrics0(resource, managementResourceRegistration, PathAddress.Empty, resourceAddressResolver, registration); return registration; }
public static Message.Builder AddDefaultInstanceToRepeatedField(int repeatedFieldNumber, Message.Builder builder) { return AddDefaultInstanceToRepeatedField(builder.Descriptor.FindFieldByNumber(repeatedFieldNumber), builder); }
public void SyncRecords(Record recAlt, Record recMain) { bool bFieldsInSync = true; // Copy the language-specific fields m_buffer = new VectorBuffer(null); for (int iIndex = 0; iIndex < recMain.GetFieldCount(); iIndex++) { BaseField fieldAlt = recAlt.GetField(iIndex); BaseField fieldMain = null; if (bFieldsInSync) fieldMain = recMain.GetField(iIndex); if (fieldMain == null || !fieldMain.GetFieldName().Equals(fieldAlt.GetFieldName())) { fieldMain = recMain.GetField(fieldAlt.GetFieldName()); bFieldsInSync = false; } if (fieldMain != null && fieldAlt != null) { if (this.IsLanguageOverride(fieldMain)) { // Move this field, but don't call DoRecordChange (READ_MOVE) m_buffer.AddNextField(fieldMain); // Save these to restore later if (!fieldAlt.IsNull()) // Don't move a null { fieldMain.MoveFieldToThis((BaseField)fieldAlt, DBConstants.DISPLAY, DBConstants.READ_M
private void LoadYAMLResource(FileInfo file) { StreamReader reader = null; try { reader = new StreamReader(file.OpenRead()); string line; while ((line = reader.ReadLine()) != null) { // 1. check for comments string[] comments = line.Split(new[] { '#' }, 2); string conf = comments[0]; // 2. get key and value if (conf.Length > 0) { string[] kv = conf.Split(new[] { ": " }, 2); // skip line with no valid key-value pair if (kv.Length == 1) { Console.WriteLine($"Error while trying to split key and value in configuration file {file}: {line}"); continue; } string key = kv[0].Trim(); string value = kv[1].Trim(); // sanity check if (key.Length == 0 || value.Length == 0) { Console.WriteLine($"Error after splitting key and value in configuration file {file}: {line}"); continue; } Console.WriteLine($"Loading configuration property: {key}, {va
public static string Decode(string str) { try { return System.Net.WebUtility.UrlDecode(str); } catch (Exception e) { // Assuming there's a logger set up, replace with your logging framework's method Logger.Warning($"Decodes str [{str}] failed", e); return str; } }
public void AddTemplateAlias(string alias, string templateName) { if (alias == null) throw new ArgumentNullException(nameof(alias), "Alias cannot be null"); if (templateName == null) throw new ArgumentNullException(nameof(templateName), "Template name cannot be null"); templateAliases[alias] = templateName; }
public void SendMessage(string text) { Message message = CreateMessage(); message.Body = text; connection.SendStanza(message); }
public void ForceSet(byte[] newValue) { try { client.SetData().ForPath(path, newValue); } catch (KeeperException.NoNodeException) { try { client.Create().CreatingParentContainersIfNeeded().ForPath(path, newValue); } catch (KeeperException.NodeExistsException) { client.SetData().ForPath(path, newValue); } } }
public void PrepareDialogInstance() { var parser = interfaceService.GetParser(); if (actionContainer != null) { parser.GetData().AddActionContainer(GetId(), actionContainer); } dialog = (Window)parser.CreateView(wrappedObject, Gdx.Files.Internal(dialogData.Value())).First(); if (actionContainer != null) { parser.GetData().RemoveActionContainer(GetId()); } }
public static string GetCanonicalSMILESForPolymer(PolymerNotation polymer) { try { AbstractMolecule molecule = BuilderMolecule.BuildMoleculeFromSinglePolymer(polymer).Molecule; molecule = BuilderMolecule.MergeRgroups(molecule); return Chemistry.Instance.Manipulator.Canonicalize( Chemistry.Instance.Manipulator.ConvertMolecule(molecule, AbstractChemistryManipulator.StType.SMILES) ); } catch (BuilderMoleculeException ex) { throw; } catch (HELM2HandledException ex) { throw; } catch (CTKSmilesException ex) { throw; } catch (CTKException ex) { throw; } catch (NotationException ex) { throw; } catch (ChemistryException ex) { throw; } }
public static string GetMainSidePropertyName(OgmCollectionPersister collectionPersister) { if (!collectionPersister.IsInverse()) { return collectionPersister.UnqualifiedRole; } Loadable mainSidePersister = (Loadable)collectionPersister.ElementPersister; string[] propertyNames = mainSidePersister.PropertyNames; for (int i = 0; i < propertyNames.Length; i++) { string candidateProperty = propertyNames[i]; Type type = mainSidePersister.GetPropertyType(candidateProperty); // Candidate is to-one association if (type.IsEntityType()) { if (collectionPersister.KeyColumnNames.SequenceEqual(mainSidePersister.GetPropertyColumnNames(i))) { return candidateProperty; } } // Candidate is to-many association else if (type.IsCollectionType()) { OgmCollectionPersister mainSideCollectionPersister = GetPersister(collectionPersister.Factory, (CollectionType)type); if (IsCollectionMatching(mainSideCollectionPersister, collectionPersister)) { return candidateProperty; } } } throw new HibernateException($"Couldn't determine main side role
public override bool Put(string key, Bitmap value) { if (key == null || value == null) { throw new ArgumentNullException("key == null || value == null"); } lock (this) { size += SizeOf(key, value); Bitmap previous; map.TryGetValue(key, out previous); map[key] = value; if (previous != null) { size -= SizeOf(key, previous); } } TrimToSize(maxSize); return true; }
public void OnInitialDataDownloaded() { Console.WriteLine("Initial Data Loaded"); context().GetContactsModule().StartImport(); if (appStateVM.IsBookImported()) { OnAppLoaded(); } }
[CheckReturnValue] [NonNull] [BackpressureSupport(BackpressureKind.PASS_THROUGH)] [SchedulerSupport(SchedulerSupport.NONE)] public final IObservable<T> Filter(Func<T, bool> predicate) { if (predicate == null) throw new ArgumentNullException(nameof(predicate), "predicate is null"); return RxJavaPlugins.OnAssembly(new FlowableFilter<T>(this, predicate)); }
public static double Hypergeometric(int k, int n, int Kp, int Np) { if (k < 0 || n < 0 || Kp < 0 || Np < 0) { throw new ArgumentException("All the parameters must be positive."); } Kp = Math.Max(k, Kp); Np = Math.Max(n, Np); // fast and can handle large numbers // Cdf(k) - Cdf(k-1) double probability = ApproxHypergeometricCdf(k, n, Kp, Np); if (k > 0) { probability -= ApproxHypergeometricCdf(k - 1, n, Kp, Np); } return probability; }
using System; using System.IO; using System.IO.Compression; public class Program { public static void Main(string[] args) { try { string url = "C:/data/metars/Surface_METAR_20060326_0000.nc"; var ncd = TypedDatasetFactory.Open(FeatureType.STATION, url, null, new StringBuilder()) as StationObsDataset; var info = new StationObsDatasetInfo(ncd, null); using (FileStream fos2 = new FileStream("C:/TEMP/stationCollection.xml", FileMode.Create)) using (GZipStream zout = new GZipStream(fos2, CompressionMode.Compress)) { info.WriteStationObsDatasetXML(Console.OpenStandardOutput()); info.WriteStationCollectionXML(zout); } FileInfo fileInfo = new FileInfo("C:/TEMP/stationCollection.xml"); Console.WriteLine($" size={fileInfo.Length}"); } catch (IOException ex) { Console.WriteLine($"An I/O error occurred: {ex.Message}"); } } }
public StartInstancesResult WithStartingInstances(params InstanceStateChange[] startingInstances) { if (this.startingInstances == null) { SetStartingInstances(new List<InstanceStateChange>(startingInstances.Length)); } foreach (InstanceStateChange ele in startingInstances) { this.startingInstances.Add(ele); } return this; }
using Android.OS; using Android.Views; public static void SetNavigationBarColor(Window window, int navigationBarColor) { window.AddFlags(WindowManagerFlags.DrawsSystemBarBackgrounds); window.SetNavigationBarColor(navigationBarColor); }
public string GetComponentId() { if (Annotation_Type.featOkTst && ((Annotation_Type)jcasType).casFeat_componentId == null) { jcasType.jcas.ThrowFeatMissing("componentId", "de.julielab.jules.types.Annotation"); } return jcasType.ll_cas.ll_getStringValue(addr, ((Annotation_Type)jcasType).casFeatCode_componentId); }
public static Tuple3<T1, T2, T3> Tuple<T1, T2, T3>(T1 v1, T2 v2, T3 v3) { return new Tuple3<T1, T2, T3>(v1, v2, v3); }
public static int ReadUnsignedVarint(Memory<byte> buffer) { int val = 0; int bits = 0; Span<byte> span = buffer.Span; for (int i = 0; i < span.Length; i++) { byte data = span[i]; val |= (data & 0x7F) << bits; if ((data & 0x80) == 0) { return val; } bits += 7; if (bits > 35) { throw new InvalidOperationException("Variable length quantity is too long for expected integer."); } } throw new InvalidOperationException("Buffer ended unexpectedly."); }
public TargetTcpProxy GetTargetTcpProxy(ProjectGlobalTargetTcpProxyName targetTcpProxy) { var request = new GetTargetTcpProxyHttpRequest { TargetTcpProxy = targetTcpProxy == null ? null : targetTcpProxy.ToString() }; return GetTargetTcpProxy(request); }
public static string Identifier(SourceCode cfml, bool throwError, bool allowColon) { int start = cfml.Pos; if (!cfml.IsCurrentBetween('a', 'z') && !cfml.IsCurrent('_')) { if (throwError) throw new TemplateException(cfml, $"Invalid Identifier, the following character cannot be part of an identifier [{cfml.Current}]"); return null; } do { cfml.Next(); if (!(cfml.IsCurrentBetween('a', 'z') || cfml.IsCurrentBetween('0', '9') || cfml.IsCurrent('_') || (allowColon && cfml.IsCurrent(':')) || cfml.IsCurrent('-'))) { break; } } while (cfml.IsValidIndex()); return cfml.Substring(start, cfml.Pos - start); }
public void SetAction(Action action) { MenuItemModel model = GetOrCreateComponentModel(); model.Action = action; model.Url = null; }
protected override long LogResponse(Response response) { long responseId = base.LogResponse(response); int code = response.StatusCode == null ? 0 : response.StatusCode.Value; string message = response.StatusMessage == null ? StatusResponse.ForCode(code).GetStatus().Message : response.StatusMessage; Status status = new Status(code, message); try { UpdateServiceSummary(status, responseId); } catch (ActivityException ex) { LogException(ex.Message, ex); } catch (SQLException ex) { LogException(ex.Message, ex); } return responseId; }
public static string GetDescription(string keyword, ApplicationContext context, Dictionary<string, string> beanMap) { KeywordInfo keywordInfo = GetKeywordInfo(keyword, context, beanMap); if (keywordInfo == null) { return string.Empty; } string desc = keywordInfo.Description(); if (desc.StartsWith("classpath:")) { try { ResourceEditor editor = new ResourceEditor(); editor.SetAsText(desc); Resource resource = (Resource)editor.GetValue(); using (var stream = resource.InputStream) { using (var reader = new StreamReader(stream)) { return reader.ReadToEnd(); } } } catch (Exception) { // Ignored } } return desc; }
private void LoadBinlogChecksum() { ResultSetPacket rs = null; try { rs = Query("select @@global.binlog_checksum"); List<string> columnValues = rs.GetFieldValues(); if (columnValues != null && columnValues.Count >= 1 && columnValues[0].ToUpper() == "CRC32") { binlogChecksum = LogEvent.BINLOG_CHECKSUM_ALG_CRC32; } else { binlogChecksum = LogEvent.BINLOG_CHECKSUM_ALG_OFF; } } catch (Exception e) { logger.Error("", e); binlogChecksum = LogEvent.BINLOG_CHECKSUM_ALG_OFF; } }
public void SetTextSize(byte field, float size, SizeUnit unit) { FieldInfos fi = GetFieldInfos(field); fi.m_fontSize = size; fi.m_fontSizeUnit = unit; NotifyListeners(); }
private Result TryLockForUpgrade_(L locker, long timeout, TimeUnit unit) { if (Thread.CurrentThread.InterruptionStatus == ThreadInterruptionStatus.Interrupted) { throw new ThreadInterruptedException(); } Result result; if ((result = TryLockForUpgrade_(locker)) == Result.Failed) { result = LockForUpgradeQueuedInterruptibly(locker, AddUpgradeWaiter(), unit.ToNanos(timeout)); } return result; }
protected void DoStart() { if (IsStarted()) return; // Save context classloader Thread thread = Thread.CurrentThread; ClassLoader lastContextLoader = thread.GetContextClassLoader(); MultiException mex = null; try { // Find the webapp ResolveWebApp(); // Get the handler GetServletHandler(); _configurations = LoadConfigurations(); // Initialize the classloader ConfigureClassPath(); InitClassLoader(true); thread.SetContextClassLoader(GetClassLoader()); Initialize(); // Do the default configuration ConfigureDefaults(); // Set classpath for Jasper var entry = _webAppHandler.GetHolderEntry("test.jsp"); if (entry != null) { var jspHolder = (ServletHolder)entry.Value; if (jspHolder != null && jspHolder.GetInitParameter("classpath") == null) { string fileClassPath = GetFileClassPath(); jspHolder.SetInitParameter("classpath", fileClassPath); if (log.IsDebugEnabled()) log.Debug("Set classpath=" + fileClassPath + " for " + jspHolder); } } // Config
public List<LifecycleCallbackType<SessionBeanType<T>>> GetAllPostConstruct() { List<LifecycleCallbackType<SessionBeanType<T>>> list = new List<LifecycleCallbackType<SessionBeanType<T>>>(); List<Node> nodeList = childNode.Get("post-construct"); foreach (Node node in nodeList) { LifecycleCallbackType<SessionBeanType<T>> type = new LifecycleCallbackTypeImpl<SessionBeanType<T>>(this, "post-construct", childNode, node); list.Add(type); } return list; }
public static int CuMemsetD16Async(CUdeviceptr dstDevice, short us, long N, CUstream hStream) { return CheckResult(CuMemsetD16AsyncNative(dstDevice, us, N, hStream)); }
public void SetIdentityAttributeValues(IEnumerable<AttributeNameAndValue> identityAttributeValues) { if (identityAttributeValues == null) { this.identityAttributeValues = null; return; } this.identityAttributeValues = new List<AttributeNameAndValue>(identityAttributeValues); }
public GVRAnimator Animate(int animIndex, float timeInSec) { if (animIndex < 0 || animIndex >= mAnimations.Count) { throw new ArgumentOutOfRangeException("Animation index out of bounds"); } GVRAnimator anim = mAnimations[animIndex]; anim.Animate(timeInSec); return anim; }
[XmlElement("updated", Namespace = "http://www.w3.org/2005/Atom")] public JAXBElement<DateTimeType> CreateEntryTypeUpdated(DateTimeType value) { return new JAXBElement<DateTimeType>(ENTRY_TYPE_UPDATED_QNAME, typeof(DateTimeType), typeof(EntryType), value); }
public FileInfo Write(FileInfo destination) { AssertValid(); if (destination.Attributes.HasFlag(FileAttributes.Directory)) { destination = new FileInfo(Path.Combine(destination.FullName, this.header.FileName)); } if (data != null) { FileUtil.WriteBytes(data, destination); data = null; } else { if (tempFile != null) { FileUtil.Move(tempFile, destination, true); } } return destination; }
using System.Collections.Generic; public static class ImageArchive { public static Dictionary<string, ImageArchiveManifestEntry> MapEntriesById(IEnumerable<ImageArchiveManifestEntry> entries) { var mapped = new Dictionary<string, ImageArchiveManifestEntry>(); foreach (var entry in entries) { mapped[entry.GetId()] = entry; } return mapped; } }
public void SetTitle(string title) { if (this.title == null) { _title = title == null ? "" : title; FireTileEvent(VISIBILITY_EVENT); FireTileEvent(REDRAW_EVENT); } else { this.title.Set(title); } }
public static bool Apply(ViewPosition pos, View view) { return pos.Init(view); }
public ListNamedQueriesResult ListNamedQueries(ListNamedQueriesRequest request) { request = BeforeClientExecution(request); return ExecuteListNamedQueries(request); }
public override Authentication Authenticate(Authentication authentication) { if (authentication == null) { return authentication; } UsernamePasswordAuthenticationToken output; if (authentication is UsernamePasswordAuthenticationToken token) { output = token; } else { output = new UsernamePasswordAuthenticationToken(authentication, authentication.Credentials, authentication.Authorities) { IsAuthenticated = authentication.IsAuthenticated, Details = authentication.Details }; } return delegate.Authenticate(output); }
private static void Request(Request request) { if (request == null) { WonderPush.LogError("Request with null request."); return; } WonderPush.SafeDefer(() => { // Decorate parameters WonderPushRequestParamsDecorator.Decorate(request.GetResource(), request.GetParams()); // Generate signature var authorizationHeader = request.GetAuthorizationHeader(); // Headers Header[] headers = null; if (authorizationHeader != null) { headers = new Header[1] { authorizationHeader }; } string url = WonderPushUriHelper.GetAbsoluteUrl(request.GetResource()); WonderPush.LogDebug($"requesting url: {request.GetMethod()} {url}?{request.GetParams().GetURLEncodedString()}"); // TODO: support other contentTypes such as "application/json" string contentType = "application/x-www-form-urlencoded"; // Handler var handler = request.GetHandler(); HttpEntity entity = null; if (request.GetParams() != null) { try { entity = request.GetParams().GetEntity(null); } catch (IOException ex) { WonderPush.LogError($"Failed
public override void InitUpstream() { NucleicAcid nuc = tempReac.GetTemplate(); if (nuc != null) AddToUpstream(nuc, GetGraph()); foreach (Control cont in tempReac.GetControlledOf()) { AddToUpstream(cont, graph); } }
protected static string JacksonObjectToString(object obj) { try { return mapper.WriteValueAsString(obj); } catch (JsonProcessingException e) { logger.Error("Failed to serialize JSON data: " + e.ToString()); return null; } }
public MonetaryFormat PrefixCode() { if (codePrefixed) return this; else return new MonetaryFormat(negativeSign, positiveSign, zeroDigit, decimalMark, minDecimals, decimalGroups, shift, roundingMode, codes, codeSeparator, true); }
[Obsolete] public static MethodDescriptor<RequestT, ResponseT> Create<RequestT, ResponseT>( MethodType type, string fullMethodName, IMarshaller<RequestT> requestMarshaller, IMarshaller<ResponseT> responseMarshaller) { return new MethodDescriptor<RequestT, ResponseT>( type, fullMethodName, requestMarshaller, responseMarshaller, null, false, false, false); }
private int GetIndicatorStartPos() { switch (GetPosition()) { case Position.TOP: return mIndicatorClipRect.Left; case Position.RIGHT: return mIndicatorClipRect.Top; case Position.BOTTOM: return mIndicatorClipRect.Left; default: return mIndicatorClipRect.Top; } }
public void Execute() { var javaSourceDir = WatcherUtils.GetJavaSource(basedir); try { foreach (var file in Directory.GetFiles(javaSourceDir, "*.java", SearchOption.AllDirectories)) { if (Accept(file)) { ParseController(file); } } } catch (Exception we) { throw new MojoExecutionException("An exception occurred while creating raml file", we); } }
public string PrintNtz(string pNumber, string pDigSep, string pDigGrSep, int pDigitsInGroup) { if (string.IsNullOrEmpty(pNumber)) { return string.Empty; } int dotIdx = pNumber.IndexOf('.'); string leftWing; string rightWing; if (dotIdx == -1) { leftWing = pNumber; rightWing = null; } else { leftWing = pNumber.Substring(0, dotIdx); rightWing = pNumber.Substring(dotIdx + 1); } StringBuilder sb = new StringBuilder(); if (leftWing.StartsWith("-")) { leftWing = leftWing.Substring(1); sb.Append("-"); } AddLeftWing(leftWing, sb, pDigGrSep, pDigitsInGroup); if (rightWing != null && rightWing.Length > 0 && rightWing != "0") { sb.Append(pDigSep); int lastIdxZero = rightWing.LastIndexOf('0'); for (int i = 0; i < lastIdxZero; i++) { char ch = rightWing[i
public ICollection<Epic> GetEpics(EpicFilter filter) { return Get<Epic>(filter ?? new EpicFilter()); }
public static O Deserialise<O>(HttpRequest request, Type requestMessageType) { return Deserialise(request.Body, requestMessageType); }
public string GetArguments() { return GetHeader(FtpMessageHeaders.FTP_ARGS)?.ToString(); }
public void LoadBeans(Resource[] resources) { var beans = new Closure(this, args => beans.Call((Closure)args[0])); var b = new Binding(); b.SetVariable("beans", beans); var shell = classLoader != null ? new GroovyShell(classLoader, b) : new GroovyShell(b); foreach (var resource in resources) { shell.Evaluate(new StreamReader(resource.GetInputStream())); } }
using System.Collections.Generic; public static class MultimapExtensions { public static IDictionary<K, SortedSet<V>> AsMap<K, V>(SortedSetMultimap<K, V> multimap) { return (IDictionary<K, SortedSet<V>>)(IDictionary<K, object>)multimap.AsMap(); } }
public static RunSet ReadRunSet(FileInfo file) { if (file == null) throw new ArgumentNullException(nameof(file)); using (var reader = new StreamReader(file.OpenRead())) { return ReadRunSet(reader); } }
public static void ForEachTrimmedToken(string input, string separator, Action<string> action) { var tokens = input.Split(new[] { separator }, StringSplitOptions.None); foreach (var token in tokens) { action(token.Trim()); } }
public override object CreateResource(ResourceInfo refInfo) { bool trace = TraceComponent.IsAnyTracingEnabled(); if (trace && tc.IsEntryEnabled()) Tr.Entry(this, tc, "CreateResource", refInfo); try { BootstrapContextImpl bootstrapContext = bootstrapContextRef.GetServiceWithException(); if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) Tr.Debug(this, tc, "loading", adminObjectImplClassName); Type adminObjectClass = bootstrapContext.LoadClass(adminObjectImplClassName); ComponentMetaData cData = ComponentMetaDataAccessorImpl.GetComponentMetaDataAccessor().GetComponentMetaData(); string currentApp = null; ResourceAdapterMetaData metadata = bootstrapContext.GetResourceAdapterMetaData(); // cData is null when it's not in an application thread if (cData != null && cData != metadata) { currentApp = cData.J2EEName.Application; applications.Add(cData.J2EEName.Application); } string adapterName = bootstrapContext.GetResourceAdapterName(); if (metadata != null && metadata.IsEmbedded && cData != metadata) { // Metadata is null for
public synchronized bool Send(object message, bool shouldClose, OnComplete onComplete) { if (!IsOpen()) { return false; } this.sendQueued = true; byte[] data; if (message == null) { data = null; } else if (message is string) { data = System.Text.Encoding.UTF8.GetBytes((string)message); // assuming UTF-8 encoding } else if (message is byte[]) { data = (byte[])message; } else { throw WebsocketUtil.WrongMessageType(message.GetType()); } Enqueue(new PendingSend(data, shouldClose, onComplete)); return true; }
public static float CoerceToFloat(object value, float defaultValue) { if (value is float) { return (float)value; } if (value is IConvertible) { return Convert.ToSingle(value); } if (value is string strValue) { if (float.TryParse(strValue, out float result)) { return result; } } return defaultValue; }
public static IPAddress[] GetAllByName(string name) { try { IPAddress addr = Dns.GetHostAddresses(name)[0]; return new IPAddress[] { addr }; } catch (SocketException) { var records = Dns.GetHostAddresses(name); IPAddress[] addrs = new IPAddress[records.Length]; for (int i = 0; i < records.Length; i++) addrs[i] = records[i]; return addrs; } }
private void HandleJASPIMechanism(DeploymentInfo deploymentInfo) { ApplicationPolicy applicationPolicy = SecurityConfiguration.GetApplicationPolicy(this.securityDomain); if (applicationPolicy != null && applicationPolicy.GetAuthenticationInfo() is JASPIAuthenticationInfo) { string authMethod = null; LoginConfig loginConfig = deploymentInfo.GetLoginConfig(); if (loginConfig != null && loginConfig.GetAuthMethods().Count > 0) { authMethod = loginConfig.GetAuthMethods()[0].GetName(); } deploymentInfo.SetJaspiAuthenticationMechanism(new JASPICAuthenticationMechanism(securityDomain, authMethod)); deploymentInfo.SetSecurityContextFactory(new JASPICSecurityContextFactory(this.securityDomain)); deploymentInfo.AddOuterHandlerChainWrapper(next => new JASPICSecureResponseHandler(next)); } }
public void ToASCII(StreamWriter pw, bool addName, string rootName, bool newLine) { if (_Debug) Console.WriteLine($"asciiGrid.ToASCII({addName}, '{rootName}') getName(): {GetEncodedName()}"); if (rootName != null) rootName += "." + GetEncodedName(); else rootName = GetEncodedName(); bool firstPass = true; var e = GetVariables(); while (e.MoveNext()) { ToASCII ta = (ToASCII)e.Current; if (!newLine && !firstPass) pw.Write(", "); ta.ToASCII(pw, addName, rootName, newLine); firstPass = false; } if (newLine) pw.Write("\n"); }
private string GetServiceName() { TransportMetadata tm = GetTransportMetadata(); if (tm == null) { return "null"; } return tm.GetProviderName() + " " + tm.GetName(); }
[Obsolete("This API was formerly stable since ICU 2.0")] public static ResourceBundle GetDateFormatBundle(Type calendarType, Locale locale) { return null; }
private void DynamicallyInitIfNeeded(object value) { /* Check to see if this class was already initialized, * if not, initialize it based on the type of the value. */ if (!IsInitialized()) { if (value is int) { Init(min, max); } else if (value is byte) { Init(min, max); } else if (value is short) { Init(min, max); } else { Init(min, max); } } }
private static Field FindFieldOrThrowException(Type fieldType, Type where) { if (fieldType == null || where == null) { throw new ArgumentException("fieldType and where cannot be null"); } FieldInfo field = null; foreach (var currentField in where.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance | BindingFlags.Static)) { currentField.SetValue(null, null); // Making the field accessible, not needed in C# if (currentField.FieldType == fieldType) { field = currentField; break; } } if (field == null) { throw new FieldNotFoundException($"Cannot find a field of type {fieldType} in where."); } return field; }
public static object[] Unwrap(object[] args) { if (args == null) return null; object[] oa = new object[args.Length]; for (int i = 0; i < args.Length; i++) oa[i] = Unwrap(args[i]); return oa; }
public static void DefaultSmoothShapefile(string shapePath, string outPath) { var pm = new PrintStreamProgressMonitor(Console.Out, Console.Error); var initialFC = OmsShapefileFeatureReader.ReadShapefile(shapePath); var smoother = new OmsLineSmootherMcMaster { pm = pm, pLimit = 10, inVector = initialFC, pLookahead = 13, // pSlide = 1, pDensify = 0.2, pSimplify = 0.01 }; smoother.Process(); var smoothedFeatures = smoother.outVector; OmsShapefileFeatureWriter.WriteShapefile(outPath, smoothedFeatures, pm); }
private static BigInteger GetMultiChoice(int[] choices, JSchema schema, JSVariant[] vars) { // Mixed-radix-encode the contribution from all the subvariants BigInteger baseValue = BigInteger.Zero; for (int i = 0; i < vars.Length; i++) { baseValue = baseValue * vars[i].GetMultiChoiceCount() + GetMultiChoice(choices, schema, vars[i]); } return baseValue; }
public override bool Validate() { if (searchGeometry == null) { SC.Say(messages.GeometricSearchWidgetTitle(), messages.GeometricSearchWidgetNoGeometry()); return false; } else if (SearchCommService.GetVisibleServerLayerIds(mapWidget.GetMapModel()).Count < 1) { SC.Say(messages.GeometricSearchWidgetTitle(), messages.GeometricSearchWidgetNoLayers()); return false; } else { return true; } }
public void Remove(string name) { var m = GetMap(name); if (m != null) { MemoryHeap.Release(m[name]); m.Remove(name); } }
public void Remove(Tree<?, ?> child) { if (child == null) { throw new ArgumentNullException(nameof(child)); } if (!IsChild(child)) { throw new ArgumentException("The given child is not a child."); } Remove(GetIndex(child)); }
public sealed void SetValue(long? value) { this.edmType = EdmType.INT64; this.type = typeof(long); this.value = value.HasValue ? value.Value.ToString() : null; }
public string GetPropertyAsString(string key) { LOG.Info("Getting value for key: " + key); foreach (var bundle in bundles.Values) { try { return bundle.GetString(key); } catch (MissingResourceException e) { LOG.Info("Resource: " + key + " not found!"); } } return null; }
public static DenseMatrix Eye(int k) { DenseMatrix eye = new DenseMatrix(k, k); for (int i = 0; i < k; i++) { eye.Set(i, i, 1); } return eye; }
private void LinkNodeLast(LinkedHashMapEntry<K, V> p) { LinkedHashMapEntry<K, V> last = tail; tail = p; if (last == null) head = p; else { p.Before = last; last.After = p; } }
private void SortActivities() { lock (mInstanceLock) { if (mActivitySorter != null && mActivities.Count > 0) { mActivitySorter.Sort(mIntent, mActivities, Collections.AsReadOnly(mHistoricalRecords)); NotifyChanged(); } } }
public static JsonSimple Parse(Stream input) { JsonSimple inputData = new JsonSimple(input); JsonSimple responseData = new JsonSimple(); // Go through every top level node JsonObject object = inputData.GetJsonObject(); foreach (var key in object.Keys) { // Ignoring some non-form related nodes string strKey = ValidString(key); if (!EXCLUDED_FIELDS.Contains(strKey)) { // And parse them into the response string data = ValidString(object[key]); ParseField(responseData, strKey, data); } } return responseData; }
public static bool IsImage(FileInfo file) { try { string mimeType = MimeTypes.GetMimeType(file.FullName); if (mimeType == null) { // In some OS there is a bug where it always returns null string extension = Path.GetExtension(file.Name).ToLower().TrimStart('.'); string[] suffixes = ImageCodecInfo.GetImageEncoders() .Select(codec => codec.FilenameExtension.ToLower().Trim('*')) .ToArray(); return suffixes.Any(s => s.Contains(extension)); } else { return mimeType.StartsWith("image", StringComparison.OrdinalIgnoreCase); } } catch (IOException) { // Ignored } return false; }
public static int VersionCompare(string str1, string str2) { string[] vals1 = str1.Split('.'); string[] vals2 = str2.Split('.'); int idx = 0; // set index to first non-equal ordinal or length of shortest version string while (idx < vals1.Length && idx < vals2.Length && vals1[idx] == vals2[idx]) { idx++; } // compare first non-equal ordinal number if (idx < vals1.Length && idx < vals2.Length) { int diff = int.Parse(vals1[idx]).CompareTo(int.Parse(vals2[idx])); return Math.Sign(diff); } else { // the strings are equal or one string is a substring of the other // e.g. "1.2.3" = "1.2.3" or "1.2.3" < "1.2.3.4" return Math.Sign(vals1.Length - vals2.Length); } }
public UniqueConstraint<SecondaryTable<T>> GetOrCreateUniqueConstraint() { List<Node> nodeList = childNode.Get("unique-constraint"); if (nodeList != null && nodeList.Count > 0) { return new UniqueConstraintImpl<SecondaryTable<T>>(this, "unique-constraint", childNode, nodeList[0]); } return CreateUniqueConstraint(); }
public int[] ImpliedElements(int anc, int desc) // <style> and <script> are allowed anywhere. { if (desc == SCRIPT_TAG || desc == STYLE_TAG) { return ZERO_INTS; } // It's dangerous to allow free <li> tags because of the way an <li> // implies a </li> if there is an <li> on the parse stack without a // LIST_SCOPE element in the middle. // Since we don't control the context in which sanitized HTML is embedded, // we can't assume that there isn't a containing <li> tag before parsing // starts, so we make sure we never produce an <li> or <td> without a // corresponding LIST or TABLE scope element on the stack. // <select> is not a scope for <option> elements, but we do that too for // symmetry and as an extra degree of safety against future spec changes. FreeWrapper wrapper = (desc != TEXT_NODE && desc < FREE_WRAPPERS.Length) ? FREE_WRAPPERS[desc] : null; if (wrapper != null) { if (anc < wrapper.allowedContainers.Length && !wrap
public void Append(StringConcatenation concat, string indentation) { if (string.IsNullOrEmpty(indentation)) { Append(concat); } else if (concat != null) { AppendSegments(indentation, segments.Count, concat.GetSignificantContent(), concat.LineDelimiter); } }
public void VisitEnum(string name, string descriptor, string value) { if (av != null) { av.VisitEnum(name, descriptor, value); } }
public static HashSet<int> GetAvailablePorts(int fromPort, int toPort) { if (fromPort < MIN_PORT_NUMBER || toPort > MAX_PORT_NUMBER || fromPort > toPort) { throw new ArgumentException($"Invalid port range: {fromPort} ~ {toPort}"); } HashSet<int> result = new HashSet<int>(); for (int i = fromPort; i <= toPort; i++) { Socket s = null; try { s = new Socket(AddressFamily.InterNetwork, SocketType.Stream, ProtocolType.Tcp); s.Bind(new IPEndPoint(IPAddress.Any, i)); result.Add(i); } catch (SocketException) { // Do nothing } finally { s?.Close(); } } return result; }
private VelocityContext ToContext(IDictionary<string, object> bindingMap) { return new VelocityContext(new Dictionary<string, object>(bindingMap)); }
public synchronized int AddColumn(double[] column) { if (isFinished) throw new InvalidOperationException("Cannot add rows to a MatrixBuilder that is finished"); for (int r = 0; r < column.Length; ++r) { if (column[r] != 0d) { // NB: Matlab sparse format is in [col row val] format // NOTE: Matlab indices start at 1, not 0, so update all the // row and column values to be Matlab formatted. AddEntry(r + 1, curColumn + 1, column[r]); } } return ++curColumn; }
protected ResponseFuture DoInvokeAsync(SofaRequest request, RpcInternalContext rpcContext, int timeoutMillis) { SofaResponseCallback listener = request.GetSofaResponseCallback(); if (listener != null) { AbstractHttpClientHandler callback = new CallbackInvokeClientHandler( transportConfig.ConsumerConfig, transportConfig.ProviderInfo, listener, request, rpcContext, ClassLoaderUtils.GetCurrentClassLoader() ); DoSend(request, callback, timeoutMillis); return null; } else { HttpResponseFuture future = new HttpResponseFuture(request, timeoutMillis); AbstractHttpClientHandler callback = new FutureInvokeClientHandler( transportConfig.ConsumerConfig, transportConfig.ProviderInfo, future, request, rpcContext, ClassLoaderUtils.GetCurrentClassLoader() ); DoSend(request, callback, timeoutMillis); future.SetSentTime(); return future; } }
public sealed class MyClass { private readonly object _lock = new object(); private Dictionary<long, object> _idMap = new Dictionary<long, object>(); private Tracer tc = new Tracer(); public bool ReserveId(long id, object obj) { lock (_lock) { if (tc.IsEntryEnabled()) Tr.Entry(tc, "ReserveId", new object[] { id, obj }); bool reserved = false; // The id can only be reserved if it isn't already in the map if (!_idMap.ContainsKey(id)) { _idMap[id] = obj; reserved = true; } if (tc.IsEntryEnabled()) Tr.Exit(tc, "ReserveId", reserved); return reserved; } } }
public IEnumerable<T> FindVariableOfType<T>() where T : WindupVertexFrame { foreach (var topOfStack in deque) { foreach (var frames in topOfStack.Values) { bool empty = true; foreach (var frame in frames) { if (!(frame is T)) { break; } else { empty = false; } } // now we know all the frames are of the chosen type if (!empty) return frames.Cast<T>(); } } return null; }
void Flush(Stream outStream, string encoding) { using (var writer = new StreamWriter(outStream, Encoding.GetEncoding(encoding))) { Flush(writer); } }
bool IsUniqueWithColumns(int[] cols) { if (constType != ConstType.UNIQUE || core.MainCols.Length != cols.Length) { return false; } return ArrayUtil.HaveEqualSets(core.MainCols, cols, cols.Length); }
public override object EGet(int featureID, bool resolve, bool coreType) { switch (featureID) { case AfplibPackage.ResourceSectionNumberResSNum: return GetResSNum(); } return base.EGet(featureID, resolve, coreType); }
[XmlElement("TemporalCS", Namespace = "http://www.opengis.net/gml")] public JAXBElement<TemporalCSType> CreateTemporalCS(TemporalCSType value) { return new JAXBElement<TemporalCSType>(_TemporalCS_QNAME, typeof(TemporalCSType), null, value); }
public static int Dimension(Type clazz) { CheckArrayType(clazz); int result = 0; while (clazz.IsArray) { result++; clazz = clazz.GetElementType(); } return result; }
protected BigDecimal Eval(params object[] values) { BigDecimal ret; if (values == null || values.Length == 0 || values[0] == null) { ret = null; } else if (values[0] is string strValue && strValue.Length > 0) { try { ret = DecimalType.ParseLocalized(strValue); } catch (EFapsException e) { throw new SQLException(e); } } else if (values[0] is BigDecimal bigDecimalValue) { ret = bigDecimalValue; } else if (values[0] is Number numberValue) { ret = new BigDecimal(numberValue.ToString()); } else { ret = null; } return ret; }
private readonly object syncLock = new object(); private Dictionary<string, List<Event>> synchronizedEvents = new Dictionary<string, List<Event>>(); public void FireEvent(Event event) { lock (syncLock) { string eventType = event.GetType(); if (!synchronizedEvents.TryGetValue(eventType, out List<Event> events)) { events = new List<Event>(); synchronizedEvents[eventType] = events; } events.Add(event); SetChanged(); NotifyListeners(event); } }
private void ListenOnEndAttribute() { if (lastElement == null) { return; } // no nonce written -> do it if (lastElement.Equals("script", StringComparison.OrdinalIgnoreCase) && LangUtils.IsValueBlank(lastNonce)) { GetWrapped().WriteAttribute("nonce", cspState.GetNonce(), null); } if (lastEvents != null && lastEvents.Count > 0) { string id = lastId; // no id written -> generate a new one and write it // otherwise we can't identify the element for our scripts if (LangUtils.IsValueBlank(id)) { id = lastElement.ToLower() + "-" + Guid.NewGuid().ToString(); GetWrapped().WriteAttribute("id", id, null); } // add current collected events to our state cspState.EventHandlers[id] = lastEvents; } Reset(); }
public static void RunExample(AdManagerServices adManagerServices, AdManagerSession session, long customTargetingValueId) { // Get the CustomTargetingService. CustomTargetingServiceInterface customTargetingService = adManagerServices.Get(session, typeof(CustomTargetingServiceInterface)) as CustomTargetingServiceInterface; // Create a statement to select custom targeting value. StatementBuilder statementBuilder = new StatementBuilder() .Where("WHERE id = :id") .OrderBy("id ASC") .Limit(StatementBuilder.SUGGESTED_PAGE_LIMIT) .WithBindVariableValue("id", customTargetingValueId); // Default for total result set size. int totalResultSetSize = 0; do { // Get custom targeting values by statement. CustomTargetingValuePage page = customTargetingService.GetCustomTargetingValuesByStatement(statementBuilder.ToStatement()); if (page.Results != null) { totalResultSetSize = page.TotalResultSetSize; int i = page.StartIndex; foreach (CustomTargetingValue customTargetingValue in page.Results) { Console.WriteLine($"{i++) }) Custom targeting va
public Q SetDouble(int index, double? value) { if (value == null) { SetNull(index, DbType.Double); } else { SetDouble(index, value.Value); } return _this(); }
public void GenerateWitherForField(EclipseNode fieldNode, EclipseNode sourceNode, AccessLevel level) { foreach (var child in fieldNode.Down()) { if (child.GetKind() == Kind.ANNOTATION) { if (AnnotationTypeMatches(typeof(Wither), child)) { // The annotation will make it happen, so we can skip it. return; } } } List<Annotation> empty = new List<Annotation>(); CreateWitherForField(level, fieldNode, sourceNode, false, empty, empty); }
public void Add(DiscoveryEntry discoveryEntry) { logger.Debug($"adding discovery entry: {discoveryEntry}"); if (!(discoveryEntry is GlobalDiscoveryEntryPersisted)) { return; } var globalDiscoveryEntry = (GlobalDiscoveryEntryPersisted)discoveryEntry; if (globalDiscoveryEntry.Domain == null || globalDiscoveryEntry.InterfaceName == null || globalDiscoveryEntry.ParticipantId == null || globalDiscoveryEntry.Address == null) { var message = $"discoveryEntry being registered is not complete: {discoveryEntry}"; logger.Error(message); throw new JoynrCommunicationException(message); } var discoveryEntryFound = entityManager.Find<GlobalDiscoveryEntryPersisted>(discoveryEntry.ParticipantId); using (var transaction = entityManager.BeginTransaction()) { try { if (discoveryEntryFound != null) { entityManager.Merge(discoveryEntry); } else { entityManager.Persist(discoveryEntry); } transaction.Commit(); } catch (Exception e) { if (transaction.IsActive) { transaction.Rollback(); } logger.Error($"unable to add discoveryEntry
public void ReadProperties(ImageInputStream inStream, int length, ExtendImageHeader imageHeader) { int transform = 0; int numToRead = 0; if (length >= 14) { numToRead = 14; } else if (length > 0) { numToRead = length; } else { numToRead = 0; } byte[] datas = new byte[numToRead]; inStream.Read(datas, 0, numToRead); length -= numToRead; if (numToRead >= 12 && datas[0] == 0x41 && datas[1] == 0x64 && datas[2] == 0x6F && datas[3] == 0x62 && datas[4] == 0x65) { // Found Adobe APP14 marker transform = datas[11]; imageHeader.SetSawAdobeMarker(true); imageHeader.SetAdobeTransform(transform); } // skip any remaining data if (length > 0) { inStream.SkipBytes(length); } }
public override List<ProviderAccount> ListProviderAccounts(string url, string username, string password) { return duraCloudDao.ListProviderAccounts(url, username, password); }
public JavaClasses ImportUrls(IEnumerable<Uri> urls) { return ImportLocations(Locations.Of(urls)); }
public Queue AuthenticationReceiverQueue() { return QueueBuilder.NonDurable(amqpProperties.GetAuthenticationReceiverQueue()) .AutoDelete() .WithArguments(GetTTLMaxArgsAuthenticationQueue()) .Build(); }
private JsonObject CreateMessage(object value) { // Tag the message with a monotonically increasing ID. The ID // will be used by the other side of the connection to guarantee // ordering. JsonObject message = serializer.Serialize(value); long id = currentMessage++; message.PutNumber("id", id); messages.Put(id, message); return message; }
public ConnectorDescriptor RemoveAllNamespaces() { List<string> nameSpaceKeys = new List<string>(); var attributes = model.GetAttributes(); foreach (var entry in attributes) { string name = entry.Key; string value = entry.Value; if (value != null && value.StartsWith("http://")) { nameSpaceKeys.Add(name); } } foreach (string name in nameSpaceKeys) { model.RemoveAttribute(name); } return this; }
public static base_responses Add(nitro_service client, vpnclientlessaccessprofile[] resources) { base_responses result = null; if (resources != null && resources.Length > 0) { vpnclientlessaccessprofile[] addresources = new vpnclientlessaccessprofile[resources.Length]; for (int i = 0; i < resources.Length; i++) { addresources[i] = new vpnclientlessaccessprofile(); addresources[i].profilename = resources[i].profilename; } result = AddBulkRequest(client, addresources); } return result; }
public override void LogRetrySuccess(CardView view, SMailPostingDiscloser discloser, int challengeCount, Exception firstCause) { if (normalLogger.IsInfoEnabled) { normalLogger.Info(BuildRetrySuccessDisp(view, discloser, challengeCount, firstCause)); } }
public WindowedStream<T, KEY, TimeWindow> TimeWindow(Time size) { if (environment.GetStreamTimeCharacteristic() == TimeCharacteristic.ProcessingTime) { return Window(TumblingProcessingTimeWindows.Of(size)); } else { return Window(TumblingEventTimeWindows.Of(size)); } }
public static Action<string> WrapCallback(JSObject func) { return result => { CallWithString(func, result); }; }
public static Codec FindEncodingCodecByIntID(int id) { long cPtr = VideoJNI.Codec_findEncodingCodecByIntID(id); return (cPtr == 0) ? null : new Codec(cPtr, false); }
private AbstractSimon ReplaceUnknownSimon(AbstractSimon simon, Type simonClass) { AbstractSimon newSimon = InstantiateSimon(simon.Name, simonClass); newSimon.Enabled = simon.Enabled; // fixes parent link and parent's children list ((AbstractSimon)simon.Parent).ReplaceChild(simon, newSimon); // fixes children list and all children's parent link foreach (Simon child in simon.Children) { newSimon.AddChild((AbstractSimon)child); ((AbstractSimon)child).SetParent(newSimon); } allSimons[simon.Name] = newSimon; return newSimon; }
public static object StringToValue(string str) { if (string.Equals(str, "true", StringComparison.OrdinalIgnoreCase)) { return true; } if (string.Equals(str, "false", StringComparison.OrdinalIgnoreCase)) { return false; } if (string.Equals(str, "null", StringComparison.OrdinalIgnoreCase)) { return null; } // If it might be a number, try converting it, first as a long, and then as a // double. If that doesn't work, return the string. try { char initial = str[0]; if (initial == '-' || (initial >= '0' && initial <= '9')) { if (long.TryParse(str, out long longValue) && longValue.ToString() == str) { return longValue; } } } catch { try { if (double.TryParse(str, out double doubleValue) && doubleValue.ToString() == str) { return doubleValue; } } catch { } } return str; }
public static List<TtlRunnable> Gets(IEnumerable<Runnable> tasks, bool releaseTtlValueReferenceAfterRun) { return Gets(tasks, releaseTtlValueReferenceAfterRun, false); }
public object Intercept(object @object, MethodInfo method, object[] args, MethodProxy proxy) { if (!descriptor.Joinpoints().Contains(method)) { return proxy.InvokeSuper(@object, args); } var aspects = new Dictionary<Descriptor<?>, object>(); var descriptors = new List<Descriptor<?>>(); var before = new ListMultimap<Descriptor<?>, Method>(); var around = new ListMultimap<Descriptor<?>, Method>(); var after = new ListMultimap<Descriptor<?>, Method>(); var throwing = new ListMultimap<Descriptor<?>, Method>(); foreach (var annotation in method.GetCustomAttributes()) { if (annotation.GetType().GetCustomAttribute<PointcutAttribute>() != null) { foreach (var descriptor in container.Pointcuts()[annotation]) { aspects[descriptor] = container.Component(descriptor); descriptors.Add(descriptor); before.PutAll(descriptor, descriptor.Advices()[typeof(BeforeAttribute)]); around.PutAll(descriptor, descriptor.Advices()[typeof(AroundAttribute)]); after.PutAll(descriptor, descriptor.Advices()[typeof(AfterAttribute)]); throwing.PutAll(descriptor, descriptor.Advices()[typeof(ThrowingAttribute)]);
public GetActiveNamesResult WithActiveNames(params string[] activeNames) { if (this.activeNames == null) { this.activeNames = new List<string>(activeNames.Length); } foreach (var ele in activeNames) { this.activeNames.Add(ele); } return this; }
public UpdateThingGroupsForThingResult UpdateThingGroupsForThing(UpdateThingGroupsForThingRequest request) { request = BeforeClientExecution(request); return ExecuteUpdateThingGroupsForThing(request); }
public static int GetClosestFixedBits(int width) { if (width == 0) { return 1; } if (width >= 1 && width <= 24) { return width; } else if (width > 24 && width <= 26) { return 26; } else if (width > 26 && width <= 28) { return 28; } else if (width > 28 && width <= 30) { return 30; } else if (width > 30 && width <= 32) { return 32; } else if (width > 32 && width <= 40) { return 40; } else if (width > 40 && width <= 48) { return 48; } else if (width > 48 && width <= 56) { return 56; } else { return 64; } }
public static Dictionary<string, List<object>> ReadDbf(string path) { OmsDbfTableReader reader = new OmsDbfTableReader(); reader.File = path; reader.ReadTable(); return reader.OutTableData; }
public MessageSecurityMetadataSourceRegistry SimpDestPathMatcher(PathMatcher pathMatcher) { if (pathMatcher == null) { throw new ArgumentNullException(nameof(pathMatcher), "pathMatcher cannot be null"); } this.pathMatcher.SetPathMatcher(pathMatcher); this.defaultPathMatcher = false; return this; }
public static void UnescapeProperties(string text, TextWriter writer) { if (writer == null) { throw new ArgumentException("Argument 'writer' cannot be null"); } if (text == null) { return; } if (text.IndexOf('\\') < 0) { // Fail fast, avoid more complex (and less JIT-table) method to execute if not needed writer.Write(text); return; } PropertiesUnescapeUtil.Unescape(new InternalStringReader(text), writer); }
public static Locale AssociatedLocale(Associator assoc) { return assoc.Associated<Selection>() .Select(sel => sel.Get()[0]) .DefaultIfEmpty(Locale.Default) .First(); }
private static void Cleanup(XmlReader reader) { if (reader.Read() && reader.NodeType != XmlNodeType.EndElement || !reader.Name.Equals(SPARQL.name, StringComparison.OrdinalIgnoreCase)) { logger.Warn("Extra data at end of results"); } else if (reader.Read() && reader.NodeType != XmlNodeType.EndOfFile) { logger.Warn("Unexpected data after XML"); } logger.Debug("End of input detected, closing reader..."); reader.Close(); }
public TreeGraphNode HeadWordNode() { TreeGraphNode hwn = SafeCast(label.Get(typeof(TreeCoreAnnotations.HeadWordAnnotation))) as TreeGraphNode; if (hwn == null || (hwn.TreeGraph() != null && !hwn.TreeGraph().Equals(this.TreeGraph()))) { return null; } return hwn; }
public override IEnumerator<string> GetKeys() { var tempKeysIter = base.GetKeys(); var keys = SortKeys(tempKeysIter); return keys.GetEnumerator(); }
public static bool Movies(MovieInfo moviedb, string title, string year, int maxDistance, bool caseSensitive) { if (moviedb == null || string.IsNullOrWhiteSpace(title)) { return false; } string primaryTitle, firstCompareTitle, secondCompareTitle; if (caseSensitive) { primaryTitle = title; firstCompareTitle = moviedb.GetOriginalTitle(); secondCompareTitle = moviedb.GetTitle(); } else { primaryTitle = title.ToLower(); firstCompareTitle = moviedb.GetTitle().ToLower(); secondCompareTitle = moviedb.GetOriginalTitle().ToLower(); } if (IsValidYear(year) && IsValidYear(moviedb.GetReleaseDate())) { // Compare with year string movieYear = moviedb.GetReleaseDate().Substring(0, YEAR_LENGTH); return movieYear.Equals(year) && CompareTitles(primaryTitle, firstCompareTitle, secondCompareTitle, maxDistance); } // Compare without year return CompareTitles(primaryTitle, firstCompareTitle, secondCompareTitle, maxDistance); }
public bool DetectTierIphone() { if (this.initCompleted || this.isTierIphone) return this.isTierIphone; if (DetectIphoneOrIpod() || DetectAndroidPhone() || DetectWindowsPhone() || DetectBlackBerry10Phone() || (DetectBlackBerryWebKit() && DetectBlackBerryTouch()) || DetectPalmWebOS() || DetectBada() || DetectTizen() || DetectGamingHandheld()) { return true; } return false; }
public void SetUserStackAssociations(IEnumerable<UserStackAssociation> userStackAssociations) { if (userStackAssociations == null) { this.userStackAssociations = null; return; } this.userStackAssociations = new List<UserStackAssociation>(userStackAssociations); }
public void Clear() { exceptionSet.Clear(); explicitSet.Clear(); universalHandler = false; commonSupertype = null; size = 0; }
private static XColor GetXColorWithSchema(string colorSchema, double preTint, CTSchemeColor ctsColor, ThemesTable themeTable) { int colorIndex = GetThemeIndexFromName(colorSchema); if (colorIndex < 0) { return null; } XSSFColor bcolor = themeTable.GetThemeColor(colorIndex); if (bcolor == null) { return null; } int lumOff = 0; int lumMod = 0; int alphaInt = 0; if (ctsColor != null) { try { lumOff = ctsColor.GetLumOffArray(0).GetVal(); } catch (Exception ex) { LOG.Log(Level.Fine, "No lumOff entry", ex); } try { lumMod = ctsColor.GetLumModArray(0).GetVal(); } catch (Exception ex) { LOG.Log(Level.Fine, "No lumMod entry", ex); } try { alphaInt = ctsColor.GetAlphaArray(0).GetVal(
using System; using System.Collections.Generic; public static class MapperFactory { private static readonly Dictionary<string, object> mapperCache = new Dictionary<string, object>(); public static IJMapper<D, S> GetMapper<D, S>(Type destination, Type source, ChooseConfig config, string xml) { string mapperName = MapperClassName(destination, source, xml); if (mapperCache.ContainsKey(mapperName)) { return (IJMapper<D, S>)mapperCache[mapperName]; } IJMapper<D, S> jmapper = new JMapper<D, S>(destination, source, config, xml); mapperCache[mapperName] = jmapper; return jmapper; } private static string MapperClassName(Type destination, Type source, string xml) { // Implementation of mapper class name generation (not provided in original code) return $"{destination.FullName}_{source.FullName}_{xml.GetHashCode()}"; } }
public SSLEngine Get() { try { string pass = env.SslKeystorePassword(); char[] password = string.IsNullOrEmpty(pass) ? null : pass.ToCharArray(); KeyStore ks = env.SslKeystore(); if (ks == null) { string ksFile = env.SslKeystoreFile(); if (!string.IsNullOrEmpty(ksFile)) { ks = KeyStore.GetInstance(KeyStore.DefaultType); using (var fs = new FileStream(ksFile, FileMode.Open, FileAccess.Read)) { ks.Load(fs, password); } } } KeyStore ts = env.SslTruststore(); if (ts == null) { string tsFile = env.SslTruststoreFile(); if (!string.IsNullOrEmpty(tsFile)) { // filepath found, open and init string tsPassword = env.SslTruststorePassword(); char[] tspass = string.IsNullOrEmpty(tsPassword) ? null : tsPassword.ToCharArray(); ts = KeyStore.GetInstance(KeyStore.DefaultType); using (var fs = new FileStream(tsFile, FileM
public Snapshot GetSnapshot() { long now = Stopwatch.GetTimestamp(); // Use Stopwatch for higher precision timing cacheLock.EnterReadLock(); try { if (now - cachedHistogramTimestampNanos < refreshIntervalNanos) { return cachedSnapshot; } } finally { cacheLock.ExitReadLock(); } cacheLock.EnterWriteLock(); try { // Might have raced with another writer => re-check the timestamp if (now - cachedHistogramTimestampNanos >= refreshIntervalNanos) { LOG.Debug("Cached snapshot is too old, refreshing"); cachedHistogram = recorder.GetIntervalHistogram(cachedHistogram); cachedSnapshot = new HdrSnapshot(cachedHistogram); cachedHistogramTimestampNanos = now; } return cachedSnapshot; } finally { cacheLock.ExitWriteLock(); } }
public Props Load(IDictionary<object, object> p) { foreach (var entry in p) { var name = entry.Key.ToString(); var value = entry.Value; if (value == null) { continue; } data.PutBaseProperty(name, value.ToString(), false); } return this; }
public Collection<BuildProject> BuildProjects(BuildProjectFilter filter) { return Get<BuildProject>(filter ?? new BuildProjectFilter()); }
public void SetLoggerLevel(string level) { if (level.Equals("TRACE", StringComparison.OrdinalIgnoreCase)) { this.level = TRACE; } else if (level.Equals("DEBUG", StringComparison.OrdinalIgnoreCase)) { this.level = DEBUG; } else if (level.Equals("INFO", StringComparison.OrdinalIgnoreCase)) { this.level = INFO; } else if (level.Equals("WARN", StringComparison.OrdinalIgnoreCase)) { this.level = WARN; } else if (level.Equals("ERROR", StringComparison.OrdinalIgnoreCase)) { this.level = ERROR; } }
public async Task<VirtualNetworkRuleInner> CreateOrUpdateAsync(string resourceGroupName, string accountName, string virtualNetworkRuleName, CreateOrUpdateVirtualNetworkRuleParameters parameters) { var response = await CreateOrUpdateWithServiceResponseAsync(resourceGroupName, accountName, virtualNetworkRuleName, parameters); return response.Body; }
public static Func<Response, bool> EndsWithPath(string path) { return response => EndsWith(response.Path(path)); }
public Trace Warn(Type c, string message) { return _trace.Warn(c, message); }
public XAnnotation<javax.persistence.OneToOne> CreateOneToOne(OneToOne cOneToOne) { return cOneToOne == null ? null : new XAnnotation<javax.persistence.OneToOne>( typeof(javax.persistence.OneToOne), cOneToOne.GetTargetEntity() == null ? null : new XSingleAnnotationField<Class<object>>( "targetEntity", typeof(Class<object>), new XClassByNameAnnotationValue<object>( cOneToOne.GetTargetEntity() ) ), AnnotationUtils.Create("cascade", GetCascadeType(cOneToOne.GetCascade())), AnnotationUtils.Create("fetch", GetFetchType(cOneToOne.GetFetch())), AnnotationUtils.Create("optional", cOneToOne.IsOptional()), AnnotationUtils.Create("mappedBy", cOneToOne.GetMappedBy()), AnnotationUtils.Create("orphanRemoval", cOneToOne.IsOrphanRemoval()) ); }
void NoteHandshakeError(Exception failure) { numberOfLogEntries++; if (TraceComponent.IsAnyTracingEnabled() && tc.IsDebugEnabled()) { Tr.Debug(tc, $"NoteHandshakeError ({numberOfLogEntries}): {failure.Message}", failure); } if (shouldLogError) { if (numberOfLogEntries <= maxLogEntries) { Tr.Error(tc, SSLChannelConstants.HANDSHAKE_FAILURE, failure); } else if (!loggingStopped && (numberOfLogEntries > maxLogEntries)) { loggingStopped = true; Tr.Info(tc, SSLChannelConstants.HANDSHAKE_FAILURE_STOP_LOGGING); } } }
public static CookieData Match(string name, int offset, int length) { if (name == null) return null; return (CookieData)myMatcher.Match(name, offset, length); }
private DateTime? GetADate(string s) { DateTime? retDT = null; try { retDT = DateTime.Parse(s); } catch (FormatException) // catch specific exception for date parsing { // ignore it here, caller sees null } return retDT; }
public IOBObjType CreateIOBObjTypeFromString(EDataType eDataType, string initialValue) { IOBObjType result = IOBObjType.Get(initialValue); if (result == null) throw new ArgumentException($"The value '{initialValue}' is not a valid enumerator of '{eDataType.Name}'"); return result; }
public static string Underscore(string word) { string firstPattern = "([A-Z]+)([A-Z][a-z])"; string secondPattern = "([a-z\\d])([A-Z])"; string replacementPattern = "$1_$2"; // Replace package separator with slash. word = System.Text.RegularExpressions.Regex.Replace(word, @"\.", "/"); // Replace $ with two underscores for inner classes. word = System.Text.RegularExpressions.Regex.Replace(word, @"\$", "__"); // Replace capital letter with _ plus lowercase letter. word = System.Text.RegularExpressions.Regex.Replace(word, firstPattern, replacementPattern); word = System.Text.RegularExpressions.Regex.Replace(word, secondPattern, replacementPattern); word = word.Replace('-', '_'); word = word.ToLower(); return word; }
public Task<NewFile> Run() { LOG.Log(LogLevel.Debug, $"Starting optimized file creation for {files.Count} files"); var fileCreation = new TaskCompletionSource<NewFile>(); var fjpFiles = this.files; // We clear out files below, which makes CreateTmpFile see an empty map if we don't use a separate variable. Task.Run(() => CreateTmpFile(fileCreation, destDir, fjpFiles, GetCompression())); lock (OUTSTANDING) { OUTSTANDING.Add(fileCreation.Task); } this.files = new List<TSData>(); // Do not use Clear! This instance is now shared with the CreateTmpFile task. return fileCreation.Task; }
protected void FinalizeProfileResponse(AccessToken accessTokenTicket, Dictionary<string, object> map, IPrincipal principal) { var service = accessTokenTicket.Service; var registeredService = servicesManager.FindServiceBy(service); if (registeredService is OAuthRegisteredService oauth) { map[OAuth20Constants.CLIENT_ID] = oauth.ClientId; map[CasProtocolConstants.PARAMETER_SERVICE] = service.Id; } }
public static string GetBaseUrl(string aUrl) { if (aUrl != null) { int index = aUrl.IndexOf("//"); if (index > 0) { index = aUrl.IndexOf('/', index + 2); } else { index = aUrl.IndexOf('/'); } if (index > 0) { return aUrl.Substring(0, index); } } return aUrl; }
public bool IsEquivalent(CrystalTransform other) { Matrix4d mul = new Matrix4d(); mul.Multiply(this.matTransform, other.matTransform); if (mul.EpsilonEquals(IDENTITY, 0.0001)) { return true; } return false; }
public override ICollection<T> Find<T>(FinderObject owner) where T : GedObject { return owner.FindInParent<T>(); }
public static void AssertIOThread(Thread t, bool flag) { if (flag) { System.Diagnostics.Debug.Assert(t.Equals(Thread.CurrentThread), "Management NOT on IO thread when expected"); } else { System.Diagnostics.Debug.Assert(!t.Equals(Thread.CurrentThread), "Management on IO thread when not expected"); } }
public static object ParseInteger(AST reportNode, string text) { // remove place holder underscore before starting text = text.Replace("_", ""); char c = ' '; int length = text.Length; // Strip off the sign, if present bool negative = false; if ((c = text[0]) == '-' || c == '+') { negative = (c == '-'); text = text.Substring(1, length - 1); length -= 1; } // Determine radix (default is 10). int radix = 10; if (text[0] == '0' && length > 1) { c = text[1]; if (c == 'X' || c == 'x') { radix = 16; text = text.Substring(2, length - 2); length -= 2; } else if (c == 'B' || c == 'b') { radix = 2; text = text.Substring(2, length - 2); length -= 2; } else { radix = 8; } }
public AnnotationSegment GetSegmentList(int i) { if (MMAXAnnotation_Type.featOkTst && ((MMAXAnnotation_Type)jcasType).casFeat_segmentList == null) { jcasType.jcas.ThrowFeatMissing("segmentList", "de.julielab.jules.types.mmax.MMAXAnnotation"); } jcasType.jcas.CheckArrayBounds(jcasType.ll_cas.ll_getRefValue(addr, ((MMAXAnnotation_Type)jcasType).casFeatCode_segmentList), i); return (AnnotationSegment)(jcasType.ll_cas.ll_getFSForRef(jcasType.ll_cas.ll_getRefArrayValue(jcasType.ll_cas.ll_getRefValue(addr, ((MMAXAnnotation_Type)jcasType).casFeatCode_segmentList), i))); }
public DescribeLaunchTemplateVersionsResult WithLaunchTemplateVersions(params LaunchTemplateVersion[] launchTemplateVersions) { if (this.launchTemplateVersions == null) { SetLaunchTemplateVersions(new List<LaunchTemplateVersion>(launchTemplateVersions.Length)); } foreach (var ele in launchTemplateVersions) { this.launchTemplateVersions.Add(ele); } return this; }
public void OnSaveInstanceState(Bundle outState) { hasSavedState = true; outState.PutParcelable(KEY_STATE, new State(observableManager.Id(), group.Id())); }
public List<MappedClass> GetSubTypes(MappedClass mc) { List<MappedClass> subtypes = new List<MappedClass>(); foreach (var mappedClass in GetMappedClasses()) { if (mappedClass.IsSubType(mc)) { subtypes.Add(mappedClass); } } return subtypes; }
public static double Cosine(Angle angle) { double result = Lock(Math.Cos(angle.Value)); return result; }
public CurrencyUnit GetCurrency(string currencyCode, params string[] providers) { if (currencyCode == null) { throw new ArgumentNullException(nameof(currencyCode), "Currency Code may not be null"); } var found = GetCurrencies(CurrencyQueryBuilder.Of().SetCurrencyCodes(currencyCode).SetProviderNames(providers).Build()); if (found.Count == 0) { throw new UnknownCurrencyException(currencyCode); } if (found.Count > 1) { throw new MonetaryException($"Ambiguous CurrencyUnit for code: {currencyCode}: {string.Join(", ", found)}"); } return found.First(); }
public synchronized TextBox SetValidationPattern(Pattern validationPattern) { if (validationPattern != null) { foreach (string line in lines) { if (!Validated(line)) { throw new InvalidOperationException($"TextBox validation pattern {validationPattern} does not match existing content"); } } } this.validationPattern = validationPattern; return this; }
public T Read(Serializable id) { EnsureOpen(); string sql = $"SELECT {COLUMN_DATA} FROM {TABLE_NAME} WHERE {COLUMN_ID} = @id"; using (var command = new SqlCommand(sql, GetReadableDatabase())) { command.Parameters.AddWithValue("@id", id.ToString()); using (var reader = command.ExecuteReader()) { if (!reader.Read()) { return default; } try { byte[] encryptedData = (byte[])reader["COLUMN_DATA"]; return cryptoEntityUtil.Decrypt(encryptedData); } catch { // Handle exception if necessary return default; } } } }
private static bool IsValid(string stValue) { bool bValid = true; for (int scan = 0; scan < stValue.Length; scan++) { if (scan == 0) bValid = XMLChar.IsNCNameStart(stValue[scan]); else bValid = XMLChar.IsNCName(stValue[scan]); if (!bValid) break; } return bValid; }
public final Assignment Intersection(IEnumerable<int> varNums) { return Intersection(varNums.ToArray()); }
public DimensionKeyDescription WithDimensions(Dictionary<string, string> dimensions) { SetDimensions(dimensions); return this; }
public LogExclusion CreateExclusion(ParentName parent, LogExclusion exclusion) { var request = new CreateExclusionRequest.Builder() .SetParent(parent == null ? null : parent.ToString()) .SetExclusion(exclusion) .Build(); return CreateExclusion(request); }
public List<CommercePriceListUserSegmentEntryRel> GetCommercePriceListUserSegmentEntryRelsByUuidAndCompanyId( string uuid, long companyId, int start, int end, IComparer<CommercePriceListUserSegmentEntryRel> orderByComparator) { return commercePriceListUserSegmentEntryRelPersistence.FindByUuid_C(uuid, companyId, start, end, orderByComparator); }
using System; using System.IO; using System.Linq; using System.Reflection; using System.Security.Cryptography; using System.Collections.Generic; public static class HashCodeCalculator { private static Dictionary<Type, long> classHashCodeCache = new Dictionary<Type, long>(); public static long GetClassHashCode(Type cls) { // The simple cases if (cls.IsInterface) return 0; if (!typeof(ISerializable).IsAssignableFrom(cls)) return 0; if (typeof(IExternalizable).IsAssignableFrom(cls)) return 1; // Try cache if (classHashCodeCache.TryGetValue(cls, out long cachedHash)) return cachedHash; // Has to calculate the hash using (var baos = new MemoryStream()) using (var dos = new BinaryWriter(baos)) { // Step 1 Type superClass = cls.BaseType; if (superClass != null && superClass != typeof(object)) { try { dos.Write(GetClassHashCode(superClass)); } catch (Exception ex) { throw new Exception("Unexpected exception", ex); } } // S
public AtomicValue<int> Next() { var result = new MutableAtomicValue<int>(0, 0); if (currentValue == null) { currentValue = number.Add(cacheFactor); if (!currentValue.Succeeded) { currentValue = null; result.Succeeded = false; return result; } currentIndex = 0; } result.Succeeded = true; result.PreValue = currentValue.PreValue() + currentIndex; result.PostValue = result.PreValue + 1; if (++currentIndex >= cacheFactor) { currentValue = null; } return result; }
public static ByteBuffer DecodeMOVPacket(ByteBuffer result, AvcCBox avcC) { if (avcC.GetNalLengthSize() == 4) { DecodeMOVPacketInplace(result, avcC); return result; } return JoinNALUnits(SplitMOVPacket(result, avcC)); }
public static string ToPinyin(string str, PinyinFormat format) { return Pinyin.Instance.Convert(str, format); }
public DBSnapshotAttributesResult DescribeDBSnapshotAttributes(DescribeDBSnapshotAttributesRequest request) { request = BeforeClientExecution(request); return ExecuteDescribeDBSnapshotAttributes(request); }
public override void SawOpcode(int seen) { // Console.WriteLine($"{GetPC()} {Const.GetOpcodeName(seen)} {state}"); if (stack.GetStackDepth() < stackDepth) { state = FormatState.NONE; stackDepth = 0; arguments = null; } if (seen == Const.ANEWARRAY && stack.GetStackDepth() >= 2) { var size = stack.GetStackItem(0).GetConstant(); var formatStr = stack.GetStackItem(1).GetConstant(); if (size is int && formatStr is string) { arguments = new OpcodeStack.Item[(int)size]; this.formatString = (string)formatStr; state = FormatState.READY_FOR_FORMAT; stackDepth = stack.GetStackDepth(); } } else if (state == FormatState.READY_FOR_FORMAT && seen == Const.DUP) { state = FormatState.EXPECTING_ASSIGNMENT; } else if (state == FormatState.EXPECTING_ASSIGNMENT && stack.GetStackDepth() == stackDepth + 3 && seen == Const.AASTORE) { var pos = stack.GetStackI
public void WriteInvocation(StoredProcedureInvocation invocation) { int len = invocation.GetSerializedSize(); GrowIfNeeded(len); invocation.FlattenToBuffer(buffer.B()); }
private bool BroadcastAll(FacesContext context, List<FacesEvent> events, ICollection<FacesEvent> eventsAborted) { Debug.Assert(events != null); for (int i = 0; i < events.Count; i++) { FacesEvent event = events[i]; UIComponent source = event.Component; UIComponent compositeParent = UIComponent.GetCompositeComponentParent(source); if (compositeParent != null) { PushComponentToEL(context, compositeParent); } // Push the source as the current component PushComponentToEL(context, source); try { // Actual event broadcasting if (!source.IsCachedFacesContext()) { try { source.SetCachedFacesContext(context); source.Broadcast(event); } finally { source.SetCachedFacesContext(null); } } else { source.Broadcast(event); } } catch (Exception e) { Throwable cause = e; AbortProcessingException ape = null; while (cause != null) { if (cause is AbortProcessingException abortProcessingException) { ape = abortProcessingException; break;
public Dictionary<string, string> CloneVM(HttpInputs httpInputs, VmInputs vmInputs) { ConnectionResources connectionResources = new ConnectionResources(httpInputs, vmInputs); try { ManagedObjectReference vmMor = new MorObjectHandler().GetMor(connectionResources, ManagedObjectType.VIRTUAL_MACHINE.GetValue(), vmInputs.VirtualMachineName); if (vmMor != null) { VmUtils utils = new VmUtils(); ManagedObjectReference folder = utils.GetMorFolder(vmInputs.FolderName, connectionResources); ManagedObjectReference resourcePool = utils.GetMorResourcePool(vmInputs.CloneResourcePool, connectionResources); ManagedObjectReference host = utils.GetMorHost(vmInputs.CloneHost, connectionResources, vmMor); ManagedObjectReference dataStore = utils.GetMorDataStore(vmInputs.CloneDataStore, connectionResources, vmMor, vmInputs); VirtualMachineRelocateSpec vmRelocateSpec = utils.GetVirtualMachineRelocateSpec(resourcePool, host, dataStore, vmInputs); VirtualMachineCloneSpec cloneSpec = new VmConfigSpecs().GetCloneSpec(vmInputs, vmRelocateSpec); ManagedObjectReference taskMor = connectionResources.GetVimPortType() .Clon
public StringFormatter GetFormatter() { if (formatter == null) { ResourceBundle b = ResourceBundle.GetBundle(UI_RESOURCE_BUNDLE_NAME, new UTF8Control()); formatter = new StringFormatter(b, GetLocale()); } return formatter; }
public override void DeserializeInstance(SerializationStreamReader streamReader, OWLLiteralImplDouble instance) { Deserialize(streamReader, instance); }
public Task<KeyOperationResult> WrapKeyAsync(string vaultBaseUrl, string keyName, string keyVersion, JsonWebKeyEncryptionAlgorithm algorithm, byte[] value, Action<KeyOperationResult> serviceCallback) { var task = WrapKeyWithServiceResponseAsync(vaultBaseUrl, keyName, keyVersion, algorithm, value); task.ContinueWith(t => serviceCallback?.Invoke(t.Result)); return task; }
public void InitializeWorldGroup() { if (worldGroupManager == null) { worldGroupManager = new WorldGroupsManager(); SendConsoleMessage(LogLevel.Information, GetLanguageManager().GetString("world_group_manager_loaded")); } }
private static string RemoveLeadingSlashPoints(string path) { while (path.StartsWith("/..")) { path = path.Substring(3); } return path; }
public static string ToParamString(Type[] paramsArray) { if (paramsArray == null || paramsArray.Length == 0) { return "()"; } StringBuilder s = new StringBuilder(); s.Append('('); for (int i = 0; i < paramsArray.Length; i++) { if (i > 0) { s.Append(", "); } if (paramsArray[i] == null) { s.Append("null"); } else { s.Append(paramsArray[i].FullName); } } s.Append(')'); return s.ToString(); }
public ValueComparator Compare(Value val) { if (val == null || val.GetType() != typeof(ValueList<>)) { return ValueComparator.NOT_EQUAL_TO; } ValueList<?> vl = (ValueList<?>)val; return vl.Contains(this) ? ValueComparator.IN : ValueComparator.NOT_IN; }
private void AddRawSparseProbabilistic(long rawValue) { // p(w): position of the least significant set bit (one-indexed) // By contract: p(w) <= 2^(registerValueInBits) - 1 (the max register value) // // By construction of pwMaxMask (see #Constructor()), // lsb(pwMaxMask) = 2^(registerValueInBits) - 2, // thus lsb(any_long | pwMaxMask) <= 2^(registerValueInBits) - 2, // thus 1 + lsb(any_long | pwMaxMask) <= 2^(registerValueInBits) -1. long substreamValue = (rawValue >> log2m); byte p_w; if(substreamValue == 0L) { // The paper does not cover p(0x0), so the special value 0 is used. // 0 is the original initialization value of the registers, so by // doing this the multiset simply ignores it. This is acceptable // because the probability i
public bool Matches(IEnumerable<LabelAtom> labels) { return Matches(new VariableResolver<bool>(name => { foreach (var a in labels) { if (a.GetName() == name) return true; } return false; })); }
public static bool IsMain(MethodGen mg) { Type[] argTypes = mg.GetArgumentTypes(); return mg.IsStatic() && mg.GetReturnType() == typeof(void) && mg.GetName() == "main" && argTypes.Length == 1 && argTypes[0] == typeof(string[]); }
public static BeanCopy FromMap(Dictionary<string, object> source) { BeanCopy beanCopy = new BeanCopy(source); beanCopy.IsSourceMap = true; return beanCopy; }
public DescribeRetentionConfigurationsRequest WithRetentionConfigurationNames(params string[] retentionConfigurationNames) { if (this.retentionConfigurationNames == null) { SetRetentionConfigurationNames(new List<string>(retentionConfigurationNames.Length)); } foreach (var ele in retentionConfigurationNames) { this.retentionConfigurationNames.Add(ele); } return this; }
public SqlApplicationConfiguration WithOutputs(params Output[] outputs) { if (this.outputs == null) { SetOutputs(new List<Output>(outputs.Length)); } foreach (var ele in outputs) { this.outputs.Add(ele); } return this; }
void ClearPath(int path) { int firstVertex = GetFirstVertex(path); if (firstVertex != -1) { // TODO: can we do this in one shot? int vertex = firstVertex; for (int i = 0, n = GetPathSize(path); i < n; i++) { int v = vertex; vertex = GetNextVertex(vertex); FreeVertex_(v); } int geometry = GetGeometryFromPath(path); SetGeometryVertexCount_(geometry, GetPointCount(geometry) - GetPathSize(path)); } SetPathSize_(path, 0); }
public async Task<Page<ResourceMetricInner>> ListMultiRolePoolInstanceMetricsAsync(string resourceGroupName, string name, string instance, bool details) { var response = await ListMultiRolePoolInstanceMetricsWithServiceResponseAsync(resourceGroupName, name, instance, details); return response.Body; }
private static List<string> LoadClasspathResource(string resource, ResourceLoader resourceLoader, string resourcePaths) { var result = new List<string>(); LOGGER.Info("类路径资源：" + resource); var ps = System.Reflection.Assembly.GetExecutingAssembly().GetManifestResourceNames().Where(name => name.Contains(resource)).GetEnumerator(); while (ps.MoveNext()) { var url = ps.Current; LOGGER.Info("类路径资源URL：" + url); if (url.Contains(".jar!")) { // Load jar resource result.AddRange(Load("classpath:" + resource)); continue; } var file = new FileInfo(url); bool dir = file.Attributes.HasFlag(FileAttributes.Directory); if (dir) { // Process directory result.AddRange(LoadAndWatchDir(file.FullName, resourceLoader, resourcePaths)); } else { // Process file result.AddRange(Load(file.FullName)); // Monitor file WatchFile(file, resourceLoader, resourcePaths); } } return result; }
private bool IsMethodAlreadyInjectedAnnotationPresent(MethodNode methodNode) { AnnotationNode injectedTraceAnnotation = GetAnnotation(INJECTED_TRACE_TYPE.Descriptor, methodNode.VisibleAnnotations); AnnotationNode manualTraceAnnotation = GetAnnotation(MANUAL_TRACE_TYPE.Descriptor, methodNode.VisibleAnnotations); if (manualTraceAnnotation != null) return true; if (injectedTraceAnnotation != null) { InjectedTraceAnnotationVisitor itav = new InjectedTraceAnnotationVisitor(); injectedTraceAnnotation.Accept(itav); List<string> methodAdapters = itav.GetMethodAdapters(); if (methodAdapters.Contains(typeof(LibertyTracingMethodAdapter).FullName)) return true; if (methodAdapters.Contains(typeof(WebSphereTrTracingMethodAdapter).FullName)) return true; if (methodAdapters.Contains(typeof(JSR47TracingMethodAdapter).FullName)) return true; } return false; }
public static HtmlDocument GetDocumentFromUrl(string url) { var web = new HtmlWeb(); return web.Load(url); }
public object GetMethodAnalysis(Type analysisClass, MethodDescriptor methodDescriptor) { var objectMap = GetObjectMap(analysisClass); return objectMap[methodDescriptor]; }
private static StackLine GetStackLine(SrcTree srcTree, string classQualifiedName, string methodSimpleName, int line) { StackLine rootStackLine = GetStackLine(srcTree.GetRootMethodTable(), classQualifiedName, methodSimpleName, line); if (rootStackLine != null) { return rootStackLine; } StackLine subStackLine = GetStackLine(srcTree.GetSubMethodTable(), classQualifiedName, methodSimpleName, line); if (subStackLine != null) { return subStackLine; } return null; }
public IEnumerator<E> GetEnumerator() { return new IEnumerator<E>() { private int count = 0; public bool MoveNext() { return count < elementCount; } public E Current { get { lock (this) { if (count < elementCount) { return elementData(count++); } } throw new InvalidOperationException("No such element in the enumeration"); } } object IEnumerator.Current => Current; public void Reset() { count = 0; } }; }
public static object KeyForPrefixMatch(object key, int depth) { if (depth < 1) return key; if (key is string) { return key.ToString() + "\uFFFF"; } else if (key is List<Dictionary<string, object>> nuKey) { if (depth == 1) { nuKey.Add(new Dictionary<string, object>()); } else { var lastObject = nuKey[nuKey.Count - 1]; lastObject = KeyForPrefixMatch(lastObject, depth - 1); nuKey[nuKey.Count - 1] = (Dictionary<string, object>)lastObject; } return nuKey; } else { return key; } }
protected object ConvertMapsToObjects(JsonObject<string, object> root) { var stack = new Stack<JsonObject<string, object>>(); stack.Push(root); while (stack.Count > 0) { var jsonObj = stack.Pop(); if (jsonObj.IsArray()) { TraverseArray(stack, jsonObj); } else if (jsonObj.IsCollection()) { TraverseCollection(stack, jsonObj); } else if (jsonObj.IsMap()) { TraverseMap(stack, jsonObj); } else { object special; if ((special = ReadIfMatching(jsonObj, null, stack)) != null) { jsonObj.Target = special; } else { TraverseFields(stack, jsonObj); } } } return root.Target; }
public object Get(string strKey) { if (m_map != null) return m_map[strKey]; return null; }
public TransferConfig UpdateTransferConfig(TransferConfig transferConfig, FieldMask updateMask) { var request = new UpdateTransferConfigRequest { TransferConfig = transferConfig, UpdateMask = updateMask }; return UpdateTransferConfig(request); }
public static SetAclAction FromProto(File.PSetAclAction pSetAclAction) { if (pSetAclAction == null) { throw new InvalidOperationException("Null proto set acl action."); } switch (pSetAclAction) { case File.PSetAclAction.REPLACE: return SetAclAction.REPLACE; case File.PSetAclAction.MODIFY: return SetAclAction.MODIFY; case File.PSetAclAction.REMOVE: return SetAclAction.REMOVE; case File.PSetAclAction.REMOVE_ALL: return SetAclAction.REMOVE_ALL; case File.PSetAclAction.REMOVE_DEFAULT: return SetAclAction.REMOVE_DEFAULT; default: throw new InvalidOperationException("Unrecognized proto set acl action: " + pSetAclAction); } }
public override HashSet<Annotation> GetQualifiers() { if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) { Tr.Entry(tc, "GetQualifiers"); } var qualifiers = // logic to get the qualifiers goes here; if (TraceComponent.IsAnyTracingEnabled() && tc.IsEntryEnabled()) { Tr.Exit(tc, "GetQualifiers", qualifiers); } return qualifiers; }
public string GetPid() { string arg = extraArgs.Count > 0 ? extraArgs[0] : null; return arg != null && System.Text.RegularExpressions.Regex.IsMatch(arg, @"^\d+$") ? arg : null; }
void Write(CallInfo callInfo, SimpleAssertion assertion) { var rootNode = Root(callInfo); if (assertion.Source != null) { Write(rootNode, assertion.Source); } var saNode = CreateNode(rootNode, SIMPLE_ASSERTION_TAG); if (!assertion.Passed()) { var errorsNode = CreateNode(saNode, ERRORS_TAG); CreateNode(errorsNode, EXPECTED_TAG) .SetAttribute(VALUE_ATTR, assertion.ExpectedResult.ToString()); CreateNode(errorsNode, ACTUAL_TAG) .SetAttribute(VALUE_ATTR, assertion.ActualResult.ToString()); } Flush(rootNode); }
public bool AddDataUsage(DataAttribute attribute, DataUsage usage) { if (attribute == null) throw new ArgumentNullException(nameof(attribute)); if (IsFieldLocked(EntryField.Data)) { if (!dataUsage.ContainsKey(attribute)) { throw new LockingException(EntryField.Data); } return false; } else { if (!dataUsage.ContainsKey(attribute)) { dataUsage[attribute] = new HashSet<DataUsage>(); } if (usage != null) { dataUsage[attribute].Add(usage); } return true; } }
public void ActionReport() { // Save initialized instance of this class in request attribute for included sub-elements HttpContext.Current.Items[SESSION_WORKPLACE_CLASS] = this; switch (GetAction()) { case ACTION_CONFIRMED: default: try { var params = new Dictionary<string, string> { { PARAM_MODULE, GetParamModule() }, // Set style to display report in correct layout { PARAM_STYLE, CmsToolDialog.STYLE_NEW }, // Set close link to get back to overview after finishing the import { PARAM_CLOSELINK, CmsToolManager.LinkForToolPath(HttpContext.Current, "/modules") } }; // Redirect to the report output JSP GetToolManager().JspForwardPage(this, DELETE_ACTION_REPORT, params); ActionCloseDialog(); } catch (Exception e) { // Create a new Exception with custom message IncludeErrorPage(this, e); } break; } }
public void CheckMaxAllowedLength(int length) { if (cmdLength + length >= maxAllowedPacket && cmdLength == 0) { // Launch exception only if no packet has been sent. throw new MaxAllowedPacketException($"query size ({cmdLength + length}) is >= to max_allowed_packet ({maxAllowedPacket})", false); } }
private void AddYubiKeyToUser(string publicId, string username, string filename) { try { using (var writer = new StreamWriter(filename, true)) { writer.Write($"yk.{publicId}.user = {username}{Environment.NewLine}"); } } catch (IOException ex) { log.Error($"Failed appending entry to file {filename}", ex); } }
public EitherT<M, L, R> DiscardR<B>(Applicative<B, MonadT<M, Either<L, ?>> appB) { return MonadT.DiscardR(appB).Coerce(); }
private string GetMetricNamesFromES(string tenant, string regexMetricName) { string metricNamesFromElasticsearchQueryString = string.Format(queryToFetchMetricNamesFromElasticsearchFormat, tenant, regexMetricName, regexMetricName); return elasticsearchRestHelper.FetchDocuments(ELASTICSEARCH_INDEX_NAME_READ, ELASTICSEARCH_DOCUMENT_TYPE, tenant, metricNamesFromElasticsearchQueryString); }
public void SetCurve(IQuadCurve curve) { SetCurve(curve.X1(), curve.Y1(), curve.CtrlX(), curve.CtrlY(), curve.X2(), curve.Y2()); }
public override string GetCssText() { var sb = new StringBuilder(); sb.Append("@import"); var href = GetHref(); if (href != null) { sb.Append(" url(\"").Append(href).Append("\")"); } var ml = GetMedia(); if (ml != null && ml.Length > 0) { sb.Append(" ").Append(GetMedia().MediaText); } sb.Append(";"); return sb.ToString(); }
public void SetRowId(string parameterName, RowId x) { RecordByName(parameterName, GetDeclaredMethod(typeof(CallableStatement), "setRowId", typeof(string), typeof(RowId)), parameterName, x); }
public EEnum GetIfcDimensionExtentUsage() { if (ifcDimensionExtentUsageEEnum == null) { ifcDimensionExtentUsageEEnum = (EEnum)EPackage.Registry.INSTANCE.GetEPackage(Ifc2x3tc1Package.eNS_URI) .GetEClassifiers()[810]; } return ifcDimensionExtentUsageEEnum; }
public static void Hash(byte[] data, byte[] output) { int len = output.Length; if (len == 0) return; int[] code = Calculate(data); for (int outIndex = 0, codeIndex = 0, shift = 24; outIndex < len && codeIndex < 5; ++outIndex, shift -= 8) { output[outIndex] = (byte)(code[codeIndex] >> shift); if (shift == 0) { shift = 32; // will be decremented by 8 before next iteration ++codeIndex; } } }
[ConditionalOnClass(typeof(Context), typeof(DataLinkType))] //[ConditionalOnBean(typeof(Context))] [Bean(DATALINK_TYPE_BEAN_NAME)] public DataLinkType DataLinkType([Qualifier(CONTEXT_BEAN_NAME)] Context context) { DataLinkType dataLinkType = context.PcapDataLink(); if (Logger.IsDebugEnabled) { Logger.Debug($"Datalink type: {dataLinkType}."); } return dataLinkType; }
public T GetValueOrDefault<T>(string key, T defaultValue) { return data.GetValueOrDefault(key, typeof(T), defaultValue); }
public override void Authenticate() { lock (this) { if (this.remoteUser != null) { // Set the UID for the principal this.myPrincipal.SetUID(this.remoteUser); // Check that the principal UID matches the remote user string newUid = this.myPrincipal.GetUID(); if (this.remoteUser.Equals(newUid)) { if (log.IsInfoEnabled) { log.Info($"Authentication REMOTE_USER(\"{this.remoteUser}\")."); } this.isauth = true; } else if (log.IsInfoEnabled) { log.Info($"Authentication failed. REMOTE_USER(\"{this.remoteUser}\") != user(\"{newUid}\")."); } } else if (log.IsInfoEnabled) { log.Info($"Authentication failed. REMOTE_USER not set for(\"{this.myPrincipal.GetUID()}\")."); } base.Authenticate(); return; } }
public static File.PSetAclAction ToProto(SetAclAction aclAction) { switch (aclAction) { case SetAclAction.REPLACE: return File.PSetAclAction.REPLACE; case SetAclAction.MODIFY: return File.PSetAclAction.MODIFY; case SetAclAction.REMOVE: return File.PSetAclAction.REMOVE; case SetAclAction.REMOVE_ALL: return File.PSetAclAction.REMOVE_ALL; case SetAclAction.REMOVE_DEFAULT: return File.PSetAclAction.REMOVE_DEFAULT; default: throw new InvalidOperationException("Unrecognized set acl action: " + aclAction); } }
private string ParseCellInlineStringText(XMLEventReader xer) { string result = string.Empty; XMLEvent xe; while ((xe = xer.NextTag()).IsStartElement()) { string elementName = xe.AsStartElement().GetName().LocalPart.ToUpper(); switch (elementName) { case "T": // normal text result = xer.GetElementText(); break; case "R": // rich text (returned as normal text) result = ParseCellInlineStringRichText(xer); break; case "RPH": // phonetic (ignored) case "PHONETICPR": // phonetic properties (ignored) SkipXMLElementHierarchy(xer); break; default: LOG.Error($"Unknown inline string tag: {elementName}"); throw new FormatNotUnderstoodException($"Unknown inline string tag: {elementName}"); } } return result; }
public static DateTime FromDateFields(DateTime? date) { if (date == null) { throw new ArgumentException("The date must not be null"); } DateTime validDate = date.Value; if (validDate.Ticks < 0) { // handle years in era BC GregorianCalendar cal = new GregorianCalendar(); cal.SetDate(validDate); return FromCalendarFields(cal); } return new DateTime( validDate.Year, validDate.Month, validDate.Day, validDate.Hour, validDate.Minute, validDate.Second, validDate.Millisecond ); }
public override StorageUri TransformUri(StorageUri resourceUri, OperationContext opContext) { return new StorageUri( this.TransformUri(resourceUri.PrimaryUri, opContext), this.TransformUri(resourceUri.SecondaryUri, opContext) ); }
public override void WriteExternal(BinaryWriter writer) { base.WriteExternal(writer); byte[] buf = System.Text.Encoding.UTF8.GetBytes(wsId); writer.Write(buf.Length); writer.Write(buf); }
public int Add(MtasToken token) { int id = token.Id; tokenCollection[id] = token; return id; }
public static Generator<Vector2F> Create() { return new Vector2FGenerator(PrimitiveGenerators.Doubles( GeneratorConstants.BoundLargeFloatLower, GeneratorConstants.BoundLargeFloatUpper )); }
public void FilterOnAllData(ALasDataManager lasHandler) { var angleSet = new ConcurrentSkipListSet<double>(); var distanceSet = new ConcurrentSkipListSet<double>(); if (isFirstStatsCalculation) { pm.BeginTask("Calculating initial statistics...", tinGeometries.Length); } else { pm.BeginTask("Filtering all data on seeds tin...", tinGeometries.Length); } try { var newTotalLeftOverCoordinateList = new List<Coordinate>(); if (threadsNum > 1) { // multithreaded var tRun = new ThreadedRunnable(threadsNum, null); foreach (var tinGeom in tinGeometries) { tRun.ExecuteRunnable(() => { var leftOverList = RunFilterOnAllData(lasHandler, angleSet, distanceSet, tinGeom); lock (newTotalLeftOverCoordinateList) { newTotalLeftOverCoordinateList.AddRange(leftOverList); } }); } tRun.WaitAndClose(); } else { foreach (var tinGeom in tinGeometries) {
public void SetRegularExpression(string regularExpression) { if (regularExpression != null) this.regularExpression = new Regex(regularExpression); else this.regularExpression = null; }
public static Context Antichain<G>(List<G> set) where G : PartiallyOrdered { return new Context(set, set, new Equal()); }
private IAtomContainerSet ReadAtomContainerSet(IAtomContainerSet som) { try { string line = input.ReadLine()?.Trim(); while (line != null) { logger.Debug($"Line: {line}"); string name = Suffix(line); try { IAtomContainer molecule = sp.ParseSmiles(line); molecule.SetProperty("SMIdbNAME", name); som.AddAtomContainer(molecule); } catch (CDKException exception) { logger.Warn($"This SMILES could not be parsed: {line}"); logger.Warn($"Because of: {exception.Message}"); logger.Debug(exception); IAtomContainer empty = som.Builder.NewInstance<IAtomContainer>(0, 0, 0, 0); empty.SetProperty(IteratingSMILESReader.BAD_SMILES_INPUT, line); som.AddAtomContainer(empty); } line = input.ReadLine(); // Move to the next line } } catch (Exception exception) { logger.Error($"Error while reading SMILES line: {exception.Message}"); logger.Debug(exception); } return som; }
public void Validate(File objectAsFile, string format, int validationType, string phase) { dov.Validate(objectAsFile, format, validationType, phase); }
public override void Solve(DefaultSolverScope<Solution_> solverScope) { var phaseScope = new PartitionedSearchPhaseScope<Solution_>(solverScope); var partList = solutionPartitioner.SplitWorkingSolution(solverScope.GetScoreDirector(), runnablePartThreadLimit); int partCount = partList.Count; phaseScope.SetPartCount(partCount); PhaseStarted(phaseScope); var executor = CreateThreadPoolExecutor(partCount); var childThreadPlumbingTermination = new ChildThreadPlumbingTermination(); var partitionQueue = new PartitionQueue<Solution_>(partCount); Semaphore runnablePartThreadSemaphore = runnablePartThreadLimit == null ? null : new Semaphore(runnablePartThreadLimit, true); try { for (int partIndex = 0; partIndex < partList.Count; partIndex++) { Solution_ part = partList[partIndex]; var partitionSolver = BuildPartitionSolver(childThreadPlumbingTermination, runnablePartThreadSemaphore, solverScope); partitionSolver.AddEventListener((event) => { var childScoreDirector = partitionSolver.SolverScope.GetScoreDirector(); var move = PartitionChangeMove.CreateMove(childScoreDirector, partIn
public static Bitmap ResizeScreenshotIfNeeded(IWebDriver driver, Bitmap screenshotImage) { double devicePixelRatio = 1.0; try { var pixelRatio = (double)((IJavaScriptExecutor)driver).ExecuteScript("return window.devicePixelRatio;"); devicePixelRatio = pixelRatio; } catch (Exception ex) { Console.WriteLine(ex); } if (devicePixelRatio > 1.0 && screenshotImage.Width > 0) { var screenSize = (long)((IJavaScriptExecutor)driver).ExecuteScript("return Math.max(" + "document.body.scrollWidth, document.documentElement.scrollWidth," + "document.body.offsetWidth, document.documentElement.offsetWidth," + "document.body.clientWidth, document.documentElement.clientWidth);"); double estimatedPixelRatio = (double)screenshotImage.Width / screenSize; if (estimatedPixelRatio > 1.0) { int newWidth = (int)(screenshotImage.Width / estimatedPixelRatio); int newHeight = (int)(screenshotImage.Height / estimatedPixelRatio); var scaledImage = new Bitmap(newWidth, newHeight); using (Graphics
protected string ResolveHelpText(CultureInfo locale) { string helpText = GetHelpText().Key(locale); if (GetColumnForTexts() != null && GetItem().Get(GetColumnForTexts()) != null) { helpText = string.Format(new MessageFormat(helpText, locale), GetItem().Get(GetColumnForTexts())); } return helpText; }
private void SetContentTypeHeader(HttpResponse response, URLConnection connection) { response.Headers.Set(CONTENT_TYPE, mimeTypesMap.GetContentType(connection.Url.Path)); }
public Flowable<Transformed> One(string id) { try { return BaseQuery() .One(id) .Filter(entry => entry.ContentType().Id.Equals(ContentTypeId)) .Select(entry => Transform(entry)); } catch (NullReferenceException) { throw new CDAResourceNotFoundException(typeof(CDAEntry), id); } }
public Task VerifyDomainOwnershipAsync(string resourceGroupName, string certificateOrderName, Action<Void> serviceCallback) { return ServiceFuture.FromResponse(VerifyDomainOwnershipWithServiceResponseAsync(resourceGroupName, certificateOrderName), serviceCallback); }
public int CompareTo(object obj) { var that = (DbEntityColumnDescriptor)obj; if (this.isId != that.isId) { return this.isId ? -1 : 1; // IDs should be the first in the array } return string.Compare(this.columnName, that.columnName); }
public TableIdx GetTableIdx(string tableName, params string[] keys) { TableIdx ret = null; string key = $"{tableName}-{string.Join("-", keys)}"; var val = this.tableidxs.FirstOrDefault(t => t.GetKey().Equals(key)); if (val != null) { ret = val; ret.SetCreated(false); } else { ret = new TableIdx().SetCreated(true).SetTable(tableName).SetIdx(this.currentIdx++).SetKey(key); this.tableidxs.Add(ret); } return ret; }
public static void AddListener<L, K>(Dictionary<K, ListenerList<L>> map, K key, L listener) { if (!map.TryGetValue(key, out var list)) { list = new ListenerList<L>(); map[key] = list; } list.Add(listener); }
public static List<string> ContentAsList(IEnumerable<Example> cells) { return new List<string>(Content(cells)); }
private object ReadResolve() { var bean = Container.Instance(contextId).Services().Get<ContextualStore>().GetContextual<Bean<object>, object>(beanId); if (bean == null) { throw BeanLogger.Log.ProxyDeserializationFailure(beanId); } return Container.Instance(contextId).DeploymentManager().GetClientProxyProvider().GetClientProxy(bean); }
public void Subscriber(string path, ServiceRefAmp serviceRef, Result<Cancel> result) { if (string.IsNullOrEmpty(path)) { result.Fail(new ServiceException($"Invalid event location '{path}'")); return; } string address = Address(path); EventNodeAsset node = LookupPubSubNode(address); Cancel cancel = node.SubscribeImpl(serviceRef); result.Ok(cancel); }
private void HandleContextMenu(TreeView tree, int x, int y) { TreeNode node = tree.GetNodeAt(x, y); if (node != null) { tree.SelectedNode = node; if (!node.Nodes.Count.Equals(0)) { tree.SelectedNode = null; return; } var info = (AppInfo)node.Tag; ToolStripMenuItem copyName = new ToolStripMenuItem("Copy Name"); copyName.Click += (s, e) => { Clipboard.SetText(info.App.GetSimpleName()); }; ToolStripMenuItem copyPath = new ToolStripMenuItem("Copy Path"); copyPath.Click += (s, e) => { string path = UtilIO.GetSourcePath(info.App.GetPackage().GetName(), info.App.GetSimpleName()); Clipboard.SetText(path); }; ToolStripMenuItem github = new ToolStripMenuItem("Go to Github"); github.Click += (s, e) => OpenInGitHub(info); ContextMenuStrip submenu = new ContextMenuStrip(); submenu.Items.Add(copyName); submenu.Items.Add(copyPath); submenu.Items.Add(github); submenu.Show(tree, new Poin
public void SetESidCP(int? newESidCP) { int? oldESidCP = eSidCP; eSidCP = newESidCP; if (ENotificationRequired()) { ENotify(new ENotificationImpl(this, Notification.SET, AfplibPackage.ENCODING_SCHEME_ID__ESID_CP, oldESidCP, eSidCP)); } }
public JobSpecMonitor ForConfig(Config localScopeConfig, MutableJobCatalog jobCatalog) { if (!localScopeConfig.HasPath(TEMPLATE_KEY)) { throw new ArgumentException("Template key is required."); } if (!localScopeConfig.HasPath(TOPIC_KEY)) { throw new ArgumentException("Topic key is required."); } string topic = localScopeConfig.GetString(TOPIC_KEY); Uri baseUri; try { baseUri = new Uri(localScopeConfig.GetString(BASE_URI_KEY)); } catch (UriFormatException) { throw new IOException($"Invalid base URI {localScopeConfig.GetString(BASE_URI_KEY)}"); } string templateURIString = localScopeConfig.GetString(TEMPLATE_KEY); Uri template; try { template = new Uri(templateURIString); } catch (UriFormatException) { throw new IOException($"Invalid template URI {templateURIString}"); } var mapBuilder = new Dictionary<string, string>(); if (localScopeConfig.HasPath(EXTRACT_KEYS)) { var extractKeys = localScopeConfig.GetConfig(EXTRACT_KEYS); foreach (var entry in extractKeys.
public static List<CommercePriceListUserSegmentEntryRel> ToModels(CommercePriceListUserSegmentEntryRelSoap[] soapModels) { if (soapModels == null) { return null; } List<CommercePriceListUserSegmentEntryRel> models = new List<CommercePriceListUserSegmentEntryRel>(soapModels.Length); foreach (var soapModel in soapModels) { models.Add(ToModel(soapModel)); } return models; }
public N AdjacentNode(object node) { if (node.Equals(nodeU)) { return nodeV; } else if (node.Equals(nodeV)) { return nodeU; } else { throw new ArgumentException($"EndpointPair {this} does not contain node {node}"); } }
private void ImportResource(Node parentNode, Stream fileIn, string resourceType, ArtifactDescriptor artifact) { // Note that artifactBean has been initialized within constructor // resourceType can be jar, pom, metadata string filename; if (resourceType.Equals("metadata")) { filename = "maven-metadata.xml"; } else { filename = string.Format("{0}-{1}.{2}", artifact.GetArtifactId(), artifact.GetVersionId(), resourceType); } Stream fout = null; FileInfo tmpFile = null; try { string tmpFilename = GetUniqueFilename(filename); tmpFile = new FileInfo(Path.GetTempFileName()); tmpFile = new FileInfo(Path.Combine(tmpFile.DirectoryName, tmpFilename)); fout = tmpFile.Create(); fileIn.CopyTo(fout); fout.Flush(); } catch (FileNotFoundException e) { LOG.Error("Cannot create .tmp file for storing artifact", e); } catch (IOException e) { LOG.Error("IO exception on .tmp file for storing artifact", e); } finally { fileIn.Close(); fout?.Cl
public void SetViewHeight(int newHeight) { if (newHeight > 0) { originalHeight = newHeight; var layoutParams = (Android.Widget.RelativeLayout.LayoutParams)view.LayoutParameters; layoutParams.Height = newHeight; view.LayoutParameters = layoutParams; } }
[CheckReturnValue] [SchedulerSupport(SchedulerSupport.None)] public final Single<bool> All(Func<T, bool> predicate) { if (predicate == null) throw new ArgumentNullException(nameof(predicate), "predicate is null"); return RxJavaPlugins.OnAssembly(new ObservableAllSingle<T>(this, predicate)); }
public IIsotope[] GetIsotopes(double exactMass, double difference) { List<IIsotope> list = new List<IIsotope>(); foreach (var isotopes in this.isotopes) { if (isotopes == null) continue; foreach (IIsotope isotope in isotopes) { if (Math.Abs(isotope.GetExactMass() - exactMass) <= difference) { list.Add(Clone(isotope)); } } } return list.ToArray(); }
protected void Connect(SocketAddress address, int timeout) { bool connected = false; try { if (address == null || !(address is IPEndPoint)) throw new ArgumentException("unsupported address type"); IPEndPoint addr = (IPEndPoint)address; if (addr.Address.Equals(IPAddress.None)) throw new SocketException((int)SocketError.HostNotFound); this.port = addr.Port; this.address = addr.Address; ConnectToAddress(this.address, port, timeout); connected = true; } finally { if (!connected) { try { Close(); } catch (IOException) { // Do nothing. If connect threw an exception then it will be passed up the call stack. } } } }
public static Matrix ReadMatrix(FileInfo matrix, Format format) { switch (format) { // Assume all sparse formats will fit in memory. case Format.SVDLIBC_SPARSE_TEXT: case Format.SVDLIBC_SPARSE_BINARY: case Format.MATLAB_SPARSE: case Format.CLUTO_SPARSE: return ReadMatrix(matrix, format, Type.SPARSE_IN_MEMORY, false); // Assume all dense formats will fit in memory. case Format.SVDLIBC_DENSE_TEXT: case Format.SVDLIBC_DENSE_BINARY: case Format.DENSE_TEXT: case Format.CLUTO_DENSE: return ReadMatrix(matrix, format, Type.DENSE_IN_MEMORY, false); default: throw new NotSupportedException($"Reading matrices of {format} format is not currently supported. " + "Email s-space-research-dev@googlegroups.com to request its inclusion and it will be quickly added."); } }
public static string GetContentFromUrlAsString(string url, Dictionary<string, string> inCookies, Dictionary<string, string> outCookies, bool trustAllCerts) { byte[] bytes = GetContentFromUrl(url, inCookies, outCookies, trustAllCerts); return bytes == null ? null : System.Text.Encoding.UTF8.GetString(bytes); }
public void SetAdditionalProperties(Dictionary<string, string> additionalProperties) { // no need for validation, the method will create a new (empty) object if the provided parameter is null. // create a defensive copy of the dictionary and all its properties if (additionalProperties == null) { // create a new (empty) properties dictionary if the provided parameter was null this.additionalProperties = new ConcurrentDictionary<string, string>(); } else { // create a defensive copy of the dictionary and all its properties // the code looks a little more complicated than a simple "AddRange()", but it catches situations // where a Dictionary is provided that supports null values (e.g. a Dictionary) vs Dictionary implementations // that do not (e.g. ConcurrentDictionary). this.additionalProperties = new ConcurrentDictionary<string, string>(); foreach (var entry in additionalProperties) { var key = entry.Key; var value = entry.Value; if (value != null) { this.additionalProperties.TryAdd(key, value); } } } }
private Type FindType(string typeString) { if ("viewReport".Equals(typeString, StringComparison.OrdinalIgnoreCase)) { return Type.VIEW; } else if ("textContent".Equals(typeString, StringComparison.OrdinalIgnoreCase)) { return Type.TEXT; } throw new UnknownDashletTypeException(typeString); }
public static bool IsSuperSenseFeatures(TrainingParameters parameters) { string mfsFeatures = GetSuperSenseFeatures(parameters); return !mfsFeatures.Equals(Flags.DEFAULT_FEATURE_FLAG, StringComparison.OrdinalIgnoreCase); }
protected void Shutdown() { if (m_deadConnectionFuture != null) { m_deadConnectionFuture.Cancel(false); try { m_deadConnectionFuture.Get(); } catch (Exception) { } } if (m_topologyCheckFuture != null) { m_topologyCheckFuture.Cancel(false); try { m_topologyCheckFuture.Get(); } catch (Exception) { } } if (m_maxConnectionUpdater != null) { m_maxConnectionUpdater.Cancel(false); } if (m_acceptor != null) { m_acceptor.Shutdown(); } if (m_adminAcceptor != null) { m_adminAcceptor.Shutdown(); } if (m_snapshotDaemon != null) { m_snapshotDaemon.Shutdown(); } if (m_migratePartitionLeaderExecutor != null) { m_migratePartitionLeaderExecutor.Shutdown(); } m_notifier.Shutdown(); }
public static FloatBinding NextAfter(float start, ObservableFloatValue direction) { return CreateFloatBinding(() => Math.NextAfter(start, direction.Get()), direction); }
private Uri ComputeEndpoint() { string endpoint = this.config.GetEndpoint(); try { if (endpoint == null) { if (this.IsRegionSupported()) { endpoint = string.Format("{0}://{1}.{2}.{3}", this.config.GetProtocol(), this.serviceId, this.config.GetRegion(), AbstractBceClient.DEFAULT_SERVICE_DOMAIN); } else { endpoint = string.Format("{0}://{1}.{2}", this.config.GetProtocol(), this.serviceId, AbstractBceClient.DEFAULT_SERVICE_DOMAIN); } } return new Uri(endpoint); } catch (UriFormatException e) { // only if the endpoint specified in the client configuration is not a valid URI, which is not expected. throw new ArgumentException("Invalid endpoint." + endpoint, e); } }
public sealed synchronized void Stop() { LaunchingMessageKind.IJMX0003.Format(); UnRegisterMBeans(); try { if (this.jmxConnectorServer != null) { this.jmxConnectorServer.Stop(); } } catch (IOException) { // Do nothing } try { UnicastRemoteObject.UnexportObject(register, true); } catch (NoSuchObjectException) { // Do nothing } }
public void SetButtons(System.Collections.Generic.ICollection<Button> buttons) { if (buttons == null) { this.buttons = null; return; } this.buttons = new List<Button>(buttons); }
protected bool RunJavaCompiler(string classDirectory, IEnumerable<string> sourcePathDirectories, IEnumerable<string> classPathEntries, bool enableCompilerOutput, bool enableOptimization, IProgressMonitor progress) { string encoding = this.encodingProvider.GetDefaultEncoding(); if (string.IsNullOrEmpty(encoding)) { encoding = null; } if (progress.IsCanceled()) { return false; } using (var outWriter = GetStubCompilerOutputWriter()) using (var errWriter = enableCompilerOutput ? GetErrorCompilerOutputWriter() : GetStubCompilerOutputWriter()) { if (progress.IsCanceled()) { return false; } return GetJavaCompiler().Compile( classDirectory, sourcePathDirectories, classPathEntries, GetBootClassPath(), GetJavaSourceVersion(), encoding, IsJavaCompilerVerbose(), enableOptimization ? GetOptimizationLevel() : (int?)null, outWriter, errWriter, GetLogger(), progress); } }
public FastBuildTree PutUnsafe(string name, object value) { map[name] = value; return this; }
public Field[] RetrieveFields(Type clazz) { HashSet<Field> fieldsSet = new HashSet<Field>(); foreach (var fld in clazz.GetFields(BindingFlags.Instance | BindingFlags.NonPublic)) { int modifiersMask = (int)fld.Attributes; if ((modifiersMask & (int)FieldAttributes.Private) != 0 && (modifiersMask & (int)FieldAttributes.Static) == 0) { fieldsSet.Add(fld); } } Type superClazz = clazz.BaseType; if (superClazz != null && superClazz != typeof(object)) { foreach (var fld in RetrieveFields(superClazz)) { fieldsSet.Add(fld); } } return fieldsSet.ToArray(); }
private DockerSlave ProvisionWithWait(DockerSlaveTemplate template, ProvisioningActivity.Id id) { var dockerContainerLifecycle = template.GetDockerContainerLifecycle(); var imageId = dockerContainerLifecycle.GetImage(); var computerLauncher = template.GetLauncher(); // Pull image dockerContainerLifecycle.GetPullImage().Exec(GetClient(), imageId, new StreamTaskListener(new NullStream())); // Set the operating system if it's not already cached if (template.GetOsType() == null) { template.SetOsType(DetermineOsType(imageId)); } LOG.Debug($"Trying to run container for {imageId}, operating system {template.GetOsType()}"); var containerId = RunContainer(template); InspectContainerResponse ir; try { ir = GetClient().InspectContainerCmd(containerId).Exec(); } catch (ProcessingException ex) { LOG.Error($"Failed to run container for {imageId}, clean-up container"); dockerContainerLifecycle.GetRemoveContainer().Exec(GetClient(), containerId); throw; } // Build a description up: string nodeDescription = $"Docker Node [{imageId} on "; try { nodeDescription
public override List<CommerceWishList> FindByG_U_D(long groupId, long userId, bool defaultWishList, int start, int end) { return FindByG_U_D(groupId, userId, defaultWishList, start, end, null); }
protected static SecurityContext CreateSC(string user, params string[] roles) { var subject = new Subject(); var principal = new SimplePrincipal(user); subject.GetPrincipals().Add(principal); if (roles != null) { foreach (var role in roles) { subject.GetPrincipals().Add(new SimplePrincipal(role)); } } return new DefaultSecurityContext(principal, subject); }
public override List<CommercePriceEntry> FindByGroupId(long groupId, int start, int end) { return FindByGroupId(groupId, start, end, null); }
public string GetLabel() { if (log.IsLoggable(LogLevel.Debug)) { var methodName = "GetLabel"; // $NON-NLS-1$ log.Entering(typeof(DependencyList).FullName, methodName); log.Exiting(typeof(DependencyList).FullName, methodName, label); } return label; }
public static bool Execute(FileInfo source, FileInfo destination, bool renameEmptyFiles) { if (renameEmptyFiles || (source.Length > 0)) { return source.MoveTo(destination.FullName) != null; } return source.Delete(); }
public void AddSuggestions(SuggestionsResult result, string bucket, TokenSource source) { // Add result to proper bucket and remove from waiting QueryToken query = result.GetQueryToken(); lock (mLock) { mResultMap[bucket] = result; if (mWaitingForResults.TryGetValue(query, out var waitingForBuckets)) { waitingForBuckets.Remove(bucket); if (waitingForBuckets.Count == 0) { mWaitingForResults.Remove(query); } } } // Rebuild the list of suggestions in the appropriate order string currentTokenString = source.GetCurrentTokenString(); lock (mLock) { mSuggestions.Clear(); List<Suggestible> suggestions = mSuggestionsListBuilder.BuildSuggestions(mResultMap, currentTokenString); // If we have suggestions, add them to the adapter and display them if (suggestions.Count > 0) { mSuggestions.AddRange(suggestions); mSuggestionsVisibilityManager.DisplaySuggestions(true); } else { HideSuggestionsIfNecessary(result.GetQueryToken(), source); } } NotifyData
void FireMemberAdded(AsteriskQueueMemberImpl member) { lock (listeners) { foreach (AsteriskQueueListener listener in listeners) { try { listener.OnMemberAdded(member); } catch (Exception e) { logger.Warn("Exception in OnMemberAdded()", e); } } } }
public static JMXServiceURL GetLocalConnectorAddress(Process p, bool startAgent) { return GetLocalConnectorAddress(p.Id.ToString(), startAgent); }
public bool RemoveBusLine(string name) { var iterator = this.busLines.GetEnumerator(); BusLine busLine; int i = 0; while (iterator.MoveNext()) { busLine = iterator.Current; if (name.Equals(busLine.GetName())) { iterator.Dispose(); busLine.SetContainer(null); busLine.SetEventFirable(true); FireShapeChanged(new BusChangeEvent(this, BusChangeEventType.LINE_REMOVED, busLine, i, "shape", null, null)); CheckPrimitiveValidity(); return true; } i++; } return false; }
public override SubmitterDocument FindByRootAndString(RootDocument rootDocument, string str) { SubmitterDocument submitterDocument = FindByFileAndString(rootDocument.Filename, str); if (submitterDocument == null) { return null; } Submitter submitter = submitterDocument.GedObject; submitter.SetParent(rootDocument.GedObject); return submitterDocument; }
public static CassandraThriftFacade ForSeedsAndPort(string seeds, int defaultPort) { string seed = seeds.Contains(",") ? seeds.Substring(0, seeds.IndexOf(',')) : seeds; HostAndPort host = HostAndPort.FromString(seed).WithDefaultPort(defaultPort); return new CassandraThriftFacade(new TFramedTransport(new TSocket(host.GetHostText(), host.GetPort()))); }
public XmlWriter CreateXmlWriter(string systemId) { var res = new XmlResolver(); var os = res.ResolveOutput(systemId); return Create(os, true); }
public void CmdProc(Interp interp, TclObject[] argv) { int currentObjIndex, len, i; int objc = argv.Length - 1; bool doBackslashes = true; bool doCmds = true; bool doVars = true; StringBuilder result = new StringBuilder(); string s; char c; for (currentObjIndex = 1; currentObjIndex < objc; currentObjIndex++) { if (!argv[currentObjIndex].ToString().StartsWith("-")) { break; } int opt = TclIndex.Get(interp, argv[currentObjIndex], validCmds, "switch", 0); switch (opt) { case OPT_NOBACKSLASHES: doBackslashes = false; break; case OPT_NOCOMMANDS: doCmds = false; break; case OPT_NOVARS: doVars = false; break; default: throw new TclException(interp, $"SubstCrCmd.CmdProc: bad option {opt} index to cmds"); } } if (currentObjIndex != objc) { throw
public bool AddGrant(ClusterNode node, string sessionId, ResourceRequestInfo req) { lock (node) { if (node.Deleted) { return false; } if (!node.CheckForGrant(Utilities.GetUnitResourceRequest(req.Type), resourceLimit)) { return false; } node.AddGrant(sessionId, req); loadManager.IncrementLoad(req.Type); hostsToSessions[node].Add(sessionId); if (!node.CheckForGrant(Utilities.GetUnitResourceRequest(req.Type), resourceLimit)) { RunnableIndices r = typeToIndices[req.Type]; r.DeleteRunnable(node); } } return true; }
public DataSetIterator GetTrainIterator() { return new DataSetIterator() { public DataSet Next(int i) { throw new NotSupportedException(); } public List<string> GetLabels() { return backedIterator.GetLabels(); } public int InputColumns() { return backedIterator.InputColumns(); } public void Remove() { throw new NotSupportedException(); } public int TotalOutcomes() { return backedIterator.TotalOutcomes(); } public bool ResetSupported() { return backedIterator.ResetSupported(); } public bool AsyncSupported() { return backedIterator.AsyncSupported(); } public void Reset() { resetPending.Value = true; } public int Batch() { return backedIterator.Batch(); } public void SetPreProcessor(DataSetPreProcessor dataSetPreProcessor) { backedIterator.SetPreProcessor(dataSetPreProcessor); } public DataSetPreProcessor GetPreProcessor() { return backedIterator.GetPreProcessor(); } public bool HasNext() { if (resetPending.Value) { if (ResetSupported()) { bac
public void Sign(PrivateKey key, string digest) { Add(Feature.Create.StringFeature(DIGEST_KEY, digest)); using (var digester = MessageDigest.GetInstance(digest)) { var ser = Unsigned(); var digestValue = digester.Digest(ser); using (var cipher = Cipher.GetInstance(key.Algorithm)) { cipher.Init(Cipher.ENCRYPT_MODE, key); var signature = cipher.DoFinal(digestValue); Add(signature); } } }
